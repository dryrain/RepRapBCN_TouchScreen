file C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318        
003998  004319  //------------------------------------------------------------------------------
003999  004320  // FILEIO Error Code Constants
004000  004321  //------------------------------------------------------------------------------
004001  004322  #CONST
004002  004348  #END
004003  004349        
004004  004350  //------------------------------------------------------------------------------
004005  004351  // DISK struct offsets
004006  004352  //------------------------------------------------------------------------------
004007  004353  #CONST
004008  004370  #END
004009  004371        
004010  004372  //------------------------------------------------------------------------------
004011  004373  // FILE struct offsets
004012  004374  //------------------------------------------------------------------------------
004013  004375  #CONST
004014  004394  #END
004015  004395        
004016  004396        
004017  004397  //------------------------------------------------------------------//
004018  004398  //        Sound Class Services
004019  004399  //------------------------------------------------------------------//
004020  004400        
004021  004401  func snd_Volume("var"), 0;
004022  004402  // Syntax: snd_Volume("var");
004023  004403  // Usage : snd_Volume(30);
004024  004404  // Notes : set sound playback volume.  Var must
004025  004405  //       : be in the range from 8 (min volume)
004026  004406  //       : to 127 (max volume). If var is less
004027  004407  //       : than 8 volume is set to 8, and if
004028  004408  //       : var > 127 it is set to 127.
004029  004409        
004030  004410  func snd_Pitch("pitch"), 1;
004031  004411  // func snd_Pitch("freq"), 1;
004032  004412  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004033  004413  // Notes : sets the samples playback rate to a different frequency
004034  004414  //       : The minimum value is 4khz
004035  004415  //       : Setting the pitch to zero restores the original sample rate
004036  004416  //       : Return value is the samples original sample rate.
004037  004417        
004038  004418  func snd_BufSize("var"), 0;
004039  004419  // Syntax: snd_BufSize("var");
004040  004420  // Usage : snd_BufSize(2);
004041  004421  // Notes : specify the a memory chunk size for the wavefile buffer.
004042  004422  //       : default size 1024 bytes.
004043  004423  //       : 0 = 1024 bytes (default)
004044  004424  //       : 1 = 2048 bytes
004045  004425  //       : 2 = 4096 bytes
004046  004426  //       : 3 = 8192 bytes
004047  004427        
004048  004428  func snd_Stop(), 0;
004049  004429  // Syntax: snd_Stop();
004050  004430  // Usage : snd_Stop();
004051  004431  // Notes : stop any sound that is playing, releasing
004052  004432  //       : buffers and closes any open wav file.
004053  004433        
004054  004434  func snd_Pause(), 0;
004055  004435  // Syntax: snd_Pause();
004056  004436  // Usage : snd_Pause();
004057  004437  // Notes : pauses any sound that is playing, does nothing
004058  004438  //       : until sound is resumed with snd_Continue().
004059  004439  //       : The sample cam be terminated with snd_Stop.
004060  004440  //       : buffers and closes any open wav file.
004061  004441        
004062  004442  func snd_Continue(), 0;
004063  004443  // Syntax: snd_Continue();
004064  004444  // Usage : snd_Continue();
004065  004445  // Notes : resume any sound that is paused by snd_Pause.
004066  004446        
004067  004447  func snd_Playing(), 1;
004068  004448  // Syntax: snd_Playing();
004069  004449  // Usage : r := snd_Playing();
004070  004450  // Notes : returns 0 if sound has finished playing,
004071  004451  //       : else return number of 512 byte blocks to go.
004072  004452        
004073  004453  func snd_Freq("Freq", "Duration"), 1;
004074  004454  // Syntax: snd_Freq("Freq", "Duration");
004075  004455  // Usage : r := snd_Freq(1000, 2000);
004076  004456  // Notes : Returns 0 if note cannot be played because a wav file is playing
004077  004457  //       : else return True.
004078  004458  //       : Minimum Freq is 20
004079  004459  //       : This will produce a pure Square wave and is designed for driving
004080  004460  //       : Piezo transducers which require this sort of drive. It can also be
004081  004461  //       : used to drive the amp on displays with audio.
004082  004462        
004083  004463        
004084  004464  func __reserved60(), 0; // do not remove
004085  004465  func __reserved61(), 0; // do not remove
004086  004466  func __reserved62(), 0; // do not remove
004087  004467        
004088  004468  //=========================================================================================================
004089  004469  // String functions
004090  004470  //=========================================================================================================
004091  004471        
004092  004472  func str_Ptr("&var"), 1;
004093  004473  // Syntax: str_Ptr(&var);
004094  004474  // Usage : p := str_Ptr(&var);
004095  004475  // Notes : return a byte pointer to a word region
004096  004476        
004097  004477  func str_GetD("&ptr", "&var"), 1;
004098  004478  // Syntax: str_GetD(&ptr, &var);
004099  004479  // Usage : ok := str_GetD(&ptr, &var);
004100  004480  // Notes : convert number in a string to DWORD ( myvar[2] )
004101  004481  //       : returns true if function succeeds, advancing ptr
004102  004482        
004103  004483  func str_GetW("&ptr", "&var"), 1;
004104  004484  // Syntax: str_GetW(&ptr, &var);
004105  004485  // Usage : ok := str_GetW(&ptr, &var);
004106  004486  // Notes : convert number in a string to WORD ( myvar )
004107  004487  //       : returns true if function succeeds, advancing ptr
004108  004488        
004109  004489  func str_GetHexW("&ptr", "&var"), 1;
004110  004490  // Syntax: str_GetHexW(&ptr, &var);
004111  004491  // Usage : ok := str_GetHexW(&ptr, &var);
004112  004492  // Notes : convert HEX number in a string to WORD ( myvar )
004113  004493  //       : returns true if function succeeds, advancing ptr
004114  004494        
004115  004495  func str_GetC("&ptr", "&var"), 1;
004116  004496  // Syntax: str_GetC(&ptr, &var);
004117  004497  // Usage : ok := str_GetC(&ptr, &var);
004118  004498  // Notes : get a valid ascii char in a string to WORD ( myvar )
004119  004499  //       : returns true if function succeeds, advancing ptr
004120  004500        
004121  004501  func str_GetByte("ptr"), 1;
004122  004502  // Syntax: str_GetByte(ptr);
004123  004503  // Usage : myvar := str_GetByte(ptr);
004124  004504  // Notes : get a byte to myvar
004125  004505  //       : returns value
004126  004506        
004127  004507  func str_GetWord("ptr"), 1;
004128  004508  // Syntax: GetWord(ptr);
004129  004509  // Usage : GetWord(ptr);
004130  004510  // Notes : get a word to myvar
004131  004511  //       : returns value
004132  004512        
004133  004513  func str_PutByte("ptr","val"), 0;
004134  004514  // Syntax: str_PutByte(ptr);
004135  004515  // Usage : myvar := str_PutByte(ptr);
004136  004516  // Notes : put a byte at ptr
004137  004517  //       : returns value
004138  004518        
004139  004519  func str_PutWord("ptr","val"), 0;
004140  004520  // Syntax: str_PutWord("ptr","val");
004141  004521  // Usage : str_PutWord(p,100);
004142  004522  // Notes : put word 100 at current pointer location
004143  004523  //       : returns value
004144  004524        
004145  004525  func str_Match("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Match(&ptr, *str);
004147  004527  // Usage : r := str_Match(&p, "hello");
004148  004528  // Notes : Case sensitive match
004149  004529  //       : returns true if function succeded, andvancing pointer to position past
004150  004530  //       : the matched item. Note that any whitespace characters are skipped
004151  004531  //       : in the source string prior to the test.
004152  004532        
004153  004533  func str_MatchI("&ptr", "*str"), 1;
004154  004534  // Syntax: str_MatchI(&ptr, *str);
004155  004535  // Usage : r := str_MatchI(&p, "hello");
004156  004536  // Notes : Case insensitive match
004157  004537  //       : returns true if function succeded, andvancing pointer to position past
004158  004538  //       : the matched item. Note that any whitespace characters are skipped
004159  004539  //       : in the source string prior to the test.
004160  004540        
004161  004541  func str_Find("&ptr", "*str"), 1;
004162  004542  // Syntax: str_Find(&ptr, *str);
004163  004543  // Usage : n := str_Find(&p, "hello");
004164  004544  // Notes : given the address of a pointer to a source string as the
004165  004545  //       : first argument, and a pointer to a test string as the second
004166  004546  //       : argument, attempt to find the position of the matching string
004167  004547  //       : in the source string. The test is performed with case sensitivity.
004168  004548  //       : return 0 if not found, else returns the address of the first
004169  004549  //       : character of the match. NB:- The source pointer is not altered.
004170  004550        
004171  004551  func str_FindI("&ptr", "*str"), 1;
004172  004552  // Syntax: str_Find(&ptr, *str);
004173  004553  // Usage : n := str_Find(&p, "hello");
004174  004554  // Notes : given the address of a pointer to a source string as the
004175  004555  //       : first argument, and a pointer to a test string as the second
004176  004556  //       : argument, attempt to find the position of the matching string
004177  004557  //       : in the source string. The test is performed with no case
004178  004558  //       : sensitivity, eg upper and lower case chars are accepted.
004179  004559  //       : return 0 if not found, else returns the address of the first
004180  004560  //       : character of the match. NB:- The source pointer is not altered.
004181  004561        
004182  004562  func str_Length("ptr"), 1;
004183  004563  // Syntax: str_Length(ptr);
004184  004564  // Usage : len := str_Ptr(mystring);
004185  004565  // Notes : return the length of a byte aligned string excluding terminator
004186  004566        
004187  004567  func str_Printf("&ptr", "*format"), 1;
004188  004568  // Syntax: str_Printf("&ptr", "*format");
004189  004569  // Usage : r := str_Printf(&p, "hello");
004190  004570  // Notes : refer to documentation
004191  004571  //       :
004192  004572        
004193  004573  func str_Cat("dest","src"), 1;
004194  004574  // Syntax: str_Append("&dest","&src");
004195  004575  // Usage : str_Append(&buf,"Hello");
004196  004576  // Notes : Appends a copy of the source string to the destination string.
004197  004577  //       : The terminating null character in destination is overwritten by
004198  004578  //       : the first character of source, and a new null-character is appended
004199  004579  //       : at the end of the new string formed by the concatenation of both in destination.
004200  004580  //       : returns destination.
004201  004581        
004202  004582  func str_CatN("dest","src","count"), 1;
004203  004583  // Syntax: str_Append("&dest","&src","count");
004204  004584  // Usage : str_Append(&buf,"Monday",3);
004205  004585  // Notes : Appends a copy of the source string to the destination string.
004206  004586  //       : The number of characters copied is limited by "count".
004207  004587  //       : The terminating null character in destination is overwritten by
004208  004588  //       : the first character of source, and a new null-character is appended
004209  004589  //       : at the end of the new string formed by the concatenation of both in destination.
004210  004590  //       : returns destination.
004211  004591        
004212  004592        
004213  004593  func str_ByteMove("src", "dest", "count"), 1;
004214  004594  // Syntax   : str_ByteMove(src, dest, bytecount);
004215  004595  // Input    : STR *source points to byte aligned source.
004216  004596  //          : STR *dest   points to byte aligned destination.
004217  004597  //          : VAR count   number of bytes to transfer.
004218  004598  // Usage    : nextpos := str_ByteMove(s, d, 100);
004219  004599  // Notes    : copy bytes from "src" to "dest", stopping only
004220  004600  //          : when "count" is exhausted.
004221  004601  //          : No terminator is appended, it is purely a
004222  004602  //          : byte copy, and any zeroes encountered will
004223  004603  //          : also be copied.
004224  004604  // Returns  : returns a pointer to the end of the destination
004225  004605  //          : (which is "dest" + "count")
004226  004606        
004227  004607        
004228  004608  func str_Copy("dest", "src"), 1;
004229  004609  // Syntax   : str_Copy(dest, src);
004230  004610  // Input    : STR *dest   points to byte aligned destination.
004231  004611  //          : STR *source points to byte aligned source.
004232  004612  // Usage    : nextplace := str_Copy(d, s);
004233  004613  // Notes    : copy a string from "src" to "dest", stopping only
004234  004614  //          : when the end of source string "src" is encountered
004235  004615  //          : (0x00 terminator).
004236  004616  //          : The terminator is always appended, even if "src" is
004237  004617  //          : an empty string.
004238  004618  // Returns  : returns a pointer to the 0x00 string terminator at
004239  004619  //          : end of "dest" (which is "dest" + str_Length(src); )
004240  004620        
004241  004621        
004242  004622  func str_CopyN("dest", "src", "count"), 1;
004243  004623  // Syntax   : str_CopyN(dest, src, bytecount);
004244  004624  // Input    : STR *dest   points to byte aligned destination.
004245  004625  //          : STR *source points to byte aligned source.
004246  004626  //          : VAR count   max number of chars to copy.
004247  004627  // Usage    : nextplace := str_CopyN(d, s, 100);
004248  004628  // Notes    : copy a string from "src" to "dest", stopping only
004249  004629  //          : when "count" is exhausted, or end of source
004250  004630  //          : string "str" is encountered (0x00 string terminator).
004251  004631  //          : The terminator is always appended, even if
004252  004632  //          : "count" is zero, or "src" is a null string.
004253  004633  // Returns  : returns a pointer to the 0x00 string terminator
004254  004634  //          : (which is "dest" + whatever was copied)
004255  004635        
004256  004636        
004257  004637  func __reserved63(), 0; // do not remove
004258  004638  func __reserved64(), 0; // do not remove
004259  004639  func __reserved65(), 0; // do not remove
004260  004640  func __reserved66(), 0; // do not remove
004261  004641        
004262  004642  //=========================================================================================================
004263  004643  // FLASH memory functions
004264  004644  //=========================================================================================================
004265  004645  func flash_GetByte("bank", "ptr"), 1;
004266  004646  // Syntax   : flash_GetByte(bank, ptr);
004267  004647  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004268  004648  // Notes    : Reads a single byte from any flash location.
004269  004649  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004270  004650  //          : which is the header signature for a valid program.
004271  004651  // Returns  : the byte value from the location
004272  004652        
004273  004653        
004274  004654  func flash_GetWord("bank", "ptr"), 1;
004275  004655  // Syntax   : flash_GetWord(bank, ptr);
004276  004656  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004277  004657  // Notes    : Reads a single word from any flash location.
004278  004658  //          : The pointer is byte aligned.
004279  004659  //          : If the bank is read protected, only the first word can be read
004280  004660  //          : which is the header signature for a valid program (0xAA55).
004281  004661  // Returns  : the byte value from the location
004282  004662        
004283  004663        
004284  004664  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004285  004665  // Syntax   : flash_Copy(bank, ptr);
004286  004666  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004287  004667  // Notes    : Copies bytes from any flash locations to a user buffer.
004288  004668  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004289  004669  //          : If the bank is read protected, 0 bytes will be read
004290  004670  //          : which is the header signature for a valid program (0xAA55).
004291  004671  // Returns  : the count of bytes transferred.
004292  004672        
004293  004673        
004294  004674  func flash_Run("bank"), 1;
004295  004675  // Syntax    : flash_Run(bankx);
004296  004676  // Usage     : res := flash_Run(FLASHBANK_5);
004297  004677  // Notes     : Restarts the processor, running code from the required
004298  004678  //           : flash bank. bank may be a variable, or one of the
004299  004679  //           : pre-defined constants:-
004300  004680  //           :    FLASHBANK_0                 //0x00
004301  004681  //           :    FLASHBANK_1                 //0x01
004302  004682  //           :    FLASHBANK_2                 //0x02
004303  004683  //           :    FLASHBANK_3                 //0x03
004304  004684  //           :    FLASHBANK_4                 //0x04
004305  004685  //           :    FLASHBANK_5                 //0x05
004306  004686  // returns    : This function should net return as it restarts
004307  004687  //        : the processor and jumps to the required bank,
004308  004688  //        : If it does return, -1 indicates incorrect/invalid
004309  004689  //        : bank number, and -2 indicates no valid program
004310  004690  //        : in the selected bank.
004311  004691        
004312  004692  func flash_Bank(), 1;
004313  004693  // Syntax   : flash_Bank();
004314  004694  // Usage    : myvar := flash_Bank();
004315  004695  // Notes    : Identifies which flash bank the code is running from.
004316  004696  // Returns  : The FLASH bank that code is currently running from, 0-5.
004317  004697        
004318  004698        
004319  004699  func flash_EraseBank("bank", "confirmation"), 1;
004320  004700  // Syntax   : flash_EraseBank(bank, confirmation);
004321  004701  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004322  004702  // Notes    : This function should be used with extreme caution.
004323  004703  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004324  004704  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004325  004705  //          : a protected bank will not be erased, and function will return with 0
004326  004706  //          : If the destination bank is the same as the execution bank, the processor will reset
004327  004707  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004328  004708  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004329  004709  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004330  004710  // Returns  : returns true if the function succeeded
004331  004711  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004332  004712        
004333  004713  func flash_LoadFile("bank", "filename"), 1;
004334  004714  // Syntax   : flash_LoadFile(bank, ptr);
004335  004715  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004336  004716  // Notes    : Copies a file from uSD to the required flashbank.
004337  004717  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004338  004718  // Returns  : returns true if the function succeeded.
004339  004719        
004340  004720        
004341  004721  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004342  004722  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004343  004723  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004344  004724  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004345  004725  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004346  004726  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004347  004727  // Returns  : returns true if the function succeeded.
004348  004728        
004349  004729        
004350  004730  func flash_putstr("bank", "ptr"), 1;
004351  004731  // Syntax   : flash_putstr(bank, ptr);
004352  004732  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004353  004733  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004354  004734  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004355  004735  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004356  004736        
004357  004737  func flash_Blit16("bank", "offset", "count"), 1;
004358  004738  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004359  004739  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004360  004740  // Notes    : Blit an image to a GRAM window from FLASH storage.
004361  004741  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004362  004742  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004363  004743        
004364  004744  func flash_Blit8("bank", "offset", "count"), 1;
004365  004745  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004366  004746  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004367  004747  // Notes    : Blit an image to a GRAM window from FLASH storage.
004368  004748  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004369  004749  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004370  004750        
004371  004751  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004372  004752  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004373  004753  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004374  004754  // Notes    : Blit an image to a GRAM window from FLASH storage.
004375  004755  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004376  004756  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004377  004757        
004378  004758  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004379  004759  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004380  004760  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004381  004761  // Notes    : Blit an image to a GRAM window from FLASH storage.
004382  004762  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004383  004763  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004384  004764        
004385  004765  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004386  004766  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004387  004767  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004388  004768  // Notes    : Blit an image to a GRAM window from FLASH storage.
004389  004769  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004390  004770  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004391  004771        
004392  004772  func flash_Exec("bank", "arglistptr"), 1;
004393  004773  // Syntax: res := flash_Exec("bank","arglistptr");
004394  004774  // Usage : res := flash_Exec("bank","arglistptr");
004395  004775  // Notes : returns like a function, current program
004396  004776  //       : calling program is kept active and control returns to it.
004397  004777  //       : If arglistptr is 0, no arguments are passed, else
004398  004778  //       : arglist points to an array, the first element being
004399  004779  //       : the number of elements in the array.
004400  004780  //       : func 'main' in the called bank accepts the arguments.
004401  004781  // WARNING Not currently implemented!
004402  004782        
004403  004783        
004404  004784  func __reserved68(), 0; // do not remove
004405  004785  func __reserved69(), 0; // do not remove
004406  004786  func __reserved70(), 0; // do not remove
004407  004787        
004408  004788  //=========================================================================================================
004409  004789  // I/O and hardware functions
004410  004790  //=========================================================================================================
004411  004791        
004412  004792        
004413  004793        
004414  004794        
004415  004795  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004416  004796  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004417  004797  // Syntax: pin_Pulseout(pin, value);
004418  004798  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004419  004799  // Notes : only available on PA0 to PA9
004420  004800  //       : Invert the state of an output for "value" milliseconds.
004421  004801  //       : pulseout is non blocking, that is, code execution may continue while
004422  004802  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004423  004803  //       : If not already an output, pin is automatically made a push/pull output,
004424  004804  //       : and the last state of its output latch will determine pulse polarity.
004425  004805  //       : It's its open drain state is not altered if the pin was already an output.
004426  004806  //       : If pulseout is called while pulseout is still active, the pulse timer
004427  004807  //       : will simply be updated with the new "value" and the pulse will continue
004428  004808  //       : with the extended value.
004429  004809  //       : returns true if the pin number is legal (usually ignored)
004430  004810        
004431  004811        
004432  004812  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004433  004813  // Syntax: pin_Counter(pin, mode, userfunc);
004434  004814  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004435  004815  // Notes : only available on PA4 to PA9
004436  004816  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004437  004817  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004438  004818  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004439  004819  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004440  004820  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004441  004821  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004442  004822  //       : The pin may be configured as an input or output, the function behaves the same.
004443  004823  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004444  004824  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004445  004825  //       : "mode" has the following effect:-
004446  004826  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004447  004827  //       : mode COUNT_RISE(1) = increment on every rising edge
004448  004828  //       : mode COUNT_FALL(2) = increment on every falling edge
004449  004829  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004450  004830        
004451  004831  //------------------------------------------------------------------//
004452  004832  // pin counter mode constants                                       //
004453  004833  //------------------------------------------------------------------//
004454  004834  #CONST
004455  004839  #END
004456  004840        
004457  004841  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004458  004842  // Syntax: Qencoder1(pinA, pinB, mode);
004459  004843  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004460  004844  // Notes : not available on pins PA14 and PA15
004461  004845  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004462  004846  //       : or written to at any time with peekW and pokeW using the following constants:-
004463  004847  //       : It is necessary to configure the pins first, depending on your requirements, eg
004464  004848  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004465  004849  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004466  004850  //       : Returns true if the pin numbers are legal (usually ignored)
004467  004851  //    QEN1_COUNTER_LO
004468  004852  //    QEN1_COUNTER_HI
004469  004853  //    QEN1_DELTA This is reset to 0 when read
004470  004854        
004471  004855  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004472  004856  // Syntax: Qencoder2(pinA, pinB, mode);
004473  004857  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004474  004858  // Notes : not available on pins PA14 and PA15
004475  004859  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004476  004860  //       : or written to at any time with peekW and pokeW using the following constants:-
004477  004861  //       : It is necessary to configure the pins first, depending on your requirements, eg
004478  004862  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004479  004863  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004480  004864  //       : Returns true if the pin numbers are legal (usually ignored)
004481  004865  //    QEN2_COUNTER_LO
004482  004866  //    QEN2_COUNTER_HI
004483  004867  //    QEN2_DELTA This is reset to 0 when read
004484  004868        
004485  004869        
004486  004870  func Qencoder1Reset(), 0;
004487  004871  // Syntax: Qencoder1Reset();
004488  004872  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004489  004873  // Notes :
004490  004874  //    QEN1_COUNTER_LO is reset to zero
004491  004875  //    QEN1_COUNTER_HI is reset to zero
004492  004876  //    QEN1_DELTA is reset to zero
004493  004877        
004494  004878  func Qencoder2Reset(), 0;
004495  004879  // Syntax: Qencoder2Reset();
004496  004880  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004497  004881  // Notes :
004498  004882  //    QEN2_COUNTER_LO is reset to zero
004499  004883  //    QEN2_COUNTER_HI is reset to zero
004500  004884  //    QEN2_DELTA is reset to zero
004501  004885        
004502  004886        
004503  004887  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004504  004888  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004505  004889  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004506  004890  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004507  004891  //       : Invert the state of an output at a "freq" freuency "count" times.
004508  004892  //       : PulseoutCount is non blocking, that is, code execution may continue while
004509  004893  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004510  004894  //       : If not already an output, pin is automatically made a push/pull output,
004511  004895  //       : and the last state of its output latch will determine pulse polarity.
004512  004896  //       : It's its open drain state is not altered if the pin was already an output.
004513  004897  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004514  004898  //       : will simply have the new "value" added to it.
004515  004899  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004516  004900  //       : returns true if the pin number is legal (usually ignored)
004517  004901        
004518  004902  func __reserved72(), 0; // do not remove
004519  004903        
004520  004904  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004521  004905  // Syntax: pwm_Init(pin, value);
004522  004906  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004523  004907  // Notes : only available on PA4 to PA9
004524  004908  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004525  004909  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004526  004910  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004527  004911  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004528  004912  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004529  004913  //       :                    : Repetition rate ~50hz or 20ms
004530  004914  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004531  004915  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004532  004916  //       : pwm_Init is non blocking and the pwm continues until turn off
004533  004917  //       : Returns true if the pin number is legal (usually ignored)
004534  004918        
004535  004919  //------------------------------------------------------------------------------
004536  004920  // PWM Constants
004537  004921  //------------------------------------------------------------------------------
004538  004922  #CONST
004539  004927  #END
004540  004928        
004541  004929  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004542  004930  // Syntax   : OW_Reset(PA0);
004543  004931  // Usage    : OW_Reset(PA0);
004544  004932  // Notes    : Only available on PA0 to PA13
004545  004933  //          : Resets  ONEWIRE device
004546  004934  //          : Returns the status, 0 = ACK.
004547  004935  //          :
004548  004936        
004549  004937  func OW_Read("pin"), 1;                              // read data from 1wire bus
004550  004938  // Syntax   : OW_Read(PA0);
004551  004939  // Usage    : arg1 := OW_Read(PA0);
004552  004940  // Notes    : Only available on PA0 to PA13
004553  004941  //          : Reads value of the ONEWIRE pin
004554  004942  //          : that was previously selected for ONEWIRE comms.
004555  004943  //          :
004556  004944  //          : pin = 0 : the next byte from the ONEWIRE bus
004557  004945        
004558  004946  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004559  004947  // Syntax   : OW_Read9(PA0);
004560  004948  // Usage    : OW_Read9(PA0);
004561  004949  // Notes    : Only available on PA0 to PA13
004562  004950  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004563  004951  //          : that was previously selected for ONEWIRE comms.
004564  004952  //          :
004565  004953  //          : read the 9 bits from the ONEWIRE bus
004566  004954        
004567  004955  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004568  004956  // Syntax   : OW_Write(PA0, arg);
004569  004957  // Usage    : OW_Write(PA0, arg);
004570  004958  // Notes    : Only available on PA0 to PA13
004571  004959  //          : Sends ONEWIRE data on the appropriate
004572  004960  //          : pin that was previously  selected as ONEWIRE comms.
004573  004961  //          :
004574  004962  //          : write arg to the ONEWIRE bus
004575  004963        
004576  004964  func __reserved77(), 0; // do not remove
004577  004965  func __reserved78(), 0; // do not remove
004578  004966        
004579  004967  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004580  004968  // Syntax: sys_GetDateVar(&year, &month, &day);
004581  004969  // Usage : sys_GetDateVar(&year, &month, &day);
004582  004970  // Notes : Retrieves the date values into variables
004583  004971        
004584  004972  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004585  004973  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004974  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004587  004975  // Notes : Retrieves the time values into variables
004588  004976        
004589  004977  func sys_PmmC(), 0;
004590  004978  // Syntax: sys_PmmC();
004591  004979  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004592  004980  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004593  004981  //       : Can be captured to a buffer using the to( function
004594  004982  //       : Returns nothing.
004595  004983        
004596  004984  func sys_Driver(), 0;
004597  004985  // Syntax: sys_Driver();
004598  004986  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004599  004987  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004600  004988  //       : Can be captured to a buffer using the to( function
004601  004989  //       : Returns nothing.
004602  004990        
004603  004991  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004604  004992  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004605  004993  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004606  004994  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004607  004995  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004608  004996  //       : elements in each buffer. This will need to be greater than "width" for negative
004609  004997  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004610  004998  //       : pass 0 as the address for any unused traces
004611  004999  //       : X position is incremented each point by "xstep" pixels.
004612  005000  //       : Y values are derived from a Y buffer "newy" (signed values).
004613  005001  //       : 2 buffers need to be supplied, "newy" contains new
004614  005002  //       : points to be drawn, "oldy" contains most recent set
004615  005003  //       : of points to be un-drawn. After the waveform is drawn,
004616  005004  //       : "newy" buffer is automatically copied to "oldy" buffer.
004617  005005        
004618  005006        
004619  005007  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004620  005008  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004621  005009  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004622  005010  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004623  005011  //       : and calls "COMPLETEfunction" when done.
004624  005012  //       : "rate" is samples in 100 of samples per second
004625  005013  //       : Any unused IOx pins should have their buffer addresses set to 0
004626  005014  //       : For performance reasons samples are taken in chunks of 32, thus if you
004627  005015  //       : request 33 samples there will be a delay of 31 samples before
004628  005016  //       : "COMPLETEfunction" is called
004629  005017  //       : If Touch is enabled this function should be called no more than once per
004630  005018  //       : millisecond, otherwise touch behaviour could be eratic.
004631  005019        
004632  005020        
004633  005021  func sys_ErrorMessage("msgnum"), 1;
004634  005022        
004635  005023  //==============================//
004636  005024  // NeoPixel specific functions  //
004637  005025  //==============================//
004638  005026        
004639  005027  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004640  005028  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004641  005029  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004642  005030  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004643  005031  //       : data        : Address of data to be sent
004644  005032  //       : size        : number of colour 'sets' to follow
004645  005033  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004646  005034  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004647  005035  //       : Repeat      : Number of times to repeat the colours between first and last
004648  005036  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004649  005037  //       : Returns true if the pin number is legal (usually ignored)
004650  005038  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004651  005039  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004652  005040        
004653  005041  // NeoPixel related constants
004654  005042  #CONST
004655  005046  #END
004656  005047        
004657  005048  func __reserved85(), 0; // do not remove
004658  005049  func __reserved86(), 0; // do not remove
004659  005050        
004660  005051  //==============================================//
004661  005052  // spi flash device specific functions          //
004662  005053  //==============================================//
004663  005054        
004664  005055  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004665  005056  // Syntax   : spiflash_SIG("spi#","enablepin");
004666  005057  // Usage    : var := spiflash_SIG(SPI1, PA0);
004667  005058  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004668  005059  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004669  005060  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004670  005061  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004671  005062  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004672  005063  //          : byte is ignored.
004673  005064        
004674  005065  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004675  005066  // Syntax   : spiflash_ID("spi#","enablepin");
004676  005067  // Usage    : var := spiflash_ID(SPI1, PA0);
004677  005068  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004678  005069  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004679  005070  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004680  005071  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004681  005072  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004682  005073  //          : contains capacity. Refer to the device data sheet for further information.
004683  005074        
004684  005075  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004685  005076  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004686  005077  // Usage    : spiflash_BulkErase(SPI1, PA0);
004687  005078  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004688  005079  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004689  005080  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004690  005081  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004691  005082  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004692  005083  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004693  005084        
004694  005085  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004695  005086  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004696  005087  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004697  005088  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004698  005089  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004699  005090  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004700  005091  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004701  005092  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004702  005093  //          : blockAddress The address of the 64k FLASH block to be erased.
004703  005094  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004704  005095  //          : can take up to 3 milliseconds.
004705  005096        
004706  005097  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004707  005098  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004708  005099  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004709  005100  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004710  005101        
004711  005102  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004712  005103  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004713  005104  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004714  005105  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004715  005106  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004716  005107  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004717  005108  //       : returns number of characters read
004718  005109  //       : if "dest" is zero, data is read direct to GRAM window
004719  005110  //       :
004720  005111        
004721  005112  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004722  005113  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004723  005114  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004724  005115  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004725  005116  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004726  005117  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004727  005118  //       : returns number of bytes written
004728  005119  //       :
004729  005120        
004730  005121  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004731  005122  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004732  005123  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004733  005124  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004734  005125  //       : The image is displayed at x,y (with respect to top left corner).
004735  005126        
004736  005127  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004737  005128  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004738  005129  // Usage : spiflash_PutC('x', SPI1, PA0);
004739  005130  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004740  005131  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004741  005132  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004742  005133        
004743  005134  func spiflash_GetC("spi#", "enablepin"), 1;
004744  005135  // Syntax: spiflash_GetC("spi#", "enablepin");
004745  005136  // Usage : mychar := fgetC(SPI1, PA0);
004746  005137  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004747  005138  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004748  005139  //       : by subsequent reads or writes.
004749  005140  //       : returns next char from file
004750  005141        
004751  005142  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004752  005143  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004753  005144  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004754  005145  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004755  005146  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004756  005147  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004757  005148        
004758  005149  func spiflash_GetW("spi#", "enablepin"), 1;
004759  005150  // Syntax: spiflash_GetW("spi#", "enablepin");
004760  005151  // Usage : myword := fgetW(SPI1, PA0);
004761  005152  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004762  005153  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004763  005154  //       : by subsequent reads or writes.
004764  005155  // Notes : returns next word in file
004765  005156        
004766  005157  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004767  005158  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004768  005159  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004769  005160  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004770  005161  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004771  005162  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004772  005163  //       : returns number of characters written
004773  005164  //       :
004774  005165        
004775  005166  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004776  005167  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004777  005168  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004778  005169  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004779  005170  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004780  005171  //       : by subsequent reads or writes.
004781  005172  //       : returns pointer to string or null if failed.
004782  005173  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004783  005174  //       : NB:- only reads up to "size-1" characters into "string"
004784  005175  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004785  005176  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004786  005177  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004787  005178  //       : C] It reaches the end of file
004788  005179  //       : D] A read error occurs.
004789  005180        
004790  005181  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004791  005182  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004792  005183  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004793  005184  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004794  005185  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004795  005186  //       : return a function pointer to the allocation.
004796  005187  //       : The function can then be invoked just like any other
004797  005188  //       : function would be called via a function pointer.
004798  005189  //       : Parameters may be passed to it in a conventional way.
004799  005190  //       : The function may be discarded at any time when no
004800  005191  //       : longer required, thus freeing its memory resources.
004801  005192  //       : The loaded function can be discarded with mem_Free(..)
004802  005193  //       : eg:
004803  005194  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004804  005195  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004805  005196  //       : then elsewhere in your program:-
004806  005197  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004807  005198  //       : if(res == QUIT_APPLICATION) goto exitApp;
004808  005199  //       : Later in your program, when popupWindow is no longer
004809  005200  //       : required for the application:-
004810  005201  //       : res := mem_Free(popupWindow);
004811  005202  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004812  005203  //       : The callers stack is shared by the loaded function,
004813  005204  //       : however any global variables in the loaded function
004814  005205  //       : are private to that function.
004815  005206  //
004816  005207        
004817  005208  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004818  005209  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004819  005210  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004820  005211  // Notes : current program releases any allocated memory but
004821  005212  //       : retains the stack and global memory.
004822  005213  //       : If arglistptr is 0, no arguments are passed, else
004823  005214  //       : arglist points to an array, the first element being
004824  005215  //       : the number of elements in the array.
004825  005216  //       : func 'main' in the called program accepts
004826  005217  //       : the arguments, if any. The arguments can only
004827  005218  //       : be passed by value, no pointers or references can be
004828  005219  //       : used as all memory is cleared before the file
004829  005220  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004830  005221  //       : for functions that can pass by reference.
004831  005222        
004832  005223  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004833  005224  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004834  005225  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004835  005226  // Notes : returns like a function, current program
004836  005227  //       : calling program is kept active and control returns to it.
004837  005228  //       : If arglistptr is 0, no arguments are passed, else
004838  005229  //       : arglist points to an array, the first element being
004839  005230  //       : the number of elements in the array.
004840  005231  //       : func 'main' in the called program accepts the arguments.
004841  005232  //       : This function is similar to spiflash_LoadFunction(...), however,
004842  005233  //       : the function argument list is passed by pointer, and
004843  005234  //       : the memory consumed by the function is released as
004844  005235  //       : soon as the function completes.
004845  005236        
004846  005237  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004847  005238  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004848  005239  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004849  005240  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004850  005241  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004851  005242  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004852  005243  //       : Returns NULL if function fails.
004853  005244  //       : Returns a handle (pointer to the memory allocation) to the
004854  005245  //       : image control list that has been created.
004855  005246        
004856  005247  // Notes : This function Calculates the size of a chunk of memory required for
004857  005248  //       : a image list and populates it from the image control file ("*.dat")
004858  005249  //       : therefore, when imagelist is no longer required, you must de-allocate
004859  005250  //       : the image list memory by using eg:- mem_Free(hImagelist);
004860  005251  //       : to restore the heap.
004861  005252  //       :
004862  005253        
004863  005254  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004864  005255  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004865  005256  // Usage : spiflash_PlayWAV(SPI1, PA0);
004866  005257  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004867  005258  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004868  005259  //       : or writes.
004869  005260  //       : This function automatically grabs a chunk
004870  005261  //       : of memory for a file buffer, and a wave
004871  005262  //       : buffer. The minimum memory requirement is
004872  005263  //       : about 580 bytes for the disk io service and
004873  005264  //       : a minimum wave buffer size of 1024. The size
004874  005265  //       : of the wave buffer allocation
004875  005266  //       : can be increased by the snd_BufSize function.
004876  005267  //       : The default size 1024 bytes.
004877  005268  //       : NB the memory is only required during the
004878  005269  //       : duration of play, and is automatically
004879  005270  //       : released while not in use.
004880  005271  //       : See the Sound Class services for other associated controls.
004881  005272  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004882  005273  //       : If errors occured, the folling is returned
004883  005274  //       : -7  : Insufficient memory available for WAV buffer and file
004884  005275  //       : -6  : cant play this rate
004885  005276  //       : -5  : no data chunk found in first rsector
004886  005277  //       : -4  : no format data
004887  005278  //       : -3  : no wave chunk signature
004888  005279  //       : -2  : bad wave file format
004889  005280  //       : -1  : file not found
004890  005281        
004891  005282  //==============================================//
004892  005283  // more com functions                           //
004893  005284  //==============================================//
004894  005285        
004895  005286  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004896  005287  // Syntax   : com1_TXblock("buf", "bufsize");
004897  005288  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004898  005289  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004899  005290  //          : if a transmit buffer is active and space is available this function will return almost
004900  005291  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004901  005292        
004902  005293  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004903  005294  // Syntax   : com1_RXblock("buf", "bufsize");
004904  005295  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004905  005296  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004906  005297  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004907  005298  //          : immediately otherwise it will block until until the required bytes are received.
004908  005299        
004909  005300  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004910  005301  // Syntax   : com_TXblock("buf", "bufsize");
004911  005302  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004912  005303  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004913  005304  //          : if a transmit buffer is active and space is available this function will return almost
004914  005305  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004915  005306        
004916  005307  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004917  005308  // Syntax   : com_RXblock("buf", "bufsize");
004918  005309  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004919  005310  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004920  005311  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004921  005312  //          : immediately otherwise it will block until until the required bytes are received.
004922  005313        
004923  005314  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004924  005315  // Syntax   : com_TXblock("buf", "bufsize");
004925  005316  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004926  005317  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004927  005318  //          : if a transmit buffer is active and space is available this function will return almost
004928  005319  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004929  005320        
004930  005321  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004931  005322  // Syntax   : com_RXblock("buf", "bufsize");
004932  005323  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004933  005324  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004934  005325  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004935  005326  //          : immediately otherwise it will block until until the required bytes are received.
004936  005327        
004937  005328  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004938  005329  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004939  005330  // Usage : disp_BlitPixelsFromCOM1();
004940  005331  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004941  005332  //       : display from the specified com port.
004942  005333        
004943  005334  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004944  005335  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004945  005336  // Usage : disp_BlitPixelsFromCOM2();
004946  005337  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004947  005338  //       : display from the specified com port.
004948  005339        
004949  005340  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004950  005341  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004951  005342  // Usage : disp_BlitPixelsFromCOM3();
004952  005343  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004953  005344  //       : display from the specified com port.
004954  005345        
004955  005346        
004956  005347  //==============================================//
004957  005348  // crc generation functions                     //
004958  005349  //==============================================//
004959  005350        
004960  005351  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004961  005352  // *Notes   : (if you calculate all of the incoming data
004962  005353  //          : INCLUDING the CRC, the result should be 0x00
004963  005354  //          : This is equivalent to simple addition of all bytes
004964  005355  //          : and returning the negated sum an 8 bit value.
004965  005356  //          : For the standard test string "123456789",
004966  005357  //          : crc_CSUM_8 will return 0x0023.
004967  005358        
004968  005359        
004969  005360  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004970  005361  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004971  005362  //          : (if you calculate all of the incoming data
004972  005363  //          : INCLUDING the CRC, the result should be 0x0000
004973  005364  //          : For the standard test string "123456789",
004974  005365  //          : crc_16 will return 0xBB3D.
004975  005366        
004976  005367        
004977  005368  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004978  005369  // *Notes   : (if you calculate all of the incoming data
004979  005370  //          : INCLUDING the CRC, the result should be 0x0000
004980  005371  //          : For the standard test string "123456789",
004981  005372  //          : crc_MODBUS will return 0x4B37.
004982  005373        
004983  005374        
004984  005375  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004985  005376  // *Notes   : (if you calculate all of the incoming data
004986  005377  //          : INCLUDING the CRC, the result should be 0x0000
004987  005378  //          : For the standard test string "123456789",
004988  005379  //          : crc_CCITT will return the following:-
004989  005380  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004990  005381  //          : seed = 0xFFFF, result = 0x29B1
004991  005382  //          : seed = 0x1D0F, result = 0xE5CC
004992  005383        
004993  005384        
004994  005385  //------------------------------------------------------------------//
004995  005386  // CONSTANTS
004996  005387  //------------------------------------------------------------------//
004997  005388        
004998  005389  #CONST
004999  005393  #END
005000  005394        
005001  005395  // timebase constants for timebase_init
005002  005396  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005003  005397  #CONST
005004  005408  #END
005005  005409        
005006  005410        
005007  005411  // generic constants
005008  005412  #CONST
005009  005420  #END
005010  005421        
005011  005422        
005012  005423        
005013  005424  //gfx_Get() related constants
005014  005425  #CONST
005015  005434  #END
005016  005435        
005017  005436        
005018  005437        
005019  005438        
005020  005439  #CONST
005021  005452  #END
005022  005453        
005023  005454        
005024  005455  #CONST
005025  005480  #END
005026  005481        
005027  005482        
005028  005483        
005029  005484        
005030  005485  // timer control  related constants
005031  005486  #CONST
005032  005495  #END
005033  005496        
005034  005497        
005035  005498        
005036  005499  //------------------------------------------------------------------------------
005037  005500  // system WORD variables accesible with peekW and pokeW or pointer access
005038  005501  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005039  005502  // can also be accessed with peekW and pokeW
005040  005503  //------------------------------------------------------------------------------
005041  005504        
005042  005505  #CONST
005043  005600  #END
005044  005601        
005045  005602  #CONST
005046  005767  #END
005047  005768        
005048  005769        
005049  005770        
005050  005771  //==================================================================================================
005051  005772        
005052  005773        
005053  005774        
005054  000013      #ENDIF
005055  000014        
005056  000015        
005057  000016  //===========================================================================================
005058  000017        
005059  000018        
005060  000002        
005061  000003  // generated 09/06/2015 12:36:28
005062  000004        
005063  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005064  000006  #inherit "4DGL_16bitColours.fnc"
005065  000006  #inherit "4DGL_16bitColours.fnc"
005066  000004  */
005067  000005        
005068  000006        
005069  000007        
005070  000008  #CONST
005071  000149  #END
005072  000150        
005073  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005074  000008  #inherit "VisualConst.inc"
005075  000008  #inherit "VisualConst.inc"
005076  000001  // Line Patterns
005077  000002  #constant  LPCOARSE    0xF0F0
005078  000002  #constant  LPCOARSE    0xF0F0
005079  000003  #constant  LPMEDIUM    0x3333
005080  000003  #constant  LPMEDIUM    0x3333
005081  000004  #constant  LPFINE      0xAAAA
005082  000004  #constant  LPFINE      0xAAAA
005083  000005  #constant  LPDASHDOT   0x03CF
005084  000005  #constant  LPDASHDOT   0x03CF
005085  000006  #constant  LPDASHDOTDOT 0x0333
005086  000006  #constant  LPDASHDOTDOT 0x0333
005087  000007  #constant  LPSOLID     0x0000
005088  000007  #constant  LPSOLID     0x0000
005089  000009        
005090  000010        
file C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1Const.inc

005091  000011  #inherit "RepRap_Touchv1Const.inc"
005092  000011  #inherit "RepRap_Touchv1Const.inc"
005093  000001  // File generated 09/06/2015 12:36:12
005094  000002  // Warning! This is a generated file, any manual changes will be
005095  000003  // lost during the next generation.
005096  000004        
005097  000005  #constant  Strings1Count    0
005098  000005  #constant  Strings1Count    0
005099  000006  #constant  Strings1Size     1
005100  000006  #constant  Strings1Size     1
005101  000007  #constant  Strings3Count    1
005102  000007  #constant  Strings3Count    1
005103  000008  #constant  Strings3Size     18
005104  000008  #constant  Strings3Size     18
005105  000009  #constant  Strings20Count    1
005106  000009  #constant  Strings20Count    1
005107  000010  #constant  Strings20Size     25
005108  000010  #constant  Strings20Size     25
005109  000011  #constant  Strings4Count    1
005110  000011  #constant  Strings4Count    1
005111  000012  #constant  Strings4Size     25
005112  000012  #constant  Strings4Size     25
005113  000013  #constant  Strings6Count    1
005114  000013  #constant  Strings6Count    1
005115  000014  #constant  Strings6Size     31
005116  000014  #constant  Strings6Size     31
005117  000015  #constant  Strings2Count    0
005118  000015  #constant  Strings2Count    0
005119  000016  #constant  Strings2Size     1
005120  000016  #constant  Strings2Size     1
005121  000017  #constant  Strings0Count    1
005122  000017  #constant  Strings0Count    1
005123  000018  #constant  Strings0Size     7
005124  000018  #constant  Strings0Size     7
005125  000019  #constant  Strings9Count    0
005126  000019  #constant  Strings9Count    0
005127  000020  #constant  Strings9Size     1
005128  000020  #constant  Strings9Size     1
005129  000021  #constant  Strings34Count    0
005130  000021  #constant  Strings34Count    0
005131  000022  #constant  Strings34Size     1
005132  000022  #constant  Strings34Size     1
005133  000023  #constant  Strings36Count    0
005134  000023  #constant  Strings36Count    0
005135  000024  #constant  Strings36Size     1
005136  000024  #constant  Strings36Size     1
005137  000025  #constant  Strings37Count    0
005138  000025  #constant  Strings37Count    0
005139  000026  #constant  Strings37Size     1
005140  000026  #constant  Strings37Size     1
005141  000027  #constant  Strings12Count    1
005142  000027  #constant  Strings12Count    1
005143  000028  #constant  Strings12Size     19
005144  000028  #constant  Strings12Size     19
005145  000029  #constant  Strings14Count    1
005146  000029  #constant  Strings14Count    1
005147  000030  #constant  Strings14Size     23
005148  000030  #constant  Strings14Size     23
005149  000031  #constant  Strings16Count    1
005150  000031  #constant  Strings16Count    1
005151  000032  #constant  Strings16Size     31
005152  000032  #constant  Strings16Size     31
005153  000033  #constant  Strings15Count    1
005154  000033  #constant  Strings15Count    1
005155  000034  #constant  Strings15Size     24
005156  000034  #constant  Strings15Size     24
005157  000035  #constant  Strings17Count    1
005158  000035  #constant  Strings17Count    1
005159  000036  #constant  Strings17Size     33
005160  000036  #constant  Strings17Size     33
005161  000037  #constant  Strings18Count    1
005162  000037  #constant  Strings18Count    1
005163  000038  #constant  Strings18Size     32
005164  000038  #constant  Strings18Size     32
005165  000039  #constant  Strings19Count    1
005166  000039  #constant  Strings19Count    1
005167  000040  #constant  Strings19Size     29
005168  000040  #constant  Strings19Size     29
005169  000041  #constant  Strings21Count    1
005170  000041  #constant  Strings21Count    1
005171  000042  #constant  Strings21Size     25
005172  000042  #constant  Strings21Size     25
005173  000043  #constant  Strings11Count    1
005174  000043  #constant  Strings11Count    1
005175  000044  #constant  Strings11Size     33
005176  000044  #constant  Strings11Size     33
005177  000045  #constant  Strings22Count    1
005178  000045  #constant  Strings22Count    1
005179  000046  #constant  Strings22Size     20
005180  000046  #constant  Strings22Size     20
005181  000047  #constant  Strings23Count    1
005182  000047  #constant  Strings23Count    1
005183  000048  #constant  Strings23Size     16
005184  000048  #constant  Strings23Size     16
005185  000049  #constant  Strings24Count    1
005186  000049  #constant  Strings24Count    1
005187  000050  #constant  Strings24Size     26
005188  000050  #constant  Strings24Size     26
005189  000051  #constant  Strings25Count    1
005190  000051  #constant  Strings25Count    1
005191  000052  #constant  Strings25Size     10
005192  000052  #constant  Strings25Size     10
005193  000053  #constant  Strings26Count    1
005194  000053  #constant  Strings26Count    1
005195  000054  #constant  Strings26Size     10
005196  000054  #constant  Strings26Size     10
005197  000055  #constant  Strings27Count    1
005198  000055  #constant  Strings27Count    1
005199  000056  #constant  Strings27Size     11
005200  000056  #constant  Strings27Size     11
005201  000057  #constant  Strings5Count    1
005202  000057  #constant  Strings5Count    1
005203  000058  #constant  Strings5Size     27
005204  000058  #constant  Strings5Size     27
005205  000059  #constant  Strings28Count    1
005206  000059  #constant  Strings28Count    1
005207  000060  #constant  Strings28Size     32
005208  000060  #constant  Strings28Size     32
005209  000061  #constant  Strings29Count    1
005210  000061  #constant  Strings29Count    1
005211  000062  #constant  Strings29Size     32
005212  000062  #constant  Strings29Size     32
005213  000063  #constant  Strings30Count    0
005214  000063  #constant  Strings30Count    0
005215  000064  #constant  Strings30Size     1
005216  000064  #constant  Strings30Size     1
005217  000065  #constant  Strings31Count    0
005218  000065  #constant  Strings31Count    0
005219  000066  #constant  Strings31Size     1
005220  000066  #constant  Strings31Size     1
005221  000067  #constant  Strings32Count    0
005222  000067  #constant  Strings32Count    0
005223  000068  #constant  Strings32Size     1
005224  000068  #constant  Strings32Size     1
005225  000069  #constant  Strings33Count    1
005226  000069  #constant  Strings33Count    1
005227  000070  #constant  Strings33Size     10
005228  000070  #constant  Strings33Size     10
005229  000071  #constant  Strings35Count    1
005230  000071  #constant  Strings35Count    1
005231  000072  #constant  Strings35Size     26
005232  000072  #constant  Strings35Size     26
005233  000073  #constant  Strings10Count    1
005234  000073  #constant  Strings10Count    1
005235  000074  #constant  Strings10Size     15
005236  000074  #constant  Strings10Size     15
005237  000075  #constant  Strings7Count    0
005238  000075  #constant  Strings7Count    0
005239  000076  #constant  Strings7Size     1
005240  000076  #constant  Strings7Size     1
005241  000077  #constant  Strings8Count    0
005242  000077  #constant  Strings8Count    0
005243  000078  #constant  Strings8Size     1
005244  000078  #constant  Strings8Size     1
005245  000079  #constant  Strings38Count    0
005246  000079  #constant  Strings38Count    0
005247  000080  #constant  Strings38Size     1
005248  000080  #constant  Strings38Size     1
005249  000081  #constant  Strings39Count    0
005250  000081  #constant  Strings39Count    0
005251  000082  #constant  Strings39Size     1
005252  000082  #constant  Strings39Size     1
005253  000083  #constant  Strings40Count    1
005254  000083  #constant  Strings40Count    1
005255  000084  #constant  Strings40Size     7
005256  000084  #constant  Strings40Size     7
005257  000085  #constant  Strings41Count    1
005258  000085  #constant  Strings41Count    1
005259  000086  #constant  Strings41Size     7
005260  000086  #constant  Strings41Size     7
005261  000087  #constant  Strings42Count    1
005262  000087  #constant  Strings42Count    1
005263  000088  #constant  Strings42Size     7
005264  000088  #constant  Strings42Size     7
005265  000089  #constant  Strings43Count    0
005266  000089  #constant  Strings43Count    0
005267  000090  #constant  Strings43Size     1
005268  000090  #constant  Strings43Size     1
005269  000091  #constant  Strings44Count    0
005270  000091  #constant  Strings44Count    0
005271  000092  #constant  Strings44Size     1
005272  000092  #constant  Strings44Size     1
005273  000093  #constant  Strings45Count    0
005274  000093  #constant  Strings45Count    0
005275  000094  #constant  Strings45Size     1
005276  000094  #constant  Strings45Size     1
005277  000095  #constant  Strings13Count    1
005278  000095  #constant  Strings13Count    1
005279  000096  #constant  Strings13Size     8
005280  000096  #constant  Strings13Size     8
005281  000097  #constant  Strings48Count    1
005282  000097  #constant  Strings48Count    1
005283  000098  #constant  Strings48Size     10
005284  000098  #constant  Strings48Size     10
005285  000099  #constant  Strings46Count    1
005286  000099  #constant  Strings46Count    1
005287  000100  #constant  Strings46Size     8
005288  000100  #constant  Strings46Size     8
005289  000101  #constant  Strings49Count    1
005290  000101  #constant  Strings49Count    1
005291  000102  #constant  Strings49Size     10
005292  000102  #constant  Strings49Size     10
005293  000103  #constant  Strings47Count    1
005294  000103  #constant  Strings47Count    1
005295  000104  #constant  Strings47Size     8
005296  000104  #constant  Strings47Size     8
005297  000105  #constant  Strings50Count    1
005298  000105  #constant  Strings50Count    1
005299  000106  #constant  Strings50Size     10
005300  000106  #constant  Strings50Size     10
005301  000107  #constant  Strings51Count    0
005302  000107  #constant  Strings51Count    0
005303  000108  #constant  Strings51Size     1
005304  000108  #constant  Strings51Size     1
005305  000109  #constant  Strings52Count    0
005306  000109  #constant  Strings52Count    0
005307  000110  #constant  Strings52Size     1
005308  000110  #constant  Strings52Size     1
005309  000111  // object indexes into ImageControl
005310  000112  #CONST
005311  000288  #END
005312  000289        
005313  000290  #constant  Strings1StartH   0x0
005314  000290  #constant  Strings1StartH   0x0
005315  000291  #constant  Strings1StartL   0x0
005316  000291  #constant  Strings1StartL   0x0
005317  000292  #constant  Strings3StartH   0x0
005318  000292  #constant  Strings3StartH   0x0
005319  000293  #constant  Strings3StartL   0x200
005320  000293  #constant  Strings3StartL   0x200
005321  000294  #constant  Strings20StartH   0x0
005322  000294  #constant  Strings20StartH   0x0
005323  000295  #constant  Strings20StartL   0x400
005324  000295  #constant  Strings20StartL   0x400
005325  000296  #constant  Strings4StartH   0x0
005326  000296  #constant  Strings4StartH   0x0
005327  000297  #constant  Strings4StartL   0x600
005328  000297  #constant  Strings4StartL   0x600
005329  000298  #constant  Strings6StartH   0x0
005330  000298  #constant  Strings6StartH   0x0
005331  000299  #constant  Strings6StartL   0x800
005332  000299  #constant  Strings6StartL   0x800
005333  000300  #constant  Strings2StartH   0x0
005334  000300  #constant  Strings2StartH   0x0
005335  000301  #constant  Strings2StartL   0xA00
005336  000301  #constant  Strings2StartL   0xA00
005337  000302  #constant  Strings0StartH   0x0
005338  000302  #constant  Strings0StartH   0x0
005339  000303  #constant  Strings0StartL   0xC00
005340  000303  #constant  Strings0StartL   0xC00
005341  000304  #constant  Strings9StartH   0x0
005342  000304  #constant  Strings9StartH   0x0
005343  000305  #constant  Strings9StartL   0xE00
005344  000305  #constant  Strings9StartL   0xE00
005345  000306  #constant  Strings34StartH   0x0
005346  000306  #constant  Strings34StartH   0x0
005347  000307  #constant  Strings34StartL   0x1000
005348  000307  #constant  Strings34StartL   0x1000
005349  000308  #constant  Strings36StartH   0x0
005350  000308  #constant  Strings36StartH   0x0
005351  000309  #constant  Strings36StartL   0x1200
005352  000309  #constant  Strings36StartL   0x1200
005353  000310  #constant  Strings37StartH   0x0
005354  000310  #constant  Strings37StartH   0x0
005355  000311  #constant  Strings37StartL   0x1400
005356  000311  #constant  Strings37StartL   0x1400
005357  000312  #constant  Strings12StartH   0x0
005358  000312  #constant  Strings12StartH   0x0
005359  000313  #constant  Strings12StartL   0x1600
005360  000313  #constant  Strings12StartL   0x1600
005361  000314  #constant  Strings14StartH   0x0
005362  000314  #constant  Strings14StartH   0x0
005363  000315  #constant  Strings14StartL   0x1800
005364  000315  #constant  Strings14StartL   0x1800
005365  000316  #constant  Strings16StartH   0x0
005366  000316  #constant  Strings16StartH   0x0
005367  000317  #constant  Strings16StartL   0x1A00
005368  000317  #constant  Strings16StartL   0x1A00
005369  000318  #constant  Strings15StartH   0x0
005370  000318  #constant  Strings15StartH   0x0
005371  000319  #constant  Strings15StartL   0x1C00
005372  000319  #constant  Strings15StartL   0x1C00
005373  000320  #constant  Strings17StartH   0x0
005374  000320  #constant  Strings17StartH   0x0
005375  000321  #constant  Strings17StartL   0x1E00
005376  000321  #constant  Strings17StartL   0x1E00
005377  000322  #constant  Strings18StartH   0x0
005378  000322  #constant  Strings18StartH   0x0
005379  000323  #constant  Strings18StartL   0x2000
005380  000323  #constant  Strings18StartL   0x2000
005381  000324  #constant  Strings19StartH   0x0
005382  000324  #constant  Strings19StartH   0x0
005383  000325  #constant  Strings19StartL   0x2200
005384  000325  #constant  Strings19StartL   0x2200
005385  000326  #constant  Strings21StartH   0x0
005386  000326  #constant  Strings21StartH   0x0
005387  000327  #constant  Strings21StartL   0x2400
005388  000327  #constant  Strings21StartL   0x2400
005389  000328  #constant  Strings11StartH   0x0
005390  000328  #constant  Strings11StartH   0x0
005391  000329  #constant  Strings11StartL   0x2600
005392  000329  #constant  Strings11StartL   0x2600
005393  000330  #constant  Strings22StartH   0x0
005394  000330  #constant  Strings22StartH   0x0
005395  000331  #constant  Strings22StartL   0x2800
005396  000331  #constant  Strings22StartL   0x2800
005397  000332  #constant  Strings23StartH   0x0
005398  000332  #constant  Strings23StartH   0x0
005399  000333  #constant  Strings23StartL   0x2A00
005400  000333  #constant  Strings23StartL   0x2A00
005401  000334  #constant  Strings24StartH   0x0
005402  000334  #constant  Strings24StartH   0x0
005403  000335  #constant  Strings24StartL   0x2C00
005404  000335  #constant  Strings24StartL   0x2C00
005405  000336  #constant  Strings25StartH   0x0
005406  000336  #constant  Strings25StartH   0x0
005407  000337  #constant  Strings25StartL   0x2E00
005408  000337  #constant  Strings25StartL   0x2E00
005409  000338  #constant  Strings26StartH   0x0
005410  000338  #constant  Strings26StartH   0x0
005411  000339  #constant  Strings26StartL   0x3000
005412  000339  #constant  Strings26StartL   0x3000
005413  000340  #constant  Strings27StartH   0x0
005414  000340  #constant  Strings27StartH   0x0
005415  000341  #constant  Strings27StartL   0x3200
005416  000341  #constant  Strings27StartL   0x3200
005417  000342  #constant  Strings5StartH   0x0
005418  000342  #constant  Strings5StartH   0x0
005419  000343  #constant  Strings5StartL   0x3400
005420  000343  #constant  Strings5StartL   0x3400
005421  000344  #constant  Strings28StartH   0x0
005422  000344  #constant  Strings28StartH   0x0
005423  000345  #constant  Strings28StartL   0x3600
005424  000345  #constant  Strings28StartL   0x3600
005425  000346  #constant  Strings29StartH   0x0
005426  000346  #constant  Strings29StartH   0x0
005427  000347  #constant  Strings29StartL   0x3800
005428  000347  #constant  Strings29StartL   0x3800
005429  000348  #constant  Strings30StartH   0x0
005430  000348  #constant  Strings30StartH   0x0
005431  000349  #constant  Strings30StartL   0x3A00
005432  000349  #constant  Strings30StartL   0x3A00
005433  000350  #constant  Strings31StartH   0x0
005434  000350  #constant  Strings31StartH   0x0
005435  000351  #constant  Strings31StartL   0x3C00
005436  000351  #constant  Strings31StartL   0x3C00
005437  000352  #constant  Strings32StartH   0x0
005438  000352  #constant  Strings32StartH   0x0
005439  000353  #constant  Strings32StartL   0x3E00
005440  000353  #constant  Strings32StartL   0x3E00
005441  000354  #constant  Strings33StartH   0x0
005442  000354  #constant  Strings33StartH   0x0
005443  000355  #constant  Strings33StartL   0x4000
005444  000355  #constant  Strings33StartL   0x4000
005445  000356  #constant  Strings35StartH   0x0
005446  000356  #constant  Strings35StartH   0x0
005447  000357  #constant  Strings35StartL   0x4200
005448  000357  #constant  Strings35StartL   0x4200
005449  000358  #constant  Strings10StartH   0x0
005450  000358  #constant  Strings10StartH   0x0
005451  000359  #constant  Strings10StartL   0x4400
005452  000359  #constant  Strings10StartL   0x4400
005453  000360  #constant  Strings7StartH   0x0
005454  000360  #constant  Strings7StartH   0x0
005455  000361  #constant  Strings7StartL   0x4600
005456  000361  #constant  Strings7StartL   0x4600
005457  000362  #constant  Strings8StartH   0x0
005458  000362  #constant  Strings8StartH   0x0
005459  000363  #constant  Strings8StartL   0x4800
005460  000363  #constant  Strings8StartL   0x4800
005461  000364  #constant  Strings38StartH   0x0
005462  000364  #constant  Strings38StartH   0x0
005463  000365  #constant  Strings38StartL   0x4A00
005464  000365  #constant  Strings38StartL   0x4A00
005465  000366  #constant  Strings39StartH   0x0
005466  000366  #constant  Strings39StartH   0x0
005467  000367  #constant  Strings39StartL   0x4C00
005468  000367  #constant  Strings39StartL   0x4C00
005469  000368  #constant  Strings40StartH   0x0
005470  000368  #constant  Strings40StartH   0x0
005471  000369  #constant  Strings40StartL   0x4E00
005472  000369  #constant  Strings40StartL   0x4E00
005473  000370  #constant  Strings41StartH   0x0
005474  000370  #constant  Strings41StartH   0x0
005475  000371  #constant  Strings41StartL   0x5000
005476  000371  #constant  Strings41StartL   0x5000
005477  000372  #constant  Strings42StartH   0x0
005478  000372  #constant  Strings42StartH   0x0
005479  000373  #constant  Strings42StartL   0x5200
005480  000373  #constant  Strings42StartL   0x5200
005481  000374  #constant  Strings43StartH   0x0
005482  000374  #constant  Strings43StartH   0x0
005483  000375  #constant  Strings43StartL   0x5400
005484  000375  #constant  Strings43StartL   0x5400
005485  000376  #constant  Strings44StartH   0x0
005486  000376  #constant  Strings44StartH   0x0
005487  000377  #constant  Strings44StartL   0x5600
005488  000377  #constant  Strings44StartL   0x5600
005489  000378  #constant  Strings45StartH   0x0
005490  000378  #constant  Strings45StartH   0x0
005491  000379  #constant  Strings45StartL   0x5800
005492  000379  #constant  Strings45StartL   0x5800
005493  000380  #constant  Strings13StartH   0x0
005494  000380  #constant  Strings13StartH   0x0
005495  000381  #constant  Strings13StartL   0x5A00
005496  000381  #constant  Strings13StartL   0x5A00
005497  000382  #constant  Strings48StartH   0x0
005498  000382  #constant  Strings48StartH   0x0
005499  000383  #constant  Strings48StartL   0x5C00
005500  000383  #constant  Strings48StartL   0x5C00
005501  000384  #constant  Strings46StartH   0x0
005502  000384  #constant  Strings46StartH   0x0
005503  000385  #constant  Strings46StartL   0x5E00
005504  000385  #constant  Strings46StartL   0x5E00
005505  000386  #constant  Strings49StartH   0x0
005506  000386  #constant  Strings49StartH   0x0
005507  000387  #constant  Strings49StartL   0x6000
005508  000387  #constant  Strings49StartL   0x6000
005509  000388  #constant  Strings47StartH   0x0
005510  000388  #constant  Strings47StartH   0x0
005511  000389  #constant  Strings47StartL   0x6200
005512  000389  #constant  Strings47StartL   0x6200
005513  000390  #constant  Strings50StartH   0x0
005514  000390  #constant  Strings50StartH   0x0
005515  000391  #constant  Strings50StartL   0x6400
005516  000391  #constant  Strings50StartL   0x6400
005517  000392  #constant  Strings51StartH   0x0
005518  000392  #constant  Strings51StartH   0x0
005519  000393  #constant  Strings51StartL   0x6600
005520  000393  #constant  Strings51StartL   0x6600
005521  000394  #constant  Strings52StartH   0x0
005522  000394  #constant  Strings52StartH   0x0
005523  000395  #constant  Strings52StartL   0x6800
005524  000395  #constant  Strings52StartL   0x6800
005525  000396  #IFNOT EXISTS NOGLOBALS
005526  000397  var hndl ;
005527  000398  #ENDIF
005528  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005529  000013  #inherit "CLPrintStrings.inc"
005530  000013  #inherit "CLPrintStrings.inc"
005531  000001  func PrintStrings(var ID, var *msgid, var String)
005532  000002      var StringID, i, ch, offs32[2], res32[2];
005533  000003      StringID := oStringss[1+ID] ;
005534  000004      if (String)
005535  000005          stringsCV[ID] := -1 ;
005536  000006      else
005537  000007          stringsCV[ID] := msgid ;
005538  000008      endif
005539  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005540  000010      txt_FontID(hFonts[ID]) ;
005541  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005542  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005543  000013        
005544  000014      if (*(StringID + Ofs_String_Transparent))
005545  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005546  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005547  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005548  000018      else
005549  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005550  000020          gfx_Clipping(ON) ;
005551  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005552  000022          gfx_Clipping(OFF) ;
005553  000023        
005554  000024      endif
005555  000025        
005556  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005557  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005558  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005559  000029        
005560  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005561  000031        
005562  000032      if (String)
005563  000033          i := 0 ;
005564  000034          ch := msgid[i++] ;
005565  000035          while (ch != 0)
005566  000036              putch(ch) ;
005567  000037              ch := msgid[i++] ;
005568  000038          wend
005569  000039      else
005570  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005571  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005572  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005573  000043          uadd_3232(res32,res32,offs32) ;
005574  000044          file_Seek(hstrings, res32[1], res32[0]);
005575  000045          repeat
005576  000046              if (*(StringID + Ofs_String_Ansi))
005577  000047                  ch := file_GetC(hstrings) ;
005578  000048              else
005579  000049                  ch := file_GetW(hstrings) ;
005580  000050              endif
005581  000051              putch(ch) ;
005582  000052          until (ch == 0) ;
005583  000053      endif
005584  000054        
005585  000055  endfunc
005586  000056        
005587  000014        
005588  000015  #constant IPDatasize 22
005589  000015  #constant IPDatasize 22
005590  000016        
005591  000017  #CONST
005592  000021  #END
005593  000022        
005594  000023  #CONST
005595  000130  #END
005596  000131        
005597  000516  #END
5598  21EE
5599  21EF
5600  21F0
5601  21F1
5602  21F2
5603  21F3
5604  21F4
5605  21F5
5606  21F6
5607  21F7
5608  21F8
5609  21F9
5610  21FA
5611  21FB
5612  21FC
5613  21FD
5614  21FE
5615  21FF
5616  2200
5617  2201
5618  2202
5619  2203
5620  2204
5621  2205
5622  2206
5623  2207
5624  2208
5625  2209
5626  220A
5627  220B
5628  220C
5629  220D
5630  220E
5631  220F
5632  2210
5633  2211
5634  2212
5635  2213
5636  2214
5637  2215
5638  2216
5639  2217
5640  2218
5641  2219
5642  221A
5643  221B
5644  221C
5645  221D
5646  221E
5647  221F
5648  2220
5649  2221
5650  2222
5651  2223
5652  2224
5653  2225
5654  2226
5655  2227
5656  2228
5657  2229
5658  222A
5659  222B
5660  222C
5661  222D
5662  222E
5663  222F
5664  2230
5665  2231
5666  2232
5667  2233
5668  2234
5669  2235
5670  2236
5671  2237
5672  2238
5673  2239
5674  223A
5675  223B
5676  223C
5677  223D
5678  223E
5679  223F
5680  2240
5681  2241
5682  2242
5683  2243
5684  2244
5685  2245
5686  2246
5687  2247
5688  2248
5689  2249
5690  224A
5691  224B
5692  224C
5693  224D
5694  224E
5695  224F
5696  2250
5697  2251
5698  2252
5699  2253
5700  2254
5701  2255
5702  2256
5703  2257
5704  2258
5705  2259
5706  225A
5707  225B
5708  225C
5709  225D
5710  225E
5711  225F
5712  2260
5713  2261
5714  2262
5715  2263
5716  2264
5717  2265
5718  2266
5719  2267
5720  2268
5721  2269
5722  226A
5723  226B
5724  226C
5725  226D
5726  226E
5727  226F
5728  2270
5729  2271
5730  2272
5731  2273
5732  2274
5733  2275
5734  2276
5735  2277
5736  2278
5737  2279
5738  227A
5739  227B
5740  227C
5741  227D
5742  227E
5743  227F
5744  2280
5745  2281
5746  2282
5747  2283
5748  2284
5749  2285
5750  2286
5751  2287
5752  2288
5753  2289
5754  228A
5755  228B
5756  228C
5757  228D
5758  228E
5759  228F
5760  2290
5761  2291
5762  2292
5763  2293
5764  2294
5765  2295
5766  2296
5767  2297
5768  2298
5769  2299
5770  229A
5771  229B
5772  229C
5773  229D
5774  229E
5775  229F
5776  22A0
5777  22A1
5778  22A2
5779  22A3
5780  22A4
5781  22A5
5782  22A6
5783  22A7
5784  22A8
5785  22A9
5786  22AA
5787  22AB
5788  22AC
5789  22AD
5790  22AE
5791  22AF
5792  22B0
5793  22B1
5794  22B2
5795  22B3
5796  22B4
5797  22B5
5798  22B6
5799  22B7
5800  22B8
5801  22B9
5802  22BA
5803  22BB
5804  22BC
5805  22BD
5806  22BE
5807  22BF
5808  22C0
5809  22C1
5810  22C2
5811  22C3
5812  22C4
5813  22C5
5814  22C6
5815  22C7
5816  22C8
5817  22C9
5818  22CA
5819  22CB
5820  22CC
5821  22CD
5822  22CE
5823  22CF
5824  22D0
5825  22D1
5826  22D2
5827  22D3
5828  22D4
5829  22D5
5830  22D6
5831  22D7
5832  22D8
5833  22D9
5834  22DA
5835  22DB
5836  22DC
5837  22DD
5838  22DE
5839  22DF
5840  22E0
5841  22E1
5842  22E2
5843  22E3
5844  22E4
5845  22E5
5846  22E6
5847  22E7
5848  22E8
5849  22E9
5850  22EA
5851  22EB
5852  22EC
5853  22ED
5854  22EE
5855  22EF
5856  22F0
5857  22F1
5858  22F2
5859  22F3
5860  22F4
5861  22F5
5862  22F6
5863  22F7
5864  22F8
5865  22F9
5866  22FA
5867  22FB
5868  22FC
5869  22FD
5870  22FE
5871  22FF
5872  2300
5873  2301
5874  2302
5875  2303
5876  2304
5877  2305
5878  2306
5879  2307
5880  2308
5881  2309
5882  230A
5883  230B
5884  230C
5885  230D
5886  230E
5887  230F
5888  2310
5889  2311
5890  2312
5891  2313
5892  2314
5893  2315
5894  2316
5895  2317
5896  2318
5897  2319
5898  231A
5899  231B
5900  231C
5901  231D
5902  231E
5903  231F
5904  2320
5905  2321
5906  2322
5907  2323
5908  2324
5909  2325
5910  2326
5911  2327
5912  2328
5913  2329
5914  232A
5915  232B
5916  232C
5917  232D
5918  232E
5919  232F
5920  2330
5921  2331
5922  2332
5923  2333
5924  2334
5925  2335
5926  2336
5927  2337
5928  2338
5929  2339
5930  233A
5931  233B
5932  233C
5933  233D
5934  233E
5935  233F
5936  2340
5937  2341
5938  2342
5939  2343
5940  2344
5941  2345
5942  2346
5943  2347
5944  2348
5945  2349
5946  234A
5947  234B
5948  234C
5949  234D
5950  234E
5951  234F
5952  2350
5953  2351
5954  2352
5955  2353
5956  2354
5957  2355
5958  2356
5959  2357
5960  2358
5961  2359
5962  235A
5963  235B
5964  235C
5965  235D
5966  235E
5967  235F
5968  2360
5969  2361
5970  2362
5971  2363
5972  2364
5973  2365
5974  2366
5975  2367
5976  2368
5977  2369
5978  236A
5979  236B
5980  236C
5981  236D
5982  236E
5983  236F
5984  2370
5985  2371
5986  2372
5987  2373
5988  2374
5989  2375
5990  2376
5991  2377
5992  2378
5993  2379
5994  237A
5995  237B
5996  237C
5997  237D
5998  237E
5999  237F
6000  2380
6001  2381
6002  2382
6003  2383
6004  2384
6005  2385
6006  2386
6007  2387
6008  2388
6009  2389
6010  238A
6011  238B
6012  238C
6013  238D
6014  238E
6015  238F
6016  2390
6017  2391
6018  2392
6019  2393
6020  2394
6021  2395
6022  2396
6023  2397
6024  2398
6025  2399
6026  239A
6027  239B
6028  239C
6029  239D
6030  239E
6031  239F
6032  23A0
6033  23A1
6034  23A2
6035  23A3
6036  23A4
6037  23A5
6038  23A6
6039  23A7
6040  23A8
6041  23A9
6042  23AA
6043  23AB
6044  23AC
6045  23AD
6046  23AE
6047  23AF
6048  23B0
6049  23B1
6050  23B2
6051  23B3
6052  23B4
6053  23B5
6054  23B6
6055  23B7
6056  23B8
6057  23B9
6058  23BA
6059  23BB
6060  23BC
6061  23BD
6062  23BE
6063  23BF
6064  23C0
6065  23C1
6066  23C2
6067  23C3
6068  23C4
6069  23C5
6070  23C6
6071  23C7
6072  23C8
6073  23C9
6074  23CA
6075  23CB
6076  23CC
6077  23CD
6078  23CE
6079  23CF
6080  23D0
6081  23D1
6082  23D2
6083  23D3
6084  23D4
6085  23D5
6086  23D6
6087  23D7
6088  23D8
6089  23D9
6090  23DA
6091  23DB
6092  23DC
6093  23DD
6094  23DE
6095  23DF
6096  23E0
6097  23E1
6098  23E2
6099  23E3
6100  23E4
6101  23E5
6102  23E6
6103  23E7
6104  23E8
6105  23E9
6106  23EA
6107  23EB
6108  23EC
6109  23ED
6110  23EE
6111  23EF
6112  23F0
6113  23F1
6114  23F2
6115  23F3
6116  23F4
6117  23F5
6118  23F6
6119  23F7
6120  23F8
6121  23F9
6122  23FA
6123  23FB
6124  23FC
6125  23FD
6126  23FE
6127  23FF
6128  2400
6129  2401
6130  2402
6131  2403
6132  2404
6133  2405
6134  2406
6135  2407
6136  2408
6137  2409
6138  240A
6139  240B
6140  240C
6141  240D
6142  240E
6143  240F
6144  2410
6145  2411
6146  2412
6147  2413
6148  2414
6149  2415
6150  2416
6151  2417
6152  2418
6153  2419
6154  241A
6155  241B
6156  241C
6157  241D
6158  241E
6159  241F
6160  2420
6161  2421
6162  2422
6163  2423
6164  2424
6165  2425
6166  2426
6167  2427
6168  2428
6169  2429
6170  242A
6171  242B
6172  242C
6173  242D
6174  242E
6175  242F
6176  2430
6177  2431
6178  2432
6179  2433
6180  2434
6181  2435
6182  2436
6183  2437
6184  2438
6185  2439
6186  243A
6187  243B
6188  243C
6189  243D
6190  243E
6191  243F
6192  2440
6193  2441
6194  2442
6195  2443
6196  2444
6197  2445
6198  2446
6199  2447
6200  2448
6201  2449
6202  244A
6203  244B
6204  244C
6205  244D
6206  244E
6207  244F
6208  2450
6209  2451
6210  2452
6211  2453
6212  2454
6213  2455
6214  2456
6215  2457
6216  2458
6217  2459
6218  245A
6219  245B
6220  245C
6221  245D
6222  245E
6223  245F
6224  2460
6225  2461
6226  2462
6227  2463
6228  2464
6229  2465
6230  2466
6231  2467
6232  2468
6233  2469
6234  246A
6235  246B
6236  246C
6237  246D
6238  246E
6239  246F
6240  2470
6241  2471
6242  2472
6243  2473
6244  2474
6245  2475
6246  2476
6247  2477
6248  2478
6249  2479
6250  247A
6251  247B
6252  247C
6253  247D
6254  247E
6255  247F
6256  2480
6257  2481
6258  2482
6259  2483
6260  2484
6261  2485
6262  2486
6263  2487
6264  2488
6265  2489
6266  248A
6267  248B
6268  248C
6269  248D
6270  248E
6271  248F
6272  2490
6273  2491
6274  2492
6275  2493
6276  2494
6277  2495
6278  2496
6279  2497
6280  2498
6281  2499
6282  249A
6283  249B
6284  249C
6285  249D
6286  249E
6287  249F
6288  24A0
6289  24A1
6290  24A2
6291  24A3
6292  24A4
6293  24A5
6294  24A6
6295  24A7
6296  24A8
6297  24A9
6298  24AA
6299  24AB
6300  24AC
6301  24AD
6302  24AE
6303  24AF
6304  24B0
6305  24B1
6306  24B2
6307  24B3
6308  24B4
6309  24B5
6310  24B6
6311  24B7
6312  24B8
6313  24B9
6314  24BA
6315  24BB
6316  24BC
6317  24BD
6318  24BE
6319  24BF
6320  24C0
6321  24C1
6322  24C2
6323  24C3
6324  24C4
6325  24C5
6326  24C6
6327  24C7
6328  24C8
6329  24C9
6330  24CA
6331  24CB
6332  24CC
6333  24CD
6334  24CE
6335  24CF
6336  24D0
6337  24D1
6338  24D2
6339  24D3
6340  24D4
6341  24D5
6342  24D6
6343  24D7
6344  24D8
6345  24D9
6346  24DA
6347  24DB
6348  24DC
6349  24DD
6350  24DE
6351  24DF
6352  24E0
6353  24E1
6354  24E2
6355  24E3
6356  24E4
6357  24E5
6358  24E6
6359  24E7
6360  24E8
6361  24E9
6362  24EA
6363  24EB
6364  24EC
6365  24ED
6366  24EE
6367  24EF
6368  24F0
6369  24F1
6370  24F2
6371  24F3
6372  24F4
6373  24F5
6374  24F6
6375  24F7
6376  24F8
6377  24F9
6378  24FA
6379  24FB
6380  24FC
6381  24FD
6382  24FE
6383  24FF
6384  2500
6385  2501
6386  2502
6387  2503
6388  2504
6389  2505
6390  2506
6391  2507
6392  2508
6393  2509
6394  250A
6395  250B
6396  250C
6397  250D
6398  250E
6399  250F
6400  2510
6401  2511
6402  2512
6403  2513
6404  2514
6405  2515
6406  2516
6407  2517
6408  2518
6409  2519
6410  251A
6411  251B
6412  251C
6413  251D
6414  251E
6415  251F
6416  2520
6417  2521
6418  2522
6419  2523
6420  2524
6421  2525
6422  2526
6423  2527
6424  2528
6425  2529
6426  252A
6427  252B
6428  252C
6429  252D
6430  252E
6431  252F
6432  2530
6433  2531
6434  2532
6435  2533
6436  2534
6437  2535
6438  2536
6439  2537
6440  2538
6441  2539
6442  253A
6443  253B
6444  253C
6445  253D
6446  253E
6447  253F
6448  2540
6449  2541
6450  2542
6451  2543
6452  2544
6453  2545
6454  2546
6455  2547
6456  2548
6457  2549
6458  254A
6459  254B
6460  254C
6461  254D
6462  254E
6463  254F
6464  2550
6465  2551
6466  2552
6467  2553
6468  2554
6469  2555
6470  2556
6471  2557
6472  2558
6473  2559
6474  255A
6475  255B
6476  255C
6477  255D
6478  255E
6479  255F
6480  2560
6481  2561
6482  2562
6483  2563
6484  2564
6485  2565
6486  2566
6487  2567
6488  2568
6489  2569
6490  256A
6491  256B
6492  256C
6493  256D
6494  256E
6495  256F
6496  2570
6497  2571
6498  2572
6499  2573
6500  2574
6501  2575
6502  2576
6503  2577
6504  2578
6505  2579
6506  257A
6507  257B
6508  257C
6509  257D
6510  257E
6511  257F
6512  2580
6513  2581
6514  2582
6515  2583
6516  2584
6517  2585
6518  2586
6519  2587
6520  2588
6521  2589
6522  258A
6523  258B
6524  258C
6525  258D
6526  258E
6527  258F
6528  2590
6529  2591
6530  2592
6531  2593
6532  2594
6533  2595
6534  2596
6535  2597
6536  2598
6537  2599
6538  259A
6539  259B
6540  259C
6541  259D
6542  259E
6543  259F
6544  25A0
6545  25A1
6546  25A2
6547  25A3
6548  25A4
6549  25A5
6550  25A6
6551  25A7
6552  25A8
6553  25A9
6554  25AA
6555  25AB
6556  25AC
6557  25AD
6558  25AE
6559  25AF
6560  25B0
6561  25B1
6562  25B2
6563  25B3
6564  25B4
6565  25B5
6566  25B6
6567  25B7
6568  25B8
6569  25B9
6570  25BA
6571  25BB
6572  25BC
6573  25BD
6574  25BE
6575  25BF
6576  25C0
6577  25C1
6578  25C2
6579  25C3
6580  25C4
6581  25C5
6582  25C6
6583  25C7
6584  25C8
6585  25C9
6586  25CA
6587  25CB
6588  25CC
6589  25CD
6590  25CE
6591  25CF
6592  25D0
6593  25D1
6594  25D2
6595  25D3
6596  25D4
6597  25D5
6598  25D6
6599  25D7
6600  25D8
6601  25D9
6602  25DA
6603  25DB
6604  25DC
6605  25DD
6606  25DE
6607  25DF
6608  25E0
6609  25E1
6610  25E2
6611  25E3
6612  25E4
6613  25E5
6614  25E6
6615  25E7
6616  25E8
6617  25E9
6618  25EA
6619  25EB
6620  25EC
6621  25ED
6622  25EE
6623  25EF
6624  25F0
6625  25F1
6626  25F2
6627  25F3
6628  25F4
6629  25F5
6630  25F6
6631  25F7
6632  25F8
6633  25F9
6634  25FA
6635  25FB
6636  25FC
6637  25FD
6638  25FE
6639  25FF
6640  2600
6641  2601
6642  2602
6643  2603
6644  2604
6645  2605
6646  2606
6647  2607
6648  2608
6649  2609
6650  260A
6651  260B
6652  260C
6653  260D
6654  260E
6655  260F
6656  2610
6657  2611
6658  2612
6659  2613
6660  2614
6661  2615
6662  2616
6663  2617
6664  2618
6665  2619
6666  261A
6667  261B
6668  261C
6669  261D
6670  261E
6671  261F
6672  2620
6673  2621
6674  2622
6675  2623
6676  2624
6677  2625
6678  2626
6679  2627
6680  2628
6681  2629
6682  262A
6683  262B
6684  262C
6685  262D
6686  262E
6687  262F
6688  2630
6689  2631
6690  2632
6691  2633
6692  2634
6693  2635
6694  2636
6695  2637
6696  2638
6697  2639
6698  263A
6699  263B
6700  263C
6701  263D
6702  263E
6703  263F
6704  2640
6705  2641
6706  2642
6707  2643
6708  2644
6709  2645
6710  2646
6711  2647
6712  2648
6713  2649
6714  264A
6715  264B
6716  264C
6717  264D
6718  264E
6719  264F
6720  2650
6721  2651
6722  2652
6723  2653
6724  2654
6725  2655
6726  2656
6727  2657
6728  2658
6729  2659
6730  265A
6731  265B
6732  265C
6733  265D
6734  265E
6735  265F
6736  2660
6737  2661
6738  2662
6739  2663
6740  2664
6741  2665
6742  2666
6743  2667
6744  2668
6745  2669
6746  266A
6747  266B
6748  266C
6749  266D
6750  266E
6751  266F
6752  2670
6753  2671
6754  2672
6755  2673
6756  2674
6757  2675
6758  2676
6759  2677
6760  2678
6761  2679
6762  267A
6763  267B
6764  267C
6765  267D
6766  267E
6767  267F
6768  2680
6769  2681
6770  2682
6771  2683
6772  2684
6773  2685
6774  2686
6775  2687
6776  2688
6777  2689
6778  268A
6779  268B
6780  268C
6781  268D
6782  268E
6783  268F
6784  2690
6785  2691
6786  2692
6787  2693
6788  2694
6789  2695
6790  2696
6791  2697
6792  2698
6793  2699
6794  269A
6795  269B
6796  269C
6797  269D
6798  269E
6799  269F
6800  26A0
6801  26A1
6802  26A2
6803  26A3
6804  26A4
6805  26A5
6806  26A6
6807  26A7
6808  26A8
6809  26A9
6810  26AA
6811  26AB
6812  26AC
6813  26AD
6814  26AE
6815  26AF
6816  26B0
6817  26B1
6818  26B2
6819  26B3
6820  26B4
6821  26B5
6822  26B6
6823  26B7
6824  26B8
6825  26B9
6826  26BA
6827  26BB
6828  26BC
6829  26BD
6830  26BE
6831  26BF
6832  26C0
6833  26C1
6834  26C2
6835  26C3
6836  26C4
6837  26C5
6838  26C6
6839  26C7
6840  26C8
6841  26C9
6842  26CA
6843  26CB
6844  26CC
6845  26CD
6846  26CE
6847  26CF
6848  26D0
6849  26D1
6850  26D2
6851  26D3
6852  26D4
6853  26D5
6854  26D6
6855  26D7
6856  26D8
6857  26D9
6858  26DA
6859  26DB
6860  26DC
6861  26DD
6862  26DE
6863  26DF
6864  26E0
6865  26E1
6866  26E2
6867  26E3
6868  26E4
6869  26E5
6870  26E6
6871  26E7
6872  26E8
6873  26E9
6874  26EA
6875  26EB
6876  26EC
6877  26ED
6878  26EE
6879  26EF
6880  26F0
6881  26F1
6882  26F2
6883  26F3
6884  26F4
6885  26F5
6886  26F6
6887  26F7
6888  26F8
6889  26F9
6890  26FA
6891  26FB
6892  26FC
6893  26FD
6894  26FE
6895  26FF
6896  2700
6897  2701
6898  2702
6899  2703
6900  2704
6901  2705
6902  2706
6903  2707
6904  2708
6905  2709
6906  270A
6907  270B
6908  270C
6909  270D
6910  270E
6911  270F
6912  2710
6913  2711
6914  2712
6915  2713
6916  2714
6917  2715
6918  2716
6919  2717
6920  2718
6921  2719
6922  271A
6923  271B
6924  271C
6925  271D
6926  271E
6927  271F
6928  2720
6929  2721
6930  2722
6931  2723
6932  2724
6933  2725
6934  2726
6935  2727
6936  2728
6937  2729
6938  272A
6939  272B
6940  272C
6941  272D
6942  272E
6943  272F
6944  2730
6945  2731
6946  2732
6947  2733
6948  2734
6949  2735
6950  2736
6951  2737
6952  2738
6953  2739
6954  273A
6955  273B
6956  273C
6957  273D
6958  273E
6959  273F
6960  2740
6961  2741
6962  2742
6963  2743
6964  2744
6965  2745
6966  2746
6967  2747
6968  2748
6969  2749
6970  274A
6971  274B
6972  274C
6973  274D
6974  274E
6975  274F
6976  2750
6977  2751
6978  2752
6979  2753
6980  2754
6981  2755
6982  2756
6983  2757
6984  2758
6985  2759
6986  275A
6987  275B
6988  275C
6989  275D
6990  275E
6991  275F
6992  2760
6993  2761
6994  2762
6995  2763
6996  2764
6997  2765
6998  2766
6999  2767
7000  2768
7001  2769
7002  276A
7003  276B
7004  276C
7005  276D
7006  276E
7007  276F
7008  2770
7009  2771
7010  2772
7011  2773
7012  2774
7013  2775
7014  2776
7015  2777
7016  2778
7017  2779
7018  277A
7019  277B
7020  277C
7021  277D
7022  277E
7023  277F
7024  2780
7025  2781
7026  2782
7027  2783
7028  2784
7029  2785
7030  2786
7031  2787
7032  2788
7033  2789
7034  278A
7035  278B
7036  278C
7037  278D
7038  278E
7039  278F
7040  2790
7041  2791
7042  2792
7043  2793
7044  2794
7045  2795
7046  2796
7047  2797
7048  2798
7049  2799
7050  279A
7051  279B
7052  279C
7053  279D
7054  279E
7055  279F
7056  27A0
7057  27A1
7058  27A2
7059  27A3
7060  27A4
7061  27A5
7062  27A6
7063  27A7
7064  27A8
7065  27A9
7066  27AA
7067  27AB
7068  27AC
7069  27AD
7070  27AE
7071  27AF
7072  27B0
7073  27B1
7074  27B2
7075  27B3
7076  27B4
7077  27B5
7078  27B6
7079  27B7
7080  27B8
7081  27B9
7082  27BA
7083  27BB
7084  27BC
7085  27BD
7086  27BE
7087  27BF
7088  27C0
7089  27C1
7090  27C2
7091  27C3
7092  27C4
7093  27C5
7094  27C6
7095  27C7
7096  27C8
7097  27C9
7098  27CA
7099  27CB
7100  27CC
7101  27CD
7102  27CE
7103  27CF
7104  27D0
7105  27D1
7106  27D2
7107  27D3
7108  27D4
7109  27D5
7110  27D6
7111  27D7
7112  27D8
7113  27D9
7114  27DA
7115  27DB
7116  27DC
7117  27DD
7118  27DE
7119  27DF
7120  27E0
7121  27E1
7122  27E2
7123  27E3
7124  27E4
7125  27E5
7126  27E6
7127  27E7
7128  27E8
7129  27E9
7130  27EA
7131  27EB
7132  27EC
7133  27ED
7134  27EE
7135  27EF
7136  27F0
7137  27F1
7138  27F2
7139  27F3
7140  27F4
7141  27F5
7142  27F6
7143  27F7
7144  27F8
7145  27F9
7146  27FA
7147  27FB
7148  27FC
7149  27FD
7150  27FE
7151  27FF
7152  2800
7153  2801
7154  2802
7155  2803
7156  2804
7157  2805
7158  2806
7159  2807
7160  2808
7161  2809
7162  280A
7163  280B
7164  280C
7165  280D
7166  280E
7167  280F
7168  2810
7169  2811
7170  2812
7171  2813
7172  2814
7173  2815
7174  2816
7175  2817
7176  2818
7177  2819
7178  281A
7179  281B
7180  281C
7181  281D
7182  281E
7183  281F
7184  2820
7185  2821
7186  2822
7187  2823
7188  2824
7189  2825
7190  2826
7191  2827
7192  2828
7193  2829
7194  282A
7195  282B
7196  282C
7197  282D
7198  282E
7199  282F
7200  2830
7201  2831
7202  2832
7203  2833
7204  2834
7205  2835
7206  2836
7207  2837
7208  2838
7209  2839
7210  283A
7211  283B
7212  283C
7213  283D
7214  283E
7215  283F
7216  2840
7217  2841
7218  2842
7219  2843
7220  2844
7221  2845
7222  2846
7223  2847
7224  2848
7225  2849
7226  284A
7227  284B
7228  284C
7229  284D
7230  284E
7231  284F
7232  2850
7233  2851
7234  2852
7235  2853
7236  2854
7237  2855
7238  2856
7239  2857
7240  2858
7241  2859
7242  285A
7243  285B
7244  285C
7245  285D
7246  285E
7247  285F
7248  2860
7249  2861
7250  2862
7251  2863
7252  2864
7253  2865
7254  2866
7255  2867
7256  2868
7257  2869
7258  286A
7259  286B
7260  286C
7261  286D
7262  286E
7263  286F
7264  2870
7265  2871
7266  2872
7267  2873
7268  2874
7269  2875
7270  2876
7271  2877
7272  2878
7273  2879
7274  287A
7275  287B
7276  287C
7277  287D
7278  287E
7279  287F
7280  2880
7281  2881
7282  2882
7283  2883
7284  2884
7285  2885
7286  2886
7287  2887
7288  2888
7289  2889
7290  288A
7291  288B
7292  288C
7293  288D
7294  288E
7295  288F
7296  2890
7297  2891
7298  2892
7299  2893
7300  2894
7301  2895
7302  2896
7303  2897
7304  2898
7305  2899
7306  289A
7307  289B
7308  289C
7309  289D
7310  289E
7311  289F
7312  28A0
7313  28A1
7314  28A2
7315  28A3
7316  28A4
7317  28A5
7318  28A6
7319  28A7
7320  28A8
7321  28A9
7322  28AA
7323  28AB
7324  28AC
7325  28AD
7326  28AE
7327  28AF
7328  28B0
7329  28B1
7330  28B2
7331  28B3
7332  28B4
7333  28B5
7334  28B6
7335  28B7
7336  28B8
7337  28B9
7338  28BA
7339  28BB
7340  28BC
7341  28BD
7342  28BE
7343  28BF
7344  28C0
7345  28C1
7346  28C2
7347  28C3
7348  28C4
7349  28C5
7350  28C6
7351  28C7
7352  28C8
7353  28C9
7354  28CA
7355  28CB
7356  28CC
7357  28CD
7358  28CE
7359  28CF
7360  28D0
7361  28D1
7362  28D2
7363  28D3
7364  28D4
7365  28D5
7366  28D6
7367  28D7
7368  28D8
7369  28D9
7370  28DA
7371  28DB
7372  28DC
7373  28DD
7374  28DE
7375  28DF
7376  28E0
7377  28E1
7378  28E2
7379  28E3
7380  28E4
7381  28E5
7382  28E6
7383  28E7
7384  28E8
7385  28E9
7386  28EA
7387  28EB
7388  28EC
7389  28ED
7390  28EE
7391  28EF
7392  28F0
7393  28F1
7394  28F2
7395  28F3
7396  28F4
7397  28F5
7398  28F6
7399  28F7
7400  28F8
7401  28F9
7402  28FA
7403  28FB
7404  28FC
7405  28FD
7406  28FE
7407  28FF
7408  2900
7409  2901
7410  2902
7411  2903
7412  2904
7413  2905
7414  2906
7415  2907
7416  2908
7417  2909
7418  290A
7419  290B
7420  290C
7421  290D
7422  290E
7423  290F
7424  2910
7425  2911
7426  2912
7427  2913
7428  2914
7429  2915
7430  2916
7431  2917
7432  2918
7433  2919
7434  291A
7435  291B
7436  291C
7437  291D
7438  291E
7439  291F
7440  2920
7441  2921
7442  2922
7443  2923
7444  2924
7445  2925
7446  2926
7447  2927
7448  2928
7449  2929
7450  292A
7451  292B
7452  292C
7453  292D
7454  292E
7455  292F
7456  2930
7457  2931
7458  2932
7459  2933
7460  2934
7461  2935
7462  2936
7463  2937
7464  2938
7465  2939
7466  293A
7467  293B
7468  293C
7469  293D
7470  293E
7471  293F
7472  2940
7473  2941
7474  2942
7475  2943
7476  2944
7477  2945
7478  2946
7479  2947
7480  2948
7481  2949
7482  294A
7483  294B
7484  294C
7485  294D
7486  294E
7487  294F
7488  2950
7489  2951
7490  2952
7491  2953
7492  2954
7493  2955
7494  2956
7495  2957
7496  2958
7497  2959
7498  295A
7499  295B
7500  295C
7501  295D
7502  295E
7503  295F
7504  2960
7505  2961
7506  2962
7507  2963
7508  2964
7509  2965
7510  2966
7511  2967
7512  2968
7513  2969
7514  296A
7515  296B
7516  296C
7517  296D
7518  296E
7519  296F
7520  2970
7521  2971
7522  2972
7523  2973
7524  2974
7525  2975
7526  2976
7527  2977
7528  2978
7529  2979
7530  297A
7531  297B
7532  297C
7533  297D
7534  297E
7535  297F
7536  2980
7537  2981
7538  2982
7539  2983
7540  2984
7541  2985
7542  2986
7543  2987
7544  2988
7545  2989
7546  298A
7547  298B
7548  298C
7549  298D
7550  298E
7551  298F
7552  2990
7553  2991
7554  2992
7555  2993
7556  2994
7557  2995
7558  2996
7559  2997
7560  2998
7561  2999
7562  299A
7563  299B
7564  299C
7565  299D
7566  299E
7567  299F
7568  29A0
7569  29A1
7570  29A2
7571  29A3
7572  29A4
7573  29A5
7574  29A6
7575  29A7
7576  29A8
7577  29A9
7578  29AA
7579  29AB
7580  29AC
7581  29AD
7582  29AE
7583  29AF
7584  29B0
7585  29B1
7586  29B2
7587  29B3
7588  29B4
7589  29B5
7590  29B6
7591  29B7
7592  29B8
7593  29B9
7594  29BA
7595  29BB
7596  29BC
7597  29BD
7598  29BE
7599  29BF
7600  29C0
7601  29C1
7602  29C2
7603  29C3
7604  29C4
7605  29C5
7606  29C6
7607  29C7
7608  29C8
7609  29C9
7610  29CA
7611  29CB
7612  29CC
7613  29CD
7614  29CE
7615  29CF
7616  29D0
7617  29D1
7618  29D2
7619  29D3
7620  29D4
7621  29D5
7622  29D6
7623  29D7
7624  29D8
7625  29D9
7626  29DA
7627  29DB
7628  29DC
7629  29DD
7630  29DE
7631  29DF
7632  29E0
7633  29E1
7634  29E2
7635  29E3
7636  29E4
7637  29E5
7638  29E6
7639  29E7
7640  29E8
7641  29E9
7642  29EA
7643  29EB
7644  29EC
7645  29ED
7646  29EE
7647  29EF
7648  29F0
7649  29F1
7650  29F2
7651  29F3
7652  29F4
7653  29F5
7654  29F6
7655  29F7
7656  29F8
7657  29F9
7658  29FA
7659  29FB
7660  29FC
7661  29FD
7662  29FE
7663  29FF
7664  2A00
7665  2A01
7666  2A02
7667  2A03
7668  2A04
7669  2A05
7670  2A06
7671  2A07
7672  2A08
7673  2A09
7674  2A0A
7675  2A0B
7676  2A0C
7677  2A0D
7678  2A0E
7679  2A0F
7680  2A10
7681  2A11
7682  2A12
7683  2A13
7684  2A14
7685  2A15
7686  2A16
7687  2A17
7688  2A18
7689  2A19
7690  2A1A
7691  2A1B
7692  2A1C
7693  2A1D
7694  2A1E
7695  2A1F
7696  2A20
7697  2A21
7698  2A22
7699  2A23
7700  2A24
7701  2A25
7702  2A26
7703  2A27
7704  2A28
7705  2A29
7706  2A2A
7707  2A2B
7708  2A2C
7709  2A2D
7710  2A2E
7711  2A2F
7712  2A30
7713  2A31
7714  2A32
7715  2A33
7716  2A34
7717  2A35
7718  2A36
7719  2A37
7720  2A38
7721  2A39
7722  2A3A
7723  2A3B
7724  2A3C
7725  2A3D
7726  2A3E
7727  2A3F
7728  2A40
7729  2A41
7730  2A42
7731  2A43
7732  2A44
7733  2A45
7734  2A46
7735  2A47
7736  2A48
7737  2A49
7738  2A4A
7739  2A4B
7740  2A4C
7741  2A4D
7742  2A4E
7743  2A4F
7744  2A50
7745  2A51
7746  2A52
7747  2A53
7748  2A54
7749  2A55
7750  2A56
7751  2A57
7752  2A58
7753  2A59
7754  2A5A
7755  2A5B
7756  2A5C
7757  2A5D
7758  2A5E
7759  2A5F
7760  2A60
7761  2A61
7762  2A62
7763  2A63
7764  2A64
7765  2A65
7766  2A66
7767  2A67
7768  2A68
7769  2A69
7770  2A6A
7771  2A6B
7772  2A6C
7773  2A6D
7774  2A6E
7775  2A6F
7776  2A70
7777  2A71
7778  2A72
7779  2A73
7780  2A74
7781  2A75
7782  2A76
7783  2A77
7784  2A78
7785  2A79
7786  2A7A
7787  2A7B
7788  2A7C
7789  2A7D
7790  2A7E
7791  2A7F
7792  2A80
7793  2A81
7794  2A82
7795  2A83
7796  2A84
7797  2A85
7798  2A86
7799  2A87
7800  2A88
7801  2A89
7802  2A8A
7803  2A8B
7804  2A8C
7805  2A8D
7806  2A8E
7807  2A8F
7808  2A90
7809  2A91
7810  2A92
7811  2A93
7812  2A94
7813  2A95
7814  2A96
7815  2A97
7816  2A98
7817  2A99
7818  2A9A
7819  2A9B
7820  2A9C
7821  2A9D
7822  2A9E
7823  2A9F
7824  2AA0
7825  2AA1
7826  2AA2
7827  2AA3
7828  2AA4
7829  2AA5
7830  2AA6
7831  2AA7
7832  2AA8
7833  2AA9
7834  2AAA
7835  2AAB
7836  2AAC
7837  2AAD
7838  2AAE
7839  2AAF
7840  2AB0
7841  2AB1
7842  2AB2
7843  2AB3
7844  2AB4
7845  2AB5
7846  2AB6
7847  2AB7
7848  2AB8
7849  2AB9
7850  2ABA
7851  2ABB
7852  2ABC
7853  2ABD
7854  2ABE
7855  2ABF
7856  2AC0
7857  2AC1
7858  2AC2
7859  2AC3
7860  2AC4
7861  2AC5
7862  2AC6
7863  2AC7
7864  2AC8
7865  2AC9
7866  2ACA
7867  2ACB
7868  2ACC
7869  2ACD
7870  2ACE
7871  2ACF
7872  2AD0
7873  2AD1
7874  2AD2
7875  2AD3
7876  2AD4
7877  2AD5
7878  2AD6
7879  2AD7
7880  2AD8
7881  2AD9
7882  2ADA
7883  2ADB
7884  2ADC
7885  2ADD
7886  2ADE
7887  2ADF
7888  2AE0
7889  2AE1
7890  2AE2
7891  2AE3
7892  2AE4
7893  2AE5
7894  2AE6
7895  2AE7
7896  2AE8
7897  2AE9
7898  2AEA
7899  2AEB
7900  2AEC
7901  2AED
7902  2AEE
7903  2AEF
7904  2AF0
7905  2AF1
7906  2AF2
7907  2AF3
7908  2AF4
7909  2AF5
7910  2AF6
7911  2AF7
7912  2AF8
7913  2AF9
7914  2AFA
7915  2AFB
7916  2AFC
7917  2AFD
7918  2AFE
7919  2AFF
7920  2B00
7921  2B01
7922  2B02
7923  2B03
7924  2B04
7925  2B05
7926  2B06
7927  2B07
7928  2B08
7929  2B09
7930  2B0A
7931  2B0B
7932  2B0C
7933  2B0D
7934  2B0E
7935  2B0F
7936  2B10
7937  2B11
7938  2B12
7939  2B13
7940  2B14
7941  2B15
7942  2B16
7943  2B17
7944  2B18
7945  2B19
7946  2B1A
7947  2B1B
7948  2B1C
7949  2B1D
7950  2B1E
7951  2B1F
7952  2B20
7953  2B21
7954  2B22
7955  2B23
7956  2B24
7957  2B25
7958  2B26
7959  2B27
7960  2B28
7961  2B29
7962  2B2A
7963  2B2B
7964  2B2C
7965  2B2D
7966  2B2E
7967  2B2F
7968  2B30
7969  2B31
7970  2B32
7971  2B33
7972  2B34
7973  2B35
7974  2B36
7975  2B37
7976  2B38
7977  2B39
7978  2B3A
7979  2B3B
7980  2B3C
7981  2B3D
7982  2B3E
7983  2B3F
7984  2B40
7985  2B41
7986  2B42
7987  2B43
7988  2B44
7989  2B45
7990  2B46
7991  2B47
7992  2B48
7993  2B49
7994  2B4A
7995  2B4B
7996  2B4C
7997  2B4D
7998  2B4E
7999  2B4F
8000  2B50
8001  2B51
8002  2B52
8003  2B53
8004  2B54
8005  2B55
8006  2B56
8007  2B57
8008  2B58
8009  2B59
8010  2B5A
8011  2B5B
8012  2B5C
8013  2B5D
8014  2B5E
8015  2B5F
8016  2B60
8017  2B61
8018  2B62
8019  2B63
8020  2B64
8021  2B65
8022  2B66
8023  2B67
8024  2B68
8025  2B69
8026  2B6A
8027  2B6B
8028  2B6C
8029  2B6D
8030  2B6E
8031  2B6F
8032  2B70
8033  2B71
8034  2B72
8035  2B73
8036  2B74
8037  2B75
8038  2B76
8039  2B77
8040  2B78
8041  2B79
8042  2B7A
8043  2B7B
8044  2B7C
8045  2B7D
8046  2B7E
8047  2B7F
8048  2B80
8049  2B81
8050  2B82
8051  2B83
8052  2B84
8053  2B85
8054  2B86
8055  2B87
8056  2B88
8057  2B89
8058  2B8A
8059  2B8B
8060  2B8C
8061  2B8D
8062  2B8E
8063  2B8F
8064  2B90
8065  2B91
8066  2B92
8067  2B93
8068  2B94
8069  2B95
8070  2B96
8071  2B97
8072  2B98
8073  2B99
8074  2B9A
8075  2B9B
8076  2B9C
8077  2B9D
8078  2B9E
8079  2B9F
8080  2BA0
8081  2BA1
8082  2BA2
8083  2BA3
8084  2BA4
8085  2BA5
8086  2BA6
8087  2BA7
8088  2BA8
8089  2BA9
8090  2BAA
8091  2BAB
8092  2BAC
8093  2BAD
8094  2BAE
8095  2BAF
8096  2BB0
8097  2BB1
8098  2BB2
8099  2BB3
8100  2BB4
8101  2BB5
8102  2BB6
8103  2BB7
8104  2BB8
8105  2BB9
8106  2BBA
8107  2BBB
8108  2BBC
8109  2BBD
8110  2BBE
8111  2BBF
8112  2BC0
8113  2BC1
8114  2BC2
8115  2BC3
8116  2BC4
8117  2BC5
8118  2BC6
8119  2BC7
8120  2BC8
8121  2BC9
8122  2BCA
8123  2BCB
8124  2BCC
8125  2BCD
8126  2BCE
8127  2BCF
8128  2BD0
8129  2BD1
8130  2BD2
8131  2BD3
8132  2BD4
8133  2BD5
8134  2BD6
8135  2BD7
8136  2BD8
8137  2BD9
8138  2BDA
8139  2BDB
8140  2BDC
8141  2BDD
8142  2BDE
8143  2BDF
8144  2BE0
8145  2BE1
8146  2BE2
8147  2BE3
8148  2BE4
8149  2BE5
8150  2BE6
8151  2BE7
8152  2BE8
8153  2BE9
8154  2BEA
8155  2BEB
8156  2BEC
8157  2BED
8158  2BEE
8159  2BEF
8160  2BF0
8161  2BF1
8162  2BF2
8163  2BF3
8164  2BF4
8165  2BF5
8166  2BF6
8167  2BF7
8168  2BF8
8169  2BF9
8170  2BFA
8171  2BFB
8172  2BFC
8173  2BFD
8174  2BFE
8175  2BFF
8176  2C00
8177  2C01
8178  2C02
8179  2C03
8180  2C04
8181  2C05
8182  2C06
8183  2C07
8184  2C08
8185  2C09
8186  2C0A
8187  2C0B
8188  2C0C
8189  2C0D
8190  2C0E
8191  2C0F
8192  2C10
8193  2C11
8194  2C12
8195  2C13
8196  2C14
8197  2C15
8198  2C16
8199  2C17
8200  2C18
8201  2C19
8202  2C1A
8203  2C1B
8204  2C1C
8205  2C1D
8206  2C1E
8207  2C1F
8208  2C20
8209  2C21
8210  2C22
8211  2C23
8212  2C24
8213  2C25
8214  2C26
8215  2C27
8216  2C28
8217  2C29
8218  2C2A
8219  2C2B
8220  2C2C
8221  2C2D
8222  2C2E
8223  2C2F
8224  2C30
8225  2C31
8226  2C32
8227  2C33
8228  2C34
8229  2C35
8230  2C36
8231  2C37
8232  2C38
8233  2C39
8234  2C3A
8235  2C3B
8236  2C3C
8237  2C3D
8238  2C3E
8239  2C3F
8240  2C40
8241  2C41
8242  2C42
8243  2C43
8244  2C44
8245  2C45
8246  2C46
8247  2C47
8248  2C48
8249  2C49
8250  2C4A
8251  2C4B
8252  2C4C
8253  2C4D
8254  2C4E
8255  2C4F
8256  2C50
8257  2C51
8258  2C52
8259  2C53
8260  2C54
8261  2C55
8262  2C56
8263  2C57
8264  2C58
8265  2C59
8266  2C5A
8267  2C5B
8268  2C5C
8269  2C5D
8270  2C5E
8271  2C5F
8272  2C60
8273  2C61
8274  2C62
8275  2C63
8276  2C64
8277  2C65
8278  2C66
8279  2C67
8280  2C68
8281  2C69
8282  2C6A
8283  2C6B
8284  2C6C
8285  2C6D
8286  2C6E
8287  2C6F
8288  2C70
8289  2C71
8290  2C72
8291  2C73
8292  2C74
8293  2C75
8294  2C76
8295  2C77
8296  2C78
8297  2C79
8298  2C7A
8299  2C7B
8300  2C7C
8301  2C7D
8302  2C7E
8303  2C7F
8304  2C80
8305  2C81
8306  2C82
8307  2C83
8308  2C84
8309  2C85
8310  2C86
8311  2C87
8312  2C88
8313  2C89
8314  2C8A
8315  2C8B
8316  2C8C
8317  2C8D
8318  2C8E
8319  2C8F
8320  2C90
8321  2C91
8322  2C92
8323  2C93
8324  2C94
8325  2C95
8326  2C96
8327  2C97
8328  2C98
8329  2C99
8330  2C9A
8331  2C9B
8332  2C9C
8333  2C9D
8334  2C9E
8335  2C9F
8336  2CA0
8337  2CA1
8338  2CA2
8339  2CA3
8340  2CA4
8341  2CA5
8342  2CA6
8343  2CA7
8344  2CA8
8345  2CA9
8346  2CAA
8347  2CAB
8348  2CAC
8349  2CAD
8350  2CAE
8351  2CAF
8352  2CB0
8353  2CB1
8354  2CB2
8355  2CB3
8356  2CB4
8357  2CB5
8358  2CB6
8359  2CB7
8360  2CB8
8361  2CB9
8362  2CBA
8363  2CBB
8364  2CBC
8365  2CBD
8366  2CBE
8367  2CBF
8368  2CC0
8369  2CC1
8370  2CC2
8371  2CC3
8372  2CC4
8373  2CC5
8374  2CC6
8375  2CC7
8376  2CC8
8377  2CC9
8378  2CCA
8379  2CCB
8380  2CCC
8381  2CCD
8382  2CCE
8383  2CCF
8384  2CD0
8385  2CD1
8386  2CD2
8387  2CD3
8388  2CD4
8389  2CD5
8390  2CD6
8391  2CD7
8392  2CD8
8393  2CD9
8394  2CDA
8395  2CDB
8396  2CDC
8397  2CDD
8398  2CDE
8399  2CDF
8400  2CE0
8401  2CE1
8402  2CE2
8403  2CE3
8404  2CE4
8405  2CE5
8406  2CE6
8407  2CE7
8408  2CE8
8409  2CE9
8410  2CEA
8411  2CEB
8412  2CEC
8413  2CED
8414  2CEE
8415  2CEF
8416  2CF0
8417  2CF1
8418  2CF2
8419  2CF3
8420  2CF4
8421  2CF5
8422  2CF6
8423  2CF7
8424  2CF8
8425  2CF9
8426  2CFA
8427  2CFB
8428  2CFC
8429  2CFD
8430  2CFE
8431  2CFF
8432  2D00
8433  2D01
8434  2D02
8435  2D03
8436  2D04
8437  2D05
8438  2D06
8439  2D07
8440  2D08
8441  2D09
8442  2D0A
8443  2D0B
8444  2D0C
8445  2D0D
8446  2D0E
8447  2D0F
8448  2D10
8449  2D11
8450  2D12
8451  2D13
8452  2D14
8453  2D15
8454  2D16
8455  2D17
8456  2D18
8457  2D19
8458  2D1A
8459  2D1B
8460  2D1C
8461  2D1D
8462  2D1E
8463  2D1F
8464  2D20
8465  2D21
8466  2D22
8467  2D23
8468  2D24
8469  2D25
8470  2D26
8471  2D27
8472  2D28
8473  2D29
8474  2D2A
8475  2D2B
8476  2D2C
8477  2D2D
8478  2D2E
8479  2D2F
8480  2D30
8481  2D31
8482  2D32
8483  2D33
8484  2D34
8485  2D35
8486  2D36
8487  2D37
8488  2D38
8489  2D39
8490  2D3A
8491  2D3B
8492  2D3C
8493  2D3D
8494  2D3E
8495  2D3F
8496  2D40
8497  2D41
8498  2D42
8499  2D43
8500  2D44
8501  2D45
8502  2D46
8503  2D47
8504  2D48
8505  2D49
8506  2D4A
8507  2D4B
8508  2D4C
8509  2D4D
8510  2D4E
8511  2D4F
8512  2D50
8513  2D51
8514  2D52
8515  2D53
8516  2D54
8517  2D55
8518  2D56
8519  2D57
8520  2D58
8521  2D59
8522  2D5A
8523  2D5B
8524  2D5C
8525  2D5D
8526  2D5E
8527  2D5F
8528  2D60
8529  2D61
8530  2D62
8531  2D63
8532  2D64
8533  2D65
8534  2D66
8535  2D67
8536  2D68
8537  2D69
8538  2D6A
8539  2D6B
8540  2D6C
8541  2D6D
8542  2D6E
8543  2D6F
8544  2D70
8545  2D71
8546  2D72
8547  2D73
8548  2D74
8549  2D75
8550  2D76
8551  2D77
8552  2D78
8553  2D79
8554  2D7A
8555  2D7B
8556  2D7C
8557  2D7D
8558  2D7E
8559  2D7F
8560  2D80
8561  2D81
8562  2D82
8563  2D83
8564  2D84
8565  2D85
8566  2D86
8567  2D87
8568  2D88
8569  2D89
8570  2D8A
8571  2D8B
8572  2D8C
8573  2D8D
8574  2D8E
8575  2D8F
8576  2D90
8577  2D91
8578  2D92
8579  2D93
8580  2D94
8581  2D95
8582  2D96
8583  2D97
8584  2D98
8585  2D99
8586  2D9A
8587  2D9B
8588  2D9C
8589  2D9D
8590  2D9E
8591  2D9F
8592  2DA0
8593  2DA1
8594  2DA2
8595  2DA3
8596  2DA4
8597  2DA5
8598  2DA6
8599  2DA7
8600  2DA8
8601  2DA9
8602  2DAA
8603  2DAB
8604  2DAC
8605  2DAD
8606  2DAE
8607  2DAF
8608  2DB0
8609  2DB1
8610  2DB2
8611  2DB3
8612  2DB4
8613  2DB5
8614  2DB6
8615  2DB7
8616  2DB8
8617  2DB9
8618  2DBA
8619  2DBB
8620  2DBC
8621  2DBD
8622  2DBE
8623  2DBF
8624  2DC0
8625  2DC1
8626  2DC2
8627  2DC3
8628  2DC4
8629  2DC5
8630  2DC6
8631  2DC7
8632  2DC8
8633  2DC9
8634  2DCA
8635  2DCB
8636  2DCC
8637  2DCD
8638  2DCE
8639  2DCF
8640  2DD0
8641  2DD1
8642  2DD2
8643  2DD3
8644  2DD4
8645  2DD5
8646  2DD6
8647  2DD7
8648  2DD8
8649  2DD9
8650  2DDA
8651  2DDB
8652  2DDC
8653  2DDD
8654  2DDE
8655  2DDF
8656  2DE0
8657  2DE1
8658  2DE2
8659  2DE3
8660  2DE4
8661  2DE5
8662  2DE6
8663  2DE7
8664  2DE8
8665  2DE9
8666  2DEA
8667  2DEB
8668  2DEC
8669  2DED
8670  2DEE
8671  2DEF
8672  2DF0
8673  2DF1
8674  2DF2
8675  2DF3
8676  2DF4
8677  2DF5
8678  2DF6
8679  2DF7
8680  2DF8
8681  2DF9
8682  2DFA
8683  2DFB
8684  2DFC
8685  2DFD
8686  2DFE
8687  2DFF
8688  2E00
8689  2E01
8690  2E02
8691  2E03
8692  2E04
8693  2E05
8694  2E06
8695  2E07
8696  2E08
8697  2E09
8698  2E0A
8699  2E0B
8700  2E0C
8701  2E0D
8702  2E0E
8703  2E0F
8704  2E10
8705  2E11
8706  2E12
8707  2E13
8708  2E14
8709  2E15
8710  2E16
8711  2E17
8712  2E18
8713  2E19
8714  2E1A
8715  2E1B
8716  2E1C
8717  2E1D
8718  2E1E
8719  2E1F
8720  2E20
8721  2E21
8722  2E22
8723  2E23
8724  2E24
8725  2E25
8726  2E26
8727  2E27
8728  2E28
8729  2E29
8730  2E2A
8731  2E2B
8732  2E2C
8733  2E2D
8734  2E2E
8735  2E2F
8736  2E30
8737  2E31
8738  2E32
8739  2E33
8740  2E34
8741  2E35
8742  2E36
8743  2E37
8744  2E38
8745  2E39
8746  2E3A
8747  2E3B
8748  2E3C
8749  2E3D
8750  2E3E
8751  2E3F
8752  2E40
8753  2E41
8754  2E42
8755  2E43
8756  2E44
8757  2E45
8758  2E46
8759  2E47
8760  2E48
8761  2E49
8762  2E4A
8763  2E4B
8764  2E4C
8765  2E4D
8766  2E4E
8767  2E4F
8768  2E50
8769  2E51
8770  2E52
8771  2E53
8772  2E54
8773  2E55
8774  2E56
8775  2E57
8776  2E58
8777  2E59
8778  2E5A
8779  2E5B
8780  2E5C
8781  2E5D
8782  2E5E
8783  2E5F
8784  2E60
8785  2E61
8786  2E62
8787  2E63
8788  2E64
8789  2E65
8790  2E66
8791  2E67
8792  2E68
8793  2E69
8794  2E6A
8795  2E6B
8796  2E6C
8797  2E6D
8798  2E6E
8799  2E6F
8800  2E70
8801  2E71
8802  2E72
8803  2E73
8804  2E74
8805  2E75
8806  2E76
8807  2E77
8808  2E78
8809  2E79
8810  2E7A
8811  2E7B
8812  2E7C
8813  2E7D
8814  2E7E
8815  2E7F
8816  2E80
8817  2E81
8818  2E82
8819  2E83
8820  2E84
8821  2E85
8822  2E86
8823  2E87
8824  2E88
8825  2E89
8826  2E8A
8827  2E8B
8828  2E8C
8829  2E8D
8830  2E8E
8831  2E8F
8832  2E90
8833  2E91
8834  2E92
8835  2E93
8836  2E94
8837  2E95
8838  2E96
8839  2E97
8840  2E98
8841  2E99
8842  2E9A
8843  2E9B
8844  2E9C
8845  2E9D
8846  2E9E
8847  2E9F
8848  2EA0
8849  2EA1
8850  2EA2
8851  2EA3
8852  2EA4
8853  2EA5
8854  2EA6
8855  2EA7
8856  2EA8
8857  2EA9
8858  2EAA
8859  2EAB
8860  2EAC
8861  2EAD
8862  2EAE
8863  2EAF
8864  2EB0
8865  2EB1
8866  2EB2
8867  2EB3
8868  2EB4
8869  2EB5
8870  2EB6
8871  2EB7
8872  2EB8
8873  2EB9
8874  2EBA
8875  2EBB
8876  2EBC
8877  2EBD
8878  2EBE
8879  2EBF
8880  2EC0
8881  2EC1
8882  2EC2
8883  2EC3
8884  2EC4
8885  2EC5
8886  2EC6
8887  2EC7
8888  2EC8
8889  2EC9
8890  2ECA
8891  2ECB
8892  2ECC
8893  2ECD
8894  2ECE
8895  2ECF
8896  2ED0
8897  2ED1
8898  2ED2
8899  2ED3
8900  2ED4
8901  2ED5
8902  2ED6
8903  2ED7
8904  2ED8
8905  2ED9
8906  2EDA
8907  2EDB
8908  2EDC
8909  2EDD
8910  2EDE
8911  2EDF
8912  2EE0
8913  2EE1
8914  2EE2
8915  2EE3
8916  2EE4
8917  2EE5
8918  2EE6
8919  2EE7
8920  2EE8
8921  2EE9
8922  2EEA
8923  2EEB
8924  2EEC
8925  2EED
8926  2EEE
8927  2EEF
8928  2EF0
8929  2EF1
8930  2EF2
8931  2EF3
8932  2EF4
8933  2EF5
8934  2EF6
8935  2EF7
8936  2EF8
8937  2EF9
8938  2EFA
8939  2EFB
8940  2EFC
8941  2EFD
8942  2EFE
8943  2EFF
8944  2F00
8945  2F01
8946  2F02
8947  2F03
8948  2F04
8949  2F05
8950  2F06
8951  2F07
8952  2F08
8953  2F09
8954  2F0A
8955  2F0B
8956  2F0C
8957  2F0D
8958  2F0E
8959  2F0F
8960  2F10
8961  2F11
8962  2F12
8963  2F13
8964  2F14
8965  2F15
8966  2F16
8967  2F17
8968  2F18
8969  2F19
8970  2F1A
8971  2F1B
8972  2F1C
8973  2F1D
8974  2F1E
8975  2F1F
8976  2F20
8977  2F21
8978  2F22
8979  2F23
8980  2F24
8981  2F25
8982  2F26
8983  2F27
8984  2F28
8985  2F29
8986  2F2A
8987  2F2B
8988  2F2C
8989  2F2D
8990  2F2E
8991  2F2F
8992  2F30
8993  2F31
8994  2F32
8995  2F33
8996  2F34
8997  2F35
8998  2F36
8999  2F37
9000  2F38
9001  2F39
9002  2F3A
9003  2F3B
9004  2F3C
9005  2F3D
9006  2F3E
9007  2F3F
9008  2F40
9009  2F41
9010  2F42
9011  2F43
9012  2F44
9013  2F45
9014  2F46
9015  2F47
9016  2F48
9017  2F49
9018  2F4A
9019  2F4B
9020  2F4C
9021  2F4D
9022  2F4E
9023  2F4F
9024  2F50
9025  2F51
9026  2F52
9027  2F53
9028  2F54
9029  2F55
9030  2F56
9031  2F57
9032  2F58
9033  2F59
9034  2F5A
9035  2F5B
9036  2F5C
9037  2F5D
9038  2F5E
9039  2F5F
9040  2F60
9041  2F61
9042  2F62
9043  2F63
9044  2F64
9045  2F65
9046  2F66
9047  2F67
9048  2F68
9049  2F69
9050  2F6A
9051  2F6B
9052  2F6C
9053  2F6D
9054  2F6E
9055  2F6F
9056  2F70
9057  2F71
9058  2F72
9059  2F73
9060  2F74
9061  2F75
9062  2F76
9063  2F77
9064  2F78
9065  2F79
9066  2F7A
9067  2F7B
9068  2F7C
9069  2F7D
9070  2F7E
9071  2F7F
9072  2F80
9073  2F81
9074  2F82
9075  2F83
9076  2F84
9077  2F85
9078  2F86
9079  2F87
9080  2F88
9081  2F89
9082  2F8A
9083  2F8B
9084  2F8C
9085  2F8D
9086  2F8E
9087  2F8F
9088  2F90
9089  2F91
9090  2F92
9091  2F93
9092  2F94
9093  2F95
9094  2F96
9095  2F97
9096  2F98
9097  2F99
9098  2F9A
9099  2F9B
9100  2F9C
9101  2F9D
9102  2F9E
9103  2F9F
9104  2FA0
9105  2FA1
9106  2FA2
9107  2FA3
9108  2FA4
9109  2FA5
9110  2FA6
9111  2FA7
9112  2FA8
9113  2FA9
9114  2FAA
9115  2FAB
9116  2FAC
9117  2FAD
9118  2FAE
9119  2FAF
9120  2FB0
9121  2FB1
9122  2FB2
9123  2FB3
9124  2FB4
9125  2FB5
9126  2FB6
9127  2FB7
9128  2FB8
9129  2FB9
9130  2FBA
9131  2FBB
9132  2FBC
9133  2FBD
9134  2FBE
9135  2FBF
9136  2FC0
9137  2FC1
9138  2FC2
9139  2FC3
9140  2FC4
9141  2FC5
9142  2FC6
9143  2FC7
9144  2FC8
9145  2FC9
9146  2FCA
9147  2FCB
9148  2FCC
9149  2FCD
9150  2FCE
9151  2FCF
9152  2FD0
9153  2FD1
9154  2FD2
9155  2FD3
9156  2FD4
9157  2FD5
9158  2FD6
9159  2FD7
9160  2FD8
9161  2FD9
9162  2FDA
9163  2FDB
9164  2FDC
9165  2FDD
9166  2FDE
9167  2FDF
9168  2FE0
9169  2FE1
9170  2FE2
9171  2FE3
9172  2FE4
9173  2FE5
9174  2FE6
9175  2FE7
9176  2FE8
9177  2FE9
9178  2FEA
9179  2FEB
9180  2FEC
9181  2FED
9182  2FEE
9183  2FEF
9184  2FF0
9185  2FF1
9186  2FF2
9187  2FF3
9188  2FF4
9189  2FF5
9190  2FF6
9191  2FF7
9192  2FF8
9193  2FF9
9194  2FFA
9195  2FFB
9196  2FFC
9197  2FFD
9198  2FFE
9199  2FFF
9200  3000
9201  3001
9202  3002
9203  3003
9204  3004
9205  3005
9206  3006
9207  3007
9208  3008
9209  3009
9210  300A
9211  300B
9212  300C
9213  300D
9214  300E
9215  300F
9216  3010
9217  3011
9218  3012
9219  3013
9220  3014
9221  3015
9222  3016
9223  3017
9224  3018
9225  3019
9226  301A
9227  301B
9228  301C
9229  301D
9230  301E
9231  301F
9232  3020
9233  3021
9234  3022
9235  3023
9236  3024
9237  3025
9238  3026
9239  3027
9240  3028
9241  3029
9242  302A
9243  302B
9244  302C
9245  302D
9246  302E
9247  302F
9248  3030
9249  3031
9250  3032
9251  3033
9252  3034
9253  3035
9254  3036
9255  3037
9256  3038
9257  3039
9258  303A
9259  303B
9260  303C
9261  303D
9262  303E
9263  303F
9264  3040
9265  3041
9266  3042
9267  3043
9268  3044
9269  3045
9270  3046
9271  3047
9272  3048
9273  3049
9274  304A
9275  304B
9276  304C
9277  304D
9278  304E
9279  304F
9280  3050
9281  3051
9282  3052
9283  3053
9284  3054
9285  3055
9286  3056
9287  3057
9288  3058
9289  3059
9290  305A
9291  305B
9292  305C
9293  305D
9294  305E
9295  305F
9296  3060
9297  3061
9298  3062
9299  3063
9300  3064
9301  3065
9302  3066
9303  3067
9304  3068
9305  3069
9306  306A
9307  306B
9308  306C
9309  306D
9310  306E
9311  306F
9312  3070
9313  3071
9314  3072
9315  3073
9316  3074
9317  3075
9318  3076
9319  3077
9320  3078
9321  3079
9322  307A
9323  307B
9324  307C
9325  307D
9326  307E
9327  307F
9328  3080
9329  3081
9330  3082
9331  3083
9332  3084
9333  3085
9334  3086
9335  3087
9336  3088
9337  3089
9338  308A
9339  308B
9340  308C
9341  308D
9342  308E
9343  308F
9344  3090
9345  3091
9346  3092
9347  3093
9348  3094
9349  3095
9350  3096
9351  3097
9352  3098
9353  3099
9354  309A
9355  309B
9356  309C
9357  309D
9358  309E
9359  309F
9360  30A0
9361  30A1
9362  30A2
9363  30A3
9364  30A4
9365  30A5
9366  30A6
9367  30A7
9368  30A8
9369  30A9
9370  30AA
9371  30AB
9372  30AC
9373  30AD
9374  30AE
9375  30AF
9376  30B0
9377  30B1
9378  30B2
9379  30B3
9380  30B4
9381  30B5
9382  30B6
9383  30B7
9384  30B8
9385  30B9
9386  30BA
9387  30BB
9388  30BC
9389  30BD
9390  30BE
9391  30BF
9392  30C0
9393  30C1
9394  30C2
9395  30C3
9396  30C4
9397  30C5
9398  30C6
9399  30C7
9400  30C8
9401  30C9
9402  30CA
9403  30CB
9404  30CC
9405  30CD
9406  30CE
9407  30CF
9408  30D0
9409  30D1
9410  30D2
9411  30D3
9412  30D4
9413  30D5
9414  30D6
9415  30D7
9416  30D8
9417  30D9
9418  30DA
9419  30DB
9420  30DC
9421  30DD
9422  30DE
9423  30DF
9424  30E0
9425  30E1
9426  30E2
9427  30E3
9428  30E4
9429  30E5
9430  30E6
9431  30E7
9432  30E8
9433  30E9
9434  30EA
9435  30EB
9436  30EC
9437  30ED
9438  30EE
9439  30EF
9440  30F0
9441  30F1
9442  30F2
9443  30F3
9444  30F4
9445  30F5
9446  30F6
9447  30F7
9448  30F8
9449  30F9
9450  30FA
9451  30FB
9452  30FC
9453  30FD
9454  30FE
9455  30FF
9456  3100
9457  3101
9458  3102
9459  3103
9460  3104
9461  3105
9462  3106
9463  3107
9464  3108
9465  3109
9466  310A
9467  310B
9468  310C
9469  310D
9470  310E
9471  310F
9472  3110
9473  3111
9474  3112
9475  3113
9476  3114
9477  3115
9478  3116
9479  3117
9480  3118
9481  3119
9482  311A
9483  311B
9484  311C
9485  311D
9486  311E
9487  311F
9488  3120
9489  3121
9490  3122
9491  3123
9492  3124
9493  3125
9494  3126
9495  3127
9496  3128
9497  3129
9498  312A
9499  312B
9500  312C
9501  312D
9502  312E
9503  312F
9504  3130
9505  3131
9506  3132
9507  3133
9508  3134
9509  3135
9510  3136
9511  3137
9512  3138
9513  3139
9514  313A
9515  313B
9516  313C
9517  313D
9518  313E
9519  313F
9520  3140
9521  3141
9522  3142
9523  3143
9524  3144
9525  3145
9526  3146
9527  3147
9528  3148
9529  3149
9530  314A
9531  314B
9532  314C
9533  314D
9534  314E
9535  314F
9536  3150
9537  3151
9538  3152
9539  3153
9540  3154
9541  3155
9542  3156
9543  3157
9544  3158
9545  3159
9546  315A
9547  315B
9548  315C
9549  315D
9550  315E
9551  315F
9552  3160
9553  3161
9554  3162
9555  3163
9556  3164
9557  3165
9558  3166
9559  3167
9560  3168
9561  3169
9562  316A
9563  316B
9564  316C
9565  316D
9566  316E
9567  316F
9568  3170
9569  3171
9570  3172
9571  3173
9572  3174
9573  3175
9574  3176
9575  3177
9576  3178
9577  3179
9578  317A
9579  317B
9580  317C
9581  317D
9582  317E
9583  317F
9584  3180
9585  3181
9586  3182
9587  3183
9588  3184
9589  3185
9590  3186
9591  3187
9592  3188
9593  3189
9594  318A
9595  318B
9596  318C
9597  318D
9598  318E
9599  318F
9600  3190
9601  3191
9602  3192
9603  3193
9604  3194
9605  3195
9606  3196
9607  3197
9608  3198
9609  3199
9610  319A
9611  319B
9612  319C
9613  319D
9614  319E
9615  319F
9616  31A0
9617  31A1
9618  31A2
9619  31A3
9620  31A4
9621  31A5
9622  31A6
9623  31A7
9624  31A8
9625  31A9
9626  31AA
9627  31AB
9628  31AC
9629  31AD
9630  31AE
9631  31AF
9632  31B0
9633  31B1
9634  31B2
9635  31B3
9636  31B4
9637  31B5
9638  31B6
9639  31B7
9640  31B8
9641  31B9
9642  31BA
9643  31BB
9644  31BC
9645  31BD
9646  31BE
9647  31BF
9648  31C0
9649  31C1
9650  31C2
9651  31C3
9652  31C4
9653  31C5
9654  31C6
9655  31C7
9656  31C8
9657  31C9
9658  31CA
9659  31CB
9660  31CC
9661  31CD
9662  31CE
9663  31CF
9664  31D0
9665  31D1
9666  31D2
9667  31D3
9668  31D4
9669  31D5
9670  31D6
9671  31D7
9672  31D8
9673  31D9
9674  31DA
9675  31DB
9676  31DC
9677  31DD
9678  31DE
9679  31DF
9680  31E0
9681  31E1
9682  31E2
9683  31E3
9684  31E4
9685  31E5
9686  31E6
9687  31E7
9688  31E8
9689  31E9
9690  31EA
9691  31EB
9692  31EC
9693  31ED
9694  31EE
9695  31EF
9696  31F0
9697  31F1
9698  31F2
9699  31F3
9700  31F4
9701  31F5
9702  31F6
9703  31F7
9704  31F8
9705  31F9
9706  31FA
9707  31FB
9708  31FC
9709  31FD
9710  31FE
9711  31FF
9712  3200
9713  3201
9714  3202
9715  3203
9716  3204
9717  3205
9718  3206
9719  3207
9720  3208
9721  3209
9722  320A
9723  320B
9724  320C
9725  320D
9726  320E
9727  320F
9728  3210
9729  3211
9730  3212
9731  3213
9732  3214
9733  3215
9734  3216
9735  3217
9736  3218
9737  3219
9738  321A
9739  321B
9740  321C
9741  321D
9742  321E
9743  321F
9744  3220
9745  3221
9746  3222
9747  3223
9748  3224
9749  3225
9750  3226
9751  3227
9752  3228
9753  3229
9754  322A
9755  322B
9756  322C
9757  322D
9758  322E
9759  322F
9760  3230
9761  3231
9762  3232
9763  3233
9764  3234
9765  3235
9766  3236
9767  3237
9768  3238
9769  3239
9770  323A
9771  323B
9772  323C
9773  323D
9774  323E
9775  323F
9776  3240
9777  3241
9778  3242
9779  3243
9780  3244
9781  3245
9782  3246
9783  3247
9784  3248
9785  3249
9786  324A
9787  324B
9788  324C
9789  324D
9790  324E
9791  324F
9792  3250
9793  3251
9794  3252
9795  3253
9796  3254
9797  3255
9798  3256
9799  3257
9800  3258
9801  3259
9802  325A
9803  325B
9804  325C
9805  325D
9806  325E
9807  325F
9808  3260
9809  3261
9810  3262
9811  3263
9812  3264
9813  3265
9814  3266
9815  3267
9816  3268
9817  3269
9818  326A
9819  326B
9820  326C
9821  326D
9822  326E
9823  326F
9824  3270
9825  3271
9826  3272
9827  3273
9828  3274
9829  3275
9830  3276
9831  3277
9832  3278
9833  3279
9834  327A
9835  327B
9836  327C
9837  327D
9838  327E
9839  327F
9840  3280
9841  3281
9842  3282
9843  3283
9844  3284
9845  3285
9846  3286
9847  3287
9848  3288
9849  3289
9850  328A
9851  328B
9852  328C
9853  328D
9854  328E
9855  328F
9856  3290
9857  3291
9858  3292
9859  3293
9860  3294
9861  3295
9862  3296
9863  3297
9864  3298
9865  3299
9866  329A
9867  329B
9868  329C
9869  329D
9870  329E
9871  329F
9872  32A0
9873  32A1
9874  32A2
9875  32A3
9876  32A4
9877  32A5
9878  32A6
9879  32A7
9880  32A8
9881  32A9
9882  32AA
9883  32AB
9884  32AC
9885  32AD
9886  32AE
9887  32AF
9888  32B0
9889  32B1
9890  32B2
9891  32B3
9892  32B4
9893  32B5
9894  32B6
9895  32B7
9896  32B8
9897  32B9
9898  32BA
9899  32BB
9900  32BC
9901  32BD
9902  32BE
9903  32BF
9904  32C0
9905  32C1
9906  32C2
9907  32C3
9908  32C4
9909  32C5
9910  32C6
9911  32C7
9912  32C8
9913  32C9
9914  32CA
9915  32CB
9916  32CC
9917  32CD
9918  32CE
9919  32CF
9920  32D0
9921  32D1
9922  32D2
9923  32D3
9924  32D4
9925  32D5
9926  32D6
9927  32D7
9928  32D8
9929  32D9
9930  32DA
9931  32DB
9932  32DC
9933  32DD
9934  32DE
9935  32DF
9936  32E0
9937  32E1
9938  32E2
9939  32E3
9940  32E4
9941  32E5
9942  32E6
9943  32E7
9944  32E8
9945  32E9
9946  32EA
9947  32EB
9948  32EC
9949  32ED
9950  32EE
9951  32EF
9952  32F0
9953  32F1
9954  32F2
9955  32F3
9956  32F4
9957  32F5
9958  32F6
9959  32F7
9960  32F8
9961  32F9
9962  32FA
9963  32FB
9964  32FC
9965  32FD
9966  32FE
9967  32FF
9968  3300
9969  3301
9970  3302
9971  3303
9972  3304
9973  3305
9974  3306
9975  3307
9976  3308
9977  3309
9978  330A
9979  330B
9980  330C
9981  330D
9982  330E
9983  330F
9984  3310
9985  3311
9986  3312
9987  3313
9988  3314
9989  3315
9990  3316
9991  3317
9992  3318
9993  3319
9994  331A
9995  331B
9996  331C
9997  331D
9998  331E
9999  331F
10000  3320
10001  3321
10002  3322
10003  3323
10004  3324
10005  3325
10006  3326
10007  3327
10008  3328
10009  3329
10010  332A
10011  332B
10012  332C
10013  332D
10014  332E
10015  332F
10016  3330
10017  3331
10018  3332
10019  3333
10020  3334
10021  3335
10022  3336
10023  3337
10024  3338
10025  3339
10026  333A
10027  333B
10028  333C
10029  333D
10030  333E
10031  333F
10032  3340
10033  3341
10034  3342
10035  3343
10036  3344
10037  3345
10038  3346
10039  3347
10040  3348
10041  3349
10042  334A
10043  334B
10044  334C
10045  334D
10046  334E
10047  334F
10048  3350
10049  3351
10050  3352
10051  3353
10052  3354
10053  3355
10054  3356
10055  3357
10056  3358
10057  3359
10058  335A
10059  335B
10060  335C
10061  335D
10062  335E
10063  335F
10064  3360
10065  3361
10066  3362
10067  3363
10068  3364
10069  3365
10070  3366
10071  3367
10072  3368
10073  3369
10074  336A
10075  336B
10076  336C
10077  336D
10078  336E
10079  336F
10080  3370
10081  3371
10082  3372
10083  3373
10084  3374
10085  3375
10086  3376
10087  3377
10088  3378
10089  3379
10090  337A
10091  337B
10092  337C
10093  337D
10094  337E
10095  337F
10096  3380
10097  3381
10098  3382
10099  3383
10100  3384
10101  3385
10102  3386
10103  3387
10104  3388
10105  3389
10106  338A
10107  338B
10108  338C
10109  338D
10110  338E
10111  338F
10112  3390
10113  3391
10114  3392
10115  3393
10116  3394
10117  3395
10118  3396
10119  3397
10120  3398
10121  3399
10122  339A
10123  339B
10124  339C
10125  339D
10126  339E
10127  339F
10128  33A0
10129  33A1
10130  33A2
10131  33A3
10132  33A4
10133  33A5
10134  33A6
10135  33A7
10136  33A8
10137  33A9
10138  33AA
10139  33AB
10140  33AC
10141  33AD
10142  33AE
10143  33AF
10144  33B0
10145  33B1
10146  33B2
10147  33B3
10148  33B4
10149  33B5
10150  33B6
10151  33B7
10152  33B8
10153  33B9
10154  33BA
10155  33BB
10156  33BC
10157  33BD
10158  33BE
10159  33BF
10160  33C0
10161  33C1
10162  33C2
10163  33C3
10164  33C4
10165  33C5
10166  33C6
10167  33C7
10168  33C8
10169  33C9
10170  33CA
10171  33CB
10172  33CC
10173  33CD
10174  33CE
10175  33CF
10176  33D0
10177  33D1
10178  33D2
10179  33D3
10180  33D4
10181  33D5
10182  33D6
10183  33D7
10184  33D8
10185  33D9
10186  33DA
10187  33DB
10188  33DC
10189  33DD
10190  33DE
10191  33DF
10192  33E0
10193  33E1
10194  33E2
10195  33E3
10196  33E4
10197  33E5
10198  33E6
10199  33E7
10200  33E8
10201  33E9
10202  33EA
10203  33EB
10204  33EC
10205  33ED
10206  33EE
10207  33EF
10208  33F0
10209  33F1
10210  33F2
10211  33F3
10212  33F4
10213  33F5
10214  33F6
10215  33F7
10216  33F8
10217  33F9
10218  33FA
10219  33FB
10220  33FC
10221  33FD
10222  33FE
10223  33FF
10224  3400
10225  3401
10226  3402
10227  3403
10228  3404
10229  3405
10230  3406
10231  3407
10232  3408
10233  3409
10234  340A
10235  340B
10236  340C
10237  340D
10238  340E
10239  340F
10240  3410
10241  3411
10242  3412
10243  3413
10244  3414
10245  3415
10246  3416
10247  3417
10248  3418
10249  3419
10250  341A
10251  341B
10252  341C
10253  341D
10254  341E
10255  341F
10256  3420
10257  3421
10258  3422
10259  3423
10260  3424
10261  3425
10262  3426
10263  3427
10264  3428
10265  3429
10266  342A
10267  342B
10268  342C
10269  342D
10270  342E
10271  342F
10272  3430
10273  3431
10274  3432
10275  3433
10276  3434
10277  3435
10278  3436
10279  3437
10280  3438
10281  3439
10282  343A
10283  343B
10284  343C
10285  343D
10286  343E
10287  343F
10288  3440
10289  3441
10290  3442
10291  3443
10292  3444
10293  3445
10294  3446
10295  3447
10296  3448
10297  3449
10298  344A
10299  344B
10300  344C
10301  344D
10302  344E
10303  344F
10304  3450
10305  3451
10306  3452
10307  3453
10308  3454
10309  3455
10310  3456
10311  3457
10312  3458
10313  3459
10314  345A
10315  345B
10316  345C
10317  345D
10318  345E
10319  345F
10320  3460
10321  3461
10322  3462
10323  3463
10324  3464
10325  3465
10326  3466
10327  3467
10328  3468
10329  3469
10330  346A
10331  346B
10332  346C
10333  346D
10334  346E
10335  346F
10336  3470
10337  3471
10338  3472
10339  3473
10340  3474
10341  3475
10342  3476
10343  3477
10344  3478
10345  3479
10346  347A
10347  347B
10348  347C
10349  347D
10350  347E
10351  347F
10352  3480
10353  3481
10354  3482
10355  3483
10356  3484
10357  3485
10358  3486
10359  3487
10360  3488
10361  3489
10362  348A
10363  348B
10364  348C
10365  348D
10366  348E
10367  348F
10368  3490
10369  3491
10370  3492
10371  3493
10372  3494
10373  3495
10374  3496
10375  3497
10376  3498
10377  3499
10378  349A
10379  349B
10380  349C
10381  349D
10382  349E
10383  349F
10384  34A0
10385  34A1
10386  34A2
10387  34A3
10388  34A4
10389  34A5
10390  34A6
10391  34A7
10392  34A8
10393  34A9
10394  34AA
10395  34AB
10396  34AC
10397  34AD
10398  34AE
10399  34AF
10400  34B0
10401  34B1
10402  34B2
10403  34B3
10404  34B4
10405  34B5
10406  34B6
10407  34B7
10408  34B8
10409  34B9
10410  34BA
10411  34BB
10412  34BC
10413  34BD
10414  34BE
10415  34BF
10416  34C0
10417  34C1
10418  34C2
10419  34C3
10420  34C4
10421  34C5
10422  34C6
10423  34C7
10424  34C8
10425  34C9
10426  34CA
10427  34CB
10428  34CC
10429  34CD
10430  34CE
10431  34CF
10432  34D0
10433  34D1
10434  34D2
10435  34D3
10436  34D4
10437  34D5
10438  34D6
10439  34D7
10440  34D8
10441  34D9
10442  34DA
10443  34DB
10444  34DC
10445  34DD
10446  34DE
10447  34DF
10448  34E0
10449  34E1
10450  34E2
10451  34E3
10452  34E4
10453  34E5
10454  34E6
10455  34E7
10456  34E8
10457  34E9
10458  34EA
10459  34EB
10460  34EC
10461  34ED
10462  34EE
10463  34EF
10464  34F0
10465  34F1
10466  34F2
10467  34F3
10468  34F4
10469  34F5
10470  34F6
10471  34F7
10472  34F8
10473  34F9
10474  34FA
10475  34FB
10476  34FC
10477  34FD
10478  34FE
10479  34FF
10480  3500
10481  3501
10482  3502
10483  3503
10484  3504
10485  3505
10486  3506
10487  3507
10488  3508
10489  3509
10490  350A
10491  350B
10492  350C
10493  350D
10494  350E
10495  350F
10496  3510
10497  3511
10498  3512
10499  3513
10500  3514
10501  3515
10502  3516
10503  3517
10504  3518
10505  3519
10506  351A
10507  351B
10508  351C
10509  351D
10510  351E
10511  351F
10512  3520
10513  3521
10514  3522
10515  3523
10516  3524
10517  3525
10518  3526
10519  3527
10520  3528
10521  3529
10522  352A
10523  352B
10524  352C
10525  352D
10526  352E
10527  352F
10528  3530
10529  3531
10530  3532
10531  3533
10532  3534
10533  3535
10534  3536
10535  3537
10536  3538
10537  3539
10538  353A
10539  353B
10540  353C
10541  353D
10542  353E
10543  353F
10544  3540
10545  3541
10546  3542
10547  3543
10548  3544
10549  3545
10550  3546
10551  3547
10552  3548
10553  3549
10554  354A
10555  354B
10556  354C
10557  354D
10558  354E
10559  354F
10560  3550
10561  3551
10562  3552
10563  3553
10564  3554
10565  3555
10566  3556
10567  3557
10568  3558
10569  3559
10570  355A
10571  355B
10572  355C
10573  355D
10574  355E
10575  355F
10576  3560
10577  3561
10578  3562
10579  3563
10580  3564
10581  3565
10582  3566
10583  3567
10584  3568
10585  3569
10586  356A
10587  356B
10588  356C
10589  356D
10590  356E
10591  356F
10592  3570
10593  3571
10594  3572
10595  3573
10596  3574
10597  3575
10598  3576
10599  3577
10600  3578
10601  3579
10602  357A
10603  357B
10604  357C
10605  357D
10606  357E
10607  357F
10608  3580
10609  3581
10610  3582
10611  3583
10612  3584
10613  3585
10614  3586
10615  3587
10616  3588
10617  3589
10618  358A
10619  358B
10620  358C
10621  358D
10622  358E
10623  358F
10624  3590
10625  3591
10626  3592
10627  3593
10628  3594
10629  3595
10630  3596
10631  3597
10632  3598
10633  3599
10634  359A
10635  359B
10636  359C
10637  359D
10638  359E
10639  359F
10640  35A0
10641  35A1
10642  35A2
10643  35A3
10644  35A4
10645  35A5
10646  35A6
10647  35A7
10648  35A8
10649  35A9
10650  35AA
10651  35AB
10652  35AC
10653  35AD
10654  35AE
10655  35AF
10656  35B0
10657  35B1
10658  35B2
10659  35B3
10660  35B4
10661  35B5
10662  35B6
10663  35B7
10664  35B8
10665  35B9
10666  35BA
10667  35BB
10668  35BC
10669  35BD
10670  35BE
10671  35BF
10672  35C0
10673  35C1
10674  35C2
10675  35C3
10676  35C4
10677  35C5
10678  35C6
10679  35C7
10680  35C8
10681  35C9
10682  35CA
10683  35CB
10684  35CC
10685  35CD
10686  35CE
10687  35CF
10688  35D0
10689  35D1
10690  35D2
10691  35D3
10692  35D4
10693  35D5
10694  35D6
10695  35D7
10696  35D8
10697  35D9
10698  35DA
10699  35DB
10700  35DC
10701  35DD
10702  35DE
10703  35DF
10704  35E0
10705  35E1
10706  35E2
10707  35E3
10708  35E4
10709  35E5
10710  35E6
10711  35E7
10712  35E8
10713  35E9
10714  35EA
10715  35EB
10716  35EC
10717  35ED
10718  35EE
10719  35EF
10720  35F0
10721  35F1
10722  35F2
10723  35F3
10724  35F4
10725  35F5
10726  35F6
10727  35F7
10728  35F8
10729  35F9
10730  35FA
10731  35FB
10732  35FC
10733  35FD
10734  35FE
10735  35FF
10736  3600
10737  3601
10738  3602
10739  3603
10740  3604
10741  3605
10742  3606
10743  3607
10744  3608
10745  3609
10746  360A
10747  360B
10748  360C
10749  360D
10750  360E
10751  360F
10752  3610
10753  3611
10754  3612
10755  3613
10756  3614
10757  3615
10758  3616
10759  3617
10760  3618
10761  3619
10762  361A
10763  361B
10764  361C
10765  361D
10766  361E
10767  361F
10768  3620
10769  3621
10770  3622
10771  3623
10772  3624
10773  3625
10774  3626
10775  3627
10776  3628
10777  3629
10778  362A
10779  362B
10780  362C
10781  362D
10782  362E
10783  362F
10784  3630
10785  3631
10786  3632
10787  3633
10788  3634
10789  3635
10790  3636
10791  3637
10792  3638
10793  3639
10794  363A
10795  363B
10796  363C
10797  363D
10798  363E
10799  363F
10800  3640
10801  3641
10802  3642
10803  3643
10804  3644
10805  3645
10806  3646
10807  3647
10808  3648
10809  3649
10810  364A
10811  364B
10812  364C
10813  364D
10814  364E
10815  364F
10816  3650
10817  3651
10818  3652
10819  3653
10820  3654
10821  3655
10822  3656
10823  3657
10824  3658
10825  3659
10826  365A
10827  365B
10828  365C
10829  365D
10830  365E
10831  365F
10832  3660
10833  3661
10834  3662
10835  3663
10836  3664
10837  3665
10838  3666
10839  3667
10840  3668
10841  3669
10842  366A
10843  366B
10844  366C
10845  366D
10846  366E
10847  366F
10848  3670
10849  3671
10850  3672
10851  3673
10852  3674
10853  3675
10854  3676
10855  3677
10856  3678
10857  3679
10858  367A
10859  367B
10860  367C
10861  367D
10862  367E
10863  367F
10864  3680
10865  3681
10866  3682
10867  3683
10868  3684
10869  3685
10870  3686
10871  3687
10872  3688
10873  3689
10874  368A
10875  368B
10876  368C
10877  368D
10878  368E
10879  368F
10880  3690
10881  3691
10882  3692
10883  3693
10884  3694
10885  3695
10886  3696
10887  3697
10888  3698
10889  3699
10890  369A
10891  369B
10892  369C
10893  369D
10894  369E
10895  369F
10896  36A0
10897  36A1
10898  36A2
10899  36A3
10900  36A4
10901  36A5
10902  36A6
10903  36A7
10904  36A8
10905  36A9
10906  36AA
10907  36AB
10908  36AC
10909  36AD
10910  36AE
10911  36AF
10912  36B0
10913  36B1
10914  36B2
10915  36B3
10916  36B4
10917  36B5
10918  36B6
10919  36B7
10920  36B8
10921  36B9
10922  36BA
10923  36BB
10924  36BC
10925  36BD
10926  36BE
10927  36BF
10928  36C0
10929  36C1
10930  36C2
10931  36C3
10932  36C4
10933  36C5
10934  36C6
10935  36C7
10936  36C8
10937  36C9
10938  36CA
10939  36CB
10940  36CC
10941  36CD
10942  36CE
10943  36CF
10944  36D0
10945  36D1
10946  36D2
10947  36D3
10948  36D4
10949  36D5
10950  36D6
10951  36D7
10952  36D8
10953  36D9
10954  36DA
10955  36DB
10956  36DC
10957  36DD
10958  36DE
10959  36DF
10960  36E0
10961  36E1
10962  36E2
10963  36E3
10964  36E4
10965  36E5
10966  36E6
10967  36E7
10968  36E8
10969  36E9
10970  36EA
10971  36EB
10972  36EC
10973  36ED
10974  36EE
10975  36EF
10976  36F0
10977  36F1
10978  36F2
10979  36F3
10980  36F4
10981  36F5
10982  36F6
10983  36F7
10984  36F8
10985  36F9
10986  36FA
10987  36FB
10988  36FC
10989  36FD
10990  36FE
10991  36FF
10992  3700
10993  3701
10994  3702
10995  3703
10996  3704
10997  3705
10998  3706
10999  3707
11000  3708
11001  3709
11002  370A
11003  370B
11004  370C
11005  370D
11006  370E
11007  370F
11008  3710
11009  3711
11010  3712
11011  3713
11012  3714
11013  3715
11014  3716
11015  3717
11016  3718
11017  3719
11018  371A
11019  371B
11020  371C
11021  371D
11022  371E
11023  371F
11024  3720
11025  3721
11026  3722
11027  3723
11028  3724
11029  3725
11030  3726
11031  3727
11032  3728
11033  3729
11034  372A
11035  372B
11036  372C
11037  372D
11038  372E
11039  372F
11040  3730
11041  3731
11042  3732
11043  3733
11044  3734
11045  3735
11046  3736
11047  3737
11048  3738
11049  3739
11050  373A
11051  373B
11052  373C
11053  373D
11054  373E
11055  373F
11056  3740
11057  3741
11058  3742
11059  3743
11060  3744
11061  3745
11062  3746
11063  3747
11064  3748
11065  3749
11066  374A
11067  374B
11068  374C
11069  374D
11070  374E
11071  374F
11072  3750
11073  3751
11074  3752
11075  3753
11076  3754
11077  3755
11078  3756
11079  3757
11080  3758
11081  3759
11082  375A
11083  375B
11084  375C
11085  375D
11086  375E
11087  375F
11088  3760
11089  3761
11090  3762
11091  3763
11092  3764
11093  3765
11094  3766
11095  3767
11096  3768
11097  3769
11098  376A
11099  376B
11100  376C
11101  376D
11102  376E
11103  376F
11104  3770
11105  3771
11106  3772
11107  3773
11108  3774
11109  3775
11110  3776
11111  3777
11112  3778
11113  3779
11114  377A
11115  377B
11116  377C
11117  377D
11118  377E
11119  377F
11120  3780
11121  3781
11122  3782
11123  3783
11124  3784
11125  3785
11126  3786
11127  3787
11128  3788
11129  3789
11130  378A
11131  378B
11132  378C
11133  378D
11134  378E
11135  378F
11136  3790
11137  3791
11138  3792
11139  3793
11140  3794
11141  3795
11142  3796
11143  3797
11144  3798
11145  3799
11146  379A
11147  379B
11148  379C
11149  379D
11150  379E
11151  379F
11152  37A0
11153  37A1
11154  37A2
11155  37A3
11156  37A4
11157  37A5
11158  37A6
11159  37A7
11160  37A8
11161  37A9
11162  37AA
11163  37AB
11164  37AC
11165  37AD
11166  37AE
11167  37AF
11168  37B0
11169  37B1
11170  37B2
11171  37B3
11172  37B4
11173  37B5
11174  37B6
11175  37B7
11176  37B8
11177  37B9
11178  37BA
11179  37BB
11180  37BC
11181  37BD
11182  37BE
11183  37BF
11184  37C0
11185  37C1
11186  37C2
11187  37C3
11188  37C4
11189  37C5
11190  37C6
11191  37C7
11192  37C8
11193  37C9
11194  37CA
11195  37CB
11196  37CC
11197  37CD
11198  37CE
11199  37CF
11200  37D0
11201  37D1
11202  37D2
11203  37D3
11204  37D4
11205  37D5
11206  37D6
11207  37D7
11208  37D8
11209  37D9
11210  37DA
11211  37DB
11212  37DC
11213  37DD
11214  37DE
11215  37DF
11216  37E0
11217  37E1
11218  37E2
11219  37E3
11220  37E4
11221  37E5
11222  37E6
11223  37E7
11224  37E8
11225  37E9
11226  37EA
11227  37EB
11228  37EC
11229  37ED
11230  37EE
11231  37EF
11232  37F0
11233  37F1
11234  37F2
11235  37F3
11236  37F4
11237  37F5
11238  37F6
11239  37F7
11240  37F8
11241  37F9
11242  37FA
11243  37FB
11244  37FC
11245  37FD
11246  37FE
11247  37FF
11248  3800
11249  3801
11250  3802
11251  3803
11252  3804
11253  3805
11254  3806
11255  3807
11256  3808
11257  3809
11258  380A
11259  380B
11260  380C
11261  380D
11262  380E
11263  380F
11264  3810
11265  3811
11266  3812
11267  3813
11268  3814
11269  3815
11270  3816
11271  3817
11272  3818
11273  3819
11274  381A
11275  381B
11276  381C
11277  381D
11278  381E
11279  381F
11280  3820
11281  3821
11282  3822
11283  3823
11284  3824
11285  3825
11286  3826
11287  3827
11288  3828
11289  3829
11290  382A
11291  382B
11292  382C
11293  382D
11294  382E
11295  382F
11296  3830
11297  3831
11298  3832
11299  3833
11300  3834
11301  3835
11302  3836
11303  3837
11304  3838
11305  3839
11306  383A
11307  383B
11308  383C
11309  383D
11310  383E
11311  383F
11312  3840
11313  3841
11314  3842
11315  3843
11316  3844
11317  3845
11318  3846
11319  3847
11320  3848
11321  3849
11322  384A
11323  384B
11324  384C
11325  384D
11326  384E
11327  384F
11328  3850
11329  3851
11330  3852
11331  3853
11332  3854
11333  3855
11334  3856
11335  3857
11336  3858
11337  3859
11338  385A
11339  385B
11340  385C
11341  385D
11342  385E
11343  385F
11344  3860
11345  3861
11346  3862
11347  3863
11348  3864
11349  3865
11350  3866
11351  3867
11352  3868
11353  3869
11354  386A
11355  386B
11356  386C
11357  386D
11358  386E
11359  386F
11360  3870
11361  3871
11362  3872
11363  3873
11364  3874
11365  3875
11366  3876
11367  3877
11368  3878
11369  3879
11370  387A
11371  387B
11372  387C
11373  387D
11374  387E
11375  387F
11376  3880
11377  3881
11378  3882
11379  3883
11380  3884
11381  3885
11382  3886
11383  3887
11384  3888
11385  3889
11386  388A
11387  388B
11388  388C
11389  388D
11390  388E
11391  388F
11392  3890
11393  3891
11394  3892
11395  3893
11396  3894
11397  3895
11398  3896
11399  3897
11400  3898
11401  3899
11402  389A
11403  389B
11404  389C
11405  389D
11406  389E
11407  389F
11408  38A0
11409  38A1
11410  38A2
11411  38A3
11412  38A4
11413  38A5
11414  38A6
11415  38A7
11416  38A8
11417  38A9
11418  38AA
11419  38AB
11420  38AC
11421  38AD
11422  38AE
11423  38AF
11424  38B0
11425  38B1
11426  38B2
11427  38B3
11428  38B4
11429  38B5
11430  38B6
11431  38B7
11432  38B8
11433  38B9
11434  38BA
11435  38BB
11436  38BC
11437  38BD
11438  38BE
11439  38BF
11440  38C0
11441  38C1
11442  38C2
11443  38C3
11444  38C4
11445  38C5
11446  38C6
11447  38C7
11448  38C8
11449  38C9
11450  38CA
11451  38CB
11452  38CC
11453  38CD
11454  38CE
11455  38CF
11456  38D0
11457  38D1
11458  38D2
11459  38D3
11460  38D4
11461  38D5
11462  38D6
11463  38D7
11464  38D8
11465  38D9
11466  38DA
11467  38DB
11468  38DC
11469  38DD
11470  38DE
11471  38DF
11472  38E0
11473  38E1
11474  38E2
11475  38E3
11476  38E4
11477  38E5
11478  38E6
11479  38E7
11480  38E8
11481  38E9
11482  38EA
11483  38EB
11484  38EC
11485  38ED
11486  38EE
11487  38EF
11488  38F0
11489  38F1
11490  38F2
11491  38F3
11492  38F4
11493  38F5
11494  38F6
11495  38F7
11496  38F8
11497  38F9
11498  38FA
11499  38FB
11500  38FC
11501  38FD
11502  38FE
11503  38FF
11504  3900
11505  3901
11506  3902
11507  3903
11508  3904
11509  3905
11510  3906
11511  3907
11512  3908
11513  3909
11514  390A
11515  390B
11516  390C
11517  390D
11518  390E
11519  390F
11520  3910
11521  3911
11522  3912
11523  3913
11524  3914
11525  3915
11526  3916
11527  3917
11528  3918
11529  3919
11530  391A
11531  391B
11532  391C
11533  391D
11534  391E
11535  391F
11536  3920
11537  3921
11538  3922
11539  3923
11540  3924
11541  3925
11542  3926
11543  3927
11544  3928
11545  3929
11546  392A
11547  392B
11548  392C
11549  392D
11550  392E
11551  392F
11552  3930
11553  3931
11554  3932
11555  3933
11556  3934
11557  3935
11558  3936
11559  3937
11560  3938
11561  3939
11562  393A
11563  393B
11564  393C
11565  393D
11566  393E
11567  393F
11568  3940
11569  3941
11570  3942
11571  3943
11572  3944
11573  3945
11574  3946
11575  3947
11576  3948
11577  3949
11578  394A
11579  394B
11580  394C
11581  394D
11582  394E
11583  394F
11584  3950
11585  3951
11586  3952
11587  3953
11588  3954
11589  3955
11590  3956
11591  3957
11592  3958
11593  3959
11594  395A
11595  395B
11596  395C
11597  395D
11598  395E
11599  395F
11600  3960
11601  3961
11602  3962
11603  3963
11604  3964
11605  3965
11606  3966
11607  3967
11608  3968
11609  3969
11610  396A
11611  396B
11612  396C
11613  396D
11614  396E
11615  396F
11616  3970
11617  3971
11618  3972
11619  3973
11620  3974
11621  3975
11622  3976
11623  3977
11624  3978
11625  3979
11626  397A
11627  397B
11628  397C
11629  397D
11630  397E
11631  397F
11632  3980
11633  3981
11634  3982
11635  3983
11636  3984
11637  3985
11638  3986
11639  3987
11640  3988
11641  3989
11642  398A
11643  398B
11644  398C
11645  398D
11646  398E
11647  398F
11648  3990
11649  3991
11650  3992
11651  3993
11652  3994
11653  3995
11654  3996
11655  3997
11656  3998
11657  3999
11658  399A
11659  399B
11660  399C
11661  399D
11662  399E
11663  399F
11664  39A0
11665  39A1
11666  39A2
11667  39A3
11668  39A4
11669  39A5
11670  39A6
11671  39A7
11672  39A8
11673  39A9
11674  39AA
11675  39AB
11676  39AC
11677  39AD
11678  39AE
11679  39AF
11680  39B0
11681  39B1
11682  39B2
11683  39B3
11684  39B4
11685  39B5
11686  39B6
11687  39B7
11688  39B8
11689  39B9
11690  39BA
11691  39BB
11692  39BC
11693  39BD
11694  39BE
11695  39BF
11696  39C0
11697  39C1
11698  39C2
11699  39C3
11700  39C4
11701  39C5
11702  39C6
11703  39C7
11704  39C8
11705  39C9
11706  39CA
11707  39CB
11708  39CC
11709  39CD
11710  39CE
11711  39CF
11712  39D0
11713  39D1
11714  39D2
11715  39D3
11716  39D4
11717  39D5
11718  39D6
11719  39D7
11720  39D8
11721  39D9
11722  39DA
11723  39DB
11724  39DC
11725  39DD
11726  39DE
11727  39DF
11728  39E0
11729  39E1
11730  39E2
11731  39E3
11732  39E4
11733  39E5
11734  39E6
11735  39E7
11736  39E8
11737  39E9
11738  39EA
11739  39EB
11740  39EC
11741  39ED
11742  39EE
11743  39EF
11744  39F0
11745  39F1
11746  39F2
11747  39F3
11748  39F4
11749  39F5
11750  39F6
11751  39F7
11752  39F8
11753  39F9
11754  39FA
11755  39FB
11756  39FC
11757  39FD
11758  39FE
11759  39FF
11760  3A00
11761  3A01
11762  3A02
11763  3A03
11764  3A04
11765  3A05
11766  3A06
11767  3A07
11768  3A08
11769  3A09
11770  3A0A
11771  3A0B
11772  3A0C
11773  3A0D
11774  3A0E
11775  3A0F
11776  3A10
11777  3A11
11778  3A12
11779  3A13
11780  3A14
11781  3A15
11782  3A16
11783  3A17
11784  3A18
11785  3A19
11786  3A1A
11787  3A1B
11788  3A1C
11789  3A1D
11790  3A1E
11791  3A1F
11792  3A20
11793  3A21
11794  3A22
11795  3A23
11796  3A24
11797  3A25
11798  3A26
11799  3A27
11800  3A28
11801  3A29
11802  3A2A
11803  3A2B
11804  3A2C
11805  3A2D
11806  3A2E
11807  3A2F
11808  3A30
11809  3A31
11810  3A32
11811  3A33
11812  3A34
11813  3A35
11814  3A36
11815  3A37
11816  3A38
11817  3A39
11818  3A3A
11819  3A3B
11820  3A3C
11821  3A3D
11822  3A3E
11823  3A3F
11824  3A40
11825  3A41
11826  3A42
11827  3A43
11828  3A44
11829  3A45
11830  3A46
11831  3A47
11832  3A48
11833  3A49
11834  3A4A
11835  3A4B
11836  3A4C
11837  3A4D
11838  3A4E
11839  3A4F
11840  3A50
11841  3A51
11842  3A52
11843  3A53
11844  3A54
11845  3A55
11846  3A56
11847  3A57
11848  3A58
11849  3A59
11850  3A5A
11851  3A5B
11852  3A5C
11853  3A5D
11854  3A5E
11855  3A5F
11856  3A60
11857  3A61
11858  3A62
11859  3A63
11860  3A64
11861  3A65
11862  3A66
11863  3A67
11864  3A68
11865  3A69
11866  3A6A
11867  3A6B
11868  3A6C
11869  3A6D
11870  3A6E
11871  3A6F
11872  3A70
11873  3A71
11874  3A72
11875  3A73
11876  3A74
11877  3A75
11878  3A76
11879  3A77
11880  3A78
11881  3A79
11882  3A7A
11883  3A7B
11884  3A7C
11885  3A7D
11886  3A7E
11887  3A7F
11888  3A80
11889  3A81
11890  3A82
11891  3A83
11892  3A84
11893  3A85
11894  3A86
11895  3A87
11896  3A88
11897  3A89
11898  3A8A
11899  3A8B
11900  3A8C
11901  3A8D
11902  3A8E
11903  3A8F
11904  3A90
11905  3A91
11906  3A92
11907  3A93
11908  3A94
11909  3A95
11910  3A96
11911  3A97
11912  3A98
11913  3A99
11914  3A9A
11915  3A9B
11916  3A9C
11917  3A9D
11918  3A9E
11919  3A9F
11920  3AA0
11921  3AA1
11922  3AA2
11923  3AA3
11924  3AA4
11925  3AA5
11926  3AA6
11927  3AA7
11928  3AA8
11929  3AA9
11930  3AAA
11931  3AAB
11932  3AAC
11933  3AAD
11934  3AAE
11935  3AAF
11936  3AB0
11937  3AB1
11938  3AB2
11939  3AB3
11940  3AB4
11941  3AB5
11942  3AB6
11943  3AB7
11944  3AB8
11945  3AB9
11946  3ABA
11947  3ABB
11948  3ABC
11949  3ABD
11950  3ABE
11951  3ABF
11952  3AC0
11953  3AC1
11954  3AC2
11955  3AC3
11956  3AC4
11957  3AC5
11958  3AC6
11959  3AC7
11960  3AC8
11961  3AC9
11962  3ACA
11963  3ACB
11964  3ACC
11965  3ACD
11966  3ACE
11967  3ACF
11968  3AD0
11969  3AD1
11970  3AD2
11971  3AD3
11972  3AD4
11973  3AD5
11974  3AD6
11975  3AD7
11976  3AD8
11977  3AD9
11978  3ADA
11979  3ADB
11980  3ADC
11981  3ADD
11982  3ADE
11983  3ADF
11984  3AE0
11985  3AE1
11986  3AE2
11987  3AE3
11988  3AE4
11989  3AE5
11990  3AE6
11991  3AE7
11992  3AE8
11993  3AE9
11994  3AEA
11995  3AEB
11996  3AEC
11997  3AED
11998  3AEE
11999  3AEF
12000  3AF0
12001  3AF1
12002  3AF2
12003  3AF3
12004  3AF4
12005  3AF5
12006  3AF6
12007  3AF7
12008  3AF8
12009  3AF9
12010  3AFA
12011  3AFB
12012  3AFC
12013  3AFD
12014  3AFE
12015  3AFF
12016  3B00
12017  3B01
12018  3B02
12019  3B03
12020  3B04
12021  3B05
12022  3B06
12023  3B07
12024  3B08
12025  3B09
12026  3B0A
12027  3B0B
12028  3B0C
12029  3B0D
12030  3B0E
12031  3B0F
12032  3B10
12033  3B11
12034  3B12
12035  3B13
12036  3B14
12037  3B15
12038  3B16
12039  3B17
12040  3B18
12041  3B19
12042  3B1A
12043  3B1B
12044  3B1C
12045  3B1D
12046  3B1E
12047  3B1F
12048  3B20
12049  3B21
12050  3B22
12051  3B23
12052  3B24
12053  3B25
12054  3B26
12055  3B27
12056  3B28
12057  3B29
12058  3B2A
12059  3B2B
12060  3B2C
12061  3B2D
12062  3B2E
12063  3B2F
12064  3B30
12065  3B31
12066  3B32
12067  3B33
12068  3B34
12069  3B35
12070  3B36
12071  3B37
12072  3B38
12073  3B39
12074  3B3A
12075  3B3B
12076  3B3C
12077  3B3D
12078  3B3E
12079  3B3F
12080  3B40
12081  3B41
12082  3B42
12083  3B43
12084  3B44
12085  3B45
12086  3B46
12087  3B47
12088  3B48
12089  3B49
12090  3B4A
12091  3B4B
12092  3B4C
12093  3B4D
12094  3B4E
12095  3B4F
12096  3B50
12097  3B51
12098  3B52
12099  3B53
12100  3B54
12101  3B55
12102  3B56
12103  3B57
12104  3B58
12105  3B59
12106  3B5A
12107  3B5B
12108  3B5C
12109  3B5D
12110  3B5E
12111  3B5F
12112  3B60
12113  3B61
12114  3B62
12115  3B63
12116  3B64
12117  3B65
12118  3B66
12119  3B67
12120  3B68
12121  3B69
12122  3B6A
12123  3B6B
12124  3B6C
12125  3B6D
12126  3B6E
12127  3B6F
12128  3B70
12129  3B71
12130  3B72
12131  3B73
12132  3B74
12133  3B75
12134  3B76
12135  3B77
12136  3B78
12137  3B79
12138  3B7A
12139  3B7B
12140  3B7C
12141  3B7D
12142  3B7E
12143  3B7F
12144  3B80
12145  3B81
12146  3B82
12147  3B83
12148  3B84
12149  3B85
12150  3B86
12151  3B87
12152  3B88
12153  3B89
12154  3B8A
12155  3B8B
12156  3B8C
12157  3B8D
12158  3B8E
12159  3B8F
12160  3B90
12161  3B91
12162  3B92
12163  3B93
12164  3B94
12165  3B95
12166  3B96
12167  3B97
12168  3B98
12169  3B99
12170  3B9A
12171  3B9B
12172  3B9C
12173  3B9D
12174  3B9E
12175  3B9F
12176  3BA0
12177  3BA1
12178  3BA2
12179  3BA3
12180  3BA4
12181  3BA5
12182  3BA6
12183  3BA7
12184  3BA8
12185  3BA9
12186  3BAA
12187  3BAB
12188  3BAC
12189  3BAD
12190  3BAE
12191  3BAF
12192  3BB0
12193  3BB1
12194  3BB2
12195  3BB3
12196  3BB4
12197  3BB5
12198  3BB6
12199  3BB7
12200  3BB8
12201  3BB9
12202  3BBA
12203  3BBB
12204  3BBC
12205  3BBD
12206  3BBE
12207  3BBF
12208  3BC0
12209  3BC1
12210  3BC2
12211  3BC3
12212  3BC4
12213  3BC5
12214  3BC6
12215  3BC7
12216  3BC8
12217  3BC9
12218  3BCA
12219  3BCB
12220  3BCC
12221  3BCD
12222  3BCE
12223  3BCF
12224  3BD0
12225  3BD1
12226  3BD2
12227  3BD3
12228  3BD4
12229  3BD5
12230  3BD6
12231  3BD7
12232  3BD8
12233  3BD9
12234  3BDA
12235  3BDB
12236  3BDC
12237  3BDD
12238  3BDE
12239  3BDF
12240  3BE0
12241  3BE1
12242  3BE2
12243  3BE3
12244  3BE4
12245  3BE5
12246  3BE6
12247  3BE7
12248  3BE8
12249  3BE9
12250  3BEA
12251  3BEB
12252  3BEC
12253  3BED
12254  3BEE
12255  3BEF
12256  3BF0
12257  3BF1
12258  3BF2
12259  3BF3
12260  3BF4
12261  3BF5
12262  3BF6
12263  3BF7
12264  3BF8
12265  3BF9
12266  3BFA
12267  3BFB
12268  3BFC
12269  3BFD
12270  3BFE
12271  3BFF
12272  3C00
12273  3C01
12274  3C02
12275  3C03
12276  3C04
12277  3C05
12278  3C06
12279  3C07
12280  3C08
12281  3C09
12282  3C0A
12283  3C0B
12284  3C0C
12285  3C0D
12286  3C0E
12287  3C0F
12288  3C10
12289  3C11
12290  3C12
12291  3C13
12292  3C14
12293  3C15
12294  3C16
12295  3C17
12296  3C18
12297  3C19
12298  3C1A
12299  3C1B
12300  3C1C
12301  3C1D
12302  3C1E
12303  3C1F
12304  3C20
12305  3C21
12306  3C22
12307  3C23
12308  3C24
12309  3C25
12310  3C26
12311  3C27
12312  3C28
12313  3C29
12314  3C2A
12315  3C2B
12316  3C2C
12317  3C2D
12318  3C2E
12319  3C2F
12320  3C30
12321  3C31
12322  3C32
12323  3C33
12324  3C34
12325  3C35
12326  3C36
12327  3C37
12328  3C38
12329  3C39
12330  3C3A
12331  3C3B
12332  3C3C
12333  3C3D
12334  3C3E
12335  3C3F
12336  3C40
12337  3C41
12338  3C42
12339  3C43
12340  3C44
12341  3C45
12342  3C46
12343  3C47
12344  3C48
12345  3C49
12346  3C4A
12347  3C4B
12348  3C4C
12349  3C4D
12350  3C4E
12351  3C4F
12352  3C50
12353  3C51
12354  3C52
12355  3C53
12356  3C54
12357  3C55
12358  3C56
12359  3C57
12360  3C58
12361  3C59
12362  3C5A
12363  3C5B
12364  3C5C
12365  3C5D
12366  3C5E
12367  3C5F
12368  3C60
12369  3C61
12370  3C62
12371  3C63
12372  3C64
12373  3C65
12374  3C66
12375  3C67
12376  3C68
12377  3C69
12378  3C6A
12379  3C6B
12380  3C6C
12381  3C6D
12382  3C6E
12383  3C6F
12384  3C70
12385  3C71
12386  3C72
12387  3C73
12388  3C74
12389  3C75
12390  3C76
12391  3C77
12392  3C78
12393  3C79
12394  3C7A
12395  3C7B
12396  3C7C
12397  3C7D
12398  3C7E
12399  3C7F
12400  3C80
12401  3C81
12402  3C82
12403  3C83
12404  3C84
12405  3C85
12406  3C86
12407  3C87
12408  3C88
12409  3C89
12410  3C8A
12411  3C8B
12412  3C8C
12413  3C8D
12414  3C8E
12415  3C8F
12416  3C90
12417  3C91
12418  3C92
12419  3C93
12420  3C94
12421  3C95
12422  3C96
12423  3C97
12424  3C98
12425  3C99
12426  3C9A
12427  3C9B
12428  3C9C
12429  3C9D
12430  3C9E
12431  3C9F
12432  3CA0
12433  3CA1
12434  3CA2
12435  3CA3
12436  3CA4
12437  3CA5
12438  3CA6
12439  3CA7
12440  3CA8
12441  3CA9
12442  3CAA
12443  3CAB
12444  3CAC
12445  3CAD
12446  3CAE
12447  3CAF
12448  3CB0
12449  3CB1
12450  3CB2
12451  3CB3
12452  3CB4
12453  3CB5
12454  3CB6
12455  3CB7
12456  3CB8
12457  3CB9
12458  3CBA
12459  3CBB
12460  3CBC
12461  3CBD
12462  3CBE
12463  3CBF
12464  3CC0
12465  3CC1
12466  3CC2
12467  3CC3
12468  3CC4
12469  3CC5
12470  3CC6
12471  3CC7
12472  3CC8
12473  3CC9
12474  3CCA
12475  3CCB
12476  3CCC
12477  3CCD
12478  3CCE
12479  3CCF
12480  3CD0
12481  3CD1
12482  3CD2
12483  3CD3
12484  3CD4
12485  3CD5
12486  3CD6
12487  3CD7
12488  3CD8
12489  3CD9
12490  3CDA
12491  3CDB
12492  3CDC
12493  3CDD
12494  3CDE
12495  3CDF
12496  3CE0
12497  3CE1
12498  3CE2
12499  3CE3
12500  3CE4
12501  3CE5
12502  3CE6
12503  3CE7
12504  3CE8
12505  3CE9
12506  3CEA
12507  3CEB
12508  3CEC
12509  3CED
12510  3CEE
12511  3CEF
12512  3CF0
12513  3CF1
12514  3CF2
12515  3CF3
12516  3CF4
12517  3CF5
12518  3CF6
12519  3CF7
12520  3CF8
12521  3CF9
12522  3CFA
12523  3CFB
12524  3CFC
12525  3CFD
12526  3CFE
12527  3CFF
12528  3D00
12529  3D01
12530  3D02
12531  3D03
12532  3D04
12533  3D05
12534  3D06
12535  3D07
12536  3D08
12537  3D09
12538  3D0A
12539  3D0B
12540  3D0C
12541  3D0D
12542  3D0E
12543  3D0F
12544  3D10
12545  3D11
12546  3D12
12547  3D13
12548  3D14
12549  3D15
12550  3D16
12551  3D17
12552  3D18
12553  3D19
12554  3D1A
12555  3D1B
12556  3D1C
12557  3D1D
12558  3D1E
12559  3D1F
12560  3D20
12561  3D21
12562  3D22
12563  3D23
12564  3D24
12565  3D25
12566  3D26
12567  3D27
12568  3D28
12569  3D29
12570  3D2A
12571  3D2B
12572  3D2C
12573  3D2D
12574  3D2E
12575  3D2F
12576  3D30
12577  3D31
12578  3D32
12579  3D33
12580  3D34
12581  3D35
12582  3D36
12583  3D37
12584  3D38
12585  3D39
12586  3D3A
12587  3D3B
12588  3D3C
12589  3D3D
12590  3D3E
12591  3D3F
12592  3D40
12593  3D41
12594  3D42
12595  3D43
12596  3D44
12597  3D45
12598  3D46
12599  3D47
12600  3D48
12601  3D49
12602  3D4A
12603  3D4B
12604  3D4C
12605  3D4D
12606  3D4E
12607  3D4F
12608  3D50
12609  3D51
12610  3D52
12611  3D53
12612  3D54
12613  3D55
12614  3D56
12615  3D57
12616  3D58
12617  3D59
12618  3D5A
12619  3D5B
12620  3D5C
12621  3D5D
12622  3D5E
12623  3D5F
12624  3D60
12625  3D61
12626  3D62
12627  3D63
12628  3D64
12629  3D65
12630  3D66
12631  3D67
12632  3D68
12633  3D69
12634  3D6A
12635  3D6B
12636  3D6C
12637  3D6D
12638  3D6E
12639  3D6F
12640  3D70
12641  3D71
12642  3D72
12643  3D73
12644  3D74
12645  3D75
12646  3D76
12647  3D77
12648  3D78
12649  3D79
12650  3D7A
12651  3D7B
12652  3D7C
12653  3D7D
12654  3D7E
12655  3D7F
12656  3D80
12657  3D81
12658  3D82
12659  3D83
12660  3D84
12661  3D85
12662  3D86
12663  3D87
12664  3D88
12665  3D89
12666  3D8A
12667  3D8B
12668  3D8C
12669  3D8D
12670  3D8E
12671  3D8F
12672  3D90
12673  3D91
12674  3D92
12675  3D93
12676  3D94
12677  3D95
12678  3D96
12679  3D97
12680  3D98
12681  3D99
12682  3D9A
12683  3D9B
12684  3D9C
12685  3D9D
12686  3D9E
12687  3D9F
12688  3DA0
12689  3DA1
12690  3DA2
12691  3DA3
12692  3DA4
12693  3DA5
12694  3DA6
12695  3DA7
12696  3DA8
12697  3DA9
12698  3DAA
12699  3DAB
12700  3DAC
12701  3DAD
12702  3DAE
12703  3DAF
12704  3DB0
12705  3DB1
12706  3DB2
12707  3DB3
12708  3DB4
12709  3DB5
12710  3DB6
12711  3DB7
12712  3DB8
12713  3DB9
12714  3DBA
12715  3DBB
12716  3DBC
12717  3DBD
12718  3DBE
12719  3DBF
12720  3DC0
12721  3DC1
12722  3DC2
12723  3DC3
12724  3DC4
12725  3DC5
12726  3DC6
12727  3DC7
12728  3DC8
12729  3DC9
12730  3DCA
12731  3DCB
12732  3DCC
12733  3DCD
12734  3DCE
12735  3DCF
12736  3DD0
12737  3DD1
12738  3DD2
12739  3DD3
12740  3DD4
12741  3DD5
12742  3DD6
12743  3DD7
12744  3DD8
12745  3DD9
12746  3DDA
12747  3DDB
12748  3DDC
12749  3DDD
12750  3DDE
12751  3DDF
12752  3DE0
12753  3DE1
12754  3DE2
12755  3DE3
12756  3DE4
12757  3DE5
12758  3DE6
12759  3DE7
12760  3DE8
12761  3DE9
12762  3DEA
12763  3DEB
12764  3DEC
12765  3DED
12766  3DEE
12767  3DEF
12768  3DF0
12769  3DF1
12770  3DF2
12771  3DF3
12772  3DF4
12773  3DF5
12774  3DF6
12775  3DF7
12776  3DF8
12777  3DF9
12778  3DFA
12779  3DFB
12780  3DFC
12781  3DFD
12782  3DFE
12783  3DFF
12784  3E00
12785  3E01
12786  3E02
12787  3E03
12788  3E04
12789  3E05
12790  3E06
12791  3E07
12792  3E08
12793  3E09
12794  3E0A
12795  3E0B
12796  3E0C
12797  3E0D
12798  3E0E
12799  3E0F
12800  3E10
12801  3E11
12802  3E12
12803  3E13
12804  3E14
12805  3E15
12806  3E16
12807  3E17
12808  3E18
12809  3E19
12810  3E1A
12811  3E1B
12812  3E1C
12813  3E1D
12814  3E1E
12815  3E1F
12816  3E20
12817  3E21
12818  3E22
12819  3E23
12820  3E24
12821  3E25
12822  3E26
12823  3E27
12824  3E28
12825  3E29
12826  3E2A
12827  3E2B
12828  3E2C
12829  3E2D
12830  3E2E
12831  3E2F
12832  3E30
12833  3E31
12834  3E32
12835  3E33
12836  3E34
12837  3E35
12838  3E36
12839  3E37
12840  3E38
12841  3E39
12842  3E3A
12843  3E3B
12844  3E3C
12845  3E3D
12846  3E3E
12847  3E3F
12848  3E40
12849  3E41
12850  3E42
12851  3E43
12852  3E44
12853  3E45
12854  3E46
12855  3E47
12856  3E48
12857  3E49
12858  3E4A
12859  3E4B
12860  3E4C
12861  3E4D
12862  3E4E
12863  3E4F
12864  3E50
12865  3E51
12866  3E52
12867  3E53
12868  3E54
12869  3E55
12870  3E56
12871  3E57
12872  3E58
12873  3E59
12874  3E5A
12875  3E5B
12876  3E5C
12877  3E5D
12878  3E5E
12879  3E5F
12880  3E60
12881  3E61
12882  3E62
12883  3E63
12884  3E64
12885  3E65
12886  3E66
12887  3E67
12888  3E68
12889  3E69
12890  3E6A
12891  3E6B
12892  3E6C
12893  3E6D
12894  3E6E
12895  3E6F
12896  3E70
12897  3E71
12898  3E72
12899  3E73
12900  3E74
12901  3E75
12902  3E76
12903  3E77
12904  3E78
12905  3E79
12906  3E7A
12907  3E7B
12908  3E7C
12909  3E7D
12910  3E7E
12911  3E7F
12912  3E80
12913  3E81
12914  3E82
12915  3E83
12916  3E84
12917  3E85
12918  3E86
12919  3E87
12920  3E88
12921  3E89
12922  3E8A
12923  3E8B
12924  3E8C
12925  3E8D
12926  3E8E
12927  3E8F
12928  3E90
12929  3E91
12930  3E92
12931  3E93
12932  3E94
12933  3E95
12934  3E96
12935  3E97
12936  3E98
12937  3E99
12938  3E9A
12939  3E9B
12940  3E9C
12941  3E9D
12942  3E9E
12943  3E9F
12944  3EA0
12945  3EA1
12946  3EA2
12947  3EA3
12948  3EA4
12949  3EA5
12950  3EA6
12951  3EA7
12952  3EA8
12953  3EA9
12954  3EAA
12955  3EAB
12956  3EAC
12957  3EAD
12958  3EAE
12959  3EAF
12960  3EB0
12961  3EB1
12962  3EB2
12963  3EB3
12964  3EB4
12965  3EB5
12966  3EB6
12967  3EB7
12968  3EB8
12969  3EB9
12970  3EBA
12971  3EBB
12972  3EBC
12973  3EBD
12974  3EBE
12975  3EBF
12976  3EC0
12977  3EC1
12978  3EC2
12979  3EC3
12980  3EC4
12981  3EC5
12982  3EC6
12983  3EC7
12984  3EC8
12985  3EC9
12986  3ECA
12987  3ECB
12988  3ECC
12989  3ECD
12990  3ECE
12991  3ECF
12992  3ED0
12993  3ED1
12994  3ED2
12995  3ED3
12996  3ED4
12997  3ED5
12998  3ED6
12999  3ED7
13000  3ED8
13001  3ED9
13002  3EDA
13003  3EDB
13004  3EDC
13005  3EDD
13006  3EDE
13007  3EDF
13008  3EE0
13009  3EE1
13010  3EE2
13011  3EE3
13012  3EE4
13013  3EE5
13014  3EE6
13015  3EE7
13016  3EE8
13017  3EE9
13018  3EEA
13019  3EEB
13020  3EEC
13021  3EED
13022  3EEE
13023  3EEF
13024  3EF0
13025  3EF1
13026  3EF2
13027  3EF3
13028  3EF4
13029  3EF5
13030  3EF6
13031  3EF7
13032  3EF8
13033  3EF9
13034  3EFA
13035  3EFB
13036  3EFC
13037  3EFD
13038  3EFE
13039  3EFF
13040  3F00
13041  3F01
13042  3F02
13043  3F03
13044  3F04
13045  3F05
13046  3F06
13047  3F07
13048  3F08
13049  3F09
13050  3F0A
13051  3F0B
13052  3F0C
13053  3F0D
13054  3F0E
13055  3F0F
13056  3F10
13057  3F11
13058  3F12
13059  3F13
13060  3F14
13061  3F15
13062  3F16
13063  3F17
13064  3F18
13065  3F19
13066  3F1A
13067  3F1B
13068  3F1C
13069  3F1D
13070  3F1E
13071  3F1F
13072  3F20
13073  3F21
13074  3F22
13075  3F23
13076  3F24
13077  3F25
13078  3F26
13079  3F27
13080  3F28
13081  3F29
13082  3F2A
13083  3F2B
13084  3F2C
13085  3F2D
13086  3F2E
13087  3F2F
13088  3F30
13089  3F31
13090  3F32
13091  3F33
13092  3F34
13093  3F35
13094  3F36
13095  3F37
13096  3F38
13097  3F39
13098  3F3A
13099  3F3B
13100  3F3C
13101  3F3D
13102  3F3E
13103  3F3F
13104  3F40
13105  3F41
13106  3F42
13107  3F43
13108  3F44
13109  3F45
13110  3F46
13111  3F47
13112  3F48
13113  3F49
13114  3F4A
13115  3F4B
13116  3F4C
13117  3F4D
13118  3F4E
13119  3F4F
13120  3F50
13121  3F51
13122  3F52
13123  3F53
13124  3F54
13125  3F55
13126  3F56
13127  3F57
13128  3F58
13129  3F59
13130  3F5A
13131  3F5B
13132  3F5C
13133  3F5D
13134  3F5E
13135  3F5F
13136  3F60
13137  3F61
13138  3F62
13139  3F63
13140  3F64
13141  3F65
13142  3F66
13143  3F67
13144  3F68
13145  3F69
13146  3F6A
13147  3F6B
13148  3F6C
13149  3F6D
13150  3F6E
13151  3F6F
13152  3F70
13153  3F71
13154  3F72
13155  3F73
13156  3F74
13157  3F75
13158  3F76
13159  3F77
13160  3F78
13161  3F79
13162  3F7A
13163  3F7B
13164  3F7C
13165  3F7D
13166  3F7E
13167  3F7F
13168  3F80
13169  3F81
13170  3F82
13171  3F83
13172  3F84
13173  3F85
13174  3F86
13175  3F87
13176  3F88
13177  3F89
13178  3F8A
13179  3F8B
13180  3F8C
13181  3F8D
13182  3F8E
13183  3F8F
13184  3F90
13185  3F91
13186  3F92
13187  3F93
13188  3F94
13189  3F95
13190  3F96
13191  3F97
13192  3F98
13193  3F99
13194  3F9A
13195  3F9B
13196  3F9C
13197  3F9D
13198  3F9E
13199  3F9F
13200  3FA0
13201  3FA1
13202  3FA2
13203  3FA3
13204  3FA4
13205  3FA5
13206  3FA6
13207  3FA7
13208  3FA8
13209  3FA9
13210  3FAA
13211  3FAB
13212  3FAC
13213  3FAD
13214  3FAE
13215  3FAF
13216  3FB0
13217  3FB1
13218  3FB2
13219  3FB3
13220  3FB4
13221  3FB5
13222  3FB6
13223  3FB7
13224  3FB8
13225  3FB9
13226  3FBA
13227  3FBB
13228  3FBC
13229  3FBD
13230  3FBE
13231  3FBF
13232  3FC0
13233  3FC1
13234  3FC2
13235  3FC3
13236  3FC4
13237  3FC5
13238  3FC6
13239  3FC7
13240  3FC8
13241  3FC9
13242  3FCA
13243  3FCB
13244  3FCC
13245  3FCD
13246  3FCE
13247  3FCF
13248  3FD0
13249  3FD1
13250  3FD2
13251  3FD3
13252  3FD4
13253  3FD5
13254  3FD6
13255  3FD7
13256  3FD8
13257  3FD9
13258  3FDA
13259  3FDB
13260  3FDC
13261  3FDD
13262  3FDE
13263  3FDF
13264  3FE0
13265  3FE1
13266  3FE2
13267  3FE3
13268  3FE4
13269  3FE5
13270  3FE6
13271  3FE7
13272  3FE8
13273  3FE9
13274  3FEA
13275  3FEB
13276  3FEC
13277  3FED
13278  3FEE
13279  3FEF
13280  3FF0
13281  3FF1
13282  3FF2
13283  3FF3
13284  3FF4
13285  3FF5
13286  3FF6
13287  3FF7
13288  3FF8
13289  3FF9
13290  3FFA
13291  3FFB
13292  3FFC
13293  3FFD
13294  3FFE
13295  3FFF
13296  4000
13297  4001
13298  4002
13299  4003
13300  4004
13301  4005
13302  4006
13303  4007
13304  4008
13305  4009
13306  400A
13307  400B
13308  400C
13309  400D
13310  400E
13311  400F
13312  4010
13313  4011
13314  4012
13315  4013
13316  4014
13317  4015
13318  4016
13319  4017
13320  4018
13321  4019
13322  401A
13323  401B
13324  401C
13325  401D
13326  401E
13327  401F
13328  4020
13329  4021
13330  4022
13331  4023
13332  4024
13333  4025
13334  4026
13335  4027
13336  4028
13337  4029
13338  402A
13339  402B
13340  402C
13341  402D
13342  402E
13343  402F
13344  4030
13345  4031
13346  4032
13347  4033
13348  4034
13349  4035
13350  4036
13351  4037
13352  4038
13353  4039
13354  403A
13355  403B
13356  403C
13357  403D
13358  403E
13359  403F
13360  4040
13361  4041
13362  4042
13363  4043
13364  4044
13365  4045
13366  4046
13367  4047
13368  4048
13369  4049
13370  404A
13371  404B
13372  404C
13373  404D
13374  404E
13375  404F
13376  4050
13377  4051
13378  4052
13379  4053
13380  4054
13381  4055
13382  4056
13383  4057
13384  4058
13385  4059
13386  405A
13387  405B
13388  405C
13389  405D
13390  405E
13391  405F
13392  4060
13393  4061
13394  4062
13395  4063
13396  4064
13397  4065
13398  4066
13399  4067
13400  4068
13401  4069
13402  406A
13403  406B
13404  406C
13405  406D
13406  406E
13407  406F
13408  4070
13409  4071
13410  4072
13411  4073
13412  4074
13413  4075
13414  4076
13415  4077
13416  4078
13417  4079
13418  407A
13419  407B
13420  407C
13421  407D
13422  407E
13423  407F
13424  4080
13425  4081
13426  4082
13427  4083
13428  4084
13429  4085
13430  4086
13431  4087
13432  4088
13433  4089
13434  408A
13435  408B
13436  408C
13437  408D
13438  408E
13439  408F
13440  4090
13441  4091
13442  4092
13443  4093
13444  4094
13445  4095
13446  4096
13447  4097
13448  4098
13449  4099
13450  409A
13451  409B
13452  409C
13453  409D
13454  409E
13455  409F
13456  40A0
13457  40A1
13458  40A2
13459  40A3
13460  40A4
13461  40A5
13462  40A6
13463  40A7
13464  40A8
13465  40A9
13466  40AA
13467  40AB
13468  40AC
13469  40AD
13470  40AE
13471  40AF
13472  40B0
13473  40B1
13474  40B2
13475  40B3
13476  40B4
13477  40B5
13478  40B6
13479  40B7
13480  40B8
13481  40B9
13482  40BA
13483  40BB
13484  40BC
13485  40BD
13486  40BE
13487  40BF
13488  40C0
13489  40C1
13490  40C2
13491  40C3
13492  40C4
13493  40C5
13494  40C6
13495  40C7
13496  40C8
13497  40C9
13498  40CA
13499  40CB
13500  40CC
13501  40CD
13502  40CE
13503  40CF
13504  40D0
13505  40D1
13506  40D2
13507  40D3
13508  40D4
13509  40D5
13510  40D6
13511  40D7
13512  40D8
13513  40D9
13514  40DA
13515  40DB
13516  40DC
13517  40DD
13518  40DE
13519  40DF
13520  40E0
13521  40E1
13522  40E2
13523  40E3
13524  40E4
13525  40E5
13526  40E6
13527  40E7
13528  40E8
13529  40E9
13530  40EA
13531  40EB
13532  40EC
13533  40ED
13534  40EE
13535  40EF
13536  40F0
13537  40F1
13538  40F2
13539  40F3
13540  40F4
13541  40F5
13542  40F6
13543  40F7
13544  40F8
13545  40F9
13546  40FA
13547  40FB
13548  40FC
13549  40FD
13550  40FE
13551  40FF
13552  4100
13553  4101
13554  4102
13555  4103
13556  4104
13557  4105
13558  4106
13559  4107
13560  4108
13561  4109
13562  410A
13563  410B
13564  410C
13565  410D
13566  410E
13567  410F
13568  4110
13569  4111
13570  4112
13571  4113
13572  4114
13573  4115
13574  4116
13575  4117
13576  4118
13577  4119
13578  411A
13579  411B
13580  411C
13581  411D
13582  411E
13583  411F
13584  4120
13585  4121
13586  4122
13587  4123
13588  4124
13589  4125
13590  4126
13591  4127
13592  4128
13593  4129
13594  412A
13595  412B
13596  412C
13597  412D
13598  412E
13599  412F
13600  4130
13601  4131
13602  4132
13603  4133
13604  4134
13605  4135
13606  4136
13607  4137
13608  4138
13609  4139
13610  413A
13611  413B
13612  413C
13613  413D
13614  413E
13615  413F
13616  4140
13617  4141
13618  4142
13619  4143
13620  4144
13621  4145
13622  4146
13623  4147
13624  4148
13625  4149
13626  414A
13627  414B
13628  414C
13629  414D
13630  414E
13631  414F
13632  4150
13633  4151
13634  4152
13635  4153
13636  4154
13637  4155
13638  4156
13639  4157
13640  4158
13641  4159
13642  415A
13643  415B
13644  415C
13645  415D
13646  415E
13647  415F
13648  4160
13649  4161
13650  4162
13651  4163
13652  4164
13653  4165
13654  4166
13655  4167
13656  4168
13657  4169
13658  416A
13659  416B
13660  416C
13661  416D
13662  416E
13663  416F
13664  4170
13665  4171
13666  4172
13667  4173
13668  4174
13669  4175
13670  4176
13671  4177
13672  4178
13673  4179
13674  417A
13675  417B
13676  417C
13677  417D
13678  417E
13679  417F
13680  4180
13681  4181
13682  4182
13683  4183
13684  4184
13685  4185
13686  4186
13687  4187
13688  4188
13689  4189
13690  418A
13691  418B
13692  418C
13693  418D
13694  418E
13695  418F
13696  4190
13697  4191
13698  4192
13699  4193
13700  4194
13701  4195
13702  4196
13703  4197
13704  4198
13705  4199
13706  419A
13707  419B
13708  419C
13709  419D
13710  419E
13711  419F
13712  41A0
13713  41A1
13714  41A2
13715  41A3
13716  41A4
13717  41A5
13718  41A6
13719  41A7
13720  41A8
13721  41A9
13722  41AA
13723  41AB
13724  41AC
13725  41AD
13726  41AE
13727  41AF
13728  41B0
13729  41B1
13730  41B2
13731  41B3
13732  41B4
13733  41B5
13734  41B6
13735  41B7
13736  41B8
13737  41B9
13738  41BA
13739  41BB
13740  41BC
13741  41BD
13742  41BE
13743  41BF
13744  41C0
13745  41C1
13746  41C2
13747  41C3
13748  41C4
13749  41C5
13750  41C6
13751  41C7
13752  41C8
13753  41C9
13754  41CA
13755  41CB
13756  41CC
13757  41CD
13758  41CE
13759  41CF
13760  41D0
13761  41D1
13762  41D2
13763  41D3
13764  41D4
13765  41D5
13766  41D6
13767  41D7
13768  41D8
13769  41D9
13770  41DA
13771  41DB
13772  41DC
13773  41DD
13774  41DE
13775  41DF
13776  41E0
13777  41E1
13778  41E2
13779  41E3
13780  41E4
13781  41E5
13782  41E6
13783  41E7
13784  41E8
13785  41E9
13786  41EA
13787  41EB
13788  41EC
13789  41ED
13790  41EE
13791  41EF
13792  41F0
13793  41F1
13794  41F2
13795  41F3
13796  41F4
13797  41F5
13798  41F6
13799  41F7
13800  41F8
13801  41F9
13802  41FA
13803  41FB
13804  41FC
13805  41FD
13806  41FE
13807  41FF
13808  4200
13809  4201
13810  4202
13811  4203
13812  4204
13813  4205
13814  4206
13815  4207
13816  4208
13817  4209
13818  420A
13819  420B
13820  420C
13821  420D
13822  420E
13823  420F
13824  4210
13825  4211
13826  4212
13827  4213
13828  4214
13829  4215
13830  4216
13831  4217
13832  4218
13833  4219
13834  421A
13835  421B
13836  421C
13837  421D
13838  421E
13839  421F
13840  4220
13841  4221
13842  4222
13843  4223
13844  4224
13845  4225
13846  4226
13847  4227
13848  4228
13849  4229
13850  422A
13851  422B
13852  422C
13853  422D
13854  422E
13855  422F
13856  4230
13857  4231
13858  4232
13859  4233
13860  4234
13861  4235
13862  4236
13863  4237
13864  4238
13865  4239
13866  423A
13867  423B
13868  423C
13869  423D
13870  423E
13871  423F
13872  4240
13873  4241
13874  4242
13875  4243
13876  4244
13877  4245
13878  4246
13879  4247
13880  4248
13881  4249
13882  424A
13883  424B
13884  424C
13885  424D
13886  424E
13887  424F
13888  4250
13889  4251
13890  4252
13891  4253
13892  4254
13893  4255
13894  4256
13895  4257
13896  4258
13897  4259
13898  425A
13899  425B
13900  425C
13901  425D
13902  425E
13903  425F
13904  4260
13905  4261
13906  4262
13907  4263
13908  4264
13909  4265
13910  4266
13911  4267
13912  4268
13913  4269
13914  426A
13915  426B
13916  426C
13917  426D
13918  426E
13919  426F
13920  4270
13921  4271
13922  4272
13923  4273
13924  4274
13925  4275
13926  4276
13927  4277
13928  4278
13929  4279
13930  427A
13931  427B
13932  427C
13933  427D
13934  427E
13935  427F
13936  4280
13937  4281
13938  4282
13939  4283
13940  4284
13941  4285
13942  4286
13943  4287
13944  4288
13945  4289
13946  428A
13947  428B
13948  428C
13949  428D
13950  428E
13951  428F
13952  4290
13953  4291
13954  4292
13955  4293
13956  4294
13957  4295
13958  4296
13959  4297
13960  4298
13961  4299
13962  429A
13963  429B
13964  429C
13965  429D
13966  429E
13967  429F
13968  42A0
13969  42A1
13970  42A2
13971  42A3
13972  42A4
13973  42A5
13974  42A6
13975  42A7
13976  42A8
13977  42A9
13978  42AA
13979  42AB
13980  42AC
13981  42AD
13982  42AE
13983  42AF
13984  42B0
13985  42B1
13986  42B2
13987  42B3
13988  42B4
13989  42B5
13990  42B6
13991  42B7
13992  42B8
13993  42B9
13994  42BA
13995  42BB
13996  42BC
13997  42BD
13998  42BE
13999  42BF
14000  42C0
14001  42C1
14002  42C2
14003  42C3
14004  42C4
14005  42C5
14006  42C6
14007  42C7
14008  42C8
14009  42C9
14010  42CA
14011  42CB
14012  42CC
14013  42CD
14014  42CE
14015  42CF
14016  42D0
14017  42D1
14018  42D2
14019  42D3
14020  42D4
14021  42D5
14022  42D6
14023  42D7
14024  42D8
14025  42D9
14026  42DA
14027  42DB
14028  42DC
14029  42DD
14030  42DE
14031  42DF
14032  42E0
14033  42E1
14034  42E2
14035  42E3
14036  42E4
14037  42E5
14038  42E6
14039  42E7
14040  42E8
14041  42E9
14042  42EA
14043  42EB
14044  42EC
14045  42ED
14046  42EE
14047  42EF
14048  42F0
14049  42F1
14050  42F2
14051  42F3
14052  42F4
14053  42F5
14054  42F6
14055  42F7
14056  42F8
14057  42F9
14058  42FA
14059  42FB
14060  42FC
14061  42FD
14062  42FE
14063  42FF
14064  4300
14065  4301
14066  4302
14067  4303
14068  4304
14069  4305
14070  4306
14071  4307
14072  4308
14073  4309
14074  430A
14075  430B
14076  430C
14077  430D
14078  430E
14079  430F
14080  4310
14081  4311
14082  4312
14083  4313
14084  4314
14085  4315
14086  4316
14087  4317
14088  4318
14089  4319
14090  431A
14091  431B
14092  431C
14093  431D
14094  431E
14095  431F
14096  4320
14097  4321
14098  4322
14099  4323
14100  4324
14101  4325
14102  4326
14103  4327
14104  4328
14105  4329
14106  432A
14107  432B
14108  432C
14109  432D
14110  432E
14111  432F
14112  4330
14113  4331
14114  4332
14115  4333
14116  4334
14117  4335
14118  4336
14119  4337
14120  4338
14121  4339
14122  433A
14123  433B
14124  433C
14125  433D
14126  433E
14127  433F
14128  4340
14129  4341
14130  4342
14131  4343
14132  4344
14133  4345
14134  4346
14135  4347
14136  4348
14137  4349
14138  434A
14139  434B
14140  434C
14141  434D
14142  434E
14143  434F
14144  4350
14145  4351
14146  4352
14147  4353
14148  4354
14149  4355
14150  4356
14151  4357
14152  4358
14153  4359
14154  435A
14155  435B
14156  435C
14157  435D
14158  435E
14159  435F
14160  4360
14161  4361
14162  4362
14163  4363
14164  4364
14165  4365
14166  4366
14167  4367
14168  4368
14169  4369
14170  436A
14171  436B
14172  436C
14173  436D
14174  436E
14175  436F
14176  4370
14177  4371
14178  4372
14179  4373
14180  4374
14181  4375
14182  4376
14183  4377
14184  4378
14185  4379
14186  437A
14187  437B
14188  437C
14189  437D
14190  437E
14191  437F
14192  4380
14193  4381
14194  4382
14195  4383
14196  4384
14197  4385
14198  4386
14199  4387
14200  4388
14201  4389
14202  438A
14203  438B
14204  438C
14205  438D
14206  438E
14207  438F
14208  4390
14209  4391
14210  4392
14211  4393
14212  4394
14213  4395
14214  4396
14215  4397
14216  4398
14217  4399
14218  439A
14219  439B
14220  439C
14221  439D
14222  439E
14223  439F
14224  43A0
14225  43A1
14226  43A2
14227  43A3
14228  43A4
14229  43A5
14230  43A6
14231  43A7
14232  43A8
14233  43A9
14234  43AA
14235  43AB
14236  43AC
14237  43AD
14238  43AE
14239  43AF
14240  43B0
14241  43B1
14242  43B2
14243  43B3
14244  43B4
14245  43B5
14246  43B6
14247  43B7
14248  43B8
14249  43B9
14250  43BA
14251  43BB
14252  43BC
14253  43BD
14254  43BE
14255  43BF
14256  43C0
14257  43C1
14258  43C2
14259  43C3
14260  43C4
14261  43C5
14262  43C6
14263  43C7
14264  43C8
14265  43C9
14266  43CA
14267  43CB
14268  43CC
14269  43CD
14270  43CE
14271  43CF
14272  43D0
14273  43D1
14274  43D2
14275  43D3
14276  43D4
14277  43D5
014278  000517        
014279  000518  var hFonts[53] ;
014280  000519  var stringsCV[53] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
14281  2258
14282  2259
14283  225A
14284  225B
14285  225C
14286  225D
14287  225E
14288  225F
14289  2260
14290  2261
14291  2262
14292  2263
14293  2264
14294  2265
14295  2266
14296  2267
14297  2268
14298  2269
14299  226A
14300  226B
14301  226C
14302  226D
14303  226E
14304  226F
14305  2270
14306  2271
14307  2272
14308  2273
14309  2274
14310  2275
14311  2276
14312  2277
14313  2278
14314  2279
14315  227A
14316  227B
14317  227C
14318  227D
14319  227E
14320  227F
14321  2280
14322  2281
14323  2282
14324  2283
14325  2284
14326  2285
14327  2286
14328  2287
14329  2288
14330  2289
14331  228A
14332  228B
14333  228C
14334  228D
14335  228E
14336  228F
14337  2290
14338  2291
14339  2292
14340  2293
14341  2294
14342  2295
14343  2296
14344  2297
14345  2298
14346  2299
14347  229A
14348  229B
14349  229C
14350  229D
14351  229E
14352  229F
14353  22A0
14354  22A1
14355  22A2
14356  22A3
14357  22A4
14358  22A5
14359  22A6
14360  22A7
14361  22A8
14362  22A9
14363  22AA
14364  22AB
14365  22AC
14366  22AD
14367  22AE
14368  22AF
14369  22B0
14370  22B1
14371  22B2
14372  22B3
14373  22B4
14374  22B5
14375  22B6
14376  22B7
14377  22B8
14378  22B9
14379  22BA
14380  22BB
14381  22BC
14382  22BD
14383  22BE
14384  22BF
14385  22C0
14386  22C1
014387  000520  // Start P2.inc
014388  000521  var oObjects[MaxTotObjects+1] ;                 // address of objects
014389  000522  var CurrentForm ;
014390  000523  var TouchXpos, TouchYpos ;
014391  000524  var InputType, TouchState, CurInputData, pInputIndex ;
014392  000525  var comRX[40], cmd[CMDLenMAX] ;
014393  000526        
014394  000527  var InputCS, OutputCS ;
014395  000528        
014396  000529        
014397  000530        
014398  000531  func seroutCS(var op)
014399  000532      serout(op) ;
014400  000533      OutputCS ^= op ;
014401  000534  endfunc
014402  000535        
014403  000536  func nak0()
014404  000537      serout(NAK) ;
014405  000538      InputCS := 0 ;
014406  000539  endfunc
014407  000540        
014408  000541  func seroutOcs()
014409  000542      serout(OutputCS) ;
014410  000543      OutputCS := 0 ;
014411  000544  endfunc
014412  000545        
014413  000546  func SendReport(var id, var objt, var objn, var val)
014414  000547      seroutCS(id) ;
014415  000548      seroutCS(objt) ;
014416  000549      seroutCS(objn) ;
014417  000550      seroutCS(val >> 8) ; // first 8 bits
014418  000551      seroutCS(val) ;
014419  000552      seroutOcs() ;
014420  000553  endfunc
014421  000554        
014422  000555        
014423  000556  func ReadObject(var ObjectType, var ObjectIdx)
014424  000557      var j, k, Objects ;
014425  000558      Objects := *(oObjects+ObjectType) ;
014426  000559        
014427  000560      j := 2 + ObjectIdx * 2 + Objects ;
014428  000561       if (ObjectType == tForm)
014429  000562          k := CurrentForm ;
014430  000563      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
014431  000564          k := img_GetWord(hndl, *j, IMAGE_TAG2);
014432  000565      else if (ObjectType == tStrings)
014433  000566          k := stringsCV[ObjectIdx];
014434  000567          else
014435  000568          k := img_GetWord(hndl, *j, IMAGE_INDEX);
014436  000569          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
014437  000570                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
014438  000571      endif
014439  000572      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
014440  000573  endfunc
014441  000574        
014442  000575        
014443  000576  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
014444  000577      var i, j, k, Objects ;
014445  000578      ObjectType &= 0x3f ;
014446  000579      if (ObjectType == tForm)
014447  000580          ActivateForm(ObjectIdx) ;
014448  000581      else
014449  000582          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
014450  000583          i := *(Objects) ;
014451  000584          switch (ObjectType)
014452  000585              case tWinButton :
014453  000586                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
014454  000587                  break ;
014455  000588              case tUserButton :
014456  000589                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
014457  000590                  break ;
014458  000591              default : j := -1 ;
014459  000592          endswitch
014460  000593          if (j != -1)
014461  000594              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
014462  000595              NewVal := NewVal << 1 ;
014463  000596              if (OVF())      // button group index change
014464  000597                  if (*(j+InputData+Ofs_IPD_P1))
014465  000598                      k &= 1 ;    // mask off old group index for momentary
014466  000599                  else
014467  000600                      k &= 3 ;    // mask off old group index for toggle
014468  000601                  endif
014469  000602              else            // normal set
014470  000603                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
014471  000604                  k &= 0xfffc ;    // retain only group index for state set
014472  000605              endif
014473  000606              NewVal |= k ;
014474  000607          endif
014475  000608           if (ObjectType == tLeddigits)
014476  000609              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
014477  000610              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
014478  000611          else if (ObjectType == tStrings)
014479  000612              PrintStrings(ObjectIdx, NewVal, 0);
014480  000613          else
014481  000614              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
014482  000615              img_Show(hndl, i) ; // will only display if form is current
014483  000616          endif
014484  000617      endif
014485  000618  endfunc
014486  000619        
014487  000620  func TurnOffButtons(var group)
014488  000621      var j, k, l;
014489  000622      for (j := 0; j < nInputs; j++)
014490  000623          k := j*IPDatasize ;
014491  000624          if (*(InputData+k+Ofs_IPD_P2) == group)
014492  000625              l := -1 ;
014493  000626               if (*(InputData+k) == tWinButton)
014494  000627                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
014495  000628                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
014496  000629                  img_Show(hndl, l);      // only shows on current form
014497  000630              else if (*(InputData+k) == tUserButton)
014498  000631                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
014499  000632                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
014500  000633                  img_Show(hndl, l);      // only shows on current form
014501  000634              endif
014502  000635          endif
014503  000636      next
014504  000637  endfunc
014505  000638        
014506  000639        
014507  000640  // WARNING, this code will crash if newval exceeds maximum displayable number
014508  000641  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
014509  000642      var i, j, k, l, lb, newval ;
014510  000643      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
014511  000644      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
014512  000645      i := -1 ;
014513  000646      j := *(typeptr) ;
014514  000647      repeat
014515  000648          typeptr += 2 ;
014516  000649          i++ ;
014517  000650          until (*(typeptr) == imgidx);
014518  000651      j := setptr + i*10 ;
014519  000652        
014520  000653      imgidx++ ;
014521  000654      l := 1 ;
014522  000655      for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
014523  000656          l *= 10 ;
014524  000657      next
014525  000658      lb := *(j+Ofs_Digits_LeadingBlanks) ;
014526  000659      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
014527  000660          k := newval / l ;
014528  000661          newval -= k * l ;
014529  000662          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
014530  000663              if (k == 0)
014531  000664                  k := 10 ;
014532  000665              else
014533  000666                  lb := 0 ;
014534  000667              endif
014535  000668          endif
014536  000669          l /= 10 ;
014537  000670          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
014538  000671          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
014539  000672          img_Show(hndl, imgidx);
014540  000673      next
014541  000674  endfunc
014542  000675        
014543  000676        
014544  000677  func ActivateForm(var newform)
014545  000678      var i, j, *p ;
014546  000679        
014547  000680      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
014548  000681          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
014549  000682              if (img_GetWord(hndl, i, IMAGE_TAG))
014550  000683                  img_Disable(hndl,i) ;
014551  000684              endif
014552  000685          next
014553  000686      endif
014554  000687      CurrentForm := newform ;
014555  000688      // display newform image or clear to image color
014556  000689      if (FormBGcolors[CurrentForm] != ColorBGimage)
014557  000690          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
014558  000691          gfx_Cls() ;
014559  000692          DoGFXObjects() ;                                    // display GFX 'widgets'
014560  000693      endif
014561  000694        
014562  000695      // enable inputs
014563  000696      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
014564  000697          j := img_GetWord(hndl, i, IMAGE_TAG) ;
014565  000698          if (j)
014566  000699              j-- ;
014567  000700              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
014568  000701              //if (j != tKeyboard)
014569  000702              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
014570  000703                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
014571  000704              endif
014572  000705              img_Show(hndl,i) ; // show initialy, if required
014573  000706              if (j == tForm)
014574  000707                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
014575  000708              else if (j == tLeddigits)
014576  000709                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
014577  000710              endif
014578  000711          endif
014579  000712      next
014580  000713      for (i := 0; i < nStrings; i++)
014581  000714          if (stringsCV[i] != -1)
014582  000715              WriteObject(tStrings, i, stringsCV[i]) ;
014583  000716          endif
014584  000717      next
014585  000718        
014586  000719  endfunc
014587  000720        
014588  000721  func UpdateObjects(var newval)
014589  000722      var IPidx, otherOBJ ;
014590  000723      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
014591  000724        
014592  000725          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
014593  000726              img_Show(hndl, *(pInputIndex));      // only shows on current form
014594  000727          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
014595  000728              if (*(CurInputData+Ofs_IPD_P1))
014596  000729                  newval &= 1;
014597  000730              else
014598  000731                  newval &= 3;
014599  000732              endif
014600  000733              if (newval > 1) newval := 1;
014601  000734          endif
014602  000735          IPidx := *(CurInputData+TouchState) ;
014603  000736          while(IPidx != 0)
014604  000737              otherOBJ := IPidx + InputData;
014605  000738              if (*(otherOBJ) == OT_REPORT)
014606  000739          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
014607  000740              else if (*(otherOBJ) == OT_MAGIC)
014608  000741                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
014609  000742                  IPidx(newval) ;
014610  000743              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
014611  000744                  if (*(otherOBJ) == OT_ACTIVATE)
014612  000745                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
014613  000746                      InputType := tForm ;
014614  000747                  else if (*(otherOBJ) == OT_SETCONST)
014615  000748                      newval := *(otherOBJ+Ofs_IPD_P3) ;
014616  000749                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
014617  000750                  else if (*(otherOBJ) == OT_SETANOTHER)
014618  000751                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
014619  000752                  else if (*(otherOBJ) == OT_PREVFRAME)
014620  000753                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
014621  000754                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
014622  000755                      endif
014623  000756                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
014624  000757                  else if (*(otherOBJ) == OT_NEXTFRAME)
014625  000758                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
014626  000759                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
014627  000760                      endif
014628  000761                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
014629  000762                  else if (*(otherOBJ) == OT_PREVSTRING)
014630  000763                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
014631  000764                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
014632  000765                      endif
014633  000766                  else if (*(otherOBJ) == OT_NEXTSTRING)
014634  000767                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
014635  000768                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
014636  000769                      endif
014637  000770                  endif
014638  000771              endif
014639  000772              IPidx := *(otherOBJ+TouchState) ;
014640  000773          wend
014641  000774      endif
014642  000775  endfunc
014643  000776        
014644  000777  // End P2.inc
014645  000778  func DoGFXObjects()
014646  000779  endfunc
014647  000780        
014648  000781  // Start P3.inc
014649  000782  func main()
014650  000783      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
014651  000784        
014652  000785      putstr("Mounting...\n");
014653  000786      if (!(file_Mount()))
014654  000787          while(!(file_Mount()))
014655  000788              putstr("Drive not mounted...");
014656  000789              pause(200);
014657  000790              gfx_Cls();
014658  000791              pause(200);
014659  000792          wend
014660  000793      endif
014661  000794  //    gfx_MoveTo(0, 0);
014662  000795  //    print(mem_Heap()," ") ;
014663  000796  //    gfx_TransparentColour(0x0020);
014664  000797  //    gfx_Transparency(ON);
014665  000798        
014666  000799      gfx_ScreenMode(LANDSCAPE) ;
014667  000800        
014668  000801      // open image control
014669  000802      hndl := file_LoadImageControl("REPRAP~2.dat", "REPRAP~2.gci", 1);
014670  000803        
014671  000804      // init 'constants'
014672  000805  // End P3.inc
014673  000806        
014674  000807      oObjects[tDipSwitch] := oDipSwitchs ;
014675  000808      oObjects[tKnob] := oKnobs ;
014676  000809      oObjects[tRockerSwitch] := oRockerSwitchs ;
014677  000810      oObjects[tRotarySwitch] := oRotarySwitchs ;
014678  000811      oObjects[tGSlider] := oGSliders ;
014679  000812      oObjects[tTrackbar] := oTrackbars ;
014680  000813      oObjects[tWinButton] := oWinButtons ;
014681  000814      oObjects[tAngularmeter] := oAngularmeters ;
014682  000815      oObjects[tCoolgauge] := oCoolgauges ;
014683  000816      oObjects[tCustomdigits] := oCustomdigitss ;
014684  000817      oObjects[tForm] := oForms ;
014685  000818      oObjects[tGauge] := oGauges ;
014686  000819      oObjects[tImage] := oImages ;
014687  000820      oObjects[tKeyboard] := oKeyboards ;
014688  000821      oObjects[tLed] := oLeds ;
014689  000822      oObjects[tLeddigits] := oLeddigitss ;
014690  000823      oObjects[tMeter] := oMeters ;
014691  000824      oObjects[tStrings] := oStringss ;
014692  000825      oObjects[tThermometer] := oThermometers ;
014693  000826      oObjects[tUserled] := oUserleds ;
014694  000827      oObjects[tVideo] := oVideos ;
014695  000828      oObjects[tStaticText] := oStaticTexts ;
014696  000829      oObjects[tSounds] := oSoundss ;
014697  000830      oObjects[tTimer] := oTimers ;
014698  000831      oObjects[tSpectrum] := oSpectrums ;
014699  000832      oObjects[tTank] := oTanks ;
014700  000833      oObjects[tUserImages] := oUserImagess ;
014701  000834      oObjects[tPinOutput] := oPinOutputs ;
014702  000835      oObjects[tPinInput] := oPinInputs ;
014703  000836      oObjects[t4Dbutton] := o4Dbuttons ;
014704  000837      oObjects[tAniButton] := oAniButtons ;
014705  000838      oObjects[tColorPicker] := oColorPickers ;
014706  000839      oObjects[tUserButton] := oUserButtons ;
014707  000840      hFonts[0] := file_LoadImageControl("REPRAP~2.d03", "REPRAP~2.g03", 1)  ;
014708  000841      hFonts[1] := file_LoadImageControl("REPRAP~2.d01", "REPRAP~2.g01", 1)  ;
014709  000842      hFonts[2] := file_LoadImageControl("REPRAP~2.d02", "REPRAP~2.g02", 1)  ;
014710  000843      hFonts[3] := FONT3 ;
014711  000844      hFonts[4] := FONT3 ;
014712  000845      hFonts[5] := FONT3 ;
014713  000846      hFonts[6] := FONT3 ;
014714  000847      hFonts[11] := file_LoadImageControl("REPRAP~2.d05", "REPRAP~2.g05", 1)  ;
014715  000848      hFonts[12] := FONT3 ;
014716  000849      hFonts[13] := file_LoadImageControl("REPRAP~2.d06", "REPRAP~2.g06", 1)  ;
014717  000850      hFonts[14] := FONT3 ;
014718  000851      hFonts[15] := FONT3 ;
014719  000852      hFonts[16] := FONT3 ;
014720  000853      hFonts[17] := FONT3 ;
014721  000854      hFonts[18] := FONT3 ;
014722  000855      hFonts[19] := FONT3 ;
014723  000856      hFonts[20] := FONT3 ;
014724  000857      hFonts[21] := FONT3 ;
014725  000858      hFonts[22] := FONT3 ;
014726  000859      hFonts[23] := FONT3 ;
014727  000860      hFonts[24] := FONT3 ;
014728  000861      hFonts[28] := FONT3 ;
014729  000862      hFonts[29] := FONT3 ;
014730  000863      hFonts[30] := FONT3 ;
014731  000864      hFonts[31] := FONT3 ;
014732  000865      hFonts[32] := FONT3 ;
014733  000866      hFonts[35] := FONT3 ;
014734  000867      hFonts[37] := file_LoadImageControl("REPRAP~2.d04", "REPRAP~2.g04", 1)  ;
014735  000868      hFonts[51] := FONT3 ;
014736  000869      hFonts[52] := FONT3 ;
014737  000870      hFonts[7] := hFonts[37] ;
014738  000871      hFonts[8] := hFonts[37] ;
014739  000872      hFonts[9] := hFonts[0] ;
014740  000873      hFonts[10] := hFonts[11] ;
014741  000874      hFonts[25] := hFonts[11] ;
014742  000875      hFonts[26] := hFonts[11] ;
014743  000876      hFonts[27] := hFonts[11] ;
014744  000877      hFonts[33] := hFonts[11] ;
014745  000878      hFonts[34] := hFonts[0] ;
014746  000879      hFonts[36] := hFonts[0] ;
014747  000880      hFonts[38] := hFonts[37] ;
014748  000881      hFonts[39] := hFonts[37] ;
014749  000882      hFonts[40] := hFonts[0] ;
014750  000883      hFonts[41] := hFonts[0] ;
014751  000884      hFonts[42] := hFonts[0] ;
014752  000885      hFonts[43] := hFonts[37] ;
014753  000886      hFonts[44] := hFonts[37] ;
014754  000887      hFonts[45] := hFonts[37] ;
014755  000888      hFonts[46] := hFonts[13] ;
014756  000889      hFonts[47] := hFonts[13] ;
014757  000890      hFonts[48] := hFonts[13] ;
014758  000891      hFonts[49] := hFonts[13] ;
014759  000892      hFonts[50] := hFonts[13] ;
014760  000893  // Start P4.inc
014761  000894      hstrings := file_Open("REPRAP~2.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
014762  000895      // init comms
014763  000896      com_Init(comRX,CMDLenMAX,0);
014764  000897      com_SetBaud(COM0,19886);
014765  000898      com_TXbuffer(comTX, 100, 0);
014766  000899      snd_BufSize(2) ;
014767  000900      // tag 'real' objects
014768  000901      for (i := 0; i <= MaxTotObjects; i++)
014769  000902          if (   (i != tSounds)
014770  000903              && (i != tTimer)
014771  000904              && (i != tPinOutput)
014772  000905              && (i != tPinInput) )
014773  000906              TouchXpos := oObjects[i] ;
014774  000907              TouchYpos := *(TouchXpos) ;
014775  000908              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
014776  000909                  oldn := *(TouchXpos+ImageTouched*2) ;
014777  000910                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
014778  000911                  if (oldn != -1)
014779  000912                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
014780  000913                      img_Disable(hndl, oldn) ;
014781  000914                  endif
014782  000915              next
014783  000916          endif
014784  000917      next
014785  000918        
014786  000919      // display initial form
014787  000920      CurrentForm := -1 ;
014788  000921      ActivateForm(0) ; // need to change this according to first actual form
014789  000922        
014790  000923  // End P4.inc
014791  000924  // Start P5.inc
014792  000925      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
014793  000926      oldn := -1 ;
014794  000927      repeat
014795  000928        
014796  000929          // check comms for command, how to NAK invalid command
014797  000930          if (com_Count() != 0)
014798  000931              i := serin() ;
014799  000932              InputCS ^= i ;               // update checksum
014800  000933              if (   (cmdi > 2)
014801  000934                  && (cmd[0] == WRITE_STRU) )
014802  000935                  j := (cmdi-1) >> 1 + 2 ;
014803  000936                  if (j == CMDLenMAX)    // max length exceeded
014804  000937                      nak0() ;
014805  000938                      cmdi := -1 ;
014806  000939                  else if (cmdi & 1)
014807  000940                      cmd[j] := i ;
014808  000941                      if (cmd[2] == 0)    // if string complete
014809  000942                          if (InputCS)
014810  000943                              nak0() ;
014811  000944                          else
014812  000945                              if (cmd[0] == WRITE_STRU)
014813  000946                              cmd[j] := 0 ;                     // terminate it
014814  000947                              PrintStrings(cmd[1], &cmd[3], 1) ;
014815  000948                              serout(ACK) ;
014816  000949                              else
014817  000950                              endif
014818  000951                          endif
014819  000952                          cmdi := -1 ;
014820  000953                      endif
014821  000954                  else
014822  000955                      cmd[j] := cmd[j] << 8 + i ;
014823  000956                      cmd[2]-- ;          // dec length
014824  000957                  endif
014825  000958                  cmdi++ ;
014826  000959              else // not unicode string
014827  000960                  cmd[cmdi++] := i ;
014828  000961                   if (cmd[0] == WRITE_STR)                  // Ansi String
014829  000962                      if (cmdi == CMDLenMAX)      // max length exceeded
014830  000963                          nak0() ;
014831  000964                          cmdi := 0 ;
014832  000965                      else if (cmdi > 2)
014833  000966                          if (cmd[2] == -1)
014834  000967                              if (InputCS)
014835  000968                                  nak0() ;
014836  000969                              else
014837  000970                                  if (cmd[0] == WRITE_STR)
014838  000971                                  cmd[cmdi-1] := 0 ;                     // terminate it
014839  000972                                  PrintStrings(cmd[1], &cmd[3], 1) ;
014840  000973                                  serout(ACK) ;
014841  000974                                  else
014842  000975                                  endif
014843  000976                              endif
014844  000977                              cmdi := 0 ;
014845  000978                          else
014846  000979                              cmd[2]-- ;          // dec length
014847  000980                          endif
014848  000981                      endif
014849  000982                  else if (   (cmd[0] == READ_OBJ)
014850  000983                           && (cmdi == 4)         )
014851  000984                      if (InputCS)
014852  000985                          nak0() ;
014853  000986                      else
014854  000987                          ReadObject(cmd[1], cmd[2]) ;
014855  000988                      endif
014856  000989                      cmdi := 0 ;
014857  000990                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
014858  000991                           && (cmdi == 6)          )
014859  000992                      if (InputCS)
014860  000993                          nak0() ;
014861  000994                      else
014862  000995                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
014863  000996                          serout(ACK) ;
014864  000997                      endif
014865  000998                      cmdi := 0 ;
014866  000999                  else if (   (cmd[0] == WRITE_CONTRAST)
014867  001000                           && (cmdi == 3)         )
014868  001001                      if (InputCS)
014869  001002                          nak0() ;
014870  001003                      else
014871  001004                          gfx_Contrast(cmd[1]) ;
014872  001005                          serout(ACK) ;
014873  001006                      endif
014874  001007                      cmdi := 0 ;
014875  001008                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
014876  001009                      nak0() ;
014877  001010                      cmdi := 0 ;
014878  001011                  endif
014879  001012              endif   // not unicode string
014880  001013          endif   // a character is available
014881  001014        
014882  001015        
014883  001016      // touch code processing
014884  001017        
014885  001018          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
014886  001019          ImageTouched := img_Touched(hndl,-1) ;
014887  001020          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
014888  001021              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
014889  001022                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
014890  001023              endif
014891  001024              if (TouchStatus != TOUCH_RELEASED)        // if not released
014892  001025                  if (oldn != -1)
014893  001026                      ImageTouched := oldn ;
014894  001027                  else
014895  001028                      if (oldn != ImageTouched)
014896  001029                  oldn := ImageTouched ;
014897  001030                          TouchStatus := TOUCH_PRESSED ;
014898  001031                      endif
014899  001032                  endif
014900  001033                  TouchXpos  := touch_Get(TOUCH_GETX);
014901  001034                  TouchYpos  := touch_Get(TOUCH_GETY);
014902  001035                  TouchState := Ofs_IPD_DOWN ;
014903  001036              else
014904  001037                  ImageTouched := oldn ;                     // simulate release of what we touched
014905  001038                  oldn := -1 ;                    // prevent double release
014906  001039                  TouchState := Ofs_IPD_RELEASE ;
014907  001040              endif
014908  001041              if (ImageTouched != -1)
014909  001042                          CurInputData := InputControls[ImageTouched] + InputData;
014910  001043                          InputType := *(CurInputData) ;
014911  001044                          i := InputType ;
014912  001045                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
014913  001046                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
014914  001047              endif
014915  001048          endif
014916  001049   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
014917  001050        
014918  001051          sys_EventsResume() ;
014919  001052      forever
014920  001053        
014921  001054  cDipswitch:
014922  001055        
014923  001056  cKnob:
014924  001057        
014925  001058  cRockerswitch:
014926  001059        
014927  001060  cRotaryswitch:
014928  001061        
014929  001062  cSlider:
014930  001063  cTrackbar:
014931  001064        
014932  001065  c4DButton:
014933  001066  cUserButton:
014934  001067      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
014935  001068      goto gbutton ;
014936  001069  cWinbutton:
014937  001070      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
014938  001071  gbutton:
014939  001072      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
014940  001073      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
014941  001074          if (TouchStatus == TOUCH_RELEASED)
014942  001075              i &= 0xfffe ;
014943  001076              TouchState == Ofs_IPD_DOWN ;
014944  001077          else
014945  001078              i |= 1 ;
014946  001079              TouchState == Ofs_IPD_RELEASE ;
014947  001080          endif
014948  001081      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
014949  001082          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
014950  001083              if ((i & 3) == 3)
014951  001084                  i &= 0xfffc ;
014952  001085              else
014953  001086                  i++ ;
014954  001087              endif
014955  001088          else
014956  001089              i |= 1 ;                                      // make down regardless of current state
014957  001090          endif
014958  001091      else                        // group action, up all other buttons on touch press, reports 0 for button down
014959  001092          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
014960  001093              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
014961  001094          endif
014962  001095          i := (i & 0xfffc) | 2 ;
014963  001096      endif
014964  001097        
014965  001098      UpdateObjects(i) ;
014966  001099  endsub ;
014967  001100        
014968  001101  cAniButton:
014969  001102        
014970  001103  cColorPicker:
014971  001104        
014972  001105  endfunc
014973  001106  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 742 file:RepRap_Touchv1.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 678 file:RepRap_Touchv1.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       11682  0x00002da2 (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 150)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (usage 6)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS    2803  0x00000af3 (const ??? 0)  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  378  0x0000017a (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 33)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                298  0x0000012a (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         294  0x00000126 (mem) word (global)  (usage 27)
CurrentForm                          284  0x0000011c (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (usage 6)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (usage 3)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       11050  0x00002b2a (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 21)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (usage 72)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                        8391  0x000020c7FormBGcolors                        8391  0x000020c7 (mem) word[36] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                          79  0x0000004fFormEndIndex                          79  0x0000004f (mem) word[36] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[36] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[53] (global)  (usage 231)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             214  0x000000d6 (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm0                                 0  0x00000000 (const ??? 0)  (usage 3)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                              124  0x0000007c (const ??? 0)  (usage 3)
iForm2                                 4  0x00000004 (const ??? 0)  (usage 3)
iForm28                              134  0x00000086 (const ??? 0)  (usage 3)
iForm29                              139  0x0000008b (const ??? 0)  (usage 3)
iForm4                                10  0x0000000a (const ??? 0)  (usage 3)
iForm5                                16  0x00000010 (const ??? 0)  (usage 3)
iForm9                                47  0x0000002f (const ??? 0)  (usage 3)
iiLeddigits0                          36  0x00000024 (const ??? 0)  (not used)
iiLeddigits1                          38  0x00000026 (const ??? 0)  (not used)
iiLeddigits18                         58  0x0000003a (const ??? 0)  (not used)
iiLeddigits19                         70  0x00000046 (const ??? 0)  (not used)
iiLeddigits2                          40  0x00000028 (const ??? 0)  (not used)
iiLeddigits20                         78  0x0000004e (const ??? 0)  (not used)
iiLeddigits21                         84  0x00000054 (const ??? 0)  (not used)
iLeddigits0                           35  0x00000023 (const ??? 0)  (usage 3)
iLeddigits1                           37  0x00000025 (const ??? 0)  (usage 3)
iLeddigits18                          57  0x00000039 (const ??? 0)  (usage 3)
iLeddigits19                          69  0x00000045 (const ??? 0)  (usage 3)
iLeddigits2                           39  0x00000027 (const ??? 0)  (usage 3)
iLeddigits20                          77  0x0000004d (const ??? 0)  (usage 3)
iLeddigits21                          83  0x00000053 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        151  0x00000097InputControls                        151  0x00000097 (mem) word[175] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
InputCS                              538  0x0000021a (mem) word (global)  (usage 21)
InputData                            501  0x000001f5InputData                            501  0x000001f5 (mem) word[2948] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 30)
InputType                            290  0x00000122 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                         103  0x00000067 (const ??? 0)  (usage 3)
iStatictext1                          41  0x00000029 (const ??? 0)  (usage 3)
iStatictext15                        113  0x00000071 (const ??? 0)  (usage 3)
iStatictext2                          42  0x0000002a (const ??? 0)  (usage 3)
iStatictext20                         62  0x0000003e (const ??? 0)  (usage 3)
iStatictext21                         71  0x00000047 (const ??? 0)  (usage 3)
iStatictext22                         79  0x0000004f (const ??? 0)  (usage 3)
iStatictext24                        105  0x00000069 (const ??? 0)  (usage 3)
iStatictext25                        106  0x0000006a (const ??? 0)  (usage 3)
iStatictext26                        107  0x0000006b (const ??? 0)  (usage 3)
iStatictext27                        108  0x0000006c (const ??? 0)  (usage 3)
iStatictext3                         154  0x0000009a (const ??? 0)  (usage 3)
iStatictext4                          43  0x0000002b (const ??? 0)  (usage 3)
iStatictext5                         165  0x000000a5 (const ??? 0)  (usage 3)
iStatictext6                         169  0x000000a9 (const ??? 0)  (usage 3)
iStatictext7                         170  0x000000aa (const ??? 0)  (usage 3)
iStatictext8                         171  0x000000ab (const ??? 0)  (usage 3)
iStrings0                           6397  0x000018fdiStrings0                           6397  0x000018fd (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings1                           6423  0x00001917iStrings1                           6423  0x00001917 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings10                          6657  0x00001a01iStrings10                          6657  0x00001a01 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings11                          6683  0x00001a1biStrings11                          6683  0x00001a1b (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings12                          6709  0x00001a35iStrings12                          6709  0x00001a35 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings13                          6735  0x00001a4fiStrings13                          6735  0x00001a4f (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings14                          6761  0x00001a69iStrings14                          6761  0x00001a69 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings15                          6787  0x00001a83iStrings15                          6787  0x00001a83 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings16                          6813  0x00001a9diStrings16                          6813  0x00001a9d (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings17                          6839  0x00001ab7iStrings17                          6839  0x00001ab7 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings18                          6865  0x00001ad1iStrings18                          6865  0x00001ad1 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings19                          6891  0x00001aebiStrings19                          6891  0x00001aeb (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings2                           6449  0x00001931iStrings2                           6449  0x00001931 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings20                          6917  0x00001b05iStrings20                          6917  0x00001b05 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings21                          6943  0x00001b1fiStrings21                          6943  0x00001b1f (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings22                          6969  0x00001b39iStrings22                          6969  0x00001b39 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings23                          6995  0x00001b53iStrings23                          6995  0x00001b53 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings24                          7021  0x00001b6diStrings24                          7021  0x00001b6d (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings25                          7047  0x00001b87iStrings25                          7047  0x00001b87 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings26                          7073  0x00001ba1iStrings26                          7073  0x00001ba1 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings27                          7099  0x00001bbbiStrings27                          7099  0x00001bbb (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings28                          7125  0x00001bd5iStrings28                          7125  0x00001bd5 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings29                          7151  0x00001befiStrings29                          7151  0x00001bef (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings3                           6475  0x0000194biStrings3                           6475  0x0000194b (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings30                          7177  0x00001c09iStrings30                          7177  0x00001c09 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings31                          7203  0x00001c23iStrings31                          7203  0x00001c23 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings32                          7229  0x00001c3diStrings32                          7229  0x00001c3d (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings33                          7255  0x00001c57iStrings33                          7255  0x00001c57 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings34                          7281  0x00001c71iStrings34                          7281  0x00001c71 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings35                          7307  0x00001c8biStrings35                          7307  0x00001c8b (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings36                          7333  0x00001ca5iStrings36                          7333  0x00001ca5 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings37                          7359  0x00001cbfiStrings37                          7359  0x00001cbf (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings38                          7385  0x00001cd9iStrings38                          7385  0x00001cd9 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings39                          7411  0x00001cf3iStrings39                          7411  0x00001cf3 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings4                           6501  0x00001965iStrings4                           6501  0x00001965 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings40                          7437  0x00001d0diStrings40                          7437  0x00001d0d (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings41                          7463  0x00001d27iStrings41                          7463  0x00001d27 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings42                          7489  0x00001d41iStrings42                          7489  0x00001d41 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings43                          7515  0x00001d5biStrings43                          7515  0x00001d5b (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings44                          7541  0x00001d75iStrings44                          7541  0x00001d75 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings45                          7567  0x00001d8fiStrings45                          7567  0x00001d8f (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings46                          7593  0x00001da9iStrings46                          7593  0x00001da9 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings47                          7619  0x00001dc3iStrings47                          7619  0x00001dc3 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings48                          7645  0x00001dddiStrings48                          7645  0x00001ddd (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings49                          7671  0x00001df7iStrings49                          7671  0x00001df7 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings5                           6527  0x0000197fiStrings5                           6527  0x0000197f (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings50                          7697  0x00001e11iStrings50                          7697  0x00001e11 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings51                          7723  0x00001e2biStrings51                          7723  0x00001e2b (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings52                          7749  0x00001e45iStrings52                          7749  0x00001e45 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings6                           6553  0x00001999iStrings6                           6553  0x00001999 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings7                           6579  0x000019b3iStrings7                           6579  0x000019b3 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings8                           6605  0x000019cdiStrings8                           6605  0x000019cd (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings9                           6631  0x000019e7iStrings9                           6631  0x000019e7 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          19  0x00000013 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                         15  0x0000000f (const ??? 0)  (usage 3)
iUserbutton100                       122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton101                       123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton102                       155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton103                       156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton104                       157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton105                       158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton106                       159  0x0000009f (const ??? 0)  (usage 3)
iUserbutton107                       160  0x000000a0 (const ??? 0)  (usage 3)
iUserbutton108                       161  0x000000a1 (const ??? 0)  (usage 3)
iUserbutton109                       162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton11                        135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton110                       163  0x000000a3 (const ??? 0)  (usage 3)
iUserbutton111                       164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton112                       166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton113                       167  0x000000a7 (const ??? 0)  (usage 3)
iUserbutton114                       168  0x000000a8 (const ??? 0)  (usage 3)
iUserbutton115                       172  0x000000ac (const ??? 0)  (usage 3)
iUserbutton116                       173  0x000000ad (const ??? 0)  (usage 3)
iUserbutton117                       174  0x000000ae (const ??? 0)  (usage 3)
iUserbutton118                       102  0x00000066 (const ??? 0)  (usage 3)
iUserbutton12                         17  0x00000011 (const ??? 0)  (usage 3)
iUserbutton13                         18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton14                          7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton16                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton17                         24  0x00000018 (const ??? 0)  (usage 3)
iUserbutton18                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton19                         49  0x00000031 (const ??? 0)  (usage 3)
iUserbutton2                          20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton20                        112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton21                        114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton22                        115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton23                        125  0x0000007d (const ??? 0)  (usage 3)
iUserbutton24                        126  0x0000007e (const ??? 0)  (usage 3)
iUserbutton25                        127  0x0000007f (const ??? 0)  (usage 3)
iUserbutton26                         51  0x00000033 (const ??? 0)  (usage 3)
iUserbutton27                         52  0x00000034 (const ??? 0)  (usage 3)
iUserbutton28                         53  0x00000035 (const ??? 0)  (usage 3)
iUserbutton29                         54  0x00000036 (const ??? 0)  (usage 3)
iUserbutton3                          34  0x00000022 (const ??? 0)  (usage 3)
iUserbutton30                         55  0x00000037 (const ??? 0)  (usage 3)
iUserbutton31                         56  0x00000038 (const ??? 0)  (usage 3)
iUserbutton32                         59  0x0000003b (const ??? 0)  (usage 3)
iUserbutton33                         60  0x0000003c (const ??? 0)  (usage 3)
iUserbutton34                         61  0x0000003d (const ??? 0)  (usage 3)
iUserbutton35                         63  0x0000003f (const ??? 0)  (usage 3)
iUserbutton36                         64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton37                         65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton38                         68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton39                         66  0x00000042 (const ??? 0)  (usage 3)
iUserbutton4                           5  0x00000005 (const ??? 0)  (usage 3)
iUserbutton40                         67  0x00000043 (const ??? 0)  (usage 3)
iUserbutton41                         72  0x00000048 (const ??? 0)  (usage 3)
iUserbutton42                         73  0x00000049 (const ??? 0)  (usage 3)
iUserbutton43                         74  0x0000004a (const ??? 0)  (usage 3)
iUserbutton44                         80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton45                         85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton46                         75  0x0000004b (const ??? 0)  (usage 3)
iUserbutton47                         81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton48                         76  0x0000004c (const ??? 0)  (usage 3)
iUserbutton49                         82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton5                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton50                         21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton51                        116  0x00000074 (const ??? 0)  (usage 3)
iUserbutton52                         87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton53                         91  0x0000005b (const ??? 0)  (usage 3)
iUserbutton54                         22  0x00000016 (const ??? 0)  (usage 3)
iUserbutton55                         93  0x0000005d (const ??? 0)  (usage 3)
iUserbutton56                         94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton57                         95  0x0000005f (const ??? 0)  (usage 3)
iUserbutton58                         96  0x00000060 (const ??? 0)  (usage 3)
iUserbutton59                         97  0x00000061 (const ??? 0)  (usage 3)
iUserbutton6                          11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton60                         98  0x00000062 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                         23  0x00000017 (const ??? 0)  (usage 3)
iUserbutton63                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton64                         25  0x00000019 (const ??? 0)  (usage 3)
iUserbutton65                         26  0x0000001a (const ??? 0)  (usage 3)
iUserbutton66                         99  0x00000063 (const ??? 0)  (usage 3)
iUserbutton67                        100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton68                        101  0x00000065 (const ??? 0)  (usage 3)
iUserbutton69                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton7                          12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton70                        109  0x0000006d (const ??? 0)  (usage 3)
iUserbutton71                        110  0x0000006e (const ??? 0)  (usage 3)
iUserbutton72                        117  0x00000075 (const ??? 0)  (usage 3)
iUserbutton73                        128  0x00000080 (const ??? 0)  (usage 3)
iUserbutton74                        111  0x0000006f (const ??? 0)  (usage 3)
iUserbutton75                         88  0x00000058 (const ??? 0)  (usage 3)
iUserbutton76                         89  0x00000059 (const ??? 0)  (usage 3)
iUserbutton77                         90  0x0000005a (const ??? 0)  (usage 3)
iUserbutton78                        129  0x00000081 (const ??? 0)  (usage 3)
iUserbutton79                        130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton8                          13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton80                        131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton81                        132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton82                        133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton83                        136  0x00000088 (const ??? 0)  (usage 3)
iUserbutton84                        140  0x0000008c (const ??? 0)  (usage 3)
iUserbutton85                        141  0x0000008d (const ??? 0)  (usage 3)
iUserbutton86                        142  0x0000008e (const ??? 0)  (usage 3)
iUserbutton87                        143  0x0000008f (const ??? 0)  (usage 3)
iUserbutton88                        144  0x00000090 (const ??? 0)  (usage 3)
iUserbutton89                        145  0x00000091 (const ??? 0)  (usage 3)
iUserbutton9                          14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton90                        146  0x00000092 (const ??? 0)  (usage 3)
iUserbutton91                        147  0x00000093 (const ??? 0)  (usage 3)
iUserbutton92                        138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton93                        149  0x00000095 (const ??? 0)  (usage 3)
iUserbutton94                        150  0x00000096 (const ??? 0)  (usage 3)
iUserbutton95                        153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton96                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton97                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton98                        120  0x00000078 (const ??? 0)  (usage 3)
iUserbutton99                        121  0x00000079 (const ??? 0)  (usage 3)
iUserimages0                         137  0x00000089 (const ??? 0)  (usage 3)
iUserimages1                          86  0x00000056 (const ??? 0)  (usage 3)
iUserimages2                          92  0x0000005c (const ??? 0)  (usage 3)
iUserimages3                         148  0x00000094 (const ??? 0)  (usage 3)
iUserimages4                         151  0x00000097 (const ??? 0)  (usage 3)
iUserimages5                         152  0x00000098 (const ??? 0)  (usage 3)
iVideo0                                9  0x00000009 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton1                           28  0x0000001c (const ??? 0)  (usage 3)
iWinbutton2                           29  0x0000001d (const ??? 0)  (usage 3)
iWinbutton3                           30  0x0000001e (const ??? 0)  (usage 3)
iWinbutton4                           31  0x0000001f (const ??? 0)  (usage 3)
iWinbutton5                           45  0x0000002d (const ??? 0)  (usage 3)
iWinbutton6                           46  0x0000002e (const ??? 0)  (usage 3)
iWinbutton7                           32  0x00000020 (const ??? 0)  (usage 3)
iWinbutton8                           33  0x00000021 (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 8463  0x0000210fkKeyboardKeystrokes                 8463  0x0000210f (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   12028  0x00002efc (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                                9061  0x00002365 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               13150  0x0000335e (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              268  0x0000010c (const dword)  (usage 3)
nObjects                             175  0x000000af (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              53  0x00000035 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                          8139  0x00001fcbo4Dbuttons                          8139  0x00001fcb (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAngularmeters                      7807  0x00001e7foAngularmeters                      7807  0x00001e7f (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAniButtons                         8141  0x00001fcdoAniButtons                         8141  0x00001fcd (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       8143  0x00001fcfoColorPickers                       8143  0x00001fcf (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCoolgauges                         7809  0x00001e81oCoolgauges                         7809  0x00001e81 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCustomdigitss                      7811  0x00001e83oCustomdigitss                      7811  0x00001e83 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oDipSwitchs                         7775  0x00001e5foDipSwitchs                         7775  0x00001e5f (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              7813  0x00001e85oForms                              7813  0x00001e85 (mem) word[37] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 15)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                             7887  0x00001ecfoGauges                             7887  0x00001ecf (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGSliders                           7783  0x00001e67oGSliders                           7783  0x00001e67 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oImages                             7889  0x00001ed1oImages                             7889  0x00001ed1 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKeyboards                          7891  0x00001ed3oKeyboards                          7891  0x00001ed3 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKnobs                              7777  0x00001e61oKnobs                              7777  0x00001e61 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLedDigitsn                         8467  0x00002113oLedDigitsn                         8467  0x00002113 (mem) word[110] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
oLeddigitss                         7895  0x00001ed7oLeddigitss                         7895  0x00001ed7 (mem) word[23] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
oLeds                               7893  0x00001ed5oLeds                               7893  0x00001ed5 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             7941  0x00001f05oMeters                             7941  0x00001f05 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             216  0x000000d8 (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                          8137  0x00001fc9oPinInputs                          8137  0x00001fc9 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oPinOutputs                         8389  0x000020c5oPinOutputs                         8389  0x000020c5 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      7779  0x00001e63oRockerSwitchs                      7779  0x00001e63 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oRotarySwitchs                      7781  0x00001e65oRotarySwitchs                      7781  0x00001e65 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oScopes                             8119  0x00001fb7oScopes                             8119  0x00001fb7 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
oSoundss                            8387  0x000020c3oSoundss                            8387  0x000020c3 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oSpectrums                          8117  0x00001fb5oSpectrums                          8117  0x00001fb5 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStaticTexts                        8059  0x00001f7boStaticTexts                        8059  0x00001f7b (mem) word[29] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStringss                           7943  0x00001f07oStringss                           7943  0x00001f07 (mem) word[54] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 93)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 333)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              8121  0x00001fb9oTanks                              8121  0x00001fb9 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oThermometers                       8051  0x00001f73oThermometers                       8051  0x00001f73 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTimers                             8385  0x000020c1oTimers                             8385  0x000020c1 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTrackbars                          7785  0x00001e69oTrackbars                          7785  0x00001e69 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserButtons                        8145  0x00001fd1oUserButtons                        8145  0x00001fd1 (mem) word[120] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
oUserImagess                        8123  0x00001fbboUserImagess                        8123  0x00001fbb (mem) word[7] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserleds                           8053  0x00001f75oUserleds                           8053  0x00001f75 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             540  0x0000021c (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                             8055  0x00001f77oVideos                             8055  0x00001f77 (mem) word[2] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                         7787  0x00001e6boWinButtons                         7787  0x00001e6b (mem) word[10] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          296  0x00000128 (mem) word (global)  (usage 18)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       13185  0x00003381 (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         12897  0x00003261 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                   8465  0x00002111rKeyboardRoutines                   8465  0x00002111 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         13083  0x0000331b (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           13166  0x0000336e (User func) args[1] r=0  (usage 15)
seroutOcs                          13133  0x0000334d (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           7  0x00000007 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      3072  0x00000c00 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                         15  0x0000000f (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    17408  0x00004400 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         33  0x00000021 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         19  0x00000013 (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                          8  0x00000008 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                    23040  0x00005a00 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                         23  0x00000017 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                         24  0x00000018 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings16Count                         1  0x00000001 (const dword)  (not used)
Strings16Size                         31  0x0000001f (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     6656  0x00001a00 (const dword)  (usage 3)
Strings17Count                         1  0x00000001 (const dword)  (not used)
Strings17Size                         33  0x00000021 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings18Count                         1  0x00000001 (const dword)  (not used)
Strings18Size                         32  0x00000020 (const dword)  (usage 3)
Strings18StartH                        0  0x00000000 (const dword)  (usage 3)
Strings18StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                         29  0x0000001d (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings1Count                          0  0x00000000 (const dword)  (not used)
Strings1Size                           1  0x00000001 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                         0  0x00000000 (const dword)  (usage 3)
Strings20Count                         1  0x00000001 (const dword)  (not used)
Strings20Size                         25  0x00000019 (const dword)  (usage 3)
Strings20StartH                        0  0x00000000 (const dword)  (usage 3)
Strings20StartL                     1024  0x00000400 (const dword)  (usage 3)
Strings21Count                         1  0x00000001 (const dword)  (not used)
Strings21Size                         25  0x00000019 (const dword)  (usage 3)
Strings21StartH                        0  0x00000000 (const dword)  (usage 3)
Strings21StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings22Count                         1  0x00000001 (const dword)  (not used)
Strings22Size                         20  0x00000014 (const dword)  (usage 3)
Strings22StartH                        0  0x00000000 (const dword)  (usage 3)
Strings22StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings23Count                         1  0x00000001 (const dword)  (not used)
Strings23Size                         16  0x00000010 (const dword)  (usage 3)
Strings23StartH                        0  0x00000000 (const dword)  (usage 3)
Strings23StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings24Count                         1  0x00000001 (const dword)  (not used)
Strings24Size                         26  0x0000001a (const dword)  (usage 3)
Strings24StartH                        0  0x00000000 (const dword)  (usage 3)
Strings24StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings25Count                         1  0x00000001 (const dword)  (not used)
Strings25Size                         10  0x0000000a (const dword)  (usage 3)
Strings25StartH                        0  0x00000000 (const dword)  (usage 3)
Strings25StartL                    11776  0x00002e00 (const dword)  (usage 3)
Strings26Count                         1  0x00000001 (const dword)  (not used)
Strings26Size                         10  0x0000000a (const dword)  (usage 3)
Strings26StartH                        0  0x00000000 (const dword)  (usage 3)
Strings26StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings27Count                         1  0x00000001 (const dword)  (not used)
Strings27Size                         11  0x0000000b (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings28Count                         1  0x00000001 (const dword)  (not used)
Strings28Size                         32  0x00000020 (const dword)  (usage 3)
Strings28StartH                        0  0x00000000 (const dword)  (usage 3)
Strings28StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                         32  0x00000020 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    14336  0x00003800 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      2560  0x00000a00 (const dword)  (usage 3)
Strings30Count                         0  0x00000000 (const dword)  (not used)
Strings30Size                          1  0x00000001 (const dword)  (usage 3)
Strings30StartH                        0  0x00000000 (const dword)  (usage 3)
Strings30StartL                    14848  0x00003a00 (const dword)  (usage 3)
Strings31Count                         0  0x00000000 (const dword)  (not used)
Strings31Size                          1  0x00000001 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    15360  0x00003c00 (const dword)  (usage 3)
Strings32Count                         0  0x00000000 (const dword)  (not used)
Strings32Size                          1  0x00000001 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings33Count                         1  0x00000001 (const dword)  (not used)
Strings33Size                         10  0x0000000a (const dword)  (usage 3)
Strings33StartH                        0  0x00000000 (const dword)  (usage 3)
Strings33StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings34Count                         0  0x00000000 (const dword)  (not used)
Strings34Size                          1  0x00000001 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings35Count                         1  0x00000001 (const dword)  (not used)
Strings35Size                         26  0x0000001a (const dword)  (usage 3)
Strings35StartH                        0  0x00000000 (const dword)  (usage 3)
Strings35StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings36Count                         0  0x00000000 (const dword)  (not used)
Strings36Size                          1  0x00000001 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings37Count                         0  0x00000000 (const dword)  (not used)
Strings37Size                          1  0x00000001 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings38Count                         0  0x00000000 (const dword)  (not used)
Strings38Size                          1  0x00000001 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                    18944  0x00004a00 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                    19456  0x00004c00 (const dword)  (usage 3)
Strings3Count                          1  0x00000001 (const dword)  (not used)
Strings3Size                          18  0x00000012 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                       512  0x00000200 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                          7  0x00000007 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                    19968  0x00004e00 (const dword)  (usage 3)
Strings41Count                         1  0x00000001 (const dword)  (not used)
Strings41Size                          7  0x00000007 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                    20480  0x00005000 (const dword)  (usage 3)
Strings42Count                         1  0x00000001 (const dword)  (not used)
Strings42Size                          7  0x00000007 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                    20992  0x00005200 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    21504  0x00005400 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    22016  0x00005600 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    22528  0x00005800 (const dword)  (usage 3)
Strings46Count                         1  0x00000001 (const dword)  (not used)
Strings46Size                          8  0x00000008 (const dword)  (usage 3)
Strings46StartH                        0  0x00000000 (const dword)  (usage 3)
Strings46StartL                    24064  0x00005e00 (const dword)  (usage 3)
Strings47Count                         1  0x00000001 (const dword)  (not used)
Strings47Size                          8  0x00000008 (const dword)  (usage 3)
Strings47StartH                        0  0x00000000 (const dword)  (usage 3)
Strings47StartL                    25088  0x00006200 (const dword)  (usage 3)
Strings48Count                         1  0x00000001 (const dword)  (not used)
Strings48Size                         10  0x0000000a (const dword)  (usage 3)
Strings48StartH                        0  0x00000000 (const dword)  (usage 3)
Strings48StartL                    23552  0x00005c00 (const dword)  (usage 3)
Strings49Count                         1  0x00000001 (const dword)  (not used)
Strings49Size                         10  0x0000000a (const dword)  (usage 3)
Strings49StartH                        0  0x00000000 (const dword)  (usage 3)
Strings49StartL                    24576  0x00006000 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings50Count                         1  0x00000001 (const dword)  (not used)
Strings50Size                         10  0x0000000a (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    25600  0x00006400 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    26112  0x00006600 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    26624  0x00006800 (const dword)  (usage 3)
Strings5Count                          1  0x00000001 (const dword)  (not used)
Strings5Size                          27  0x0000001b (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                     13312  0x00003400 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          31  0x0000001f (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      2048  0x00000800 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                     17920  0x00004600 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                     18432  0x00004800 (const dword)  (usage 3)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      3584  0x00000e00 (const dword)  (usage 3)
stringsCV                            108  0x0000006c (mem) word[53] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           292  0x00000124 (mem) word (global)  (usage 24)
TouchXpos                            286  0x0000011e (mem) word (global)  (usage 12)
TouchYpos                            288  0x00000120 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     12342  0x00003036 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 372)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 45)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      11051  0x00002b2b (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 153)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        12542  0x000030fe (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
