file I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318        
003998  004319  //------------------------------------------------------------------------------
003999  004320  // FILEIO Error Code Constants
004000  004321  //------------------------------------------------------------------------------
004001  004322  #CONST
004002  004348  #END
004003  004349        
004004  004350  //------------------------------------------------------------------------------
004005  004351  // DISK struct offsets
004006  004352  //------------------------------------------------------------------------------
004007  004353  #CONST
004008  004370  #END
004009  004371        
004010  004372  //------------------------------------------------------------------------------
004011  004373  // FILE struct offsets
004012  004374  //------------------------------------------------------------------------------
004013  004375  #CONST
004014  004394  #END
004015  004395        
004016  004396        
004017  004397  //------------------------------------------------------------------//
004018  004398  //        Sound Class Services
004019  004399  //------------------------------------------------------------------//
004020  004400        
004021  004401  func snd_Volume("var"), 0;
004022  004402  // Syntax: snd_Volume("var");
004023  004403  // Usage : snd_Volume(30);
004024  004404  // Notes : set sound playback volume.  Var must
004025  004405  //       : be in the range from 8 (min volume)
004026  004406  //       : to 127 (max volume). If var is less
004027  004407  //       : than 8 volume is set to 8, and if
004028  004408  //       : var > 127 it is set to 127.
004029  004409        
004030  004410  func snd_Pitch("pitch"), 1;
004031  004411  // func snd_Pitch("freq"), 1;
004032  004412  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004033  004413  // Notes : sets the samples playback rate to a different frequency
004034  004414  //       : The minimum value is 4khz
004035  004415  //       : Setting the pitch to zero restores the original sample rate
004036  004416  //       : Return value is the samples original sample rate.
004037  004417        
004038  004418  func snd_BufSize("var"), 0;
004039  004419  // Syntax: snd_BufSize("var");
004040  004420  // Usage : snd_BufSize(2);
004041  004421  // Notes : specify the a memory chunk size for the wavefile buffer.
004042  004422  //       : default size 1024 bytes.
004043  004423  //       : 0 = 1024 bytes (default)
004044  004424  //       : 1 = 2048 bytes
004045  004425  //       : 2 = 4096 bytes
004046  004426  //       : 3 = 8192 bytes
004047  004427        
004048  004428  func snd_Stop(), 0;
004049  004429  // Syntax: snd_Stop();
004050  004430  // Usage : snd_Stop();
004051  004431  // Notes : stop any sound that is playing, releasing
004052  004432  //       : buffers and closes any open wav file.
004053  004433        
004054  004434  func snd_Pause(), 0;
004055  004435  // Syntax: snd_Pause();
004056  004436  // Usage : snd_Pause();
004057  004437  // Notes : pauses any sound that is playing, does nothing
004058  004438  //       : until sound is resumed with snd_Continue().
004059  004439  //       : The sample cam be terminated with snd_Stop.
004060  004440  //       : buffers and closes any open wav file.
004061  004441        
004062  004442  func snd_Continue(), 0;
004063  004443  // Syntax: snd_Continue();
004064  004444  // Usage : snd_Continue();
004065  004445  // Notes : resume any sound that is paused by snd_Pause.
004066  004446        
004067  004447  func snd_Playing(), 1;
004068  004448  // Syntax: snd_Playing();
004069  004449  // Usage : r := snd_Playing();
004070  004450  // Notes : returns 0 if sound has finished playing,
004071  004451  //       : else return number of 512 byte blocks to go.
004072  004452        
004073  004453  func snd_Freq("Freq", "Duration"), 1;
004074  004454  // Syntax: snd_Freq("Freq", "Duration");
004075  004455  // Usage : r := snd_Freq(1000, 2000);
004076  004456  // Notes : Returns 0 if note cannot be played because a wav file is playing
004077  004457  //       : else return True.
004078  004458  //       : Minimum Freq is 20
004079  004459  //       : This will produce a pure Square wave and is designed for driving
004080  004460  //       : Piezo transducers which require this sort of drive. It can also be
004081  004461  //       : used to drive the amp on displays with audio.
004082  004462        
004083  004463        
004084  004464  func __reserved60(), 0; // do not remove
004085  004465  func __reserved61(), 0; // do not remove
004086  004466  func __reserved62(), 0; // do not remove
004087  004467        
004088  004468  //=========================================================================================================
004089  004469  // String functions
004090  004470  //=========================================================================================================
004091  004471        
004092  004472  func str_Ptr("&var"), 1;
004093  004473  // Syntax: str_Ptr(&var);
004094  004474  // Usage : p := str_Ptr(&var);
004095  004475  // Notes : return a byte pointer to a word region
004096  004476        
004097  004477  func str_GetD("&ptr", "&var"), 1;
004098  004478  // Syntax: str_GetD(&ptr, &var);
004099  004479  // Usage : ok := str_GetD(&ptr, &var);
004100  004480  // Notes : convert number in a string to DWORD ( myvar[2] )
004101  004481  //       : returns true if function succeeds, advancing ptr
004102  004482        
004103  004483  func str_GetW("&ptr", "&var"), 1;
004104  004484  // Syntax: str_GetW(&ptr, &var);
004105  004485  // Usage : ok := str_GetW(&ptr, &var);
004106  004486  // Notes : convert number in a string to WORD ( myvar )
004107  004487  //       : returns true if function succeeds, advancing ptr
004108  004488        
004109  004489  func str_GetHexW("&ptr", "&var"), 1;
004110  004490  // Syntax: str_GetHexW(&ptr, &var);
004111  004491  // Usage : ok := str_GetHexW(&ptr, &var);
004112  004492  // Notes : convert HEX number in a string to WORD ( myvar )
004113  004493  //       : returns true if function succeeds, advancing ptr
004114  004494        
004115  004495  func str_GetC("&ptr", "&var"), 1;
004116  004496  // Syntax: str_GetC(&ptr, &var);
004117  004497  // Usage : ok := str_GetC(&ptr, &var);
004118  004498  // Notes : get a valid ascii char in a string to WORD ( myvar )
004119  004499  //       : returns true if function succeeds, advancing ptr
004120  004500        
004121  004501  func str_GetByte("ptr"), 1;
004122  004502  // Syntax: str_GetByte(ptr);
004123  004503  // Usage : myvar := str_GetByte(ptr);
004124  004504  // Notes : get a byte to myvar
004125  004505  //       : returns value
004126  004506        
004127  004507  func str_GetWord("ptr"), 1;
004128  004508  // Syntax: GetWord(ptr);
004129  004509  // Usage : GetWord(ptr);
004130  004510  // Notes : get a word to myvar
004131  004511  //       : returns value
004132  004512        
004133  004513  func str_PutByte("ptr","val"), 0;
004134  004514  // Syntax: str_PutByte(ptr);
004135  004515  // Usage : myvar := str_PutByte(ptr);
004136  004516  // Notes : put a byte at ptr
004137  004517  //       : returns value
004138  004518        
004139  004519  func str_PutWord("ptr","val"), 0;
004140  004520  // Syntax: str_PutWord("ptr","val");
004141  004521  // Usage : str_PutWord(p,100);
004142  004522  // Notes : put word 100 at current pointer location
004143  004523  //       : returns value
004144  004524        
004145  004525  func str_Match("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Match(&ptr, *str);
004147  004527  // Usage : r := str_Match(&p, "hello");
004148  004528  // Notes : Case sensitive match
004149  004529  //       : returns true if function succeded, andvancing pointer to position past
004150  004530  //       : the matched item. Note that any whitespace characters are skipped
004151  004531  //       : in the source string prior to the test.
004152  004532        
004153  004533  func str_MatchI("&ptr", "*str"), 1;
004154  004534  // Syntax: str_MatchI(&ptr, *str);
004155  004535  // Usage : r := str_MatchI(&p, "hello");
004156  004536  // Notes : Case insensitive match
004157  004537  //       : returns true if function succeded, andvancing pointer to position past
004158  004538  //       : the matched item. Note that any whitespace characters are skipped
004159  004539  //       : in the source string prior to the test.
004160  004540        
004161  004541  func str_Find("&ptr", "*str"), 1;
004162  004542  // Syntax: str_Find(&ptr, *str);
004163  004543  // Usage : n := str_Find(&p, "hello");
004164  004544  // Notes : given the address of a pointer to a source string as the
004165  004545  //       : first argument, and a pointer to a test string as the second
004166  004546  //       : argument, attempt to find the position of the matching string
004167  004547  //       : in the source string. The test is performed with case sensitivity.
004168  004548  //       : return 0 if not found, else returns the address of the first
004169  004549  //       : character of the match. NB:- The source pointer is not altered.
004170  004550        
004171  004551  func str_FindI("&ptr", "*str"), 1;
004172  004552  // Syntax: str_Find(&ptr, *str);
004173  004553  // Usage : n := str_Find(&p, "hello");
004174  004554  // Notes : given the address of a pointer to a source string as the
004175  004555  //       : first argument, and a pointer to a test string as the second
004176  004556  //       : argument, attempt to find the position of the matching string
004177  004557  //       : in the source string. The test is performed with no case
004178  004558  //       : sensitivity, eg upper and lower case chars are accepted.
004179  004559  //       : return 0 if not found, else returns the address of the first
004180  004560  //       : character of the match. NB:- The source pointer is not altered.
004181  004561        
004182  004562  func str_Length("ptr"), 1;
004183  004563  // Syntax: str_Length(ptr);
004184  004564  // Usage : len := str_Ptr(mystring);
004185  004565  // Notes : return the length of a byte aligned string excluding terminator
004186  004566        
004187  004567  func str_Printf("&ptr", "*format"), 1;
004188  004568  // Syntax: str_Printf("&ptr", "*format");
004189  004569  // Usage : r := str_Printf(&p, "hello");
004190  004570  // Notes : refer to documentation
004191  004571  //       :
004192  004572        
004193  004573  func str_Cat("dest","src"), 1;
004194  004574  // Syntax: str_Append("&dest","&src");
004195  004575  // Usage : str_Append(&buf,"Hello");
004196  004576  // Notes : Appends a copy of the source string to the destination string.
004197  004577  //       : The terminating null character in destination is overwritten by
004198  004578  //       : the first character of source, and a new null-character is appended
004199  004579  //       : at the end of the new string formed by the concatenation of both in destination.
004200  004580  //       : returns destination.
004201  004581        
004202  004582  func str_CatN("dest","src","count"), 1;
004203  004583  // Syntax: str_Append("&dest","&src","count");
004204  004584  // Usage : str_Append(&buf,"Monday",3);
004205  004585  // Notes : Appends a copy of the source string to the destination string.
004206  004586  //       : The number of characters copied is limited by "count".
004207  004587  //       : The terminating null character in destination is overwritten by
004208  004588  //       : the first character of source, and a new null-character is appended
004209  004589  //       : at the end of the new string formed by the concatenation of both in destination.
004210  004590  //       : returns destination.
004211  004591        
004212  004592        
004213  004593  func str_ByteMove("src", "dest", "count"), 1;
004214  004594  // Syntax   : str_ByteMove(src, dest, bytecount);
004215  004595  // Input    : STR *source points to byte aligned source.
004216  004596  //          : STR *dest   points to byte aligned destination.
004217  004597  //          : VAR count   number of bytes to transfer.
004218  004598  // Usage    : nextpos := str_ByteMove(s, d, 100);
004219  004599  // Notes    : copy bytes from "src" to "dest", stopping only
004220  004600  //          : when "count" is exhausted.
004221  004601  //          : No terminator is appended, it is purely a
004222  004602  //          : byte copy, and any zeroes encountered will
004223  004603  //          : also be copied.
004224  004604  // Returns  : returns a pointer to the end of the destination
004225  004605  //          : (which is "dest" + "count")
004226  004606        
004227  004607        
004228  004608  func str_Copy("dest", "src"), 1;
004229  004609  // Syntax   : str_Copy(dest, src);
004230  004610  // Input    : STR *dest   points to byte aligned destination.
004231  004611  //          : STR *source points to byte aligned source.
004232  004612  // Usage    : nextplace := str_Copy(d, s);
004233  004613  // Notes    : copy a string from "src" to "dest", stopping only
004234  004614  //          : when the end of source string "src" is encountered
004235  004615  //          : (0x00 terminator).
004236  004616  //          : The terminator is always appended, even if "src" is
004237  004617  //          : an empty string.
004238  004618  // Returns  : returns a pointer to the 0x00 string terminator at
004239  004619  //          : end of "dest" (which is "dest" + str_Length(src); )
004240  004620        
004241  004621        
004242  004622  func str_CopyN("dest", "src", "count"), 1;
004243  004623  // Syntax   : str_CopyN(dest, src, bytecount);
004244  004624  // Input    : STR *dest   points to byte aligned destination.
004245  004625  //          : STR *source points to byte aligned source.
004246  004626  //          : VAR count   max number of chars to copy.
004247  004627  // Usage    : nextplace := str_CopyN(d, s, 100);
004248  004628  // Notes    : copy a string from "src" to "dest", stopping only
004249  004629  //          : when "count" is exhausted, or end of source
004250  004630  //          : string "str" is encountered (0x00 string terminator).
004251  004631  //          : The terminator is always appended, even if
004252  004632  //          : "count" is zero, or "src" is a null string.
004253  004633  // Returns  : returns a pointer to the 0x00 string terminator
004254  004634  //          : (which is "dest" + whatever was copied)
004255  004635        
004256  004636        
004257  004637  func __reserved63(), 0; // do not remove
004258  004638  func __reserved64(), 0; // do not remove
004259  004639  func __reserved65(), 0; // do not remove
004260  004640  func __reserved66(), 0; // do not remove
004261  004641        
004262  004642  //=========================================================================================================
004263  004643  // FLASH memory functions
004264  004644  //=========================================================================================================
004265  004645  func flash_GetByte("bank", "ptr"), 1;
004266  004646  // Syntax   : flash_GetByte(bank, ptr);
004267  004647  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004268  004648  // Notes    : Reads a single byte from any flash location.
004269  004649  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004270  004650  //          : which is the header signature for a valid program.
004271  004651  // Returns  : the byte value from the location
004272  004652        
004273  004653        
004274  004654  func flash_GetWord("bank", "ptr"), 1;
004275  004655  // Syntax   : flash_GetWord(bank, ptr);
004276  004656  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004277  004657  // Notes    : Reads a single word from any flash location.
004278  004658  //          : The pointer is byte aligned.
004279  004659  //          : If the bank is read protected, only the first word can be read
004280  004660  //          : which is the header signature for a valid program (0xAA55).
004281  004661  // Returns  : the byte value from the location
004282  004662        
004283  004663        
004284  004664  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004285  004665  // Syntax   : flash_Copy(bank, ptr);
004286  004666  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004287  004667  // Notes    : Copies bytes from any flash locations to a user buffer.
004288  004668  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004289  004669  //          : If the bank is read protected, 0 bytes will be read
004290  004670  //          : which is the header signature for a valid program (0xAA55).
004291  004671  // Returns  : the count of bytes transferred.
004292  004672        
004293  004673        
004294  004674  func flash_Run("bank"), 1;
004295  004675  // Syntax    : flash_Run(bankx);
004296  004676  // Usage     : res := flash_Run(FLASHBANK_5);
004297  004677  // Notes     : Restarts the processor, running code from the required
004298  004678  //           : flash bank. bank may be a variable, or one of the
004299  004679  //           : pre-defined constants:-
004300  004680  //           :    FLASHBANK_0                 //0x00
004301  004681  //           :    FLASHBANK_1                 //0x01
004302  004682  //           :    FLASHBANK_2                 //0x02
004303  004683  //           :    FLASHBANK_3                 //0x03
004304  004684  //           :    FLASHBANK_4                 //0x04
004305  004685  //           :    FLASHBANK_5                 //0x05
004306  004686  // returns    : This function should net return as it restarts
004307  004687  //        : the processor and jumps to the required bank,
004308  004688  //        : If it does return, -1 indicates incorrect/invalid
004309  004689  //        : bank number, and -2 indicates no valid program
004310  004690  //        : in the selected bank.
004311  004691        
004312  004692  func flash_Bank(), 1;
004313  004693  // Syntax   : flash_Bank();
004314  004694  // Usage    : myvar := flash_Bank();
004315  004695  // Notes    : Identifies which flash bank the code is running from.
004316  004696  // Returns  : The FLASH bank that code is currently running from, 0-5.
004317  004697        
004318  004698        
004319  004699  func flash_EraseBank("bank", "confirmation"), 1;
004320  004700  // Syntax   : flash_EraseBank(bank, confirmation);
004321  004701  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004322  004702  // Notes    : This function should be used with extreme caution.
004323  004703  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004324  004704  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004325  004705  //          : a protected bank will not be erased, and function will return with 0
004326  004706  //          : If the destination bank is the same as the execution bank, the processor will reset
004327  004707  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004328  004708  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004329  004709  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004330  004710  // Returns  : returns true if the function succeeded
004331  004711  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004332  004712        
004333  004713  func flash_LoadFile("bank", "filename"), 1;
004334  004714  // Syntax   : flash_LoadFile(bank, ptr);
004335  004715  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004336  004716  // Notes    : Copies a file from uSD to the required flashbank.
004337  004717  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004338  004718  // Returns  : returns true if the function succeeded.
004339  004719        
004340  004720        
004341  004721  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004342  004722  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004343  004723  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004344  004724  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004345  004725  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004346  004726  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004347  004727  // Returns  : returns true if the function succeeded.
004348  004728        
004349  004729        
004350  004730  func flash_putstr("bank", "ptr"), 1;
004351  004731  // Syntax   : flash_putstr(bank, ptr);
004352  004732  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004353  004733  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004354  004734  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004355  004735  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004356  004736        
004357  004737  func flash_Blit16("bank", "offset", "count"), 1;
004358  004738  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004359  004739  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004360  004740  // Notes    : Blit an image to a GRAM window from FLASH storage.
004361  004741  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004362  004742  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004363  004743        
004364  004744  func flash_Blit8("bank", "offset", "count"), 1;
004365  004745  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004366  004746  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004367  004747  // Notes    : Blit an image to a GRAM window from FLASH storage.
004368  004748  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004369  004749  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004370  004750        
004371  004751  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004372  004752  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004373  004753  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004374  004754  // Notes    : Blit an image to a GRAM window from FLASH storage.
004375  004755  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004376  004756  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004377  004757        
004378  004758  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004379  004759  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004380  004760  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004381  004761  // Notes    : Blit an image to a GRAM window from FLASH storage.
004382  004762  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004383  004763  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004384  004764        
004385  004765  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004386  004766  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004387  004767  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004388  004768  // Notes    : Blit an image to a GRAM window from FLASH storage.
004389  004769  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004390  004770  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004391  004771        
004392  004772  func flash_Exec("bank", "arglistptr"), 1;
004393  004773  // Syntax: res := flash_Exec("bank","arglistptr");
004394  004774  // Usage : res := flash_Exec("bank","arglistptr");
004395  004775  // Notes : returns like a function, current program
004396  004776  //       : calling program is kept active and control returns to it.
004397  004777  //       : If arglistptr is 0, no arguments are passed, else
004398  004778  //       : arglist points to an array, the first element being
004399  004779  //       : the number of elements in the array.
004400  004780  //       : func 'main' in the called bank accepts the arguments.
004401  004781  // WARNING Not currently implemented!
004402  004782        
004403  004783        
004404  004784  func __reserved68(), 0; // do not remove
004405  004785  func __reserved69(), 0; // do not remove
004406  004786  func __reserved70(), 0; // do not remove
004407  004787        
004408  004788  //=========================================================================================================
004409  004789  // I/O and hardware functions
004410  004790  //=========================================================================================================
004411  004791        
004412  004792        
004413  004793        
004414  004794        
004415  004795  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004416  004796  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004417  004797  // Syntax: pin_Pulseout(pin, value);
004418  004798  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004419  004799  // Notes : only available on PA0 to PA9
004420  004800  //       : Invert the state of an output for "value" milliseconds.
004421  004801  //       : pulseout is non blocking, that is, code execution may continue while
004422  004802  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004423  004803  //       : If not already an output, pin is automatically made a push/pull output,
004424  004804  //       : and the last state of its output latch will determine pulse polarity.
004425  004805  //       : It's its open drain state is not altered if the pin was already an output.
004426  004806  //       : If pulseout is called while pulseout is still active, the pulse timer
004427  004807  //       : will simply be updated with the new "value" and the pulse will continue
004428  004808  //       : with the extended value.
004429  004809  //       : returns true if the pin number is legal (usually ignored)
004430  004810        
004431  004811        
004432  004812  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004433  004813  // Syntax: pin_Counter(pin, mode, userfunc);
004434  004814  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004435  004815  // Notes : only available on PA4 to PA9
004436  004816  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004437  004817  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004438  004818  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004439  004819  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004440  004820  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004441  004821  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004442  004822  //       : The pin may be configured as an input or output, the function behaves the same.
004443  004823  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004444  004824  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004445  004825  //       : "mode" has the following effect:-
004446  004826  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004447  004827  //       : mode COUNT_RISE(1) = increment on every rising edge
004448  004828  //       : mode COUNT_FALL(2) = increment on every falling edge
004449  004829  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004450  004830        
004451  004831  //------------------------------------------------------------------//
004452  004832  // pin counter mode constants                                       //
004453  004833  //------------------------------------------------------------------//
004454  004834  #CONST
004455  004839  #END
004456  004840        
004457  004841  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004458  004842  // Syntax: Qencoder1(pinA, pinB, mode);
004459  004843  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004460  004844  // Notes : not available on pins PA14 and PA15
004461  004845  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004462  004846  //       : or written to at any time with peekW and pokeW using the following constants:-
004463  004847  //       : It is necessary to configure the pins first, depending on your requirements, eg
004464  004848  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004465  004849  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004466  004850  //       : Returns true if the pin numbers are legal (usually ignored)
004467  004851  //    QEN1_COUNTER_LO
004468  004852  //    QEN1_COUNTER_HI
004469  004853  //    QEN1_DELTA This is reset to 0 when read
004470  004854        
004471  004855  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004472  004856  // Syntax: Qencoder2(pinA, pinB, mode);
004473  004857  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004474  004858  // Notes : not available on pins PA14 and PA15
004475  004859  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004476  004860  //       : or written to at any time with peekW and pokeW using the following constants:-
004477  004861  //       : It is necessary to configure the pins first, depending on your requirements, eg
004478  004862  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004479  004863  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004480  004864  //       : Returns true if the pin numbers are legal (usually ignored)
004481  004865  //    QEN2_COUNTER_LO
004482  004866  //    QEN2_COUNTER_HI
004483  004867  //    QEN2_DELTA This is reset to 0 when read
004484  004868        
004485  004869        
004486  004870  func Qencoder1Reset(), 0;
004487  004871  // Syntax: Qencoder1Reset();
004488  004872  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004489  004873  // Notes :
004490  004874  //    QEN1_COUNTER_LO is reset to zero
004491  004875  //    QEN1_COUNTER_HI is reset to zero
004492  004876  //    QEN1_DELTA is reset to zero
004493  004877        
004494  004878  func Qencoder2Reset(), 0;
004495  004879  // Syntax: Qencoder2Reset();
004496  004880  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004497  004881  // Notes :
004498  004882  //    QEN2_COUNTER_LO is reset to zero
004499  004883  //    QEN2_COUNTER_HI is reset to zero
004500  004884  //    QEN2_DELTA is reset to zero
004501  004885        
004502  004886        
004503  004887  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004504  004888  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004505  004889  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004506  004890  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004507  004891  //       : Invert the state of an output at a "freq" freuency "count" times.
004508  004892  //       : PulseoutCount is non blocking, that is, code execution may continue while
004509  004893  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004510  004894  //       : If not already an output, pin is automatically made a push/pull output,
004511  004895  //       : and the last state of its output latch will determine pulse polarity.
004512  004896  //       : It's its open drain state is not altered if the pin was already an output.
004513  004897  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004514  004898  //       : will simply have the new "value" added to it.
004515  004899  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004516  004900  //       : returns true if the pin number is legal (usually ignored)
004517  004901        
004518  004902  func __reserved72(), 0; // do not remove
004519  004903        
004520  004904  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004521  004905  // Syntax: pwm_Init(pin, value);
004522  004906  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004523  004907  // Notes : only available on PA4 to PA9
004524  004908  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004525  004909  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004526  004910  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004527  004911  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004528  004912  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004529  004913  //       :                    : Repetition rate ~50hz or 20ms
004530  004914  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004531  004915  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004532  004916  //       : pwm_Init is non blocking and the pwm continues until turn off
004533  004917  //       : Returns true if the pin number is legal (usually ignored)
004534  004918        
004535  004919  //------------------------------------------------------------------------------
004536  004920  // PWM Constants
004537  004921  //------------------------------------------------------------------------------
004538  004922  #CONST
004539  004927  #END
004540  004928        
004541  004929  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004542  004930  // Syntax   : OW_Reset(PA0);
004543  004931  // Usage    : OW_Reset(PA0);
004544  004932  // Notes    : Only available on PA0 to PA13
004545  004933  //          : Resets  ONEWIRE device
004546  004934  //          : Returns the status, 0 = ACK.
004547  004935  //          :
004548  004936        
004549  004937  func OW_Read("pin"), 1;                              // read data from 1wire bus
004550  004938  // Syntax   : OW_Read(PA0);
004551  004939  // Usage    : arg1 := OW_Read(PA0);
004552  004940  // Notes    : Only available on PA0 to PA13
004553  004941  //          : Reads value of the ONEWIRE pin
004554  004942  //          : that was previously selected for ONEWIRE comms.
004555  004943  //          :
004556  004944  //          : pin = 0 : the next byte from the ONEWIRE bus
004557  004945        
004558  004946  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004559  004947  // Syntax   : OW_Read9(PA0);
004560  004948  // Usage    : OW_Read9(PA0);
004561  004949  // Notes    : Only available on PA0 to PA13
004562  004950  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004563  004951  //          : that was previously selected for ONEWIRE comms.
004564  004952  //          :
004565  004953  //          : read the 9 bits from the ONEWIRE bus
004566  004954        
004567  004955  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004568  004956  // Syntax   : OW_Write(PA0, arg);
004569  004957  // Usage    : OW_Write(PA0, arg);
004570  004958  // Notes    : Only available on PA0 to PA13
004571  004959  //          : Sends ONEWIRE data on the appropriate
004572  004960  //          : pin that was previously  selected as ONEWIRE comms.
004573  004961  //          :
004574  004962  //          : write arg to the ONEWIRE bus
004575  004963        
004576  004964  func __reserved77(), 0; // do not remove
004577  004965  func __reserved78(), 0; // do not remove
004578  004966        
004579  004967  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004580  004968  // Syntax: sys_GetDateVar(&year, &month, &day);
004581  004969  // Usage : sys_GetDateVar(&year, &month, &day);
004582  004970  // Notes : Retrieves the date values into variables
004583  004971        
004584  004972  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004585  004973  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004974  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004587  004975  // Notes : Retrieves the time values into variables
004588  004976        
004589  004977  func sys_PmmC(), 0;
004590  004978  // Syntax: sys_PmmC();
004591  004979  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004592  004980  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004593  004981  //       : Can be captured to a buffer using the to( function
004594  004982  //       : Returns nothing.
004595  004983        
004596  004984  func sys_Driver(), 0;
004597  004985  // Syntax: sys_Driver();
004598  004986  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004599  004987  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004600  004988  //       : Can be captured to a buffer using the to( function
004601  004989  //       : Returns nothing.
004602  004990        
004603  004991  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004604  004992  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004605  004993  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004606  004994  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004607  004995  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004608  004996  //       : elements in each buffer. This will need to be greater than "width" for negative
004609  004997  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004610  004998  //       : pass 0 as the address for any unused traces
004611  004999  //       : X position is incremented each point by "xstep" pixels.
004612  005000  //       : Y values are derived from a Y buffer "newy" (signed values).
004613  005001  //       : 2 buffers need to be supplied, "newy" contains new
004614  005002  //       : points to be drawn, "oldy" contains most recent set
004615  005003  //       : of points to be un-drawn. After the waveform is drawn,
004616  005004  //       : "newy" buffer is automatically copied to "oldy" buffer.
004617  005005        
004618  005006        
004619  005007  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004620  005008  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004621  005009  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004622  005010  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004623  005011  //       : and calls "COMPLETEfunction" when done.
004624  005012  //       : "rate" is samples in 100 of samples per second
004625  005013  //       : Any unused IOx pins should have their buffer addresses set to 0
004626  005014  //       : For performance reasons samples are taken in chunks of 32, thus if you
004627  005015  //       : request 33 samples there will be a delay of 31 samples before
004628  005016  //       : "COMPLETEfunction" is called
004629  005017  //       : If Touch is enabled this function should be called no more than once per
004630  005018  //       : millisecond, otherwise touch behaviour could be eratic.
004631  005019        
004632  005020        
004633  005021  func sys_ErrorMessage("msgnum"), 1;
004634  005022        
004635  005023  //==============================//
004636  005024  // NeoPixel specific functions  //
004637  005025  //==============================//
004638  005026        
004639  005027  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004640  005028  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004641  005029  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004642  005030  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004643  005031  //       : data        : Address of data to be sent
004644  005032  //       : size        : number of colour 'sets' to follow
004645  005033  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004646  005034  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004647  005035  //       : Repeat      : Number of times to repeat the colours between first and last
004648  005036  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004649  005037  //       : Returns true if the pin number is legal (usually ignored)
004650  005038  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004651  005039  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004652  005040        
004653  005041  // NeoPixel related constants
004654  005042  #CONST
004655  005046  #END
004656  005047        
004657  005048  func __reserved85(), 0; // do not remove
004658  005049  func __reserved86(), 0; // do not remove
004659  005050        
004660  005051  //==============================================//
004661  005052  // spi flash device specific functions          //
004662  005053  //==============================================//
004663  005054        
004664  005055  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004665  005056  // Syntax   : spiflash_SIG("spi#","enablepin");
004666  005057  // Usage    : var := spiflash_SIG(SPI1, PA0);
004667  005058  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004668  005059  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004669  005060  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004670  005061  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004671  005062  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004672  005063  //          : byte is ignored.
004673  005064        
004674  005065  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004675  005066  // Syntax   : spiflash_ID("spi#","enablepin");
004676  005067  // Usage    : var := spiflash_ID(SPI1, PA0);
004677  005068  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004678  005069  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004679  005070  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004680  005071  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004681  005072  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004682  005073  //          : contains capacity. Refer to the device data sheet for further information.
004683  005074        
004684  005075  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004685  005076  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004686  005077  // Usage    : spiflash_BulkErase(SPI1, PA0);
004687  005078  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004688  005079  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004689  005080  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004690  005081  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004691  005082  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004692  005083  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004693  005084        
004694  005085  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004695  005086  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004696  005087  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004697  005088  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004698  005089  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004699  005090  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004700  005091  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004701  005092  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004702  005093  //          : blockAddress The address of the 64k FLASH block to be erased.
004703  005094  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004704  005095  //          : can take up to 3 milliseconds.
004705  005096        
004706  005097  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004707  005098  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004708  005099  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004709  005100  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004710  005101        
004711  005102  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004712  005103  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004713  005104  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004714  005105  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004715  005106  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004716  005107  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004717  005108  //       : returns number of characters read
004718  005109  //       : if "dest" is zero, data is read direct to GRAM window
004719  005110  //       :
004720  005111        
004721  005112  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004722  005113  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004723  005114  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004724  005115  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004725  005116  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004726  005117  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004727  005118  //       : returns number of bytes written
004728  005119  //       :
004729  005120        
004730  005121  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004731  005122  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004732  005123  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004733  005124  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004734  005125  //       : The image is displayed at x,y (with respect to top left corner).
004735  005126        
004736  005127  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004737  005128  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004738  005129  // Usage : spiflash_PutC('x', SPI1, PA0);
004739  005130  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004740  005131  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004741  005132  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004742  005133        
004743  005134  func spiflash_GetC("spi#", "enablepin"), 1;
004744  005135  // Syntax: spiflash_GetC("spi#", "enablepin");
004745  005136  // Usage : mychar := fgetC(SPI1, PA0);
004746  005137  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004747  005138  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004748  005139  //       : by subsequent reads or writes.
004749  005140  //       : returns next char from file
004750  005141        
004751  005142  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004752  005143  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004753  005144  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004754  005145  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004755  005146  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004756  005147  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004757  005148        
004758  005149  func spiflash_GetW("spi#", "enablepin"), 1;
004759  005150  // Syntax: spiflash_GetW("spi#", "enablepin");
004760  005151  // Usage : myword := fgetW(SPI1, PA0);
004761  005152  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004762  005153  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004763  005154  //       : by subsequent reads or writes.
004764  005155  // Notes : returns next word in file
004765  005156        
004766  005157  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004767  005158  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004768  005159  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004769  005160  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004770  005161  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004771  005162  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004772  005163  //       : returns number of characters written
004773  005164  //       :
004774  005165        
004775  005166  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004776  005167  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004777  005168  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004778  005169  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004779  005170  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004780  005171  //       : by subsequent reads or writes.
004781  005172  //       : returns pointer to string or null if failed.
004782  005173  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004783  005174  //       : NB:- only reads up to "size-1" characters into "string"
004784  005175  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004785  005176  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004786  005177  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004787  005178  //       : C] It reaches the end of file
004788  005179  //       : D] A read error occurs.
004789  005180        
004790  005181  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004791  005182  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004792  005183  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004793  005184  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004794  005185  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004795  005186  //       : return a function pointer to the allocation.
004796  005187  //       : The function can then be invoked just like any other
004797  005188  //       : function would be called via a function pointer.
004798  005189  //       : Parameters may be passed to it in a conventional way.
004799  005190  //       : The function may be discarded at any time when no
004800  005191  //       : longer required, thus freeing its memory resources.
004801  005192  //       : The loaded function can be discarded with mem_Free(..)
004802  005193  //       : eg:
004803  005194  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004804  005195  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004805  005196  //       : then elsewhere in your program:-
004806  005197  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004807  005198  //       : if(res == QUIT_APPLICATION) goto exitApp;
004808  005199  //       : Later in your program, when popupWindow is no longer
004809  005200  //       : required for the application:-
004810  005201  //       : res := mem_Free(popupWindow);
004811  005202  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004812  005203  //       : The callers stack is shared by the loaded function,
004813  005204  //       : however any global variables in the loaded function
004814  005205  //       : are private to that function.
004815  005206  //
004816  005207        
004817  005208  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004818  005209  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004819  005210  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004820  005211  // Notes : current program releases any allocated memory but
004821  005212  //       : retains the stack and global memory.
004822  005213  //       : If arglistptr is 0, no arguments are passed, else
004823  005214  //       : arglist points to an array, the first element being
004824  005215  //       : the number of elements in the array.
004825  005216  //       : func 'main' in the called program accepts
004826  005217  //       : the arguments, if any. The arguments can only
004827  005218  //       : be passed by value, no pointers or references can be
004828  005219  //       : used as all memory is cleared before the file
004829  005220  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004830  005221  //       : for functions that can pass by reference.
004831  005222        
004832  005223  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004833  005224  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004834  005225  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004835  005226  // Notes : returns like a function, current program
004836  005227  //       : calling program is kept active and control returns to it.
004837  005228  //       : If arglistptr is 0, no arguments are passed, else
004838  005229  //       : arglist points to an array, the first element being
004839  005230  //       : the number of elements in the array.
004840  005231  //       : func 'main' in the called program accepts the arguments.
004841  005232  //       : This function is similar to spiflash_LoadFunction(...), however,
004842  005233  //       : the function argument list is passed by pointer, and
004843  005234  //       : the memory consumed by the function is released as
004844  005235  //       : soon as the function completes.
004845  005236        
004846  005237  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004847  005238  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004848  005239  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004849  005240  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004850  005241  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004851  005242  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004852  005243  //       : Returns NULL if function fails.
004853  005244  //       : Returns a handle (pointer to the memory allocation) to the
004854  005245  //       : image control list that has been created.
004855  005246        
004856  005247  // Notes : This function Calculates the size of a chunk of memory required for
004857  005248  //       : a image list and populates it from the image control file ("*.dat")
004858  005249  //       : therefore, when imagelist is no longer required, you must de-allocate
004859  005250  //       : the image list memory by using eg:- mem_Free(hImagelist);
004860  005251  //       : to restore the heap.
004861  005252  //       :
004862  005253        
004863  005254  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004864  005255  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004865  005256  // Usage : spiflash_PlayWAV(SPI1, PA0);
004866  005257  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004867  005258  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004868  005259  //       : or writes.
004869  005260  //       : This function automatically grabs a chunk
004870  005261  //       : of memory for a file buffer, and a wave
004871  005262  //       : buffer. The minimum memory requirement is
004872  005263  //       : about 580 bytes for the disk io service and
004873  005264  //       : a minimum wave buffer size of 1024. The size
004874  005265  //       : of the wave buffer allocation
004875  005266  //       : can be increased by the snd_BufSize function.
004876  005267  //       : The default size 1024 bytes.
004877  005268  //       : NB the memory is only required during the
004878  005269  //       : duration of play, and is automatically
004879  005270  //       : released while not in use.
004880  005271  //       : See the Sound Class services for other associated controls.
004881  005272  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004882  005273  //       : If errors occured, the folling is returned
004883  005274  //       : -7  : Insufficient memory available for WAV buffer and file
004884  005275  //       : -6  : cant play this rate
004885  005276  //       : -5  : no data chunk found in first rsector
004886  005277  //       : -4  : no format data
004887  005278  //       : -3  : no wave chunk signature
004888  005279  //       : -2  : bad wave file format
004889  005280  //       : -1  : file not found
004890  005281        
004891  005282  //==============================================//
004892  005283  // more com functions                           //
004893  005284  //==============================================//
004894  005285        
004895  005286  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004896  005287  // Syntax   : com1_TXblock("buf", "bufsize");
004897  005288  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004898  005289  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004899  005290  //          : if a transmit buffer is active and space is available this function will return almost
004900  005291  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004901  005292        
004902  005293  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004903  005294  // Syntax   : com1_RXblock("buf", "bufsize");
004904  005295  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004905  005296  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004906  005297  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004907  005298  //          : immediately otherwise it will block until until the required bytes are received.
004908  005299        
004909  005300  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004910  005301  // Syntax   : com_TXblock("buf", "bufsize");
004911  005302  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004912  005303  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004913  005304  //          : if a transmit buffer is active and space is available this function will return almost
004914  005305  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004915  005306        
004916  005307  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004917  005308  // Syntax   : com_RXblock("buf", "bufsize");
004918  005309  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004919  005310  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004920  005311  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004921  005312  //          : immediately otherwise it will block until until the required bytes are received.
004922  005313        
004923  005314  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004924  005315  // Syntax   : com_TXblock("buf", "bufsize");
004925  005316  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004926  005317  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004927  005318  //          : if a transmit buffer is active and space is available this function will return almost
004928  005319  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004929  005320        
004930  005321  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004931  005322  // Syntax   : com_RXblock("buf", "bufsize");
004932  005323  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004933  005324  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004934  005325  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004935  005326  //          : immediately otherwise it will block until until the required bytes are received.
004936  005327        
004937  005328  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004938  005329  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004939  005330  // Usage : disp_BlitPixelsFromCOM1();
004940  005331  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004941  005332  //       : display from the specified com port.
004942  005333        
004943  005334  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004944  005335  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004945  005336  // Usage : disp_BlitPixelsFromCOM2();
004946  005337  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004947  005338  //       : display from the specified com port.
004948  005339        
004949  005340  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004950  005341  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004951  005342  // Usage : disp_BlitPixelsFromCOM3();
004952  005343  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004953  005344  //       : display from the specified com port.
004954  005345        
004955  005346        
004956  005347  //==============================================//
004957  005348  // crc generation functions                     //
004958  005349  //==============================================//
004959  005350        
004960  005351  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004961  005352  // *Notes   : (if you calculate all of the incoming data
004962  005353  //          : INCLUDING the CRC, the result should be 0x00
004963  005354  //          : This is equivalent to simple addition of all bytes
004964  005355  //          : and returning the negated sum an 8 bit value.
004965  005356  //          : For the standard test string "123456789",
004966  005357  //          : crc_CSUM_8 will return 0x0023.
004967  005358        
004968  005359        
004969  005360  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004970  005361  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004971  005362  //          : (if you calculate all of the incoming data
004972  005363  //          : INCLUDING the CRC, the result should be 0x0000
004973  005364  //          : For the standard test string "123456789",
004974  005365  //          : crc_16 will return 0xBB3D.
004975  005366        
004976  005367        
004977  005368  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004978  005369  // *Notes   : (if you calculate all of the incoming data
004979  005370  //          : INCLUDING the CRC, the result should be 0x0000
004980  005371  //          : For the standard test string "123456789",
004981  005372  //          : crc_MODBUS will return 0x4B37.
004982  005373        
004983  005374        
004984  005375  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004985  005376  // *Notes   : (if you calculate all of the incoming data
004986  005377  //          : INCLUDING the CRC, the result should be 0x0000
004987  005378  //          : For the standard test string "123456789",
004988  005379  //          : crc_CCITT will return the following:-
004989  005380  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004990  005381  //          : seed = 0xFFFF, result = 0x29B1
004991  005382  //          : seed = 0x1D0F, result = 0xE5CC
004992  005383        
004993  005384        
004994  005385  //------------------------------------------------------------------//
004995  005386  // CONSTANTS
004996  005387  //------------------------------------------------------------------//
004997  005388        
004998  005389  #CONST
004999  005393  #END
005000  005394        
005001  005395  // timebase constants for timebase_init
005002  005396  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005003  005397  #CONST
005004  005408  #END
005005  005409        
005006  005410        
005007  005411  // generic constants
005008  005412  #CONST
005009  005420  #END
005010  005421        
005011  005422        
005012  005423        
005013  005424  //gfx_Get() related constants
005014  005425  #CONST
005015  005434  #END
005016  005435        
005017  005436        
005018  005437        
005019  005438        
005020  005439  #CONST
005021  005452  #END
005022  005453        
005023  005454        
005024  005455  #CONST
005025  005480  #END
005026  005481        
005027  005482        
005028  005483        
005029  005484        
005030  005485  // timer control  related constants
005031  005486  #CONST
005032  005495  #END
005033  005496        
005034  005497        
005035  005498        
005036  005499  //------------------------------------------------------------------------------
005037  005500  // system WORD variables accesible with peekW and pokeW or pointer access
005038  005501  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005039  005502  // can also be accessed with peekW and pokeW
005040  005503  //------------------------------------------------------------------------------
005041  005504        
005042  005505  #CONST
005043  005600  #END
005044  005601        
005045  005602  #CONST
005046  005767  #END
005047  005768        
005048  005769        
005049  005770        
005050  005771  //==================================================================================================
005051  005772        
005052  005773        
005053  005774        
005054  000013      #ENDIF
005055  000014        
005056  000015        
005057  000016  //===========================================================================================
005058  000017        
005059  000018        
005060  000002        
005061  000003  // generated 09/07/2015 16:33:17
005062  000004        
005063  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005064  000006  #inherit "4DGL_16bitColours.fnc"
005065  000006  #inherit "4DGL_16bitColours.fnc"
005066  000004  */
005067  000005        
005068  000006        
005069  000007        
005070  000008  #CONST
005071  000149  #END
005072  000150        
005073  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005074  000008  #inherit "VisualConst.inc"
005075  000008  #inherit "VisualConst.inc"
005076  000001  // Line Patterns
005077  000002  #constant  LPCOARSE    0xF0F0
005078  000002  #constant  LPCOARSE    0xF0F0
005079  000003  #constant  LPMEDIUM    0x3333
005080  000003  #constant  LPMEDIUM    0x3333
005081  000004  #constant  LPFINE      0xAAAA
005082  000004  #constant  LPFINE      0xAAAA
005083  000005  #constant  LPDASHDOT   0x03CF
005084  000005  #constant  LPDASHDOT   0x03CF
005085  000006  #constant  LPDASHDOTDOT 0x0333
005086  000006  #constant  LPDASHDOTDOT 0x0333
005087  000007  #constant  LPSOLID     0x0000
005088  000007  #constant  LPSOLID     0x0000
005089  000009        
005090  000010        
file I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1Const.inc

005091  000011  #inherit "RepRap_Touchv1Const.inc"
005092  000011  #inherit "RepRap_Touchv1Const.inc"
005093  000001  // File generated 09/07/2015 16:32:51
005094  000002  // Warning! This is a generated file, any manual changes will be
005095  000003  // lost during the next generation.
005096  000004        
005097  000005  #constant  Strings1Count    1
005098  000005  #constant  Strings1Count    1
005099  000006  #constant  Strings1Size     40
005100  000006  #constant  Strings1Size     40
005101  000007  #constant  Strings3Count    1
005102  000007  #constant  Strings3Count    1
005103  000008  #constant  Strings3Size     18
005104  000008  #constant  Strings3Size     18
005105  000009  #constant  Strings20Count    1
005106  000009  #constant  Strings20Count    1
005107  000010  #constant  Strings20Size     35
005108  000010  #constant  Strings20Size     35
005109  000011  #constant  Strings4Count    1
005110  000011  #constant  Strings4Count    1
005111  000012  #constant  Strings4Size     25
005112  000012  #constant  Strings4Size     25
005113  000013  #constant  Strings6Count    1
005114  000013  #constant  Strings6Count    1
005115  000014  #constant  Strings6Size     31
005116  000014  #constant  Strings6Size     31
005117  000015  #constant  Strings2Count    0
005118  000015  #constant  Strings2Count    0
005119  000016  #constant  Strings2Size     1
005120  000016  #constant  Strings2Size     1
005121  000017  #constant  Strings0Count    1
005122  000017  #constant  Strings0Count    1
005123  000018  #constant  Strings0Size     7
005124  000018  #constant  Strings0Size     7
005125  000019  #constant  Strings9Count    0
005126  000019  #constant  Strings9Count    0
005127  000020  #constant  Strings9Size     1
005128  000020  #constant  Strings9Size     1
005129  000021  #constant  Strings34Count    0
005130  000021  #constant  Strings34Count    0
005131  000022  #constant  Strings34Size     1
005132  000022  #constant  Strings34Size     1
005133  000023  #constant  Strings36Count    0
005134  000023  #constant  Strings36Count    0
005135  000024  #constant  Strings36Size     1
005136  000024  #constant  Strings36Size     1
005137  000025  #constant  Strings37Count    0
005138  000025  #constant  Strings37Count    0
005139  000026  #constant  Strings37Size     1
005140  000026  #constant  Strings37Size     1
005141  000027  #constant  Strings12Count    1
005142  000027  #constant  Strings12Count    1
005143  000028  #constant  Strings12Size     15
005144  000028  #constant  Strings12Size     15
005145  000029  #constant  Strings14Count    1
005146  000029  #constant  Strings14Count    1
005147  000030  #constant  Strings14Size     23
005148  000030  #constant  Strings14Size     23
005149  000031  #constant  Strings16Count    0
005150  000031  #constant  Strings16Count    0
005151  000032  #constant  Strings16Size     1
005152  000032  #constant  Strings16Size     1
005153  000033  #constant  Strings15Count    1
005154  000033  #constant  Strings15Count    1
005155  000034  #constant  Strings15Size     24
005156  000034  #constant  Strings15Size     24
005157  000035  #constant  Strings21Count    1
005158  000035  #constant  Strings21Count    1
005159  000036  #constant  Strings21Size     35
005160  000036  #constant  Strings21Size     35
005161  000037  #constant  Strings11Count    1
005162  000037  #constant  Strings11Count    1
005163  000038  #constant  Strings11Size     33
005164  000038  #constant  Strings11Size     33
005165  000039  #constant  Strings22Count    1
005166  000039  #constant  Strings22Count    1
005167  000040  #constant  Strings22Size     20
005168  000040  #constant  Strings22Size     20
005169  000041  #constant  Strings23Count    1
005170  000041  #constant  Strings23Count    1
005171  000042  #constant  Strings23Size     17
005172  000042  #constant  Strings23Size     17
005173  000043  #constant  Strings24Count    1
005174  000043  #constant  Strings24Count    1
005175  000044  #constant  Strings24Size     26
005176  000044  #constant  Strings24Size     26
005177  000045  #constant  Strings25Count    1
005178  000045  #constant  Strings25Count    1
005179  000046  #constant  Strings25Size     10
005180  000046  #constant  Strings25Size     10
005181  000047  #constant  Strings26Count    1
005182  000047  #constant  Strings26Count    1
005183  000048  #constant  Strings26Size     10
005184  000048  #constant  Strings26Size     10
005185  000049  #constant  Strings27Count    1
005186  000049  #constant  Strings27Count    1
005187  000050  #constant  Strings27Size     11
005188  000050  #constant  Strings27Size     11
005189  000051  #constant  Strings5Count    1
005190  000051  #constant  Strings5Count    1
005191  000052  #constant  Strings5Size     37
005192  000052  #constant  Strings5Size     37
005193  000053  #constant  Strings28Count    1
005194  000053  #constant  Strings28Count    1
005195  000054  #constant  Strings28Size     40
005196  000054  #constant  Strings28Size     40
005197  000055  #constant  Strings35Count    1
005198  000055  #constant  Strings35Count    1
005199  000056  #constant  Strings35Size     36
005200  000056  #constant  Strings35Size     36
005201  000057  #constant  Strings33Count    1
005202  000057  #constant  Strings33Count    1
005203  000058  #constant  Strings33Size     33
005204  000058  #constant  Strings33Size     33
005205  000059  #constant  Strings10Count    1
005206  000059  #constant  Strings10Count    1
005207  000060  #constant  Strings10Size     15
005208  000060  #constant  Strings10Size     15
005209  000061  #constant  Strings7Count    0
005210  000061  #constant  Strings7Count    0
005211  000062  #constant  Strings7Size     1
005212  000062  #constant  Strings7Size     1
005213  000063  #constant  Strings8Count    0
005214  000063  #constant  Strings8Count    0
005215  000064  #constant  Strings8Size     1
005216  000064  #constant  Strings8Size     1
005217  000065  #constant  Strings38Count    0
005218  000065  #constant  Strings38Count    0
005219  000066  #constant  Strings38Size     1
005220  000066  #constant  Strings38Size     1
005221  000067  #constant  Strings39Count    0
005222  000067  #constant  Strings39Count    0
005223  000068  #constant  Strings39Size     1
005224  000068  #constant  Strings39Size     1
005225  000069  #constant  Strings40Count    1
005226  000069  #constant  Strings40Count    1
005227  000070  #constant  Strings40Size     7
005228  000070  #constant  Strings40Size     7
005229  000071  #constant  Strings41Count    1
005230  000071  #constant  Strings41Count    1
005231  000072  #constant  Strings41Size     7
005232  000072  #constant  Strings41Size     7
005233  000073  #constant  Strings42Count    1
005234  000073  #constant  Strings42Count    1
005235  000074  #constant  Strings42Size     7
005236  000074  #constant  Strings42Size     7
005237  000075  #constant  Strings43Count    0
005238  000075  #constant  Strings43Count    0
005239  000076  #constant  Strings43Size     1
005240  000076  #constant  Strings43Size     1
005241  000077  #constant  Strings44Count    0
005242  000077  #constant  Strings44Count    0
005243  000078  #constant  Strings44Size     1
005244  000078  #constant  Strings44Size     1
005245  000079  #constant  Strings45Count    0
005246  000079  #constant  Strings45Count    0
005247  000080  #constant  Strings45Size     1
005248  000080  #constant  Strings45Size     1
005249  000081  #constant  Strings51Count    0
005250  000081  #constant  Strings51Count    0
005251  000082  #constant  Strings51Size     1
005252  000082  #constant  Strings51Size     1
005253  000083  #constant  Strings52Count    0
005254  000083  #constant  Strings52Count    0
005255  000084  #constant  Strings52Size     1
005256  000084  #constant  Strings52Size     1
005257  000085  #constant  Strings17Count    1
005258  000085  #constant  Strings17Count    1
005259  000086  #constant  Strings17Size     65
005260  000086  #constant  Strings17Size     65
005261  000087  #constant  Strings18Count    1
005262  000087  #constant  Strings18Count    1
005263  000088  #constant  Strings18Size     42
005264  000088  #constant  Strings18Size     42
005265  000089  #constant  Strings19Count    1
005266  000089  #constant  Strings19Count    1
005267  000090  #constant  Strings19Size     45
005268  000090  #constant  Strings19Size     45
005269  000091  #constant  Strings29Count    1
005270  000091  #constant  Strings29Count    1
005271  000092  #constant  Strings29Size     65
005272  000092  #constant  Strings29Size     65
005273  000093  #constant  Strings30Count    1
005274  000093  #constant  Strings30Count    1
005275  000094  #constant  Strings30Size     45
005276  000094  #constant  Strings30Size     45
005277  000095  #constant  Strings31Count    1
005278  000095  #constant  Strings31Count    1
005279  000096  #constant  Strings31Size     7
005280  000096  #constant  Strings31Size     7
005281  000097  #constant  Strings32Count    1
005282  000097  #constant  Strings32Count    1
005283  000098  #constant  Strings32Size     19
005284  000098  #constant  Strings32Size     19
005285  000099  #constant  Strings49Count    1
005286  000099  #constant  Strings49Count    1
005287  000100  #constant  Strings49Size     17
005288  000100  #constant  Strings49Size     17
005289  000101  #constant  Strings50Count    1
005290  000101  #constant  Strings50Count    1
005291  000102  #constant  Strings50Size     20
005292  000102  #constant  Strings50Size     20
005293  000103  #constant  Strings13Count    1
005294  000103  #constant  Strings13Count    1
005295  000104  #constant  Strings13Size     3
005296  000104  #constant  Strings13Size     3
005297  000105  #constant  Strings46Count    0
005298  000105  #constant  Strings46Count    0
005299  000106  #constant  Strings46Size     1
005300  000106  #constant  Strings46Size     1
005301  000107  #constant  Strings47Count    1
005302  000107  #constant  Strings47Count    1
005303  000108  #constant  Strings47Size     3
005304  000108  #constant  Strings47Size     3
005305  000109  #constant  Strings48Count    0
005306  000109  #constant  Strings48Count    0
005307  000110  #constant  Strings48Size     1
005308  000110  #constant  Strings48Size     1
005309  000111  #constant  Strings53Count    1
005310  000111  #constant  Strings53Count    1
005311  000112  #constant  Strings53Size     75
005312  000112  #constant  Strings53Size     75
005313  000113  // object indexes into ImageControl
005314  000114  #CONST
005315  000313  #END
005316  000314        
005317  000315  #constant  Strings1StartH   0x0
005318  000315  #constant  Strings1StartH   0x0
005319  000316  #constant  Strings1StartL   0x0
005320  000316  #constant  Strings1StartL   0x0
005321  000317  #constant  Strings3StartH   0x0
005322  000317  #constant  Strings3StartH   0x0
005323  000318  #constant  Strings3StartL   0x200
005324  000318  #constant  Strings3StartL   0x200
005325  000319  #constant  Strings20StartH   0x0
005326  000319  #constant  Strings20StartH   0x0
005327  000320  #constant  Strings20StartL   0x400
005328  000320  #constant  Strings20StartL   0x400
005329  000321  #constant  Strings4StartH   0x0
005330  000321  #constant  Strings4StartH   0x0
005331  000322  #constant  Strings4StartL   0x600
005332  000322  #constant  Strings4StartL   0x600
005333  000323  #constant  Strings6StartH   0x0
005334  000323  #constant  Strings6StartH   0x0
005335  000324  #constant  Strings6StartL   0x800
005336  000324  #constant  Strings6StartL   0x800
005337  000325  #constant  Strings2StartH   0x0
005338  000325  #constant  Strings2StartH   0x0
005339  000326  #constant  Strings2StartL   0xA00
005340  000326  #constant  Strings2StartL   0xA00
005341  000327  #constant  Strings0StartH   0x0
005342  000327  #constant  Strings0StartH   0x0
005343  000328  #constant  Strings0StartL   0xC00
005344  000328  #constant  Strings0StartL   0xC00
005345  000329  #constant  Strings9StartH   0x0
005346  000329  #constant  Strings9StartH   0x0
005347  000330  #constant  Strings9StartL   0xE00
005348  000330  #constant  Strings9StartL   0xE00
005349  000331  #constant  Strings34StartH   0x0
005350  000331  #constant  Strings34StartH   0x0
005351  000332  #constant  Strings34StartL   0x1000
005352  000332  #constant  Strings34StartL   0x1000
005353  000333  #constant  Strings36StartH   0x0
005354  000333  #constant  Strings36StartH   0x0
005355  000334  #constant  Strings36StartL   0x1200
005356  000334  #constant  Strings36StartL   0x1200
005357  000335  #constant  Strings37StartH   0x0
005358  000335  #constant  Strings37StartH   0x0
005359  000336  #constant  Strings37StartL   0x1400
005360  000336  #constant  Strings37StartL   0x1400
005361  000337  #constant  Strings12StartH   0x0
005362  000337  #constant  Strings12StartH   0x0
005363  000338  #constant  Strings12StartL   0x1600
005364  000338  #constant  Strings12StartL   0x1600
005365  000339  #constant  Strings14StartH   0x0
005366  000339  #constant  Strings14StartH   0x0
005367  000340  #constant  Strings14StartL   0x1800
005368  000340  #constant  Strings14StartL   0x1800
005369  000341  #constant  Strings16StartH   0x0
005370  000341  #constant  Strings16StartH   0x0
005371  000342  #constant  Strings16StartL   0x1A00
005372  000342  #constant  Strings16StartL   0x1A00
005373  000343  #constant  Strings15StartH   0x0
005374  000343  #constant  Strings15StartH   0x0
005375  000344  #constant  Strings15StartL   0x1C00
005376  000344  #constant  Strings15StartL   0x1C00
005377  000345  #constant  Strings21StartH   0x0
005378  000345  #constant  Strings21StartH   0x0
005379  000346  #constant  Strings21StartL   0x1E00
005380  000346  #constant  Strings21StartL   0x1E00
005381  000347  #constant  Strings11StartH   0x0
005382  000347  #constant  Strings11StartH   0x0
005383  000348  #constant  Strings11StartL   0x2000
005384  000348  #constant  Strings11StartL   0x2000
005385  000349  #constant  Strings22StartH   0x0
005386  000349  #constant  Strings22StartH   0x0
005387  000350  #constant  Strings22StartL   0x2200
005388  000350  #constant  Strings22StartL   0x2200
005389  000351  #constant  Strings23StartH   0x0
005390  000351  #constant  Strings23StartH   0x0
005391  000352  #constant  Strings23StartL   0x2400
005392  000352  #constant  Strings23StartL   0x2400
005393  000353  #constant  Strings24StartH   0x0
005394  000353  #constant  Strings24StartH   0x0
005395  000354  #constant  Strings24StartL   0x2600
005396  000354  #constant  Strings24StartL   0x2600
005397  000355  #constant  Strings25StartH   0x0
005398  000355  #constant  Strings25StartH   0x0
005399  000356  #constant  Strings25StartL   0x2800
005400  000356  #constant  Strings25StartL   0x2800
005401  000357  #constant  Strings26StartH   0x0
005402  000357  #constant  Strings26StartH   0x0
005403  000358  #constant  Strings26StartL   0x2A00
005404  000358  #constant  Strings26StartL   0x2A00
005405  000359  #constant  Strings27StartH   0x0
005406  000359  #constant  Strings27StartH   0x0
005407  000360  #constant  Strings27StartL   0x2C00
005408  000360  #constant  Strings27StartL   0x2C00
005409  000361  #constant  Strings5StartH   0x0
005410  000361  #constant  Strings5StartH   0x0
005411  000362  #constant  Strings5StartL   0x2E00
005412  000362  #constant  Strings5StartL   0x2E00
005413  000363  #constant  Strings28StartH   0x0
005414  000363  #constant  Strings28StartH   0x0
005415  000364  #constant  Strings28StartL   0x3000
005416  000364  #constant  Strings28StartL   0x3000
005417  000365  #constant  Strings35StartH   0x0
005418  000365  #constant  Strings35StartH   0x0
005419  000366  #constant  Strings35StartL   0x3200
005420  000366  #constant  Strings35StartL   0x3200
005421  000367  #constant  Strings33StartH   0x0
005422  000367  #constant  Strings33StartH   0x0
005423  000368  #constant  Strings33StartL   0x3400
005424  000368  #constant  Strings33StartL   0x3400
005425  000369  #constant  Strings10StartH   0x0
005426  000369  #constant  Strings10StartH   0x0
005427  000370  #constant  Strings10StartL   0x3600
005428  000370  #constant  Strings10StartL   0x3600
005429  000371  #constant  Strings7StartH   0x0
005430  000371  #constant  Strings7StartH   0x0
005431  000372  #constant  Strings7StartL   0x3800
005432  000372  #constant  Strings7StartL   0x3800
005433  000373  #constant  Strings8StartH   0x0
005434  000373  #constant  Strings8StartH   0x0
005435  000374  #constant  Strings8StartL   0x3A00
005436  000374  #constant  Strings8StartL   0x3A00
005437  000375  #constant  Strings38StartH   0x0
005438  000375  #constant  Strings38StartH   0x0
005439  000376  #constant  Strings38StartL   0x3C00
005440  000376  #constant  Strings38StartL   0x3C00
005441  000377  #constant  Strings39StartH   0x0
005442  000377  #constant  Strings39StartH   0x0
005443  000378  #constant  Strings39StartL   0x3E00
005444  000378  #constant  Strings39StartL   0x3E00
005445  000379  #constant  Strings40StartH   0x0
005446  000379  #constant  Strings40StartH   0x0
005447  000380  #constant  Strings40StartL   0x4000
005448  000380  #constant  Strings40StartL   0x4000
005449  000381  #constant  Strings41StartH   0x0
005450  000381  #constant  Strings41StartH   0x0
005451  000382  #constant  Strings41StartL   0x4200
005452  000382  #constant  Strings41StartL   0x4200
005453  000383  #constant  Strings42StartH   0x0
005454  000383  #constant  Strings42StartH   0x0
005455  000384  #constant  Strings42StartL   0x4400
005456  000384  #constant  Strings42StartL   0x4400
005457  000385  #constant  Strings43StartH   0x0
005458  000385  #constant  Strings43StartH   0x0
005459  000386  #constant  Strings43StartL   0x4600
005460  000386  #constant  Strings43StartL   0x4600
005461  000387  #constant  Strings44StartH   0x0
005462  000387  #constant  Strings44StartH   0x0
005463  000388  #constant  Strings44StartL   0x4800
005464  000388  #constant  Strings44StartL   0x4800
005465  000389  #constant  Strings45StartH   0x0
005466  000389  #constant  Strings45StartH   0x0
005467  000390  #constant  Strings45StartL   0x4A00
005468  000390  #constant  Strings45StartL   0x4A00
005469  000391  #constant  Strings51StartH   0x0
005470  000391  #constant  Strings51StartH   0x0
005471  000392  #constant  Strings51StartL   0x4C00
005472  000392  #constant  Strings51StartL   0x4C00
005473  000393  #constant  Strings52StartH   0x0
005474  000393  #constant  Strings52StartH   0x0
005475  000394  #constant  Strings52StartL   0x4E00
005476  000394  #constant  Strings52StartL   0x4E00
005477  000395  #constant  Strings17StartH   0x0
005478  000395  #constant  Strings17StartH   0x0
005479  000396  #constant  Strings17StartL   0x5000
005480  000396  #constant  Strings17StartL   0x5000
005481  000397  #constant  Strings18StartH   0x0
005482  000397  #constant  Strings18StartH   0x0
005483  000398  #constant  Strings18StartL   0x5200
005484  000398  #constant  Strings18StartL   0x5200
005485  000399  #constant  Strings19StartH   0x0
005486  000399  #constant  Strings19StartH   0x0
005487  000400  #constant  Strings19StartL   0x5400
005488  000400  #constant  Strings19StartL   0x5400
005489  000401  #constant  Strings29StartH   0x0
005490  000401  #constant  Strings29StartH   0x0
005491  000402  #constant  Strings29StartL   0x5600
005492  000402  #constant  Strings29StartL   0x5600
005493  000403  #constant  Strings30StartH   0x0
005494  000403  #constant  Strings30StartH   0x0
005495  000404  #constant  Strings30StartL   0x5800
005496  000404  #constant  Strings30StartL   0x5800
005497  000405  #constant  Strings31StartH   0x0
005498  000405  #constant  Strings31StartH   0x0
005499  000406  #constant  Strings31StartL   0x5A00
005500  000406  #constant  Strings31StartL   0x5A00
005501  000407  #constant  Strings32StartH   0x0
005502  000407  #constant  Strings32StartH   0x0
005503  000408  #constant  Strings32StartL   0x5C00
005504  000408  #constant  Strings32StartL   0x5C00
005505  000409  #constant  Strings49StartH   0x0
005506  000409  #constant  Strings49StartH   0x0
005507  000410  #constant  Strings49StartL   0x5E00
005508  000410  #constant  Strings49StartL   0x5E00
005509  000411  #constant  Strings50StartH   0x0
005510  000411  #constant  Strings50StartH   0x0
005511  000412  #constant  Strings50StartL   0x6000
005512  000412  #constant  Strings50StartL   0x6000
005513  000413  #constant  Strings13StartH   0x0
005514  000413  #constant  Strings13StartH   0x0
005515  000414  #constant  Strings13StartL   0x6200
005516  000414  #constant  Strings13StartL   0x6200
005517  000415  #constant  Strings46StartH   0x0
005518  000415  #constant  Strings46StartH   0x0
005519  000416  #constant  Strings46StartL   0x6400
005520  000416  #constant  Strings46StartL   0x6400
005521  000417  #constant  Strings47StartH   0x0
005522  000417  #constant  Strings47StartH   0x0
005523  000418  #constant  Strings47StartL   0x6600
005524  000418  #constant  Strings47StartL   0x6600
005525  000419  #constant  Strings48StartH   0x0
005526  000419  #constant  Strings48StartH   0x0
005527  000420  #constant  Strings48StartL   0x6800
005528  000420  #constant  Strings48StartL   0x6800
005529  000421  #constant  Strings53StartH   0x0
005530  000421  #constant  Strings53StartH   0x0
005531  000422  #constant  Strings53StartL   0x6A00
005532  000422  #constant  Strings53StartL   0x6A00
005533  000423  #IFNOT EXISTS NOGLOBALS
005534  000424  var hndl ;
005535  000425  #ENDIF
005536  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005537  000013  #inherit "CLPrintStrings.inc"
005538  000013  #inherit "CLPrintStrings.inc"
005539  000001  func PrintStrings(var ID, var *msgid, var String)
005540  000002      var StringID, i, ch, offs32[2], res32[2];
005541  000003      StringID := oStringss[1+ID] ;
005542  000004      if (String)
005543  000005          stringsCV[ID] := -1 ;
005544  000006      else
005545  000007          stringsCV[ID] := msgid ;
005546  000008      endif
005547  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005548  000010      txt_FontID(hFonts[ID]) ;
005549  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005550  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005551  000013        
005552  000014      if (*(StringID + Ofs_String_Transparent))
005553  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005554  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005555  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005556  000018      else
005557  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005558  000020          gfx_Clipping(ON) ;
005559  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005560  000022          gfx_Clipping(OFF) ;
005561  000023        
005562  000024      endif
005563  000025        
005564  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005565  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005566  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005567  000029        
005568  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005569  000031        
005570  000032      if (String)
005571  000033          i := 0 ;
005572  000034          ch := msgid[i++] ;
005573  000035          while (ch != 0)
005574  000036              putch(ch) ;
005575  000037              ch := msgid[i++] ;
005576  000038          wend
005577  000039      else
005578  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005579  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005580  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005581  000043          uadd_3232(res32,res32,offs32) ;
005582  000044          file_Seek(hstrings, res32[1], res32[0]);
005583  000045          repeat
005584  000046              if (*(StringID + Ofs_String_Ansi))
005585  000047                  ch := file_GetC(hstrings) ;
005586  000048              else
005587  000049                  ch := file_GetW(hstrings) ;
005588  000050              endif
005589  000051              putch(ch) ;
005590  000052          until (ch == 0) ;
005591  000053      endif
005592  000054        
005593  000055  endfunc
005594  000056        
005595  000014        
005596  000015  #constant IPDatasize 22
005597  000015  #constant IPDatasize 22
005598  000016        
005599  000017  #CONST
005600  000021  #END
005601  000022        
005602  000023  #CONST
005603  000130  #END
005604  000131        
005605  000555  #END
5606  26A4
5607  26A5
5608  26A6
5609  26A7
5610  26A8
5611  26A9
5612  26AA
5613  26AB
5614  26AC
5615  26AD
5616  26AE
5617  26AF
5618  26B0
5619  26B1
5620  26B2
5621  26B3
5622  26B4
5623  26B5
5624  26B6
5625  26B7
5626  26B8
5627  26B9
5628  26BA
5629  26BB
5630  26BC
5631  26BD
5632  26BE
5633  26BF
5634  26C0
5635  26C1
5636  26C2
5637  26C3
5638  26C4
5639  26C5
5640  26C6
5641  26C7
5642  26C8
5643  26C9
5644  26CA
5645  26CB
5646  26CC
5647  26CD
5648  26CE
5649  26CF
5650  26D0
5651  26D1
5652  26D2
5653  26D3
5654  26D4
5655  26D5
5656  26D6
5657  26D7
5658  26D8
5659  26D9
5660  26DA
5661  26DB
5662  26DC
5663  26DD
5664  26DE
5665  26DF
5666  26E0
5667  26E1
5668  26E2
5669  26E3
5670  26E4
5671  26E5
5672  26E6
5673  26E7
5674  26E8
5675  26E9
5676  26EA
5677  26EB
5678  26EC
5679  26ED
5680  26EE
5681  26EF
5682  26F0
5683  26F1
5684  26F2
5685  26F3
5686  26F4
5687  26F5
5688  26F6
5689  26F7
5690  26F8
5691  26F9
5692  26FA
5693  26FB
5694  26FC
5695  26FD
5696  26FE
5697  26FF
5698  2700
5699  2701
5700  2702
5701  2703
5702  2704
5703  2705
5704  2706
5705  2707
5706  2708
5707  2709
5708  270A
5709  270B
5710  270C
5711  270D
5712  270E
5713  270F
5714  2710
5715  2711
5716  2712
5717  2713
5718  2714
5719  2715
5720  2716
5721  2717
5722  2718
5723  2719
5724  271A
5725  271B
5726  271C
5727  271D
5728  271E
5729  271F
5730  2720
5731  2721
5732  2722
5733  2723
5734  2724
5735  2725
5736  2726
5737  2727
5738  2728
5739  2729
5740  272A
5741  272B
5742  272C
5743  272D
5744  272E
5745  272F
5746  2730
5747  2731
5748  2732
5749  2733
5750  2734
5751  2735
5752  2736
5753  2737
5754  2738
5755  2739
5756  273A
5757  273B
5758  273C
5759  273D
5760  273E
5761  273F
5762  2740
5763  2741
5764  2742
5765  2743
5766  2744
5767  2745
5768  2746
5769  2747
5770  2748
5771  2749
5772  274A
5773  274B
5774  274C
5775  274D
5776  274E
5777  274F
5778  2750
5779  2751
5780  2752
5781  2753
5782  2754
5783  2755
5784  2756
5785  2757
5786  2758
5787  2759
5788  275A
5789  275B
5790  275C
5791  275D
5792  275E
5793  275F
5794  2760
5795  2761
5796  2762
5797  2763
5798  2764
5799  2765
5800  2766
5801  2767
5802  2768
5803  2769
5804  276A
5805  276B
5806  276C
5807  276D
5808  276E
5809  276F
5810  2770
5811  2771
5812  2772
5813  2773
5814  2774
5815  2775
5816  2776
5817  2777
5818  2778
5819  2779
5820  277A
5821  277B
5822  277C
5823  277D
5824  277E
5825  277F
5826  2780
5827  2781
5828  2782
5829  2783
5830  2784
5831  2785
5832  2786
5833  2787
5834  2788
5835  2789
5836  278A
5837  278B
5838  278C
5839  278D
5840  278E
5841  278F
5842  2790
5843  2791
5844  2792
5845  2793
5846  2794
5847  2795
5848  2796
5849  2797
5850  2798
5851  2799
5852  279A
5853  279B
5854  279C
5855  279D
5856  279E
5857  279F
5858  27A0
5859  27A1
5860  27A2
5861  27A3
5862  27A4
5863  27A5
5864  27A6
5865  27A7
5866  27A8
5867  27A9
5868  27AA
5869  27AB
5870  27AC
5871  27AD
5872  27AE
5873  27AF
5874  27B0
5875  27B1
5876  27B2
5877  27B3
5878  27B4
5879  27B5
5880  27B6
5881  27B7
5882  27B8
5883  27B9
5884  27BA
5885  27BB
5886  27BC
5887  27BD
5888  27BE
5889  27BF
5890  27C0
5891  27C1
5892  27C2
5893  27C3
5894  27C4
5895  27C5
5896  27C6
5897  27C7
5898  27C8
5899  27C9
5900  27CA
5901  27CB
5902  27CC
5903  27CD
5904  27CE
5905  27CF
5906  27D0
5907  27D1
5908  27D2
5909  27D3
5910  27D4
5911  27D5
5912  27D6
5913  27D7
5914  27D8
5915  27D9
5916  27DA
5917  27DB
5918  27DC
5919  27DD
5920  27DE
5921  27DF
5922  27E0
5923  27E1
5924  27E2
5925  27E3
5926  27E4
5927  27E5
5928  27E6
5929  27E7
5930  27E8
5931  27E9
5932  27EA
5933  27EB
5934  27EC
5935  27ED
5936  27EE
5937  27EF
5938  27F0
5939  27F1
5940  27F2
5941  27F3
5942  27F4
5943  27F5
5944  27F6
5945  27F7
5946  27F8
5947  27F9
5948  27FA
5949  27FB
5950  27FC
5951  27FD
5952  27FE
5953  27FF
5954  2800
5955  2801
5956  2802
5957  2803
5958  2804
5959  2805
5960  2806
5961  2807
5962  2808
5963  2809
5964  280A
5965  280B
5966  280C
5967  280D
5968  280E
5969  280F
5970  2810
5971  2811
5972  2812
5973  2813
5974  2814
5975  2815
5976  2816
5977  2817
5978  2818
5979  2819
5980  281A
5981  281B
5982  281C
5983  281D
5984  281E
5985  281F
5986  2820
5987  2821
5988  2822
5989  2823
5990  2824
5991  2825
5992  2826
5993  2827
5994  2828
5995  2829
5996  282A
5997  282B
5998  282C
5999  282D
6000  282E
6001  282F
6002  2830
6003  2831
6004  2832
6005  2833
6006  2834
6007  2835
6008  2836
6009  2837
6010  2838
6011  2839
6012  283A
6013  283B
6014  283C
6015  283D
6016  283E
6017  283F
6018  2840
6019  2841
6020  2842
6021  2843
6022  2844
6023  2845
6024  2846
6025  2847
6026  2848
6027  2849
6028  284A
6029  284B
6030  284C
6031  284D
6032  284E
6033  284F
6034  2850
6035  2851
6036  2852
6037  2853
6038  2854
6039  2855
6040  2856
6041  2857
6042  2858
6043  2859
6044  285A
6045  285B
6046  285C
6047  285D
6048  285E
6049  285F
6050  2860
6051  2861
6052  2862
6053  2863
6054  2864
6055  2865
6056  2866
6057  2867
6058  2868
6059  2869
6060  286A
6061  286B
6062  286C
6063  286D
6064  286E
6065  286F
6066  2870
6067  2871
6068  2872
6069  2873
6070  2874
6071  2875
6072  2876
6073  2877
6074  2878
6075  2879
6076  287A
6077  287B
6078  287C
6079  287D
6080  287E
6081  287F
6082  2880
6083  2881
6084  2882
6085  2883
6086  2884
6087  2885
6088  2886
6089  2887
6090  2888
6091  2889
6092  288A
6093  288B
6094  288C
6095  288D
6096  288E
6097  288F
6098  2890
6099  2891
6100  2892
6101  2893
6102  2894
6103  2895
6104  2896
6105  2897
6106  2898
6107  2899
6108  289A
6109  289B
6110  289C
6111  289D
6112  289E
6113  289F
6114  28A0
6115  28A1
6116  28A2
6117  28A3
6118  28A4
6119  28A5
6120  28A6
6121  28A7
6122  28A8
6123  28A9
6124  28AA
6125  28AB
6126  28AC
6127  28AD
6128  28AE
6129  28AF
6130  28B0
6131  28B1
6132  28B2
6133  28B3
6134  28B4
6135  28B5
6136  28B6
6137  28B7
6138  28B8
6139  28B9
6140  28BA
6141  28BB
6142  28BC
6143  28BD
6144  28BE
6145  28BF
6146  28C0
6147  28C1
6148  28C2
6149  28C3
6150  28C4
6151  28C5
6152  28C6
6153  28C7
6154  28C8
6155  28C9
6156  28CA
6157  28CB
6158  28CC
6159  28CD
6160  28CE
6161  28CF
6162  28D0
6163  28D1
6164  28D2
6165  28D3
6166  28D4
6167  28D5
6168  28D6
6169  28D7
6170  28D8
6171  28D9
6172  28DA
6173  28DB
6174  28DC
6175  28DD
6176  28DE
6177  28DF
6178  28E0
6179  28E1
6180  28E2
6181  28E3
6182  28E4
6183  28E5
6184  28E6
6185  28E7
6186  28E8
6187  28E9
6188  28EA
6189  28EB
6190  28EC
6191  28ED
6192  28EE
6193  28EF
6194  28F0
6195  28F1
6196  28F2
6197  28F3
6198  28F4
6199  28F5
6200  28F6
6201  28F7
6202  28F8
6203  28F9
6204  28FA
6205  28FB
6206  28FC
6207  28FD
6208  28FE
6209  28FF
6210  2900
6211  2901
6212  2902
6213  2903
6214  2904
6215  2905
6216  2906
6217  2907
6218  2908
6219  2909
6220  290A
6221  290B
6222  290C
6223  290D
6224  290E
6225  290F
6226  2910
6227  2911
6228  2912
6229  2913
6230  2914
6231  2915
6232  2916
6233  2917
6234  2918
6235  2919
6236  291A
6237  291B
6238  291C
6239  291D
6240  291E
6241  291F
6242  2920
6243  2921
6244  2922
6245  2923
6246  2924
6247  2925
6248  2926
6249  2927
6250  2928
6251  2929
6252  292A
6253  292B
6254  292C
6255  292D
6256  292E
6257  292F
6258  2930
6259  2931
6260  2932
6261  2933
6262  2934
6263  2935
6264  2936
6265  2937
6266  2938
6267  2939
6268  293A
6269  293B
6270  293C
6271  293D
6272  293E
6273  293F
6274  2940
6275  2941
6276  2942
6277  2943
6278  2944
6279  2945
6280  2946
6281  2947
6282  2948
6283  2949
6284  294A
6285  294B
6286  294C
6287  294D
6288  294E
6289  294F
6290  2950
6291  2951
6292  2952
6293  2953
6294  2954
6295  2955
6296  2956
6297  2957
6298  2958
6299  2959
6300  295A
6301  295B
6302  295C
6303  295D
6304  295E
6305  295F
6306  2960
6307  2961
6308  2962
6309  2963
6310  2964
6311  2965
6312  2966
6313  2967
6314  2968
6315  2969
6316  296A
6317  296B
6318  296C
6319  296D
6320  296E
6321  296F
6322  2970
6323  2971
6324  2972
6325  2973
6326  2974
6327  2975
6328  2976
6329  2977
6330  2978
6331  2979
6332  297A
6333  297B
6334  297C
6335  297D
6336  297E
6337  297F
6338  2980
6339  2981
6340  2982
6341  2983
6342  2984
6343  2985
6344  2986
6345  2987
6346  2988
6347  2989
6348  298A
6349  298B
6350  298C
6351  298D
6352  298E
6353  298F
6354  2990
6355  2991
6356  2992
6357  2993
6358  2994
6359  2995
6360  2996
6361  2997
6362  2998
6363  2999
6364  299A
6365  299B
6366  299C
6367  299D
6368  299E
6369  299F
6370  29A0
6371  29A1
6372  29A2
6373  29A3
6374  29A4
6375  29A5
6376  29A6
6377  29A7
6378  29A8
6379  29A9
6380  29AA
6381  29AB
6382  29AC
6383  29AD
6384  29AE
6385  29AF
6386  29B0
6387  29B1
6388  29B2
6389  29B3
6390  29B4
6391  29B5
6392  29B6
6393  29B7
6394  29B8
6395  29B9
6396  29BA
6397  29BB
6398  29BC
6399  29BD
6400  29BE
6401  29BF
6402  29C0
6403  29C1
6404  29C2
6405  29C3
6406  29C4
6407  29C5
6408  29C6
6409  29C7
6410  29C8
6411  29C9
6412  29CA
6413  29CB
6414  29CC
6415  29CD
6416  29CE
6417  29CF
6418  29D0
6419  29D1
6420  29D2
6421  29D3
6422  29D4
6423  29D5
6424  29D6
6425  29D7
6426  29D8
6427  29D9
6428  29DA
6429  29DB
6430  29DC
6431  29DD
6432  29DE
6433  29DF
6434  29E0
6435  29E1
6436  29E2
6437  29E3
6438  29E4
6439  29E5
6440  29E6
6441  29E7
6442  29E8
6443  29E9
6444  29EA
6445  29EB
6446  29EC
6447  29ED
6448  29EE
6449  29EF
6450  29F0
6451  29F1
6452  29F2
6453  29F3
6454  29F4
6455  29F5
6456  29F6
6457  29F7
6458  29F8
6459  29F9
6460  29FA
6461  29FB
6462  29FC
6463  29FD
6464  29FE
6465  29FF
6466  2A00
6467  2A01
6468  2A02
6469  2A03
6470  2A04
6471  2A05
6472  2A06
6473  2A07
6474  2A08
6475  2A09
6476  2A0A
6477  2A0B
6478  2A0C
6479  2A0D
6480  2A0E
6481  2A0F
6482  2A10
6483  2A11
6484  2A12
6485  2A13
6486  2A14
6487  2A15
6488  2A16
6489  2A17
6490  2A18
6491  2A19
6492  2A1A
6493  2A1B
6494  2A1C
6495  2A1D
6496  2A1E
6497  2A1F
6498  2A20
6499  2A21
6500  2A22
6501  2A23
6502  2A24
6503  2A25
6504  2A26
6505  2A27
6506  2A28
6507  2A29
6508  2A2A
6509  2A2B
6510  2A2C
6511  2A2D
6512  2A2E
6513  2A2F
6514  2A30
6515  2A31
6516  2A32
6517  2A33
6518  2A34
6519  2A35
6520  2A36
6521  2A37
6522  2A38
6523  2A39
6524  2A3A
6525  2A3B
6526  2A3C
6527  2A3D
6528  2A3E
6529  2A3F
6530  2A40
6531  2A41
6532  2A42
6533  2A43
6534  2A44
6535  2A45
6536  2A46
6537  2A47
6538  2A48
6539  2A49
6540  2A4A
6541  2A4B
6542  2A4C
6543  2A4D
6544  2A4E
6545  2A4F
6546  2A50
6547  2A51
6548  2A52
6549  2A53
6550  2A54
6551  2A55
6552  2A56
6553  2A57
6554  2A58
6555  2A59
6556  2A5A
6557  2A5B
6558  2A5C
6559  2A5D
6560  2A5E
6561  2A5F
6562  2A60
6563  2A61
6564  2A62
6565  2A63
6566  2A64
6567  2A65
6568  2A66
6569  2A67
6570  2A68
6571  2A69
6572  2A6A
6573  2A6B
6574  2A6C
6575  2A6D
6576  2A6E
6577  2A6F
6578  2A70
6579  2A71
6580  2A72
6581  2A73
6582  2A74
6583  2A75
6584  2A76
6585  2A77
6586  2A78
6587  2A79
6588  2A7A
6589  2A7B
6590  2A7C
6591  2A7D
6592  2A7E
6593  2A7F
6594  2A80
6595  2A81
6596  2A82
6597  2A83
6598  2A84
6599  2A85
6600  2A86
6601  2A87
6602  2A88
6603  2A89
6604  2A8A
6605  2A8B
6606  2A8C
6607  2A8D
6608  2A8E
6609  2A8F
6610  2A90
6611  2A91
6612  2A92
6613  2A93
6614  2A94
6615  2A95
6616  2A96
6617  2A97
6618  2A98
6619  2A99
6620  2A9A
6621  2A9B
6622  2A9C
6623  2A9D
6624  2A9E
6625  2A9F
6626  2AA0
6627  2AA1
6628  2AA2
6629  2AA3
6630  2AA4
6631  2AA5
6632  2AA6
6633  2AA7
6634  2AA8
6635  2AA9
6636  2AAA
6637  2AAB
6638  2AAC
6639  2AAD
6640  2AAE
6641  2AAF
6642  2AB0
6643  2AB1
6644  2AB2
6645  2AB3
6646  2AB4
6647  2AB5
6648  2AB6
6649  2AB7
6650  2AB8
6651  2AB9
6652  2ABA
6653  2ABB
6654  2ABC
6655  2ABD
6656  2ABE
6657  2ABF
6658  2AC0
6659  2AC1
6660  2AC2
6661  2AC3
6662  2AC4
6663  2AC5
6664  2AC6
6665  2AC7
6666  2AC8
6667  2AC9
6668  2ACA
6669  2ACB
6670  2ACC
6671  2ACD
6672  2ACE
6673  2ACF
6674  2AD0
6675  2AD1
6676  2AD2
6677  2AD3
6678  2AD4
6679  2AD5
6680  2AD6
6681  2AD7
6682  2AD8
6683  2AD9
6684  2ADA
6685  2ADB
6686  2ADC
6687  2ADD
6688  2ADE
6689  2ADF
6690  2AE0
6691  2AE1
6692  2AE2
6693  2AE3
6694  2AE4
6695  2AE5
6696  2AE6
6697  2AE7
6698  2AE8
6699  2AE9
6700  2AEA
6701  2AEB
6702  2AEC
6703  2AED
6704  2AEE
6705  2AEF
6706  2AF0
6707  2AF1
6708  2AF2
6709  2AF3
6710  2AF4
6711  2AF5
6712  2AF6
6713  2AF7
6714  2AF8
6715  2AF9
6716  2AFA
6717  2AFB
6718  2AFC
6719  2AFD
6720  2AFE
6721  2AFF
6722  2B00
6723  2B01
6724  2B02
6725  2B03
6726  2B04
6727  2B05
6728  2B06
6729  2B07
6730  2B08
6731  2B09
6732  2B0A
6733  2B0B
6734  2B0C
6735  2B0D
6736  2B0E
6737  2B0F
6738  2B10
6739  2B11
6740  2B12
6741  2B13
6742  2B14
6743  2B15
6744  2B16
6745  2B17
6746  2B18
6747  2B19
6748  2B1A
6749  2B1B
6750  2B1C
6751  2B1D
6752  2B1E
6753  2B1F
6754  2B20
6755  2B21
6756  2B22
6757  2B23
6758  2B24
6759  2B25
6760  2B26
6761  2B27
6762  2B28
6763  2B29
6764  2B2A
6765  2B2B
6766  2B2C
6767  2B2D
6768  2B2E
6769  2B2F
6770  2B30
6771  2B31
6772  2B32
6773  2B33
6774  2B34
6775  2B35
6776  2B36
6777  2B37
6778  2B38
6779  2B39
6780  2B3A
6781  2B3B
6782  2B3C
6783  2B3D
6784  2B3E
6785  2B3F
6786  2B40
6787  2B41
6788  2B42
6789  2B43
6790  2B44
6791  2B45
6792  2B46
6793  2B47
6794  2B48
6795  2B49
6796  2B4A
6797  2B4B
6798  2B4C
6799  2B4D
6800  2B4E
6801  2B4F
6802  2B50
6803  2B51
6804  2B52
6805  2B53
6806  2B54
6807  2B55
6808  2B56
6809  2B57
6810  2B58
6811  2B59
6812  2B5A
6813  2B5B
6814  2B5C
6815  2B5D
6816  2B5E
6817  2B5F
6818  2B60
6819  2B61
6820  2B62
6821  2B63
6822  2B64
6823  2B65
6824  2B66
6825  2B67
6826  2B68
6827  2B69
6828  2B6A
6829  2B6B
6830  2B6C
6831  2B6D
6832  2B6E
6833  2B6F
6834  2B70
6835  2B71
6836  2B72
6837  2B73
6838  2B74
6839  2B75
6840  2B76
6841  2B77
6842  2B78
6843  2B79
6844  2B7A
6845  2B7B
6846  2B7C
6847  2B7D
6848  2B7E
6849  2B7F
6850  2B80
6851  2B81
6852  2B82
6853  2B83
6854  2B84
6855  2B85
6856  2B86
6857  2B87
6858  2B88
6859  2B89
6860  2B8A
6861  2B8B
6862  2B8C
6863  2B8D
6864  2B8E
6865  2B8F
6866  2B90
6867  2B91
6868  2B92
6869  2B93
6870  2B94
6871  2B95
6872  2B96
6873  2B97
6874  2B98
6875  2B99
6876  2B9A
6877  2B9B
6878  2B9C
6879  2B9D
6880  2B9E
6881  2B9F
6882  2BA0
6883  2BA1
6884  2BA2
6885  2BA3
6886  2BA4
6887  2BA5
6888  2BA6
6889  2BA7
6890  2BA8
6891  2BA9
6892  2BAA
6893  2BAB
6894  2BAC
6895  2BAD
6896  2BAE
6897  2BAF
6898  2BB0
6899  2BB1
6900  2BB2
6901  2BB3
6902  2BB4
6903  2BB5
6904  2BB6
6905  2BB7
6906  2BB8
6907  2BB9
6908  2BBA
6909  2BBB
6910  2BBC
6911  2BBD
6912  2BBE
6913  2BBF
6914  2BC0
6915  2BC1
6916  2BC2
6917  2BC3
6918  2BC4
6919  2BC5
6920  2BC6
6921  2BC7
6922  2BC8
6923  2BC9
6924  2BCA
6925  2BCB
6926  2BCC
6927  2BCD
6928  2BCE
6929  2BCF
6930  2BD0
6931  2BD1
6932  2BD2
6933  2BD3
6934  2BD4
6935  2BD5
6936  2BD6
6937  2BD7
6938  2BD8
6939  2BD9
6940  2BDA
6941  2BDB
6942  2BDC
6943  2BDD
6944  2BDE
6945  2BDF
6946  2BE0
6947  2BE1
6948  2BE2
6949  2BE3
6950  2BE4
6951  2BE5
6952  2BE6
6953  2BE7
6954  2BE8
6955  2BE9
6956  2BEA
6957  2BEB
6958  2BEC
6959  2BED
6960  2BEE
6961  2BEF
6962  2BF0
6963  2BF1
6964  2BF2
6965  2BF3
6966  2BF4
6967  2BF5
6968  2BF6
6969  2BF7
6970  2BF8
6971  2BF9
6972  2BFA
6973  2BFB
6974  2BFC
6975  2BFD
6976  2BFE
6977  2BFF
6978  2C00
6979  2C01
6980  2C02
6981  2C03
6982  2C04
6983  2C05
6984  2C06
6985  2C07
6986  2C08
6987  2C09
6988  2C0A
6989  2C0B
6990  2C0C
6991  2C0D
6992  2C0E
6993  2C0F
6994  2C10
6995  2C11
6996  2C12
6997  2C13
6998  2C14
6999  2C15
7000  2C16
7001  2C17
7002  2C18
7003  2C19
7004  2C1A
7005  2C1B
7006  2C1C
7007  2C1D
7008  2C1E
7009  2C1F
7010  2C20
7011  2C21
7012  2C22
7013  2C23
7014  2C24
7015  2C25
7016  2C26
7017  2C27
7018  2C28
7019  2C29
7020  2C2A
7021  2C2B
7022  2C2C
7023  2C2D
7024  2C2E
7025  2C2F
7026  2C30
7027  2C31
7028  2C32
7029  2C33
7030  2C34
7031  2C35
7032  2C36
7033  2C37
7034  2C38
7035  2C39
7036  2C3A
7037  2C3B
7038  2C3C
7039  2C3D
7040  2C3E
7041  2C3F
7042  2C40
7043  2C41
7044  2C42
7045  2C43
7046  2C44
7047  2C45
7048  2C46
7049  2C47
7050  2C48
7051  2C49
7052  2C4A
7053  2C4B
7054  2C4C
7055  2C4D
7056  2C4E
7057  2C4F
7058  2C50
7059  2C51
7060  2C52
7061  2C53
7062  2C54
7063  2C55
7064  2C56
7065  2C57
7066  2C58
7067  2C59
7068  2C5A
7069  2C5B
7070  2C5C
7071  2C5D
7072  2C5E
7073  2C5F
7074  2C60
7075  2C61
7076  2C62
7077  2C63
7078  2C64
7079  2C65
7080  2C66
7081  2C67
7082  2C68
7083  2C69
7084  2C6A
7085  2C6B
7086  2C6C
7087  2C6D
7088  2C6E
7089  2C6F
7090  2C70
7091  2C71
7092  2C72
7093  2C73
7094  2C74
7095  2C75
7096  2C76
7097  2C77
7098  2C78
7099  2C79
7100  2C7A
7101  2C7B
7102  2C7C
7103  2C7D
7104  2C7E
7105  2C7F
7106  2C80
7107  2C81
7108  2C82
7109  2C83
7110  2C84
7111  2C85
7112  2C86
7113  2C87
7114  2C88
7115  2C89
7116  2C8A
7117  2C8B
7118  2C8C
7119  2C8D
7120  2C8E
7121  2C8F
7122  2C90
7123  2C91
7124  2C92
7125  2C93
7126  2C94
7127  2C95
7128  2C96
7129  2C97
7130  2C98
7131  2C99
7132  2C9A
7133  2C9B
7134  2C9C
7135  2C9D
7136  2C9E
7137  2C9F
7138  2CA0
7139  2CA1
7140  2CA2
7141  2CA3
7142  2CA4
7143  2CA5
7144  2CA6
7145  2CA7
7146  2CA8
7147  2CA9
7148  2CAA
7149  2CAB
7150  2CAC
7151  2CAD
7152  2CAE
7153  2CAF
7154  2CB0
7155  2CB1
7156  2CB2
7157  2CB3
7158  2CB4
7159  2CB5
7160  2CB6
7161  2CB7
7162  2CB8
7163  2CB9
7164  2CBA
7165  2CBB
7166  2CBC
7167  2CBD
7168  2CBE
7169  2CBF
7170  2CC0
7171  2CC1
7172  2CC2
7173  2CC3
7174  2CC4
7175  2CC5
7176  2CC6
7177  2CC7
7178  2CC8
7179  2CC9
7180  2CCA
7181  2CCB
7182  2CCC
7183  2CCD
7184  2CCE
7185  2CCF
7186  2CD0
7187  2CD1
7188  2CD2
7189  2CD3
7190  2CD4
7191  2CD5
7192  2CD6
7193  2CD7
7194  2CD8
7195  2CD9
7196  2CDA
7197  2CDB
7198  2CDC
7199  2CDD
7200  2CDE
7201  2CDF
7202  2CE0
7203  2CE1
7204  2CE2
7205  2CE3
7206  2CE4
7207  2CE5
7208  2CE6
7209  2CE7
7210  2CE8
7211  2CE9
7212  2CEA
7213  2CEB
7214  2CEC
7215  2CED
7216  2CEE
7217  2CEF
7218  2CF0
7219  2CF1
7220  2CF2
7221  2CF3
7222  2CF4
7223  2CF5
7224  2CF6
7225  2CF7
7226  2CF8
7227  2CF9
7228  2CFA
7229  2CFB
7230  2CFC
7231  2CFD
7232  2CFE
7233  2CFF
7234  2D00
7235  2D01
7236  2D02
7237  2D03
7238  2D04
7239  2D05
7240  2D06
7241  2D07
7242  2D08
7243  2D09
7244  2D0A
7245  2D0B
7246  2D0C
7247  2D0D
7248  2D0E
7249  2D0F
7250  2D10
7251  2D11
7252  2D12
7253  2D13
7254  2D14
7255  2D15
7256  2D16
7257  2D17
7258  2D18
7259  2D19
7260  2D1A
7261  2D1B
7262  2D1C
7263  2D1D
7264  2D1E
7265  2D1F
7266  2D20
7267  2D21
7268  2D22
7269  2D23
7270  2D24
7271  2D25
7272  2D26
7273  2D27
7274  2D28
7275  2D29
7276  2D2A
7277  2D2B
7278  2D2C
7279  2D2D
7280  2D2E
7281  2D2F
7282  2D30
7283  2D31
7284  2D32
7285  2D33
7286  2D34
7287  2D35
7288  2D36
7289  2D37
7290  2D38
7291  2D39
7292  2D3A
7293  2D3B
7294  2D3C
7295  2D3D
7296  2D3E
7297  2D3F
7298  2D40
7299  2D41
7300  2D42
7301  2D43
7302  2D44
7303  2D45
7304  2D46
7305  2D47
7306  2D48
7307  2D49
7308  2D4A
7309  2D4B
7310  2D4C
7311  2D4D
7312  2D4E
7313  2D4F
7314  2D50
7315  2D51
7316  2D52
7317  2D53
7318  2D54
7319  2D55
7320  2D56
7321  2D57
7322  2D58
7323  2D59
7324  2D5A
7325  2D5B
7326  2D5C
7327  2D5D
7328  2D5E
7329  2D5F
7330  2D60
7331  2D61
7332  2D62
7333  2D63
7334  2D64
7335  2D65
7336  2D66
7337  2D67
7338  2D68
7339  2D69
7340  2D6A
7341  2D6B
7342  2D6C
7343  2D6D
7344  2D6E
7345  2D6F
7346  2D70
7347  2D71
7348  2D72
7349  2D73
7350  2D74
7351  2D75
7352  2D76
7353  2D77
7354  2D78
7355  2D79
7356  2D7A
7357  2D7B
7358  2D7C
7359  2D7D
7360  2D7E
7361  2D7F
7362  2D80
7363  2D81
7364  2D82
7365  2D83
7366  2D84
7367  2D85
7368  2D86
7369  2D87
7370  2D88
7371  2D89
7372  2D8A
7373  2D8B
7374  2D8C
7375  2D8D
7376  2D8E
7377  2D8F
7378  2D90
7379  2D91
7380  2D92
7381  2D93
7382  2D94
7383  2D95
7384  2D96
7385  2D97
7386  2D98
7387  2D99
7388  2D9A
7389  2D9B
7390  2D9C
7391  2D9D
7392  2D9E
7393  2D9F
7394  2DA0
7395  2DA1
7396  2DA2
7397  2DA3
7398  2DA4
7399  2DA5
7400  2DA6
7401  2DA7
7402  2DA8
7403  2DA9
7404  2DAA
7405  2DAB
7406  2DAC
7407  2DAD
7408  2DAE
7409  2DAF
7410  2DB0
7411  2DB1
7412  2DB2
7413  2DB3
7414  2DB4
7415  2DB5
7416  2DB6
7417  2DB7
7418  2DB8
7419  2DB9
7420  2DBA
7421  2DBB
7422  2DBC
7423  2DBD
7424  2DBE
7425  2DBF
7426  2DC0
7427  2DC1
7428  2DC2
7429  2DC3
7430  2DC4
7431  2DC5
7432  2DC6
7433  2DC7
7434  2DC8
7435  2DC9
7436  2DCA
7437  2DCB
7438  2DCC
7439  2DCD
7440  2DCE
7441  2DCF
7442  2DD0
7443  2DD1
7444  2DD2
7445  2DD3
7446  2DD4
7447  2DD5
7448  2DD6
7449  2DD7
7450  2DD8
7451  2DD9
7452  2DDA
7453  2DDB
7454  2DDC
7455  2DDD
7456  2DDE
7457  2DDF
7458  2DE0
7459  2DE1
7460  2DE2
7461  2DE3
7462  2DE4
7463  2DE5
7464  2DE6
7465  2DE7
7466  2DE8
7467  2DE9
7468  2DEA
7469  2DEB
7470  2DEC
7471  2DED
7472  2DEE
7473  2DEF
7474  2DF0
7475  2DF1
7476  2DF2
7477  2DF3
7478  2DF4
7479  2DF5
7480  2DF6
7481  2DF7
7482  2DF8
7483  2DF9
7484  2DFA
7485  2DFB
7486  2DFC
7487  2DFD
7488  2DFE
7489  2DFF
7490  2E00
7491  2E01
7492  2E02
7493  2E03
7494  2E04
7495  2E05
7496  2E06
7497  2E07
7498  2E08
7499  2E09
7500  2E0A
7501  2E0B
7502  2E0C
7503  2E0D
7504  2E0E
7505  2E0F
7506  2E10
7507  2E11
7508  2E12
7509  2E13
7510  2E14
7511  2E15
7512  2E16
7513  2E17
7514  2E18
7515  2E19
7516  2E1A
7517  2E1B
7518  2E1C
7519  2E1D
7520  2E1E
7521  2E1F
7522  2E20
7523  2E21
7524  2E22
7525  2E23
7526  2E24
7527  2E25
7528  2E26
7529  2E27
7530  2E28
7531  2E29
7532  2E2A
7533  2E2B
7534  2E2C
7535  2E2D
7536  2E2E
7537  2E2F
7538  2E30
7539  2E31
7540  2E32
7541  2E33
7542  2E34
7543  2E35
7544  2E36
7545  2E37
7546  2E38
7547  2E39
7548  2E3A
7549  2E3B
7550  2E3C
7551  2E3D
7552  2E3E
7553  2E3F
7554  2E40
7555  2E41
7556  2E42
7557  2E43
7558  2E44
7559  2E45
7560  2E46
7561  2E47
7562  2E48
7563  2E49
7564  2E4A
7565  2E4B
7566  2E4C
7567  2E4D
7568  2E4E
7569  2E4F
7570  2E50
7571  2E51
7572  2E52
7573  2E53
7574  2E54
7575  2E55
7576  2E56
7577  2E57
7578  2E58
7579  2E59
7580  2E5A
7581  2E5B
7582  2E5C
7583  2E5D
7584  2E5E
7585  2E5F
7586  2E60
7587  2E61
7588  2E62
7589  2E63
7590  2E64
7591  2E65
7592  2E66
7593  2E67
7594  2E68
7595  2E69
7596  2E6A
7597  2E6B
7598  2E6C
7599  2E6D
7600  2E6E
7601  2E6F
7602  2E70
7603  2E71
7604  2E72
7605  2E73
7606  2E74
7607  2E75
7608  2E76
7609  2E77
7610  2E78
7611  2E79
7612  2E7A
7613  2E7B
7614  2E7C
7615  2E7D
7616  2E7E
7617  2E7F
7618  2E80
7619  2E81
7620  2E82
7621  2E83
7622  2E84
7623  2E85
7624  2E86
7625  2E87
7626  2E88
7627  2E89
7628  2E8A
7629  2E8B
7630  2E8C
7631  2E8D
7632  2E8E
7633  2E8F
7634  2E90
7635  2E91
7636  2E92
7637  2E93
7638  2E94
7639  2E95
7640  2E96
7641  2E97
7642  2E98
7643  2E99
7644  2E9A
7645  2E9B
7646  2E9C
7647  2E9D
7648  2E9E
7649  2E9F
7650  2EA0
7651  2EA1
7652  2EA2
7653  2EA3
7654  2EA4
7655  2EA5
7656  2EA6
7657  2EA7
7658  2EA8
7659  2EA9
7660  2EAA
7661  2EAB
7662  2EAC
7663  2EAD
7664  2EAE
7665  2EAF
7666  2EB0
7667  2EB1
7668  2EB2
7669  2EB3
7670  2EB4
7671  2EB5
7672  2EB6
7673  2EB7
7674  2EB8
7675  2EB9
7676  2EBA
7677  2EBB
7678  2EBC
7679  2EBD
7680  2EBE
7681  2EBF
7682  2EC0
7683  2EC1
7684  2EC2
7685  2EC3
7686  2EC4
7687  2EC5
7688  2EC6
7689  2EC7
7690  2EC8
7691  2EC9
7692  2ECA
7693  2ECB
7694  2ECC
7695  2ECD
7696  2ECE
7697  2ECF
7698  2ED0
7699  2ED1
7700  2ED2
7701  2ED3
7702  2ED4
7703  2ED5
7704  2ED6
7705  2ED7
7706  2ED8
7707  2ED9
7708  2EDA
7709  2EDB
7710  2EDC
7711  2EDD
7712  2EDE
7713  2EDF
7714  2EE0
7715  2EE1
7716  2EE2
7717  2EE3
7718  2EE4
7719  2EE5
7720  2EE6
7721  2EE7
7722  2EE8
7723  2EE9
7724  2EEA
7725  2EEB
7726  2EEC
7727  2EED
7728  2EEE
7729  2EEF
7730  2EF0
7731  2EF1
7732  2EF2
7733  2EF3
7734  2EF4
7735  2EF5
7736  2EF6
7737  2EF7
7738  2EF8
7739  2EF9
7740  2EFA
7741  2EFB
7742  2EFC
7743  2EFD
7744  2EFE
7745  2EFF
7746  2F00
7747  2F01
7748  2F02
7749  2F03
7750  2F04
7751  2F05
7752  2F06
7753  2F07
7754  2F08
7755  2F09
7756  2F0A
7757  2F0B
7758  2F0C
7759  2F0D
7760  2F0E
7761  2F0F
7762  2F10
7763  2F11
7764  2F12
7765  2F13
7766  2F14
7767  2F15
7768  2F16
7769  2F17
7770  2F18
7771  2F19
7772  2F1A
7773  2F1B
7774  2F1C
7775  2F1D
7776  2F1E
7777  2F1F
7778  2F20
7779  2F21
7780  2F22
7781  2F23
7782  2F24
7783  2F25
7784  2F26
7785  2F27
7786  2F28
7787  2F29
7788  2F2A
7789  2F2B
7790  2F2C
7791  2F2D
7792  2F2E
7793  2F2F
7794  2F30
7795  2F31
7796  2F32
7797  2F33
7798  2F34
7799  2F35
7800  2F36
7801  2F37
7802  2F38
7803  2F39
7804  2F3A
7805  2F3B
7806  2F3C
7807  2F3D
7808  2F3E
7809  2F3F
7810  2F40
7811  2F41
7812  2F42
7813  2F43
7814  2F44
7815  2F45
7816  2F46
7817  2F47
7818  2F48
7819  2F49
7820  2F4A
7821  2F4B
7822  2F4C
7823  2F4D
7824  2F4E
7825  2F4F
7826  2F50
7827  2F51
7828  2F52
7829  2F53
7830  2F54
7831  2F55
7832  2F56
7833  2F57
7834  2F58
7835  2F59
7836  2F5A
7837  2F5B
7838  2F5C
7839  2F5D
7840  2F5E
7841  2F5F
7842  2F60
7843  2F61
7844  2F62
7845  2F63
7846  2F64
7847  2F65
7848  2F66
7849  2F67
7850  2F68
7851  2F69
7852  2F6A
7853  2F6B
7854  2F6C
7855  2F6D
7856  2F6E
7857  2F6F
7858  2F70
7859  2F71
7860  2F72
7861  2F73
7862  2F74
7863  2F75
7864  2F76
7865  2F77
7866  2F78
7867  2F79
7868  2F7A
7869  2F7B
7870  2F7C
7871  2F7D
7872  2F7E
7873  2F7F
7874  2F80
7875  2F81
7876  2F82
7877  2F83
7878  2F84
7879  2F85
7880  2F86
7881  2F87
7882  2F88
7883  2F89
7884  2F8A
7885  2F8B
7886  2F8C
7887  2F8D
7888  2F8E
7889  2F8F
7890  2F90
7891  2F91
7892  2F92
7893  2F93
7894  2F94
7895  2F95
7896  2F96
7897  2F97
7898  2F98
7899  2F99
7900  2F9A
7901  2F9B
7902  2F9C
7903  2F9D
7904  2F9E
7905  2F9F
7906  2FA0
7907  2FA1
7908  2FA2
7909  2FA3
7910  2FA4
7911  2FA5
7912  2FA6
7913  2FA7
7914  2FA8
7915  2FA9
7916  2FAA
7917  2FAB
7918  2FAC
7919  2FAD
7920  2FAE
7921  2FAF
7922  2FB0
7923  2FB1
7924  2FB2
7925  2FB3
7926  2FB4
7927  2FB5
7928  2FB6
7929  2FB7
7930  2FB8
7931  2FB9
7932  2FBA
7933  2FBB
7934  2FBC
7935  2FBD
7936  2FBE
7937  2FBF
7938  2FC0
7939  2FC1
7940  2FC2
7941  2FC3
7942  2FC4
7943  2FC5
7944  2FC6
7945  2FC7
7946  2FC8
7947  2FC9
7948  2FCA
7949  2FCB
7950  2FCC
7951  2FCD
7952  2FCE
7953  2FCF
7954  2FD0
7955  2FD1
7956  2FD2
7957  2FD3
7958  2FD4
7959  2FD5
7960  2FD6
7961  2FD7
7962  2FD8
7963  2FD9
7964  2FDA
7965  2FDB
7966  2FDC
7967  2FDD
7968  2FDE
7969  2FDF
7970  2FE0
7971  2FE1
7972  2FE2
7973  2FE3
7974  2FE4
7975  2FE5
7976  2FE6
7977  2FE7
7978  2FE8
7979  2FE9
7980  2FEA
7981  2FEB
7982  2FEC
7983  2FED
7984  2FEE
7985  2FEF
7986  2FF0
7987  2FF1
7988  2FF2
7989  2FF3
7990  2FF4
7991  2FF5
7992  2FF6
7993  2FF7
7994  2FF8
7995  2FF9
7996  2FFA
7997  2FFB
7998  2FFC
7999  2FFD
8000  2FFE
8001  2FFF
8002  3000
8003  3001
8004  3002
8005  3003
8006  3004
8007  3005
8008  3006
8009  3007
8010  3008
8011  3009
8012  300A
8013  300B
8014  300C
8015  300D
8016  300E
8017  300F
8018  3010
8019  3011
8020  3012
8021  3013
8022  3014
8023  3015
8024  3016
8025  3017
8026  3018
8027  3019
8028  301A
8029  301B
8030  301C
8031  301D
8032  301E
8033  301F
8034  3020
8035  3021
8036  3022
8037  3023
8038  3024
8039  3025
8040  3026
8041  3027
8042  3028
8043  3029
8044  302A
8045  302B
8046  302C
8047  302D
8048  302E
8049  302F
8050  3030
8051  3031
8052  3032
8053  3033
8054  3034
8055  3035
8056  3036
8057  3037
8058  3038
8059  3039
8060  303A
8061  303B
8062  303C
8063  303D
8064  303E
8065  303F
8066  3040
8067  3041
8068  3042
8069  3043
8070  3044
8071  3045
8072  3046
8073  3047
8074  3048
8075  3049
8076  304A
8077  304B
8078  304C
8079  304D
8080  304E
8081  304F
8082  3050
8083  3051
8084  3052
8085  3053
8086  3054
8087  3055
8088  3056
8089  3057
8090  3058
8091  3059
8092  305A
8093  305B
8094  305C
8095  305D
8096  305E
8097  305F
8098  3060
8099  3061
8100  3062
8101  3063
8102  3064
8103  3065
8104  3066
8105  3067
8106  3068
8107  3069
8108  306A
8109  306B
8110  306C
8111  306D
8112  306E
8113  306F
8114  3070
8115  3071
8116  3072
8117  3073
8118  3074
8119  3075
8120  3076
8121  3077
8122  3078
8123  3079
8124  307A
8125  307B
8126  307C
8127  307D
8128  307E
8129  307F
8130  3080
8131  3081
8132  3082
8133  3083
8134  3084
8135  3085
8136  3086
8137  3087
8138  3088
8139  3089
8140  308A
8141  308B
8142  308C
8143  308D
8144  308E
8145  308F
8146  3090
8147  3091
8148  3092
8149  3093
8150  3094
8151  3095
8152  3096
8153  3097
8154  3098
8155  3099
8156  309A
8157  309B
8158  309C
8159  309D
8160  309E
8161  309F
8162  30A0
8163  30A1
8164  30A2
8165  30A3
8166  30A4
8167  30A5
8168  30A6
8169  30A7
8170  30A8
8171  30A9
8172  30AA
8173  30AB
8174  30AC
8175  30AD
8176  30AE
8177  30AF
8178  30B0
8179  30B1
8180  30B2
8181  30B3
8182  30B4
8183  30B5
8184  30B6
8185  30B7
8186  30B8
8187  30B9
8188  30BA
8189  30BB
8190  30BC
8191  30BD
8192  30BE
8193  30BF
8194  30C0
8195  30C1
8196  30C2
8197  30C3
8198  30C4
8199  30C5
8200  30C6
8201  30C7
8202  30C8
8203  30C9
8204  30CA
8205  30CB
8206  30CC
8207  30CD
8208  30CE
8209  30CF
8210  30D0
8211  30D1
8212  30D2
8213  30D3
8214  30D4
8215  30D5
8216  30D6
8217  30D7
8218  30D8
8219  30D9
8220  30DA
8221  30DB
8222  30DC
8223  30DD
8224  30DE
8225  30DF
8226  30E0
8227  30E1
8228  30E2
8229  30E3
8230  30E4
8231  30E5
8232  30E6
8233  30E7
8234  30E8
8235  30E9
8236  30EA
8237  30EB
8238  30EC
8239  30ED
8240  30EE
8241  30EF
8242  30F0
8243  30F1
8244  30F2
8245  30F3
8246  30F4
8247  30F5
8248  30F6
8249  30F7
8250  30F8
8251  30F9
8252  30FA
8253  30FB
8254  30FC
8255  30FD
8256  30FE
8257  30FF
8258  3100
8259  3101
8260  3102
8261  3103
8262  3104
8263  3105
8264  3106
8265  3107
8266  3108
8267  3109
8268  310A
8269  310B
8270  310C
8271  310D
8272  310E
8273  310F
8274  3110
8275  3111
8276  3112
8277  3113
8278  3114
8279  3115
8280  3116
8281  3117
8282  3118
8283  3119
8284  311A
8285  311B
8286  311C
8287  311D
8288  311E
8289  311F
8290  3120
8291  3121
8292  3122
8293  3123
8294  3124
8295  3125
8296  3126
8297  3127
8298  3128
8299  3129
8300  312A
8301  312B
8302  312C
8303  312D
8304  312E
8305  312F
8306  3130
8307  3131
8308  3132
8309  3133
8310  3134
8311  3135
8312  3136
8313  3137
8314  3138
8315  3139
8316  313A
8317  313B
8318  313C
8319  313D
8320  313E
8321  313F
8322  3140
8323  3141
8324  3142
8325  3143
8326  3144
8327  3145
8328  3146
8329  3147
8330  3148
8331  3149
8332  314A
8333  314B
8334  314C
8335  314D
8336  314E
8337  314F
8338  3150
8339  3151
8340  3152
8341  3153
8342  3154
8343  3155
8344  3156
8345  3157
8346  3158
8347  3159
8348  315A
8349  315B
8350  315C
8351  315D
8352  315E
8353  315F
8354  3160
8355  3161
8356  3162
8357  3163
8358  3164
8359  3165
8360  3166
8361  3167
8362  3168
8363  3169
8364  316A
8365  316B
8366  316C
8367  316D
8368  316E
8369  316F
8370  3170
8371  3171
8372  3172
8373  3173
8374  3174
8375  3175
8376  3176
8377  3177
8378  3178
8379  3179
8380  317A
8381  317B
8382  317C
8383  317D
8384  317E
8385  317F
8386  3180
8387  3181
8388  3182
8389  3183
8390  3184
8391  3185
8392  3186
8393  3187
8394  3188
8395  3189
8396  318A
8397  318B
8398  318C
8399  318D
8400  318E
8401  318F
8402  3190
8403  3191
8404  3192
8405  3193
8406  3194
8407  3195
8408  3196
8409  3197
8410  3198
8411  3199
8412  319A
8413  319B
8414  319C
8415  319D
8416  319E
8417  319F
8418  31A0
8419  31A1
8420  31A2
8421  31A3
8422  31A4
8423  31A5
8424  31A6
8425  31A7
8426  31A8
8427  31A9
8428  31AA
8429  31AB
8430  31AC
8431  31AD
8432  31AE
8433  31AF
8434  31B0
8435  31B1
8436  31B2
8437  31B3
8438  31B4
8439  31B5
8440  31B6
8441  31B7
8442  31B8
8443  31B9
8444  31BA
8445  31BB
8446  31BC
8447  31BD
8448  31BE
8449  31BF
8450  31C0
8451  31C1
8452  31C2
8453  31C3
8454  31C4
8455  31C5
8456  31C6
8457  31C7
8458  31C8
8459  31C9
8460  31CA
8461  31CB
8462  31CC
8463  31CD
8464  31CE
8465  31CF
8466  31D0
8467  31D1
8468  31D2
8469  31D3
8470  31D4
8471  31D5
8472  31D6
8473  31D7
8474  31D8
8475  31D9
8476  31DA
8477  31DB
8478  31DC
8479  31DD
8480  31DE
8481  31DF
8482  31E0
8483  31E1
8484  31E2
8485  31E3
8486  31E4
8487  31E5
8488  31E6
8489  31E7
8490  31E8
8491  31E9
8492  31EA
8493  31EB
8494  31EC
8495  31ED
8496  31EE
8497  31EF
8498  31F0
8499  31F1
8500  31F2
8501  31F3
8502  31F4
8503  31F5
8504  31F6
8505  31F7
8506  31F8
8507  31F9
8508  31FA
8509  31FB
8510  31FC
8511  31FD
8512  31FE
8513  31FF
8514  3200
8515  3201
8516  3202
8517  3203
8518  3204
8519  3205
8520  3206
8521  3207
8522  3208
8523  3209
8524  320A
8525  320B
8526  320C
8527  320D
8528  320E
8529  320F
8530  3210
8531  3211
8532  3212
8533  3213
8534  3214
8535  3215
8536  3216
8537  3217
8538  3218
8539  3219
8540  321A
8541  321B
8542  321C
8543  321D
8544  321E
8545  321F
8546  3220
8547  3221
8548  3222
8549  3223
8550  3224
8551  3225
8552  3226
8553  3227
8554  3228
8555  3229
8556  322A
8557  322B
8558  322C
8559  322D
8560  322E
8561  322F
8562  3230
8563  3231
8564  3232
8565  3233
8566  3234
8567  3235
8568  3236
8569  3237
8570  3238
8571  3239
8572  323A
8573  323B
8574  323C
8575  323D
8576  323E
8577  323F
8578  3240
8579  3241
8580  3242
8581  3243
8582  3244
8583  3245
8584  3246
8585  3247
8586  3248
8587  3249
8588  324A
8589  324B
8590  324C
8591  324D
8592  324E
8593  324F
8594  3250
8595  3251
8596  3252
8597  3253
8598  3254
8599  3255
8600  3256
8601  3257
8602  3258
8603  3259
8604  325A
8605  325B
8606  325C
8607  325D
8608  325E
8609  325F
8610  3260
8611  3261
8612  3262
8613  3263
8614  3264
8615  3265
8616  3266
8617  3267
8618  3268
8619  3269
8620  326A
8621  326B
8622  326C
8623  326D
8624  326E
8625  326F
8626  3270
8627  3271
8628  3272
8629  3273
8630  3274
8631  3275
8632  3276
8633  3277
8634  3278
8635  3279
8636  327A
8637  327B
8638  327C
8639  327D
8640  327E
8641  327F
8642  3280
8643  3281
8644  3282
8645  3283
8646  3284
8647  3285
8648  3286
8649  3287
8650  3288
8651  3289
8652  328A
8653  328B
8654  328C
8655  328D
8656  328E
8657  328F
8658  3290
8659  3291
8660  3292
8661  3293
8662  3294
8663  3295
8664  3296
8665  3297
8666  3298
8667  3299
8668  329A
8669  329B
8670  329C
8671  329D
8672  329E
8673  329F
8674  32A0
8675  32A1
8676  32A2
8677  32A3
8678  32A4
8679  32A5
8680  32A6
8681  32A7
8682  32A8
8683  32A9
8684  32AA
8685  32AB
8686  32AC
8687  32AD
8688  32AE
8689  32AF
8690  32B0
8691  32B1
8692  32B2
8693  32B3
8694  32B4
8695  32B5
8696  32B6
8697  32B7
8698  32B8
8699  32B9
8700  32BA
8701  32BB
8702  32BC
8703  32BD
8704  32BE
8705  32BF
8706  32C0
8707  32C1
8708  32C2
8709  32C3
8710  32C4
8711  32C5
8712  32C6
8713  32C7
8714  32C8
8715  32C9
8716  32CA
8717  32CB
8718  32CC
8719  32CD
8720  32CE
8721  32CF
8722  32D0
8723  32D1
8724  32D2
8725  32D3
8726  32D4
8727  32D5
8728  32D6
8729  32D7
8730  32D8
8731  32D9
8732  32DA
8733  32DB
8734  32DC
8735  32DD
8736  32DE
8737  32DF
8738  32E0
8739  32E1
8740  32E2
8741  32E3
8742  32E4
8743  32E5
8744  32E6
8745  32E7
8746  32E8
8747  32E9
8748  32EA
8749  32EB
8750  32EC
8751  32ED
8752  32EE
8753  32EF
8754  32F0
8755  32F1
8756  32F2
8757  32F3
8758  32F4
8759  32F5
8760  32F6
8761  32F7
8762  32F8
8763  32F9
8764  32FA
8765  32FB
8766  32FC
8767  32FD
8768  32FE
8769  32FF
8770  3300
8771  3301
8772  3302
8773  3303
8774  3304
8775  3305
8776  3306
8777  3307
8778  3308
8779  3309
8780  330A
8781  330B
8782  330C
8783  330D
8784  330E
8785  330F
8786  3310
8787  3311
8788  3312
8789  3313
8790  3314
8791  3315
8792  3316
8793  3317
8794  3318
8795  3319
8796  331A
8797  331B
8798  331C
8799  331D
8800  331E
8801  331F
8802  3320
8803  3321
8804  3322
8805  3323
8806  3324
8807  3325
8808  3326
8809  3327
8810  3328
8811  3329
8812  332A
8813  332B
8814  332C
8815  332D
8816  332E
8817  332F
8818  3330
8819  3331
8820  3332
8821  3333
8822  3334
8823  3335
8824  3336
8825  3337
8826  3338
8827  3339
8828  333A
8829  333B
8830  333C
8831  333D
8832  333E
8833  333F
8834  3340
8835  3341
8836  3342
8837  3343
8838  3344
8839  3345
8840  3346
8841  3347
8842  3348
8843  3349
8844  334A
8845  334B
8846  334C
8847  334D
8848  334E
8849  334F
8850  3350
8851  3351
8852  3352
8853  3353
8854  3354
8855  3355
8856  3356
8857  3357
8858  3358
8859  3359
8860  335A
8861  335B
8862  335C
8863  335D
8864  335E
8865  335F
8866  3360
8867  3361
8868  3362
8869  3363
8870  3364
8871  3365
8872  3366
8873  3367
8874  3368
8875  3369
8876  336A
8877  336B
8878  336C
8879  336D
8880  336E
8881  336F
8882  3370
8883  3371
8884  3372
8885  3373
8886  3374
8887  3375
8888  3376
8889  3377
8890  3378
8891  3379
8892  337A
8893  337B
8894  337C
8895  337D
8896  337E
8897  337F
8898  3380
8899  3381
8900  3382
8901  3383
8902  3384
8903  3385
8904  3386
8905  3387
8906  3388
8907  3389
8908  338A
8909  338B
8910  338C
8911  338D
8912  338E
8913  338F
8914  3390
8915  3391
8916  3392
8917  3393
8918  3394
8919  3395
8920  3396
8921  3397
8922  3398
8923  3399
8924  339A
8925  339B
8926  339C
8927  339D
8928  339E
8929  339F
8930  33A0
8931  33A1
8932  33A2
8933  33A3
8934  33A4
8935  33A5
8936  33A6
8937  33A7
8938  33A8
8939  33A9
8940  33AA
8941  33AB
8942  33AC
8943  33AD
8944  33AE
8945  33AF
8946  33B0
8947  33B1
8948  33B2
8949  33B3
8950  33B4
8951  33B5
8952  33B6
8953  33B7
8954  33B8
8955  33B9
8956  33BA
8957  33BB
8958  33BC
8959  33BD
8960  33BE
8961  33BF
8962  33C0
8963  33C1
8964  33C2
8965  33C3
8966  33C4
8967  33C5
8968  33C6
8969  33C7
8970  33C8
8971  33C9
8972  33CA
8973  33CB
8974  33CC
8975  33CD
8976  33CE
8977  33CF
8978  33D0
8979  33D1
8980  33D2
8981  33D3
8982  33D4
8983  33D5
8984  33D6
8985  33D7
8986  33D8
8987  33D9
8988  33DA
8989  33DB
8990  33DC
8991  33DD
8992  33DE
8993  33DF
8994  33E0
8995  33E1
8996  33E2
8997  33E3
8998  33E4
8999  33E5
9000  33E6
9001  33E7
9002  33E8
9003  33E9
9004  33EA
9005  33EB
9006  33EC
9007  33ED
9008  33EE
9009  33EF
9010  33F0
9011  33F1
9012  33F2
9013  33F3
9014  33F4
9015  33F5
9016  33F6
9017  33F7
9018  33F8
9019  33F9
9020  33FA
9021  33FB
9022  33FC
9023  33FD
9024  33FE
9025  33FF
9026  3400
9027  3401
9028  3402
9029  3403
9030  3404
9031  3405
9032  3406
9033  3407
9034  3408
9035  3409
9036  340A
9037  340B
9038  340C
9039  340D
9040  340E
9041  340F
9042  3410
9043  3411
9044  3412
9045  3413
9046  3414
9047  3415
9048  3416
9049  3417
9050  3418
9051  3419
9052  341A
9053  341B
9054  341C
9055  341D
9056  341E
9057  341F
9058  3420
9059  3421
9060  3422
9061  3423
9062  3424
9063  3425
9064  3426
9065  3427
9066  3428
9067  3429
9068  342A
9069  342B
9070  342C
9071  342D
9072  342E
9073  342F
9074  3430
9075  3431
9076  3432
9077  3433
9078  3434
9079  3435
9080  3436
9081  3437
9082  3438
9083  3439
9084  343A
9085  343B
9086  343C
9087  343D
9088  343E
9089  343F
9090  3440
9091  3441
9092  3442
9093  3443
9094  3444
9095  3445
9096  3446
9097  3447
9098  3448
9099  3449
9100  344A
9101  344B
9102  344C
9103  344D
9104  344E
9105  344F
9106  3450
9107  3451
9108  3452
9109  3453
9110  3454
9111  3455
9112  3456
9113  3457
9114  3458
9115  3459
9116  345A
9117  345B
9118  345C
9119  345D
9120  345E
9121  345F
9122  3460
9123  3461
9124  3462
9125  3463
9126  3464
9127  3465
9128  3466
9129  3467
9130  3468
9131  3469
9132  346A
9133  346B
9134  346C
9135  346D
9136  346E
9137  346F
9138  3470
9139  3471
9140  3472
9141  3473
9142  3474
9143  3475
9144  3476
9145  3477
9146  3478
9147  3479
9148  347A
9149  347B
9150  347C
9151  347D
9152  347E
9153  347F
9154  3480
9155  3481
9156  3482
9157  3483
9158  3484
9159  3485
9160  3486
9161  3487
9162  3488
9163  3489
9164  348A
9165  348B
9166  348C
9167  348D
9168  348E
9169  348F
9170  3490
9171  3491
9172  3492
9173  3493
9174  3494
9175  3495
9176  3496
9177  3497
9178  3498
9179  3499
9180  349A
9181  349B
9182  349C
9183  349D
9184  349E
9185  349F
9186  34A0
9187  34A1
9188  34A2
9189  34A3
9190  34A4
9191  34A5
9192  34A6
9193  34A7
9194  34A8
9195  34A9
9196  34AA
9197  34AB
9198  34AC
9199  34AD
9200  34AE
9201  34AF
9202  34B0
9203  34B1
9204  34B2
9205  34B3
9206  34B4
9207  34B5
9208  34B6
9209  34B7
9210  34B8
9211  34B9
9212  34BA
9213  34BB
9214  34BC
9215  34BD
9216  34BE
9217  34BF
9218  34C0
9219  34C1
9220  34C2
9221  34C3
9222  34C4
9223  34C5
9224  34C6
9225  34C7
9226  34C8
9227  34C9
9228  34CA
9229  34CB
9230  34CC
9231  34CD
9232  34CE
9233  34CF
9234  34D0
9235  34D1
9236  34D2
9237  34D3
9238  34D4
9239  34D5
9240  34D6
9241  34D7
9242  34D8
9243  34D9
9244  34DA
9245  34DB
9246  34DC
9247  34DD
9248  34DE
9249  34DF
9250  34E0
9251  34E1
9252  34E2
9253  34E3
9254  34E4
9255  34E5
9256  34E6
9257  34E7
9258  34E8
9259  34E9
9260  34EA
9261  34EB
9262  34EC
9263  34ED
9264  34EE
9265  34EF
9266  34F0
9267  34F1
9268  34F2
9269  34F3
9270  34F4
9271  34F5
9272  34F6
9273  34F7
9274  34F8
9275  34F9
9276  34FA
9277  34FB
9278  34FC
9279  34FD
9280  34FE
9281  34FF
9282  3500
9283  3501
9284  3502
9285  3503
9286  3504
9287  3505
9288  3506
9289  3507
9290  3508
9291  3509
9292  350A
9293  350B
9294  350C
9295  350D
9296  350E
9297  350F
9298  3510
9299  3511
9300  3512
9301  3513
9302  3514
9303  3515
9304  3516
9305  3517
9306  3518
9307  3519
9308  351A
9309  351B
9310  351C
9311  351D
9312  351E
9313  351F
9314  3520
9315  3521
9316  3522
9317  3523
9318  3524
9319  3525
9320  3526
9321  3527
9322  3528
9323  3529
9324  352A
9325  352B
9326  352C
9327  352D
9328  352E
9329  352F
9330  3530
9331  3531
9332  3532
9333  3533
9334  3534
9335  3535
9336  3536
9337  3537
9338  3538
9339  3539
9340  353A
9341  353B
9342  353C
9343  353D
9344  353E
9345  353F
9346  3540
9347  3541
9348  3542
9349  3543
9350  3544
9351  3545
9352  3546
9353  3547
9354  3548
9355  3549
9356  354A
9357  354B
9358  354C
9359  354D
9360  354E
9361  354F
9362  3550
9363  3551
9364  3552
9365  3553
9366  3554
9367  3555
9368  3556
9369  3557
9370  3558
9371  3559
9372  355A
9373  355B
9374  355C
9375  355D
9376  355E
9377  355F
9378  3560
9379  3561
9380  3562
9381  3563
9382  3564
9383  3565
9384  3566
9385  3567
9386  3568
9387  3569
9388  356A
9389  356B
9390  356C
9391  356D
9392  356E
9393  356F
9394  3570
9395  3571
9396  3572
9397  3573
9398  3574
9399  3575
9400  3576
9401  3577
9402  3578
9403  3579
9404  357A
9405  357B
9406  357C
9407  357D
9408  357E
9409  357F
9410  3580
9411  3581
9412  3582
9413  3583
9414  3584
9415  3585
9416  3586
9417  3587
9418  3588
9419  3589
9420  358A
9421  358B
9422  358C
9423  358D
9424  358E
9425  358F
9426  3590
9427  3591
9428  3592
9429  3593
9430  3594
9431  3595
9432  3596
9433  3597
9434  3598
9435  3599
9436  359A
9437  359B
9438  359C
9439  359D
9440  359E
9441  359F
9442  35A0
9443  35A1
9444  35A2
9445  35A3
9446  35A4
9447  35A5
9448  35A6
9449  35A7
9450  35A8
9451  35A9
9452  35AA
9453  35AB
9454  35AC
9455  35AD
9456  35AE
9457  35AF
9458  35B0
9459  35B1
9460  35B2
9461  35B3
9462  35B4
9463  35B5
9464  35B6
9465  35B7
9466  35B8
9467  35B9
9468  35BA
9469  35BB
9470  35BC
9471  35BD
9472  35BE
9473  35BF
9474  35C0
9475  35C1
9476  35C2
9477  35C3
9478  35C4
9479  35C5
9480  35C6
9481  35C7
9482  35C8
9483  35C9
9484  35CA
9485  35CB
9486  35CC
9487  35CD
9488  35CE
9489  35CF
9490  35D0
9491  35D1
9492  35D2
9493  35D3
9494  35D4
9495  35D5
9496  35D6
9497  35D7
9498  35D8
9499  35D9
9500  35DA
9501  35DB
9502  35DC
9503  35DD
9504  35DE
9505  35DF
9506  35E0
9507  35E1
9508  35E2
9509  35E3
9510  35E4
9511  35E5
9512  35E6
9513  35E7
9514  35E8
9515  35E9
9516  35EA
9517  35EB
9518  35EC
9519  35ED
9520  35EE
9521  35EF
9522  35F0
9523  35F1
9524  35F2
9525  35F3
9526  35F4
9527  35F5
9528  35F6
9529  35F7
9530  35F8
9531  35F9
9532  35FA
9533  35FB
9534  35FC
9535  35FD
9536  35FE
9537  35FF
9538  3600
9539  3601
9540  3602
9541  3603
9542  3604
9543  3605
9544  3606
9545  3607
9546  3608
9547  3609
9548  360A
9549  360B
9550  360C
9551  360D
9552  360E
9553  360F
9554  3610
9555  3611
9556  3612
9557  3613
9558  3614
9559  3615
9560  3616
9561  3617
9562  3618
9563  3619
9564  361A
9565  361B
9566  361C
9567  361D
9568  361E
9569  361F
9570  3620
9571  3621
9572  3622
9573  3623
9574  3624
9575  3625
9576  3626
9577  3627
9578  3628
9579  3629
9580  362A
9581  362B
9582  362C
9583  362D
9584  362E
9585  362F
9586  3630
9587  3631
9588  3632
9589  3633
9590  3634
9591  3635
9592  3636
9593  3637
9594  3638
9595  3639
9596  363A
9597  363B
9598  363C
9599  363D
9600  363E
9601  363F
9602  3640
9603  3641
9604  3642
9605  3643
9606  3644
9607  3645
9608  3646
9609  3647
9610  3648
9611  3649
9612  364A
9613  364B
9614  364C
9615  364D
9616  364E
9617  364F
9618  3650
9619  3651
9620  3652
9621  3653
9622  3654
9623  3655
9624  3656
9625  3657
9626  3658
9627  3659
9628  365A
9629  365B
9630  365C
9631  365D
9632  365E
9633  365F
9634  3660
9635  3661
9636  3662
9637  3663
9638  3664
9639  3665
9640  3666
9641  3667
9642  3668
9643  3669
9644  366A
9645  366B
9646  366C
9647  366D
9648  366E
9649  366F
9650  3670
9651  3671
9652  3672
9653  3673
9654  3674
9655  3675
9656  3676
9657  3677
9658  3678
9659  3679
9660  367A
9661  367B
9662  367C
9663  367D
9664  367E
9665  367F
9666  3680
9667  3681
9668  3682
9669  3683
9670  3684
9671  3685
9672  3686
9673  3687
9674  3688
9675  3689
9676  368A
9677  368B
9678  368C
9679  368D
9680  368E
9681  368F
9682  3690
9683  3691
9684  3692
9685  3693
9686  3694
9687  3695
9688  3696
9689  3697
9690  3698
9691  3699
9692  369A
9693  369B
9694  369C
9695  369D
9696  369E
9697  369F
9698  36A0
9699  36A1
9700  36A2
9701  36A3
9702  36A4
9703  36A5
9704  36A6
9705  36A7
9706  36A8
9707  36A9
9708  36AA
9709  36AB
9710  36AC
9711  36AD
9712  36AE
9713  36AF
9714  36B0
9715  36B1
9716  36B2
9717  36B3
9718  36B4
9719  36B5
9720  36B6
9721  36B7
9722  36B8
9723  36B9
9724  36BA
9725  36BB
9726  36BC
9727  36BD
9728  36BE
9729  36BF
9730  36C0
9731  36C1
9732  36C2
9733  36C3
9734  36C4
9735  36C5
9736  36C6
9737  36C7
9738  36C8
9739  36C9
9740  36CA
9741  36CB
9742  36CC
9743  36CD
9744  36CE
9745  36CF
9746  36D0
9747  36D1
9748  36D2
9749  36D3
9750  36D4
9751  36D5
9752  36D6
9753  36D7
9754  36D8
9755  36D9
9756  36DA
9757  36DB
9758  36DC
9759  36DD
9760  36DE
9761  36DF
9762  36E0
9763  36E1
9764  36E2
9765  36E3
9766  36E4
9767  36E5
9768  36E6
9769  36E7
9770  36E8
9771  36E9
9772  36EA
9773  36EB
9774  36EC
9775  36ED
9776  36EE
9777  36EF
9778  36F0
9779  36F1
9780  36F2
9781  36F3
9782  36F4
9783  36F5
9784  36F6
9785  36F7
9786  36F8
9787  36F9
9788  36FA
9789  36FB
9790  36FC
9791  36FD
9792  36FE
9793  36FF
9794  3700
9795  3701
9796  3702
9797  3703
9798  3704
9799  3705
9800  3706
9801  3707
9802  3708
9803  3709
9804  370A
9805  370B
9806  370C
9807  370D
9808  370E
9809  370F
9810  3710
9811  3711
9812  3712
9813  3713
9814  3714
9815  3715
9816  3716
9817  3717
9818  3718
9819  3719
9820  371A
9821  371B
9822  371C
9823  371D
9824  371E
9825  371F
9826  3720
9827  3721
9828  3722
9829  3723
9830  3724
9831  3725
9832  3726
9833  3727
9834  3728
9835  3729
9836  372A
9837  372B
9838  372C
9839  372D
9840  372E
9841  372F
9842  3730
9843  3731
9844  3732
9845  3733
9846  3734
9847  3735
9848  3736
9849  3737
9850  3738
9851  3739
9852  373A
9853  373B
9854  373C
9855  373D
9856  373E
9857  373F
9858  3740
9859  3741
9860  3742
9861  3743
9862  3744
9863  3745
9864  3746
9865  3747
9866  3748
9867  3749
9868  374A
9869  374B
9870  374C
9871  374D
9872  374E
9873  374F
9874  3750
9875  3751
9876  3752
9877  3753
9878  3754
9879  3755
9880  3756
9881  3757
9882  3758
9883  3759
9884  375A
9885  375B
9886  375C
9887  375D
9888  375E
9889  375F
9890  3760
9891  3761
9892  3762
9893  3763
9894  3764
9895  3765
9896  3766
9897  3767
9898  3768
9899  3769
9900  376A
9901  376B
9902  376C
9903  376D
9904  376E
9905  376F
9906  3770
9907  3771
9908  3772
9909  3773
9910  3774
9911  3775
9912  3776
9913  3777
9914  3778
9915  3779
9916  377A
9917  377B
9918  377C
9919  377D
9920  377E
9921  377F
9922  3780
9923  3781
9924  3782
9925  3783
9926  3784
9927  3785
9928  3786
9929  3787
9930  3788
9931  3789
9932  378A
9933  378B
9934  378C
9935  378D
9936  378E
9937  378F
9938  3790
9939  3791
9940  3792
9941  3793
9942  3794
9943  3795
9944  3796
9945  3797
9946  3798
9947  3799
9948  379A
9949  379B
9950  379C
9951  379D
9952  379E
9953  379F
9954  37A0
9955  37A1
9956  37A2
9957  37A3
9958  37A4
9959  37A5
9960  37A6
9961  37A7
9962  37A8
9963  37A9
9964  37AA
9965  37AB
9966  37AC
9967  37AD
9968  37AE
9969  37AF
9970  37B0
9971  37B1
9972  37B2
9973  37B3
9974  37B4
9975  37B5
9976  37B6
9977  37B7
9978  37B8
9979  37B9
9980  37BA
9981  37BB
9982  37BC
9983  37BD
9984  37BE
9985  37BF
9986  37C0
9987  37C1
9988  37C2
9989  37C3
9990  37C4
9991  37C5
9992  37C6
9993  37C7
9994  37C8
9995  37C9
9996  37CA
9997  37CB
9998  37CC
9999  37CD
10000  37CE
10001  37CF
10002  37D0
10003  37D1
10004  37D2
10005  37D3
10006  37D4
10007  37D5
10008  37D6
10009  37D7
10010  37D8
10011  37D9
10012  37DA
10013  37DB
10014  37DC
10015  37DD
10016  37DE
10017  37DF
10018  37E0
10019  37E1
10020  37E2
10021  37E3
10022  37E4
10023  37E5
10024  37E6
10025  37E7
10026  37E8
10027  37E9
10028  37EA
10029  37EB
10030  37EC
10031  37ED
10032  37EE
10033  37EF
10034  37F0
10035  37F1
10036  37F2
10037  37F3
10038  37F4
10039  37F5
10040  37F6
10041  37F7
10042  37F8
10043  37F9
10044  37FA
10045  37FB
10046  37FC
10047  37FD
10048  37FE
10049  37FF
10050  3800
10051  3801
10052  3802
10053  3803
10054  3804
10055  3805
10056  3806
10057  3807
10058  3808
10059  3809
10060  380A
10061  380B
10062  380C
10063  380D
10064  380E
10065  380F
10066  3810
10067  3811
10068  3812
10069  3813
10070  3814
10071  3815
10072  3816
10073  3817
10074  3818
10075  3819
10076  381A
10077  381B
10078  381C
10079  381D
10080  381E
10081  381F
10082  3820
10083  3821
10084  3822
10085  3823
10086  3824
10087  3825
10088  3826
10089  3827
10090  3828
10091  3829
10092  382A
10093  382B
10094  382C
10095  382D
10096  382E
10097  382F
10098  3830
10099  3831
10100  3832
10101  3833
10102  3834
10103  3835
10104  3836
10105  3837
10106  3838
10107  3839
10108  383A
10109  383B
10110  383C
10111  383D
10112  383E
10113  383F
10114  3840
10115  3841
10116  3842
10117  3843
10118  3844
10119  3845
10120  3846
10121  3847
10122  3848
10123  3849
10124  384A
10125  384B
10126  384C
10127  384D
10128  384E
10129  384F
10130  3850
10131  3851
10132  3852
10133  3853
10134  3854
10135  3855
10136  3856
10137  3857
10138  3858
10139  3859
10140  385A
10141  385B
10142  385C
10143  385D
10144  385E
10145  385F
10146  3860
10147  3861
10148  3862
10149  3863
10150  3864
10151  3865
10152  3866
10153  3867
10154  3868
10155  3869
10156  386A
10157  386B
10158  386C
10159  386D
10160  386E
10161  386F
10162  3870
10163  3871
10164  3872
10165  3873
10166  3874
10167  3875
10168  3876
10169  3877
10170  3878
10171  3879
10172  387A
10173  387B
10174  387C
10175  387D
10176  387E
10177  387F
10178  3880
10179  3881
10180  3882
10181  3883
10182  3884
10183  3885
10184  3886
10185  3887
10186  3888
10187  3889
10188  388A
10189  388B
10190  388C
10191  388D
10192  388E
10193  388F
10194  3890
10195  3891
10196  3892
10197  3893
10198  3894
10199  3895
10200  3896
10201  3897
10202  3898
10203  3899
10204  389A
10205  389B
10206  389C
10207  389D
10208  389E
10209  389F
10210  38A0
10211  38A1
10212  38A2
10213  38A3
10214  38A4
10215  38A5
10216  38A6
10217  38A7
10218  38A8
10219  38A9
10220  38AA
10221  38AB
10222  38AC
10223  38AD
10224  38AE
10225  38AF
10226  38B0
10227  38B1
10228  38B2
10229  38B3
10230  38B4
10231  38B5
10232  38B6
10233  38B7
10234  38B8
10235  38B9
10236  38BA
10237  38BB
10238  38BC
10239  38BD
10240  38BE
10241  38BF
10242  38C0
10243  38C1
10244  38C2
10245  38C3
10246  38C4
10247  38C5
10248  38C6
10249  38C7
10250  38C8
10251  38C9
10252  38CA
10253  38CB
10254  38CC
10255  38CD
10256  38CE
10257  38CF
10258  38D0
10259  38D1
10260  38D2
10261  38D3
10262  38D4
10263  38D5
10264  38D6
10265  38D7
10266  38D8
10267  38D9
10268  38DA
10269  38DB
10270  38DC
10271  38DD
10272  38DE
10273  38DF
10274  38E0
10275  38E1
10276  38E2
10277  38E3
10278  38E4
10279  38E5
10280  38E6
10281  38E7
10282  38E8
10283  38E9
10284  38EA
10285  38EB
10286  38EC
10287  38ED
10288  38EE
10289  38EF
10290  38F0
10291  38F1
10292  38F2
10293  38F3
10294  38F4
10295  38F5
10296  38F6
10297  38F7
10298  38F8
10299  38F9
10300  38FA
10301  38FB
10302  38FC
10303  38FD
10304  38FE
10305  38FF
10306  3900
10307  3901
10308  3902
10309  3903
10310  3904
10311  3905
10312  3906
10313  3907
10314  3908
10315  3909
10316  390A
10317  390B
10318  390C
10319  390D
10320  390E
10321  390F
10322  3910
10323  3911
10324  3912
10325  3913
10326  3914
10327  3915
10328  3916
10329  3917
10330  3918
10331  3919
10332  391A
10333  391B
10334  391C
10335  391D
10336  391E
10337  391F
10338  3920
10339  3921
10340  3922
10341  3923
10342  3924
10343  3925
10344  3926
10345  3927
10346  3928
10347  3929
10348  392A
10349  392B
10350  392C
10351  392D
10352  392E
10353  392F
10354  3930
10355  3931
10356  3932
10357  3933
10358  3934
10359  3935
10360  3936
10361  3937
10362  3938
10363  3939
10364  393A
10365  393B
10366  393C
10367  393D
10368  393E
10369  393F
10370  3940
10371  3941
10372  3942
10373  3943
10374  3944
10375  3945
10376  3946
10377  3947
10378  3948
10379  3949
10380  394A
10381  394B
10382  394C
10383  394D
10384  394E
10385  394F
10386  3950
10387  3951
10388  3952
10389  3953
10390  3954
10391  3955
10392  3956
10393  3957
10394  3958
10395  3959
10396  395A
10397  395B
10398  395C
10399  395D
10400  395E
10401  395F
10402  3960
10403  3961
10404  3962
10405  3963
10406  3964
10407  3965
10408  3966
10409  3967
10410  3968
10411  3969
10412  396A
10413  396B
10414  396C
10415  396D
10416  396E
10417  396F
10418  3970
10419  3971
10420  3972
10421  3973
10422  3974
10423  3975
10424  3976
10425  3977
10426  3978
10427  3979
10428  397A
10429  397B
10430  397C
10431  397D
10432  397E
10433  397F
10434  3980
10435  3981
10436  3982
10437  3983
10438  3984
10439  3985
10440  3986
10441  3987
10442  3988
10443  3989
10444  398A
10445  398B
10446  398C
10447  398D
10448  398E
10449  398F
10450  3990
10451  3991
10452  3992
10453  3993
10454  3994
10455  3995
10456  3996
10457  3997
10458  3998
10459  3999
10460  399A
10461  399B
10462  399C
10463  399D
10464  399E
10465  399F
10466  39A0
10467  39A1
10468  39A2
10469  39A3
10470  39A4
10471  39A5
10472  39A6
10473  39A7
10474  39A8
10475  39A9
10476  39AA
10477  39AB
10478  39AC
10479  39AD
10480  39AE
10481  39AF
10482  39B0
10483  39B1
10484  39B2
10485  39B3
10486  39B4
10487  39B5
10488  39B6
10489  39B7
10490  39B8
10491  39B9
10492  39BA
10493  39BB
10494  39BC
10495  39BD
10496  39BE
10497  39BF
10498  39C0
10499  39C1
10500  39C2
10501  39C3
10502  39C4
10503  39C5
10504  39C6
10505  39C7
10506  39C8
10507  39C9
10508  39CA
10509  39CB
10510  39CC
10511  39CD
10512  39CE
10513  39CF
10514  39D0
10515  39D1
10516  39D2
10517  39D3
10518  39D4
10519  39D5
10520  39D6
10521  39D7
10522  39D8
10523  39D9
10524  39DA
10525  39DB
10526  39DC
10527  39DD
10528  39DE
10529  39DF
10530  39E0
10531  39E1
10532  39E2
10533  39E3
10534  39E4
10535  39E5
10536  39E6
10537  39E7
10538  39E8
10539  39E9
10540  39EA
10541  39EB
10542  39EC
10543  39ED
10544  39EE
10545  39EF
10546  39F0
10547  39F1
10548  39F2
10549  39F3
10550  39F4
10551  39F5
10552  39F6
10553  39F7
10554  39F8
10555  39F9
10556  39FA
10557  39FB
10558  39FC
10559  39FD
10560  39FE
10561  39FF
10562  3A00
10563  3A01
10564  3A02
10565  3A03
10566  3A04
10567  3A05
10568  3A06
10569  3A07
10570  3A08
10571  3A09
10572  3A0A
10573  3A0B
10574  3A0C
10575  3A0D
10576  3A0E
10577  3A0F
10578  3A10
10579  3A11
10580  3A12
10581  3A13
10582  3A14
10583  3A15
10584  3A16
10585  3A17
10586  3A18
10587  3A19
10588  3A1A
10589  3A1B
10590  3A1C
10591  3A1D
10592  3A1E
10593  3A1F
10594  3A20
10595  3A21
10596  3A22
10597  3A23
10598  3A24
10599  3A25
10600  3A26
10601  3A27
10602  3A28
10603  3A29
10604  3A2A
10605  3A2B
10606  3A2C
10607  3A2D
10608  3A2E
10609  3A2F
10610  3A30
10611  3A31
10612  3A32
10613  3A33
10614  3A34
10615  3A35
10616  3A36
10617  3A37
10618  3A38
10619  3A39
10620  3A3A
10621  3A3B
10622  3A3C
10623  3A3D
10624  3A3E
10625  3A3F
10626  3A40
10627  3A41
10628  3A42
10629  3A43
10630  3A44
10631  3A45
10632  3A46
10633  3A47
10634  3A48
10635  3A49
10636  3A4A
10637  3A4B
10638  3A4C
10639  3A4D
10640  3A4E
10641  3A4F
10642  3A50
10643  3A51
10644  3A52
10645  3A53
10646  3A54
10647  3A55
10648  3A56
10649  3A57
10650  3A58
10651  3A59
10652  3A5A
10653  3A5B
10654  3A5C
10655  3A5D
10656  3A5E
10657  3A5F
10658  3A60
10659  3A61
10660  3A62
10661  3A63
10662  3A64
10663  3A65
10664  3A66
10665  3A67
10666  3A68
10667  3A69
10668  3A6A
10669  3A6B
10670  3A6C
10671  3A6D
10672  3A6E
10673  3A6F
10674  3A70
10675  3A71
10676  3A72
10677  3A73
10678  3A74
10679  3A75
10680  3A76
10681  3A77
10682  3A78
10683  3A79
10684  3A7A
10685  3A7B
10686  3A7C
10687  3A7D
10688  3A7E
10689  3A7F
10690  3A80
10691  3A81
10692  3A82
10693  3A83
10694  3A84
10695  3A85
10696  3A86
10697  3A87
10698  3A88
10699  3A89
10700  3A8A
10701  3A8B
10702  3A8C
10703  3A8D
10704  3A8E
10705  3A8F
10706  3A90
10707  3A91
10708  3A92
10709  3A93
10710  3A94
10711  3A95
10712  3A96
10713  3A97
10714  3A98
10715  3A99
10716  3A9A
10717  3A9B
10718  3A9C
10719  3A9D
10720  3A9E
10721  3A9F
10722  3AA0
10723  3AA1
10724  3AA2
10725  3AA3
10726  3AA4
10727  3AA5
10728  3AA6
10729  3AA7
10730  3AA8
10731  3AA9
10732  3AAA
10733  3AAB
10734  3AAC
10735  3AAD
10736  3AAE
10737  3AAF
10738  3AB0
10739  3AB1
10740  3AB2
10741  3AB3
10742  3AB4
10743  3AB5
10744  3AB6
10745  3AB7
10746  3AB8
10747  3AB9
10748  3ABA
10749  3ABB
10750  3ABC
10751  3ABD
10752  3ABE
10753  3ABF
10754  3AC0
10755  3AC1
10756  3AC2
10757  3AC3
10758  3AC4
10759  3AC5
10760  3AC6
10761  3AC7
10762  3AC8
10763  3AC9
10764  3ACA
10765  3ACB
10766  3ACC
10767  3ACD
10768  3ACE
10769  3ACF
10770  3AD0
10771  3AD1
10772  3AD2
10773  3AD3
10774  3AD4
10775  3AD5
10776  3AD6
10777  3AD7
10778  3AD8
10779  3AD9
10780  3ADA
10781  3ADB
10782  3ADC
10783  3ADD
10784  3ADE
10785  3ADF
10786  3AE0
10787  3AE1
10788  3AE2
10789  3AE3
10790  3AE4
10791  3AE5
10792  3AE6
10793  3AE7
10794  3AE8
10795  3AE9
10796  3AEA
10797  3AEB
10798  3AEC
10799  3AED
10800  3AEE
10801  3AEF
10802  3AF0
10803  3AF1
10804  3AF2
10805  3AF3
10806  3AF4
10807  3AF5
10808  3AF6
10809  3AF7
10810  3AF8
10811  3AF9
10812  3AFA
10813  3AFB
10814  3AFC
10815  3AFD
10816  3AFE
10817  3AFF
10818  3B00
10819  3B01
10820  3B02
10821  3B03
10822  3B04
10823  3B05
10824  3B06
10825  3B07
10826  3B08
10827  3B09
10828  3B0A
10829  3B0B
10830  3B0C
10831  3B0D
10832  3B0E
10833  3B0F
10834  3B10
10835  3B11
10836  3B12
10837  3B13
10838  3B14
10839  3B15
10840  3B16
10841  3B17
10842  3B18
10843  3B19
10844  3B1A
10845  3B1B
10846  3B1C
10847  3B1D
10848  3B1E
10849  3B1F
10850  3B20
10851  3B21
10852  3B22
10853  3B23
10854  3B24
10855  3B25
10856  3B26
10857  3B27
10858  3B28
10859  3B29
10860  3B2A
10861  3B2B
10862  3B2C
10863  3B2D
10864  3B2E
10865  3B2F
10866  3B30
10867  3B31
10868  3B32
10869  3B33
10870  3B34
10871  3B35
10872  3B36
10873  3B37
10874  3B38
10875  3B39
10876  3B3A
10877  3B3B
10878  3B3C
10879  3B3D
10880  3B3E
10881  3B3F
10882  3B40
10883  3B41
10884  3B42
10885  3B43
10886  3B44
10887  3B45
10888  3B46
10889  3B47
10890  3B48
10891  3B49
10892  3B4A
10893  3B4B
10894  3B4C
10895  3B4D
10896  3B4E
10897  3B4F
10898  3B50
10899  3B51
10900  3B52
10901  3B53
10902  3B54
10903  3B55
10904  3B56
10905  3B57
10906  3B58
10907  3B59
10908  3B5A
10909  3B5B
10910  3B5C
10911  3B5D
10912  3B5E
10913  3B5F
10914  3B60
10915  3B61
10916  3B62
10917  3B63
10918  3B64
10919  3B65
10920  3B66
10921  3B67
10922  3B68
10923  3B69
10924  3B6A
10925  3B6B
10926  3B6C
10927  3B6D
10928  3B6E
10929  3B6F
10930  3B70
10931  3B71
10932  3B72
10933  3B73
10934  3B74
10935  3B75
10936  3B76
10937  3B77
10938  3B78
10939  3B79
10940  3B7A
10941  3B7B
10942  3B7C
10943  3B7D
10944  3B7E
10945  3B7F
10946  3B80
10947  3B81
10948  3B82
10949  3B83
10950  3B84
10951  3B85
10952  3B86
10953  3B87
10954  3B88
10955  3B89
10956  3B8A
10957  3B8B
10958  3B8C
10959  3B8D
10960  3B8E
10961  3B8F
10962  3B90
10963  3B91
10964  3B92
10965  3B93
10966  3B94
10967  3B95
10968  3B96
10969  3B97
10970  3B98
10971  3B99
10972  3B9A
10973  3B9B
10974  3B9C
10975  3B9D
10976  3B9E
10977  3B9F
10978  3BA0
10979  3BA1
10980  3BA2
10981  3BA3
10982  3BA4
10983  3BA5
10984  3BA6
10985  3BA7
10986  3BA8
10987  3BA9
10988  3BAA
10989  3BAB
10990  3BAC
10991  3BAD
10992  3BAE
10993  3BAF
10994  3BB0
10995  3BB1
10996  3BB2
10997  3BB3
10998  3BB4
10999  3BB5
11000  3BB6
11001  3BB7
11002  3BB8
11003  3BB9
11004  3BBA
11005  3BBB
11006  3BBC
11007  3BBD
11008  3BBE
11009  3BBF
11010  3BC0
11011  3BC1
11012  3BC2
11013  3BC3
11014  3BC4
11015  3BC5
11016  3BC6
11017  3BC7
11018  3BC8
11019  3BC9
11020  3BCA
11021  3BCB
11022  3BCC
11023  3BCD
11024  3BCE
11025  3BCF
11026  3BD0
11027  3BD1
11028  3BD2
11029  3BD3
11030  3BD4
11031  3BD5
11032  3BD6
11033  3BD7
11034  3BD8
11035  3BD9
11036  3BDA
11037  3BDB
11038  3BDC
11039  3BDD
11040  3BDE
11041  3BDF
11042  3BE0
11043  3BE1
11044  3BE2
11045  3BE3
11046  3BE4
11047  3BE5
11048  3BE6
11049  3BE7
11050  3BE8
11051  3BE9
11052  3BEA
11053  3BEB
11054  3BEC
11055  3BED
11056  3BEE
11057  3BEF
11058  3BF0
11059  3BF1
11060  3BF2
11061  3BF3
11062  3BF4
11063  3BF5
11064  3BF6
11065  3BF7
11066  3BF8
11067  3BF9
11068  3BFA
11069  3BFB
11070  3BFC
11071  3BFD
11072  3BFE
11073  3BFF
11074  3C00
11075  3C01
11076  3C02
11077  3C03
11078  3C04
11079  3C05
11080  3C06
11081  3C07
11082  3C08
11083  3C09
11084  3C0A
11085  3C0B
11086  3C0C
11087  3C0D
11088  3C0E
11089  3C0F
11090  3C10
11091  3C11
11092  3C12
11093  3C13
11094  3C14
11095  3C15
11096  3C16
11097  3C17
11098  3C18
11099  3C19
11100  3C1A
11101  3C1B
11102  3C1C
11103  3C1D
11104  3C1E
11105  3C1F
11106  3C20
11107  3C21
11108  3C22
11109  3C23
11110  3C24
11111  3C25
11112  3C26
11113  3C27
11114  3C28
11115  3C29
11116  3C2A
11117  3C2B
11118  3C2C
11119  3C2D
11120  3C2E
11121  3C2F
11122  3C30
11123  3C31
11124  3C32
11125  3C33
11126  3C34
11127  3C35
11128  3C36
11129  3C37
11130  3C38
11131  3C39
11132  3C3A
11133  3C3B
11134  3C3C
11135  3C3D
11136  3C3E
11137  3C3F
11138  3C40
11139  3C41
11140  3C42
11141  3C43
11142  3C44
11143  3C45
11144  3C46
11145  3C47
11146  3C48
11147  3C49
11148  3C4A
11149  3C4B
11150  3C4C
11151  3C4D
11152  3C4E
11153  3C4F
11154  3C50
11155  3C51
11156  3C52
11157  3C53
11158  3C54
11159  3C55
11160  3C56
11161  3C57
11162  3C58
11163  3C59
11164  3C5A
11165  3C5B
11166  3C5C
11167  3C5D
11168  3C5E
11169  3C5F
11170  3C60
11171  3C61
11172  3C62
11173  3C63
11174  3C64
11175  3C65
11176  3C66
11177  3C67
11178  3C68
11179  3C69
11180  3C6A
11181  3C6B
11182  3C6C
11183  3C6D
11184  3C6E
11185  3C6F
11186  3C70
11187  3C71
11188  3C72
11189  3C73
11190  3C74
11191  3C75
11192  3C76
11193  3C77
11194  3C78
11195  3C79
11196  3C7A
11197  3C7B
11198  3C7C
11199  3C7D
11200  3C7E
11201  3C7F
11202  3C80
11203  3C81
11204  3C82
11205  3C83
11206  3C84
11207  3C85
11208  3C86
11209  3C87
11210  3C88
11211  3C89
11212  3C8A
11213  3C8B
11214  3C8C
11215  3C8D
11216  3C8E
11217  3C8F
11218  3C90
11219  3C91
11220  3C92
11221  3C93
11222  3C94
11223  3C95
11224  3C96
11225  3C97
11226  3C98
11227  3C99
11228  3C9A
11229  3C9B
11230  3C9C
11231  3C9D
11232  3C9E
11233  3C9F
11234  3CA0
11235  3CA1
11236  3CA2
11237  3CA3
11238  3CA4
11239  3CA5
11240  3CA6
11241  3CA7
11242  3CA8
11243  3CA9
11244  3CAA
11245  3CAB
11246  3CAC
11247  3CAD
11248  3CAE
11249  3CAF
11250  3CB0
11251  3CB1
11252  3CB2
11253  3CB3
11254  3CB4
11255  3CB5
11256  3CB6
11257  3CB7
11258  3CB8
11259  3CB9
11260  3CBA
11261  3CBB
11262  3CBC
11263  3CBD
11264  3CBE
11265  3CBF
11266  3CC0
11267  3CC1
11268  3CC2
11269  3CC3
11270  3CC4
11271  3CC5
11272  3CC6
11273  3CC7
11274  3CC8
11275  3CC9
11276  3CCA
11277  3CCB
11278  3CCC
11279  3CCD
11280  3CCE
11281  3CCF
11282  3CD0
11283  3CD1
11284  3CD2
11285  3CD3
11286  3CD4
11287  3CD5
11288  3CD6
11289  3CD7
11290  3CD8
11291  3CD9
11292  3CDA
11293  3CDB
11294  3CDC
11295  3CDD
11296  3CDE
11297  3CDF
11298  3CE0
11299  3CE1
11300  3CE2
11301  3CE3
11302  3CE4
11303  3CE5
11304  3CE6
11305  3CE7
11306  3CE8
11307  3CE9
11308  3CEA
11309  3CEB
11310  3CEC
11311  3CED
11312  3CEE
11313  3CEF
11314  3CF0
11315  3CF1
11316  3CF2
11317  3CF3
11318  3CF4
11319  3CF5
11320  3CF6
11321  3CF7
11322  3CF8
11323  3CF9
11324  3CFA
11325  3CFB
11326  3CFC
11327  3CFD
11328  3CFE
11329  3CFF
11330  3D00
11331  3D01
11332  3D02
11333  3D03
11334  3D04
11335  3D05
11336  3D06
11337  3D07
11338  3D08
11339  3D09
11340  3D0A
11341  3D0B
11342  3D0C
11343  3D0D
11344  3D0E
11345  3D0F
11346  3D10
11347  3D11
11348  3D12
11349  3D13
11350  3D14
11351  3D15
11352  3D16
11353  3D17
11354  3D18
11355  3D19
11356  3D1A
11357  3D1B
11358  3D1C
11359  3D1D
11360  3D1E
11361  3D1F
11362  3D20
11363  3D21
11364  3D22
11365  3D23
11366  3D24
11367  3D25
11368  3D26
11369  3D27
11370  3D28
11371  3D29
11372  3D2A
11373  3D2B
11374  3D2C
11375  3D2D
11376  3D2E
11377  3D2F
11378  3D30
11379  3D31
11380  3D32
11381  3D33
11382  3D34
11383  3D35
11384  3D36
11385  3D37
11386  3D38
11387  3D39
11388  3D3A
11389  3D3B
11390  3D3C
11391  3D3D
11392  3D3E
11393  3D3F
11394  3D40
11395  3D41
11396  3D42
11397  3D43
11398  3D44
11399  3D45
11400  3D46
11401  3D47
11402  3D48
11403  3D49
11404  3D4A
11405  3D4B
11406  3D4C
11407  3D4D
11408  3D4E
11409  3D4F
11410  3D50
11411  3D51
11412  3D52
11413  3D53
11414  3D54
11415  3D55
11416  3D56
11417  3D57
11418  3D58
11419  3D59
11420  3D5A
11421  3D5B
11422  3D5C
11423  3D5D
11424  3D5E
11425  3D5F
11426  3D60
11427  3D61
11428  3D62
11429  3D63
11430  3D64
11431  3D65
11432  3D66
11433  3D67
11434  3D68
11435  3D69
11436  3D6A
11437  3D6B
11438  3D6C
11439  3D6D
11440  3D6E
11441  3D6F
11442  3D70
11443  3D71
11444  3D72
11445  3D73
11446  3D74
11447  3D75
11448  3D76
11449  3D77
11450  3D78
11451  3D79
11452  3D7A
11453  3D7B
11454  3D7C
11455  3D7D
11456  3D7E
11457  3D7F
11458  3D80
11459  3D81
11460  3D82
11461  3D83
11462  3D84
11463  3D85
11464  3D86
11465  3D87
11466  3D88
11467  3D89
11468  3D8A
11469  3D8B
11470  3D8C
11471  3D8D
11472  3D8E
11473  3D8F
11474  3D90
11475  3D91
11476  3D92
11477  3D93
11478  3D94
11479  3D95
11480  3D96
11481  3D97
11482  3D98
11483  3D99
11484  3D9A
11485  3D9B
11486  3D9C
11487  3D9D
11488  3D9E
11489  3D9F
11490  3DA0
11491  3DA1
11492  3DA2
11493  3DA3
11494  3DA4
11495  3DA5
11496  3DA6
11497  3DA7
11498  3DA8
11499  3DA9
11500  3DAA
11501  3DAB
11502  3DAC
11503  3DAD
11504  3DAE
11505  3DAF
11506  3DB0
11507  3DB1
11508  3DB2
11509  3DB3
11510  3DB4
11511  3DB5
11512  3DB6
11513  3DB7
11514  3DB8
11515  3DB9
11516  3DBA
11517  3DBB
11518  3DBC
11519  3DBD
11520  3DBE
11521  3DBF
11522  3DC0
11523  3DC1
11524  3DC2
11525  3DC3
11526  3DC4
11527  3DC5
11528  3DC6
11529  3DC7
11530  3DC8
11531  3DC9
11532  3DCA
11533  3DCB
11534  3DCC
11535  3DCD
11536  3DCE
11537  3DCF
11538  3DD0
11539  3DD1
11540  3DD2
11541  3DD3
11542  3DD4
11543  3DD5
11544  3DD6
11545  3DD7
11546  3DD8
11547  3DD9
11548  3DDA
11549  3DDB
11550  3DDC
11551  3DDD
11552  3DDE
11553  3DDF
11554  3DE0
11555  3DE1
11556  3DE2
11557  3DE3
11558  3DE4
11559  3DE5
11560  3DE6
11561  3DE7
11562  3DE8
11563  3DE9
11564  3DEA
11565  3DEB
11566  3DEC
11567  3DED
11568  3DEE
11569  3DEF
11570  3DF0
11571  3DF1
11572  3DF2
11573  3DF3
11574  3DF4
11575  3DF5
11576  3DF6
11577  3DF7
11578  3DF8
11579  3DF9
11580  3DFA
11581  3DFB
11582  3DFC
11583  3DFD
11584  3DFE
11585  3DFF
11586  3E00
11587  3E01
11588  3E02
11589  3E03
11590  3E04
11591  3E05
11592  3E06
11593  3E07
11594  3E08
11595  3E09
11596  3E0A
11597  3E0B
11598  3E0C
11599  3E0D
11600  3E0E
11601  3E0F
11602  3E10
11603  3E11
11604  3E12
11605  3E13
11606  3E14
11607  3E15
11608  3E16
11609  3E17
11610  3E18
11611  3E19
11612  3E1A
11613  3E1B
11614  3E1C
11615  3E1D
11616  3E1E
11617  3E1F
11618  3E20
11619  3E21
11620  3E22
11621  3E23
11622  3E24
11623  3E25
11624  3E26
11625  3E27
11626  3E28
11627  3E29
11628  3E2A
11629  3E2B
11630  3E2C
11631  3E2D
11632  3E2E
11633  3E2F
11634  3E30
11635  3E31
11636  3E32
11637  3E33
11638  3E34
11639  3E35
11640  3E36
11641  3E37
11642  3E38
11643  3E39
11644  3E3A
11645  3E3B
11646  3E3C
11647  3E3D
11648  3E3E
11649  3E3F
11650  3E40
11651  3E41
11652  3E42
11653  3E43
11654  3E44
11655  3E45
11656  3E46
11657  3E47
11658  3E48
11659  3E49
11660  3E4A
11661  3E4B
11662  3E4C
11663  3E4D
11664  3E4E
11665  3E4F
11666  3E50
11667  3E51
11668  3E52
11669  3E53
11670  3E54
11671  3E55
11672  3E56
11673  3E57
11674  3E58
11675  3E59
11676  3E5A
11677  3E5B
11678  3E5C
11679  3E5D
11680  3E5E
11681  3E5F
11682  3E60
11683  3E61
11684  3E62
11685  3E63
11686  3E64
11687  3E65
11688  3E66
11689  3E67
11690  3E68
11691  3E69
11692  3E6A
11693  3E6B
11694  3E6C
11695  3E6D
11696  3E6E
11697  3E6F
11698  3E70
11699  3E71
11700  3E72
11701  3E73
11702  3E74
11703  3E75
11704  3E76
11705  3E77
11706  3E78
11707  3E79
11708  3E7A
11709  3E7B
11710  3E7C
11711  3E7D
11712  3E7E
11713  3E7F
11714  3E80
11715  3E81
11716  3E82
11717  3E83
11718  3E84
11719  3E85
11720  3E86
11721  3E87
11722  3E88
11723  3E89
11724  3E8A
11725  3E8B
11726  3E8C
11727  3E8D
11728  3E8E
11729  3E8F
11730  3E90
11731  3E91
11732  3E92
11733  3E93
11734  3E94
11735  3E95
11736  3E96
11737  3E97
11738  3E98
11739  3E99
11740  3E9A
11741  3E9B
11742  3E9C
11743  3E9D
11744  3E9E
11745  3E9F
11746  3EA0
11747  3EA1
11748  3EA2
11749  3EA3
11750  3EA4
11751  3EA5
11752  3EA6
11753  3EA7
11754  3EA8
11755  3EA9
11756  3EAA
11757  3EAB
11758  3EAC
11759  3EAD
11760  3EAE
11761  3EAF
11762  3EB0
11763  3EB1
11764  3EB2
11765  3EB3
11766  3EB4
11767  3EB5
11768  3EB6
11769  3EB7
11770  3EB8
11771  3EB9
11772  3EBA
11773  3EBB
11774  3EBC
11775  3EBD
11776  3EBE
11777  3EBF
11778  3EC0
11779  3EC1
11780  3EC2
11781  3EC3
11782  3EC4
11783  3EC5
11784  3EC6
11785  3EC7
11786  3EC8
11787  3EC9
11788  3ECA
11789  3ECB
11790  3ECC
11791  3ECD
11792  3ECE
11793  3ECF
11794  3ED0
11795  3ED1
11796  3ED2
11797  3ED3
11798  3ED4
11799  3ED5
11800  3ED6
11801  3ED7
11802  3ED8
11803  3ED9
11804  3EDA
11805  3EDB
11806  3EDC
11807  3EDD
11808  3EDE
11809  3EDF
11810  3EE0
11811  3EE1
11812  3EE2
11813  3EE3
11814  3EE4
11815  3EE5
11816  3EE6
11817  3EE7
11818  3EE8
11819  3EE9
11820  3EEA
11821  3EEB
11822  3EEC
11823  3EED
11824  3EEE
11825  3EEF
11826  3EF0
11827  3EF1
11828  3EF2
11829  3EF3
11830  3EF4
11831  3EF5
11832  3EF6
11833  3EF7
11834  3EF8
11835  3EF9
11836  3EFA
11837  3EFB
11838  3EFC
11839  3EFD
11840  3EFE
11841  3EFF
11842  3F00
11843  3F01
11844  3F02
11845  3F03
11846  3F04
11847  3F05
11848  3F06
11849  3F07
11850  3F08
11851  3F09
11852  3F0A
11853  3F0B
11854  3F0C
11855  3F0D
11856  3F0E
11857  3F0F
11858  3F10
11859  3F11
11860  3F12
11861  3F13
11862  3F14
11863  3F15
11864  3F16
11865  3F17
11866  3F18
11867  3F19
11868  3F1A
11869  3F1B
11870  3F1C
11871  3F1D
11872  3F1E
11873  3F1F
11874  3F20
11875  3F21
11876  3F22
11877  3F23
11878  3F24
11879  3F25
11880  3F26
11881  3F27
11882  3F28
11883  3F29
11884  3F2A
11885  3F2B
11886  3F2C
11887  3F2D
11888  3F2E
11889  3F2F
11890  3F30
11891  3F31
11892  3F32
11893  3F33
11894  3F34
11895  3F35
11896  3F36
11897  3F37
11898  3F38
11899  3F39
11900  3F3A
11901  3F3B
11902  3F3C
11903  3F3D
11904  3F3E
11905  3F3F
11906  3F40
11907  3F41
11908  3F42
11909  3F43
11910  3F44
11911  3F45
11912  3F46
11913  3F47
11914  3F48
11915  3F49
11916  3F4A
11917  3F4B
11918  3F4C
11919  3F4D
11920  3F4E
11921  3F4F
11922  3F50
11923  3F51
11924  3F52
11925  3F53
11926  3F54
11927  3F55
11928  3F56
11929  3F57
11930  3F58
11931  3F59
11932  3F5A
11933  3F5B
11934  3F5C
11935  3F5D
11936  3F5E
11937  3F5F
11938  3F60
11939  3F61
11940  3F62
11941  3F63
11942  3F64
11943  3F65
11944  3F66
11945  3F67
11946  3F68
11947  3F69
11948  3F6A
11949  3F6B
11950  3F6C
11951  3F6D
11952  3F6E
11953  3F6F
11954  3F70
11955  3F71
11956  3F72
11957  3F73
11958  3F74
11959  3F75
11960  3F76
11961  3F77
11962  3F78
11963  3F79
11964  3F7A
11965  3F7B
11966  3F7C
11967  3F7D
11968  3F7E
11969  3F7F
11970  3F80
11971  3F81
11972  3F82
11973  3F83
11974  3F84
11975  3F85
11976  3F86
11977  3F87
11978  3F88
11979  3F89
11980  3F8A
11981  3F8B
11982  3F8C
11983  3F8D
11984  3F8E
11985  3F8F
11986  3F90
11987  3F91
11988  3F92
11989  3F93
11990  3F94
11991  3F95
11992  3F96
11993  3F97
11994  3F98
11995  3F99
11996  3F9A
11997  3F9B
11998  3F9C
11999  3F9D
12000  3F9E
12001  3F9F
12002  3FA0
12003  3FA1
12004  3FA2
12005  3FA3
12006  3FA4
12007  3FA5
12008  3FA6
12009  3FA7
12010  3FA8
12011  3FA9
12012  3FAA
12013  3FAB
12014  3FAC
12015  3FAD
12016  3FAE
12017  3FAF
12018  3FB0
12019  3FB1
12020  3FB2
12021  3FB3
12022  3FB4
12023  3FB5
12024  3FB6
12025  3FB7
12026  3FB8
12027  3FB9
12028  3FBA
12029  3FBB
12030  3FBC
12031  3FBD
12032  3FBE
12033  3FBF
12034  3FC0
12035  3FC1
12036  3FC2
12037  3FC3
12038  3FC4
12039  3FC5
12040  3FC6
12041  3FC7
12042  3FC8
12043  3FC9
12044  3FCA
12045  3FCB
12046  3FCC
12047  3FCD
12048  3FCE
12049  3FCF
12050  3FD0
12051  3FD1
12052  3FD2
12053  3FD3
12054  3FD4
12055  3FD5
12056  3FD6
12057  3FD7
12058  3FD8
12059  3FD9
12060  3FDA
12061  3FDB
12062  3FDC
12063  3FDD
12064  3FDE
12065  3FDF
12066  3FE0
12067  3FE1
12068  3FE2
12069  3FE3
12070  3FE4
12071  3FE5
12072  3FE6
12073  3FE7
12074  3FE8
12075  3FE9
12076  3FEA
12077  3FEB
12078  3FEC
12079  3FED
12080  3FEE
12081  3FEF
12082  3FF0
12083  3FF1
12084  3FF2
12085  3FF3
12086  3FF4
12087  3FF5
12088  3FF6
12089  3FF7
12090  3FF8
12091  3FF9
12092  3FFA
12093  3FFB
12094  3FFC
12095  3FFD
12096  3FFE
12097  3FFF
12098  4000
12099  4001
12100  4002
12101  4003
12102  4004
12103  4005
12104  4006
12105  4007
12106  4008
12107  4009
12108  400A
12109  400B
12110  400C
12111  400D
12112  400E
12113  400F
12114  4010
12115  4011
12116  4012
12117  4013
12118  4014
12119  4015
12120  4016
12121  4017
12122  4018
12123  4019
12124  401A
12125  401B
12126  401C
12127  401D
12128  401E
12129  401F
12130  4020
12131  4021
12132  4022
12133  4023
12134  4024
12135  4025
12136  4026
12137  4027
12138  4028
12139  4029
12140  402A
12141  402B
12142  402C
12143  402D
12144  402E
12145  402F
12146  4030
12147  4031
12148  4032
12149  4033
12150  4034
12151  4035
12152  4036
12153  4037
12154  4038
12155  4039
12156  403A
12157  403B
12158  403C
12159  403D
12160  403E
12161  403F
12162  4040
12163  4041
12164  4042
12165  4043
12166  4044
12167  4045
12168  4046
12169  4047
12170  4048
12171  4049
12172  404A
12173  404B
12174  404C
12175  404D
12176  404E
12177  404F
12178  4050
12179  4051
12180  4052
12181  4053
12182  4054
12183  4055
12184  4056
12185  4057
12186  4058
12187  4059
12188  405A
12189  405B
12190  405C
12191  405D
12192  405E
12193  405F
12194  4060
12195  4061
12196  4062
12197  4063
12198  4064
12199  4065
12200  4066
12201  4067
12202  4068
12203  4069
12204  406A
12205  406B
12206  406C
12207  406D
12208  406E
12209  406F
12210  4070
12211  4071
12212  4072
12213  4073
12214  4074
12215  4075
12216  4076
12217  4077
12218  4078
12219  4079
12220  407A
12221  407B
12222  407C
12223  407D
12224  407E
12225  407F
12226  4080
12227  4081
12228  4082
12229  4083
12230  4084
12231  4085
12232  4086
12233  4087
12234  4088
12235  4089
12236  408A
12237  408B
12238  408C
12239  408D
12240  408E
12241  408F
12242  4090
12243  4091
12244  4092
12245  4093
12246  4094
12247  4095
12248  4096
12249  4097
12250  4098
12251  4099
12252  409A
12253  409B
12254  409C
12255  409D
12256  409E
12257  409F
12258  40A0
12259  40A1
12260  40A2
12261  40A3
12262  40A4
12263  40A5
12264  40A6
12265  40A7
12266  40A8
12267  40A9
12268  40AA
12269  40AB
12270  40AC
12271  40AD
12272  40AE
12273  40AF
12274  40B0
12275  40B1
12276  40B2
12277  40B3
12278  40B4
12279  40B5
12280  40B6
12281  40B7
12282  40B8
12283  40B9
12284  40BA
12285  40BB
12286  40BC
12287  40BD
12288  40BE
12289  40BF
12290  40C0
12291  40C1
12292  40C2
12293  40C3
12294  40C4
12295  40C5
12296  40C6
12297  40C7
12298  40C8
12299  40C9
12300  40CA
12301  40CB
12302  40CC
12303  40CD
12304  40CE
12305  40CF
12306  40D0
12307  40D1
12308  40D2
12309  40D3
12310  40D4
12311  40D5
12312  40D6
12313  40D7
12314  40D8
12315  40D9
12316  40DA
12317  40DB
12318  40DC
12319  40DD
12320  40DE
12321  40DF
12322  40E0
12323  40E1
12324  40E2
12325  40E3
12326  40E4
12327  40E5
12328  40E6
12329  40E7
12330  40E8
12331  40E9
12332  40EA
12333  40EB
12334  40EC
12335  40ED
12336  40EE
12337  40EF
12338  40F0
12339  40F1
12340  40F2
12341  40F3
12342  40F4
12343  40F5
12344  40F6
12345  40F7
12346  40F8
12347  40F9
12348  40FA
12349  40FB
12350  40FC
12351  40FD
12352  40FE
12353  40FF
12354  4100
12355  4101
12356  4102
12357  4103
12358  4104
12359  4105
12360  4106
12361  4107
12362  4108
12363  4109
12364  410A
12365  410B
12366  410C
12367  410D
12368  410E
12369  410F
12370  4110
12371  4111
12372  4112
12373  4113
12374  4114
12375  4115
12376  4116
12377  4117
12378  4118
12379  4119
12380  411A
12381  411B
12382  411C
12383  411D
12384  411E
12385  411F
12386  4120
12387  4121
12388  4122
12389  4123
12390  4124
12391  4125
12392  4126
12393  4127
12394  4128
12395  4129
12396  412A
12397  412B
12398  412C
12399  412D
12400  412E
12401  412F
12402  4130
12403  4131
12404  4132
12405  4133
12406  4134
12407  4135
12408  4136
12409  4137
12410  4138
12411  4139
12412  413A
12413  413B
12414  413C
12415  413D
12416  413E
12417  413F
12418  4140
12419  4141
12420  4142
12421  4143
12422  4144
12423  4145
12424  4146
12425  4147
12426  4148
12427  4149
12428  414A
12429  414B
12430  414C
12431  414D
12432  414E
12433  414F
12434  4150
12435  4151
12436  4152
12437  4153
12438  4154
12439  4155
12440  4156
12441  4157
12442  4158
12443  4159
12444  415A
12445  415B
12446  415C
12447  415D
12448  415E
12449  415F
12450  4160
12451  4161
12452  4162
12453  4163
12454  4164
12455  4165
12456  4166
12457  4167
12458  4168
12459  4169
12460  416A
12461  416B
12462  416C
12463  416D
12464  416E
12465  416F
12466  4170
12467  4171
12468  4172
12469  4173
12470  4174
12471  4175
12472  4176
12473  4177
12474  4178
12475  4179
12476  417A
12477  417B
12478  417C
12479  417D
12480  417E
12481  417F
12482  4180
12483  4181
12484  4182
12485  4183
12486  4184
12487  4185
12488  4186
12489  4187
12490  4188
12491  4189
12492  418A
12493  418B
12494  418C
12495  418D
12496  418E
12497  418F
12498  4190
12499  4191
12500  4192
12501  4193
12502  4194
12503  4195
12504  4196
12505  4197
12506  4198
12507  4199
12508  419A
12509  419B
12510  419C
12511  419D
12512  419E
12513  419F
12514  41A0
12515  41A1
12516  41A2
12517  41A3
12518  41A4
12519  41A5
12520  41A6
12521  41A7
12522  41A8
12523  41A9
12524  41AA
12525  41AB
12526  41AC
12527  41AD
12528  41AE
12529  41AF
12530  41B0
12531  41B1
12532  41B2
12533  41B3
12534  41B4
12535  41B5
12536  41B6
12537  41B7
12538  41B8
12539  41B9
12540  41BA
12541  41BB
12542  41BC
12543  41BD
12544  41BE
12545  41BF
12546  41C0
12547  41C1
12548  41C2
12549  41C3
12550  41C4
12551  41C5
12552  41C6
12553  41C7
12554  41C8
12555  41C9
12556  41CA
12557  41CB
12558  41CC
12559  41CD
12560  41CE
12561  41CF
12562  41D0
12563  41D1
12564  41D2
12565  41D3
12566  41D4
12567  41D5
12568  41D6
12569  41D7
12570  41D8
12571  41D9
12572  41DA
12573  41DB
12574  41DC
12575  41DD
12576  41DE
12577  41DF
12578  41E0
12579  41E1
12580  41E2
12581  41E3
12582  41E4
12583  41E5
12584  41E6
12585  41E7
12586  41E8
12587  41E9
12588  41EA
12589  41EB
12590  41EC
12591  41ED
12592  41EE
12593  41EF
12594  41F0
12595  41F1
12596  41F2
12597  41F3
12598  41F4
12599  41F5
12600  41F6
12601  41F7
12602  41F8
12603  41F9
12604  41FA
12605  41FB
12606  41FC
12607  41FD
12608  41FE
12609  41FF
12610  4200
12611  4201
12612  4202
12613  4203
12614  4204
12615  4205
12616  4206
12617  4207
12618  4208
12619  4209
12620  420A
12621  420B
12622  420C
12623  420D
12624  420E
12625  420F
12626  4210
12627  4211
12628  4212
12629  4213
12630  4214
12631  4215
12632  4216
12633  4217
12634  4218
12635  4219
12636  421A
12637  421B
12638  421C
12639  421D
12640  421E
12641  421F
12642  4220
12643  4221
12644  4222
12645  4223
12646  4224
12647  4225
12648  4226
12649  4227
12650  4228
12651  4229
12652  422A
12653  422B
12654  422C
12655  422D
12656  422E
12657  422F
12658  4230
12659  4231
12660  4232
12661  4233
12662  4234
12663  4235
12664  4236
12665  4237
12666  4238
12667  4239
12668  423A
12669  423B
12670  423C
12671  423D
12672  423E
12673  423F
12674  4240
12675  4241
12676  4242
12677  4243
12678  4244
12679  4245
12680  4246
12681  4247
12682  4248
12683  4249
12684  424A
12685  424B
12686  424C
12687  424D
12688  424E
12689  424F
12690  4250
12691  4251
12692  4252
12693  4253
12694  4254
12695  4255
12696  4256
12697  4257
12698  4258
12699  4259
12700  425A
12701  425B
12702  425C
12703  425D
12704  425E
12705  425F
12706  4260
12707  4261
12708  4262
12709  4263
12710  4264
12711  4265
12712  4266
12713  4267
12714  4268
12715  4269
12716  426A
12717  426B
12718  426C
12719  426D
12720  426E
12721  426F
12722  4270
12723  4271
12724  4272
12725  4273
12726  4274
12727  4275
12728  4276
12729  4277
12730  4278
12731  4279
12732  427A
12733  427B
12734  427C
12735  427D
12736  427E
12737  427F
12738  4280
12739  4281
12740  4282
12741  4283
12742  4284
12743  4285
12744  4286
12745  4287
12746  4288
12747  4289
12748  428A
12749  428B
12750  428C
12751  428D
12752  428E
12753  428F
12754  4290
12755  4291
12756  4292
12757  4293
12758  4294
12759  4295
12760  4296
12761  4297
12762  4298
12763  4299
12764  429A
12765  429B
12766  429C
12767  429D
12768  429E
12769  429F
12770  42A0
12771  42A1
12772  42A2
12773  42A3
12774  42A4
12775  42A5
12776  42A6
12777  42A7
12778  42A8
12779  42A9
12780  42AA
12781  42AB
12782  42AC
12783  42AD
12784  42AE
12785  42AF
12786  42B0
12787  42B1
12788  42B2
12789  42B3
12790  42B4
12791  42B5
12792  42B6
12793  42B7
12794  42B8
12795  42B9
12796  42BA
12797  42BB
12798  42BC
12799  42BD
12800  42BE
12801  42BF
12802  42C0
12803  42C1
12804  42C2
12805  42C3
12806  42C4
12807  42C5
12808  42C6
12809  42C7
12810  42C8
12811  42C9
12812  42CA
12813  42CB
12814  42CC
12815  42CD
12816  42CE
12817  42CF
12818  42D0
12819  42D1
12820  42D2
12821  42D3
12822  42D4
12823  42D5
12824  42D6
12825  42D7
12826  42D8
12827  42D9
12828  42DA
12829  42DB
12830  42DC
12831  42DD
12832  42DE
12833  42DF
12834  42E0
12835  42E1
12836  42E2
12837  42E3
12838  42E4
12839  42E5
12840  42E6
12841  42E7
12842  42E8
12843  42E9
12844  42EA
12845  42EB
12846  42EC
12847  42ED
12848  42EE
12849  42EF
12850  42F0
12851  42F1
12852  42F2
12853  42F3
12854  42F4
12855  42F5
12856  42F6
12857  42F7
12858  42F8
12859  42F9
12860  42FA
12861  42FB
12862  42FC
12863  42FD
12864  42FE
12865  42FF
12866  4300
12867  4301
12868  4302
12869  4303
12870  4304
12871  4305
12872  4306
12873  4307
12874  4308
12875  4309
12876  430A
12877  430B
12878  430C
12879  430D
12880  430E
12881  430F
12882  4310
12883  4311
12884  4312
12885  4313
12886  4314
12887  4315
12888  4316
12889  4317
12890  4318
12891  4319
12892  431A
12893  431B
12894  431C
12895  431D
12896  431E
12897  431F
12898  4320
12899  4321
12900  4322
12901  4323
12902  4324
12903  4325
12904  4326
12905  4327
12906  4328
12907  4329
12908  432A
12909  432B
12910  432C
12911  432D
12912  432E
12913  432F
12914  4330
12915  4331
12916  4332
12917  4333
12918  4334
12919  4335
12920  4336
12921  4337
12922  4338
12923  4339
12924  433A
12925  433B
12926  433C
12927  433D
12928  433E
12929  433F
12930  4340
12931  4341
12932  4342
12933  4343
12934  4344
12935  4345
12936  4346
12937  4347
12938  4348
12939  4349
12940  434A
12941  434B
12942  434C
12943  434D
12944  434E
12945  434F
12946  4350
12947  4351
12948  4352
12949  4353
12950  4354
12951  4355
12952  4356
12953  4357
12954  4358
12955  4359
12956  435A
12957  435B
12958  435C
12959  435D
12960  435E
12961  435F
12962  4360
12963  4361
12964  4362
12965  4363
12966  4364
12967  4365
12968  4366
12969  4367
12970  4368
12971  4369
12972  436A
12973  436B
12974  436C
12975  436D
12976  436E
12977  436F
12978  4370
12979  4371
12980  4372
12981  4373
12982  4374
12983  4375
12984  4376
12985  4377
12986  4378
12987  4379
12988  437A
12989  437B
12990  437C
12991  437D
12992  437E
12993  437F
12994  4380
12995  4381
12996  4382
12997  4383
12998  4384
12999  4385
13000  4386
13001  4387
13002  4388
13003  4389
13004  438A
13005  438B
13006  438C
13007  438D
13008  438E
13009  438F
13010  4390
13011  4391
13012  4392
13013  4393
13014  4394
13015  4395
13016  4396
13017  4397
13018  4398
13019  4399
13020  439A
13021  439B
13022  439C
13023  439D
13024  439E
13025  439F
13026  43A0
13027  43A1
13028  43A2
13029  43A3
13030  43A4
13031  43A5
13032  43A6
13033  43A7
13034  43A8
13035  43A9
13036  43AA
13037  43AB
13038  43AC
13039  43AD
13040  43AE
13041  43AF
13042  43B0
13043  43B1
13044  43B2
13045  43B3
13046  43B4
13047  43B5
13048  43B6
13049  43B7
13050  43B8
13051  43B9
13052  43BA
13053  43BB
13054  43BC
13055  43BD
13056  43BE
13057  43BF
13058  43C0
13059  43C1
13060  43C2
13061  43C3
13062  43C4
13063  43C5
13064  43C6
13065  43C7
13066  43C8
13067  43C9
13068  43CA
13069  43CB
13070  43CC
13071  43CD
13072  43CE
13073  43CF
13074  43D0
13075  43D1
13076  43D2
13077  43D3
13078  43D4
13079  43D5
13080  43D6
13081  43D7
13082  43D8
13083  43D9
13084  43DA
13085  43DB
13086  43DC
13087  43DD
13088  43DE
13089  43DF
13090  43E0
13091  43E1
13092  43E2
13093  43E3
13094  43E4
13095  43E5
13096  43E6
13097  43E7
13098  43E8
13099  43E9
13100  43EA
13101  43EB
13102  43EC
13103  43ED
13104  43EE
13105  43EF
13106  43F0
13107  43F1
13108  43F2
13109  43F3
13110  43F4
13111  43F5
13112  43F6
13113  43F7
13114  43F8
13115  43F9
13116  43FA
13117  43FB
13118  43FC
13119  43FD
13120  43FE
13121  43FF
13122  4400
13123  4401
13124  4402
13125  4403
13126  4404
13127  4405
13128  4406
13129  4407
13130  4408
13131  4409
13132  440A
13133  440B
13134  440C
13135  440D
13136  440E
13137  440F
13138  4410
13139  4411
13140  4412
13141  4413
13142  4414
13143  4415
13144  4416
13145  4417
13146  4418
13147  4419
13148  441A
13149  441B
13150  441C
13151  441D
13152  441E
13153  441F
13154  4420
13155  4421
13156  4422
13157  4423
13158  4424
13159  4425
13160  4426
13161  4427
13162  4428
13163  4429
13164  442A
13165  442B
13166  442C
13167  442D
13168  442E
13169  442F
13170  4430
13171  4431
13172  4432
13173  4433
13174  4434
13175  4435
13176  4436
13177  4437
13178  4438
13179  4439
13180  443A
13181  443B
13182  443C
13183  443D
13184  443E
13185  443F
13186  4440
13187  4441
13188  4442
13189  4443
13190  4444
13191  4445
13192  4446
13193  4447
13194  4448
13195  4449
13196  444A
13197  444B
13198  444C
13199  444D
13200  444E
13201  444F
13202  4450
13203  4451
13204  4452
13205  4453
13206  4454
13207  4455
13208  4456
13209  4457
13210  4458
13211  4459
13212  445A
13213  445B
13214  445C
13215  445D
13216  445E
13217  445F
13218  4460
13219  4461
13220  4462
13221  4463
13222  4464
13223  4465
13224  4466
13225  4467
13226  4468
13227  4469
13228  446A
13229  446B
13230  446C
13231  446D
13232  446E
13233  446F
13234  4470
13235  4471
13236  4472
13237  4473
13238  4474
13239  4475
13240  4476
13241  4477
13242  4478
13243  4479
13244  447A
13245  447B
13246  447C
13247  447D
13248  447E
13249  447F
13250  4480
13251  4481
13252  4482
13253  4483
13254  4484
13255  4485
13256  4486
13257  4487
13258  4488
13259  4489
13260  448A
13261  448B
13262  448C
13263  448D
13264  448E
13265  448F
13266  4490
13267  4491
13268  4492
13269  4493
13270  4494
13271  4495
13272  4496
13273  4497
13274  4498
13275  4499
13276  449A
13277  449B
13278  449C
13279  449D
13280  449E
13281  449F
13282  44A0
13283  44A1
13284  44A2
13285  44A3
13286  44A4
13287  44A5
13288  44A6
13289  44A7
13290  44A8
13291  44A9
13292  44AA
13293  44AB
13294  44AC
13295  44AD
13296  44AE
13297  44AF
13298  44B0
13299  44B1
13300  44B2
13301  44B3
13302  44B4
13303  44B5
13304  44B6
13305  44B7
13306  44B8
13307  44B9
13308  44BA
13309  44BB
13310  44BC
13311  44BD
13312  44BE
13313  44BF
13314  44C0
13315  44C1
13316  44C2
13317  44C3
13318  44C4
13319  44C5
13320  44C6
13321  44C7
13322  44C8
13323  44C9
13324  44CA
13325  44CB
13326  44CC
13327  44CD
13328  44CE
13329  44CF
13330  44D0
13331  44D1
13332  44D2
13333  44D3
13334  44D4
13335  44D5
13336  44D6
13337  44D7
13338  44D8
13339  44D9
13340  44DA
13341  44DB
13342  44DC
13343  44DD
13344  44DE
13345  44DF
13346  44E0
13347  44E1
13348  44E2
13349  44E3
13350  44E4
13351  44E5
13352  44E6
13353  44E7
13354  44E8
13355  44E9
13356  44EA
13357  44EB
13358  44EC
13359  44ED
13360  44EE
13361  44EF
13362  44F0
13363  44F1
13364  44F2
13365  44F3
13366  44F4
13367  44F5
13368  44F6
13369  44F7
13370  44F8
13371  44F9
13372  44FA
13373  44FB
13374  44FC
13375  44FD
13376  44FE
13377  44FF
13378  4500
13379  4501
13380  4502
13381  4503
13382  4504
13383  4505
13384  4506
13385  4507
13386  4508
13387  4509
13388  450A
13389  450B
13390  450C
13391  450D
13392  450E
13393  450F
13394  4510
13395  4511
13396  4512
13397  4513
13398  4514
13399  4515
13400  4516
13401  4517
13402  4518
13403  4519
13404  451A
13405  451B
13406  451C
13407  451D
13408  451E
13409  451F
13410  4520
13411  4521
13412  4522
13413  4523
13414  4524
13415  4525
13416  4526
13417  4527
13418  4528
13419  4529
13420  452A
13421  452B
13422  452C
13423  452D
13424  452E
13425  452F
13426  4530
13427  4531
13428  4532
13429  4533
13430  4534
13431  4535
13432  4536
13433  4537
13434  4538
13435  4539
13436  453A
13437  453B
13438  453C
13439  453D
13440  453E
13441  453F
13442  4540
13443  4541
13444  4542
13445  4543
13446  4544
13447  4545
13448  4546
13449  4547
13450  4548
13451  4549
13452  454A
13453  454B
13454  454C
13455  454D
13456  454E
13457  454F
13458  4550
13459  4551
13460  4552
13461  4553
13462  4554
13463  4555
13464  4556
13465  4557
13466  4558
13467  4559
13468  455A
13469  455B
13470  455C
13471  455D
13472  455E
13473  455F
13474  4560
13475  4561
13476  4562
13477  4563
13478  4564
13479  4565
13480  4566
13481  4567
13482  4568
13483  4569
13484  456A
13485  456B
13486  456C
13487  456D
13488  456E
13489  456F
13490  4570
13491  4571
13492  4572
13493  4573
13494  4574
13495  4575
13496  4576
13497  4577
13498  4578
13499  4579
13500  457A
13501  457B
13502  457C
13503  457D
13504  457E
13505  457F
13506  4580
13507  4581
13508  4582
13509  4583
13510  4584
13511  4585
13512  4586
13513  4587
13514  4588
13515  4589
13516  458A
13517  458B
13518  458C
13519  458D
13520  458E
13521  458F
13522  4590
13523  4591
13524  4592
13525  4593
13526  4594
13527  4595
13528  4596
13529  4597
13530  4598
13531  4599
13532  459A
13533  459B
13534  459C
13535  459D
13536  459E
13537  459F
13538  45A0
13539  45A1
13540  45A2
13541  45A3
13542  45A4
13543  45A5
13544  45A6
13545  45A7
13546  45A8
13547  45A9
13548  45AA
13549  45AB
13550  45AC
13551  45AD
13552  45AE
13553  45AF
13554  45B0
13555  45B1
13556  45B2
13557  45B3
13558  45B4
13559  45B5
13560  45B6
13561  45B7
13562  45B8
13563  45B9
13564  45BA
13565  45BB
13566  45BC
13567  45BD
13568  45BE
13569  45BF
13570  45C0
13571  45C1
13572  45C2
13573  45C3
13574  45C4
13575  45C5
13576  45C6
13577  45C7
13578  45C8
13579  45C9
13580  45CA
13581  45CB
13582  45CC
13583  45CD
13584  45CE
13585  45CF
13586  45D0
13587  45D1
13588  45D2
13589  45D3
13590  45D4
13591  45D5
13592  45D6
13593  45D7
13594  45D8
13595  45D9
13596  45DA
13597  45DB
13598  45DC
13599  45DD
13600  45DE
13601  45DF
13602  45E0
13603  45E1
13604  45E2
13605  45E3
13606  45E4
13607  45E5
13608  45E6
13609  45E7
13610  45E8
13611  45E9
13612  45EA
13613  45EB
13614  45EC
13615  45ED
13616  45EE
13617  45EF
13618  45F0
13619  45F1
13620  45F2
13621  45F3
13622  45F4
13623  45F5
13624  45F6
13625  45F7
13626  45F8
13627  45F9
13628  45FA
13629  45FB
13630  45FC
13631  45FD
13632  45FE
13633  45FF
13634  4600
13635  4601
13636  4602
13637  4603
13638  4604
13639  4605
13640  4606
13641  4607
13642  4608
13643  4609
13644  460A
13645  460B
13646  460C
13647  460D
13648  460E
13649  460F
13650  4610
13651  4611
13652  4612
13653  4613
13654  4614
13655  4615
13656  4616
13657  4617
13658  4618
13659  4619
13660  461A
13661  461B
13662  461C
13663  461D
13664  461E
13665  461F
13666  4620
13667  4621
13668  4622
13669  4623
13670  4624
13671  4625
13672  4626
13673  4627
13674  4628
13675  4629
13676  462A
13677  462B
13678  462C
13679  462D
13680  462E
13681  462F
13682  4630
13683  4631
13684  4632
13685  4633
13686  4634
13687  4635
13688  4636
13689  4637
13690  4638
13691  4639
13692  463A
13693  463B
13694  463C
13695  463D
13696  463E
13697  463F
13698  4640
13699  4641
13700  4642
13701  4643
13702  4644
13703  4645
13704  4646
13705  4647
13706  4648
13707  4649
13708  464A
13709  464B
13710  464C
13711  464D
13712  464E
13713  464F
13714  4650
13715  4651
13716  4652
13717  4653
13718  4654
13719  4655
13720  4656
13721  4657
13722  4658
13723  4659
13724  465A
13725  465B
13726  465C
13727  465D
13728  465E
13729  465F
13730  4660
13731  4661
13732  4662
13733  4663
13734  4664
13735  4665
13736  4666
13737  4667
13738  4668
13739  4669
13740  466A
13741  466B
13742  466C
13743  466D
13744  466E
13745  466F
13746  4670
13747  4671
13748  4672
13749  4673
13750  4674
13751  4675
13752  4676
13753  4677
13754  4678
13755  4679
13756  467A
13757  467B
13758  467C
13759  467D
13760  467E
13761  467F
13762  4680
13763  4681
13764  4682
13765  4683
13766  4684
13767  4685
13768  4686
13769  4687
13770  4688
13771  4689
13772  468A
13773  468B
13774  468C
13775  468D
13776  468E
13777  468F
13778  4690
13779  4691
13780  4692
13781  4693
13782  4694
13783  4695
13784  4696
13785  4697
13786  4698
13787  4699
13788  469A
13789  469B
13790  469C
13791  469D
13792  469E
13793  469F
13794  46A0
13795  46A1
13796  46A2
13797  46A3
13798  46A4
13799  46A5
13800  46A6
13801  46A7
13802  46A8
13803  46A9
13804  46AA
13805  46AB
13806  46AC
13807  46AD
13808  46AE
13809  46AF
13810  46B0
13811  46B1
13812  46B2
13813  46B3
13814  46B4
13815  46B5
13816  46B6
13817  46B7
13818  46B8
13819  46B9
13820  46BA
13821  46BB
13822  46BC
13823  46BD
13824  46BE
13825  46BF
13826  46C0
13827  46C1
13828  46C2
13829  46C3
13830  46C4
13831  46C5
13832  46C6
13833  46C7
13834  46C8
13835  46C9
13836  46CA
13837  46CB
13838  46CC
13839  46CD
13840  46CE
13841  46CF
13842  46D0
13843  46D1
13844  46D2
13845  46D3
13846  46D4
13847  46D5
13848  46D6
13849  46D7
13850  46D8
13851  46D9
13852  46DA
13853  46DB
13854  46DC
13855  46DD
13856  46DE
13857  46DF
13858  46E0
13859  46E1
13860  46E2
13861  46E3
13862  46E4
13863  46E5
13864  46E6
13865  46E7
13866  46E8
13867  46E9
13868  46EA
13869  46EB
13870  46EC
13871  46ED
13872  46EE
13873  46EF
13874  46F0
13875  46F1
13876  46F2
13877  46F3
13878  46F4
13879  46F5
13880  46F6
13881  46F7
13882  46F8
13883  46F9
13884  46FA
13885  46FB
13886  46FC
13887  46FD
13888  46FE
13889  46FF
13890  4700
13891  4701
13892  4702
13893  4703
13894  4704
13895  4705
13896  4706
13897  4707
13898  4708
13899  4709
13900  470A
13901  470B
13902  470C
13903  470D
13904  470E
13905  470F
13906  4710
13907  4711
13908  4712
13909  4713
13910  4714
13911  4715
13912  4716
13913  4717
13914  4718
13915  4719
13916  471A
13917  471B
13918  471C
13919  471D
13920  471E
13921  471F
13922  4720
13923  4721
13924  4722
13925  4723
13926  4724
13927  4725
13928  4726
13929  4727
13930  4728
13931  4729
13932  472A
13933  472B
13934  472C
13935  472D
13936  472E
13937  472F
13938  4730
13939  4731
13940  4732
13941  4733
13942  4734
13943  4735
13944  4736
13945  4737
13946  4738
13947  4739
13948  473A
13949  473B
13950  473C
13951  473D
13952  473E
13953  473F
13954  4740
13955  4741
13956  4742
13957  4743
13958  4744
13959  4745
13960  4746
13961  4747
13962  4748
13963  4749
13964  474A
13965  474B
13966  474C
13967  474D
13968  474E
13969  474F
13970  4750
13971  4751
13972  4752
13973  4753
13974  4754
13975  4755
13976  4756
13977  4757
13978  4758
13979  4759
13980  475A
13981  475B
13982  475C
13983  475D
13984  475E
13985  475F
13986  4760
13987  4761
13988  4762
13989  4763
13990  4764
13991  4765
13992  4766
13993  4767
13994  4768
13995  4769
13996  476A
13997  476B
13998  476C
13999  476D
14000  476E
14001  476F
14002  4770
14003  4771
14004  4772
14005  4773
14006  4774
14007  4775
14008  4776
14009  4777
14010  4778
14011  4779
14012  477A
14013  477B
14014  477C
14015  477D
14016  477E
14017  477F
14018  4780
14019  4781
14020  4782
14021  4783
14022  4784
14023  4785
14024  4786
14025  4787
14026  4788
14027  4789
14028  478A
14029  478B
14030  478C
14031  478D
14032  478E
14033  478F
14034  4790
14035  4791
14036  4792
14037  4793
14038  4794
14039  4795
14040  4796
14041  4797
14042  4798
14043  4799
14044  479A
14045  479B
14046  479C
14047  479D
14048  479E
14049  479F
14050  47A0
14051  47A1
14052  47A2
14053  47A3
14054  47A4
14055  47A5
14056  47A6
14057  47A7
14058  47A8
14059  47A9
14060  47AA
14061  47AB
14062  47AC
14063  47AD
14064  47AE
14065  47AF
14066  47B0
14067  47B1
14068  47B2
14069  47B3
14070  47B4
14071  47B5
14072  47B6
14073  47B7
14074  47B8
14075  47B9
14076  47BA
14077  47BB
14078  47BC
14079  47BD
14080  47BE
14081  47BF
14082  47C0
14083  47C1
14084  47C2
14085  47C3
14086  47C4
14087  47C5
14088  47C6
14089  47C7
14090  47C8
14091  47C9
14092  47CA
14093  47CB
14094  47CC
14095  47CD
14096  47CE
14097  47CF
14098  47D0
14099  47D1
14100  47D2
14101  47D3
14102  47D4
14103  47D5
14104  47D6
14105  47D7
14106  47D8
14107  47D9
14108  47DA
14109  47DB
14110  47DC
14111  47DD
14112  47DE
14113  47DF
14114  47E0
14115  47E1
14116  47E2
14117  47E3
14118  47E4
14119  47E5
14120  47E6
14121  47E7
14122  47E8
14123  47E9
14124  47EA
14125  47EB
14126  47EC
14127  47ED
14128  47EE
14129  47EF
14130  47F0
14131  47F1
14132  47F2
14133  47F3
14134  47F4
14135  47F5
14136  47F6
14137  47F7
14138  47F8
14139  47F9
14140  47FA
14141  47FB
14142  47FC
14143  47FD
14144  47FE
14145  47FF
14146  4800
14147  4801
14148  4802
14149  4803
14150  4804
14151  4805
14152  4806
14153  4807
14154  4808
14155  4809
14156  480A
14157  480B
14158  480C
14159  480D
14160  480E
14161  480F
14162  4810
14163  4811
14164  4812
14165  4813
14166  4814
14167  4815
14168  4816
14169  4817
14170  4818
14171  4819
14172  481A
14173  481B
14174  481C
14175  481D
14176  481E
14177  481F
14178  4820
14179  4821
14180  4822
14181  4823
14182  4824
14183  4825
14184  4826
14185  4827
14186  4828
14187  4829
14188  482A
14189  482B
14190  482C
14191  482D
14192  482E
14193  482F
14194  4830
14195  4831
14196  4832
14197  4833
14198  4834
14199  4835
14200  4836
14201  4837
14202  4838
14203  4839
14204  483A
14205  483B
14206  483C
14207  483D
14208  483E
14209  483F
14210  4840
14211  4841
14212  4842
14213  4843
14214  4844
14215  4845
14216  4846
14217  4847
14218  4848
14219  4849
14220  484A
14221  484B
14222  484C
14223  484D
14224  484E
14225  484F
14226  4850
14227  4851
14228  4852
14229  4853
14230  4854
14231  4855
14232  4856
14233  4857
14234  4858
14235  4859
14236  485A
14237  485B
14238  485C
14239  485D
14240  485E
14241  485F
14242  4860
14243  4861
14244  4862
14245  4863
14246  4864
14247  4865
14248  4866
14249  4867
14250  4868
14251  4869
14252  486A
14253  486B
14254  486C
14255  486D
14256  486E
14257  486F
14258  4870
14259  4871
14260  4872
14261  4873
14262  4874
14263  4875
14264  4876
14265  4877
14266  4878
14267  4879
14268  487A
14269  487B
14270  487C
14271  487D
14272  487E
14273  487F
14274  4880
14275  4881
14276  4882
14277  4883
14278  4884
14279  4885
14280  4886
14281  4887
14282  4888
14283  4889
14284  488A
14285  488B
14286  488C
14287  488D
14288  488E
14289  488F
14290  4890
14291  4891
14292  4892
14293  4893
14294  4894
14295  4895
14296  4896
14297  4897
14298  4898
14299  4899
14300  489A
14301  489B
14302  489C
14303  489D
14304  489E
14305  489F
14306  48A0
14307  48A1
14308  48A2
14309  48A3
14310  48A4
14311  48A5
14312  48A6
14313  48A7
14314  48A8
14315  48A9
14316  48AA
14317  48AB
14318  48AC
14319  48AD
14320  48AE
14321  48AF
14322  48B0
14323  48B1
14324  48B2
14325  48B3
14326  48B4
14327  48B5
14328  48B6
14329  48B7
14330  48B8
14331  48B9
14332  48BA
14333  48BB
14334  48BC
14335  48BD
14336  48BE
14337  48BF
14338  48C0
14339  48C1
14340  48C2
14341  48C3
14342  48C4
14343  48C5
14344  48C6
14345  48C7
14346  48C8
14347  48C9
14348  48CA
14349  48CB
14350  48CC
14351  48CD
14352  48CE
14353  48CF
14354  48D0
14355  48D1
14356  48D2
14357  48D3
14358  48D4
14359  48D5
14360  48D6
14361  48D7
14362  48D8
14363  48D9
14364  48DA
14365  48DB
14366  48DC
14367  48DD
14368  48DE
14369  48DF
14370  48E0
14371  48E1
14372  48E2
14373  48E3
14374  48E4
14375  48E5
14376  48E6
14377  48E7
14378  48E8
14379  48E9
14380  48EA
14381  48EB
14382  48EC
14383  48ED
14384  48EE
14385  48EF
14386  48F0
14387  48F1
14388  48F2
14389  48F3
14390  48F4
14391  48F5
14392  48F6
14393  48F7
14394  48F8
14395  48F9
14396  48FA
14397  48FB
14398  48FC
14399  48FD
14400  48FE
14401  48FF
14402  4900
14403  4901
14404  4902
14405  4903
14406  4904
14407  4905
14408  4906
14409  4907
14410  4908
14411  4909
14412  490A
14413  490B
14414  490C
14415  490D
14416  490E
14417  490F
14418  4910
14419  4911
14420  4912
14421  4913
14422  4914
14423  4915
14424  4916
14425  4917
14426  4918
14427  4919
14428  491A
14429  491B
14430  491C
14431  491D
14432  491E
14433  491F
14434  4920
14435  4921
14436  4922
14437  4923
14438  4924
14439  4925
14440  4926
14441  4927
14442  4928
14443  4929
14444  492A
14445  492B
14446  492C
14447  492D
14448  492E
14449  492F
14450  4930
14451  4931
14452  4932
14453  4933
14454  4934
14455  4935
14456  4936
14457  4937
14458  4938
14459  4939
14460  493A
14461  493B
14462  493C
14463  493D
14464  493E
14465  493F
14466  4940
14467  4941
14468  4942
14469  4943
14470  4944
14471  4945
14472  4946
14473  4947
14474  4948
14475  4949
14476  494A
14477  494B
14478  494C
14479  494D
14480  494E
14481  494F
14482  4950
14483  4951
14484  4952
14485  4953
14486  4954
14487  4955
14488  4956
14489  4957
14490  4958
14491  4959
14492  495A
14493  495B
14494  495C
14495  495D
14496  495E
14497  495F
14498  4960
14499  4961
14500  4962
14501  4963
14502  4964
14503  4965
14504  4966
14505  4967
14506  4968
14507  4969
14508  496A
14509  496B
14510  496C
14511  496D
14512  496E
14513  496F
14514  4970
14515  4971
14516  4972
14517  4973
14518  4974
14519  4975
14520  4976
14521  4977
14522  4978
14523  4979
14524  497A
14525  497B
14526  497C
14527  497D
14528  497E
14529  497F
14530  4980
14531  4981
14532  4982
14533  4983
14534  4984
14535  4985
14536  4986
14537  4987
14538  4988
14539  4989
14540  498A
14541  498B
14542  498C
14543  498D
14544  498E
14545  498F
14546  4990
14547  4991
14548  4992
14549  4993
14550  4994
14551  4995
14552  4996
14553  4997
14554  4998
14555  4999
14556  499A
14557  499B
14558  499C
14559  499D
14560  499E
14561  499F
14562  49A0
14563  49A1
14564  49A2
14565  49A3
14566  49A4
14567  49A5
14568  49A6
14569  49A7
14570  49A8
14571  49A9
14572  49AA
14573  49AB
14574  49AC
14575  49AD
14576  49AE
14577  49AF
14578  49B0
14579  49B1
14580  49B2
14581  49B3
14582  49B4
14583  49B5
14584  49B6
14585  49B7
14586  49B8
14587  49B9
14588  49BA
14589  49BB
14590  49BC
14591  49BD
14592  49BE
14593  49BF
14594  49C0
14595  49C1
14596  49C2
14597  49C3
14598  49C4
14599  49C5
14600  49C6
14601  49C7
14602  49C8
14603  49C9
14604  49CA
14605  49CB
14606  49CC
14607  49CD
14608  49CE
14609  49CF
14610  49D0
14611  49D1
14612  49D2
14613  49D3
14614  49D4
14615  49D5
14616  49D6
14617  49D7
14618  49D8
14619  49D9
14620  49DA
14621  49DB
14622  49DC
14623  49DD
14624  49DE
14625  49DF
14626  49E0
14627  49E1
14628  49E2
14629  49E3
14630  49E4
14631  49E5
14632  49E6
14633  49E7
14634  49E8
14635  49E9
14636  49EA
14637  49EB
14638  49EC
14639  49ED
14640  49EE
14641  49EF
14642  49F0
14643  49F1
14644  49F2
14645  49F3
14646  49F4
14647  49F5
14648  49F6
14649  49F7
14650  49F8
14651  49F9
14652  49FA
14653  49FB
14654  49FC
14655  49FD
14656  49FE
14657  49FF
14658  4A00
14659  4A01
14660  4A02
14661  4A03
14662  4A04
14663  4A05
14664  4A06
14665  4A07
14666  4A08
14667  4A09
14668  4A0A
14669  4A0B
14670  4A0C
14671  4A0D
14672  4A0E
14673  4A0F
14674  4A10
14675  4A11
14676  4A12
14677  4A13
14678  4A14
14679  4A15
14680  4A16
14681  4A17
14682  4A18
14683  4A19
14684  4A1A
14685  4A1B
14686  4A1C
14687  4A1D
14688  4A1E
14689  4A1F
14690  4A20
14691  4A21
14692  4A22
14693  4A23
14694  4A24
14695  4A25
14696  4A26
14697  4A27
14698  4A28
14699  4A29
14700  4A2A
14701  4A2B
14702  4A2C
14703  4A2D
14704  4A2E
14705  4A2F
14706  4A30
14707  4A31
14708  4A32
14709  4A33
14710  4A34
14711  4A35
14712  4A36
14713  4A37
14714  4A38
14715  4A39
14716  4A3A
14717  4A3B
14718  4A3C
14719  4A3D
14720  4A3E
14721  4A3F
14722  4A40
14723  4A41
14724  4A42
14725  4A43
14726  4A44
14727  4A45
14728  4A46
14729  4A47
14730  4A48
14731  4A49
14732  4A4A
14733  4A4B
14734  4A4C
14735  4A4D
14736  4A4E
14737  4A4F
14738  4A50
14739  4A51
14740  4A52
14741  4A53
14742  4A54
14743  4A55
14744  4A56
14745  4A57
14746  4A58
14747  4A59
14748  4A5A
14749  4A5B
14750  4A5C
14751  4A5D
14752  4A5E
14753  4A5F
14754  4A60
14755  4A61
14756  4A62
14757  4A63
14758  4A64
14759  4A65
14760  4A66
14761  4A67
14762  4A68
14763  4A69
14764  4A6A
14765  4A6B
14766  4A6C
14767  4A6D
14768  4A6E
14769  4A6F
14770  4A70
14771  4A71
14772  4A72
14773  4A73
14774  4A74
14775  4A75
14776  4A76
14777  4A77
14778  4A78
14779  4A79
14780  4A7A
14781  4A7B
14782  4A7C
14783  4A7D
14784  4A7E
14785  4A7F
14786  4A80
14787  4A81
14788  4A82
14789  4A83
14790  4A84
14791  4A85
14792  4A86
14793  4A87
14794  4A88
14795  4A89
14796  4A8A
14797  4A8B
14798  4A8C
14799  4A8D
14800  4A8E
14801  4A8F
14802  4A90
14803  4A91
14804  4A92
14805  4A93
14806  4A94
14807  4A95
14808  4A96
14809  4A97
14810  4A98
14811  4A99
14812  4A9A
14813  4A9B
14814  4A9C
14815  4A9D
14816  4A9E
14817  4A9F
14818  4AA0
14819  4AA1
14820  4AA2
14821  4AA3
14822  4AA4
14823  4AA5
14824  4AA6
14825  4AA7
14826  4AA8
14827  4AA9
14828  4AAA
14829  4AAB
14830  4AAC
14831  4AAD
14832  4AAE
14833  4AAF
14834  4AB0
14835  4AB1
14836  4AB2
14837  4AB3
14838  4AB4
14839  4AB5
14840  4AB6
14841  4AB7
14842  4AB8
14843  4AB9
14844  4ABA
14845  4ABB
14846  4ABC
14847  4ABD
14848  4ABE
14849  4ABF
14850  4AC0
14851  4AC1
14852  4AC2
14853  4AC3
14854  4AC4
14855  4AC5
14856  4AC6
14857  4AC7
14858  4AC8
14859  4AC9
14860  4ACA
14861  4ACB
14862  4ACC
14863  4ACD
14864  4ACE
14865  4ACF
14866  4AD0
14867  4AD1
14868  4AD2
14869  4AD3
14870  4AD4
14871  4AD5
14872  4AD6
14873  4AD7
14874  4AD8
14875  4AD9
14876  4ADA
14877  4ADB
14878  4ADC
14879  4ADD
14880  4ADE
14881  4ADF
14882  4AE0
14883  4AE1
14884  4AE2
14885  4AE3
14886  4AE4
14887  4AE5
14888  4AE6
14889  4AE7
14890  4AE8
14891  4AE9
14892  4AEA
14893  4AEB
14894  4AEC
14895  4AED
14896  4AEE
14897  4AEF
14898  4AF0
14899  4AF1
14900  4AF2
14901  4AF3
14902  4AF4
14903  4AF5
14904  4AF6
14905  4AF7
14906  4AF8
14907  4AF9
14908  4AFA
14909  4AFB
14910  4AFC
14911  4AFD
14912  4AFE
14913  4AFF
14914  4B00
14915  4B01
14916  4B02
14917  4B03
14918  4B04
14919  4B05
14920  4B06
14921  4B07
14922  4B08
14923  4B09
14924  4B0A
14925  4B0B
14926  4B0C
14927  4B0D
14928  4B0E
14929  4B0F
14930  4B10
14931  4B11
14932  4B12
14933  4B13
14934  4B14
14935  4B15
14936  4B16
14937  4B17
14938  4B18
14939  4B19
14940  4B1A
14941  4B1B
14942  4B1C
14943  4B1D
14944  4B1E
14945  4B1F
14946  4B20
14947  4B21
14948  4B22
14949  4B23
14950  4B24
14951  4B25
14952  4B26
14953  4B27
14954  4B28
14955  4B29
14956  4B2A
14957  4B2B
14958  4B2C
14959  4B2D
14960  4B2E
14961  4B2F
14962  4B30
14963  4B31
14964  4B32
14965  4B33
14966  4B34
14967  4B35
14968  4B36
14969  4B37
14970  4B38
14971  4B39
14972  4B3A
14973  4B3B
14974  4B3C
14975  4B3D
14976  4B3E
14977  4B3F
14978  4B40
14979  4B41
14980  4B42
14981  4B43
14982  4B44
14983  4B45
14984  4B46
14985  4B47
14986  4B48
14987  4B49
14988  4B4A
14989  4B4B
14990  4B4C
14991  4B4D
14992  4B4E
14993  4B4F
14994  4B50
14995  4B51
14996  4B52
14997  4B53
14998  4B54
14999  4B55
15000  4B56
15001  4B57
15002  4B58
15003  4B59
15004  4B5A
15005  4B5B
15006  4B5C
15007  4B5D
15008  4B5E
15009  4B5F
15010  4B60
15011  4B61
15012  4B62
15013  4B63
15014  4B64
15015  4B65
15016  4B66
15017  4B67
15018  4B68
15019  4B69
15020  4B6A
15021  4B6B
15022  4B6C
15023  4B6D
15024  4B6E
15025  4B6F
15026  4B70
15027  4B71
15028  4B72
15029  4B73
15030  4B74
15031  4B75
15032  4B76
15033  4B77
15034  4B78
15035  4B79
15036  4B7A
15037  4B7B
15038  4B7C
15039  4B7D
15040  4B7E
15041  4B7F
15042  4B80
15043  4B81
15044  4B82
15045  4B83
15046  4B84
15047  4B85
15048  4B86
15049  4B87
15050  4B88
15051  4B89
15052  4B8A
15053  4B8B
15054  4B8C
15055  4B8D
15056  4B8E
15057  4B8F
15058  4B90
15059  4B91
15060  4B92
15061  4B93
15062  4B94
15063  4B95
15064  4B96
15065  4B97
15066  4B98
15067  4B99
15068  4B9A
15069  4B9B
15070  4B9C
15071  4B9D
15072  4B9E
15073  4B9F
15074  4BA0
15075  4BA1
15076  4BA2
15077  4BA3
15078  4BA4
15079  4BA5
15080  4BA6
15081  4BA7
15082  4BA8
15083  4BA9
15084  4BAA
15085  4BAB
15086  4BAC
15087  4BAD
15088  4BAE
15089  4BAF
15090  4BB0
15091  4BB1
15092  4BB2
15093  4BB3
15094  4BB4
15095  4BB5
15096  4BB6
15097  4BB7
15098  4BB8
15099  4BB9
15100  4BBA
15101  4BBB
15102  4BBC
15103  4BBD
15104  4BBE
15105  4BBF
15106  4BC0
15107  4BC1
15108  4BC2
15109  4BC3
15110  4BC4
15111  4BC5
15112  4BC6
15113  4BC7
15114  4BC8
15115  4BC9
15116  4BCA
15117  4BCB
15118  4BCC
15119  4BCD
15120  4BCE
15121  4BCF
15122  4BD0
15123  4BD1
15124  4BD2
15125  4BD3
15126  4BD4
15127  4BD5
15128  4BD6
15129  4BD7
15130  4BD8
15131  4BD9
15132  4BDA
15133  4BDB
15134  4BDC
15135  4BDD
15136  4BDE
15137  4BDF
15138  4BE0
15139  4BE1
15140  4BE2
15141  4BE3
15142  4BE4
15143  4BE5
15144  4BE6
15145  4BE7
15146  4BE8
15147  4BE9
15148  4BEA
15149  4BEB
15150  4BEC
15151  4BED
15152  4BEE
15153  4BEF
15154  4BF0
15155  4BF1
15156  4BF2
15157  4BF3
15158  4BF4
15159  4BF5
15160  4BF6
15161  4BF7
15162  4BF8
15163  4BF9
15164  4BFA
15165  4BFB
15166  4BFC
15167  4BFD
15168  4BFE
15169  4BFF
15170  4C00
15171  4C01
15172  4C02
15173  4C03
15174  4C04
15175  4C05
15176  4C06
15177  4C07
15178  4C08
15179  4C09
15180  4C0A
15181  4C0B
15182  4C0C
15183  4C0D
15184  4C0E
15185  4C0F
15186  4C10
15187  4C11
15188  4C12
15189  4C13
15190  4C14
15191  4C15
15192  4C16
15193  4C17
15194  4C18
15195  4C19
15196  4C1A
15197  4C1B
15198  4C1C
15199  4C1D
15200  4C1E
15201  4C1F
15202  4C20
15203  4C21
15204  4C22
15205  4C23
15206  4C24
15207  4C25
15208  4C26
15209  4C27
15210  4C28
15211  4C29
15212  4C2A
15213  4C2B
15214  4C2C
15215  4C2D
15216  4C2E
15217  4C2F
15218  4C30
15219  4C31
15220  4C32
15221  4C33
15222  4C34
15223  4C35
15224  4C36
15225  4C37
15226  4C38
15227  4C39
15228  4C3A
15229  4C3B
15230  4C3C
15231  4C3D
15232  4C3E
15233  4C3F
15234  4C40
15235  4C41
15236  4C42
15237  4C43
15238  4C44
15239  4C45
15240  4C46
15241  4C47
15242  4C48
15243  4C49
15244  4C4A
15245  4C4B
15246  4C4C
15247  4C4D
15248  4C4E
15249  4C4F
15250  4C50
15251  4C51
15252  4C52
15253  4C53
15254  4C54
15255  4C55
15256  4C56
15257  4C57
15258  4C58
15259  4C59
15260  4C5A
15261  4C5B
15262  4C5C
15263  4C5D
15264  4C5E
15265  4C5F
15266  4C60
15267  4C61
15268  4C62
15269  4C63
15270  4C64
15271  4C65
15272  4C66
15273  4C67
15274  4C68
15275  4C69
15276  4C6A
15277  4C6B
15278  4C6C
15279  4C6D
15280  4C6E
15281  4C6F
15282  4C70
15283  4C71
15284  4C72
15285  4C73
15286  4C74
15287  4C75
15288  4C76
15289  4C77
15290  4C78
15291  4C79
15292  4C7A
15293  4C7B
15294  4C7C
15295  4C7D
15296  4C7E
15297  4C7F
15298  4C80
15299  4C81
15300  4C82
15301  4C83
15302  4C84
15303  4C85
15304  4C86
15305  4C87
15306  4C88
15307  4C89
15308  4C8A
15309  4C8B
15310  4C8C
15311  4C8D
15312  4C8E
15313  4C8F
15314  4C90
15315  4C91
15316  4C92
15317  4C93
15318  4C94
15319  4C95
15320  4C96
15321  4C97
15322  4C98
15323  4C99
15324  4C9A
15325  4C9B
15326  4C9C
15327  4C9D
15328  4C9E
15329  4C9F
15330  4CA0
15331  4CA1
15332  4CA2
15333  4CA3
15334  4CA4
15335  4CA5
15336  4CA6
15337  4CA7
15338  4CA8
15339  4CA9
15340  4CAA
15341  4CAB
15342  4CAC
15343  4CAD
15344  4CAE
15345  4CAF
15346  4CB0
15347  4CB1
15348  4CB2
15349  4CB3
15350  4CB4
15351  4CB5
15352  4CB6
15353  4CB7
15354  4CB8
15355  4CB9
15356  4CBA
15357  4CBB
15358  4CBC
15359  4CBD
15360  4CBE
15361  4CBF
15362  4CC0
15363  4CC1
15364  4CC2
15365  4CC3
15366  4CC4
15367  4CC5
15368  4CC6
15369  4CC7
15370  4CC8
15371  4CC9
15372  4CCA
15373  4CCB
15374  4CCC
15375  4CCD
15376  4CCE
15377  4CCF
15378  4CD0
15379  4CD1
15380  4CD2
15381  4CD3
15382  4CD4
15383  4CD5
15384  4CD6
15385  4CD7
15386  4CD8
15387  4CD9
15388  4CDA
15389  4CDB
15390  4CDC
15391  4CDD
15392  4CDE
15393  4CDF
15394  4CE0
15395  4CE1
15396  4CE2
15397  4CE3
15398  4CE4
15399  4CE5
15400  4CE6
15401  4CE7
15402  4CE8
15403  4CE9
15404  4CEA
15405  4CEB
15406  4CEC
15407  4CED
15408  4CEE
15409  4CEF
15410  4CF0
15411  4CF1
15412  4CF2
15413  4CF3
15414  4CF4
15415  4CF5
15416  4CF6
15417  4CF7
15418  4CF8
15419  4CF9
15420  4CFA
15421  4CFB
15422  4CFC
15423  4CFD
15424  4CFE
15425  4CFF
15426  4D00
15427  4D01
15428  4D02
15429  4D03
15430  4D04
15431  4D05
15432  4D06
15433  4D07
15434  4D08
15435  4D09
15436  4D0A
15437  4D0B
15438  4D0C
15439  4D0D
15440  4D0E
15441  4D0F
15442  4D10
15443  4D11
15444  4D12
15445  4D13
15446  4D14
15447  4D15
15448  4D16
15449  4D17
15450  4D18
15451  4D19
15452  4D1A
15453  4D1B
15454  4D1C
15455  4D1D
15456  4D1E
15457  4D1F
15458  4D20
15459  4D21
15460  4D22
15461  4D23
15462  4D24
15463  4D25
15464  4D26
15465  4D27
15466  4D28
15467  4D29
15468  4D2A
15469  4D2B
15470  4D2C
15471  4D2D
15472  4D2E
15473  4D2F
15474  4D30
15475  4D31
15476  4D32
15477  4D33
15478  4D34
15479  4D35
15480  4D36
15481  4D37
15482  4D38
15483  4D39
15484  4D3A
15485  4D3B
15486  4D3C
15487  4D3D
15488  4D3E
15489  4D3F
15490  4D40
15491  4D41
015492  000556        
015493  000557  var hFonts[54] ;
015494  000558  var stringsCV[54] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
15495  2710
15496  2711
15497  2712
15498  2713
15499  2714
15500  2715
15501  2716
15502  2717
15503  2718
15504  2719
15505  271A
15506  271B
15507  271C
15508  271D
15509  271E
15510  271F
15511  2720
15512  2721
15513  2722
15514  2723
15515  2724
15516  2725
15517  2726
15518  2727
15519  2728
15520  2729
15521  272A
15522  272B
15523  272C
15524  272D
15525  272E
15526  272F
15527  2730
15528  2731
15529  2732
15530  2733
15531  2734
15532  2735
15533  2736
15534  2737
15535  2738
15536  2739
15537  273A
15538  273B
15539  273C
15540  273D
15541  273E
15542  273F
15543  2740
15544  2741
15545  2742
15546  2743
15547  2744
15548  2745
15549  2746
15550  2747
15551  2748
15552  2749
15553  274A
15554  274B
15555  274C
15556  274D
15557  274E
15558  274F
15559  2750
15560  2751
15561  2752
15562  2753
15563  2754
15564  2755
15565  2756
15566  2757
15567  2758
15568  2759
15569  275A
15570  275B
15571  275C
15572  275D
15573  275E
15574  275F
15575  2760
15576  2761
15577  2762
15578  2763
15579  2764
15580  2765
15581  2766
15582  2767
15583  2768
15584  2769
15585  276A
15586  276B
15587  276C
15588  276D
15589  276E
15590  276F
15591  2770
15592  2771
15593  2772
15594  2773
15595  2774
15596  2775
15597  2776
15598  2777
15599  2778
15600  2779
15601  277A
15602  277B
015603  000559  // Start P2.inc
015604  000560  var oObjects[MaxTotObjects+1] ;                 // address of objects
015605  000561  var CurrentForm ;
015606  000562  var TouchXpos, TouchYpos ;
015607  000563  var InputType, TouchState, CurInputData, pInputIndex ;
015608  000564  var comRX[40], cmd[CMDLenMAX] ;
015609  000565        
015610  000566  var InputCS, OutputCS ;
015611  000567        
015612  000568        
015613  000569        
015614  000570  func seroutCS(var op)
015615  000571      serout(op) ;
015616  000572      OutputCS ^= op ;
015617  000573  endfunc
015618  000574        
015619  000575  func nak0()
015620  000576      serout(NAK) ;
015621  000577      InputCS := 0 ;
015622  000578  endfunc
015623  000579        
015624  000580  func seroutOcs()
015625  000581      serout(OutputCS) ;
015626  000582      OutputCS := 0 ;
015627  000583  endfunc
015628  000584        
015629  000585  func SendReport(var id, var objt, var objn, var val)
015630  000586      seroutCS(id) ;
015631  000587      seroutCS(objt) ;
015632  000588      seroutCS(objn) ;
015633  000589      seroutCS(val >> 8) ; // first 8 bits
015634  000590      seroutCS(val) ;
015635  000591      seroutOcs() ;
015636  000592  endfunc
015637  000593        
015638  000594        
015639  000595  func ReadObject(var ObjectType, var ObjectIdx)
015640  000596      var j, k, Objects ;
015641  000597      Objects := *(oObjects+ObjectType) ;
015642  000598        
015643  000599      j := 2 + ObjectIdx * 2 + Objects ;
015644  000600       if (ObjectType == tForm)
015645  000601          k := CurrentForm ;
015646  000602      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
015647  000603          k := img_GetWord(hndl, *j, IMAGE_TAG2);
015648  000604      else if (ObjectType == tStrings)
015649  000605          k := stringsCV[ObjectIdx];
015650  000606          else
015651  000607          k := img_GetWord(hndl, *j, IMAGE_INDEX);
015652  000608          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
015653  000609                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
015654  000610      endif
015655  000611      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
015656  000612  endfunc
015657  000613        
015658  000614        
015659  000615  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
015660  000616      var i, j, k, Objects ;
015661  000617      ObjectType &= 0x3f ;
015662  000618      if (ObjectType == tForm)
015663  000619          ActivateForm(ObjectIdx) ;
015664  000620      else
015665  000621          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
015666  000622          i := *(Objects) ;
015667  000623          switch (ObjectType)
015668  000624              case tWinButton :
015669  000625                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
015670  000626                  break ;
015671  000627              case tUserButton :
015672  000628                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
015673  000629                  break ;
015674  000630              default : j := -1 ;
015675  000631          endswitch
015676  000632          if (j != -1)
015677  000633              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
015678  000634              NewVal := NewVal << 1 ;
015679  000635              if (OVF())      // button group index change
015680  000636                  if (*(j+InputData+Ofs_IPD_P1))
015681  000637                      k &= 1 ;    // mask off old group index for momentary
015682  000638                  else
015683  000639                      k &= 3 ;    // mask off old group index for toggle
015684  000640                  endif
015685  000641              else            // normal set
015686  000642                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
015687  000643                  k &= 0xfffc ;    // retain only group index for state set
015688  000644              endif
015689  000645              NewVal |= k ;
015690  000646          endif
015691  000647           if (ObjectType == tLeddigits)
015692  000648              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
015693  000649              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015694  000650          else if (ObjectType == tStrings)
015695  000651              PrintStrings(ObjectIdx, NewVal, 0);
015696  000652          else
015697  000653              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
015698  000654              img_Show(hndl, i) ; // will only display if form is current
015699  000655          endif
015700  000656      endif
015701  000657  endfunc
015702  000658        
015703  000659  func TurnOffButtons(var group)
015704  000660      var j, k, l;
015705  000661      for (j := 0; j < nInputs; j++)
015706  000662          k := j*IPDatasize ;
015707  000663          if (*(InputData+k+Ofs_IPD_P2) == group)
015708  000664              l := -1 ;
015709  000665               if (*(InputData+k) == tWinButton)
015710  000666                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015711  000667                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
015712  000668                  img_Show(hndl, l);      // only shows on current form
015713  000669              else if (*(InputData+k) == tUserButton)
015714  000670                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015715  000671                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
015716  000672                  img_Show(hndl, l);      // only shows on current form
015717  000673              endif
015718  000674          endif
015719  000675      next
015720  000676  endfunc
015721  000677        
015722  000678        
015723  000679  // WARNING, this code will crash if newval exceeds maximum displayable number
015724  000680  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
015725  000681      var i, j, k, l, lb, newval ;
015726  000682      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
015727  000683      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
015728  000684      i := -1 ;
015729  000685      j := *(typeptr) ;
015730  000686      repeat
015731  000687          typeptr += 2 ;
015732  000688          i++ ;
015733  000689          until (*(typeptr) == imgidx);
015734  000690      j := setptr + i*10 ;
015735  000691        
015736  000692      imgidx++ ;
015737  000693      l := 1 ;
015738  000694      for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
015739  000695          l *= 10 ;
015740  000696      next
015741  000697      lb := *(j+Ofs_Digits_LeadingBlanks) ;
015742  000698      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
015743  000699          k := newval / l ;
015744  000700          newval -= k * l ;
015745  000701          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
015746  000702              if (k == 0)
015747  000703                  k := 10 ;
015748  000704              else
015749  000705                  lb := 0 ;
015750  000706              endif
015751  000707          endif
015752  000708          l /= 10 ;
015753  000709          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
015754  000710          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
015755  000711          img_Show(hndl, imgidx);
015756  000712      next
015757  000713  endfunc
015758  000714        
015759  000715        
015760  000716  func ActivateForm(var newform)
015761  000717      var i, j, *p ;
015762  000718        
015763  000719      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
015764  000720          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
015765  000721              if (img_GetWord(hndl, i, IMAGE_TAG))
015766  000722                  img_Disable(hndl,i) ;
015767  000723              endif
015768  000724          next
015769  000725      endif
015770  000726      CurrentForm := newform ;
015771  000727      // display newform image or clear to image color
015772  000728      if (FormBGcolors[CurrentForm] != ColorBGimage)
015773  000729          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
015774  000730          gfx_Cls() ;
015775  000731          DoGFXObjects() ;                                    // display GFX 'widgets'
015776  000732      endif
015777  000733        
015778  000734      // enable inputs
015779  000735      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
015780  000736          j := img_GetWord(hndl, i, IMAGE_TAG) ;
015781  000737          if (j)
015782  000738              j-- ;
015783  000739              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
015784  000740              //if (j != tKeyboard)
015785  000741              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
015786  000742                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
015787  000743              endif
015788  000744              img_Show(hndl,i) ; // show initialy, if required
015789  000745              if (j == tForm)
015790  000746                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
015791  000747              else if (j == tLeddigits)
015792  000748                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015793  000749              endif
015794  000750          endif
015795  000751      next
015796  000752      for (i := 0; i < nStrings; i++)
015797  000753          if (stringsCV[i] != -1)
015798  000754              WriteObject(tStrings, i, stringsCV[i]) ;
015799  000755          endif
015800  000756      next
015801  000757        
015802  000758  endfunc
015803  000759        
015804  000760  func UpdateObjects(var newval)
015805  000761      var IPidx, otherOBJ ;
015806  000762      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
015807  000763        
015808  000764          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
015809  000765              img_Show(hndl, *(pInputIndex));      // only shows on current form
015810  000766          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
015811  000767              if (*(CurInputData+Ofs_IPD_P1))
015812  000768                  newval &= 1;
015813  000769              else
015814  000770                  newval &= 3;
015815  000771              endif
015816  000772              if (newval > 1) newval := 1;
015817  000773          endif
015818  000774          IPidx := *(CurInputData+TouchState) ;
015819  000775          while(IPidx != 0)
015820  000776              otherOBJ := IPidx + InputData;
015821  000777              if (*(otherOBJ) == OT_REPORT)
015822  000778          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
015823  000779              else if (*(otherOBJ) == OT_MAGIC)
015824  000780                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
015825  000781                  IPidx(newval) ;
015826  000782              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
015827  000783                  if (*(otherOBJ) == OT_ACTIVATE)
015828  000784                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
015829  000785                      InputType := tForm ;
015830  000786                  else if (*(otherOBJ) == OT_SETCONST)
015831  000787                      newval := *(otherOBJ+Ofs_IPD_P3) ;
015832  000788                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015833  000789                  else if (*(otherOBJ) == OT_SETANOTHER)
015834  000790                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015835  000791                  else if (*(otherOBJ) == OT_PREVFRAME)
015836  000792                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
015837  000793                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
015838  000794                      endif
015839  000795                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015840  000796                  else if (*(otherOBJ) == OT_NEXTFRAME)
015841  000797                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
015842  000798                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
015843  000799                      endif
015844  000800                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015845  000801                  else if (*(otherOBJ) == OT_PREVSTRING)
015846  000802                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
015847  000803                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
015848  000804                      endif
015849  000805                  else if (*(otherOBJ) == OT_NEXTSTRING)
015850  000806                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
015851  000807                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
015852  000808                      endif
015853  000809                  endif
015854  000810              endif
015855  000811              IPidx := *(otherOBJ+TouchState) ;
015856  000812          wend
015857  000813      endif
015858  000814  endfunc
015859  000815        
015860  000816  // End P2.inc
015861  000817  func DoGFXObjects()
015862  000818  endfunc
015863  000819        
015864  000820  // Start P3.inc
015865  000821  func main()
015866  000822      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
015867  000823        
015868  000824      putstr("Mounting...\n");
015869  000825      if (!(file_Mount()))
015870  000826          while(!(file_Mount()))
015871  000827              putstr("Drive not mounted...");
015872  000828              pause(200);
015873  000829              gfx_Cls();
015874  000830              pause(200);
015875  000831          wend
015876  000832      endif
015877  000833  //    gfx_MoveTo(0, 0);
015878  000834  //    print(mem_Heap()," ") ;
015879  000835  //    gfx_TransparentColour(0x0020);
015880  000836  //    gfx_Transparency(ON);
015881  000837        
015882  000838      gfx_ScreenMode(LANDSCAPE) ;
015883  000839        
015884  000840      // open image control
015885  000841      hndl := file_LoadImageControl("RepRap_T.dat", "RepRap_T.gci", 1);
015886  000842        
015887  000843      // init 'constants'
015888  000844  // End P3.inc
015889  000845        
015890  000846      oObjects[tDipSwitch] := oDipSwitchs ;
015891  000847      oObjects[tKnob] := oKnobs ;
015892  000848      oObjects[tRockerSwitch] := oRockerSwitchs ;
015893  000849      oObjects[tRotarySwitch] := oRotarySwitchs ;
015894  000850      oObjects[tGSlider] := oGSliders ;
015895  000851      oObjects[tTrackbar] := oTrackbars ;
015896  000852      oObjects[tWinButton] := oWinButtons ;
015897  000853      oObjects[tAngularmeter] := oAngularmeters ;
015898  000854      oObjects[tCoolgauge] := oCoolgauges ;
015899  000855      oObjects[tCustomdigits] := oCustomdigitss ;
015900  000856      oObjects[tForm] := oForms ;
015901  000857      oObjects[tGauge] := oGauges ;
015902  000858      oObjects[tImage] := oImages ;
015903  000859      oObjects[tKeyboard] := oKeyboards ;
015904  000860      oObjects[tLed] := oLeds ;
015905  000861      oObjects[tLeddigits] := oLeddigitss ;
015906  000862      oObjects[tMeter] := oMeters ;
015907  000863      oObjects[tStrings] := oStringss ;
015908  000864      oObjects[tThermometer] := oThermometers ;
015909  000865      oObjects[tUserled] := oUserleds ;
015910  000866      oObjects[tVideo] := oVideos ;
015911  000867      oObjects[tStaticText] := oStaticTexts ;
015912  000868      oObjects[tSounds] := oSoundss ;
015913  000869      oObjects[tTimer] := oTimers ;
015914  000870      oObjects[tSpectrum] := oSpectrums ;
015915  000871      oObjects[tTank] := oTanks ;
015916  000872      oObjects[tUserImages] := oUserImagess ;
015917  000873      oObjects[tPinOutput] := oPinOutputs ;
015918  000874      oObjects[tPinInput] := oPinInputs ;
015919  000875      oObjects[t4Dbutton] := o4Dbuttons ;
015920  000876      oObjects[tAniButton] := oAniButtons ;
015921  000877      oObjects[tColorPicker] := oColorPickers ;
015922  000878      oObjects[tUserButton] := oUserButtons ;
015923  000879      hFonts[0] := file_LoadImageControl("RepRap_T.d03", "RepRap_T.g03", 1)  ;
015924  000880      hFonts[1] := file_LoadImageControl("RepRap_T.d01", "RepRap_T.g01", 1)  ;
015925  000881      hFonts[2] := file_LoadImageControl("RepRap_T.d02", "RepRap_T.g02", 1)  ;
015926  000882      hFonts[3] := FONT3 ;
015927  000883      hFonts[4] := FONT3 ;
015928  000884      hFonts[5] := FONT3 ;
015929  000885      hFonts[6] := FONT3 ;
015930  000886      hFonts[11] := file_LoadImageControl("RepRap_T.d05", "RepRap_T.g05", 1)  ;
015931  000887      hFonts[12] := FONT3 ;
015932  000888      hFonts[13] := file_LoadImageControl("RepRap_T.d09", "RepRap_T.g09", 1)  ;
015933  000889      hFonts[14] := FONT3 ;
015934  000890      hFonts[15] := FONT3 ;
015935  000891      hFonts[16] := FONT3 ;
015936  000892      hFonts[20] := FONT3 ;
015937  000893      hFonts[21] := FONT3 ;
015938  000894      hFonts[22] := FONT3 ;
015939  000895      hFonts[23] := FONT3 ;
015940  000896      hFonts[24] := FONT3 ;
015941  000897      hFonts[28] := FONT3 ;
015942  000898      hFonts[31] := file_LoadImageControl("RepRap_T.d07", "RepRap_T.g07", 1)  ;
015943  000899      hFonts[33] := file_LoadImageControl("RepRap_T.d06", "RepRap_T.g06", 1)  ;
015944  000900      hFonts[35] := FONT3 ;
015945  000901      hFonts[37] := file_LoadImageControl("RepRap_T.d04", "RepRap_T.g04", 1)  ;
015946  000902      hFonts[49] := file_LoadImageControl("RepRap_T.d08", "RepRap_T.g08", 1)  ;
015947  000903      hFonts[51] := FONT3 ;
015948  000904      hFonts[52] := FONT3 ;
015949  000905      hFonts[53] := file_LoadImageControl("RepRap_T.d0@", "RepRap_T.g0@", 1)  ;
015950  000906      hFonts[7] := hFonts[37] ;
015951  000907      hFonts[8] := hFonts[37] ;
015952  000908      hFonts[9] := hFonts[0] ;
015953  000909      hFonts[10] := hFonts[11] ;
015954  000910      hFonts[17] := hFonts[11] ;
015955  000911      hFonts[18] := hFonts[11] ;
015956  000912      hFonts[19] := hFonts[11] ;
015957  000913      hFonts[25] := hFonts[11] ;
015958  000914      hFonts[26] := hFonts[11] ;
015959  000915      hFonts[27] := hFonts[11] ;
015960  000916      hFonts[29] := hFonts[11] ;
015961  000917      hFonts[30] := hFonts[11] ;
015962  000918      hFonts[32] := hFonts[31] ;
015963  000919      hFonts[34] := hFonts[0] ;
015964  000920      hFonts[36] := hFonts[0] ;
015965  000921      hFonts[38] := hFonts[37] ;
015966  000922      hFonts[39] := hFonts[37] ;
015967  000923      hFonts[40] := hFonts[0] ;
015968  000924      hFonts[41] := hFonts[0] ;
015969  000925      hFonts[42] := hFonts[0] ;
015970  000926      hFonts[43] := hFonts[37] ;
015971  000927      hFonts[44] := hFonts[37] ;
015972  000928      hFonts[45] := hFonts[37] ;
015973  000929      hFonts[46] := hFonts[13] ;
015974  000930      hFonts[47] := hFonts[13] ;
015975  000931      hFonts[48] := hFonts[13] ;
015976  000932      hFonts[50] := hFonts[49] ;
015977  000933  // Start P4.inc
015978  000934      hstrings := file_Open("RepRap_T.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
015979  000935      // init comms
015980  000936      com_Init(comRX,CMDLenMAX,0);
015981  000937      com_SetBaud(COM0,19886);
015982  000938      com_TXbuffer(comTX, 100, 0);
015983  000939      snd_BufSize(2) ;
015984  000940      // tag 'real' objects
015985  000941      for (i := 0; i <= MaxTotObjects; i++)
015986  000942          if (   (i != tSounds)
015987  000943              && (i != tTimer)
015988  000944              && (i != tPinOutput)
015989  000945              && (i != tPinInput) )
015990  000946              TouchXpos := oObjects[i] ;
015991  000947              TouchYpos := *(TouchXpos) ;
015992  000948              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
015993  000949                  oldn := *(TouchXpos+ImageTouched*2) ;
015994  000950                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
015995  000951                  if (oldn != -1)
015996  000952                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
015997  000953                      img_Disable(hndl, oldn) ;
015998  000954                  endif
015999  000955              next
016000  000956          endif
016001  000957      next
016002  000958        
016003  000959      // display initial form
016004  000960      CurrentForm := -1 ;
016005  000961      ActivateForm(0) ; // need to change this according to first actual form
016006  000962        
016007  000963  // End P4.inc
016008  000964  // Start P5.inc
016009  000965      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
016010  000966      oldn := -1 ;
016011  000967      repeat
016012  000968        
016013  000969          // check comms for command, how to NAK invalid command
016014  000970          if (com_Count() != 0)
016015  000971              i := serin() ;
016016  000972              InputCS ^= i ;               // update checksum
016017  000973              if (   (cmdi > 2)
016018  000974                  && (cmd[0] == WRITE_STRU) )
016019  000975                  j := (cmdi-1) >> 1 + 2 ;
016020  000976                  if (j == CMDLenMAX)    // max length exceeded
016021  000977                      nak0() ;
016022  000978                      cmdi := -1 ;
016023  000979                  else if (cmdi & 1)
016024  000980                      cmd[j] := i ;
016025  000981                      if (cmd[2] == 0)    // if string complete
016026  000982                          if (InputCS)
016027  000983                              nak0() ;
016028  000984                          else
016029  000985                              if (cmd[0] == WRITE_STRU)
016030  000986                              cmd[j] := 0 ;                     // terminate it
016031  000987                              PrintStrings(cmd[1], &cmd[3], 1) ;
016032  000988                              serout(ACK) ;
016033  000989                              else
016034  000990                              endif
016035  000991                          endif
016036  000992                          cmdi := -1 ;
016037  000993                      endif
016038  000994                  else
016039  000995                      cmd[j] := cmd[j] << 8 + i ;
016040  000996                      cmd[2]-- ;          // dec length
016041  000997                  endif
016042  000998                  cmdi++ ;
016043  000999              else // not unicode string
016044  001000                  cmd[cmdi++] := i ;
016045  001001                   if (cmd[0] == WRITE_STR)                  // Ansi String
016046  001002                      if (cmdi == CMDLenMAX)      // max length exceeded
016047  001003                          nak0() ;
016048  001004                          cmdi := 0 ;
016049  001005                      else if (cmdi > 2)
016050  001006                          if (cmd[2] == -1)
016051  001007                              if (InputCS)
016052  001008                                  nak0() ;
016053  001009                              else
016054  001010                                  if (cmd[0] == WRITE_STR)
016055  001011                                  cmd[cmdi-1] := 0 ;                     // terminate it
016056  001012                                  PrintStrings(cmd[1], &cmd[3], 1) ;
016057  001013                                  serout(ACK) ;
016058  001014                                  else
016059  001015                                  endif
016060  001016                              endif
016061  001017                              cmdi := 0 ;
016062  001018                          else
016063  001019                              cmd[2]-- ;          // dec length
016064  001020                          endif
016065  001021                      endif
016066  001022                  else if (   (cmd[0] == READ_OBJ)
016067  001023                           && (cmdi == 4)         )
016068  001024                      if (InputCS)
016069  001025                          nak0() ;
016070  001026                      else
016071  001027                          ReadObject(cmd[1], cmd[2]) ;
016072  001028                      endif
016073  001029                      cmdi := 0 ;
016074  001030                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
016075  001031                           && (cmdi == 6)          )
016076  001032                      if (InputCS)
016077  001033                          nak0() ;
016078  001034                      else
016079  001035                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
016080  001036                          serout(ACK) ;
016081  001037                      endif
016082  001038                      cmdi := 0 ;
016083  001039                  else if (   (cmd[0] == WRITE_CONTRAST)
016084  001040                           && (cmdi == 3)         )
016085  001041                      if (InputCS)
016086  001042                          nak0() ;
016087  001043                      else
016088  001044                          gfx_Contrast(cmd[1]) ;
016089  001045                          serout(ACK) ;
016090  001046                      endif
016091  001047                      cmdi := 0 ;
016092  001048                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
016093  001049                      nak0() ;
016094  001050                      cmdi := 0 ;
016095  001051                  endif
016096  001052              endif   // not unicode string
016097  001053          endif   // a character is available
016098  001054        
016099  001055        
016100  001056      // touch code processing
016101  001057        
016102  001058          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
016103  001059          ImageTouched := img_Touched(hndl,-1) ;
016104  001060          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
016105  001061              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
016106  001062                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
016107  001063              endif
016108  001064              if (TouchStatus != TOUCH_RELEASED)        // if not released
016109  001065                  if (oldn != -1)
016110  001066                      ImageTouched := oldn ;
016111  001067                  else
016112  001068                      if (oldn != ImageTouched)
016113  001069                  oldn := ImageTouched ;
016114  001070                          TouchStatus := TOUCH_PRESSED ;
016115  001071                      endif
016116  001072                  endif
016117  001073                  TouchXpos  := touch_Get(TOUCH_GETX);
016118  001074                  TouchYpos  := touch_Get(TOUCH_GETY);
016119  001075                  TouchState := Ofs_IPD_DOWN ;
016120  001076              else
016121  001077                  ImageTouched := oldn ;                     // simulate release of what we touched
016122  001078                  oldn := -1 ;                    // prevent double release
016123  001079                  TouchState := Ofs_IPD_RELEASE ;
016124  001080              endif
016125  001081              if (ImageTouched != -1)
016126  001082                          CurInputData := InputControls[ImageTouched] + InputData;
016127  001083                          InputType := *(CurInputData) ;
016128  001084                          i := InputType ;
016129  001085                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
016130  001086                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
016131  001087              endif
016132  001088          endif
016133  001089   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
016134  001090        
016135  001091          sys_EventsResume() ;
016136  001092      forever
016137  001093        
016138  001094  cDipswitch:
016139  001095        
016140  001096  cKnob:
016141  001097        
016142  001098  cRockerswitch:
016143  001099        
016144  001100  cRotaryswitch:
016145  001101        
016146  001102  cSlider:
016147  001103  cTrackbar:
016148  001104        
016149  001105  c4DButton:
016150  001106  cUserButton:
016151  001107      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
016152  001108      goto gbutton ;
016153  001109  cWinbutton:
016154  001110      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
016155  001111  gbutton:
016156  001112      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
016157  001113      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
016158  001114          if (TouchStatus == TOUCH_RELEASED)
016159  001115              i &= 0xfffe ;
016160  001116              TouchState == Ofs_IPD_DOWN ;
016161  001117          else
016162  001118              i |= 1 ;
016163  001119              TouchState == Ofs_IPD_RELEASE ;
016164  001120          endif
016165  001121      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
016166  001122          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
016167  001123              if ((i & 3) == 3)
016168  001124                  i &= 0xfffc ;
016169  001125              else
016170  001126                  i++ ;
016171  001127              endif
016172  001128          else
016173  001129              i |= 1 ;                                      // make down regardless of current state
016174  001130          endif
016175  001131      else                        // group action, up all other buttons on touch press, reports 0 for button down
016176  001132          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
016177  001133              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
016178  001134          endif
016179  001135          i := (i & 0xfffc) | 2 ;
016180  001136      endif
016181  001137        
016182  001138      UpdateObjects(i) ;
016183  001139  endsub ;
016184  001140        
016185  001141  cAniButton:
016186  001142        
016187  001143  cColorPicker:
016188  001144        
016189  001145  endfunc
016190  001146  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 781 file:RepRap_Touchv1.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 717 file:RepRap_Touchv1.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       13044  0x000032f4 (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 141)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (usage 3)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  382  0x0000017e (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 33)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                302  0x0000012e (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         298  0x0000012a (mem) word (global)  (usage 27)
CurrentForm                          288  0x00000120 (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (usage 3)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (usage 18)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       12412  0x0000307c (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 33)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (usage 51)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                        9773  0x0000262dFormBGcolors                        9773  0x0000262d (mem) word[43] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                          93  0x0000005dFormEndIndex                          93  0x0000005d (mem) word[43] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[43] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[54] (global)  (usage 246)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             218  0x000000da (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS    2803  0x00000af3 (const ??? 0)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm0                                 0  0x00000000 (const ??? 0)  (usage 3)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                               96  0x00000060 (const ??? 0)  (usage 3)
iForm2                                 4  0x00000004 (const ??? 0)  (usage 3)
iForm28                              106  0x0000006a (const ??? 0)  (usage 3)
iForm29                              111  0x0000006f (const ??? 0)  (usage 3)
iForm4                                10  0x0000000a (const ??? 0)  (usage 3)
iForm5                                16  0x00000010 (const ??? 0)  (usage 3)
iForm9                                42  0x0000002a (const ??? 0)  (usage 3)
iiLeddigits0                          31  0x0000001f (const ??? 0)  (not used)
iiLeddigits1                          33  0x00000021 (const ??? 0)  (not used)
iiLeddigits2                          35  0x00000023 (const ??? 0)  (not used)
iImage0                              153  0x00000099 (const ??? 0)  (usage 3)
iLeddigits0                           30  0x0000001e (const ??? 0)  (usage 3)
iLeddigits1                           32  0x00000020 (const ??? 0)  (usage 3)
iLeddigits2                           34  0x00000022 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        179  0x000000b3InputControls                        179  0x000000b3 (mem) word[198] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
InputCS                              542  0x0000021e (mem) word (global)  (usage 21)
InputData                            575  0x0000023fInputData                            575  0x0000023f (mem) word[3575] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 30)
InputType                            294  0x00000126 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                          80  0x00000050 (const ??? 0)  (usage 3)
iStatictext1                          36  0x00000024 (const ??? 0)  (usage 3)
iStatictext15                         85  0x00000055 (const ??? 0)  (usage 3)
iStatictext2                          37  0x00000025 (const ??? 0)  (usage 3)
iStatictext3                         129  0x00000081 (const ??? 0)  (usage 3)
iStatictext4                          38  0x00000026 (const ??? 0)  (usage 3)
iStatictext5                         140  0x0000008c (const ??? 0)  (usage 3)
iStatictext6                         144  0x00000090 (const ??? 0)  (usage 3)
iStatictext7                         145  0x00000091 (const ??? 0)  (usage 3)
iStatictext8                         146  0x00000092 (const ??? 0)  (usage 3)
iStatictext9                          52  0x00000034 (const ??? 0)  (usage 3)
iStrings0                           7725  0x00001e2diStrings0                           7725  0x00001e2d (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings1                           7751  0x00001e47iStrings1                           7751  0x00001e47 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings10                          7985  0x00001f31iStrings10                          7985  0x00001f31 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings11                          8011  0x00001f4biStrings11                          8011  0x00001f4b (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings12                          8037  0x00001f65iStrings12                          8037  0x00001f65 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings13                          8063  0x00001f7fiStrings13                          8063  0x00001f7f (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings14                          8089  0x00001f99iStrings14                          8089  0x00001f99 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings15                          8115  0x00001fb3iStrings15                          8115  0x00001fb3 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings16                          8141  0x00001fcdiStrings16                          8141  0x00001fcd (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings17                          8167  0x00001fe7iStrings17                          8167  0x00001fe7 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings18                          8193  0x00002001iStrings18                          8193  0x00002001 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings19                          8219  0x0000201biStrings19                          8219  0x0000201b (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings2                           7777  0x00001e61iStrings2                           7777  0x00001e61 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings20                          8245  0x00002035iStrings20                          8245  0x00002035 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings21                          8271  0x0000204fiStrings21                          8271  0x0000204f (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings22                          8297  0x00002069iStrings22                          8297  0x00002069 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings23                          8323  0x00002083iStrings23                          8323  0x00002083 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings24                          8349  0x0000209diStrings24                          8349  0x0000209d (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings25                          8375  0x000020b7iStrings25                          8375  0x000020b7 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings26                          8401  0x000020d1iStrings26                          8401  0x000020d1 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings27                          8427  0x000020ebiStrings27                          8427  0x000020eb (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings28                          8453  0x00002105iStrings28                          8453  0x00002105 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings29                          8479  0x0000211fiStrings29                          8479  0x0000211f (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings3                           7803  0x00001e7biStrings3                           7803  0x00001e7b (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings30                          8505  0x00002139iStrings30                          8505  0x00002139 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings31                          8531  0x00002153iStrings31                          8531  0x00002153 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings32                          8557  0x0000216diStrings32                          8557  0x0000216d (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings33                          8583  0x00002187iStrings33                          8583  0x00002187 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings34                          8609  0x000021a1iStrings34                          8609  0x000021a1 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings35                          8635  0x000021bbiStrings35                          8635  0x000021bb (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings36                          8661  0x000021d5iStrings36                          8661  0x000021d5 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings37                          8687  0x000021efiStrings37                          8687  0x000021ef (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings38                          8713  0x00002209iStrings38                          8713  0x00002209 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings39                          8739  0x00002223iStrings39                          8739  0x00002223 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings4                           7829  0x00001e95iStrings4                           7829  0x00001e95 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings40                          8765  0x0000223diStrings40                          8765  0x0000223d (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings41                          8791  0x00002257iStrings41                          8791  0x00002257 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings42                          8817  0x00002271iStrings42                          8817  0x00002271 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings43                          8843  0x0000228biStrings43                          8843  0x0000228b (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings44                          8869  0x000022a5iStrings44                          8869  0x000022a5 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings45                          8895  0x000022bfiStrings45                          8895  0x000022bf (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings46                          8921  0x000022d9iStrings46                          8921  0x000022d9 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings47                          8947  0x000022f3iStrings47                          8947  0x000022f3 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings48                          8973  0x0000230diStrings48                          8973  0x0000230d (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings49                          8999  0x00002327iStrings49                          8999  0x00002327 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings5                           7855  0x00001eafiStrings5                           7855  0x00001eaf (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings50                          9025  0x00002341iStrings50                          9025  0x00002341 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings51                          9051  0x0000235biStrings51                          9051  0x0000235b (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings52                          9077  0x00002375iStrings52                          9077  0x00002375 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings53                          9103  0x0000238fiStrings53                          9103  0x0000238f (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings6                           7881  0x00001ec9iStrings6                           7881  0x00001ec9 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings7                           7907  0x00001ee3iStrings7                           7907  0x00001ee3 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings8                           7933  0x00001efdiStrings8                           7933  0x00001efd (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings9                           7959  0x00001f17iStrings9                           7959  0x00001f17 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          19  0x00000013 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                         15  0x0000000f (const ??? 0)  (usage 3)
iUserbutton100                        94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton101                        95  0x0000005f (const ??? 0)  (usage 3)
iUserbutton102                       130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton103                       131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton104                       132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton105                       133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton106                       134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton107                       135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton108                       136  0x00000088 (const ??? 0)  (usage 3)
iUserbutton109                       137  0x00000089 (const ??? 0)  (usage 3)
iUserbutton11                        107  0x0000006b (const ??? 0)  (usage 3)
iUserbutton110                       138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton111                       139  0x0000008b (const ??? 0)  (usage 3)
iUserbutton112                       141  0x0000008d (const ??? 0)  (usage 3)
iUserbutton113                       142  0x0000008e (const ??? 0)  (usage 3)
iUserbutton114                       143  0x0000008f (const ??? 0)  (usage 3)
iUserbutton115                       147  0x00000093 (const ??? 0)  (usage 3)
iUserbutton116                       148  0x00000094 (const ??? 0)  (usage 3)
iUserbutton117                       149  0x00000095 (const ??? 0)  (usage 3)
iUserbutton118                        79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton119                       174  0x000000ae (const ??? 0)  (usage 3)
iUserbutton12                         17  0x00000011 (const ??? 0)  (usage 3)
iUserbutton120                       166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton121                       167  0x000000a7 (const ??? 0)  (usage 3)
iUserbutton122                       168  0x000000a8 (const ??? 0)  (usage 3)
iUserbutton123                       169  0x000000a9 (const ??? 0)  (usage 3)
iUserbutton124                       170  0x000000aa (const ??? 0)  (usage 3)
iUserbutton125                       171  0x000000ab (const ??? 0)  (usage 3)
iUserbutton126                       172  0x000000ac (const ??? 0)  (usage 3)
iUserbutton127                       175  0x000000af (const ??? 0)  (usage 3)
iUserbutton128                       176  0x000000b0 (const ??? 0)  (usage 3)
iUserbutton129                       177  0x000000b1 (const ??? 0)  (usage 3)
iUserbutton13                         18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton130                       178  0x000000b2 (const ??? 0)  (usage 3)
iUserbutton131                       179  0x000000b3 (const ??? 0)  (usage 3)
iUserbutton132                       180  0x000000b4 (const ??? 0)  (usage 3)
iUserbutton133                       181  0x000000b5 (const ??? 0)  (usage 3)
iUserbutton134                       173  0x000000ad (const ??? 0)  (usage 3)
iUserbutton135                       182  0x000000b6 (const ??? 0)  (usage 3)
iUserbutton136                       183  0x000000b7 (const ??? 0)  (usage 3)
iUserbutton137                       184  0x000000b8 (const ??? 0)  (usage 3)
iUserbutton138                       185  0x000000b9 (const ??? 0)  (usage 3)
iUserbutton139                       186  0x000000ba (const ??? 0)  (usage 3)
iUserbutton14                          7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton140                       187  0x000000bb (const ??? 0)  (usage 3)
iUserbutton141                       188  0x000000bc (const ??? 0)  (usage 3)
iUserbutton142                       189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton143                       190  0x000000be (const ??? 0)  (usage 3)
iUserbutton144                       191  0x000000bf (const ??? 0)  (usage 3)
iUserbutton145                       192  0x000000c0 (const ??? 0)  (usage 3)
iUserbutton146                       193  0x000000c1 (const ??? 0)  (usage 3)
iUserbutton147                       194  0x000000c2 (const ??? 0)  (usage 3)
iUserbutton148                       197  0x000000c5 (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton16                         45  0x0000002d (const ??? 0)  (usage 3)
iUserbutton17                         53  0x00000035 (const ??? 0)  (usage 3)
iUserbutton18                         43  0x0000002b (const ??? 0)  (usage 3)
iUserbutton19                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton2                          20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton20                         84  0x00000054 (const ??? 0)  (usage 3)
iUserbutton21                         86  0x00000056 (const ??? 0)  (usage 3)
iUserbutton22                         87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton23                         97  0x00000061 (const ??? 0)  (usage 3)
iUserbutton24                         98  0x00000062 (const ??? 0)  (usage 3)
iUserbutton25                         99  0x00000063 (const ??? 0)  (usage 3)
iUserbutton26                         46  0x0000002e (const ??? 0)  (usage 3)
iUserbutton27                         47  0x0000002f (const ??? 0)  (usage 3)
iUserbutton28                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton29                         49  0x00000031 (const ??? 0)  (usage 3)
iUserbutton3                          29  0x0000001d (const ??? 0)  (usage 3)
iUserbutton30                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton31                         51  0x00000033 (const ??? 0)  (usage 3)
iUserbutton32                         54  0x00000036 (const ??? 0)  (usage 3)
iUserbutton33                         55  0x00000037 (const ??? 0)  (usage 3)
iUserbutton34                        151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton35                         57  0x00000039 (const ??? 0)  (usage 3)
iUserbutton36                         58  0x0000003a (const ??? 0)  (usage 3)
iUserbutton37                         59  0x0000003b (const ??? 0)  (usage 3)
iUserbutton38                         62  0x0000003e (const ??? 0)  (usage 3)
iUserbutton39                         60  0x0000003c (const ??? 0)  (usage 3)
iUserbutton4                           5  0x00000005 (const ??? 0)  (usage 3)
iUserbutton40                         61  0x0000003d (const ??? 0)  (usage 3)
iUserbutton41                        154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton42                        155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton43                        156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton44                        157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton45                        158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton46                        159  0x0000009f (const ??? 0)  (usage 3)
iUserbutton47                        160  0x000000a0 (const ??? 0)  (usage 3)
iUserbutton48                        161  0x000000a1 (const ??? 0)  (usage 3)
iUserbutton49                        152  0x00000098 (const ??? 0)  (usage 3)
iUserbutton5                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton50                         21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton51                         88  0x00000058 (const ??? 0)  (usage 3)
iUserbutton52                         64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton53                         69  0x00000045 (const ??? 0)  (usage 3)
iUserbutton54                         65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton55                         71  0x00000047 (const ??? 0)  (usage 3)
iUserbutton56                         72  0x00000048 (const ??? 0)  (usage 3)
iUserbutton57                         73  0x00000049 (const ??? 0)  (usage 3)
iUserbutton58                         74  0x0000004a (const ??? 0)  (usage 3)
iUserbutton59                         75  0x0000004b (const ??? 0)  (usage 3)
iUserbutton6                          11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton60                         76  0x0000004c (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton63                         39  0x00000027 (const ??? 0)  (usage 3)
iUserbutton64                        163  0x000000a3 (const ??? 0)  (usage 3)
iUserbutton65                        164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton66                         77  0x0000004d (const ??? 0)  (usage 3)
iUserbutton67                        195  0x000000c3 (const ??? 0)  (usage 3)
iUserbutton68                         78  0x0000004e (const ??? 0)  (usage 3)
iUserbutton69                         81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton7                          12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton70                        165  0x000000a5 (const ??? 0)  (usage 3)
iUserbutton71                         82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton72                         89  0x00000059 (const ??? 0)  (usage 3)
iUserbutton73                        100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton74                         83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton75                         66  0x00000042 (const ??? 0)  (usage 3)
iUserbutton76                         67  0x00000043 (const ??? 0)  (usage 3)
iUserbutton77                         68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton78                        101  0x00000065 (const ??? 0)  (usage 3)
iUserbutton79                        102  0x00000066 (const ??? 0)  (usage 3)
iUserbutton8                          13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton80                        103  0x00000067 (const ??? 0)  (usage 3)
iUserbutton81                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton82                        105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton83                        108  0x0000006c (const ??? 0)  (usage 3)
iUserbutton84                        112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton85                        113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton86                        114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton87                        115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton88                        116  0x00000074 (const ??? 0)  (usage 3)
iUserbutton89                        117  0x00000075 (const ??? 0)  (usage 3)
iUserbutton9                          14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton90                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton91                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton92                        110  0x0000006e (const ??? 0)  (usage 3)
iUserbutton93                        121  0x00000079 (const ??? 0)  (usage 3)
iUserbutton94                        123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton95                        127  0x0000007f (const ??? 0)  (usage 3)
iUserbutton96                         90  0x0000005a (const ??? 0)  (usage 3)
iUserbutton97                         91  0x0000005b (const ??? 0)  (usage 3)
iUserbutton98                         92  0x0000005c (const ??? 0)  (usage 3)
iUserbutton99                         93  0x0000005d (const ??? 0)  (usage 3)
iUserimages0                         109  0x0000006d (const ??? 0)  (usage 3)
iUserimages1                          63  0x0000003f (const ??? 0)  (usage 3)
iUserimages10                         56  0x00000038 (const ??? 0)  (usage 3)
iUserimages11                        196  0x000000c4 (const ??? 0)  (usage 3)
iUserimages2                          70  0x00000046 (const ??? 0)  (usage 3)
iUserimages3                         120  0x00000078 (const ??? 0)  (usage 3)
iUserimages4                         124  0x0000007c (const ??? 0)  (usage 3)
iUserimages5                         126  0x0000007e (const ??? 0)  (usage 3)
iUserimages6                         150  0x00000096 (const ??? 0)  (usage 3)
iUserimages7                         122  0x0000007a (const ??? 0)  (usage 3)
iUserimages8                         125  0x0000007d (const ??? 0)  (usage 3)
iUserimages9                         128  0x00000080 (const ??? 0)  (usage 3)
iVideo0                                9  0x00000009 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                           22  0x00000016 (const ??? 0)  (usage 3)
iWinbutton1                           23  0x00000017 (const ??? 0)  (usage 3)
iWinbutton2                           24  0x00000018 (const ??? 0)  (usage 3)
iWinbutton3                           25  0x00000019 (const ??? 0)  (usage 3)
iWinbutton4                           26  0x0000001a (const ??? 0)  (usage 3)
iWinbutton5                           40  0x00000028 (const ??? 0)  (usage 3)
iWinbutton6                           41  0x00000029 (const ??? 0)  (usage 3)
iWinbutton7                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton8                           28  0x0000001c (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 9859  0x00002683kKeyboardKeystrokes                 9859  0x00002683 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   13390  0x0000344e (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                               10373  0x00002885 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               14512  0x000038b0 (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              325  0x00000145 (const dword)  (usage 3)
nObjects                             198  0x000000c6 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              54  0x00000036 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                          9461  0x000024f5o4Dbuttons                          9461  0x000024f5 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAngularmeters                      9161  0x000023c9oAngularmeters                      9161  0x000023c9 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAniButtons                         9463  0x000024f7oAniButtons                         9463  0x000024f7 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       9465  0x000024f9oColorPickers                       9465  0x000024f9 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCoolgauges                         9163  0x000023cboCoolgauges                         9163  0x000023cb (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCustomdigitss                      9165  0x000023cdoCustomdigitss                      9165  0x000023cd (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oDipSwitchs                         9129  0x000023a9oDipSwitchs                         9129  0x000023a9 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              9167  0x000023cfoForms                              9167  0x000023cf (mem) word[44] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 15)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                             9255  0x00002427oGauges                             9255  0x00002427 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGSliders                           9137  0x000023b1oGSliders                           9137  0x000023b1 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oImages                             9257  0x00002429oImages                             9257  0x00002429 (mem) word[2] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKeyboards                          9261  0x0000242doKeyboards                          9261  0x0000242d (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKnobs                              9131  0x000023aboKnobs                              9131  0x000023ab (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLedDigitsn                         9863  0x00002687oLedDigitsn                         9863  0x00002687 (mem) word[15] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
oLeddigitss                         9265  0x00002431oLeddigitss                         9265  0x00002431 (mem) word[4] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
oLeds                               9263  0x0000242foLeds                               9263  0x0000242f (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             9273  0x00002439oMeters                             9273  0x00002439 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             220  0x000000dc (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                          9459  0x000024f3oPinInputs                          9459  0x000024f3 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oPinOutputs                         9771  0x0000262boPinOutputs                         9771  0x0000262b (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      9133  0x000023adoRockerSwitchs                      9133  0x000023ad (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oRotarySwitchs                      9135  0x000023afoRotarySwitchs                      9135  0x000023af (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oScopes                             9429  0x000024d5oScopes                             9429  0x000024d5 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
oSoundss                            9769  0x00002629oSoundss                            9769  0x00002629 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oSpectrums                          9427  0x000024d3oSpectrums                          9427  0x000024d3 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStaticTexts                        9393  0x000024b1oStaticTexts                        9393  0x000024b1 (mem) word[17] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStringss                           9275  0x0000243boStringss                           9275  0x0000243b (mem) word[55] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 84)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 423)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              9431  0x000024d7oTanks                              9431  0x000024d7 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oThermometers                       9385  0x000024a9oThermometers                       9385  0x000024a9 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTimers                             9767  0x00002627oTimers                             9767  0x00002627 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTrackbars                          9139  0x000023b3oTrackbars                          9139  0x000023b3 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserButtons                        9467  0x000024fboUserButtons                        9467  0x000024fb (mem) word[150] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
oUserImagess                        9433  0x000024d9oUserImagess                        9433  0x000024d9 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserleds                           9387  0x000024aboUserleds                           9387  0x000024ab (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             544  0x00000220 (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                             9389  0x000024adoVideos                             9389  0x000024ad (mem) word[2] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                         9141  0x000023b5oWinButtons                         9141  0x000023b5 (mem) word[10] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          300  0x0000012c (mem) word (global)  (usage 18)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       14547  0x000038d3 (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         14259  0x000037b3 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                   9861  0x00002685rKeyboardRoutines                   9861  0x00002685 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         14445  0x0000386d (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           14528  0x000038c0 (User func) args[1] r=0  (usage 15)
seroutOcs                          14495  0x0000389f (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           7  0x00000007 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      3072  0x00000c00 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                         15  0x0000000f (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         33  0x00000021 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         15  0x0000000f (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                          3  0x00000003 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                    25088  0x00006200 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                         23  0x00000017 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                         24  0x00000018 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     6656  0x00001a00 (const dword)  (usage 3)
Strings17Count                         1  0x00000001 (const dword)  (not used)
Strings17Size                         65  0x00000041 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                    20480  0x00005000 (const dword)  (usage 3)
Strings18Count                         1  0x00000001 (const dword)  (not used)
Strings18Size                         42  0x0000002a (const dword)  (usage 3)
Strings18StartH                        0  0x00000000 (const dword)  (usage 3)
Strings18StartL                    20992  0x00005200 (const dword)  (usage 3)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                         45  0x0000002d (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                    21504  0x00005400 (const dword)  (usage 3)
Strings1Count                          1  0x00000001 (const dword)  (not used)
Strings1Size                          40  0x00000028 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                         0  0x00000000 (const dword)  (usage 3)
Strings20Count                         1  0x00000001 (const dword)  (not used)
Strings20Size                         35  0x00000023 (const dword)  (usage 3)
Strings20StartH                        0  0x00000000 (const dword)  (usage 3)
Strings20StartL                     1024  0x00000400 (const dword)  (usage 3)
Strings21Count                         1  0x00000001 (const dword)  (not used)
Strings21Size                         35  0x00000023 (const dword)  (usage 3)
Strings21StartH                        0  0x00000000 (const dword)  (usage 3)
Strings21StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings22Count                         1  0x00000001 (const dword)  (not used)
Strings22Size                         20  0x00000014 (const dword)  (usage 3)
Strings22StartH                        0  0x00000000 (const dword)  (usage 3)
Strings22StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings23Count                         1  0x00000001 (const dword)  (not used)
Strings23Size                         17  0x00000011 (const dword)  (usage 3)
Strings23StartH                        0  0x00000000 (const dword)  (usage 3)
Strings23StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings24Count                         1  0x00000001 (const dword)  (not used)
Strings24Size                         26  0x0000001a (const dword)  (usage 3)
Strings24StartH                        0  0x00000000 (const dword)  (usage 3)
Strings24StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings25Count                         1  0x00000001 (const dword)  (not used)
Strings25Size                         10  0x0000000a (const dword)  (usage 3)
Strings25StartH                        0  0x00000000 (const dword)  (usage 3)
Strings25StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings26Count                         1  0x00000001 (const dword)  (not used)
Strings26Size                         10  0x0000000a (const dword)  (usage 3)
Strings26StartH                        0  0x00000000 (const dword)  (usage 3)
Strings26StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings27Count                         1  0x00000001 (const dword)  (not used)
Strings27Size                         11  0x0000000b (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings28Count                         1  0x00000001 (const dword)  (not used)
Strings28Size                         40  0x00000028 (const dword)  (usage 3)
Strings28StartH                        0  0x00000000 (const dword)  (usage 3)
Strings28StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                         65  0x00000041 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    22016  0x00005600 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      2560  0x00000a00 (const dword)  (usage 3)
Strings30Count                         1  0x00000001 (const dword)  (not used)
Strings30Size                         45  0x0000002d (const dword)  (usage 3)
Strings30StartH                        0  0x00000000 (const dword)  (usage 3)
Strings30StartL                    22528  0x00005800 (const dword)  (usage 3)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          7  0x00000007 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    23040  0x00005a00 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                         19  0x00000013 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    23552  0x00005c00 (const dword)  (usage 3)
Strings33Count                         1  0x00000001 (const dword)  (not used)
Strings33Size                         33  0x00000021 (const dword)  (usage 3)
Strings33StartH                        0  0x00000000 (const dword)  (usage 3)
Strings33StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings34Count                         0  0x00000000 (const dword)  (not used)
Strings34Size                          1  0x00000001 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings35Count                         1  0x00000001 (const dword)  (not used)
Strings35Size                         36  0x00000024 (const dword)  (usage 3)
Strings35StartH                        0  0x00000000 (const dword)  (usage 3)
Strings35StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings36Count                         0  0x00000000 (const dword)  (not used)
Strings36Size                          1  0x00000001 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings37Count                         0  0x00000000 (const dword)  (not used)
Strings37Size                          1  0x00000001 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings38Count                         0  0x00000000 (const dword)  (not used)
Strings38Size                          1  0x00000001 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                    15360  0x00003c00 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings3Count                          1  0x00000001 (const dword)  (not used)
Strings3Size                          18  0x00000012 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                       512  0x00000200 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                          7  0x00000007 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings41Count                         1  0x00000001 (const dword)  (not used)
Strings41Size                          7  0x00000007 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings42Count                         1  0x00000001 (const dword)  (not used)
Strings42Size                          7  0x00000007 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                    17408  0x00004400 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    17920  0x00004600 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    18432  0x00004800 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    18944  0x00004a00 (const dword)  (usage 3)
Strings46Count                         0  0x00000000 (const dword)  (not used)
Strings46Size                          1  0x00000001 (const dword)  (usage 3)
Strings46StartH                        0  0x00000000 (const dword)  (usage 3)
Strings46StartL                    25600  0x00006400 (const dword)  (usage 3)
Strings47Count                         1  0x00000001 (const dword)  (not used)
Strings47Size                          3  0x00000003 (const dword)  (usage 3)
Strings47StartH                        0  0x00000000 (const dword)  (usage 3)
Strings47StartL                    26112  0x00006600 (const dword)  (usage 3)
Strings48Count                         0  0x00000000 (const dword)  (not used)
Strings48Size                          1  0x00000001 (const dword)  (usage 3)
Strings48StartH                        0  0x00000000 (const dword)  (usage 3)
Strings48StartL                    26624  0x00006800 (const dword)  (usage 3)
Strings49Count                         1  0x00000001 (const dword)  (not used)
Strings49Size                         17  0x00000011 (const dword)  (usage 3)
Strings49StartH                        0  0x00000000 (const dword)  (usage 3)
Strings49StartL                    24064  0x00005e00 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings50Count                         1  0x00000001 (const dword)  (not used)
Strings50Size                         20  0x00000014 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    24576  0x00006000 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    19456  0x00004c00 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    19968  0x00004e00 (const dword)  (usage 3)
Strings53Count                         1  0x00000001 (const dword)  (not used)
Strings53Size                         75  0x0000004b (const dword)  (usage 3)
Strings53StartH                        0  0x00000000 (const dword)  (usage 3)
Strings53StartL                    27136  0x00006a00 (const dword)  (usage 3)
Strings5Count                          1  0x00000001 (const dword)  (not used)
Strings5Size                          37  0x00000025 (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                     11776  0x00002e00 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          31  0x0000001f (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      2048  0x00000800 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                     14336  0x00003800 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                     14848  0x00003a00 (const dword)  (usage 3)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      3584  0x00000e00 (const dword)  (usage 3)
stringsCV                            110  0x0000006e (mem) word[54] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           296  0x00000128 (mem) word (global)  (usage 24)
TouchXpos                            290  0x00000122 (mem) word (global)  (usage 12)
TouchYpos                            292  0x00000124 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     13704  0x00003588 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 462)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 45)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      12413  0x0000307d (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 159)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        13904  0x00003650 (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
