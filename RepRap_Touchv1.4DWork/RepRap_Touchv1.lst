file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318        
003998  004319  //------------------------------------------------------------------------------
003999  004320  // FILEIO Error Code Constants
004000  004321  //------------------------------------------------------------------------------
004001  004322  #CONST
004002  004348  #END
004003  004349        
004004  004350  //------------------------------------------------------------------------------
004005  004351  // DISK struct offsets
004006  004352  //------------------------------------------------------------------------------
004007  004353  #CONST
004008  004370  #END
004009  004371        
004010  004372  //------------------------------------------------------------------------------
004011  004373  // FILE struct offsets
004012  004374  //------------------------------------------------------------------------------
004013  004375  #CONST
004014  004394  #END
004015  004395        
004016  004396        
004017  004397  //------------------------------------------------------------------//
004018  004398  //        Sound Class Services
004019  004399  //------------------------------------------------------------------//
004020  004400        
004021  004401  func snd_Volume("var"), 0;
004022  004402  // Syntax: snd_Volume("var");
004023  004403  // Usage : snd_Volume(30);
004024  004404  // Notes : set sound playback volume.  Var must
004025  004405  //       : be in the range from 8 (min volume)
004026  004406  //       : to 127 (max volume). If var is less
004027  004407  //       : than 8 volume is set to 8, and if
004028  004408  //       : var > 127 it is set to 127.
004029  004409        
004030  004410  func snd_Pitch("pitch"), 1;
004031  004411  // func snd_Pitch("freq"), 1;
004032  004412  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004033  004413  // Notes : sets the samples playback rate to a different frequency
004034  004414  //       : The minimum value is 4khz
004035  004415  //       : Setting the pitch to zero restores the original sample rate
004036  004416  //       : Return value is the samples original sample rate.
004037  004417        
004038  004418  func snd_BufSize("var"), 0;
004039  004419  // Syntax: snd_BufSize("var");
004040  004420  // Usage : snd_BufSize(2);
004041  004421  // Notes : specify the a memory chunk size for the wavefile buffer.
004042  004422  //       : default size 1024 bytes.
004043  004423  //       : 0 = 1024 bytes (default)
004044  004424  //       : 1 = 2048 bytes
004045  004425  //       : 2 = 4096 bytes
004046  004426  //       : 3 = 8192 bytes
004047  004427        
004048  004428  func snd_Stop(), 0;
004049  004429  // Syntax: snd_Stop();
004050  004430  // Usage : snd_Stop();
004051  004431  // Notes : stop any sound that is playing, releasing
004052  004432  //       : buffers and closes any open wav file.
004053  004433        
004054  004434  func snd_Pause(), 0;
004055  004435  // Syntax: snd_Pause();
004056  004436  // Usage : snd_Pause();
004057  004437  // Notes : pauses any sound that is playing, does nothing
004058  004438  //       : until sound is resumed with snd_Continue().
004059  004439  //       : The sample cam be terminated with snd_Stop.
004060  004440  //       : buffers and closes any open wav file.
004061  004441        
004062  004442  func snd_Continue(), 0;
004063  004443  // Syntax: snd_Continue();
004064  004444  // Usage : snd_Continue();
004065  004445  // Notes : resume any sound that is paused by snd_Pause.
004066  004446        
004067  004447  func snd_Playing(), 1;
004068  004448  // Syntax: snd_Playing();
004069  004449  // Usage : r := snd_Playing();
004070  004450  // Notes : returns 0 if sound has finished playing,
004071  004451  //       : else return number of 512 byte blocks to go.
004072  004452        
004073  004453  func snd_Freq("Freq", "Duration"), 1;
004074  004454  // Syntax: snd_Freq("Freq", "Duration");
004075  004455  // Usage : r := snd_Freq(1000, 2000);
004076  004456  // Notes : Returns 0 if note cannot be played because a wav file is playing
004077  004457  //       : else return True.
004078  004458  //       : Minimum Freq is 20
004079  004459  //       : This will produce a pure Square wave and is designed for driving
004080  004460  //       : Piezo transducers which require this sort of drive. It can also be
004081  004461  //       : used to drive the amp on displays with audio.
004082  004462        
004083  004463        
004084  004464  func __reserved60(), 0; // do not remove
004085  004465  func __reserved61(), 0; // do not remove
004086  004466  func __reserved62(), 0; // do not remove
004087  004467        
004088  004468  //=========================================================================================================
004089  004469  // String functions
004090  004470  //=========================================================================================================
004091  004471        
004092  004472  func str_Ptr("&var"), 1;
004093  004473  // Syntax: str_Ptr(&var);
004094  004474  // Usage : p := str_Ptr(&var);
004095  004475  // Notes : return a byte pointer to a word region
004096  004476        
004097  004477  func str_GetD("&ptr", "&var"), 1;
004098  004478  // Syntax: str_GetD(&ptr, &var);
004099  004479  // Usage : ok := str_GetD(&ptr, &var);
004100  004480  // Notes : convert number in a string to DWORD ( myvar[2] )
004101  004481  //       : returns true if function succeeds, advancing ptr
004102  004482        
004103  004483  func str_GetW("&ptr", "&var"), 1;
004104  004484  // Syntax: str_GetW(&ptr, &var);
004105  004485  // Usage : ok := str_GetW(&ptr, &var);
004106  004486  // Notes : convert number in a string to WORD ( myvar )
004107  004487  //       : returns true if function succeeds, advancing ptr
004108  004488        
004109  004489  func str_GetHexW("&ptr", "&var"), 1;
004110  004490  // Syntax: str_GetHexW(&ptr, &var);
004111  004491  // Usage : ok := str_GetHexW(&ptr, &var);
004112  004492  // Notes : convert HEX number in a string to WORD ( myvar )
004113  004493  //       : returns true if function succeeds, advancing ptr
004114  004494        
004115  004495  func str_GetC("&ptr", "&var"), 1;
004116  004496  // Syntax: str_GetC(&ptr, &var);
004117  004497  // Usage : ok := str_GetC(&ptr, &var);
004118  004498  // Notes : get a valid ascii char in a string to WORD ( myvar )
004119  004499  //       : returns true if function succeeds, advancing ptr
004120  004500        
004121  004501  func str_GetByte("ptr"), 1;
004122  004502  // Syntax: str_GetByte(ptr);
004123  004503  // Usage : myvar := str_GetByte(ptr);
004124  004504  // Notes : get a byte to myvar
004125  004505  //       : returns value
004126  004506        
004127  004507  func str_GetWord("ptr"), 1;
004128  004508  // Syntax: GetWord(ptr);
004129  004509  // Usage : GetWord(ptr);
004130  004510  // Notes : get a word to myvar
004131  004511  //       : returns value
004132  004512        
004133  004513  func str_PutByte("ptr","val"), 0;
004134  004514  // Syntax: str_PutByte(ptr);
004135  004515  // Usage : myvar := str_PutByte(ptr);
004136  004516  // Notes : put a byte at ptr
004137  004517  //       : returns value
004138  004518        
004139  004519  func str_PutWord("ptr","val"), 0;
004140  004520  // Syntax: str_PutWord("ptr","val");
004141  004521  // Usage : str_PutWord(p,100);
004142  004522  // Notes : put word 100 at current pointer location
004143  004523  //       : returns value
004144  004524        
004145  004525  func str_Match("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Match(&ptr, *str);
004147  004527  // Usage : r := str_Match(&p, "hello");
004148  004528  // Notes : Case sensitive match
004149  004529  //       : returns true if function succeded, andvancing pointer to position past
004150  004530  //       : the matched item. Note that any whitespace characters are skipped
004151  004531  //       : in the source string prior to the test.
004152  004532        
004153  004533  func str_MatchI("&ptr", "*str"), 1;
004154  004534  // Syntax: str_MatchI(&ptr, *str);
004155  004535  // Usage : r := str_MatchI(&p, "hello");
004156  004536  // Notes : Case insensitive match
004157  004537  //       : returns true if function succeded, andvancing pointer to position past
004158  004538  //       : the matched item. Note that any whitespace characters are skipped
004159  004539  //       : in the source string prior to the test.
004160  004540        
004161  004541  func str_Find("&ptr", "*str"), 1;
004162  004542  // Syntax: str_Find(&ptr, *str);
004163  004543  // Usage : n := str_Find(&p, "hello");
004164  004544  // Notes : given the address of a pointer to a source string as the
004165  004545  //       : first argument, and a pointer to a test string as the second
004166  004546  //       : argument, attempt to find the position of the matching string
004167  004547  //       : in the source string. The test is performed with case sensitivity.
004168  004548  //       : return 0 if not found, else returns the address of the first
004169  004549  //       : character of the match. NB:- The source pointer is not altered.
004170  004550        
004171  004551  func str_FindI("&ptr", "*str"), 1;
004172  004552  // Syntax: str_Find(&ptr, *str);
004173  004553  // Usage : n := str_Find(&p, "hello");
004174  004554  // Notes : given the address of a pointer to a source string as the
004175  004555  //       : first argument, and a pointer to a test string as the second
004176  004556  //       : argument, attempt to find the position of the matching string
004177  004557  //       : in the source string. The test is performed with no case
004178  004558  //       : sensitivity, eg upper and lower case chars are accepted.
004179  004559  //       : return 0 if not found, else returns the address of the first
004180  004560  //       : character of the match. NB:- The source pointer is not altered.
004181  004561        
004182  004562  func str_Length("ptr"), 1;
004183  004563  // Syntax: str_Length(ptr);
004184  004564  // Usage : len := str_Ptr(mystring);
004185  004565  // Notes : return the length of a byte aligned string excluding terminator
004186  004566        
004187  004567  func str_Printf("&ptr", "*format"), 1;
004188  004568  // Syntax: str_Printf("&ptr", "*format");
004189  004569  // Usage : r := str_Printf(&p, "hello");
004190  004570  // Notes : refer to documentation
004191  004571  //       :
004192  004572        
004193  004573  func str_Cat("dest","src"), 1;
004194  004574  // Syntax: str_Append("&dest","&src");
004195  004575  // Usage : str_Append(&buf,"Hello");
004196  004576  // Notes : Appends a copy of the source string to the destination string.
004197  004577  //       : The terminating null character in destination is overwritten by
004198  004578  //       : the first character of source, and a new null-character is appended
004199  004579  //       : at the end of the new string formed by the concatenation of both in destination.
004200  004580  //       : returns destination.
004201  004581        
004202  004582  func str_CatN("dest","src","count"), 1;
004203  004583  // Syntax: str_Append("&dest","&src","count");
004204  004584  // Usage : str_Append(&buf,"Monday",3);
004205  004585  // Notes : Appends a copy of the source string to the destination string.
004206  004586  //       : The number of characters copied is limited by "count".
004207  004587  //       : The terminating null character in destination is overwritten by
004208  004588  //       : the first character of source, and a new null-character is appended
004209  004589  //       : at the end of the new string formed by the concatenation of both in destination.
004210  004590  //       : returns destination.
004211  004591        
004212  004592        
004213  004593  func str_ByteMove("src", "dest", "count"), 1;
004214  004594  // Syntax   : str_ByteMove(src, dest, bytecount);
004215  004595  // Input    : STR *source points to byte aligned source.
004216  004596  //          : STR *dest   points to byte aligned destination.
004217  004597  //          : VAR count   number of bytes to transfer.
004218  004598  // Usage    : nextpos := str_ByteMove(s, d, 100);
004219  004599  // Notes    : copy bytes from "src" to "dest", stopping only
004220  004600  //          : when "count" is exhausted.
004221  004601  //          : No terminator is appended, it is purely a
004222  004602  //          : byte copy, and any zeroes encountered will
004223  004603  //          : also be copied.
004224  004604  // Returns  : returns a pointer to the end of the destination
004225  004605  //          : (which is "dest" + "count")
004226  004606        
004227  004607        
004228  004608  func str_Copy("dest", "src"), 1;
004229  004609  // Syntax   : str_Copy(dest, src);
004230  004610  // Input    : STR *dest   points to byte aligned destination.
004231  004611  //          : STR *source points to byte aligned source.
004232  004612  // Usage    : nextplace := str_Copy(d, s);
004233  004613  // Notes    : copy a string from "src" to "dest", stopping only
004234  004614  //          : when the end of source string "src" is encountered
004235  004615  //          : (0x00 terminator).
004236  004616  //          : The terminator is always appended, even if "src" is
004237  004617  //          : an empty string.
004238  004618  // Returns  : returns a pointer to the 0x00 string terminator at
004239  004619  //          : end of "dest" (which is "dest" + str_Length(src); )
004240  004620        
004241  004621        
004242  004622  func str_CopyN("dest", "src", "count"), 1;
004243  004623  // Syntax   : str_CopyN(dest, src, bytecount);
004244  004624  // Input    : STR *dest   points to byte aligned destination.
004245  004625  //          : STR *source points to byte aligned source.
004246  004626  //          : VAR count   max number of chars to copy.
004247  004627  // Usage    : nextplace := str_CopyN(d, s, 100);
004248  004628  // Notes    : copy a string from "src" to "dest", stopping only
004249  004629  //          : when "count" is exhausted, or end of source
004250  004630  //          : string "str" is encountered (0x00 string terminator).
004251  004631  //          : The terminator is always appended, even if
004252  004632  //          : "count" is zero, or "src" is a null string.
004253  004633  // Returns  : returns a pointer to the 0x00 string terminator
004254  004634  //          : (which is "dest" + whatever was copied)
004255  004635        
004256  004636        
004257  004637  func __reserved63(), 0; // do not remove
004258  004638  func __reserved64(), 0; // do not remove
004259  004639  func __reserved65(), 0; // do not remove
004260  004640  func __reserved66(), 0; // do not remove
004261  004641        
004262  004642  //=========================================================================================================
004263  004643  // FLASH memory functions
004264  004644  //=========================================================================================================
004265  004645  func flash_GetByte("bank", "ptr"), 1;
004266  004646  // Syntax   : flash_GetByte(bank, ptr);
004267  004647  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004268  004648  // Notes    : Reads a single byte from any flash location.
004269  004649  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004270  004650  //          : which is the header signature for a valid program.
004271  004651  // Returns  : the byte value from the location
004272  004652        
004273  004653        
004274  004654  func flash_GetWord("bank", "ptr"), 1;
004275  004655  // Syntax   : flash_GetWord(bank, ptr);
004276  004656  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004277  004657  // Notes    : Reads a single word from any flash location.
004278  004658  //          : The pointer is byte aligned.
004279  004659  //          : If the bank is read protected, only the first word can be read
004280  004660  //          : which is the header signature for a valid program (0xAA55).
004281  004661  // Returns  : the byte value from the location
004282  004662        
004283  004663        
004284  004664  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004285  004665  // Syntax   : flash_Copy(bank, ptr);
004286  004666  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004287  004667  // Notes    : Copies bytes from any flash locations to a user buffer.
004288  004668  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004289  004669  //          : If the bank is read protected, 0 bytes will be read
004290  004670  //          : which is the header signature for a valid program (0xAA55).
004291  004671  // Returns  : the count of bytes transferred.
004292  004672        
004293  004673        
004294  004674  func flash_Run("bank"), 1;
004295  004675  // Syntax    : flash_Run(bankx);
004296  004676  // Usage     : res := flash_Run(FLASHBANK_5);
004297  004677  // Notes     : Restarts the processor, running code from the required
004298  004678  //           : flash bank. bank may be a variable, or one of the
004299  004679  //           : pre-defined constants:-
004300  004680  //           :    FLASHBANK_0                 //0x00
004301  004681  //           :    FLASHBANK_1                 //0x01
004302  004682  //           :    FLASHBANK_2                 //0x02
004303  004683  //           :    FLASHBANK_3                 //0x03
004304  004684  //           :    FLASHBANK_4                 //0x04
004305  004685  //           :    FLASHBANK_5                 //0x05
004306  004686  // returns    : This function should net return as it restarts
004307  004687  //        : the processor and jumps to the required bank,
004308  004688  //        : If it does return, -1 indicates incorrect/invalid
004309  004689  //        : bank number, and -2 indicates no valid program
004310  004690  //        : in the selected bank.
004311  004691        
004312  004692  func flash_Bank(), 1;
004313  004693  // Syntax   : flash_Bank();
004314  004694  // Usage    : myvar := flash_Bank();
004315  004695  // Notes    : Identifies which flash bank the code is running from.
004316  004696  // Returns  : The FLASH bank that code is currently running from, 0-5.
004317  004697        
004318  004698        
004319  004699  func flash_EraseBank("bank", "confirmation"), 1;
004320  004700  // Syntax   : flash_EraseBank(bank, confirmation);
004321  004701  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004322  004702  // Notes    : This function should be used with extreme caution.
004323  004703  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004324  004704  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004325  004705  //          : a protected bank will not be erased, and function will return with 0
004326  004706  //          : If the destination bank is the same as the execution bank, the processor will reset
004327  004707  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004328  004708  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004329  004709  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004330  004710  // Returns  : returns true if the function succeeded
004331  004711  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004332  004712        
004333  004713  func flash_LoadFile("bank", "filename"), 1;
004334  004714  // Syntax   : flash_LoadFile(bank, ptr);
004335  004715  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004336  004716  // Notes    : Copies a file from uSD to the required flashbank.
004337  004717  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004338  004718  // Returns  : returns true if the function succeeded.
004339  004719        
004340  004720        
004341  004721  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004342  004722  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004343  004723  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004344  004724  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004345  004725  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004346  004726  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004347  004727  // Returns  : returns true if the function succeeded.
004348  004728        
004349  004729        
004350  004730  func flash_putstr("bank", "ptr"), 1;
004351  004731  // Syntax   : flash_putstr(bank, ptr);
004352  004732  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004353  004733  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004354  004734  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004355  004735  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004356  004736        
004357  004737  func flash_Blit16("bank", "offset", "count"), 1;
004358  004738  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004359  004739  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004360  004740  // Notes    : Blit an image to a GRAM window from FLASH storage.
004361  004741  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004362  004742  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004363  004743        
004364  004744  func flash_Blit8("bank", "offset", "count"), 1;
004365  004745  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004366  004746  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004367  004747  // Notes    : Blit an image to a GRAM window from FLASH storage.
004368  004748  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004369  004749  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004370  004750        
004371  004751  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004372  004752  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004373  004753  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004374  004754  // Notes    : Blit an image to a GRAM window from FLASH storage.
004375  004755  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004376  004756  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004377  004757        
004378  004758  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004379  004759  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004380  004760  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004381  004761  // Notes    : Blit an image to a GRAM window from FLASH storage.
004382  004762  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004383  004763  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004384  004764        
004385  004765  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004386  004766  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004387  004767  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004388  004768  // Notes    : Blit an image to a GRAM window from FLASH storage.
004389  004769  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004390  004770  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004391  004771        
004392  004772  func flash_Exec("bank", "arglistptr"), 1;
004393  004773  // Syntax: res := flash_Exec("bank","arglistptr");
004394  004774  // Usage : res := flash_Exec("bank","arglistptr");
004395  004775  // Notes : returns like a function, current program
004396  004776  //       : calling program is kept active and control returns to it.
004397  004777  //       : If arglistptr is 0, no arguments are passed, else
004398  004778  //       : arglist points to an array, the first element being
004399  004779  //       : the number of elements in the array.
004400  004780  //       : func 'main' in the called bank accepts the arguments.
004401  004781  // WARNING Not currently implemented!
004402  004782        
004403  004783        
004404  004784  func __reserved68(), 0; // do not remove
004405  004785  func __reserved69(), 0; // do not remove
004406  004786  func __reserved70(), 0; // do not remove
004407  004787        
004408  004788  //=========================================================================================================
004409  004789  // I/O and hardware functions
004410  004790  //=========================================================================================================
004411  004791        
004412  004792        
004413  004793        
004414  004794        
004415  004795  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004416  004796  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004417  004797  // Syntax: pin_Pulseout(pin, value);
004418  004798  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004419  004799  // Notes : only available on PA0 to PA9
004420  004800  //       : Invert the state of an output for "value" milliseconds.
004421  004801  //       : pulseout is non blocking, that is, code execution may continue while
004422  004802  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004423  004803  //       : If not already an output, pin is automatically made a push/pull output,
004424  004804  //       : and the last state of its output latch will determine pulse polarity.
004425  004805  //       : It's its open drain state is not altered if the pin was already an output.
004426  004806  //       : If pulseout is called while pulseout is still active, the pulse timer
004427  004807  //       : will simply be updated with the new "value" and the pulse will continue
004428  004808  //       : with the extended value.
004429  004809  //       : returns true if the pin number is legal (usually ignored)
004430  004810        
004431  004811        
004432  004812  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004433  004813  // Syntax: pin_Counter(pin, mode, userfunc);
004434  004814  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004435  004815  // Notes : only available on PA4 to PA9
004436  004816  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004437  004817  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004438  004818  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004439  004819  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004440  004820  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004441  004821  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004442  004822  //       : The pin may be configured as an input or output, the function behaves the same.
004443  004823  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004444  004824  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004445  004825  //       : "mode" has the following effect:-
004446  004826  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004447  004827  //       : mode COUNT_RISE(1) = increment on every rising edge
004448  004828  //       : mode COUNT_FALL(2) = increment on every falling edge
004449  004829  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004450  004830        
004451  004831  //------------------------------------------------------------------//
004452  004832  // pin counter mode constants                                       //
004453  004833  //------------------------------------------------------------------//
004454  004834  #CONST
004455  004839  #END
004456  004840        
004457  004841  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004458  004842  // Syntax: Qencoder1(pinA, pinB, mode);
004459  004843  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004460  004844  // Notes : not available on pins PA14 and PA15
004461  004845  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004462  004846  //       : or written to at any time with peekW and pokeW using the following constants:-
004463  004847  //       : It is necessary to configure the pins first, depending on your requirements, eg
004464  004848  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004465  004849  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004466  004850  //       : Returns true if the pin numbers are legal (usually ignored)
004467  004851  //    QEN1_COUNTER_LO
004468  004852  //    QEN1_COUNTER_HI
004469  004853  //    QEN1_DELTA This is reset to 0 when read
004470  004854        
004471  004855  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004472  004856  // Syntax: Qencoder2(pinA, pinB, mode);
004473  004857  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004474  004858  // Notes : not available on pins PA14 and PA15
004475  004859  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004476  004860  //       : or written to at any time with peekW and pokeW using the following constants:-
004477  004861  //       : It is necessary to configure the pins first, depending on your requirements, eg
004478  004862  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004479  004863  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004480  004864  //       : Returns true if the pin numbers are legal (usually ignored)
004481  004865  //    QEN2_COUNTER_LO
004482  004866  //    QEN2_COUNTER_HI
004483  004867  //    QEN2_DELTA This is reset to 0 when read
004484  004868        
004485  004869        
004486  004870  func Qencoder1Reset(), 0;
004487  004871  // Syntax: Qencoder1Reset();
004488  004872  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004489  004873  // Notes :
004490  004874  //    QEN1_COUNTER_LO is reset to zero
004491  004875  //    QEN1_COUNTER_HI is reset to zero
004492  004876  //    QEN1_DELTA is reset to zero
004493  004877        
004494  004878  func Qencoder2Reset(), 0;
004495  004879  // Syntax: Qencoder2Reset();
004496  004880  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004497  004881  // Notes :
004498  004882  //    QEN2_COUNTER_LO is reset to zero
004499  004883  //    QEN2_COUNTER_HI is reset to zero
004500  004884  //    QEN2_DELTA is reset to zero
004501  004885        
004502  004886        
004503  004887  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004504  004888  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004505  004889  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004506  004890  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004507  004891  //       : Invert the state of an output at a "freq" freuency "count" times.
004508  004892  //       : PulseoutCount is non blocking, that is, code execution may continue while
004509  004893  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004510  004894  //       : If not already an output, pin is automatically made a push/pull output,
004511  004895  //       : and the last state of its output latch will determine pulse polarity.
004512  004896  //       : It's its open drain state is not altered if the pin was already an output.
004513  004897  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004514  004898  //       : will simply have the new "value" added to it.
004515  004899  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004516  004900  //       : returns true if the pin number is legal (usually ignored)
004517  004901        
004518  004902  func __reserved72(), 0; // do not remove
004519  004903        
004520  004904  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004521  004905  // Syntax: pwm_Init(pin, value);
004522  004906  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004523  004907  // Notes : only available on PA4 to PA9
004524  004908  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004525  004909  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004526  004910  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004527  004911  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004528  004912  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004529  004913  //       :                    : Repetition rate ~50hz or 20ms
004530  004914  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004531  004915  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004532  004916  //       : pwm_Init is non blocking and the pwm continues until turn off
004533  004917  //       : Returns true if the pin number is legal (usually ignored)
004534  004918        
004535  004919  //------------------------------------------------------------------------------
004536  004920  // PWM Constants
004537  004921  //------------------------------------------------------------------------------
004538  004922  #CONST
004539  004927  #END
004540  004928        
004541  004929  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004542  004930  // Syntax   : OW_Reset(PA0);
004543  004931  // Usage    : OW_Reset(PA0);
004544  004932  // Notes    : Only available on PA0 to PA13
004545  004933  //          : Resets  ONEWIRE device
004546  004934  //          : Returns the status, 0 = ACK.
004547  004935  //          :
004548  004936        
004549  004937  func OW_Read("pin"), 1;                              // read data from 1wire bus
004550  004938  // Syntax   : OW_Read(PA0);
004551  004939  // Usage    : arg1 := OW_Read(PA0);
004552  004940  // Notes    : Only available on PA0 to PA13
004553  004941  //          : Reads value of the ONEWIRE pin
004554  004942  //          : that was previously selected for ONEWIRE comms.
004555  004943  //          :
004556  004944  //          : pin = 0 : the next byte from the ONEWIRE bus
004557  004945        
004558  004946  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004559  004947  // Syntax   : OW_Read9(PA0);
004560  004948  // Usage    : OW_Read9(PA0);
004561  004949  // Notes    : Only available on PA0 to PA13
004562  004950  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004563  004951  //          : that was previously selected for ONEWIRE comms.
004564  004952  //          :
004565  004953  //          : read the 9 bits from the ONEWIRE bus
004566  004954        
004567  004955  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004568  004956  // Syntax   : OW_Write(PA0, arg);
004569  004957  // Usage    : OW_Write(PA0, arg);
004570  004958  // Notes    : Only available on PA0 to PA13
004571  004959  //          : Sends ONEWIRE data on the appropriate
004572  004960  //          : pin that was previously  selected as ONEWIRE comms.
004573  004961  //          :
004574  004962  //          : write arg to the ONEWIRE bus
004575  004963        
004576  004964  func __reserved77(), 0; // do not remove
004577  004965  func __reserved78(), 0; // do not remove
004578  004966        
004579  004967  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004580  004968  // Syntax: sys_GetDateVar(&year, &month, &day);
004581  004969  // Usage : sys_GetDateVar(&year, &month, &day);
004582  004970  // Notes : Retrieves the date values into variables
004583  004971        
004584  004972  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004585  004973  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004974  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004587  004975  // Notes : Retrieves the time values into variables
004588  004976        
004589  004977  func sys_PmmC(), 0;
004590  004978  // Syntax: sys_PmmC();
004591  004979  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004592  004980  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004593  004981  //       : Can be captured to a buffer using the to( function
004594  004982  //       : Returns nothing.
004595  004983        
004596  004984  func sys_Driver(), 0;
004597  004985  // Syntax: sys_Driver();
004598  004986  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004599  004987  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004600  004988  //       : Can be captured to a buffer using the to( function
004601  004989  //       : Returns nothing.
004602  004990        
004603  004991  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004604  004992  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004605  004993  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004606  004994  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004607  004995  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004608  004996  //       : elements in each buffer. This will need to be greater than "width" for negative
004609  004997  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004610  004998  //       : pass 0 as the address for any unused traces
004611  004999  //       : X position is incremented each point by "xstep" pixels.
004612  005000  //       : Y values are derived from a Y buffer "newy" (signed values).
004613  005001  //       : 2 buffers need to be supplied, "newy" contains new
004614  005002  //       : points to be drawn, "oldy" contains most recent set
004615  005003  //       : of points to be un-drawn. After the waveform is drawn,
004616  005004  //       : "newy" buffer is automatically copied to "oldy" buffer.
004617  005005        
004618  005006        
004619  005007  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004620  005008  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004621  005009  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004622  005010  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004623  005011  //       : and calls "COMPLETEfunction" when done.
004624  005012  //       : "rate" is samples in 100 of samples per second
004625  005013  //       : Any unused IOx pins should have their buffer addresses set to 0
004626  005014  //       : For performance reasons samples are taken in chunks of 32, thus if you
004627  005015  //       : request 33 samples there will be a delay of 31 samples before
004628  005016  //       : "COMPLETEfunction" is called
004629  005017  //       : If Touch is enabled this function should be called no more than once per
004630  005018  //       : millisecond, otherwise touch behaviour could be eratic.
004631  005019        
004632  005020        
004633  005021  func sys_ErrorMessage("msgnum"), 1;
004634  005022        
004635  005023  //==============================//
004636  005024  // NeoPixel specific functions  //
004637  005025  //==============================//
004638  005026        
004639  005027  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004640  005028  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004641  005029  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004642  005030  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004643  005031  //       : data        : Address of data to be sent
004644  005032  //       : size        : number of colour 'sets' to follow
004645  005033  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004646  005034  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004647  005035  //       : Repeat      : Number of times to repeat the colours between first and last
004648  005036  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004649  005037  //       : Returns true if the pin number is legal (usually ignored)
004650  005038  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004651  005039  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004652  005040        
004653  005041  // NeoPixel related constants
004654  005042  #CONST
004655  005046  #END
004656  005047        
004657  005048  func __reserved85(), 0; // do not remove
004658  005049  func __reserved86(), 0; // do not remove
004659  005050        
004660  005051  //==============================================//
004661  005052  // spi flash device specific functions          //
004662  005053  //==============================================//
004663  005054        
004664  005055  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004665  005056  // Syntax   : spiflash_SIG("spi#","enablepin");
004666  005057  // Usage    : var := spiflash_SIG(SPI1, PA0);
004667  005058  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004668  005059  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004669  005060  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004670  005061  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004671  005062  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004672  005063  //          : byte is ignored.
004673  005064        
004674  005065  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004675  005066  // Syntax   : spiflash_ID("spi#","enablepin");
004676  005067  // Usage    : var := spiflash_ID(SPI1, PA0);
004677  005068  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004678  005069  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004679  005070  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004680  005071  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004681  005072  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004682  005073  //          : contains capacity. Refer to the device data sheet for further information.
004683  005074        
004684  005075  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004685  005076  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004686  005077  // Usage    : spiflash_BulkErase(SPI1, PA0);
004687  005078  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004688  005079  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004689  005080  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004690  005081  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004691  005082  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004692  005083  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004693  005084        
004694  005085  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004695  005086  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004696  005087  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004697  005088  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004698  005089  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004699  005090  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004700  005091  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004701  005092  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004702  005093  //          : blockAddress The address of the 64k FLASH block to be erased.
004703  005094  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004704  005095  //          : can take up to 3 milliseconds.
004705  005096        
004706  005097  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004707  005098  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004708  005099  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004709  005100  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004710  005101        
004711  005102  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004712  005103  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004713  005104  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004714  005105  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004715  005106  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004716  005107  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004717  005108  //       : returns number of characters read
004718  005109  //       : if "dest" is zero, data is read direct to GRAM window
004719  005110  //       :
004720  005111        
004721  005112  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004722  005113  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004723  005114  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004724  005115  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004725  005116  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004726  005117  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004727  005118  //       : returns number of bytes written
004728  005119  //       :
004729  005120        
004730  005121  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004731  005122  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004732  005123  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004733  005124  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004734  005125  //       : The image is displayed at x,y (with respect to top left corner).
004735  005126        
004736  005127  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004737  005128  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004738  005129  // Usage : spiflash_PutC('x', SPI1, PA0);
004739  005130  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004740  005131  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004741  005132  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004742  005133        
004743  005134  func spiflash_GetC("spi#", "enablepin"), 1;
004744  005135  // Syntax: spiflash_GetC("spi#", "enablepin");
004745  005136  // Usage : mychar := fgetC(SPI1, PA0);
004746  005137  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004747  005138  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004748  005139  //       : by subsequent reads or writes.
004749  005140  //       : returns next char from file
004750  005141        
004751  005142  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004752  005143  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004753  005144  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004754  005145  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004755  005146  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004756  005147  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004757  005148        
004758  005149  func spiflash_GetW("spi#", "enablepin"), 1;
004759  005150  // Syntax: spiflash_GetW("spi#", "enablepin");
004760  005151  // Usage : myword := fgetW(SPI1, PA0);
004761  005152  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004762  005153  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004763  005154  //       : by subsequent reads or writes.
004764  005155  // Notes : returns next word in file
004765  005156        
004766  005157  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004767  005158  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004768  005159  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004769  005160  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004770  005161  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004771  005162  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004772  005163  //       : returns number of characters written
004773  005164  //       :
004774  005165        
004775  005166  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004776  005167  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004777  005168  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004778  005169  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004779  005170  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004780  005171  //       : by subsequent reads or writes.
004781  005172  //       : returns pointer to string or null if failed.
004782  005173  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004783  005174  //       : NB:- only reads up to "size-1" characters into "string"
004784  005175  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004785  005176  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004786  005177  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004787  005178  //       : C] It reaches the end of file
004788  005179  //       : D] A read error occurs.
004789  005180        
004790  005181  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004791  005182  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004792  005183  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004793  005184  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004794  005185  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004795  005186  //       : return a function pointer to the allocation.
004796  005187  //       : The function can then be invoked just like any other
004797  005188  //       : function would be called via a function pointer.
004798  005189  //       : Parameters may be passed to it in a conventional way.
004799  005190  //       : The function may be discarded at any time when no
004800  005191  //       : longer required, thus freeing its memory resources.
004801  005192  //       : The loaded function can be discarded with mem_Free(..)
004802  005193  //       : eg:
004803  005194  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004804  005195  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004805  005196  //       : then elsewhere in your program:-
004806  005197  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004807  005198  //       : if(res == QUIT_APPLICATION) goto exitApp;
004808  005199  //       : Later in your program, when popupWindow is no longer
004809  005200  //       : required for the application:-
004810  005201  //       : res := mem_Free(popupWindow);
004811  005202  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004812  005203  //       : The callers stack is shared by the loaded function,
004813  005204  //       : however any global variables in the loaded function
004814  005205  //       : are private to that function.
004815  005206  //
004816  005207        
004817  005208  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004818  005209  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004819  005210  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004820  005211  // Notes : current program releases any allocated memory but
004821  005212  //       : retains the stack and global memory.
004822  005213  //       : If arglistptr is 0, no arguments are passed, else
004823  005214  //       : arglist points to an array, the first element being
004824  005215  //       : the number of elements in the array.
004825  005216  //       : func 'main' in the called program accepts
004826  005217  //       : the arguments, if any. The arguments can only
004827  005218  //       : be passed by value, no pointers or references can be
004828  005219  //       : used as all memory is cleared before the file
004829  005220  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004830  005221  //       : for functions that can pass by reference.
004831  005222        
004832  005223  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004833  005224  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004834  005225  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004835  005226  // Notes : returns like a function, current program
004836  005227  //       : calling program is kept active and control returns to it.
004837  005228  //       : If arglistptr is 0, no arguments are passed, else
004838  005229  //       : arglist points to an array, the first element being
004839  005230  //       : the number of elements in the array.
004840  005231  //       : func 'main' in the called program accepts the arguments.
004841  005232  //       : This function is similar to spiflash_LoadFunction(...), however,
004842  005233  //       : the function argument list is passed by pointer, and
004843  005234  //       : the memory consumed by the function is released as
004844  005235  //       : soon as the function completes.
004845  005236        
004846  005237  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004847  005238  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004848  005239  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004849  005240  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004850  005241  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004851  005242  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004852  005243  //       : Returns NULL if function fails.
004853  005244  //       : Returns a handle (pointer to the memory allocation) to the
004854  005245  //       : image control list that has been created.
004855  005246        
004856  005247  // Notes : This function Calculates the size of a chunk of memory required for
004857  005248  //       : a image list and populates it from the image control file ("*.dat")
004858  005249  //       : therefore, when imagelist is no longer required, you must de-allocate
004859  005250  //       : the image list memory by using eg:- mem_Free(hImagelist);
004860  005251  //       : to restore the heap.
004861  005252  //       :
004862  005253        
004863  005254  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004864  005255  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004865  005256  // Usage : spiflash_PlayWAV(SPI1, PA0);
004866  005257  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004867  005258  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004868  005259  //       : or writes.
004869  005260  //       : This function automatically grabs a chunk
004870  005261  //       : of memory for a file buffer, and a wave
004871  005262  //       : buffer. The minimum memory requirement is
004872  005263  //       : about 580 bytes for the disk io service and
004873  005264  //       : a minimum wave buffer size of 1024. The size
004874  005265  //       : of the wave buffer allocation
004875  005266  //       : can be increased by the snd_BufSize function.
004876  005267  //       : The default size 1024 bytes.
004877  005268  //       : NB the memory is only required during the
004878  005269  //       : duration of play, and is automatically
004879  005270  //       : released while not in use.
004880  005271  //       : See the Sound Class services for other associated controls.
004881  005272  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004882  005273  //       : If errors occured, the folling is returned
004883  005274  //       : -7  : Insufficient memory available for WAV buffer and file
004884  005275  //       : -6  : cant play this rate
004885  005276  //       : -5  : no data chunk found in first rsector
004886  005277  //       : -4  : no format data
004887  005278  //       : -3  : no wave chunk signature
004888  005279  //       : -2  : bad wave file format
004889  005280  //       : -1  : file not found
004890  005281        
004891  005282  //==============================================//
004892  005283  // more com functions                           //
004893  005284  //==============================================//
004894  005285        
004895  005286  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004896  005287  // Syntax   : com1_TXblock("buf", "bufsize");
004897  005288  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004898  005289  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004899  005290  //          : if a transmit buffer is active and space is available this function will return almost
004900  005291  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004901  005292        
004902  005293  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004903  005294  // Syntax   : com1_RXblock("buf", "bufsize");
004904  005295  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004905  005296  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004906  005297  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004907  005298  //          : immediately otherwise it will block until until the required bytes are received.
004908  005299        
004909  005300  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004910  005301  // Syntax   : com_TXblock("buf", "bufsize");
004911  005302  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004912  005303  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004913  005304  //          : if a transmit buffer is active and space is available this function will return almost
004914  005305  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004915  005306        
004916  005307  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004917  005308  // Syntax   : com_RXblock("buf", "bufsize");
004918  005309  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004919  005310  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004920  005311  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004921  005312  //          : immediately otherwise it will block until until the required bytes are received.
004922  005313        
004923  005314  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004924  005315  // Syntax   : com_TXblock("buf", "bufsize");
004925  005316  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004926  005317  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004927  005318  //          : if a transmit buffer is active and space is available this function will return almost
004928  005319  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004929  005320        
004930  005321  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004931  005322  // Syntax   : com_RXblock("buf", "bufsize");
004932  005323  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004933  005324  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004934  005325  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004935  005326  //          : immediately otherwise it will block until until the required bytes are received.
004936  005327        
004937  005328  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004938  005329  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004939  005330  // Usage : disp_BlitPixelsFromCOM1();
004940  005331  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004941  005332  //       : display from the specified com port.
004942  005333        
004943  005334  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004944  005335  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004945  005336  // Usage : disp_BlitPixelsFromCOM2();
004946  005337  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004947  005338  //       : display from the specified com port.
004948  005339        
004949  005340  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004950  005341  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004951  005342  // Usage : disp_BlitPixelsFromCOM3();
004952  005343  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004953  005344  //       : display from the specified com port.
004954  005345        
004955  005346        
004956  005347  //==============================================//
004957  005348  // crc generation functions                     //
004958  005349  //==============================================//
004959  005350        
004960  005351  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004961  005352  // *Notes   : (if you calculate all of the incoming data
004962  005353  //          : INCLUDING the CRC, the result should be 0x00
004963  005354  //          : This is equivalent to simple addition of all bytes
004964  005355  //          : and returning the negated sum an 8 bit value.
004965  005356  //          : For the standard test string "123456789",
004966  005357  //          : crc_CSUM_8 will return 0x0023.
004967  005358        
004968  005359        
004969  005360  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004970  005361  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004971  005362  //          : (if you calculate all of the incoming data
004972  005363  //          : INCLUDING the CRC, the result should be 0x0000
004973  005364  //          : For the standard test string "123456789",
004974  005365  //          : crc_16 will return 0xBB3D.
004975  005366        
004976  005367        
004977  005368  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004978  005369  // *Notes   : (if you calculate all of the incoming data
004979  005370  //          : INCLUDING the CRC, the result should be 0x0000
004980  005371  //          : For the standard test string "123456789",
004981  005372  //          : crc_MODBUS will return 0x4B37.
004982  005373        
004983  005374        
004984  005375  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004985  005376  // *Notes   : (if you calculate all of the incoming data
004986  005377  //          : INCLUDING the CRC, the result should be 0x0000
004987  005378  //          : For the standard test string "123456789",
004988  005379  //          : crc_CCITT will return the following:-
004989  005380  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004990  005381  //          : seed = 0xFFFF, result = 0x29B1
004991  005382  //          : seed = 0x1D0F, result = 0xE5CC
004992  005383        
004993  005384        
004994  005385  //------------------------------------------------------------------//
004995  005386  // CONSTANTS
004996  005387  //------------------------------------------------------------------//
004997  005388        
004998  005389  #CONST
004999  005393  #END
005000  005394        
005001  005395  // timebase constants for timebase_init
005002  005396  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005003  005397  #CONST
005004  005408  #END
005005  005409        
005006  005410        
005007  005411  // generic constants
005008  005412  #CONST
005009  005420  #END
005010  005421        
005011  005422        
005012  005423        
005013  005424  //gfx_Get() related constants
005014  005425  #CONST
005015  005434  #END
005016  005435        
005017  005436        
005018  005437        
005019  005438        
005020  005439  #CONST
005021  005452  #END
005022  005453        
005023  005454        
005024  005455  #CONST
005025  005480  #END
005026  005481        
005027  005482        
005028  005483        
005029  005484        
005030  005485  // timer control  related constants
005031  005486  #CONST
005032  005495  #END
005033  005496        
005034  005497        
005035  005498        
005036  005499  //------------------------------------------------------------------------------
005037  005500  // system WORD variables accesible with peekW and pokeW or pointer access
005038  005501  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005039  005502  // can also be accessed with peekW and pokeW
005040  005503  //------------------------------------------------------------------------------
005041  005504        
005042  005505  #CONST
005043  005600  #END
005044  005601        
005045  005602  #CONST
005046  005767  #END
005047  005768        
005048  005769        
005049  005770        
005050  005771  //==================================================================================================
005051  005772        
005052  005773        
005053  005774        
005054  000013      #ENDIF
005055  000014        
005056  000015        
005057  000016  //===========================================================================================
005058  000017        
005059  000018        
005060  000002        
005061  000003  // generated 15/10/2015 14:20:52
005062  000004        
005063  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005064  000006  #inherit "4DGL_16bitColours.fnc"
005065  000006  #inherit "4DGL_16bitColours.fnc"
005066  000004  */
005067  000005        
005068  000006        
005069  000007        
005070  000008  #CONST
005071  000149  #END
005072  000150        
005073  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005074  000008  #inherit "VisualConst.inc"
005075  000008  #inherit "VisualConst.inc"
005076  000001  // Line Patterns
005077  000002  #constant  LPCOARSE    0xF0F0
005078  000002  #constant  LPCOARSE    0xF0F0
005079  000003  #constant  LPMEDIUM    0x3333
005080  000003  #constant  LPMEDIUM    0x3333
005081  000004  #constant  LPFINE      0xAAAA
005082  000004  #constant  LPFINE      0xAAAA
005083  000005  #constant  LPDASHDOT   0x03CF
005084  000005  #constant  LPDASHDOT   0x03CF
005085  000006  #constant  LPDASHDOTDOT 0x0333
005086  000006  #constant  LPDASHDOTDOT 0x0333
005087  000007  #constant  LPSOLID     0x0000
005088  000007  #constant  LPSOLID     0x0000
005089  000009        
005090  000010        
file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1Const.inc

005091  000011  #inherit "RepRap_Touchv1Const.inc"
005092  000011  #inherit "RepRap_Touchv1Const.inc"
005093  000001  // File generated 15/10/2015 14:20:28
005094  000002  // Warning! This is a generated file, any manual changes will be
005095  000003  // lost during the next generation.
005096  000004        
005097  000005  #constant  Strings3Count    0
005098  000005  #constant  Strings3Count    0
005099  000006  #constant  Strings3Size     1
005100  000006  #constant  Strings3Size     1
005101  000007  #constant  Strings1Count    1
005102  000007  #constant  Strings1Count    1
005103  000008  #constant  Strings1Size     30
005104  000008  #constant  Strings1Size     30
005105  000009  #constant  Strings4Count    1
005106  000009  #constant  Strings4Count    1
005107  000010  #constant  Strings4Size     25
005108  000010  #constant  Strings4Size     25
005109  000011  #constant  Strings6Count    1
005110  000011  #constant  Strings6Count    1
005111  000012  #constant  Strings6Size     31
005112  000012  #constant  Strings6Size     31
005113  000013  #constant  Strings2Count    0
005114  000013  #constant  Strings2Count    0
005115  000014  #constant  Strings2Size     1
005116  000014  #constant  Strings2Size     1
005117  000015  #constant  Strings0Count    1
005118  000015  #constant  Strings0Count    1
005119  000016  #constant  Strings0Size     7
005120  000016  #constant  Strings0Size     7
005121  000017  #constant  Strings9Count    0
005122  000017  #constant  Strings9Count    0
005123  000018  #constant  Strings9Size     1
005124  000018  #constant  Strings9Size     1
005125  000019  #constant  Strings34Count    0
005126  000019  #constant  Strings34Count    0
005127  000020  #constant  Strings34Size     1
005128  000020  #constant  Strings34Size     1
005129  000021  #constant  Strings36Count    0
005130  000021  #constant  Strings36Count    0
005131  000022  #constant  Strings36Size     1
005132  000022  #constant  Strings36Size     1
005133  000023  #constant  Strings37Count    0
005134  000023  #constant  Strings37Count    0
005135  000024  #constant  Strings37Size     1
005136  000024  #constant  Strings37Size     1
005137  000025  #constant  Strings12Count    1
005138  000025  #constant  Strings12Count    1
005139  000026  #constant  Strings12Size     14
005140  000026  #constant  Strings12Size     14
005141  000027  #constant  Strings16Count    0
005142  000027  #constant  Strings16Count    0
005143  000028  #constant  Strings16Size     1
005144  000028  #constant  Strings16Size     1
005145  000029  #constant  Strings11Count    1
005146  000029  #constant  Strings11Count    1
005147  000030  #constant  Strings11Size     73
005148  000030  #constant  Strings11Size     73
005149  000031  #constant  Strings7Count    0
005150  000031  #constant  Strings7Count    0
005151  000032  #constant  Strings7Size     1
005152  000032  #constant  Strings7Size     1
005153  000033  #constant  Strings8Count    0
005154  000033  #constant  Strings8Count    0
005155  000034  #constant  Strings8Size     1
005156  000034  #constant  Strings8Size     1
005157  000035  #constant  Strings38Count    0
005158  000035  #constant  Strings38Count    0
005159  000036  #constant  Strings38Size     1
005160  000036  #constant  Strings38Size     1
005161  000037  #constant  Strings39Count    0
005162  000037  #constant  Strings39Count    0
005163  000038  #constant  Strings39Size     1
005164  000038  #constant  Strings39Size     1
005165  000039  #constant  Strings40Count    1
005166  000039  #constant  Strings40Count    1
005167  000040  #constant  Strings40Size     7
005168  000040  #constant  Strings40Size     7
005169  000041  #constant  Strings41Count    1
005170  000041  #constant  Strings41Count    1
005171  000042  #constant  Strings41Size     7
005172  000042  #constant  Strings41Size     7
005173  000043  #constant  Strings42Count    1
005174  000043  #constant  Strings42Count    1
005175  000044  #constant  Strings42Size     7
005176  000044  #constant  Strings42Size     7
005177  000045  #constant  Strings43Count    0
005178  000045  #constant  Strings43Count    0
005179  000046  #constant  Strings43Size     1
005180  000046  #constant  Strings43Size     1
005181  000047  #constant  Strings44Count    0
005182  000047  #constant  Strings44Count    0
005183  000048  #constant  Strings44Size     1
005184  000048  #constant  Strings44Size     1
005185  000049  #constant  Strings45Count    0
005186  000049  #constant  Strings45Count    0
005187  000050  #constant  Strings45Size     1
005188  000050  #constant  Strings45Size     1
005189  000051  #constant  Strings51Count    0
005190  000051  #constant  Strings51Count    0
005191  000052  #constant  Strings51Size     1
005192  000052  #constant  Strings51Size     1
005193  000053  #constant  Strings52Count    0
005194  000053  #constant  Strings52Count    0
005195  000054  #constant  Strings52Size     1
005196  000054  #constant  Strings52Size     1
005197  000055  #constant  Strings29Count    1
005198  000055  #constant  Strings29Count    1
005199  000056  #constant  Strings29Size     53
005200  000056  #constant  Strings29Size     53
005201  000057  #constant  Strings31Count    1
005202  000057  #constant  Strings31Count    1
005203  000058  #constant  Strings31Size     7
005204  000058  #constant  Strings31Size     7
005205  000059  #constant  Strings32Count    1
005206  000059  #constant  Strings32Count    1
005207  000060  #constant  Strings32Size     19
005208  000060  #constant  Strings32Size     19
005209  000061  #constant  Strings50Count    0
005210  000061  #constant  Strings50Count    0
005211  000062  #constant  Strings50Size     1
005212  000062  #constant  Strings50Size     1
005213  000063  #constant  Strings53Count    1
005214  000063  #constant  Strings53Count    1
005215  000064  #constant  Strings53Size     67
005216  000064  #constant  Strings53Size     67
005217  000065  #constant  Strings5Count    0
005218  000065  #constant  Strings5Count    0
005219  000066  #constant  Strings5Size     1
005220  000066  #constant  Strings5Size     1
005221  000067  #constant  Strings10Count    1
005222  000067  #constant  Strings10Count    1
005223  000068  #constant  Strings10Size     5
005224  000068  #constant  Strings10Size     5
005225  000069  #constant  Strings17Count    0
005226  000069  #constant  Strings17Count    0
005227  000070  #constant  Strings17Size     1
005228  000070  #constant  Strings17Size     1
005229  000071  // object indexes into ImageControl
005230  000072  #CONST
005231  000297  #END
005232  000298        
005233  000299  #constant  Strings13Size     0
005234  000299  #constant  Strings13Size     0
005235  000300  #constant  Strings13StartH   0
005236  000300  #constant  Strings13StartH   0
005237  000301  #constant  Strings13StartL   0
005238  000301  #constant  Strings13StartL   0
005239  000302  #constant  Strings14Size     0
005240  000302  #constant  Strings14Size     0
005241  000303  #constant  Strings14StartH   0
005242  000303  #constant  Strings14StartH   0
005243  000304  #constant  Strings14StartL   0
005244  000304  #constant  Strings14StartL   0
005245  000305  #constant  Strings15Size     0
005246  000305  #constant  Strings15Size     0
005247  000306  #constant  Strings15StartH   0
005248  000306  #constant  Strings15StartH   0
005249  000307  #constant  Strings15StartL   0
005250  000307  #constant  Strings15StartL   0
005251  000308  #constant  Strings18Size     0
005252  000308  #constant  Strings18Size     0
005253  000309  #constant  Strings18StartH   0
005254  000309  #constant  Strings18StartH   0
005255  000310  #constant  Strings18StartL   0
005256  000310  #constant  Strings18StartL   0
005257  000311  #constant  Strings19Size     0
005258  000311  #constant  Strings19Size     0
005259  000312  #constant  Strings19StartH   0
005260  000312  #constant  Strings19StartH   0
005261  000313  #constant  Strings19StartL   0
005262  000313  #constant  Strings19StartL   0
005263  000314  #constant  Strings20Size     0
005264  000314  #constant  Strings20Size     0
005265  000315  #constant  Strings20StartH   0
005266  000315  #constant  Strings20StartH   0
005267  000316  #constant  Strings20StartL   0
005268  000316  #constant  Strings20StartL   0
005269  000317  #constant  Strings21Size     0
005270  000317  #constant  Strings21Size     0
005271  000318  #constant  Strings21StartH   0
005272  000318  #constant  Strings21StartH   0
005273  000319  #constant  Strings21StartL   0
005274  000319  #constant  Strings21StartL   0
005275  000320  #constant  Strings22Size     0
005276  000320  #constant  Strings22Size     0
005277  000321  #constant  Strings22StartH   0
005278  000321  #constant  Strings22StartH   0
005279  000322  #constant  Strings22StartL   0
005280  000322  #constant  Strings22StartL   0
005281  000323  #constant  Strings23Size     0
005282  000323  #constant  Strings23Size     0
005283  000324  #constant  Strings23StartH   0
005284  000324  #constant  Strings23StartH   0
005285  000325  #constant  Strings23StartL   0
005286  000325  #constant  Strings23StartL   0
005287  000326  #constant  Strings24Size     0
005288  000326  #constant  Strings24Size     0
005289  000327  #constant  Strings24StartH   0
005290  000327  #constant  Strings24StartH   0
005291  000328  #constant  Strings24StartL   0
005292  000328  #constant  Strings24StartL   0
005293  000329  #constant  Strings25Size     0
005294  000329  #constant  Strings25Size     0
005295  000330  #constant  Strings25StartH   0
005296  000330  #constant  Strings25StartH   0
005297  000331  #constant  Strings25StartL   0
005298  000331  #constant  Strings25StartL   0
005299  000332  #constant  Strings26Size     0
005300  000332  #constant  Strings26Size     0
005301  000333  #constant  Strings26StartH   0
005302  000333  #constant  Strings26StartH   0
005303  000334  #constant  Strings26StartL   0
005304  000334  #constant  Strings26StartL   0
005305  000335  #constant  Strings27Size     0
005306  000335  #constant  Strings27Size     0
005307  000336  #constant  Strings27StartH   0
005308  000336  #constant  Strings27StartH   0
005309  000337  #constant  Strings27StartL   0
005310  000337  #constant  Strings27StartL   0
005311  000338  #constant  Strings28Size     0
005312  000338  #constant  Strings28Size     0
005313  000339  #constant  Strings28StartH   0
005314  000339  #constant  Strings28StartH   0
005315  000340  #constant  Strings28StartL   0
005316  000340  #constant  Strings28StartL   0
005317  000341  #constant  Strings30Size     0
005318  000341  #constant  Strings30Size     0
005319  000342  #constant  Strings30StartH   0
005320  000342  #constant  Strings30StartH   0
005321  000343  #constant  Strings30StartL   0
005322  000343  #constant  Strings30StartL   0
005323  000344  #constant  Strings33Size     0
005324  000344  #constant  Strings33Size     0
005325  000345  #constant  Strings33StartH   0
005326  000345  #constant  Strings33StartH   0
005327  000346  #constant  Strings33StartL   0
005328  000346  #constant  Strings33StartL   0
005329  000347  #constant  Strings35Size     0
005330  000347  #constant  Strings35Size     0
005331  000348  #constant  Strings35StartH   0
005332  000348  #constant  Strings35StartH   0
005333  000349  #constant  Strings35StartL   0
005334  000349  #constant  Strings35StartL   0
005335  000350  #constant  Strings46Size     0
005336  000350  #constant  Strings46Size     0
005337  000351  #constant  Strings46StartH   0
005338  000351  #constant  Strings46StartH   0
005339  000352  #constant  Strings46StartL   0
005340  000352  #constant  Strings46StartL   0
005341  000353  #constant  Strings47Size     0
005342  000353  #constant  Strings47Size     0
005343  000354  #constant  Strings47StartH   0
005344  000354  #constant  Strings47StartH   0
005345  000355  #constant  Strings47StartL   0
005346  000355  #constant  Strings47StartL   0
005347  000356  #constant  Strings48Size     0
005348  000356  #constant  Strings48Size     0
005349  000357  #constant  Strings48StartH   0
005350  000357  #constant  Strings48StartH   0
005351  000358  #constant  Strings48StartL   0
005352  000358  #constant  Strings48StartL   0
005353  000359  #constant  Strings49Size     0
005354  000359  #constant  Strings49Size     0
005355  000360  #constant  Strings49StartH   0
005356  000360  #constant  Strings49StartH   0
005357  000361  #constant  Strings49StartL   0
005358  000361  #constant  Strings49StartL   0
005359  000362  #constant  Strings3StartH   0x0
005360  000362  #constant  Strings3StartH   0x0
005361  000363  #constant  Strings3StartL   0x0
005362  000363  #constant  Strings3StartL   0x0
005363  000364  #constant  Strings1StartH   0x0
005364  000364  #constant  Strings1StartH   0x0
005365  000365  #constant  Strings1StartL   0x200
005366  000365  #constant  Strings1StartL   0x200
005367  000366  #constant  Strings4StartH   0x0
005368  000366  #constant  Strings4StartH   0x0
005369  000367  #constant  Strings4StartL   0x400
005370  000367  #constant  Strings4StartL   0x400
005371  000368  #constant  Strings6StartH   0x0
005372  000368  #constant  Strings6StartH   0x0
005373  000369  #constant  Strings6StartL   0x600
005374  000369  #constant  Strings6StartL   0x600
005375  000370  #constant  Strings2StartH   0x0
005376  000370  #constant  Strings2StartH   0x0
005377  000371  #constant  Strings2StartL   0x800
005378  000371  #constant  Strings2StartL   0x800
005379  000372  #constant  Strings0StartH   0x0
005380  000372  #constant  Strings0StartH   0x0
005381  000373  #constant  Strings0StartL   0xA00
005382  000373  #constant  Strings0StartL   0xA00
005383  000374  #constant  Strings9StartH   0x0
005384  000374  #constant  Strings9StartH   0x0
005385  000375  #constant  Strings9StartL   0xC00
005386  000375  #constant  Strings9StartL   0xC00
005387  000376  #constant  Strings34StartH   0x0
005388  000376  #constant  Strings34StartH   0x0
005389  000377  #constant  Strings34StartL   0xE00
005390  000377  #constant  Strings34StartL   0xE00
005391  000378  #constant  Strings36StartH   0x0
005392  000378  #constant  Strings36StartH   0x0
005393  000379  #constant  Strings36StartL   0x1000
005394  000379  #constant  Strings36StartL   0x1000
005395  000380  #constant  Strings37StartH   0x0
005396  000380  #constant  Strings37StartH   0x0
005397  000381  #constant  Strings37StartL   0x1200
005398  000381  #constant  Strings37StartL   0x1200
005399  000382  #constant  Strings12StartH   0x0
005400  000382  #constant  Strings12StartH   0x0
005401  000383  #constant  Strings12StartL   0x1400
005402  000383  #constant  Strings12StartL   0x1400
005403  000384  #constant  Strings16StartH   0x0
005404  000384  #constant  Strings16StartH   0x0
005405  000385  #constant  Strings16StartL   0x1600
005406  000385  #constant  Strings16StartL   0x1600
005407  000386  #constant  Strings11StartH   0x0
005408  000386  #constant  Strings11StartH   0x0
005409  000387  #constant  Strings11StartL   0x1800
005410  000387  #constant  Strings11StartL   0x1800
005411  000388  #constant  Strings7StartH   0x0
005412  000388  #constant  Strings7StartH   0x0
005413  000389  #constant  Strings7StartL   0x1A00
005414  000389  #constant  Strings7StartL   0x1A00
005415  000390  #constant  Strings8StartH   0x0
005416  000390  #constant  Strings8StartH   0x0
005417  000391  #constant  Strings8StartL   0x1C00
005418  000391  #constant  Strings8StartL   0x1C00
005419  000392  #constant  Strings38StartH   0x0
005420  000392  #constant  Strings38StartH   0x0
005421  000393  #constant  Strings38StartL   0x1E00
005422  000393  #constant  Strings38StartL   0x1E00
005423  000394  #constant  Strings39StartH   0x0
005424  000394  #constant  Strings39StartH   0x0
005425  000395  #constant  Strings39StartL   0x2000
005426  000395  #constant  Strings39StartL   0x2000
005427  000396  #constant  Strings40StartH   0x0
005428  000396  #constant  Strings40StartH   0x0
005429  000397  #constant  Strings40StartL   0x2200
005430  000397  #constant  Strings40StartL   0x2200
005431  000398  #constant  Strings41StartH   0x0
005432  000398  #constant  Strings41StartH   0x0
005433  000399  #constant  Strings41StartL   0x2400
005434  000399  #constant  Strings41StartL   0x2400
005435  000400  #constant  Strings42StartH   0x0
005436  000400  #constant  Strings42StartH   0x0
005437  000401  #constant  Strings42StartL   0x2600
005438  000401  #constant  Strings42StartL   0x2600
005439  000402  #constant  Strings43StartH   0x0
005440  000402  #constant  Strings43StartH   0x0
005441  000403  #constant  Strings43StartL   0x2800
005442  000403  #constant  Strings43StartL   0x2800
005443  000404  #constant  Strings44StartH   0x0
005444  000404  #constant  Strings44StartH   0x0
005445  000405  #constant  Strings44StartL   0x2A00
005446  000405  #constant  Strings44StartL   0x2A00
005447  000406  #constant  Strings45StartH   0x0
005448  000406  #constant  Strings45StartH   0x0
005449  000407  #constant  Strings45StartL   0x2C00
005450  000407  #constant  Strings45StartL   0x2C00
005451  000408  #constant  Strings51StartH   0x0
005452  000408  #constant  Strings51StartH   0x0
005453  000409  #constant  Strings51StartL   0x2E00
005454  000409  #constant  Strings51StartL   0x2E00
005455  000410  #constant  Strings52StartH   0x0
005456  000410  #constant  Strings52StartH   0x0
005457  000411  #constant  Strings52StartL   0x3000
005458  000411  #constant  Strings52StartL   0x3000
005459  000412  #constant  Strings29StartH   0x0
005460  000412  #constant  Strings29StartH   0x0
005461  000413  #constant  Strings29StartL   0x3200
005462  000413  #constant  Strings29StartL   0x3200
005463  000414  #constant  Strings31StartH   0x0
005464  000414  #constant  Strings31StartH   0x0
005465  000415  #constant  Strings31StartL   0x3400
005466  000415  #constant  Strings31StartL   0x3400
005467  000416  #constant  Strings32StartH   0x0
005468  000416  #constant  Strings32StartH   0x0
005469  000417  #constant  Strings32StartL   0x3600
005470  000417  #constant  Strings32StartL   0x3600
005471  000418  #constant  Strings50StartH   0x0
005472  000418  #constant  Strings50StartH   0x0
005473  000419  #constant  Strings50StartL   0x3800
005474  000419  #constant  Strings50StartL   0x3800
005475  000420  #constant  Strings53StartH   0x0
005476  000420  #constant  Strings53StartH   0x0
005477  000421  #constant  Strings53StartL   0x3A00
005478  000421  #constant  Strings53StartL   0x3A00
005479  000422  #constant  Strings5StartH   0x0
005480  000422  #constant  Strings5StartH   0x0
005481  000423  #constant  Strings5StartL   0x3C00
005482  000423  #constant  Strings5StartL   0x3C00
005483  000424  #constant  Strings10StartH   0x0
005484  000424  #constant  Strings10StartH   0x0
005485  000425  #constant  Strings10StartL   0x3E00
005486  000425  #constant  Strings10StartL   0x3E00
005487  000426  #constant  Strings17StartH   0x0
005488  000426  #constant  Strings17StartH   0x0
005489  000427  #constant  Strings17StartL   0x4000
005490  000427  #constant  Strings17StartL   0x4000
005491  000428  #IFNOT EXISTS NOGLOBALS
005492  000429  var hndl ;
005493  000430  #ENDIF
005494  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005495  000013  #inherit "CLPrintStrings.inc"
005496  000013  #inherit "CLPrintStrings.inc"
005497  000001  func PrintStrings(var ID, var *msgid, var String)
005498  000002      var StringID, i, ch, offs32[2], res32[2];
005499  000003      StringID := oStringss[1+ID] ;
005500  000004      if (String)
005501  000005          stringsCV[ID] := -1 ;
005502  000006      else
005503  000007          stringsCV[ID] := msgid ;
005504  000008      endif
005505  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005506  000010      txt_FontID(hFonts[ID]) ;
005507  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005508  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005509  000013        
005510  000014      if (*(StringID + Ofs_String_Transparent))
005511  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005512  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005513  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005514  000018      else
005515  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005516  000020          gfx_Clipping(ON) ;
005517  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005518  000022          gfx_Clipping(OFF) ;
005519  000023        
005520  000024      endif
005521  000025        
005522  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005523  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005524  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005525  000029        
005526  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005527  000031        
005528  000032      if (String)
005529  000033          i := 0 ;
005530  000034          ch := msgid[i++] ;
005531  000035          while (ch != 0)
005532  000036              putch(ch) ;
005533  000037              ch := msgid[i++] ;
005534  000038          wend
005535  000039      else
005536  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005537  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005538  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005539  000043          uadd_3232(res32,res32,offs32) ;
005540  000044          file_Seek(hstrings, res32[1], res32[0]);
005541  000045          repeat
005542  000046              if (*(StringID + Ofs_String_Ansi))
005543  000047                  ch := file_GetC(hstrings) ;
005544  000048              else
005545  000049                  ch := file_GetW(hstrings) ;
005546  000050              endif
005547  000051              putch(ch) ;
005548  000052          until (ch == 0) ;
005549  000053      endif
005550  000054        
005551  000055  endfunc
005552  000056        
005553  000014        
005554  000015  #constant IPDatasize 22
005555  000015  #constant IPDatasize 22
005556  000016        
005557  000017  #CONST
005558  000021  #END
005559  000022        
005560  000023  #CONST
005561  000130  #END
005562  000131        
005563  000538  #END
5564  2394
5565  2395
5566  2396
5567  2397
5568  2398
5569  2399
5570  239A
5571  239B
5572  239C
5573  239D
5574  239E
5575  239F
5576  23A0
5577  23A1
5578  23A2
5579  23A3
5580  23A4
5581  23A5
5582  23A6
5583  23A7
5584  23A8
5585  23A9
5586  23AA
5587  23AB
5588  23AC
5589  23AD
5590  23AE
5591  23AF
5592  23B0
5593  23B1
5594  23B2
5595  23B3
5596  23B4
5597  23B5
5598  23B6
5599  23B7
5600  23B8
5601  23B9
5602  23BA
5603  23BB
5604  23BC
5605  23BD
5606  23BE
5607  23BF
5608  23C0
5609  23C1
5610  23C2
5611  23C3
5612  23C4
5613  23C5
5614  23C6
5615  23C7
5616  23C8
5617  23C9
5618  23CA
5619  23CB
5620  23CC
5621  23CD
5622  23CE
5623  23CF
5624  23D0
5625  23D1
5626  23D2
5627  23D3
5628  23D4
5629  23D5
5630  23D6
5631  23D7
5632  23D8
5633  23D9
5634  23DA
5635  23DB
5636  23DC
5637  23DD
5638  23DE
5639  23DF
5640  23E0
5641  23E1
5642  23E2
5643  23E3
5644  23E4
5645  23E5
5646  23E6
5647  23E7
5648  23E8
5649  23E9
5650  23EA
5651  23EB
5652  23EC
5653  23ED
5654  23EE
5655  23EF
5656  23F0
5657  23F1
5658  23F2
5659  23F3
5660  23F4
5661  23F5
5662  23F6
5663  23F7
5664  23F8
5665  23F9
5666  23FA
5667  23FB
5668  23FC
5669  23FD
5670  23FE
5671  23FF
5672  2400
5673  2401
5674  2402
5675  2403
5676  2404
5677  2405
5678  2406
5679  2407
5680  2408
5681  2409
5682  240A
5683  240B
5684  240C
5685  240D
5686  240E
5687  240F
5688  2410
5689  2411
5690  2412
5691  2413
5692  2414
5693  2415
5694  2416
5695  2417
5696  2418
5697  2419
5698  241A
5699  241B
5700  241C
5701  241D
5702  241E
5703  241F
5704  2420
5705  2421
5706  2422
5707  2423
5708  2424
5709  2425
5710  2426
5711  2427
5712  2428
5713  2429
5714  242A
5715  242B
5716  242C
5717  242D
5718  242E
5719  242F
5720  2430
5721  2431
5722  2432
5723  2433
5724  2434
5725  2435
5726  2436
5727  2437
5728  2438
5729  2439
5730  243A
5731  243B
5732  243C
5733  243D
5734  243E
5735  243F
5736  2440
5737  2441
5738  2442
5739  2443
5740  2444
5741  2445
5742  2446
5743  2447
5744  2448
5745  2449
5746  244A
5747  244B
5748  244C
5749  244D
5750  244E
5751  244F
5752  2450
5753  2451
5754  2452
5755  2453
5756  2454
5757  2455
5758  2456
5759  2457
5760  2458
5761  2459
5762  245A
5763  245B
5764  245C
5765  245D
5766  245E
5767  245F
5768  2460
5769  2461
5770  2462
5771  2463
5772  2464
5773  2465
5774  2466
5775  2467
5776  2468
5777  2469
5778  246A
5779  246B
5780  246C
5781  246D
5782  246E
5783  246F
5784  2470
5785  2471
5786  2472
5787  2473
5788  2474
5789  2475
5790  2476
5791  2477
5792  2478
5793  2479
5794  247A
5795  247B
5796  247C
5797  247D
5798  247E
5799  247F
5800  2480
5801  2481
5802  2482
5803  2483
5804  2484
5805  2485
5806  2486
5807  2487
5808  2488
5809  2489
5810  248A
5811  248B
5812  248C
5813  248D
5814  248E
5815  248F
5816  2490
5817  2491
5818  2492
5819  2493
5820  2494
5821  2495
5822  2496
5823  2497
5824  2498
5825  2499
5826  249A
5827  249B
5828  249C
5829  249D
5830  249E
5831  249F
5832  24A0
5833  24A1
5834  24A2
5835  24A3
5836  24A4
5837  24A5
5838  24A6
5839  24A7
5840  24A8
5841  24A9
5842  24AA
5843  24AB
5844  24AC
5845  24AD
5846  24AE
5847  24AF
5848  24B0
5849  24B1
5850  24B2
5851  24B3
5852  24B4
5853  24B5
5854  24B6
5855  24B7
5856  24B8
5857  24B9
5858  24BA
5859  24BB
5860  24BC
5861  24BD
5862  24BE
5863  24BF
5864  24C0
5865  24C1
5866  24C2
5867  24C3
5868  24C4
5869  24C5
5870  24C6
5871  24C7
5872  24C8
5873  24C9
5874  24CA
5875  24CB
5876  24CC
5877  24CD
5878  24CE
5879  24CF
5880  24D0
5881  24D1
5882  24D2
5883  24D3
5884  24D4
5885  24D5
5886  24D6
5887  24D7
5888  24D8
5889  24D9
5890  24DA
5891  24DB
5892  24DC
5893  24DD
5894  24DE
5895  24DF
5896  24E0
5897  24E1
5898  24E2
5899  24E3
5900  24E4
5901  24E5
5902  24E6
5903  24E7
5904  24E8
5905  24E9
5906  24EA
5907  24EB
5908  24EC
5909  24ED
5910  24EE
5911  24EF
5912  24F0
5913  24F1
5914  24F2
5915  24F3
5916  24F4
5917  24F5
5918  24F6
5919  24F7
5920  24F8
5921  24F9
5922  24FA
5923  24FB
5924  24FC
5925  24FD
5926  24FE
5927  24FF
5928  2500
5929  2501
5930  2502
5931  2503
5932  2504
5933  2505
5934  2506
5935  2507
5936  2508
5937  2509
5938  250A
5939  250B
5940  250C
5941  250D
5942  250E
5943  250F
5944  2510
5945  2511
5946  2512
5947  2513
5948  2514
5949  2515
5950  2516
5951  2517
5952  2518
5953  2519
5954  251A
5955  251B
5956  251C
5957  251D
5958  251E
5959  251F
5960  2520
5961  2521
5962  2522
5963  2523
5964  2524
5965  2525
5966  2526
5967  2527
5968  2528
5969  2529
5970  252A
5971  252B
5972  252C
5973  252D
5974  252E
5975  252F
5976  2530
5977  2531
5978  2532
5979  2533
5980  2534
5981  2535
5982  2536
5983  2537
5984  2538
5985  2539
5986  253A
5987  253B
5988  253C
5989  253D
5990  253E
5991  253F
5992  2540
5993  2541
5994  2542
5995  2543
5996  2544
5997  2545
5998  2546
5999  2547
6000  2548
6001  2549
6002  254A
6003  254B
6004  254C
6005  254D
6006  254E
6007  254F
6008  2550
6009  2551
6010  2552
6011  2553
6012  2554
6013  2555
6014  2556
6015  2557
6016  2558
6017  2559
6018  255A
6019  255B
6020  255C
6021  255D
6022  255E
6023  255F
6024  2560
6025  2561
6026  2562
6027  2563
6028  2564
6029  2565
6030  2566
6031  2567
6032  2568
6033  2569
6034  256A
6035  256B
6036  256C
6037  256D
6038  256E
6039  256F
6040  2570
6041  2571
6042  2572
6043  2573
6044  2574
6045  2575
6046  2576
6047  2577
6048  2578
6049  2579
6050  257A
6051  257B
6052  257C
6053  257D
6054  257E
6055  257F
6056  2580
6057  2581
6058  2582
6059  2583
6060  2584
6061  2585
6062  2586
6063  2587
6064  2588
6065  2589
6066  258A
6067  258B
6068  258C
6069  258D
6070  258E
6071  258F
6072  2590
6073  2591
6074  2592
6075  2593
6076  2594
6077  2595
6078  2596
6079  2597
6080  2598
6081  2599
6082  259A
6083  259B
6084  259C
6085  259D
6086  259E
6087  259F
6088  25A0
6089  25A1
6090  25A2
6091  25A3
6092  25A4
6093  25A5
6094  25A6
6095  25A7
6096  25A8
6097  25A9
6098  25AA
6099  25AB
6100  25AC
6101  25AD
6102  25AE
6103  25AF
6104  25B0
6105  25B1
6106  25B2
6107  25B3
6108  25B4
6109  25B5
6110  25B6
6111  25B7
6112  25B8
6113  25B9
6114  25BA
6115  25BB
6116  25BC
6117  25BD
6118  25BE
6119  25BF
6120  25C0
6121  25C1
6122  25C2
6123  25C3
6124  25C4
6125  25C5
6126  25C6
6127  25C7
6128  25C8
6129  25C9
6130  25CA
6131  25CB
6132  25CC
6133  25CD
6134  25CE
6135  25CF
6136  25D0
6137  25D1
6138  25D2
6139  25D3
6140  25D4
6141  25D5
6142  25D6
6143  25D7
6144  25D8
6145  25D9
6146  25DA
6147  25DB
6148  25DC
6149  25DD
6150  25DE
6151  25DF
6152  25E0
6153  25E1
6154  25E2
6155  25E3
6156  25E4
6157  25E5
6158  25E6
6159  25E7
6160  25E8
6161  25E9
6162  25EA
6163  25EB
6164  25EC
6165  25ED
6166  25EE
6167  25EF
6168  25F0
6169  25F1
6170  25F2
6171  25F3
6172  25F4
6173  25F5
6174  25F6
6175  25F7
6176  25F8
6177  25F9
6178  25FA
6179  25FB
6180  25FC
6181  25FD
6182  25FE
6183  25FF
6184  2600
6185  2601
6186  2602
6187  2603
6188  2604
6189  2605
6190  2606
6191  2607
6192  2608
6193  2609
6194  260A
6195  260B
6196  260C
6197  260D
6198  260E
6199  260F
6200  2610
6201  2611
6202  2612
6203  2613
6204  2614
6205  2615
6206  2616
6207  2617
6208  2618
6209  2619
6210  261A
6211  261B
6212  261C
6213  261D
6214  261E
6215  261F
6216  2620
6217  2621
6218  2622
6219  2623
6220  2624
6221  2625
6222  2626
6223  2627
6224  2628
6225  2629
6226  262A
6227  262B
6228  262C
6229  262D
6230  262E
6231  262F
6232  2630
6233  2631
6234  2632
6235  2633
6236  2634
6237  2635
6238  2636
6239  2637
6240  2638
6241  2639
6242  263A
6243  263B
6244  263C
6245  263D
6246  263E
6247  263F
6248  2640
6249  2641
6250  2642
6251  2643
6252  2644
6253  2645
6254  2646
6255  2647
6256  2648
6257  2649
6258  264A
6259  264B
6260  264C
6261  264D
6262  264E
6263  264F
6264  2650
6265  2651
6266  2652
6267  2653
6268  2654
6269  2655
6270  2656
6271  2657
6272  2658
6273  2659
6274  265A
6275  265B
6276  265C
6277  265D
6278  265E
6279  265F
6280  2660
6281  2661
6282  2662
6283  2663
6284  2664
6285  2665
6286  2666
6287  2667
6288  2668
6289  2669
6290  266A
6291  266B
6292  266C
6293  266D
6294  266E
6295  266F
6296  2670
6297  2671
6298  2672
6299  2673
6300  2674
6301  2675
6302  2676
6303  2677
6304  2678
6305  2679
6306  267A
6307  267B
6308  267C
6309  267D
6310  267E
6311  267F
6312  2680
6313  2681
6314  2682
6315  2683
6316  2684
6317  2685
6318  2686
6319  2687
6320  2688
6321  2689
6322  268A
6323  268B
6324  268C
6325  268D
6326  268E
6327  268F
6328  2690
6329  2691
6330  2692
6331  2693
6332  2694
6333  2695
6334  2696
6335  2697
6336  2698
6337  2699
6338  269A
6339  269B
6340  269C
6341  269D
6342  269E
6343  269F
6344  26A0
6345  26A1
6346  26A2
6347  26A3
6348  26A4
6349  26A5
6350  26A6
6351  26A7
6352  26A8
6353  26A9
6354  26AA
6355  26AB
6356  26AC
6357  26AD
6358  26AE
6359  26AF
6360  26B0
6361  26B1
6362  26B2
6363  26B3
6364  26B4
6365  26B5
6366  26B6
6367  26B7
6368  26B8
6369  26B9
6370  26BA
6371  26BB
6372  26BC
6373  26BD
6374  26BE
6375  26BF
6376  26C0
6377  26C1
6378  26C2
6379  26C3
6380  26C4
6381  26C5
6382  26C6
6383  26C7
6384  26C8
6385  26C9
6386  26CA
6387  26CB
6388  26CC
6389  26CD
6390  26CE
6391  26CF
6392  26D0
6393  26D1
6394  26D2
6395  26D3
6396  26D4
6397  26D5
6398  26D6
6399  26D7
6400  26D8
6401  26D9
6402  26DA
6403  26DB
6404  26DC
6405  26DD
6406  26DE
6407  26DF
6408  26E0
6409  26E1
6410  26E2
6411  26E3
6412  26E4
6413  26E5
6414  26E6
6415  26E7
6416  26E8
6417  26E9
6418  26EA
6419  26EB
6420  26EC
6421  26ED
6422  26EE
6423  26EF
6424  26F0
6425  26F1
6426  26F2
6427  26F3
6428  26F4
6429  26F5
6430  26F6
6431  26F7
6432  26F8
6433  26F9
6434  26FA
6435  26FB
6436  26FC
6437  26FD
6438  26FE
6439  26FF
6440  2700
6441  2701
6442  2702
6443  2703
6444  2704
6445  2705
6446  2706
6447  2707
6448  2708
6449  2709
6450  270A
6451  270B
6452  270C
6453  270D
6454  270E
6455  270F
6456  2710
6457  2711
6458  2712
6459  2713
6460  2714
6461  2715
6462  2716
6463  2717
6464  2718
6465  2719
6466  271A
6467  271B
6468  271C
6469  271D
6470  271E
6471  271F
6472  2720
6473  2721
6474  2722
6475  2723
6476  2724
6477  2725
6478  2726
6479  2727
6480  2728
6481  2729
6482  272A
6483  272B
6484  272C
6485  272D
6486  272E
6487  272F
6488  2730
6489  2731
6490  2732
6491  2733
6492  2734
6493  2735
6494  2736
6495  2737
6496  2738
6497  2739
6498  273A
6499  273B
6500  273C
6501  273D
6502  273E
6503  273F
6504  2740
6505  2741
6506  2742
6507  2743
6508  2744
6509  2745
6510  2746
6511  2747
6512  2748
6513  2749
6514  274A
6515  274B
6516  274C
6517  274D
6518  274E
6519  274F
6520  2750
6521  2751
6522  2752
6523  2753
6524  2754
6525  2755
6526  2756
6527  2757
6528  2758
6529  2759
6530  275A
6531  275B
6532  275C
6533  275D
6534  275E
6535  275F
6536  2760
6537  2761
6538  2762
6539  2763
6540  2764
6541  2765
6542  2766
6543  2767
6544  2768
6545  2769
6546  276A
6547  276B
6548  276C
6549  276D
6550  276E
6551  276F
6552  2770
6553  2771
6554  2772
6555  2773
6556  2774
6557  2775
6558  2776
6559  2777
6560  2778
6561  2779
6562  277A
6563  277B
6564  277C
6565  277D
6566  277E
6567  277F
6568  2780
6569  2781
6570  2782
6571  2783
6572  2784
6573  2785
6574  2786
6575  2787
6576  2788
6577  2789
6578  278A
6579  278B
6580  278C
6581  278D
6582  278E
6583  278F
6584  2790
6585  2791
6586  2792
6587  2793
6588  2794
6589  2795
6590  2796
6591  2797
6592  2798
6593  2799
6594  279A
6595  279B
6596  279C
6597  279D
6598  279E
6599  279F
6600  27A0
6601  27A1
6602  27A2
6603  27A3
6604  27A4
6605  27A5
6606  27A6
6607  27A7
6608  27A8
6609  27A9
6610  27AA
6611  27AB
6612  27AC
6613  27AD
6614  27AE
6615  27AF
6616  27B0
6617  27B1
6618  27B2
6619  27B3
6620  27B4
6621  27B5
6622  27B6
6623  27B7
6624  27B8
6625  27B9
6626  27BA
6627  27BB
6628  27BC
6629  27BD
6630  27BE
6631  27BF
6632  27C0
6633  27C1
6634  27C2
6635  27C3
6636  27C4
6637  27C5
6638  27C6
6639  27C7
6640  27C8
6641  27C9
6642  27CA
6643  27CB
6644  27CC
6645  27CD
6646  27CE
6647  27CF
6648  27D0
6649  27D1
6650  27D2
6651  27D3
6652  27D4
6653  27D5
6654  27D6
6655  27D7
6656  27D8
6657  27D9
6658  27DA
6659  27DB
6660  27DC
6661  27DD
6662  27DE
6663  27DF
6664  27E0
6665  27E1
6666  27E2
6667  27E3
6668  27E4
6669  27E5
6670  27E6
6671  27E7
6672  27E8
6673  27E9
6674  27EA
6675  27EB
6676  27EC
6677  27ED
6678  27EE
6679  27EF
6680  27F0
6681  27F1
6682  27F2
6683  27F3
6684  27F4
6685  27F5
6686  27F6
6687  27F7
6688  27F8
6689  27F9
6690  27FA
6691  27FB
6692  27FC
6693  27FD
6694  27FE
6695  27FF
6696  2800
6697  2801
6698  2802
6699  2803
6700  2804
6701  2805
6702  2806
6703  2807
6704  2808
6705  2809
6706  280A
6707  280B
6708  280C
6709  280D
6710  280E
6711  280F
6712  2810
6713  2811
6714  2812
6715  2813
6716  2814
6717  2815
6718  2816
6719  2817
6720  2818
6721  2819
6722  281A
6723  281B
6724  281C
6725  281D
6726  281E
6727  281F
6728  2820
6729  2821
6730  2822
6731  2823
6732  2824
6733  2825
6734  2826
6735  2827
6736  2828
6737  2829
6738  282A
6739  282B
6740  282C
6741  282D
6742  282E
6743  282F
6744  2830
6745  2831
6746  2832
6747  2833
6748  2834
6749  2835
6750  2836
6751  2837
6752  2838
6753  2839
6754  283A
6755  283B
6756  283C
6757  283D
6758  283E
6759  283F
6760  2840
6761  2841
6762  2842
6763  2843
6764  2844
6765  2845
6766  2846
6767  2847
6768  2848
6769  2849
6770  284A
6771  284B
6772  284C
6773  284D
6774  284E
6775  284F
6776  2850
6777  2851
6778  2852
6779  2853
6780  2854
6781  2855
6782  2856
6783  2857
6784  2858
6785  2859
6786  285A
6787  285B
6788  285C
6789  285D
6790  285E
6791  285F
6792  2860
6793  2861
6794  2862
6795  2863
6796  2864
6797  2865
6798  2866
6799  2867
6800  2868
6801  2869
6802  286A
6803  286B
6804  286C
6805  286D
6806  286E
6807  286F
6808  2870
6809  2871
6810  2872
6811  2873
6812  2874
6813  2875
6814  2876
6815  2877
6816  2878
6817  2879
6818  287A
6819  287B
6820  287C
6821  287D
6822  287E
6823  287F
6824  2880
6825  2881
6826  2882
6827  2883
6828  2884
6829  2885
6830  2886
6831  2887
6832  2888
6833  2889
6834  288A
6835  288B
6836  288C
6837  288D
6838  288E
6839  288F
6840  2890
6841  2891
6842  2892
6843  2893
6844  2894
6845  2895
6846  2896
6847  2897
6848  2898
6849  2899
6850  289A
6851  289B
6852  289C
6853  289D
6854  289E
6855  289F
6856  28A0
6857  28A1
6858  28A2
6859  28A3
6860  28A4
6861  28A5
6862  28A6
6863  28A7
6864  28A8
6865  28A9
6866  28AA
6867  28AB
6868  28AC
6869  28AD
6870  28AE
6871  28AF
6872  28B0
6873  28B1
6874  28B2
6875  28B3
6876  28B4
6877  28B5
6878  28B6
6879  28B7
6880  28B8
6881  28B9
6882  28BA
6883  28BB
6884  28BC
6885  28BD
6886  28BE
6887  28BF
6888  28C0
6889  28C1
6890  28C2
6891  28C3
6892  28C4
6893  28C5
6894  28C6
6895  28C7
6896  28C8
6897  28C9
6898  28CA
6899  28CB
6900  28CC
6901  28CD
6902  28CE
6903  28CF
6904  28D0
6905  28D1
6906  28D2
6907  28D3
6908  28D4
6909  28D5
6910  28D6
6911  28D7
6912  28D8
6913  28D9
6914  28DA
6915  28DB
6916  28DC
6917  28DD
6918  28DE
6919  28DF
6920  28E0
6921  28E1
6922  28E2
6923  28E3
6924  28E4
6925  28E5
6926  28E6
6927  28E7
6928  28E8
6929  28E9
6930  28EA
6931  28EB
6932  28EC
6933  28ED
6934  28EE
6935  28EF
6936  28F0
6937  28F1
6938  28F2
6939  28F3
6940  28F4
6941  28F5
6942  28F6
6943  28F7
6944  28F8
6945  28F9
6946  28FA
6947  28FB
6948  28FC
6949  28FD
6950  28FE
6951  28FF
6952  2900
6953  2901
6954  2902
6955  2903
6956  2904
6957  2905
6958  2906
6959  2907
6960  2908
6961  2909
6962  290A
6963  290B
6964  290C
6965  290D
6966  290E
6967  290F
6968  2910
6969  2911
6970  2912
6971  2913
6972  2914
6973  2915
6974  2916
6975  2917
6976  2918
6977  2919
6978  291A
6979  291B
6980  291C
6981  291D
6982  291E
6983  291F
6984  2920
6985  2921
6986  2922
6987  2923
6988  2924
6989  2925
6990  2926
6991  2927
6992  2928
6993  2929
6994  292A
6995  292B
6996  292C
6997  292D
6998  292E
6999  292F
7000  2930
7001  2931
7002  2932
7003  2933
7004  2934
7005  2935
7006  2936
7007  2937
7008  2938
7009  2939
7010  293A
7011  293B
7012  293C
7013  293D
7014  293E
7015  293F
7016  2940
7017  2941
7018  2942
7019  2943
7020  2944
7021  2945
7022  2946
7023  2947
7024  2948
7025  2949
7026  294A
7027  294B
7028  294C
7029  294D
7030  294E
7031  294F
7032  2950
7033  2951
7034  2952
7035  2953
7036  2954
7037  2955
7038  2956
7039  2957
7040  2958
7041  2959
7042  295A
7043  295B
7044  295C
7045  295D
7046  295E
7047  295F
7048  2960
7049  2961
7050  2962
7051  2963
7052  2964
7053  2965
7054  2966
7055  2967
7056  2968
7057  2969
7058  296A
7059  296B
7060  296C
7061  296D
7062  296E
7063  296F
7064  2970
7065  2971
7066  2972
7067  2973
7068  2974
7069  2975
7070  2976
7071  2977
7072  2978
7073  2979
7074  297A
7075  297B
7076  297C
7077  297D
7078  297E
7079  297F
7080  2980
7081  2981
7082  2982
7083  2983
7084  2984
7085  2985
7086  2986
7087  2987
7088  2988
7089  2989
7090  298A
7091  298B
7092  298C
7093  298D
7094  298E
7095  298F
7096  2990
7097  2991
7098  2992
7099  2993
7100  2994
7101  2995
7102  2996
7103  2997
7104  2998
7105  2999
7106  299A
7107  299B
7108  299C
7109  299D
7110  299E
7111  299F
7112  29A0
7113  29A1
7114  29A2
7115  29A3
7116  29A4
7117  29A5
7118  29A6
7119  29A7
7120  29A8
7121  29A9
7122  29AA
7123  29AB
7124  29AC
7125  29AD
7126  29AE
7127  29AF
7128  29B0
7129  29B1
7130  29B2
7131  29B3
7132  29B4
7133  29B5
7134  29B6
7135  29B7
7136  29B8
7137  29B9
7138  29BA
7139  29BB
7140  29BC
7141  29BD
7142  29BE
7143  29BF
7144  29C0
7145  29C1
7146  29C2
7147  29C3
7148  29C4
7149  29C5
7150  29C6
7151  29C7
7152  29C8
7153  29C9
7154  29CA
7155  29CB
7156  29CC
7157  29CD
7158  29CE
7159  29CF
7160  29D0
7161  29D1
7162  29D2
7163  29D3
7164  29D4
7165  29D5
7166  29D6
7167  29D7
7168  29D8
7169  29D9
7170  29DA
7171  29DB
7172  29DC
7173  29DD
7174  29DE
7175  29DF
7176  29E0
7177  29E1
7178  29E2
7179  29E3
7180  29E4
7181  29E5
7182  29E6
7183  29E7
7184  29E8
7185  29E9
7186  29EA
7187  29EB
7188  29EC
7189  29ED
7190  29EE
7191  29EF
7192  29F0
7193  29F1
7194  29F2
7195  29F3
7196  29F4
7197  29F5
7198  29F6
7199  29F7
7200  29F8
7201  29F9
7202  29FA
7203  29FB
7204  29FC
7205  29FD
7206  29FE
7207  29FF
7208  2A00
7209  2A01
7210  2A02
7211  2A03
7212  2A04
7213  2A05
7214  2A06
7215  2A07
7216  2A08
7217  2A09
7218  2A0A
7219  2A0B
7220  2A0C
7221  2A0D
7222  2A0E
7223  2A0F
7224  2A10
7225  2A11
7226  2A12
7227  2A13
7228  2A14
7229  2A15
7230  2A16
7231  2A17
7232  2A18
7233  2A19
7234  2A1A
7235  2A1B
7236  2A1C
7237  2A1D
7238  2A1E
7239  2A1F
7240  2A20
7241  2A21
7242  2A22
7243  2A23
7244  2A24
7245  2A25
7246  2A26
7247  2A27
7248  2A28
7249  2A29
7250  2A2A
7251  2A2B
7252  2A2C
7253  2A2D
7254  2A2E
7255  2A2F
7256  2A30
7257  2A31
7258  2A32
7259  2A33
7260  2A34
7261  2A35
7262  2A36
7263  2A37
7264  2A38
7265  2A39
7266  2A3A
7267  2A3B
7268  2A3C
7269  2A3D
7270  2A3E
7271  2A3F
7272  2A40
7273  2A41
7274  2A42
7275  2A43
7276  2A44
7277  2A45
7278  2A46
7279  2A47
7280  2A48
7281  2A49
7282  2A4A
7283  2A4B
7284  2A4C
7285  2A4D
7286  2A4E
7287  2A4F
7288  2A50
7289  2A51
7290  2A52
7291  2A53
7292  2A54
7293  2A55
7294  2A56
7295  2A57
7296  2A58
7297  2A59
7298  2A5A
7299  2A5B
7300  2A5C
7301  2A5D
7302  2A5E
7303  2A5F
7304  2A60
7305  2A61
7306  2A62
7307  2A63
7308  2A64
7309  2A65
7310  2A66
7311  2A67
7312  2A68
7313  2A69
7314  2A6A
7315  2A6B
7316  2A6C
7317  2A6D
7318  2A6E
7319  2A6F
7320  2A70
7321  2A71
7322  2A72
7323  2A73
7324  2A74
7325  2A75
7326  2A76
7327  2A77
7328  2A78
7329  2A79
7330  2A7A
7331  2A7B
7332  2A7C
7333  2A7D
7334  2A7E
7335  2A7F
7336  2A80
7337  2A81
7338  2A82
7339  2A83
7340  2A84
7341  2A85
7342  2A86
7343  2A87
7344  2A88
7345  2A89
7346  2A8A
7347  2A8B
7348  2A8C
7349  2A8D
7350  2A8E
7351  2A8F
7352  2A90
7353  2A91
7354  2A92
7355  2A93
7356  2A94
7357  2A95
7358  2A96
7359  2A97
7360  2A98
7361  2A99
7362  2A9A
7363  2A9B
7364  2A9C
7365  2A9D
7366  2A9E
7367  2A9F
7368  2AA0
7369  2AA1
7370  2AA2
7371  2AA3
7372  2AA4
7373  2AA5
7374  2AA6
7375  2AA7
7376  2AA8
7377  2AA9
7378  2AAA
7379  2AAB
7380  2AAC
7381  2AAD
7382  2AAE
7383  2AAF
7384  2AB0
7385  2AB1
7386  2AB2
7387  2AB3
7388  2AB4
7389  2AB5
7390  2AB6
7391  2AB7
7392  2AB8
7393  2AB9
7394  2ABA
7395  2ABB
7396  2ABC
7397  2ABD
7398  2ABE
7399  2ABF
7400  2AC0
7401  2AC1
7402  2AC2
7403  2AC3
7404  2AC4
7405  2AC5
7406  2AC6
7407  2AC7
7408  2AC8
7409  2AC9
7410  2ACA
7411  2ACB
7412  2ACC
7413  2ACD
7414  2ACE
7415  2ACF
7416  2AD0
7417  2AD1
7418  2AD2
7419  2AD3
7420  2AD4
7421  2AD5
7422  2AD6
7423  2AD7
7424  2AD8
7425  2AD9
7426  2ADA
7427  2ADB
7428  2ADC
7429  2ADD
7430  2ADE
7431  2ADF
7432  2AE0
7433  2AE1
7434  2AE2
7435  2AE3
7436  2AE4
7437  2AE5
7438  2AE6
7439  2AE7
7440  2AE8
7441  2AE9
7442  2AEA
7443  2AEB
7444  2AEC
7445  2AED
7446  2AEE
7447  2AEF
7448  2AF0
7449  2AF1
7450  2AF2
7451  2AF3
7452  2AF4
7453  2AF5
7454  2AF6
7455  2AF7
7456  2AF8
7457  2AF9
7458  2AFA
7459  2AFB
7460  2AFC
7461  2AFD
7462  2AFE
7463  2AFF
7464  2B00
7465  2B01
7466  2B02
7467  2B03
7468  2B04
7469  2B05
7470  2B06
7471  2B07
7472  2B08
7473  2B09
7474  2B0A
7475  2B0B
7476  2B0C
7477  2B0D
7478  2B0E
7479  2B0F
7480  2B10
7481  2B11
7482  2B12
7483  2B13
7484  2B14
7485  2B15
7486  2B16
7487  2B17
7488  2B18
7489  2B19
7490  2B1A
7491  2B1B
7492  2B1C
7493  2B1D
7494  2B1E
7495  2B1F
7496  2B20
7497  2B21
7498  2B22
7499  2B23
7500  2B24
7501  2B25
7502  2B26
7503  2B27
7504  2B28
7505  2B29
7506  2B2A
7507  2B2B
7508  2B2C
7509  2B2D
7510  2B2E
7511  2B2F
7512  2B30
7513  2B31
7514  2B32
7515  2B33
7516  2B34
7517  2B35
7518  2B36
7519  2B37
7520  2B38
7521  2B39
7522  2B3A
7523  2B3B
7524  2B3C
7525  2B3D
7526  2B3E
7527  2B3F
7528  2B40
7529  2B41
7530  2B42
7531  2B43
7532  2B44
7533  2B45
7534  2B46
7535  2B47
7536  2B48
7537  2B49
7538  2B4A
7539  2B4B
7540  2B4C
7541  2B4D
7542  2B4E
7543  2B4F
7544  2B50
7545  2B51
7546  2B52
7547  2B53
7548  2B54
7549  2B55
7550  2B56
7551  2B57
7552  2B58
7553  2B59
7554  2B5A
7555  2B5B
7556  2B5C
7557  2B5D
7558  2B5E
7559  2B5F
7560  2B60
7561  2B61
7562  2B62
7563  2B63
7564  2B64
7565  2B65
7566  2B66
7567  2B67
7568  2B68
7569  2B69
7570  2B6A
7571  2B6B
7572  2B6C
7573  2B6D
7574  2B6E
7575  2B6F
7576  2B70
7577  2B71
7578  2B72
7579  2B73
7580  2B74
7581  2B75
7582  2B76
7583  2B77
7584  2B78
7585  2B79
7586  2B7A
7587  2B7B
7588  2B7C
7589  2B7D
7590  2B7E
7591  2B7F
7592  2B80
7593  2B81
7594  2B82
7595  2B83
7596  2B84
7597  2B85
7598  2B86
7599  2B87
7600  2B88
7601  2B89
7602  2B8A
7603  2B8B
7604  2B8C
7605  2B8D
7606  2B8E
7607  2B8F
7608  2B90
7609  2B91
7610  2B92
7611  2B93
7612  2B94
7613  2B95
7614  2B96
7615  2B97
7616  2B98
7617  2B99
7618  2B9A
7619  2B9B
7620  2B9C
7621  2B9D
7622  2B9E
7623  2B9F
7624  2BA0
7625  2BA1
7626  2BA2
7627  2BA3
7628  2BA4
7629  2BA5
7630  2BA6
7631  2BA7
7632  2BA8
7633  2BA9
7634  2BAA
7635  2BAB
7636  2BAC
7637  2BAD
7638  2BAE
7639  2BAF
7640  2BB0
7641  2BB1
7642  2BB2
7643  2BB3
7644  2BB4
7645  2BB5
7646  2BB6
7647  2BB7
7648  2BB8
7649  2BB9
7650  2BBA
7651  2BBB
7652  2BBC
7653  2BBD
7654  2BBE
7655  2BBF
7656  2BC0
7657  2BC1
7658  2BC2
7659  2BC3
7660  2BC4
7661  2BC5
7662  2BC6
7663  2BC7
7664  2BC8
7665  2BC9
7666  2BCA
7667  2BCB
7668  2BCC
7669  2BCD
7670  2BCE
7671  2BCF
7672  2BD0
7673  2BD1
7674  2BD2
7675  2BD3
7676  2BD4
7677  2BD5
7678  2BD6
7679  2BD7
7680  2BD8
7681  2BD9
7682  2BDA
7683  2BDB
7684  2BDC
7685  2BDD
7686  2BDE
7687  2BDF
7688  2BE0
7689  2BE1
7690  2BE2
7691  2BE3
7692  2BE4
7693  2BE5
7694  2BE6
7695  2BE7
7696  2BE8
7697  2BE9
7698  2BEA
7699  2BEB
7700  2BEC
7701  2BED
7702  2BEE
7703  2BEF
7704  2BF0
7705  2BF1
7706  2BF2
7707  2BF3
7708  2BF4
7709  2BF5
7710  2BF6
7711  2BF7
7712  2BF8
7713  2BF9
7714  2BFA
7715  2BFB
7716  2BFC
7717  2BFD
7718  2BFE
7719  2BFF
7720  2C00
7721  2C01
7722  2C02
7723  2C03
7724  2C04
7725  2C05
7726  2C06
7727  2C07
7728  2C08
7729  2C09
7730  2C0A
7731  2C0B
7732  2C0C
7733  2C0D
7734  2C0E
7735  2C0F
7736  2C10
7737  2C11
7738  2C12
7739  2C13
7740  2C14
7741  2C15
7742  2C16
7743  2C17
7744  2C18
7745  2C19
7746  2C1A
7747  2C1B
7748  2C1C
7749  2C1D
7750  2C1E
7751  2C1F
7752  2C20
7753  2C21
7754  2C22
7755  2C23
7756  2C24
7757  2C25
7758  2C26
7759  2C27
7760  2C28
7761  2C29
7762  2C2A
7763  2C2B
7764  2C2C
7765  2C2D
7766  2C2E
7767  2C2F
7768  2C30
7769  2C31
7770  2C32
7771  2C33
7772  2C34
7773  2C35
7774  2C36
7775  2C37
7776  2C38
7777  2C39
7778  2C3A
7779  2C3B
7780  2C3C
7781  2C3D
7782  2C3E
7783  2C3F
7784  2C40
7785  2C41
7786  2C42
7787  2C43
7788  2C44
7789  2C45
7790  2C46
7791  2C47
7792  2C48
7793  2C49
7794  2C4A
7795  2C4B
7796  2C4C
7797  2C4D
7798  2C4E
7799  2C4F
7800  2C50
7801  2C51
7802  2C52
7803  2C53
7804  2C54
7805  2C55
7806  2C56
7807  2C57
7808  2C58
7809  2C59
7810  2C5A
7811  2C5B
7812  2C5C
7813  2C5D
7814  2C5E
7815  2C5F
7816  2C60
7817  2C61
7818  2C62
7819  2C63
7820  2C64
7821  2C65
7822  2C66
7823  2C67
7824  2C68
7825  2C69
7826  2C6A
7827  2C6B
7828  2C6C
7829  2C6D
7830  2C6E
7831  2C6F
7832  2C70
7833  2C71
7834  2C72
7835  2C73
7836  2C74
7837  2C75
7838  2C76
7839  2C77
7840  2C78
7841  2C79
7842  2C7A
7843  2C7B
7844  2C7C
7845  2C7D
7846  2C7E
7847  2C7F
7848  2C80
7849  2C81
7850  2C82
7851  2C83
7852  2C84
7853  2C85
7854  2C86
7855  2C87
7856  2C88
7857  2C89
7858  2C8A
7859  2C8B
7860  2C8C
7861  2C8D
7862  2C8E
7863  2C8F
7864  2C90
7865  2C91
7866  2C92
7867  2C93
7868  2C94
7869  2C95
7870  2C96
7871  2C97
7872  2C98
7873  2C99
7874  2C9A
7875  2C9B
7876  2C9C
7877  2C9D
7878  2C9E
7879  2C9F
7880  2CA0
7881  2CA1
7882  2CA2
7883  2CA3
7884  2CA4
7885  2CA5
7886  2CA6
7887  2CA7
7888  2CA8
7889  2CA9
7890  2CAA
7891  2CAB
7892  2CAC
7893  2CAD
7894  2CAE
7895  2CAF
7896  2CB0
7897  2CB1
7898  2CB2
7899  2CB3
7900  2CB4
7901  2CB5
7902  2CB6
7903  2CB7
7904  2CB8
7905  2CB9
7906  2CBA
7907  2CBB
7908  2CBC
7909  2CBD
7910  2CBE
7911  2CBF
7912  2CC0
7913  2CC1
7914  2CC2
7915  2CC3
7916  2CC4
7917  2CC5
7918  2CC6
7919  2CC7
7920  2CC8
7921  2CC9
7922  2CCA
7923  2CCB
7924  2CCC
7925  2CCD
7926  2CCE
7927  2CCF
7928  2CD0
7929  2CD1
7930  2CD2
7931  2CD3
7932  2CD4
7933  2CD5
7934  2CD6
7935  2CD7
7936  2CD8
7937  2CD9
7938  2CDA
7939  2CDB
7940  2CDC
7941  2CDD
7942  2CDE
7943  2CDF
7944  2CE0
7945  2CE1
7946  2CE2
7947  2CE3
7948  2CE4
7949  2CE5
7950  2CE6
7951  2CE7
7952  2CE8
7953  2CE9
7954  2CEA
7955  2CEB
7956  2CEC
7957  2CED
7958  2CEE
7959  2CEF
7960  2CF0
7961  2CF1
7962  2CF2
7963  2CF3
7964  2CF4
7965  2CF5
7966  2CF6
7967  2CF7
7968  2CF8
7969  2CF9
7970  2CFA
7971  2CFB
7972  2CFC
7973  2CFD
7974  2CFE
7975  2CFF
7976  2D00
7977  2D01
7978  2D02
7979  2D03
7980  2D04
7981  2D05
7982  2D06
7983  2D07
7984  2D08
7985  2D09
7986  2D0A
7987  2D0B
7988  2D0C
7989  2D0D
7990  2D0E
7991  2D0F
7992  2D10
7993  2D11
7994  2D12
7995  2D13
7996  2D14
7997  2D15
7998  2D16
7999  2D17
8000  2D18
8001  2D19
8002  2D1A
8003  2D1B
8004  2D1C
8005  2D1D
8006  2D1E
8007  2D1F
8008  2D20
8009  2D21
8010  2D22
8011  2D23
8012  2D24
8013  2D25
8014  2D26
8015  2D27
8016  2D28
8017  2D29
8018  2D2A
8019  2D2B
8020  2D2C
8021  2D2D
8022  2D2E
8023  2D2F
8024  2D30
8025  2D31
8026  2D32
8027  2D33
8028  2D34
8029  2D35
8030  2D36
8031  2D37
8032  2D38
8033  2D39
8034  2D3A
8035  2D3B
8036  2D3C
8037  2D3D
8038  2D3E
8039  2D3F
8040  2D40
8041  2D41
8042  2D42
8043  2D43
8044  2D44
8045  2D45
8046  2D46
8047  2D47
8048  2D48
8049  2D49
8050  2D4A
8051  2D4B
8052  2D4C
8053  2D4D
8054  2D4E
8055  2D4F
8056  2D50
8057  2D51
8058  2D52
8059  2D53
8060  2D54
8061  2D55
8062  2D56
8063  2D57
8064  2D58
8065  2D59
8066  2D5A
8067  2D5B
8068  2D5C
8069  2D5D
8070  2D5E
8071  2D5F
8072  2D60
8073  2D61
8074  2D62
8075  2D63
8076  2D64
8077  2D65
8078  2D66
8079  2D67
8080  2D68
8081  2D69
8082  2D6A
8083  2D6B
8084  2D6C
8085  2D6D
8086  2D6E
8087  2D6F
8088  2D70
8089  2D71
8090  2D72
8091  2D73
8092  2D74
8093  2D75
8094  2D76
8095  2D77
8096  2D78
8097  2D79
8098  2D7A
8099  2D7B
8100  2D7C
8101  2D7D
8102  2D7E
8103  2D7F
8104  2D80
8105  2D81
8106  2D82
8107  2D83
8108  2D84
8109  2D85
8110  2D86
8111  2D87
8112  2D88
8113  2D89
8114  2D8A
8115  2D8B
8116  2D8C
8117  2D8D
8118  2D8E
8119  2D8F
8120  2D90
8121  2D91
8122  2D92
8123  2D93
8124  2D94
8125  2D95
8126  2D96
8127  2D97
8128  2D98
8129  2D99
8130  2D9A
8131  2D9B
8132  2D9C
8133  2D9D
8134  2D9E
8135  2D9F
8136  2DA0
8137  2DA1
8138  2DA2
8139  2DA3
8140  2DA4
8141  2DA5
8142  2DA6
8143  2DA7
8144  2DA8
8145  2DA9
8146  2DAA
8147  2DAB
8148  2DAC
8149  2DAD
8150  2DAE
8151  2DAF
8152  2DB0
8153  2DB1
8154  2DB2
8155  2DB3
8156  2DB4
8157  2DB5
8158  2DB6
8159  2DB7
8160  2DB8
8161  2DB9
8162  2DBA
8163  2DBB
8164  2DBC
8165  2DBD
8166  2DBE
8167  2DBF
8168  2DC0
8169  2DC1
8170  2DC2
8171  2DC3
8172  2DC4
8173  2DC5
8174  2DC6
8175  2DC7
8176  2DC8
8177  2DC9
8178  2DCA
8179  2DCB
8180  2DCC
8181  2DCD
8182  2DCE
8183  2DCF
8184  2DD0
8185  2DD1
8186  2DD2
8187  2DD3
8188  2DD4
8189  2DD5
8190  2DD6
8191  2DD7
8192  2DD8
8193  2DD9
8194  2DDA
8195  2DDB
8196  2DDC
8197  2DDD
8198  2DDE
8199  2DDF
8200  2DE0
8201  2DE1
8202  2DE2
8203  2DE3
8204  2DE4
8205  2DE5
8206  2DE6
8207  2DE7
8208  2DE8
8209  2DE9
8210  2DEA
8211  2DEB
8212  2DEC
8213  2DED
8214  2DEE
8215  2DEF
8216  2DF0
8217  2DF1
8218  2DF2
8219  2DF3
8220  2DF4
8221  2DF5
8222  2DF6
8223  2DF7
8224  2DF8
8225  2DF9
8226  2DFA
8227  2DFB
8228  2DFC
8229  2DFD
8230  2DFE
8231  2DFF
8232  2E00
8233  2E01
8234  2E02
8235  2E03
8236  2E04
8237  2E05
8238  2E06
8239  2E07
8240  2E08
8241  2E09
8242  2E0A
8243  2E0B
8244  2E0C
8245  2E0D
8246  2E0E
8247  2E0F
8248  2E10
8249  2E11
8250  2E12
8251  2E13
8252  2E14
8253  2E15
8254  2E16
8255  2E17
8256  2E18
8257  2E19
8258  2E1A
8259  2E1B
8260  2E1C
8261  2E1D
8262  2E1E
8263  2E1F
8264  2E20
8265  2E21
8266  2E22
8267  2E23
8268  2E24
8269  2E25
8270  2E26
8271  2E27
8272  2E28
8273  2E29
8274  2E2A
8275  2E2B
8276  2E2C
8277  2E2D
8278  2E2E
8279  2E2F
8280  2E30
8281  2E31
8282  2E32
8283  2E33
8284  2E34
8285  2E35
8286  2E36
8287  2E37
8288  2E38
8289  2E39
8290  2E3A
8291  2E3B
8292  2E3C
8293  2E3D
8294  2E3E
8295  2E3F
8296  2E40
8297  2E41
8298  2E42
8299  2E43
8300  2E44
8301  2E45
8302  2E46
8303  2E47
8304  2E48
8305  2E49
8306  2E4A
8307  2E4B
8308  2E4C
8309  2E4D
8310  2E4E
8311  2E4F
8312  2E50
8313  2E51
8314  2E52
8315  2E53
8316  2E54
8317  2E55
8318  2E56
8319  2E57
8320  2E58
8321  2E59
8322  2E5A
8323  2E5B
8324  2E5C
8325  2E5D
8326  2E5E
8327  2E5F
8328  2E60
8329  2E61
8330  2E62
8331  2E63
8332  2E64
8333  2E65
8334  2E66
8335  2E67
8336  2E68
8337  2E69
8338  2E6A
8339  2E6B
8340  2E6C
8341  2E6D
8342  2E6E
8343  2E6F
8344  2E70
8345  2E71
8346  2E72
8347  2E73
8348  2E74
8349  2E75
8350  2E76
8351  2E77
8352  2E78
8353  2E79
8354  2E7A
8355  2E7B
8356  2E7C
8357  2E7D
8358  2E7E
8359  2E7F
8360  2E80
8361  2E81
8362  2E82
8363  2E83
8364  2E84
8365  2E85
8366  2E86
8367  2E87
8368  2E88
8369  2E89
8370  2E8A
8371  2E8B
8372  2E8C
8373  2E8D
8374  2E8E
8375  2E8F
8376  2E90
8377  2E91
8378  2E92
8379  2E93
8380  2E94
8381  2E95
8382  2E96
8383  2E97
8384  2E98
8385  2E99
8386  2E9A
8387  2E9B
8388  2E9C
8389  2E9D
8390  2E9E
8391  2E9F
8392  2EA0
8393  2EA1
8394  2EA2
8395  2EA3
8396  2EA4
8397  2EA5
8398  2EA6
8399  2EA7
8400  2EA8
8401  2EA9
8402  2EAA
8403  2EAB
8404  2EAC
8405  2EAD
8406  2EAE
8407  2EAF
8408  2EB0
8409  2EB1
8410  2EB2
8411  2EB3
8412  2EB4
8413  2EB5
8414  2EB6
8415  2EB7
8416  2EB8
8417  2EB9
8418  2EBA
8419  2EBB
8420  2EBC
8421  2EBD
8422  2EBE
8423  2EBF
8424  2EC0
8425  2EC1
8426  2EC2
8427  2EC3
8428  2EC4
8429  2EC5
8430  2EC6
8431  2EC7
8432  2EC8
8433  2EC9
8434  2ECA
8435  2ECB
8436  2ECC
8437  2ECD
8438  2ECE
8439  2ECF
8440  2ED0
8441  2ED1
8442  2ED2
8443  2ED3
8444  2ED4
8445  2ED5
8446  2ED6
8447  2ED7
8448  2ED8
8449  2ED9
8450  2EDA
8451  2EDB
8452  2EDC
8453  2EDD
8454  2EDE
8455  2EDF
8456  2EE0
8457  2EE1
8458  2EE2
8459  2EE3
8460  2EE4
8461  2EE5
8462  2EE6
8463  2EE7
8464  2EE8
8465  2EE9
8466  2EEA
8467  2EEB
8468  2EEC
8469  2EED
8470  2EEE
8471  2EEF
8472  2EF0
8473  2EF1
8474  2EF2
8475  2EF3
8476  2EF4
8477  2EF5
8478  2EF6
8479  2EF7
8480  2EF8
8481  2EF9
8482  2EFA
8483  2EFB
8484  2EFC
8485  2EFD
8486  2EFE
8487  2EFF
8488  2F00
8489  2F01
8490  2F02
8491  2F03
8492  2F04
8493  2F05
8494  2F06
8495  2F07
8496  2F08
8497  2F09
8498  2F0A
8499  2F0B
8500  2F0C
8501  2F0D
8502  2F0E
8503  2F0F
8504  2F10
8505  2F11
8506  2F12
8507  2F13
8508  2F14
8509  2F15
8510  2F16
8511  2F17
8512  2F18
8513  2F19
8514  2F1A
8515  2F1B
8516  2F1C
8517  2F1D
8518  2F1E
8519  2F1F
8520  2F20
8521  2F21
8522  2F22
8523  2F23
8524  2F24
8525  2F25
8526  2F26
8527  2F27
8528  2F28
8529  2F29
8530  2F2A
8531  2F2B
8532  2F2C
8533  2F2D
8534  2F2E
8535  2F2F
8536  2F30
8537  2F31
8538  2F32
8539  2F33
8540  2F34
8541  2F35
8542  2F36
8543  2F37
8544  2F38
8545  2F39
8546  2F3A
8547  2F3B
8548  2F3C
8549  2F3D
8550  2F3E
8551  2F3F
8552  2F40
8553  2F41
8554  2F42
8555  2F43
8556  2F44
8557  2F45
8558  2F46
8559  2F47
8560  2F48
8561  2F49
8562  2F4A
8563  2F4B
8564  2F4C
8565  2F4D
8566  2F4E
8567  2F4F
8568  2F50
8569  2F51
8570  2F52
8571  2F53
8572  2F54
8573  2F55
8574  2F56
8575  2F57
8576  2F58
8577  2F59
8578  2F5A
8579  2F5B
8580  2F5C
8581  2F5D
8582  2F5E
8583  2F5F
8584  2F60
8585  2F61
8586  2F62
8587  2F63
8588  2F64
8589  2F65
8590  2F66
8591  2F67
8592  2F68
8593  2F69
8594  2F6A
8595  2F6B
8596  2F6C
8597  2F6D
8598  2F6E
8599  2F6F
8600  2F70
8601  2F71
8602  2F72
8603  2F73
8604  2F74
8605  2F75
8606  2F76
8607  2F77
8608  2F78
8609  2F79
8610  2F7A
8611  2F7B
8612  2F7C
8613  2F7D
8614  2F7E
8615  2F7F
8616  2F80
8617  2F81
8618  2F82
8619  2F83
8620  2F84
8621  2F85
8622  2F86
8623  2F87
8624  2F88
8625  2F89
8626  2F8A
8627  2F8B
8628  2F8C
8629  2F8D
8630  2F8E
8631  2F8F
8632  2F90
8633  2F91
8634  2F92
8635  2F93
8636  2F94
8637  2F95
8638  2F96
8639  2F97
8640  2F98
8641  2F99
8642  2F9A
8643  2F9B
8644  2F9C
8645  2F9D
8646  2F9E
8647  2F9F
8648  2FA0
8649  2FA1
8650  2FA2
8651  2FA3
8652  2FA4
8653  2FA5
8654  2FA6
8655  2FA7
8656  2FA8
8657  2FA9
8658  2FAA
8659  2FAB
8660  2FAC
8661  2FAD
8662  2FAE
8663  2FAF
8664  2FB0
8665  2FB1
8666  2FB2
8667  2FB3
8668  2FB4
8669  2FB5
8670  2FB6
8671  2FB7
8672  2FB8
8673  2FB9
8674  2FBA
8675  2FBB
8676  2FBC
8677  2FBD
8678  2FBE
8679  2FBF
8680  2FC0
8681  2FC1
8682  2FC2
8683  2FC3
8684  2FC4
8685  2FC5
8686  2FC6
8687  2FC7
8688  2FC8
8689  2FC9
8690  2FCA
8691  2FCB
8692  2FCC
8693  2FCD
8694  2FCE
8695  2FCF
8696  2FD0
8697  2FD1
8698  2FD2
8699  2FD3
8700  2FD4
8701  2FD5
8702  2FD6
8703  2FD7
8704  2FD8
8705  2FD9
8706  2FDA
8707  2FDB
8708  2FDC
8709  2FDD
8710  2FDE
8711  2FDF
8712  2FE0
8713  2FE1
8714  2FE2
8715  2FE3
8716  2FE4
8717  2FE5
8718  2FE6
8719  2FE7
8720  2FE8
8721  2FE9
8722  2FEA
8723  2FEB
8724  2FEC
8725  2FED
8726  2FEE
8727  2FEF
8728  2FF0
8729  2FF1
8730  2FF2
8731  2FF3
8732  2FF4
8733  2FF5
8734  2FF6
8735  2FF7
8736  2FF8
8737  2FF9
8738  2FFA
8739  2FFB
8740  2FFC
8741  2FFD
8742  2FFE
8743  2FFF
8744  3000
8745  3001
8746  3002
8747  3003
8748  3004
8749  3005
8750  3006
8751  3007
8752  3008
8753  3009
8754  300A
8755  300B
8756  300C
8757  300D
8758  300E
8759  300F
8760  3010
8761  3011
8762  3012
8763  3013
8764  3014
8765  3015
8766  3016
8767  3017
8768  3018
8769  3019
8770  301A
8771  301B
8772  301C
8773  301D
8774  301E
8775  301F
8776  3020
8777  3021
8778  3022
8779  3023
8780  3024
8781  3025
8782  3026
8783  3027
8784  3028
8785  3029
8786  302A
8787  302B
8788  302C
8789  302D
8790  302E
8791  302F
8792  3030
8793  3031
8794  3032
8795  3033
8796  3034
8797  3035
8798  3036
8799  3037
8800  3038
8801  3039
8802  303A
8803  303B
8804  303C
8805  303D
8806  303E
8807  303F
8808  3040
8809  3041
8810  3042
8811  3043
8812  3044
8813  3045
8814  3046
8815  3047
8816  3048
8817  3049
8818  304A
8819  304B
8820  304C
8821  304D
8822  304E
8823  304F
8824  3050
8825  3051
8826  3052
8827  3053
8828  3054
8829  3055
8830  3056
8831  3057
8832  3058
8833  3059
8834  305A
8835  305B
8836  305C
8837  305D
8838  305E
8839  305F
8840  3060
8841  3061
8842  3062
8843  3063
8844  3064
8845  3065
8846  3066
8847  3067
8848  3068
8849  3069
8850  306A
8851  306B
8852  306C
8853  306D
8854  306E
8855  306F
8856  3070
8857  3071
8858  3072
8859  3073
8860  3074
8861  3075
8862  3076
8863  3077
8864  3078
8865  3079
8866  307A
8867  307B
8868  307C
8869  307D
8870  307E
8871  307F
8872  3080
8873  3081
8874  3082
8875  3083
8876  3084
8877  3085
8878  3086
8879  3087
8880  3088
8881  3089
8882  308A
8883  308B
8884  308C
8885  308D
8886  308E
8887  308F
8888  3090
8889  3091
8890  3092
8891  3093
8892  3094
8893  3095
8894  3096
8895  3097
8896  3098
8897  3099
8898  309A
8899  309B
8900  309C
8901  309D
8902  309E
8903  309F
8904  30A0
8905  30A1
8906  30A2
8907  30A3
8908  30A4
8909  30A5
8910  30A6
8911  30A7
8912  30A8
8913  30A9
8914  30AA
8915  30AB
8916  30AC
8917  30AD
8918  30AE
8919  30AF
8920  30B0
8921  30B1
8922  30B2
8923  30B3
8924  30B4
8925  30B5
8926  30B6
8927  30B7
8928  30B8
8929  30B9
8930  30BA
8931  30BB
8932  30BC
8933  30BD
8934  30BE
8935  30BF
8936  30C0
8937  30C1
8938  30C2
8939  30C3
8940  30C4
8941  30C5
8942  30C6
8943  30C7
8944  30C8
8945  30C9
8946  30CA
8947  30CB
8948  30CC
8949  30CD
8950  30CE
8951  30CF
8952  30D0
8953  30D1
8954  30D2
8955  30D3
8956  30D4
8957  30D5
8958  30D6
8959  30D7
8960  30D8
8961  30D9
8962  30DA
8963  30DB
8964  30DC
8965  30DD
8966  30DE
8967  30DF
8968  30E0
8969  30E1
8970  30E2
8971  30E3
8972  30E4
8973  30E5
8974  30E6
8975  30E7
8976  30E8
8977  30E9
8978  30EA
8979  30EB
8980  30EC
8981  30ED
8982  30EE
8983  30EF
8984  30F0
8985  30F1
8986  30F2
8987  30F3
8988  30F4
8989  30F5
8990  30F6
8991  30F7
8992  30F8
8993  30F9
8994  30FA
8995  30FB
8996  30FC
8997  30FD
8998  30FE
8999  30FF
9000  3100
9001  3101
9002  3102
9003  3103
9004  3104
9005  3105
9006  3106
9007  3107
9008  3108
9009  3109
9010  310A
9011  310B
9012  310C
9013  310D
9014  310E
9015  310F
9016  3110
9017  3111
9018  3112
9019  3113
9020  3114
9021  3115
9022  3116
9023  3117
9024  3118
9025  3119
9026  311A
9027  311B
9028  311C
9029  311D
9030  311E
9031  311F
9032  3120
9033  3121
9034  3122
9035  3123
9036  3124
9037  3125
9038  3126
9039  3127
9040  3128
9041  3129
9042  312A
9043  312B
9044  312C
9045  312D
9046  312E
9047  312F
9048  3130
9049  3131
9050  3132
9051  3133
9052  3134
9053  3135
9054  3136
9055  3137
9056  3138
9057  3139
9058  313A
9059  313B
9060  313C
9061  313D
9062  313E
9063  313F
9064  3140
9065  3141
9066  3142
9067  3143
9068  3144
9069  3145
9070  3146
9071  3147
9072  3148
9073  3149
9074  314A
9075  314B
9076  314C
9077  314D
9078  314E
9079  314F
9080  3150
9081  3151
9082  3152
9083  3153
9084  3154
9085  3155
9086  3156
9087  3157
9088  3158
9089  3159
9090  315A
9091  315B
9092  315C
9093  315D
9094  315E
9095  315F
9096  3160
9097  3161
9098  3162
9099  3163
9100  3164
9101  3165
9102  3166
9103  3167
9104  3168
9105  3169
9106  316A
9107  316B
9108  316C
9109  316D
9110  316E
9111  316F
9112  3170
9113  3171
9114  3172
9115  3173
9116  3174
9117  3175
9118  3176
9119  3177
9120  3178
9121  3179
9122  317A
9123  317B
9124  317C
9125  317D
9126  317E
9127  317F
9128  3180
9129  3181
9130  3182
9131  3183
9132  3184
9133  3185
9134  3186
9135  3187
9136  3188
9137  3189
9138  318A
9139  318B
9140  318C
9141  318D
9142  318E
9143  318F
9144  3190
9145  3191
9146  3192
9147  3193
9148  3194
9149  3195
9150  3196
9151  3197
9152  3198
9153  3199
9154  319A
9155  319B
9156  319C
9157  319D
9158  319E
9159  319F
9160  31A0
9161  31A1
9162  31A2
9163  31A3
9164  31A4
9165  31A5
9166  31A6
9167  31A7
9168  31A8
9169  31A9
9170  31AA
9171  31AB
9172  31AC
9173  31AD
9174  31AE
9175  31AF
9176  31B0
9177  31B1
9178  31B2
9179  31B3
9180  31B4
9181  31B5
9182  31B6
9183  31B7
9184  31B8
9185  31B9
9186  31BA
9187  31BB
9188  31BC
9189  31BD
9190  31BE
9191  31BF
9192  31C0
9193  31C1
9194  31C2
9195  31C3
9196  31C4
9197  31C5
9198  31C6
9199  31C7
9200  31C8
9201  31C9
9202  31CA
9203  31CB
9204  31CC
9205  31CD
9206  31CE
9207  31CF
9208  31D0
9209  31D1
9210  31D2
9211  31D3
9212  31D4
9213  31D5
9214  31D6
9215  31D7
9216  31D8
9217  31D9
9218  31DA
9219  31DB
9220  31DC
9221  31DD
9222  31DE
9223  31DF
9224  31E0
9225  31E1
9226  31E2
9227  31E3
9228  31E4
9229  31E5
9230  31E6
9231  31E7
9232  31E8
9233  31E9
9234  31EA
9235  31EB
9236  31EC
9237  31ED
9238  31EE
9239  31EF
9240  31F0
9241  31F1
9242  31F2
9243  31F3
9244  31F4
9245  31F5
9246  31F6
9247  31F7
9248  31F8
9249  31F9
9250  31FA
9251  31FB
9252  31FC
9253  31FD
9254  31FE
9255  31FF
9256  3200
9257  3201
9258  3202
9259  3203
9260  3204
9261  3205
9262  3206
9263  3207
9264  3208
9265  3209
9266  320A
9267  320B
9268  320C
9269  320D
9270  320E
9271  320F
9272  3210
9273  3211
9274  3212
9275  3213
9276  3214
9277  3215
9278  3216
9279  3217
9280  3218
9281  3219
9282  321A
9283  321B
9284  321C
9285  321D
9286  321E
9287  321F
9288  3220
9289  3221
9290  3222
9291  3223
9292  3224
9293  3225
9294  3226
9295  3227
9296  3228
9297  3229
9298  322A
9299  322B
9300  322C
9301  322D
9302  322E
9303  322F
9304  3230
9305  3231
9306  3232
9307  3233
9308  3234
9309  3235
9310  3236
9311  3237
9312  3238
9313  3239
9314  323A
9315  323B
9316  323C
9317  323D
9318  323E
9319  323F
9320  3240
9321  3241
9322  3242
9323  3243
9324  3244
9325  3245
9326  3246
9327  3247
9328  3248
9329  3249
9330  324A
9331  324B
9332  324C
9333  324D
9334  324E
9335  324F
9336  3250
9337  3251
9338  3252
9339  3253
9340  3254
9341  3255
9342  3256
9343  3257
9344  3258
9345  3259
9346  325A
9347  325B
9348  325C
9349  325D
9350  325E
9351  325F
9352  3260
9353  3261
9354  3262
9355  3263
9356  3264
9357  3265
9358  3266
9359  3267
9360  3268
9361  3269
9362  326A
9363  326B
9364  326C
9365  326D
9366  326E
9367  326F
9368  3270
9369  3271
9370  3272
9371  3273
9372  3274
9373  3275
9374  3276
9375  3277
9376  3278
9377  3279
9378  327A
9379  327B
9380  327C
9381  327D
9382  327E
9383  327F
9384  3280
9385  3281
9386  3282
9387  3283
9388  3284
9389  3285
9390  3286
9391  3287
9392  3288
9393  3289
9394  328A
9395  328B
9396  328C
9397  328D
9398  328E
9399  328F
9400  3290
9401  3291
9402  3292
9403  3293
9404  3294
9405  3295
9406  3296
9407  3297
9408  3298
9409  3299
9410  329A
9411  329B
9412  329C
9413  329D
9414  329E
9415  329F
9416  32A0
9417  32A1
9418  32A2
9419  32A3
9420  32A4
9421  32A5
9422  32A6
9423  32A7
9424  32A8
9425  32A9
9426  32AA
9427  32AB
9428  32AC
9429  32AD
9430  32AE
9431  32AF
9432  32B0
9433  32B1
9434  32B2
9435  32B3
9436  32B4
9437  32B5
9438  32B6
9439  32B7
9440  32B8
9441  32B9
9442  32BA
9443  32BB
9444  32BC
9445  32BD
9446  32BE
9447  32BF
9448  32C0
9449  32C1
9450  32C2
9451  32C3
9452  32C4
9453  32C5
9454  32C6
9455  32C7
9456  32C8
9457  32C9
9458  32CA
9459  32CB
9460  32CC
9461  32CD
9462  32CE
9463  32CF
9464  32D0
9465  32D1
9466  32D2
9467  32D3
9468  32D4
9469  32D5
9470  32D6
9471  32D7
9472  32D8
9473  32D9
9474  32DA
9475  32DB
9476  32DC
9477  32DD
9478  32DE
9479  32DF
9480  32E0
9481  32E1
9482  32E2
9483  32E3
9484  32E4
9485  32E5
9486  32E6
9487  32E7
9488  32E8
9489  32E9
9490  32EA
9491  32EB
9492  32EC
9493  32ED
9494  32EE
9495  32EF
9496  32F0
9497  32F1
9498  32F2
9499  32F3
9500  32F4
9501  32F5
9502  32F6
9503  32F7
9504  32F8
9505  32F9
9506  32FA
9507  32FB
9508  32FC
9509  32FD
9510  32FE
9511  32FF
9512  3300
9513  3301
9514  3302
9515  3303
9516  3304
9517  3305
9518  3306
9519  3307
9520  3308
9521  3309
9522  330A
9523  330B
9524  330C
9525  330D
9526  330E
9527  330F
9528  3310
9529  3311
9530  3312
9531  3313
9532  3314
9533  3315
9534  3316
9535  3317
9536  3318
9537  3319
9538  331A
9539  331B
9540  331C
9541  331D
9542  331E
9543  331F
9544  3320
9545  3321
9546  3322
9547  3323
9548  3324
9549  3325
9550  3326
9551  3327
9552  3328
9553  3329
9554  332A
9555  332B
9556  332C
9557  332D
9558  332E
9559  332F
9560  3330
9561  3331
9562  3332
9563  3333
9564  3334
9565  3335
9566  3336
9567  3337
9568  3338
9569  3339
9570  333A
9571  333B
9572  333C
9573  333D
9574  333E
9575  333F
9576  3340
9577  3341
9578  3342
9579  3343
9580  3344
9581  3345
9582  3346
9583  3347
9584  3348
9585  3349
9586  334A
9587  334B
9588  334C
9589  334D
9590  334E
9591  334F
9592  3350
9593  3351
9594  3352
9595  3353
9596  3354
9597  3355
9598  3356
9599  3357
9600  3358
9601  3359
9602  335A
9603  335B
9604  335C
9605  335D
9606  335E
9607  335F
9608  3360
9609  3361
9610  3362
9611  3363
9612  3364
9613  3365
9614  3366
9615  3367
9616  3368
9617  3369
9618  336A
9619  336B
9620  336C
9621  336D
9622  336E
9623  336F
9624  3370
9625  3371
9626  3372
9627  3373
9628  3374
9629  3375
9630  3376
9631  3377
9632  3378
9633  3379
9634  337A
9635  337B
9636  337C
9637  337D
9638  337E
9639  337F
9640  3380
9641  3381
9642  3382
9643  3383
9644  3384
9645  3385
9646  3386
9647  3387
9648  3388
9649  3389
9650  338A
9651  338B
9652  338C
9653  338D
9654  338E
9655  338F
9656  3390
9657  3391
9658  3392
9659  3393
9660  3394
9661  3395
9662  3396
9663  3397
9664  3398
9665  3399
9666  339A
9667  339B
9668  339C
9669  339D
9670  339E
9671  339F
9672  33A0
9673  33A1
9674  33A2
9675  33A3
9676  33A4
9677  33A5
9678  33A6
9679  33A7
9680  33A8
9681  33A9
9682  33AA
9683  33AB
9684  33AC
9685  33AD
9686  33AE
9687  33AF
9688  33B0
9689  33B1
9690  33B2
9691  33B3
9692  33B4
9693  33B5
9694  33B6
9695  33B7
9696  33B8
9697  33B9
9698  33BA
9699  33BB
9700  33BC
9701  33BD
9702  33BE
9703  33BF
9704  33C0
9705  33C1
9706  33C2
9707  33C3
9708  33C4
9709  33C5
9710  33C6
9711  33C7
9712  33C8
9713  33C9
9714  33CA
9715  33CB
9716  33CC
9717  33CD
9718  33CE
9719  33CF
9720  33D0
9721  33D1
9722  33D2
9723  33D3
9724  33D4
9725  33D5
9726  33D6
9727  33D7
9728  33D8
9729  33D9
9730  33DA
9731  33DB
9732  33DC
9733  33DD
9734  33DE
9735  33DF
9736  33E0
9737  33E1
9738  33E2
9739  33E3
9740  33E4
9741  33E5
9742  33E6
9743  33E7
9744  33E8
9745  33E9
9746  33EA
9747  33EB
9748  33EC
9749  33ED
9750  33EE
9751  33EF
9752  33F0
9753  33F1
9754  33F2
9755  33F3
9756  33F4
9757  33F5
9758  33F6
9759  33F7
9760  33F8
9761  33F9
9762  33FA
9763  33FB
9764  33FC
9765  33FD
9766  33FE
9767  33FF
9768  3400
9769  3401
9770  3402
9771  3403
9772  3404
9773  3405
9774  3406
9775  3407
9776  3408
9777  3409
9778  340A
9779  340B
9780  340C
9781  340D
9782  340E
9783  340F
9784  3410
9785  3411
9786  3412
9787  3413
9788  3414
9789  3415
9790  3416
9791  3417
9792  3418
9793  3419
9794  341A
9795  341B
9796  341C
9797  341D
9798  341E
9799  341F
9800  3420
9801  3421
9802  3422
9803  3423
9804  3424
9805  3425
9806  3426
9807  3427
9808  3428
9809  3429
9810  342A
9811  342B
9812  342C
9813  342D
9814  342E
9815  342F
9816  3430
9817  3431
9818  3432
9819  3433
9820  3434
9821  3435
9822  3436
9823  3437
9824  3438
9825  3439
9826  343A
9827  343B
9828  343C
9829  343D
9830  343E
9831  343F
9832  3440
9833  3441
9834  3442
9835  3443
9836  3444
9837  3445
9838  3446
9839  3447
9840  3448
9841  3449
9842  344A
9843  344B
9844  344C
9845  344D
9846  344E
9847  344F
9848  3450
9849  3451
9850  3452
9851  3453
9852  3454
9853  3455
9854  3456
9855  3457
9856  3458
9857  3459
9858  345A
9859  345B
9860  345C
9861  345D
9862  345E
9863  345F
9864  3460
9865  3461
9866  3462
9867  3463
9868  3464
9869  3465
9870  3466
9871  3467
9872  3468
9873  3469
9874  346A
9875  346B
9876  346C
9877  346D
9878  346E
9879  346F
9880  3470
9881  3471
9882  3472
9883  3473
9884  3474
9885  3475
9886  3476
9887  3477
9888  3478
9889  3479
9890  347A
9891  347B
9892  347C
9893  347D
9894  347E
9895  347F
9896  3480
9897  3481
9898  3482
9899  3483
9900  3484
9901  3485
9902  3486
9903  3487
9904  3488
9905  3489
9906  348A
9907  348B
9908  348C
9909  348D
9910  348E
9911  348F
9912  3490
9913  3491
9914  3492
9915  3493
9916  3494
9917  3495
9918  3496
9919  3497
9920  3498
9921  3499
9922  349A
9923  349B
9924  349C
9925  349D
9926  349E
9927  349F
9928  34A0
9929  34A1
9930  34A2
9931  34A3
9932  34A4
9933  34A5
9934  34A6
9935  34A7
9936  34A8
9937  34A9
9938  34AA
9939  34AB
9940  34AC
9941  34AD
9942  34AE
9943  34AF
9944  34B0
9945  34B1
9946  34B2
9947  34B3
9948  34B4
9949  34B5
9950  34B6
9951  34B7
9952  34B8
9953  34B9
9954  34BA
9955  34BB
9956  34BC
9957  34BD
9958  34BE
9959  34BF
9960  34C0
9961  34C1
9962  34C2
9963  34C3
9964  34C4
9965  34C5
9966  34C6
9967  34C7
9968  34C8
9969  34C9
9970  34CA
9971  34CB
9972  34CC
9973  34CD
9974  34CE
9975  34CF
9976  34D0
9977  34D1
9978  34D2
9979  34D3
9980  34D4
9981  34D5
9982  34D6
9983  34D7
9984  34D8
9985  34D9
9986  34DA
9987  34DB
9988  34DC
9989  34DD
9990  34DE
9991  34DF
9992  34E0
9993  34E1
9994  34E2
9995  34E3
9996  34E4
9997  34E5
9998  34E6
9999  34E7
10000  34E8
10001  34E9
10002  34EA
10003  34EB
10004  34EC
10005  34ED
10006  34EE
10007  34EF
10008  34F0
10009  34F1
10010  34F2
10011  34F3
10012  34F4
10013  34F5
10014  34F6
10015  34F7
10016  34F8
10017  34F9
10018  34FA
10019  34FB
10020  34FC
10021  34FD
10022  34FE
10023  34FF
10024  3500
10025  3501
10026  3502
10027  3503
10028  3504
10029  3505
10030  3506
10031  3507
10032  3508
10033  3509
10034  350A
10035  350B
10036  350C
10037  350D
10038  350E
10039  350F
10040  3510
10041  3511
10042  3512
10043  3513
10044  3514
10045  3515
10046  3516
10047  3517
10048  3518
10049  3519
10050  351A
10051  351B
10052  351C
10053  351D
10054  351E
10055  351F
10056  3520
10057  3521
10058  3522
10059  3523
10060  3524
10061  3525
10062  3526
10063  3527
10064  3528
10065  3529
10066  352A
10067  352B
10068  352C
10069  352D
10070  352E
10071  352F
10072  3530
10073  3531
10074  3532
10075  3533
10076  3534
10077  3535
10078  3536
10079  3537
10080  3538
10081  3539
10082  353A
10083  353B
10084  353C
10085  353D
10086  353E
10087  353F
10088  3540
10089  3541
10090  3542
10091  3543
10092  3544
10093  3545
10094  3546
10095  3547
10096  3548
10097  3549
10098  354A
10099  354B
10100  354C
10101  354D
10102  354E
10103  354F
10104  3550
10105  3551
10106  3552
10107  3553
10108  3554
10109  3555
10110  3556
10111  3557
10112  3558
10113  3559
10114  355A
10115  355B
10116  355C
10117  355D
10118  355E
10119  355F
10120  3560
10121  3561
10122  3562
10123  3563
10124  3564
10125  3565
10126  3566
10127  3567
10128  3568
10129  3569
10130  356A
10131  356B
10132  356C
10133  356D
10134  356E
10135  356F
10136  3570
10137  3571
10138  3572
10139  3573
10140  3574
10141  3575
10142  3576
10143  3577
10144  3578
10145  3579
10146  357A
10147  357B
10148  357C
10149  357D
10150  357E
10151  357F
10152  3580
10153  3581
10154  3582
10155  3583
10156  3584
10157  3585
10158  3586
10159  3587
10160  3588
10161  3589
10162  358A
10163  358B
10164  358C
10165  358D
10166  358E
10167  358F
10168  3590
10169  3591
10170  3592
10171  3593
10172  3594
10173  3595
10174  3596
10175  3597
10176  3598
10177  3599
10178  359A
10179  359B
10180  359C
10181  359D
10182  359E
10183  359F
10184  35A0
10185  35A1
10186  35A2
10187  35A3
10188  35A4
10189  35A5
10190  35A6
10191  35A7
10192  35A8
10193  35A9
10194  35AA
10195  35AB
10196  35AC
10197  35AD
10198  35AE
10199  35AF
10200  35B0
10201  35B1
10202  35B2
10203  35B3
10204  35B4
10205  35B5
10206  35B6
10207  35B7
10208  35B8
10209  35B9
10210  35BA
10211  35BB
10212  35BC
10213  35BD
10214  35BE
10215  35BF
10216  35C0
10217  35C1
10218  35C2
10219  35C3
10220  35C4
10221  35C5
10222  35C6
10223  35C7
10224  35C8
10225  35C9
10226  35CA
10227  35CB
10228  35CC
10229  35CD
10230  35CE
10231  35CF
10232  35D0
10233  35D1
10234  35D2
10235  35D3
10236  35D4
10237  35D5
10238  35D6
10239  35D7
10240  35D8
10241  35D9
10242  35DA
10243  35DB
10244  35DC
10245  35DD
10246  35DE
10247  35DF
10248  35E0
10249  35E1
10250  35E2
10251  35E3
10252  35E4
10253  35E5
10254  35E6
10255  35E7
10256  35E8
10257  35E9
10258  35EA
10259  35EB
10260  35EC
10261  35ED
10262  35EE
10263  35EF
10264  35F0
10265  35F1
10266  35F2
10267  35F3
10268  35F4
10269  35F5
10270  35F6
10271  35F7
10272  35F8
10273  35F9
10274  35FA
10275  35FB
10276  35FC
10277  35FD
10278  35FE
10279  35FF
10280  3600
10281  3601
10282  3602
10283  3603
10284  3604
10285  3605
10286  3606
10287  3607
10288  3608
10289  3609
10290  360A
10291  360B
10292  360C
10293  360D
10294  360E
10295  360F
10296  3610
10297  3611
10298  3612
10299  3613
10300  3614
10301  3615
10302  3616
10303  3617
10304  3618
10305  3619
10306  361A
10307  361B
10308  361C
10309  361D
10310  361E
10311  361F
10312  3620
10313  3621
10314  3622
10315  3623
10316  3624
10317  3625
10318  3626
10319  3627
10320  3628
10321  3629
10322  362A
10323  362B
10324  362C
10325  362D
10326  362E
10327  362F
10328  3630
10329  3631
10330  3632
10331  3633
10332  3634
10333  3635
10334  3636
10335  3637
10336  3638
10337  3639
10338  363A
10339  363B
10340  363C
10341  363D
10342  363E
10343  363F
10344  3640
10345  3641
10346  3642
10347  3643
10348  3644
10349  3645
10350  3646
10351  3647
10352  3648
10353  3649
10354  364A
10355  364B
10356  364C
10357  364D
10358  364E
10359  364F
10360  3650
10361  3651
10362  3652
10363  3653
10364  3654
10365  3655
10366  3656
10367  3657
10368  3658
10369  3659
10370  365A
10371  365B
10372  365C
10373  365D
10374  365E
10375  365F
10376  3660
10377  3661
10378  3662
10379  3663
10380  3664
10381  3665
10382  3666
10383  3667
10384  3668
10385  3669
10386  366A
10387  366B
10388  366C
10389  366D
10390  366E
10391  366F
10392  3670
10393  3671
10394  3672
10395  3673
10396  3674
10397  3675
10398  3676
10399  3677
10400  3678
10401  3679
10402  367A
10403  367B
10404  367C
10405  367D
10406  367E
10407  367F
10408  3680
10409  3681
10410  3682
10411  3683
10412  3684
10413  3685
10414  3686
10415  3687
10416  3688
10417  3689
10418  368A
10419  368B
10420  368C
10421  368D
10422  368E
10423  368F
10424  3690
10425  3691
10426  3692
10427  3693
10428  3694
10429  3695
10430  3696
10431  3697
10432  3698
10433  3699
10434  369A
10435  369B
10436  369C
10437  369D
10438  369E
10439  369F
10440  36A0
10441  36A1
10442  36A2
10443  36A3
10444  36A4
10445  36A5
10446  36A6
10447  36A7
10448  36A8
10449  36A9
10450  36AA
10451  36AB
10452  36AC
10453  36AD
10454  36AE
10455  36AF
10456  36B0
10457  36B1
10458  36B2
10459  36B3
10460  36B4
10461  36B5
10462  36B6
10463  36B7
10464  36B8
10465  36B9
10466  36BA
10467  36BB
10468  36BC
10469  36BD
10470  36BE
10471  36BF
10472  36C0
10473  36C1
10474  36C2
10475  36C3
10476  36C4
10477  36C5
10478  36C6
10479  36C7
10480  36C8
10481  36C9
10482  36CA
10483  36CB
10484  36CC
10485  36CD
10486  36CE
10487  36CF
10488  36D0
10489  36D1
10490  36D2
10491  36D3
10492  36D4
10493  36D5
10494  36D6
10495  36D7
10496  36D8
10497  36D9
10498  36DA
10499  36DB
10500  36DC
10501  36DD
10502  36DE
10503  36DF
10504  36E0
10505  36E1
10506  36E2
10507  36E3
10508  36E4
10509  36E5
10510  36E6
10511  36E7
10512  36E8
10513  36E9
10514  36EA
10515  36EB
10516  36EC
10517  36ED
10518  36EE
10519  36EF
10520  36F0
10521  36F1
10522  36F2
10523  36F3
10524  36F4
10525  36F5
10526  36F6
10527  36F7
10528  36F8
10529  36F9
10530  36FA
10531  36FB
10532  36FC
10533  36FD
10534  36FE
10535  36FF
10536  3700
10537  3701
10538  3702
10539  3703
10540  3704
10541  3705
10542  3706
10543  3707
10544  3708
10545  3709
10546  370A
10547  370B
10548  370C
10549  370D
10550  370E
10551  370F
10552  3710
10553  3711
10554  3712
10555  3713
10556  3714
10557  3715
10558  3716
10559  3717
10560  3718
10561  3719
10562  371A
10563  371B
10564  371C
10565  371D
10566  371E
10567  371F
10568  3720
10569  3721
10570  3722
10571  3723
10572  3724
10573  3725
10574  3726
10575  3727
10576  3728
10577  3729
10578  372A
10579  372B
10580  372C
10581  372D
10582  372E
10583  372F
10584  3730
10585  3731
10586  3732
10587  3733
10588  3734
10589  3735
10590  3736
10591  3737
10592  3738
10593  3739
10594  373A
10595  373B
10596  373C
10597  373D
10598  373E
10599  373F
10600  3740
10601  3741
10602  3742
10603  3743
10604  3744
10605  3745
10606  3746
10607  3747
10608  3748
10609  3749
10610  374A
10611  374B
10612  374C
10613  374D
10614  374E
10615  374F
10616  3750
10617  3751
10618  3752
10619  3753
10620  3754
10621  3755
10622  3756
10623  3757
10624  3758
10625  3759
10626  375A
10627  375B
10628  375C
10629  375D
10630  375E
10631  375F
10632  3760
10633  3761
10634  3762
10635  3763
10636  3764
10637  3765
10638  3766
10639  3767
10640  3768
10641  3769
10642  376A
10643  376B
10644  376C
10645  376D
10646  376E
10647  376F
10648  3770
10649  3771
10650  3772
10651  3773
10652  3774
10653  3775
10654  3776
10655  3777
10656  3778
10657  3779
10658  377A
10659  377B
10660  377C
10661  377D
10662  377E
10663  377F
10664  3780
10665  3781
10666  3782
10667  3783
10668  3784
10669  3785
10670  3786
10671  3787
10672  3788
10673  3789
10674  378A
10675  378B
10676  378C
10677  378D
10678  378E
10679  378F
10680  3790
10681  3791
10682  3792
10683  3793
10684  3794
10685  3795
10686  3796
10687  3797
10688  3798
10689  3799
10690  379A
10691  379B
10692  379C
10693  379D
10694  379E
10695  379F
10696  37A0
10697  37A1
10698  37A2
10699  37A3
10700  37A4
10701  37A5
10702  37A6
10703  37A7
10704  37A8
10705  37A9
10706  37AA
10707  37AB
10708  37AC
10709  37AD
10710  37AE
10711  37AF
10712  37B0
10713  37B1
10714  37B2
10715  37B3
10716  37B4
10717  37B5
10718  37B6
10719  37B7
10720  37B8
10721  37B9
10722  37BA
10723  37BB
10724  37BC
10725  37BD
10726  37BE
10727  37BF
10728  37C0
10729  37C1
10730  37C2
10731  37C3
10732  37C4
10733  37C5
10734  37C6
10735  37C7
10736  37C8
10737  37C9
10738  37CA
10739  37CB
10740  37CC
10741  37CD
10742  37CE
10743  37CF
10744  37D0
10745  37D1
10746  37D2
10747  37D3
10748  37D4
10749  37D5
10750  37D6
10751  37D7
10752  37D8
10753  37D9
10754  37DA
10755  37DB
10756  37DC
10757  37DD
10758  37DE
10759  37DF
10760  37E0
10761  37E1
10762  37E2
10763  37E3
10764  37E4
10765  37E5
10766  37E6
10767  37E7
10768  37E8
10769  37E9
10770  37EA
10771  37EB
10772  37EC
10773  37ED
10774  37EE
10775  37EF
10776  37F0
10777  37F1
10778  37F2
10779  37F3
10780  37F4
10781  37F5
10782  37F6
10783  37F7
10784  37F8
10785  37F9
10786  37FA
10787  37FB
10788  37FC
10789  37FD
10790  37FE
10791  37FF
10792  3800
10793  3801
10794  3802
10795  3803
10796  3804
10797  3805
10798  3806
10799  3807
10800  3808
10801  3809
10802  380A
10803  380B
10804  380C
10805  380D
10806  380E
10807  380F
10808  3810
10809  3811
10810  3812
10811  3813
10812  3814
10813  3815
10814  3816
10815  3817
10816  3818
10817  3819
10818  381A
10819  381B
10820  381C
10821  381D
10822  381E
10823  381F
10824  3820
10825  3821
10826  3822
10827  3823
10828  3824
10829  3825
10830  3826
10831  3827
10832  3828
10833  3829
10834  382A
10835  382B
10836  382C
10837  382D
10838  382E
10839  382F
10840  3830
10841  3831
10842  3832
10843  3833
10844  3834
10845  3835
10846  3836
10847  3837
10848  3838
10849  3839
10850  383A
10851  383B
10852  383C
10853  383D
10854  383E
10855  383F
10856  3840
10857  3841
10858  3842
10859  3843
10860  3844
10861  3845
10862  3846
10863  3847
10864  3848
10865  3849
10866  384A
10867  384B
10868  384C
10869  384D
10870  384E
10871  384F
10872  3850
10873  3851
10874  3852
10875  3853
10876  3854
10877  3855
10878  3856
10879  3857
10880  3858
10881  3859
10882  385A
10883  385B
10884  385C
10885  385D
10886  385E
10887  385F
10888  3860
10889  3861
10890  3862
10891  3863
10892  3864
10893  3865
10894  3866
10895  3867
10896  3868
10897  3869
10898  386A
10899  386B
10900  386C
10901  386D
10902  386E
10903  386F
10904  3870
10905  3871
10906  3872
10907  3873
10908  3874
10909  3875
10910  3876
10911  3877
10912  3878
10913  3879
10914  387A
10915  387B
10916  387C
10917  387D
10918  387E
10919  387F
10920  3880
10921  3881
10922  3882
10923  3883
10924  3884
10925  3885
10926  3886
10927  3887
10928  3888
10929  3889
10930  388A
10931  388B
10932  388C
10933  388D
10934  388E
10935  388F
10936  3890
10937  3891
10938  3892
10939  3893
10940  3894
10941  3895
10942  3896
10943  3897
10944  3898
10945  3899
10946  389A
10947  389B
10948  389C
10949  389D
10950  389E
10951  389F
10952  38A0
10953  38A1
10954  38A2
10955  38A3
10956  38A4
10957  38A5
10958  38A6
10959  38A7
10960  38A8
10961  38A9
10962  38AA
10963  38AB
10964  38AC
10965  38AD
10966  38AE
10967  38AF
10968  38B0
10969  38B1
10970  38B2
10971  38B3
10972  38B4
10973  38B5
10974  38B6
10975  38B7
10976  38B8
10977  38B9
10978  38BA
10979  38BB
10980  38BC
10981  38BD
10982  38BE
10983  38BF
10984  38C0
10985  38C1
10986  38C2
10987  38C3
10988  38C4
10989  38C5
10990  38C6
10991  38C7
10992  38C8
10993  38C9
10994  38CA
10995  38CB
10996  38CC
10997  38CD
10998  38CE
10999  38CF
11000  38D0
11001  38D1
11002  38D2
11003  38D3
11004  38D4
11005  38D5
11006  38D6
11007  38D7
11008  38D8
11009  38D9
11010  38DA
11011  38DB
11012  38DC
11013  38DD
11014  38DE
11015  38DF
11016  38E0
11017  38E1
11018  38E2
11019  38E3
11020  38E4
11021  38E5
11022  38E6
11023  38E7
11024  38E8
11025  38E9
11026  38EA
11027  38EB
11028  38EC
11029  38ED
11030  38EE
11031  38EF
11032  38F0
11033  38F1
11034  38F2
11035  38F3
11036  38F4
11037  38F5
11038  38F6
11039  38F7
11040  38F8
11041  38F9
11042  38FA
11043  38FB
11044  38FC
11045  38FD
11046  38FE
11047  38FF
11048  3900
11049  3901
11050  3902
11051  3903
11052  3904
11053  3905
11054  3906
11055  3907
11056  3908
11057  3909
11058  390A
11059  390B
11060  390C
11061  390D
11062  390E
11063  390F
11064  3910
11065  3911
11066  3912
11067  3913
11068  3914
11069  3915
11070  3916
11071  3917
11072  3918
11073  3919
11074  391A
11075  391B
11076  391C
11077  391D
11078  391E
11079  391F
11080  3920
11081  3921
11082  3922
11083  3923
11084  3924
11085  3925
11086  3926
11087  3927
11088  3928
11089  3929
11090  392A
11091  392B
11092  392C
11093  392D
11094  392E
11095  392F
11096  3930
11097  3931
11098  3932
11099  3933
11100  3934
11101  3935
11102  3936
11103  3937
11104  3938
11105  3939
11106  393A
11107  393B
11108  393C
11109  393D
11110  393E
11111  393F
11112  3940
11113  3941
11114  3942
11115  3943
11116  3944
11117  3945
11118  3946
11119  3947
11120  3948
11121  3949
11122  394A
11123  394B
11124  394C
11125  394D
11126  394E
11127  394F
11128  3950
11129  3951
11130  3952
11131  3953
11132  3954
11133  3955
11134  3956
11135  3957
11136  3958
11137  3959
11138  395A
11139  395B
11140  395C
11141  395D
11142  395E
11143  395F
11144  3960
11145  3961
11146  3962
11147  3963
11148  3964
11149  3965
11150  3966
11151  3967
11152  3968
11153  3969
11154  396A
11155  396B
11156  396C
11157  396D
11158  396E
11159  396F
11160  3970
11161  3971
11162  3972
11163  3973
11164  3974
11165  3975
11166  3976
11167  3977
11168  3978
11169  3979
11170  397A
11171  397B
11172  397C
11173  397D
11174  397E
11175  397F
11176  3980
11177  3981
11178  3982
11179  3983
11180  3984
11181  3985
11182  3986
11183  3987
11184  3988
11185  3989
11186  398A
11187  398B
11188  398C
11189  398D
11190  398E
11191  398F
11192  3990
11193  3991
11194  3992
11195  3993
11196  3994
11197  3995
11198  3996
11199  3997
11200  3998
11201  3999
11202  399A
11203  399B
11204  399C
11205  399D
11206  399E
11207  399F
11208  39A0
11209  39A1
11210  39A2
11211  39A3
11212  39A4
11213  39A5
11214  39A6
11215  39A7
11216  39A8
11217  39A9
11218  39AA
11219  39AB
11220  39AC
11221  39AD
11222  39AE
11223  39AF
11224  39B0
11225  39B1
11226  39B2
11227  39B3
11228  39B4
11229  39B5
11230  39B6
11231  39B7
11232  39B8
11233  39B9
11234  39BA
11235  39BB
11236  39BC
11237  39BD
11238  39BE
11239  39BF
11240  39C0
11241  39C1
11242  39C2
11243  39C3
11244  39C4
11245  39C5
11246  39C6
11247  39C7
11248  39C8
11249  39C9
11250  39CA
11251  39CB
11252  39CC
11253  39CD
11254  39CE
11255  39CF
11256  39D0
11257  39D1
11258  39D2
11259  39D3
11260  39D4
11261  39D5
11262  39D6
11263  39D7
11264  39D8
11265  39D9
11266  39DA
11267  39DB
11268  39DC
11269  39DD
11270  39DE
11271  39DF
11272  39E0
11273  39E1
11274  39E2
11275  39E3
11276  39E4
11277  39E5
11278  39E6
11279  39E7
11280  39E8
11281  39E9
11282  39EA
11283  39EB
11284  39EC
11285  39ED
11286  39EE
11287  39EF
11288  39F0
11289  39F1
11290  39F2
11291  39F3
11292  39F4
11293  39F5
11294  39F6
11295  39F7
11296  39F8
11297  39F9
11298  39FA
11299  39FB
11300  39FC
11301  39FD
11302  39FE
11303  39FF
11304  3A00
11305  3A01
11306  3A02
11307  3A03
11308  3A04
11309  3A05
11310  3A06
11311  3A07
11312  3A08
11313  3A09
11314  3A0A
11315  3A0B
11316  3A0C
11317  3A0D
11318  3A0E
11319  3A0F
11320  3A10
11321  3A11
11322  3A12
11323  3A13
11324  3A14
11325  3A15
11326  3A16
11327  3A17
11328  3A18
11329  3A19
11330  3A1A
11331  3A1B
11332  3A1C
11333  3A1D
11334  3A1E
11335  3A1F
11336  3A20
11337  3A21
11338  3A22
11339  3A23
11340  3A24
11341  3A25
11342  3A26
11343  3A27
11344  3A28
11345  3A29
11346  3A2A
11347  3A2B
11348  3A2C
11349  3A2D
11350  3A2E
11351  3A2F
11352  3A30
11353  3A31
11354  3A32
11355  3A33
11356  3A34
11357  3A35
11358  3A36
11359  3A37
11360  3A38
11361  3A39
11362  3A3A
11363  3A3B
11364  3A3C
11365  3A3D
11366  3A3E
11367  3A3F
11368  3A40
11369  3A41
11370  3A42
11371  3A43
11372  3A44
11373  3A45
11374  3A46
11375  3A47
11376  3A48
11377  3A49
11378  3A4A
11379  3A4B
11380  3A4C
11381  3A4D
11382  3A4E
11383  3A4F
11384  3A50
11385  3A51
11386  3A52
11387  3A53
11388  3A54
11389  3A55
11390  3A56
11391  3A57
11392  3A58
11393  3A59
11394  3A5A
11395  3A5B
11396  3A5C
11397  3A5D
11398  3A5E
11399  3A5F
11400  3A60
11401  3A61
11402  3A62
11403  3A63
11404  3A64
11405  3A65
11406  3A66
11407  3A67
11408  3A68
11409  3A69
11410  3A6A
11411  3A6B
11412  3A6C
11413  3A6D
11414  3A6E
11415  3A6F
11416  3A70
11417  3A71
11418  3A72
11419  3A73
11420  3A74
11421  3A75
11422  3A76
11423  3A77
11424  3A78
11425  3A79
11426  3A7A
11427  3A7B
11428  3A7C
11429  3A7D
11430  3A7E
11431  3A7F
11432  3A80
11433  3A81
11434  3A82
11435  3A83
11436  3A84
11437  3A85
11438  3A86
11439  3A87
11440  3A88
11441  3A89
11442  3A8A
11443  3A8B
11444  3A8C
11445  3A8D
11446  3A8E
11447  3A8F
11448  3A90
11449  3A91
11450  3A92
11451  3A93
11452  3A94
11453  3A95
11454  3A96
11455  3A97
11456  3A98
11457  3A99
11458  3A9A
11459  3A9B
11460  3A9C
11461  3A9D
11462  3A9E
11463  3A9F
11464  3AA0
11465  3AA1
11466  3AA2
11467  3AA3
11468  3AA4
11469  3AA5
11470  3AA6
11471  3AA7
11472  3AA8
11473  3AA9
11474  3AAA
11475  3AAB
11476  3AAC
11477  3AAD
11478  3AAE
11479  3AAF
11480  3AB0
11481  3AB1
11482  3AB2
11483  3AB3
11484  3AB4
11485  3AB5
11486  3AB6
11487  3AB7
11488  3AB8
11489  3AB9
11490  3ABA
11491  3ABB
11492  3ABC
11493  3ABD
11494  3ABE
11495  3ABF
11496  3AC0
11497  3AC1
11498  3AC2
11499  3AC3
11500  3AC4
11501  3AC5
11502  3AC6
11503  3AC7
11504  3AC8
11505  3AC9
11506  3ACA
11507  3ACB
11508  3ACC
11509  3ACD
11510  3ACE
11511  3ACF
11512  3AD0
11513  3AD1
11514  3AD2
11515  3AD3
11516  3AD4
11517  3AD5
11518  3AD6
11519  3AD7
11520  3AD8
11521  3AD9
11522  3ADA
11523  3ADB
11524  3ADC
11525  3ADD
11526  3ADE
11527  3ADF
11528  3AE0
11529  3AE1
11530  3AE2
11531  3AE3
11532  3AE4
11533  3AE5
11534  3AE6
11535  3AE7
11536  3AE8
11537  3AE9
11538  3AEA
11539  3AEB
11540  3AEC
11541  3AED
11542  3AEE
11543  3AEF
11544  3AF0
11545  3AF1
11546  3AF2
11547  3AF3
11548  3AF4
11549  3AF5
11550  3AF6
11551  3AF7
11552  3AF8
11553  3AF9
11554  3AFA
11555  3AFB
11556  3AFC
11557  3AFD
11558  3AFE
11559  3AFF
11560  3B00
11561  3B01
11562  3B02
11563  3B03
11564  3B04
11565  3B05
11566  3B06
11567  3B07
11568  3B08
11569  3B09
11570  3B0A
11571  3B0B
11572  3B0C
11573  3B0D
11574  3B0E
11575  3B0F
11576  3B10
11577  3B11
11578  3B12
11579  3B13
11580  3B14
11581  3B15
11582  3B16
11583  3B17
11584  3B18
11585  3B19
11586  3B1A
11587  3B1B
11588  3B1C
11589  3B1D
11590  3B1E
11591  3B1F
11592  3B20
11593  3B21
11594  3B22
11595  3B23
11596  3B24
11597  3B25
11598  3B26
11599  3B27
11600  3B28
11601  3B29
11602  3B2A
11603  3B2B
11604  3B2C
11605  3B2D
11606  3B2E
11607  3B2F
11608  3B30
11609  3B31
11610  3B32
11611  3B33
11612  3B34
11613  3B35
11614  3B36
11615  3B37
11616  3B38
11617  3B39
11618  3B3A
11619  3B3B
11620  3B3C
11621  3B3D
11622  3B3E
11623  3B3F
11624  3B40
11625  3B41
11626  3B42
11627  3B43
11628  3B44
11629  3B45
11630  3B46
11631  3B47
11632  3B48
11633  3B49
11634  3B4A
11635  3B4B
11636  3B4C
11637  3B4D
11638  3B4E
11639  3B4F
11640  3B50
11641  3B51
11642  3B52
11643  3B53
11644  3B54
11645  3B55
11646  3B56
11647  3B57
11648  3B58
11649  3B59
11650  3B5A
11651  3B5B
11652  3B5C
11653  3B5D
11654  3B5E
11655  3B5F
11656  3B60
11657  3B61
11658  3B62
11659  3B63
11660  3B64
11661  3B65
11662  3B66
11663  3B67
11664  3B68
11665  3B69
11666  3B6A
11667  3B6B
11668  3B6C
11669  3B6D
11670  3B6E
11671  3B6F
11672  3B70
11673  3B71
11674  3B72
11675  3B73
11676  3B74
11677  3B75
11678  3B76
11679  3B77
11680  3B78
11681  3B79
11682  3B7A
11683  3B7B
11684  3B7C
11685  3B7D
11686  3B7E
11687  3B7F
11688  3B80
11689  3B81
11690  3B82
11691  3B83
11692  3B84
11693  3B85
11694  3B86
11695  3B87
11696  3B88
11697  3B89
11698  3B8A
11699  3B8B
11700  3B8C
11701  3B8D
11702  3B8E
11703  3B8F
11704  3B90
11705  3B91
11706  3B92
11707  3B93
11708  3B94
11709  3B95
11710  3B96
11711  3B97
11712  3B98
11713  3B99
11714  3B9A
11715  3B9B
11716  3B9C
11717  3B9D
11718  3B9E
11719  3B9F
11720  3BA0
11721  3BA1
11722  3BA2
11723  3BA3
11724  3BA4
11725  3BA5
11726  3BA6
11727  3BA7
11728  3BA8
11729  3BA9
11730  3BAA
11731  3BAB
11732  3BAC
11733  3BAD
11734  3BAE
11735  3BAF
11736  3BB0
11737  3BB1
11738  3BB2
11739  3BB3
11740  3BB4
11741  3BB5
11742  3BB6
11743  3BB7
11744  3BB8
11745  3BB9
11746  3BBA
11747  3BBB
11748  3BBC
11749  3BBD
11750  3BBE
11751  3BBF
11752  3BC0
11753  3BC1
11754  3BC2
11755  3BC3
11756  3BC4
11757  3BC5
11758  3BC6
11759  3BC7
11760  3BC8
11761  3BC9
11762  3BCA
11763  3BCB
11764  3BCC
11765  3BCD
11766  3BCE
11767  3BCF
11768  3BD0
11769  3BD1
11770  3BD2
11771  3BD3
11772  3BD4
11773  3BD5
11774  3BD6
11775  3BD7
11776  3BD8
11777  3BD9
11778  3BDA
11779  3BDB
11780  3BDC
11781  3BDD
11782  3BDE
11783  3BDF
11784  3BE0
11785  3BE1
11786  3BE2
11787  3BE3
11788  3BE4
11789  3BE5
11790  3BE6
11791  3BE7
11792  3BE8
11793  3BE9
11794  3BEA
11795  3BEB
11796  3BEC
11797  3BED
11798  3BEE
11799  3BEF
11800  3BF0
11801  3BF1
11802  3BF2
11803  3BF3
11804  3BF4
11805  3BF5
11806  3BF6
11807  3BF7
11808  3BF8
11809  3BF9
11810  3BFA
11811  3BFB
11812  3BFC
11813  3BFD
11814  3BFE
11815  3BFF
11816  3C00
11817  3C01
11818  3C02
11819  3C03
11820  3C04
11821  3C05
11822  3C06
11823  3C07
11824  3C08
11825  3C09
11826  3C0A
11827  3C0B
11828  3C0C
11829  3C0D
11830  3C0E
11831  3C0F
11832  3C10
11833  3C11
11834  3C12
11835  3C13
11836  3C14
11837  3C15
11838  3C16
11839  3C17
11840  3C18
11841  3C19
11842  3C1A
11843  3C1B
11844  3C1C
11845  3C1D
11846  3C1E
11847  3C1F
11848  3C20
11849  3C21
11850  3C22
11851  3C23
11852  3C24
11853  3C25
11854  3C26
11855  3C27
11856  3C28
11857  3C29
11858  3C2A
11859  3C2B
11860  3C2C
11861  3C2D
11862  3C2E
11863  3C2F
11864  3C30
11865  3C31
11866  3C32
11867  3C33
11868  3C34
11869  3C35
11870  3C36
11871  3C37
11872  3C38
11873  3C39
11874  3C3A
11875  3C3B
11876  3C3C
11877  3C3D
11878  3C3E
11879  3C3F
11880  3C40
11881  3C41
11882  3C42
11883  3C43
11884  3C44
11885  3C45
11886  3C46
11887  3C47
11888  3C48
11889  3C49
11890  3C4A
11891  3C4B
11892  3C4C
11893  3C4D
11894  3C4E
11895  3C4F
11896  3C50
11897  3C51
11898  3C52
11899  3C53
11900  3C54
11901  3C55
11902  3C56
11903  3C57
11904  3C58
11905  3C59
11906  3C5A
11907  3C5B
11908  3C5C
11909  3C5D
11910  3C5E
11911  3C5F
11912  3C60
11913  3C61
11914  3C62
11915  3C63
11916  3C64
11917  3C65
11918  3C66
11919  3C67
11920  3C68
11921  3C69
11922  3C6A
11923  3C6B
11924  3C6C
11925  3C6D
11926  3C6E
11927  3C6F
11928  3C70
11929  3C71
11930  3C72
11931  3C73
11932  3C74
11933  3C75
11934  3C76
11935  3C77
11936  3C78
11937  3C79
11938  3C7A
11939  3C7B
11940  3C7C
11941  3C7D
11942  3C7E
11943  3C7F
11944  3C80
11945  3C81
11946  3C82
11947  3C83
11948  3C84
11949  3C85
11950  3C86
11951  3C87
11952  3C88
11953  3C89
11954  3C8A
11955  3C8B
11956  3C8C
11957  3C8D
11958  3C8E
11959  3C8F
11960  3C90
11961  3C91
11962  3C92
11963  3C93
11964  3C94
11965  3C95
11966  3C96
11967  3C97
11968  3C98
11969  3C99
11970  3C9A
11971  3C9B
11972  3C9C
11973  3C9D
11974  3C9E
11975  3C9F
11976  3CA0
11977  3CA1
11978  3CA2
11979  3CA3
11980  3CA4
11981  3CA5
11982  3CA6
11983  3CA7
11984  3CA8
11985  3CA9
11986  3CAA
11987  3CAB
11988  3CAC
11989  3CAD
11990  3CAE
11991  3CAF
11992  3CB0
11993  3CB1
11994  3CB2
11995  3CB3
11996  3CB4
11997  3CB5
11998  3CB6
11999  3CB7
12000  3CB8
12001  3CB9
12002  3CBA
12003  3CBB
12004  3CBC
12005  3CBD
12006  3CBE
12007  3CBF
12008  3CC0
12009  3CC1
12010  3CC2
12011  3CC3
12012  3CC4
12013  3CC5
12014  3CC6
12015  3CC7
12016  3CC8
12017  3CC9
12018  3CCA
12019  3CCB
12020  3CCC
12021  3CCD
12022  3CCE
12023  3CCF
12024  3CD0
12025  3CD1
12026  3CD2
12027  3CD3
12028  3CD4
12029  3CD5
12030  3CD6
12031  3CD7
12032  3CD8
12033  3CD9
12034  3CDA
12035  3CDB
12036  3CDC
12037  3CDD
12038  3CDE
12039  3CDF
12040  3CE0
12041  3CE1
12042  3CE2
12043  3CE3
12044  3CE4
12045  3CE5
12046  3CE6
12047  3CE7
12048  3CE8
12049  3CE9
12050  3CEA
12051  3CEB
12052  3CEC
12053  3CED
12054  3CEE
12055  3CEF
12056  3CF0
12057  3CF1
12058  3CF2
12059  3CF3
12060  3CF4
12061  3CF5
12062  3CF6
12063  3CF7
12064  3CF8
12065  3CF9
12066  3CFA
12067  3CFB
12068  3CFC
12069  3CFD
12070  3CFE
12071  3CFF
12072  3D00
12073  3D01
12074  3D02
12075  3D03
12076  3D04
12077  3D05
12078  3D06
12079  3D07
12080  3D08
12081  3D09
12082  3D0A
12083  3D0B
12084  3D0C
12085  3D0D
12086  3D0E
12087  3D0F
12088  3D10
12089  3D11
12090  3D12
12091  3D13
12092  3D14
12093  3D15
12094  3D16
12095  3D17
12096  3D18
12097  3D19
12098  3D1A
12099  3D1B
12100  3D1C
12101  3D1D
12102  3D1E
12103  3D1F
12104  3D20
12105  3D21
12106  3D22
12107  3D23
12108  3D24
12109  3D25
12110  3D26
12111  3D27
12112  3D28
12113  3D29
12114  3D2A
12115  3D2B
12116  3D2C
12117  3D2D
12118  3D2E
12119  3D2F
12120  3D30
12121  3D31
12122  3D32
12123  3D33
12124  3D34
12125  3D35
12126  3D36
12127  3D37
12128  3D38
12129  3D39
12130  3D3A
12131  3D3B
12132  3D3C
12133  3D3D
12134  3D3E
12135  3D3F
12136  3D40
12137  3D41
12138  3D42
12139  3D43
12140  3D44
12141  3D45
12142  3D46
12143  3D47
12144  3D48
12145  3D49
12146  3D4A
12147  3D4B
12148  3D4C
12149  3D4D
12150  3D4E
12151  3D4F
12152  3D50
12153  3D51
12154  3D52
12155  3D53
12156  3D54
12157  3D55
12158  3D56
12159  3D57
12160  3D58
12161  3D59
12162  3D5A
12163  3D5B
12164  3D5C
12165  3D5D
12166  3D5E
12167  3D5F
12168  3D60
12169  3D61
12170  3D62
12171  3D63
12172  3D64
12173  3D65
12174  3D66
12175  3D67
12176  3D68
12177  3D69
12178  3D6A
12179  3D6B
12180  3D6C
12181  3D6D
12182  3D6E
12183  3D6F
12184  3D70
12185  3D71
12186  3D72
12187  3D73
12188  3D74
12189  3D75
12190  3D76
12191  3D77
12192  3D78
12193  3D79
12194  3D7A
12195  3D7B
12196  3D7C
12197  3D7D
12198  3D7E
12199  3D7F
12200  3D80
12201  3D81
12202  3D82
12203  3D83
12204  3D84
12205  3D85
12206  3D86
12207  3D87
12208  3D88
12209  3D89
12210  3D8A
12211  3D8B
12212  3D8C
12213  3D8D
12214  3D8E
12215  3D8F
12216  3D90
12217  3D91
12218  3D92
12219  3D93
12220  3D94
12221  3D95
12222  3D96
12223  3D97
12224  3D98
12225  3D99
12226  3D9A
12227  3D9B
12228  3D9C
12229  3D9D
12230  3D9E
12231  3D9F
12232  3DA0
12233  3DA1
12234  3DA2
12235  3DA3
12236  3DA4
12237  3DA5
12238  3DA6
12239  3DA7
12240  3DA8
12241  3DA9
12242  3DAA
12243  3DAB
12244  3DAC
12245  3DAD
12246  3DAE
12247  3DAF
12248  3DB0
12249  3DB1
12250  3DB2
12251  3DB3
12252  3DB4
12253  3DB5
12254  3DB6
12255  3DB7
12256  3DB8
12257  3DB9
12258  3DBA
12259  3DBB
12260  3DBC
12261  3DBD
12262  3DBE
12263  3DBF
12264  3DC0
12265  3DC1
12266  3DC2
12267  3DC3
12268  3DC4
12269  3DC5
12270  3DC6
12271  3DC7
12272  3DC8
12273  3DC9
12274  3DCA
12275  3DCB
12276  3DCC
12277  3DCD
12278  3DCE
12279  3DCF
12280  3DD0
12281  3DD1
12282  3DD2
12283  3DD3
12284  3DD4
12285  3DD5
12286  3DD6
12287  3DD7
12288  3DD8
12289  3DD9
12290  3DDA
12291  3DDB
12292  3DDC
12293  3DDD
12294  3DDE
12295  3DDF
12296  3DE0
12297  3DE1
12298  3DE2
12299  3DE3
12300  3DE4
12301  3DE5
12302  3DE6
12303  3DE7
12304  3DE8
12305  3DE9
12306  3DEA
12307  3DEB
12308  3DEC
12309  3DED
12310  3DEE
12311  3DEF
12312  3DF0
12313  3DF1
12314  3DF2
12315  3DF3
12316  3DF4
12317  3DF5
12318  3DF6
12319  3DF7
12320  3DF8
12321  3DF9
12322  3DFA
12323  3DFB
12324  3DFC
12325  3DFD
12326  3DFE
12327  3DFF
12328  3E00
12329  3E01
12330  3E02
12331  3E03
12332  3E04
12333  3E05
12334  3E06
12335  3E07
12336  3E08
12337  3E09
12338  3E0A
12339  3E0B
12340  3E0C
12341  3E0D
12342  3E0E
12343  3E0F
12344  3E10
12345  3E11
12346  3E12
12347  3E13
12348  3E14
12349  3E15
12350  3E16
12351  3E17
12352  3E18
12353  3E19
12354  3E1A
12355  3E1B
12356  3E1C
12357  3E1D
12358  3E1E
12359  3E1F
12360  3E20
12361  3E21
12362  3E22
12363  3E23
12364  3E24
12365  3E25
12366  3E26
12367  3E27
12368  3E28
12369  3E29
12370  3E2A
12371  3E2B
12372  3E2C
12373  3E2D
12374  3E2E
12375  3E2F
12376  3E30
12377  3E31
12378  3E32
12379  3E33
12380  3E34
12381  3E35
12382  3E36
12383  3E37
12384  3E38
12385  3E39
12386  3E3A
12387  3E3B
12388  3E3C
12389  3E3D
12390  3E3E
12391  3E3F
12392  3E40
12393  3E41
12394  3E42
12395  3E43
12396  3E44
12397  3E45
12398  3E46
12399  3E47
12400  3E48
12401  3E49
12402  3E4A
12403  3E4B
12404  3E4C
12405  3E4D
12406  3E4E
12407  3E4F
12408  3E50
12409  3E51
12410  3E52
12411  3E53
12412  3E54
12413  3E55
12414  3E56
12415  3E57
12416  3E58
12417  3E59
12418  3E5A
12419  3E5B
12420  3E5C
12421  3E5D
12422  3E5E
12423  3E5F
12424  3E60
12425  3E61
12426  3E62
12427  3E63
12428  3E64
12429  3E65
12430  3E66
12431  3E67
12432  3E68
12433  3E69
12434  3E6A
12435  3E6B
12436  3E6C
12437  3E6D
12438  3E6E
12439  3E6F
12440  3E70
12441  3E71
12442  3E72
12443  3E73
12444  3E74
12445  3E75
12446  3E76
12447  3E77
12448  3E78
12449  3E79
12450  3E7A
12451  3E7B
12452  3E7C
12453  3E7D
12454  3E7E
12455  3E7F
12456  3E80
12457  3E81
12458  3E82
12459  3E83
12460  3E84
12461  3E85
12462  3E86
12463  3E87
12464  3E88
12465  3E89
12466  3E8A
12467  3E8B
12468  3E8C
12469  3E8D
12470  3E8E
12471  3E8F
12472  3E90
12473  3E91
12474  3E92
12475  3E93
12476  3E94
12477  3E95
12478  3E96
12479  3E97
12480  3E98
12481  3E99
12482  3E9A
12483  3E9B
12484  3E9C
12485  3E9D
12486  3E9E
12487  3E9F
12488  3EA0
12489  3EA1
12490  3EA2
12491  3EA3
12492  3EA4
12493  3EA5
12494  3EA6
12495  3EA7
12496  3EA8
12497  3EA9
12498  3EAA
12499  3EAB
12500  3EAC
12501  3EAD
12502  3EAE
12503  3EAF
12504  3EB0
12505  3EB1
12506  3EB2
12507  3EB3
12508  3EB4
12509  3EB5
12510  3EB6
12511  3EB7
12512  3EB8
12513  3EB9
12514  3EBA
12515  3EBB
12516  3EBC
12517  3EBD
12518  3EBE
12519  3EBF
12520  3EC0
12521  3EC1
12522  3EC2
12523  3EC3
12524  3EC4
12525  3EC5
12526  3EC6
12527  3EC7
12528  3EC8
12529  3EC9
12530  3ECA
12531  3ECB
12532  3ECC
12533  3ECD
12534  3ECE
12535  3ECF
12536  3ED0
12537  3ED1
12538  3ED2
12539  3ED3
12540  3ED4
12541  3ED5
12542  3ED6
12543  3ED7
12544  3ED8
12545  3ED9
12546  3EDA
12547  3EDB
12548  3EDC
12549  3EDD
12550  3EDE
12551  3EDF
12552  3EE0
12553  3EE1
12554  3EE2
12555  3EE3
12556  3EE4
12557  3EE5
12558  3EE6
12559  3EE7
12560  3EE8
12561  3EE9
12562  3EEA
12563  3EEB
12564  3EEC
12565  3EED
12566  3EEE
12567  3EEF
12568  3EF0
12569  3EF1
12570  3EF2
12571  3EF3
12572  3EF4
12573  3EF5
12574  3EF6
12575  3EF7
12576  3EF8
12577  3EF9
12578  3EFA
12579  3EFB
12580  3EFC
12581  3EFD
12582  3EFE
12583  3EFF
12584  3F00
12585  3F01
12586  3F02
12587  3F03
12588  3F04
12589  3F05
12590  3F06
12591  3F07
12592  3F08
12593  3F09
12594  3F0A
12595  3F0B
12596  3F0C
12597  3F0D
12598  3F0E
12599  3F0F
12600  3F10
12601  3F11
12602  3F12
12603  3F13
12604  3F14
12605  3F15
12606  3F16
12607  3F17
12608  3F18
12609  3F19
12610  3F1A
12611  3F1B
12612  3F1C
12613  3F1D
12614  3F1E
12615  3F1F
12616  3F20
12617  3F21
12618  3F22
12619  3F23
12620  3F24
12621  3F25
12622  3F26
12623  3F27
12624  3F28
12625  3F29
12626  3F2A
12627  3F2B
12628  3F2C
12629  3F2D
12630  3F2E
12631  3F2F
12632  3F30
12633  3F31
12634  3F32
12635  3F33
12636  3F34
12637  3F35
12638  3F36
12639  3F37
12640  3F38
12641  3F39
12642  3F3A
12643  3F3B
12644  3F3C
12645  3F3D
12646  3F3E
12647  3F3F
12648  3F40
12649  3F41
12650  3F42
12651  3F43
12652  3F44
12653  3F45
12654  3F46
12655  3F47
12656  3F48
12657  3F49
12658  3F4A
12659  3F4B
12660  3F4C
12661  3F4D
12662  3F4E
12663  3F4F
12664  3F50
12665  3F51
12666  3F52
12667  3F53
12668  3F54
12669  3F55
12670  3F56
12671  3F57
12672  3F58
12673  3F59
12674  3F5A
12675  3F5B
12676  3F5C
12677  3F5D
12678  3F5E
12679  3F5F
12680  3F60
12681  3F61
12682  3F62
12683  3F63
12684  3F64
12685  3F65
12686  3F66
12687  3F67
12688  3F68
12689  3F69
12690  3F6A
12691  3F6B
12692  3F6C
12693  3F6D
12694  3F6E
12695  3F6F
12696  3F70
12697  3F71
12698  3F72
12699  3F73
12700  3F74
12701  3F75
12702  3F76
12703  3F77
12704  3F78
12705  3F79
12706  3F7A
12707  3F7B
12708  3F7C
12709  3F7D
12710  3F7E
12711  3F7F
12712  3F80
12713  3F81
12714  3F82
12715  3F83
12716  3F84
12717  3F85
12718  3F86
12719  3F87
12720  3F88
12721  3F89
12722  3F8A
12723  3F8B
12724  3F8C
12725  3F8D
12726  3F8E
12727  3F8F
12728  3F90
12729  3F91
12730  3F92
12731  3F93
12732  3F94
12733  3F95
12734  3F96
12735  3F97
12736  3F98
12737  3F99
12738  3F9A
12739  3F9B
12740  3F9C
12741  3F9D
12742  3F9E
12743  3F9F
12744  3FA0
12745  3FA1
12746  3FA2
12747  3FA3
12748  3FA4
12749  3FA5
12750  3FA6
12751  3FA7
12752  3FA8
12753  3FA9
12754  3FAA
12755  3FAB
12756  3FAC
12757  3FAD
12758  3FAE
12759  3FAF
12760  3FB0
12761  3FB1
12762  3FB2
12763  3FB3
12764  3FB4
12765  3FB5
12766  3FB6
12767  3FB7
12768  3FB8
12769  3FB9
12770  3FBA
12771  3FBB
12772  3FBC
12773  3FBD
12774  3FBE
12775  3FBF
12776  3FC0
12777  3FC1
12778  3FC2
12779  3FC3
12780  3FC4
12781  3FC5
12782  3FC6
12783  3FC7
12784  3FC8
12785  3FC9
12786  3FCA
12787  3FCB
12788  3FCC
12789  3FCD
12790  3FCE
12791  3FCF
12792  3FD0
12793  3FD1
12794  3FD2
12795  3FD3
12796  3FD4
12797  3FD5
12798  3FD6
12799  3FD7
12800  3FD8
12801  3FD9
12802  3FDA
12803  3FDB
12804  3FDC
12805  3FDD
12806  3FDE
12807  3FDF
12808  3FE0
12809  3FE1
12810  3FE2
12811  3FE3
12812  3FE4
12813  3FE5
12814  3FE6
12815  3FE7
12816  3FE8
12817  3FE9
12818  3FEA
12819  3FEB
12820  3FEC
12821  3FED
12822  3FEE
12823  3FEF
12824  3FF0
12825  3FF1
12826  3FF2
12827  3FF3
12828  3FF4
12829  3FF5
12830  3FF6
12831  3FF7
12832  3FF8
12833  3FF9
12834  3FFA
12835  3FFB
12836  3FFC
12837  3FFD
12838  3FFE
12839  3FFF
12840  4000
12841  4001
12842  4002
12843  4003
12844  4004
12845  4005
12846  4006
12847  4007
12848  4008
12849  4009
12850  400A
12851  400B
12852  400C
12853  400D
12854  400E
12855  400F
12856  4010
12857  4011
12858  4012
12859  4013
12860  4014
12861  4015
12862  4016
12863  4017
12864  4018
12865  4019
12866  401A
12867  401B
12868  401C
12869  401D
12870  401E
12871  401F
12872  4020
12873  4021
12874  4022
12875  4023
12876  4024
12877  4025
12878  4026
12879  4027
12880  4028
12881  4029
12882  402A
12883  402B
12884  402C
12885  402D
12886  402E
12887  402F
12888  4030
12889  4031
12890  4032
12891  4033
12892  4034
12893  4035
12894  4036
12895  4037
12896  4038
12897  4039
12898  403A
12899  403B
12900  403C
12901  403D
12902  403E
12903  403F
12904  4040
12905  4041
12906  4042
12907  4043
12908  4044
12909  4045
12910  4046
12911  4047
12912  4048
12913  4049
12914  404A
12915  404B
12916  404C
12917  404D
12918  404E
12919  404F
12920  4050
12921  4051
12922  4052
12923  4053
12924  4054
12925  4055
12926  4056
12927  4057
12928  4058
12929  4059
12930  405A
12931  405B
12932  405C
12933  405D
12934  405E
12935  405F
12936  4060
12937  4061
12938  4062
12939  4063
12940  4064
12941  4065
12942  4066
12943  4067
12944  4068
12945  4069
12946  406A
12947  406B
12948  406C
12949  406D
12950  406E
12951  406F
12952  4070
12953  4071
12954  4072
12955  4073
12956  4074
12957  4075
12958  4076
12959  4077
12960  4078
12961  4079
12962  407A
12963  407B
12964  407C
12965  407D
12966  407E
12967  407F
12968  4080
12969  4081
12970  4082
12971  4083
12972  4084
12973  4085
12974  4086
12975  4087
12976  4088
12977  4089
12978  408A
12979  408B
12980  408C
12981  408D
12982  408E
12983  408F
12984  4090
12985  4091
12986  4092
12987  4093
12988  4094
12989  4095
12990  4096
12991  4097
12992  4098
12993  4099
12994  409A
12995  409B
12996  409C
12997  409D
12998  409E
12999  409F
13000  40A0
13001  40A1
13002  40A2
13003  40A3
13004  40A4
13005  40A5
13006  40A6
13007  40A7
13008  40A8
13009  40A9
13010  40AA
13011  40AB
13012  40AC
13013  40AD
13014  40AE
13015  40AF
13016  40B0
13017  40B1
13018  40B2
13019  40B3
13020  40B4
13021  40B5
13022  40B6
13023  40B7
13024  40B8
13025  40B9
13026  40BA
13027  40BB
13028  40BC
13029  40BD
13030  40BE
13031  40BF
13032  40C0
13033  40C1
13034  40C2
13035  40C3
13036  40C4
13037  40C5
13038  40C6
13039  40C7
13040  40C8
13041  40C9
13042  40CA
13043  40CB
13044  40CC
13045  40CD
13046  40CE
13047  40CF
13048  40D0
13049  40D1
13050  40D2
13051  40D3
13052  40D4
13053  40D5
13054  40D6
13055  40D7
13056  40D8
13057  40D9
13058  40DA
13059  40DB
13060  40DC
13061  40DD
13062  40DE
13063  40DF
13064  40E0
13065  40E1
13066  40E2
13067  40E3
13068  40E4
13069  40E5
13070  40E6
13071  40E7
13072  40E8
13073  40E9
13074  40EA
13075  40EB
13076  40EC
13077  40ED
13078  40EE
13079  40EF
13080  40F0
13081  40F1
13082  40F2
13083  40F3
13084  40F4
13085  40F5
13086  40F6
13087  40F7
13088  40F8
13089  40F9
13090  40FA
13091  40FB
13092  40FC
13093  40FD
13094  40FE
13095  40FF
13096  4100
13097  4101
13098  4102
13099  4103
13100  4104
13101  4105
13102  4106
13103  4107
13104  4108
13105  4109
13106  410A
13107  410B
13108  410C
13109  410D
13110  410E
13111  410F
13112  4110
13113  4111
13114  4112
13115  4113
13116  4114
13117  4115
13118  4116
13119  4117
13120  4118
13121  4119
13122  411A
13123  411B
13124  411C
13125  411D
13126  411E
13127  411F
13128  4120
13129  4121
13130  4122
13131  4123
13132  4124
13133  4125
13134  4126
13135  4127
13136  4128
13137  4129
13138  412A
13139  412B
13140  412C
13141  412D
13142  412E
13143  412F
13144  4130
13145  4131
13146  4132
13147  4133
13148  4134
13149  4135
13150  4136
13151  4137
13152  4138
13153  4139
13154  413A
13155  413B
13156  413C
13157  413D
13158  413E
13159  413F
13160  4140
13161  4141
13162  4142
13163  4143
13164  4144
13165  4145
13166  4146
13167  4147
13168  4148
13169  4149
13170  414A
13171  414B
13172  414C
13173  414D
13174  414E
13175  414F
13176  4150
13177  4151
13178  4152
13179  4153
13180  4154
13181  4155
13182  4156
13183  4157
13184  4158
13185  4159
13186  415A
13187  415B
13188  415C
13189  415D
13190  415E
13191  415F
13192  4160
13193  4161
13194  4162
13195  4163
13196  4164
13197  4165
13198  4166
13199  4167
13200  4168
13201  4169
13202  416A
13203  416B
13204  416C
13205  416D
13206  416E
13207  416F
13208  4170
13209  4171
13210  4172
13211  4173
13212  4174
13213  4175
13214  4176
13215  4177
13216  4178
13217  4179
13218  417A
13219  417B
13220  417C
13221  417D
13222  417E
13223  417F
13224  4180
13225  4181
13226  4182
13227  4183
13228  4184
13229  4185
13230  4186
13231  4187
13232  4188
13233  4189
13234  418A
13235  418B
13236  418C
13237  418D
13238  418E
13239  418F
13240  4190
13241  4191
13242  4192
13243  4193
13244  4194
13245  4195
13246  4196
13247  4197
13248  4198
13249  4199
13250  419A
13251  419B
13252  419C
13253  419D
13254  419E
13255  419F
13256  41A0
13257  41A1
13258  41A2
13259  41A3
13260  41A4
13261  41A5
13262  41A6
13263  41A7
13264  41A8
13265  41A9
13266  41AA
13267  41AB
13268  41AC
13269  41AD
13270  41AE
13271  41AF
13272  41B0
13273  41B1
13274  41B2
13275  41B3
13276  41B4
13277  41B5
13278  41B6
13279  41B7
13280  41B8
13281  41B9
13282  41BA
13283  41BB
13284  41BC
13285  41BD
13286  41BE
13287  41BF
13288  41C0
13289  41C1
13290  41C2
13291  41C3
13292  41C4
13293  41C5
13294  41C6
13295  41C7
13296  41C8
13297  41C9
13298  41CA
13299  41CB
13300  41CC
13301  41CD
13302  41CE
13303  41CF
13304  41D0
13305  41D1
13306  41D2
13307  41D3
13308  41D4
13309  41D5
13310  41D6
13311  41D7
13312  41D8
13313  41D9
13314  41DA
13315  41DB
13316  41DC
13317  41DD
13318  41DE
13319  41DF
13320  41E0
13321  41E1
13322  41E2
13323  41E3
13324  41E4
13325  41E5
13326  41E6
13327  41E7
13328  41E8
13329  41E9
13330  41EA
13331  41EB
13332  41EC
13333  41ED
13334  41EE
13335  41EF
13336  41F0
13337  41F1
13338  41F2
13339  41F3
13340  41F4
13341  41F5
13342  41F6
13343  41F7
13344  41F8
13345  41F9
13346  41FA
13347  41FB
13348  41FC
13349  41FD
13350  41FE
13351  41FF
13352  4200
13353  4201
13354  4202
13355  4203
13356  4204
13357  4205
13358  4206
13359  4207
13360  4208
13361  4209
13362  420A
13363  420B
13364  420C
13365  420D
13366  420E
13367  420F
13368  4210
13369  4211
13370  4212
13371  4213
13372  4214
13373  4215
13374  4216
13375  4217
13376  4218
13377  4219
13378  421A
13379  421B
13380  421C
13381  421D
13382  421E
13383  421F
13384  4220
13385  4221
13386  4222
13387  4223
13388  4224
13389  4225
13390  4226
13391  4227
13392  4228
13393  4229
13394  422A
13395  422B
13396  422C
13397  422D
13398  422E
13399  422F
13400  4230
13401  4231
13402  4232
13403  4233
13404  4234
13405  4235
13406  4236
13407  4237
13408  4238
13409  4239
13410  423A
13411  423B
13412  423C
13413  423D
13414  423E
13415  423F
13416  4240
13417  4241
13418  4242
13419  4243
13420  4244
13421  4245
13422  4246
13423  4247
13424  4248
13425  4249
13426  424A
13427  424B
13428  424C
13429  424D
13430  424E
13431  424F
13432  4250
13433  4251
13434  4252
13435  4253
13436  4254
13437  4255
13438  4256
13439  4257
13440  4258
13441  4259
13442  425A
13443  425B
13444  425C
13445  425D
13446  425E
13447  425F
13448  4260
13449  4261
13450  4262
13451  4263
13452  4264
13453  4265
13454  4266
13455  4267
13456  4268
13457  4269
13458  426A
13459  426B
13460  426C
13461  426D
13462  426E
13463  426F
13464  4270
13465  4271
13466  4272
13467  4273
13468  4274
13469  4275
13470  4276
13471  4277
13472  4278
13473  4279
13474  427A
13475  427B
13476  427C
13477  427D
13478  427E
13479  427F
13480  4280
13481  4281
13482  4282
13483  4283
13484  4284
13485  4285
13486  4286
13487  4287
13488  4288
13489  4289
13490  428A
13491  428B
13492  428C
13493  428D
13494  428E
13495  428F
13496  4290
13497  4291
13498  4292
13499  4293
13500  4294
13501  4295
13502  4296
13503  4297
13504  4298
13505  4299
13506  429A
13507  429B
13508  429C
13509  429D
13510  429E
13511  429F
13512  42A0
13513  42A1
13514  42A2
13515  42A3
13516  42A4
13517  42A5
13518  42A6
13519  42A7
13520  42A8
13521  42A9
13522  42AA
13523  42AB
13524  42AC
13525  42AD
13526  42AE
13527  42AF
13528  42B0
13529  42B1
13530  42B2
13531  42B3
13532  42B4
13533  42B5
13534  42B6
13535  42B7
13536  42B8
13537  42B9
13538  42BA
13539  42BB
13540  42BC
13541  42BD
13542  42BE
13543  42BF
13544  42C0
13545  42C1
13546  42C2
13547  42C3
13548  42C4
13549  42C5
13550  42C6
13551  42C7
13552  42C8
13553  42C9
13554  42CA
13555  42CB
13556  42CC
13557  42CD
13558  42CE
13559  42CF
13560  42D0
13561  42D1
13562  42D2
13563  42D3
13564  42D4
13565  42D5
13566  42D6
13567  42D7
13568  42D8
13569  42D9
13570  42DA
13571  42DB
13572  42DC
13573  42DD
13574  42DE
13575  42DF
13576  42E0
13577  42E1
13578  42E2
13579  42E3
13580  42E4
13581  42E5
13582  42E6
13583  42E7
13584  42E8
13585  42E9
13586  42EA
13587  42EB
13588  42EC
13589  42ED
13590  42EE
13591  42EF
13592  42F0
13593  42F1
13594  42F2
13595  42F3
13596  42F4
13597  42F5
13598  42F6
13599  42F7
13600  42F8
13601  42F9
13602  42FA
13603  42FB
13604  42FC
13605  42FD
13606  42FE
13607  42FF
13608  4300
13609  4301
13610  4302
13611  4303
13612  4304
13613  4305
13614  4306
13615  4307
13616  4308
13617  4309
13618  430A
13619  430B
13620  430C
13621  430D
13622  430E
13623  430F
13624  4310
13625  4311
13626  4312
13627  4313
13628  4314
13629  4315
13630  4316
13631  4317
13632  4318
13633  4319
13634  431A
13635  431B
13636  431C
13637  431D
13638  431E
13639  431F
13640  4320
13641  4321
13642  4322
13643  4323
13644  4324
13645  4325
13646  4326
13647  4327
13648  4328
13649  4329
13650  432A
13651  432B
13652  432C
13653  432D
13654  432E
13655  432F
13656  4330
13657  4331
13658  4332
13659  4333
13660  4334
13661  4335
13662  4336
13663  4337
13664  4338
13665  4339
13666  433A
13667  433B
13668  433C
13669  433D
13670  433E
13671  433F
13672  4340
13673  4341
13674  4342
13675  4343
13676  4344
13677  4345
13678  4346
13679  4347
13680  4348
13681  4349
13682  434A
13683  434B
13684  434C
13685  434D
13686  434E
13687  434F
13688  4350
13689  4351
13690  4352
13691  4353
13692  4354
13693  4355
13694  4356
13695  4357
13696  4358
13697  4359
13698  435A
13699  435B
13700  435C
13701  435D
13702  435E
13703  435F
13704  4360
13705  4361
13706  4362
13707  4363
13708  4364
13709  4365
13710  4366
13711  4367
13712  4368
13713  4369
13714  436A
13715  436B
13716  436C
13717  436D
13718  436E
13719  436F
13720  4370
13721  4371
13722  4372
13723  4373
13724  4374
13725  4375
13726  4376
13727  4377
13728  4378
13729  4379
13730  437A
13731  437B
13732  437C
13733  437D
13734  437E
13735  437F
13736  4380
13737  4381
13738  4382
13739  4383
13740  4384
13741  4385
13742  4386
13743  4387
13744  4388
13745  4389
13746  438A
13747  438B
13748  438C
13749  438D
13750  438E
13751  438F
13752  4390
13753  4391
13754  4392
13755  4393
13756  4394
13757  4395
13758  4396
13759  4397
13760  4398
13761  4399
13762  439A
13763  439B
13764  439C
13765  439D
13766  439E
13767  439F
13768  43A0
13769  43A1
13770  43A2
13771  43A3
13772  43A4
13773  43A5
13774  43A6
13775  43A7
13776  43A8
13777  43A9
13778  43AA
13779  43AB
13780  43AC
13781  43AD
13782  43AE
13783  43AF
13784  43B0
13785  43B1
13786  43B2
13787  43B3
13788  43B4
13789  43B5
13790  43B6
13791  43B7
13792  43B8
13793  43B9
13794  43BA
13795  43BB
13796  43BC
13797  43BD
13798  43BE
13799  43BF
13800  43C0
13801  43C1
13802  43C2
13803  43C3
13804  43C4
13805  43C5
13806  43C6
13807  43C7
13808  43C8
13809  43C9
13810  43CA
13811  43CB
13812  43CC
13813  43CD
13814  43CE
13815  43CF
13816  43D0
13817  43D1
13818  43D2
13819  43D3
13820  43D4
13821  43D5
13822  43D6
13823  43D7
13824  43D8
13825  43D9
13826  43DA
13827  43DB
13828  43DC
13829  43DD
13830  43DE
13831  43DF
13832  43E0
13833  43E1
13834  43E2
13835  43E3
13836  43E4
13837  43E5
13838  43E6
13839  43E7
13840  43E8
13841  43E9
13842  43EA
13843  43EB
13844  43EC
13845  43ED
13846  43EE
13847  43EF
13848  43F0
13849  43F1
13850  43F2
13851  43F3
13852  43F4
13853  43F5
13854  43F6
13855  43F7
13856  43F8
13857  43F9
13858  43FA
13859  43FB
13860  43FC
13861  43FD
13862  43FE
13863  43FF
13864  4400
13865  4401
13866  4402
13867  4403
13868  4404
13869  4405
13870  4406
13871  4407
13872  4408
13873  4409
13874  440A
13875  440B
13876  440C
13877  440D
13878  440E
13879  440F
13880  4410
13881  4411
13882  4412
13883  4413
13884  4414
13885  4415
13886  4416
13887  4417
13888  4418
13889  4419
13890  441A
13891  441B
13892  441C
13893  441D
13894  441E
13895  441F
13896  4420
13897  4421
13898  4422
13899  4423
13900  4424
13901  4425
13902  4426
13903  4427
13904  4428
13905  4429
13906  442A
13907  442B
13908  442C
13909  442D
13910  442E
13911  442F
13912  4430
13913  4431
13914  4432
13915  4433
13916  4434
13917  4435
13918  4436
13919  4437
13920  4438
13921  4439
13922  443A
13923  443B
13924  443C
13925  443D
13926  443E
13927  443F
13928  4440
13929  4441
13930  4442
13931  4443
13932  4444
13933  4445
13934  4446
13935  4447
13936  4448
13937  4449
13938  444A
13939  444B
13940  444C
13941  444D
13942  444E
13943  444F
13944  4450
13945  4451
13946  4452
13947  4453
13948  4454
13949  4455
13950  4456
13951  4457
13952  4458
13953  4459
13954  445A
13955  445B
13956  445C
13957  445D
13958  445E
13959  445F
13960  4460
13961  4461
13962  4462
13963  4463
13964  4464
13965  4465
13966  4466
13967  4467
13968  4468
13969  4469
13970  446A
13971  446B
13972  446C
13973  446D
13974  446E
13975  446F
13976  4470
13977  4471
13978  4472
13979  4473
13980  4474
13981  4475
13982  4476
13983  4477
13984  4478
13985  4479
13986  447A
13987  447B
13988  447C
13989  447D
13990  447E
13991  447F
13992  4480
13993  4481
13994  4482
13995  4483
13996  4484
13997  4485
13998  4486
13999  4487
14000  4488
14001  4489
14002  448A
14003  448B
14004  448C
14005  448D
14006  448E
14007  448F
14008  4490
14009  4491
14010  4492
14011  4493
14012  4494
14013  4495
14014  4496
14015  4497
14016  4498
14017  4499
14018  449A
14019  449B
14020  449C
14021  449D
14022  449E
14023  449F
14024  44A0
14025  44A1
14026  44A2
14027  44A3
14028  44A4
14029  44A5
14030  44A6
14031  44A7
14032  44A8
14033  44A9
14034  44AA
14035  44AB
14036  44AC
14037  44AD
14038  44AE
14039  44AF
14040  44B0
14041  44B1
14042  44B2
14043  44B3
14044  44B4
14045  44B5
14046  44B6
14047  44B7
14048  44B8
14049  44B9
14050  44BA
14051  44BB
14052  44BC
14053  44BD
14054  44BE
14055  44BF
14056  44C0
14057  44C1
14058  44C2
14059  44C3
14060  44C4
14061  44C5
14062  44C6
14063  44C7
14064  44C8
14065  44C9
14066  44CA
14067  44CB
14068  44CC
14069  44CD
14070  44CE
14071  44CF
14072  44D0
14073  44D1
14074  44D2
14075  44D3
14076  44D4
14077  44D5
14078  44D6
14079  44D7
14080  44D8
14081  44D9
14082  44DA
14083  44DB
14084  44DC
14085  44DD
14086  44DE
14087  44DF
14088  44E0
14089  44E1
14090  44E2
14091  44E3
14092  44E4
14093  44E5
14094  44E6
14095  44E7
14096  44E8
14097  44E9
14098  44EA
14099  44EB
14100  44EC
14101  44ED
14102  44EE
14103  44EF
14104  44F0
14105  44F1
14106  44F2
14107  44F3
14108  44F4
14109  44F5
14110  44F6
14111  44F7
14112  44F8
14113  44F9
14114  44FA
14115  44FB
14116  44FC
14117  44FD
14118  44FE
14119  44FF
14120  4500
14121  4501
14122  4502
14123  4503
14124  4504
14125  4505
14126  4506
14127  4507
14128  4508
14129  4509
14130  450A
14131  450B
14132  450C
14133  450D
14134  450E
14135  450F
14136  4510
14137  4511
14138  4512
14139  4513
14140  4514
14141  4515
14142  4516
14143  4517
14144  4518
14145  4519
14146  451A
14147  451B
14148  451C
14149  451D
14150  451E
14151  451F
14152  4520
14153  4521
14154  4522
14155  4523
14156  4524
14157  4525
14158  4526
14159  4527
14160  4528
14161  4529
14162  452A
14163  452B
14164  452C
14165  452D
14166  452E
14167  452F
14168  4530
14169  4531
14170  4532
14171  4533
14172  4534
14173  4535
14174  4536
14175  4537
14176  4538
14177  4539
14178  453A
14179  453B
14180  453C
14181  453D
14182  453E
14183  453F
14184  4540
14185  4541
14186  4542
14187  4543
14188  4544
14189  4545
14190  4546
14191  4547
14192  4548
14193  4549
14194  454A
14195  454B
14196  454C
14197  454D
14198  454E
14199  454F
14200  4550
14201  4551
14202  4552
14203  4553
14204  4554
14205  4555
14206  4556
14207  4557
14208  4558
14209  4559
14210  455A
14211  455B
14212  455C
14213  455D
14214  455E
14215  455F
14216  4560
14217  4561
14218  4562
14219  4563
14220  4564
14221  4565
14222  4566
14223  4567
14224  4568
14225  4569
14226  456A
14227  456B
14228  456C
14229  456D
14230  456E
14231  456F
14232  4570
14233  4571
14234  4572
14235  4573
14236  4574
14237  4575
14238  4576
14239  4577
14240  4578
14241  4579
14242  457A
14243  457B
14244  457C
14245  457D
14246  457E
14247  457F
14248  4580
14249  4581
14250  4582
14251  4583
14252  4584
14253  4585
14254  4586
14255  4587
14256  4588
14257  4589
14258  458A
14259  458B
14260  458C
14261  458D
14262  458E
14263  458F
14264  4590
14265  4591
14266  4592
14267  4593
14268  4594
14269  4595
14270  4596
14271  4597
14272  4598
14273  4599
14274  459A
14275  459B
14276  459C
14277  459D
14278  459E
14279  459F
14280  45A0
14281  45A1
14282  45A2
14283  45A3
14284  45A4
14285  45A5
14286  45A6
14287  45A7
14288  45A8
14289  45A9
14290  45AA
14291  45AB
14292  45AC
14293  45AD
14294  45AE
14295  45AF
14296  45B0
14297  45B1
14298  45B2
14299  45B3
14300  45B4
14301  45B5
14302  45B6
14303  45B7
14304  45B8
14305  45B9
14306  45BA
14307  45BB
14308  45BC
14309  45BD
14310  45BE
14311  45BF
14312  45C0
14313  45C1
14314  45C2
14315  45C3
14316  45C4
14317  45C5
14318  45C6
14319  45C7
14320  45C8
14321  45C9
14322  45CA
14323  45CB
14324  45CC
14325  45CD
14326  45CE
14327  45CF
14328  45D0
14329  45D1
14330  45D2
14331  45D3
14332  45D4
14333  45D5
14334  45D6
14335  45D7
14336  45D8
14337  45D9
14338  45DA
14339  45DB
14340  45DC
14341  45DD
14342  45DE
14343  45DF
14344  45E0
14345  45E1
14346  45E2
14347  45E3
14348  45E4
14349  45E5
14350  45E6
14351  45E7
14352  45E8
14353  45E9
14354  45EA
14355  45EB
14356  45EC
14357  45ED
14358  45EE
14359  45EF
14360  45F0
14361  45F1
14362  45F2
14363  45F3
14364  45F4
14365  45F5
14366  45F6
14367  45F7
14368  45F8
14369  45F9
14370  45FA
14371  45FB
14372  45FC
14373  45FD
14374  45FE
14375  45FF
14376  4600
14377  4601
14378  4602
14379  4603
14380  4604
14381  4605
14382  4606
14383  4607
14384  4608
14385  4609
14386  460A
14387  460B
14388  460C
14389  460D
14390  460E
14391  460F
14392  4610
14393  4611
14394  4612
14395  4613
14396  4614
14397  4615
14398  4616
14399  4617
14400  4618
14401  4619
14402  461A
14403  461B
14404  461C
14405  461D
14406  461E
14407  461F
14408  4620
14409  4621
14410  4622
14411  4623
14412  4624
14413  4625
14414  4626
14415  4627
14416  4628
14417  4629
14418  462A
14419  462B
14420  462C
14421  462D
14422  462E
14423  462F
14424  4630
14425  4631
14426  4632
14427  4633
14428  4634
14429  4635
14430  4636
14431  4637
14432  4638
14433  4639
14434  463A
14435  463B
14436  463C
14437  463D
14438  463E
14439  463F
14440  4640
14441  4641
14442  4642
14443  4643
14444  4644
14445  4645
14446  4646
14447  4647
14448  4648
14449  4649
14450  464A
14451  464B
14452  464C
14453  464D
14454  464E
14455  464F
14456  4650
14457  4651
14458  4652
14459  4653
14460  4654
14461  4655
14462  4656
14463  4657
14464  4658
14465  4659
14466  465A
14467  465B
14468  465C
14469  465D
14470  465E
14471  465F
14472  4660
14473  4661
14474  4662
14475  4663
14476  4664
14477  4665
14478  4666
14479  4667
14480  4668
14481  4669
14482  466A
14483  466B
14484  466C
14485  466D
14486  466E
14487  466F
14488  4670
14489  4671
14490  4672
14491  4673
14492  4674
14493  4675
14494  4676
14495  4677
14496  4678
14497  4679
14498  467A
14499  467B
14500  467C
14501  467D
14502  467E
14503  467F
14504  4680
14505  4681
14506  4682
14507  4683
14508  4684
14509  4685
14510  4686
14511  4687
14512  4688
14513  4689
14514  468A
14515  468B
14516  468C
14517  468D
14518  468E
14519  468F
14520  4690
14521  4691
14522  4692
14523  4693
14524  4694
14525  4695
14526  4696
14527  4697
14528  4698
14529  4699
14530  469A
14531  469B
14532  469C
14533  469D
14534  469E
14535  469F
14536  46A0
14537  46A1
14538  46A2
14539  46A3
14540  46A4
14541  46A5
14542  46A6
14543  46A7
14544  46A8
14545  46A9
14546  46AA
14547  46AB
14548  46AC
14549  46AD
14550  46AE
14551  46AF
14552  46B0
14553  46B1
14554  46B2
14555  46B3
14556  46B4
14557  46B5
14558  46B6
14559  46B7
14560  46B8
14561  46B9
14562  46BA
14563  46BB
14564  46BC
14565  46BD
14566  46BE
14567  46BF
14568  46C0
14569  46C1
14570  46C2
14571  46C3
14572  46C4
14573  46C5
14574  46C6
14575  46C7
14576  46C8
14577  46C9
14578  46CA
14579  46CB
14580  46CC
14581  46CD
14582  46CE
14583  46CF
14584  46D0
14585  46D1
14586  46D2
14587  46D3
14588  46D4
14589  46D5
14590  46D6
14591  46D7
14592  46D8
14593  46D9
14594  46DA
14595  46DB
14596  46DC
14597  46DD
14598  46DE
14599  46DF
14600  46E0
14601  46E1
14602  46E2
14603  46E3
14604  46E4
14605  46E5
14606  46E6
14607  46E7
14608  46E8
14609  46E9
14610  46EA
14611  46EB
14612  46EC
14613  46ED
14614  46EE
14615  46EF
14616  46F0
14617  46F1
14618  46F2
14619  46F3
14620  46F4
14621  46F5
14622  46F6
14623  46F7
14624  46F8
14625  46F9
14626  46FA
14627  46FB
14628  46FC
14629  46FD
14630  46FE
14631  46FF
14632  4700
14633  4701
14634  4702
14635  4703
14636  4704
14637  4705
14638  4706
14639  4707
14640  4708
14641  4709
14642  470A
14643  470B
14644  470C
14645  470D
14646  470E
14647  470F
14648  4710
14649  4711
14650  4712
14651  4713
14652  4714
14653  4715
14654  4716
14655  4717
14656  4718
14657  4719
14658  471A
14659  471B
14660  471C
14661  471D
14662  471E
14663  471F
14664  4720
14665  4721
014666  000539        
014667  000540  var hFonts[54] ;
014668  000541  var stringsCV[54] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
14669  2400
14670  2401
14671  2402
14672  2403
14673  2404
14674  2405
14675  2406
14676  2407
14677  2408
14678  2409
14679  240A
14680  240B
14681  240C
14682  240D
14683  240E
14684  240F
14685  2410
14686  2411
14687  2412
14688  2413
14689  2414
14690  2415
14691  2416
14692  2417
14693  2418
14694  2419
14695  241A
14696  241B
14697  241C
14698  241D
14699  241E
14700  241F
14701  2420
14702  2421
14703  2422
14704  2423
14705  2424
14706  2425
14707  2426
14708  2427
14709  2428
14710  2429
14711  242A
14712  242B
14713  242C
14714  242D
14715  242E
14716  242F
14717  2430
14718  2431
14719  2432
14720  2433
14721  2434
14722  2435
14723  2436
14724  2437
14725  2438
14726  2439
14727  243A
14728  243B
14729  243C
14730  243D
14731  243E
14732  243F
14733  2440
14734  2441
14735  2442
14736  2443
14737  2444
14738  2445
14739  2446
14740  2447
14741  2448
14742  2449
14743  244A
14744  244B
14745  244C
14746  244D
14747  244E
14748  244F
14749  2450
14750  2451
14751  2452
14752  2453
14753  2454
14754  2455
14755  2456
14756  2457
14757  2458
14758  2459
14759  245A
14760  245B
14761  245C
14762  245D
14763  245E
14764  245F
14765  2460
14766  2461
14767  2462
14768  2463
14769  2464
14770  2465
14771  2466
14772  2467
14773  2468
14774  2469
14775  246A
14776  246B
014777  000542  // Start P2.inc
014778  000543  var oObjects[MaxTotObjects+1] ;                 // address of objects
014779  000544  var CurrentForm ;
014780  000545  var TouchXpos, TouchYpos ;
014781  000546  var InputType, TouchState, CurInputData, pInputIndex ;
014782  000547  var comRX[40], cmd[CMDLenMAX] ;
014783  000548        
014784  000549  var InputCS, OutputCS ;
014785  000550        
014786  000551        
014787  000552        
014788  000553  func seroutCS(var op)
014789  000554      serout(op) ;
014790  000555      OutputCS ^= op ;
014791  000556  endfunc
014792  000557        
014793  000558  func nak0()
014794  000559      serout(NAK) ;
014795  000560      InputCS := 0 ;
014796  000561  endfunc
014797  000562        
014798  000563  func seroutOcs()
014799  000564      serout(OutputCS) ;
014800  000565      OutputCS := 0 ;
014801  000566  endfunc
014802  000567        
014803  000568  func SendReport(var id, var objt, var objn, var val)
014804  000569      seroutCS(id) ;
014805  000570      seroutCS(objt) ;
014806  000571      seroutCS(objn) ;
014807  000572      seroutCS(val >> 8) ; // first 8 bits
014808  000573      seroutCS(val) ;
014809  000574      seroutOcs() ;
014810  000575  endfunc
014811  000576        
014812  000577        
014813  000578  func ReadObject(var ObjectType, var ObjectIdx)
014814  000579      var j, k, Objects ;
014815  000580      Objects := *(oObjects+ObjectType) ;
014816  000581        
014817  000582      j := 2 + ObjectIdx * 2 + Objects ;
014818  000583       if (ObjectType == tForm)
014819  000584          k := CurrentForm ;
014820  000585      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
014821  000586          k := img_GetWord(hndl, *j, IMAGE_TAG2);
014822  000587      else if (ObjectType == tStrings)
014823  000588          k := stringsCV[ObjectIdx];
014824  000589          else
014825  000590          k := img_GetWord(hndl, *j, IMAGE_INDEX);
014826  000591          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
014827  000592                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
014828  000593      endif
014829  000594      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
014830  000595  endfunc
014831  000596        
014832  000597        
014833  000598  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
014834  000599      var i, j, k, Objects ;
014835  000600      ObjectType &= 0x3f ;
014836  000601      if (ObjectType == tForm)
014837  000602          ActivateForm(ObjectIdx) ;
014838  000603      else
014839  000604          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
014840  000605          i := *(Objects) ;
014841  000606          switch (ObjectType)
014842  000607              case tWinButton :
014843  000608                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
014844  000609                  break ;
014845  000610              case tUserButton :
014846  000611                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
014847  000612                  break ;
014848  000613              default : j := -1 ;
014849  000614          endswitch
014850  000615          if (j != -1)
014851  000616              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
014852  000617              NewVal := NewVal << 1 ;
014853  000618              if (OVF())      // button group index change
014854  000619                  if (*(j+InputData+Ofs_IPD_P1))
014855  000620                      k &= 1 ;    // mask off old group index for momentary
014856  000621                  else
014857  000622                      k &= 3 ;    // mask off old group index for toggle
014858  000623                  endif
014859  000624              else            // normal set
014860  000625                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
014861  000626                  k &= 0xfffc ;    // retain only group index for state set
014862  000627              endif
014863  000628              NewVal |= k ;
014864  000629          endif
014865  000630           if (ObjectType == tLeddigits)
014866  000631              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
014867  000632              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
014868  000633          else if (ObjectType == tStrings)
014869  000634              PrintStrings(ObjectIdx, NewVal, 0);
014870  000635          else
014871  000636              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
014872  000637              img_Show(hndl, i) ; // will only display if form is current
014873  000638          endif
014874  000639      endif
014875  000640  endfunc
014876  000641        
014877  000642  func TurnOffButtons(var group)
014878  000643      var j, k, l;
014879  000644      for (j := 0; j < nInputs; j++)
014880  000645          k := j*IPDatasize ;
014881  000646          if (*(InputData+k+Ofs_IPD_P2) == group)
014882  000647              l := -1 ;
014883  000648               if (*(InputData+k) == tWinButton)
014884  000649                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
014885  000650                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
014886  000651                  img_Show(hndl, l);      // only shows on current form
014887  000652              else if (*(InputData+k) == tUserButton)
014888  000653                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
014889  000654                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
014890  000655                  img_Show(hndl, l);      // only shows on current form
014891  000656              endif
014892  000657          endif
014893  000658      next
014894  000659  endfunc
014895  000660        
014896  000661        
014897  000662  // WARNING, this code will crash if newval exceeds maximum displayable number
014898  000663  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
014899  000664      var i, j, k, l, lb, newval ;
014900  000665      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
014901  000666      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
014902  000667      i := -1 ;
014903  000668      j := *(typeptr) ;
014904  000669      repeat
014905  000670          typeptr += 2 ;
014906  000671          i++ ;
014907  000672          until (*(typeptr) == imgidx);
014908  000673      j := setptr + i*10 ;
014909  000674        
014910  000675      imgidx++ ;
014911  000676      l := 1 ;
014912  000677      for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
014913  000678          l *= 10 ;
014914  000679      next
014915  000680      lb := *(j+Ofs_Digits_LeadingBlanks) ;
014916  000681      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
014917  000682          k := newval / l ;
014918  000683          newval -= k * l ;
014919  000684          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
014920  000685              if (k == 0)
014921  000686                  k := 10 ;
014922  000687              else
014923  000688                  lb := 0 ;
014924  000689              endif
014925  000690          endif
014926  000691          l /= 10 ;
014927  000692          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
014928  000693          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
014929  000694          img_Show(hndl, imgidx);
014930  000695      next
014931  000696  endfunc
014932  000697        
014933  000698        
014934  000699  func ActivateForm(var newform)
014935  000700      var i, j, *p ;
014936  000701        
014937  000702      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
014938  000703          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
014939  000704              if (img_GetWord(hndl, i, IMAGE_TAG))
014940  000705                  img_Disable(hndl,i) ;
014941  000706              endif
014942  000707          next
014943  000708      endif
014944  000709      CurrentForm := newform ;
014945  000710      // display newform image or clear to image color
014946  000711      if (FormBGcolors[CurrentForm] != ColorBGimage)
014947  000712          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
014948  000713          gfx_Cls() ;
014949  000714          DoGFXObjects() ;                                    // display GFX 'widgets'
014950  000715      endif
014951  000716        
014952  000717      // enable inputs
014953  000718      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
014954  000719          j := img_GetWord(hndl, i, IMAGE_TAG) ;
014955  000720          if (j)
014956  000721              j-- ;
014957  000722              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
014958  000723              //if (j != tKeyboard)
014959  000724              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
014960  000725                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
014961  000726              endif
014962  000727              img_Show(hndl,i) ; // show initialy, if required
014963  000728              if (j == tForm)
014964  000729                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
014965  000730              else if (j == tLeddigits)
014966  000731                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
014967  000732              endif
014968  000733          endif
014969  000734      next
014970  000735      for (i := 0; i < nStrings; i++)
014971  000736          if (stringsCV[i] != -1)
014972  000737              WriteObject(tStrings, i, stringsCV[i]) ;
014973  000738          endif
014974  000739      next
014975  000740        
014976  000741  endfunc
014977  000742        
014978  000743  func UpdateObjects(var newval)
014979  000744      var IPidx, otherOBJ ;
014980  000745      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
014981  000746        
014982  000747          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
014983  000748              img_Show(hndl, *(pInputIndex));      // only shows on current form
014984  000749          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
014985  000750              if (*(CurInputData+Ofs_IPD_P1))
014986  000751                  newval &= 1;
014987  000752              else
014988  000753                  newval &= 3;
014989  000754              endif
014990  000755              if (newval > 1) newval := 1;
014991  000756          endif
014992  000757          IPidx := *(CurInputData+TouchState) ;
014993  000758          while(IPidx != 0)
014994  000759              otherOBJ := IPidx + InputData;
014995  000760              if (*(otherOBJ) == OT_REPORT)
014996  000761          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
014997  000762              else if (*(otherOBJ) == OT_MAGIC)
014998  000763                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
014999  000764                  IPidx(newval) ;
015000  000765              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
015001  000766                  if (*(otherOBJ) == OT_ACTIVATE)
015002  000767                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
015003  000768                      InputType := tForm ;
015004  000769                  else if (*(otherOBJ) == OT_SETCONST)
015005  000770                      newval := *(otherOBJ+Ofs_IPD_P3) ;
015006  000771                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015007  000772                  else if (*(otherOBJ) == OT_SETANOTHER)
015008  000773                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015009  000774                  else if (*(otherOBJ) == OT_PREVFRAME)
015010  000775                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
015011  000776                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
015012  000777                      endif
015013  000778                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015014  000779                  else if (*(otherOBJ) == OT_NEXTFRAME)
015015  000780                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
015016  000781                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
015017  000782                      endif
015018  000783                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015019  000784                  else if (*(otherOBJ) == OT_PREVSTRING)
015020  000785                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
015021  000786                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
015022  000787                      endif
015023  000788                  else if (*(otherOBJ) == OT_NEXTSTRING)
015024  000789                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
015025  000790                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
015026  000791                      endif
015027  000792                  endif
015028  000793              endif
015029  000794              IPidx := *(otherOBJ+TouchState) ;
015030  000795          wend
015031  000796      endif
015032  000797  endfunc
015033  000798        
015034  000799  // End P2.inc
015035  000800  func DoGFXObjects()
015036  000801  endfunc
015037  000802        
015038  000803  // Start P3.inc
015039  000804  func main()
015040  000805      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
015041  000806        
015042  000807      putstr("Mounting...\n");
015043  000808      if (!(file_Mount()))
015044  000809          while(!(file_Mount()))
015045  000810              putstr("Drive not mounted...");
015046  000811              pause(200);
015047  000812              gfx_Cls();
015048  000813              pause(200);
015049  000814          wend
015050  000815      endif
015051  000816  //    gfx_MoveTo(0, 0);
015052  000817  //    print(mem_Heap()," ") ;
015053  000818  //    gfx_TransparentColour(0x0020);
015054  000819  //    gfx_Transparency(ON);
015055  000820        
015056  000821      gfx_ScreenMode(LANDSCAPE) ;
015057  000822        
015058  000823      // open image control
015059  000824      hndl := file_LoadImageControl("RepRap_T.dat", "RepRap_T.gci", 1);
015060  000825        
015061  000826      // init 'constants'
015062  000827  // End P3.inc
015063  000828        
015064  000829      oObjects[tDipSwitch] := oDipSwitchs ;
015065  000830      oObjects[tKnob] := oKnobs ;
015066  000831      oObjects[tRockerSwitch] := oRockerSwitchs ;
015067  000832      oObjects[tRotarySwitch] := oRotarySwitchs ;
015068  000833      oObjects[tGSlider] := oGSliders ;
015069  000834      oObjects[tTrackbar] := oTrackbars ;
015070  000835      oObjects[tWinButton] := oWinButtons ;
015071  000836      oObjects[tAngularmeter] := oAngularmeters ;
015072  000837      oObjects[tCoolgauge] := oCoolgauges ;
015073  000838      oObjects[tCustomdigits] := oCustomdigitss ;
015074  000839      oObjects[tForm] := oForms ;
015075  000840      oObjects[tGauge] := oGauges ;
015076  000841      oObjects[tImage] := oImages ;
015077  000842      oObjects[tKeyboard] := oKeyboards ;
015078  000843      oObjects[tLed] := oLeds ;
015079  000844      oObjects[tLeddigits] := oLeddigitss ;
015080  000845      oObjects[tMeter] := oMeters ;
015081  000846      oObjects[tStrings] := oStringss ;
015082  000847      oObjects[tThermometer] := oThermometers ;
015083  000848      oObjects[tUserled] := oUserleds ;
015084  000849      oObjects[tVideo] := oVideos ;
015085  000850      oObjects[tStaticText] := oStaticTexts ;
015086  000851      oObjects[tSounds] := oSoundss ;
015087  000852      oObjects[tTimer] := oTimers ;
015088  000853      oObjects[tSpectrum] := oSpectrums ;
015089  000854      oObjects[tTank] := oTanks ;
015090  000855      oObjects[tUserImages] := oUserImagess ;
015091  000856      oObjects[tPinOutput] := oPinOutputs ;
015092  000857      oObjects[tPinInput] := oPinInputs ;
015093  000858      oObjects[t4Dbutton] := o4Dbuttons ;
015094  000859      oObjects[tAniButton] := oAniButtons ;
015095  000860      oObjects[tColorPicker] := oColorPickers ;
015096  000861      oObjects[tUserButton] := oUserButtons ;
015097  000862      hFonts[0] := file_LoadImageControl("RepRap_T.d04", "RepRap_T.g04", 1)  ;
015098  000863      hFonts[1] := file_LoadImageControl("RepRap_T.d02", "RepRap_T.g02", 1)  ;
015099  000864      hFonts[2] := file_LoadImageControl("RepRap_T.d03", "RepRap_T.g03", 1)  ;
015100  000865      hFonts[3] := file_LoadImageControl("RepRap_T.d01", "RepRap_T.g01", 1)  ;
015101  000866      hFonts[4] := FONT3 ;
015102  000867      hFonts[5] := file_LoadImageControl("RepRap_T.d0@", "RepRap_T.g0@", 1)  ;
015103  000868      hFonts[6] := FONT3 ;
015104  000869      hFonts[10] := file_LoadImageControl("RepRap_T.d0B", "RepRap_T.g0B", 1)  ;
015105  000870      hFonts[11] := file_LoadImageControl("RepRap_T.d07", "RepRap_T.g07", 1)  ;
015106  000871      hFonts[12] := file_LoadImageControl("RepRap_T.d06", "RepRap_T.g06", 1)  ;
015107  000872      hFonts[16] := FONT3 ;
015108  000873      hFonts[17] := file_LoadImageControl("RepRap_T.d0C", "RepRap_T.g0C", 1)  ;
015109  000874      hFonts[31] := file_LoadImageControl("RepRap_T.d08", "RepRap_T.g08", 1)  ;
015110  000875      hFonts[37] := file_LoadImageControl("RepRap_T.d05", "RepRap_T.g05", 1)  ;
015111  000876      hFonts[50] := file_LoadImageControl("RepRap_T.d09", "RepRap_T.g09", 1)  ;
015112  000877      hFonts[51] := FONT3 ;
015113  000878      hFonts[52] := FONT3 ;
015114  000879      hFonts[7] := hFonts[37] ;
015115  000880      hFonts[8] := hFonts[37] ;
015116  000881      hFonts[9] := hFonts[0] ;
015117  000882      hFonts[29] := hFonts[11] ;
015118  000883      hFonts[32] := hFonts[31] ;
015119  000884      hFonts[34] := hFonts[0] ;
015120  000885      hFonts[36] := hFonts[0] ;
015121  000886      hFonts[38] := hFonts[37] ;
015122  000887      hFonts[39] := hFonts[37] ;
015123  000888      hFonts[40] := hFonts[0] ;
015124  000889      hFonts[41] := hFonts[0] ;
015125  000890      hFonts[42] := hFonts[0] ;
015126  000891      hFonts[43] := hFonts[37] ;
015127  000892      hFonts[44] := hFonts[37] ;
015128  000893      hFonts[45] := hFonts[37] ;
015129  000894      hFonts[53] := hFonts[50] ;
015130  000895  // Start P4.inc
015131  000896      hstrings := file_Open("RepRap_T.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
015132  000897      // init comms
015133  000898      com_Init(comRX,CMDLenMAX,0);
015134  000899      com_SetBaud(COM0,19886);
015135  000900      com_TXbuffer(comTX, 100, 0);
015136  000901      snd_BufSize(2) ;
015137  000902      // tag 'real' objects
015138  000903      for (i := 0; i <= MaxTotObjects; i++)
015139  000904          if (   (i != tSounds)
015140  000905              && (i != tTimer)
015141  000906              && (i != tPinOutput)
015142  000907              && (i != tPinInput) )
015143  000908              TouchXpos := oObjects[i] ;
015144  000909              TouchYpos := *(TouchXpos) ;
015145  000910              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
015146  000911                  oldn := *(TouchXpos+ImageTouched*2) ;
015147  000912                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
015148  000913                  if (oldn != -1)
015149  000914                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
015150  000915                      img_Disable(hndl, oldn) ;
015151  000916                  endif
015152  000917              next
015153  000918          endif
015154  000919      next
015155  000920        
015156  000921      // display initial form
015157  000922      CurrentForm := -1 ;
015158  000923      ActivateForm(0) ; // need to change this according to first actual form
015159  000924        
015160  000925  // End P4.inc
015161  000926  // Start P5.inc
015162  000927      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
015163  000928      oldn := -1 ;
015164  000929      repeat
015165  000930        
015166  000931          // check comms for command, how to NAK invalid command
015167  000932          if (com_Count() != 0)
015168  000933              i := serin() ;
015169  000934              InputCS ^= i ;               // update checksum
015170  000935              if (   (cmdi > 2)
015171  000936                  && (cmd[0] == WRITE_STRU) )
015172  000937                  j := (cmdi-1) >> 1 + 2 ;
015173  000938                  if (j == CMDLenMAX)    // max length exceeded
015174  000939                      nak0() ;
015175  000940                      cmdi := -1 ;
015176  000941                  else if (cmdi & 1)
015177  000942                      cmd[j] := i ;
015178  000943                      if (cmd[2] == 0)    // if string complete
015179  000944                          if (InputCS)
015180  000945                              nak0() ;
015181  000946                          else
015182  000947                              if (cmd[0] == WRITE_STRU)
015183  000948                              cmd[j] := 0 ;                     // terminate it
015184  000949                              PrintStrings(cmd[1], &cmd[3], 1) ;
015185  000950                              serout(ACK) ;
015186  000951                              else
015187  000952                              endif
015188  000953                          endif
015189  000954                          cmdi := -1 ;
015190  000955                      endif
015191  000956                  else
015192  000957                      cmd[j] := cmd[j] << 8 + i ;
015193  000958                      cmd[2]-- ;          // dec length
015194  000959                  endif
015195  000960                  cmdi++ ;
015196  000961              else // not unicode string
015197  000962                  cmd[cmdi++] := i ;
015198  000963                   if (cmd[0] == WRITE_STR)                  // Ansi String
015199  000964                      if (cmdi == CMDLenMAX)      // max length exceeded
015200  000965                          nak0() ;
015201  000966                          cmdi := 0 ;
015202  000967                      else if (cmdi > 2)
015203  000968                          if (cmd[2] == -1)
015204  000969                              if (InputCS)
015205  000970                                  nak0() ;
015206  000971                              else
015207  000972                                  if (cmd[0] == WRITE_STR)
015208  000973                                  cmd[cmdi-1] := 0 ;                     // terminate it
015209  000974                                  PrintStrings(cmd[1], &cmd[3], 1) ;
015210  000975                                  serout(ACK) ;
015211  000976                                  else
015212  000977                                  endif
015213  000978                              endif
015214  000979                              cmdi := 0 ;
015215  000980                          else
015216  000981                              cmd[2]-- ;          // dec length
015217  000982                          endif
015218  000983                      endif
015219  000984                  else if (   (cmd[0] == READ_OBJ)
015220  000985                           && (cmdi == 4)         )
015221  000986                      if (InputCS)
015222  000987                          nak0() ;
015223  000988                      else
015224  000989                          ReadObject(cmd[1], cmd[2]) ;
015225  000990                      endif
015226  000991                      cmdi := 0 ;
015227  000992                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
015228  000993                           && (cmdi == 6)          )
015229  000994                      if (InputCS)
015230  000995                          nak0() ;
015231  000996                      else
015232  000997                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
015233  000998                          serout(ACK) ;
015234  000999                      endif
015235  001000                      cmdi := 0 ;
015236  001001                  else if (   (cmd[0] == WRITE_CONTRAST)
015237  001002                           && (cmdi == 3)         )
015238  001003                      if (InputCS)
015239  001004                          nak0() ;
015240  001005                      else
015241  001006                          gfx_Contrast(cmd[1]) ;
015242  001007                          serout(ACK) ;
015243  001008                      endif
015244  001009                      cmdi := 0 ;
015245  001010                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
015246  001011                      nak0() ;
015247  001012                      cmdi := 0 ;
015248  001013                  endif
015249  001014              endif   // not unicode string
015250  001015          endif   // a character is available
015251  001016        
015252  001017        
015253  001018      // touch code processing
015254  001019        
015255  001020          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
015256  001021          ImageTouched := img_Touched(hndl,-1) ;
015257  001022          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
015258  001023              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
015259  001024                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
015260  001025              endif
015261  001026              if (TouchStatus != TOUCH_RELEASED)        // if not released
015262  001027                  if (oldn != -1)
015263  001028                      ImageTouched := oldn ;
015264  001029                  else
015265  001030                      if (oldn != ImageTouched)
015266  001031                  oldn := ImageTouched ;
015267  001032                          TouchStatus := TOUCH_PRESSED ;
015268  001033                      endif
015269  001034                  endif
015270  001035                  TouchXpos  := touch_Get(TOUCH_GETX);
015271  001036                  TouchYpos  := touch_Get(TOUCH_GETY);
015272  001037                  TouchState := Ofs_IPD_DOWN ;
015273  001038              else
015274  001039                  ImageTouched := oldn ;                     // simulate release of what we touched
015275  001040                  oldn := -1 ;                    // prevent double release
015276  001041                  TouchState := Ofs_IPD_RELEASE ;
015277  001042              endif
015278  001043              if (ImageTouched != -1)
015279  001044                          CurInputData := InputControls[ImageTouched] + InputData;
015280  001045                          InputType := *(CurInputData) ;
015281  001046                          i := InputType ;
015282  001047                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
015283  001048                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
015284  001049              endif
015285  001050          endif
015286  001051   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
015287  001052        
015288  001053          sys_EventsResume() ;
015289  001054      forever
015290  001055        
015291  001056  cDipswitch:
015292  001057        
015293  001058  cKnob:
015294  001059        
015295  001060  cRockerswitch:
015296  001061        
015297  001062  cRotaryswitch:
015298  001063        
015299  001064  cSlider:
015300  001065  cTrackbar:
015301  001066        
015302  001067  c4DButton:
015303  001068  cUserButton:
015304  001069      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
015305  001070      goto gbutton ;
015306  001071  cWinbutton:
015307  001072      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
015308  001073  gbutton:
015309  001074      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
015310  001075      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
015311  001076          if (TouchStatus == TOUCH_RELEASED)
015312  001077              i &= 0xfffe ;
015313  001078              TouchState == Ofs_IPD_DOWN ;
015314  001079          else
015315  001080              i |= 1 ;
015316  001081              TouchState == Ofs_IPD_RELEASE ;
015317  001082          endif
015318  001083      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
015319  001084          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
015320  001085              if ((i & 3) == 3)
015321  001086                  i &= 0xfffc ;
015322  001087              else
015323  001088                  i++ ;
015324  001089              endif
015325  001090          else
015326  001091              i |= 1 ;                                      // make down regardless of current state
015327  001092          endif
015328  001093      else                        // group action, up all other buttons on touch press, reports 0 for button down
015329  001094          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
015330  001095              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
015331  001096          endif
015332  001097          i := (i & 0xfffc) | 2 ;
015333  001098      endif
015334  001099        
015335  001100      UpdateObjects(i) ;
015336  001101  endsub ;
015337  001102        
015338  001103  cAniButton:
015339  001104        
015340  001105  cColorPicker:
015341  001106        
015342  001107  endfunc
015343  001108  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 764 file:RepRap_Touchv1.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 700 file:RepRap_Touchv1.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       12208  0x00002fb0 (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 90)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (not used)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  382  0x0000017e (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 150)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                302  0x0000012e (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         298  0x0000012a (mem) word (global)  (usage 27)
CurrentForm                          288  0x00000120 (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (not used)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (usage 6)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       11576  0x00002d38 (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 39)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (usage 15)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                        8975  0x0000230fFormBGcolors                        8975  0x0000230f (mem) word[50] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                         107  0x0000006bFormEndIndex                         107  0x0000006b (mem) word[50] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[50] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[54] (global)  (usage 150)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             218  0x000000da (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm0                                 0  0x00000000 (const ??? 0)  (usage 3)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                               86  0x00000056 (const ??? 0)  (usage 3)
iForm11                               72  0x00000048 (const ??? 0)  (usage 3)
iForm12                               46  0x0000002e (const ??? 0)  (usage 3)
iForm13                              182  0x000000b6 (const ??? 0)  (usage 3)
iForm14                               47  0x0000002f (const ??? 0)  (usage 3)
iForm15                              186  0x000000ba (const ??? 0)  (usage 3)
iForm16                              144  0x00000090 (const ??? 0)  (usage 3)
iForm18                              147  0x00000093 (const ??? 0)  (usage 3)
iForm19                               51  0x00000033 (const ??? 0)  (usage 3)
iForm2                                 4  0x00000004 (const ??? 0)  (usage 3)
iForm20                               54  0x00000036 (const ??? 0)  (usage 3)
iForm21                               58  0x0000003a (const ??? 0)  (usage 3)
iForm22                              188  0x000000bc (const ??? 0)  (usage 3)
iForm23                               62  0x0000003e (const ??? 0)  (usage 3)
iForm24                               66  0x00000042 (const ??? 0)  (usage 3)
iForm25                              210  0x000000d2 (const ??? 0)  (usage 3)
iForm26                               70  0x00000046 (const ??? 0)  (usage 3)
iForm27                               74  0x0000004a (const ??? 0)  (usage 3)
iForm28                               96  0x00000060 (const ??? 0)  (usage 3)
iForm29                              100  0x00000064 (const ??? 0)  (usage 3)
iForm3                               178  0x000000b2 (const ??? 0)  (usage 3)
iForm30                              109  0x0000006d (const ??? 0)  (usage 3)
iForm31                              113  0x00000071 (const ??? 0)  (usage 3)
iForm32                              117  0x00000075 (const ??? 0)  (usage 3)
iForm33                              121  0x00000079 (const ??? 0)  (usage 3)
iForm34                              133  0x00000085 (const ??? 0)  (usage 3)
iForm35                              137  0x00000089 (const ??? 0)  (usage 3)
iForm36                              191  0x000000bf (const ??? 0)  (usage 3)
iForm37                              193  0x000000c1 (const ??? 0)  (usage 3)
iForm38                              149  0x00000095 (const ??? 0)  (usage 3)
iForm39                              195  0x000000c3 (const ??? 0)  (usage 3)
iForm4                                 9  0x00000009 (const ??? 0)  (usage 3)
iForm40                              159  0x0000009f (const ??? 0)  (usage 3)
iForm41                              162  0x000000a2 (const ??? 0)  (usage 3)
iForm42                              198  0x000000c6 (const ??? 0)  (usage 3)
iForm43                              165  0x000000a5 (const ??? 0)  (usage 3)
iForm44                              168  0x000000a8 (const ??? 0)  (usage 3)
iForm45                              201  0x000000c9 (const ??? 0)  (usage 3)
iForm46                              204  0x000000cc (const ??? 0)  (usage 3)
iForm47                              207  0x000000cf (const ??? 0)  (usage 3)
iForm48                              215  0x000000d7 (const ??? 0)  (usage 3)
iForm49                              220  0x000000dc (const ??? 0)  (usage 3)
iForm5                                14  0x0000000e (const ??? 0)  (usage 3)
iForm6                                17  0x00000011 (const ??? 0)  (usage 3)
iForm7                               141  0x0000008d (const ??? 0)  (usage 3)
iForm9                                42  0x0000002a (const ??? 0)  (usage 3)
iiLeddigits0                          31  0x0000001f (const ??? 0)  (not used)
iiLeddigits1                          33  0x00000021 (const ??? 0)  (not used)
iiLeddigits2                          35  0x00000023 (const ??? 0)  (not used)
iLeddigits0                           30  0x0000001e (const ??? 0)  (usage 3)
iLeddigits1                           32  0x00000020 (const ??? 0)  (usage 3)
iLeddigits2                           34  0x00000022 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        207  0x000000cfInputControls                        207  0x000000cf (mem) word[224] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
InputCS                              542  0x0000021e (mem) word (global)  (usage 21)
InputData                            655  0x0000028fInputData                            655  0x0000028f (mem) word[3388] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 30)
InputType                            294  0x00000126 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                          67  0x00000043 (const ??? 0)  (usage 3)
iStatictext1                          36  0x00000024 (const ??? 0)  (usage 3)
iStatictext12                        176  0x000000b0 (const ??? 0)  (usage 3)
iStatictext13                        161  0x000000a1 (const ??? 0)  (usage 3)
iStatictext14                        209  0x000000d1 (const ??? 0)  (usage 3)
iStatictext2                          37  0x00000025 (const ??? 0)  (usage 3)
iStatictext4                          38  0x00000026 (const ??? 0)  (usage 3)
iStatictext6                         160  0x000000a0 (const ??? 0)  (usage 3)
iStatictext8                          60  0x0000003c (const ??? 0)  (usage 3)
iStrings0                           7431  0x00001d07iStrings0                           7431  0x00001d07 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings1                           7457  0x00001d21iStrings1                           7457  0x00001d21 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings10                          7691  0x00001e0biStrings10                          7691  0x00001e0b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings11                          7717  0x00001e25iStrings11                          7717  0x00001e25 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings12                          7743  0x00001e3fiStrings12                          7743  0x00001e3f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings16                          7769  0x00001e59iStrings16                          7769  0x00001e59 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings17                          7795  0x00001e73iStrings17                          7795  0x00001e73 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings2                           7483  0x00001d3biStrings2                           7483  0x00001d3b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings29                          7821  0x00001e8diStrings29                          7821  0x00001e8d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings3                           7509  0x00001d55iStrings3                           7509  0x00001d55 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings31                          7847  0x00001ea7iStrings31                          7847  0x00001ea7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings32                          7873  0x00001ec1iStrings32                          7873  0x00001ec1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings34                          7899  0x00001edbiStrings34                          7899  0x00001edb (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings36                          7925  0x00001ef5iStrings36                          7925  0x00001ef5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings37                          7951  0x00001f0fiStrings37                          7951  0x00001f0f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings38                          7977  0x00001f29iStrings38                          7977  0x00001f29 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings39                          8003  0x00001f43iStrings39                          8003  0x00001f43 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings4                           7535  0x00001d6fiStrings4                           7535  0x00001d6f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings40                          8029  0x00001f5diStrings40                          8029  0x00001f5d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings41                          8055  0x00001f77iStrings41                          8055  0x00001f77 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings42                          8081  0x00001f91iStrings42                          8081  0x00001f91 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings43                          8107  0x00001fabiStrings43                          8107  0x00001fab (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings44                          8133  0x00001fc5iStrings44                          8133  0x00001fc5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings45                          8159  0x00001fdfiStrings45                          8159  0x00001fdf (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings5                           7561  0x00001d89iStrings5                           7561  0x00001d89 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings50                          8185  0x00001ff9iStrings50                          8185  0x00001ff9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings51                          8211  0x00002013iStrings51                          8211  0x00002013 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings52                          8237  0x0000202diStrings52                          8237  0x0000202d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings53                          8263  0x00002047iStrings53                          8263  0x00002047 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings6                           7587  0x00001da3iStrings6                           7587  0x00001da3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings7                           7613  0x00001dbdiStrings7                           7613  0x00001dbd (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings8                           7639  0x00001dd7iStrings8                           7639  0x00001dd7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings9                           7665  0x00001df1iStrings9                           7665  0x00001df1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                        143  0x0000008f (const ??? 0)  (usage 3)
iUserbutton100                        83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton101                        84  0x00000054 (const ??? 0)  (usage 3)
iUserbutton102                       122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton103                       123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton104                       124  0x0000007c (const ??? 0)  (usage 3)
iUserbutton105                       125  0x0000007d (const ??? 0)  (usage 3)
iUserbutton106                       126  0x0000007e (const ??? 0)  (usage 3)
iUserbutton107                       127  0x0000007f (const ??? 0)  (usage 3)
iUserbutton108                       128  0x00000080 (const ??? 0)  (usage 3)
iUserbutton109                       129  0x00000081 (const ??? 0)  (usage 3)
iUserbutton11                         97  0x00000061 (const ??? 0)  (usage 3)
iUserbutton110                       130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton111                       131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton112                       134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton113                       135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton114                       136  0x00000088 (const ??? 0)  (usage 3)
iUserbutton115                       138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton116                       139  0x0000008b (const ??? 0)  (usage 3)
iUserbutton117                       140  0x0000008c (const ??? 0)  (usage 3)
iUserbutton118                        65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton119                       218  0x000000da (const ??? 0)  (usage 3)
iUserbutton12                         15  0x0000000f (const ??? 0)  (usage 3)
iUserbutton120                       152  0x00000098 (const ??? 0)  (usage 3)
iUserbutton121                       153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton122                       154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton123                       155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton124                       156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton125                       157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton126                       158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton127                       219  0x000000db (const ??? 0)  (usage 3)
iUserbutton128                       221  0x000000dd (const ??? 0)  (usage 3)
iUserbutton129                       222  0x000000de (const ??? 0)  (usage 3)
iUserbutton13                         16  0x00000010 (const ??? 0)  (usage 3)
iUserbutton130                       223  0x000000df (const ??? 0)  (usage 3)
iUserbutton131                       214  0x000000d6 (const ??? 0)  (usage 3)
iUserbutton14                          7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton151                       169  0x000000a9 (const ??? 0)  (usage 3)
iUserbutton152                       170  0x000000aa (const ??? 0)  (usage 3)
iUserbutton153                       171  0x000000ab (const ??? 0)  (usage 3)
iUserbutton154                       172  0x000000ac (const ??? 0)  (usage 3)
iUserbutton155                       173  0x000000ad (const ??? 0)  (usage 3)
iUserbutton156                       174  0x000000ae (const ??? 0)  (usage 3)
iUserbutton157                       175  0x000000af (const ??? 0)  (usage 3)
iUserbutton158                       146  0x00000092 (const ??? 0)  (usage 3)
iUserbutton159                        21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton16                         45  0x0000002d (const ??? 0)  (usage 3)
iUserbutton160                       177  0x000000b1 (const ??? 0)  (usage 3)
iUserbutton17                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton18                         43  0x0000002b (const ??? 0)  (usage 3)
iUserbutton19                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton2                          19  0x00000013 (const ??? 0)  (usage 3)
iUserbutton20                         85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton21                         75  0x0000004b (const ??? 0)  (usage 3)
iUserbutton22                         76  0x0000004c (const ??? 0)  (usage 3)
iUserbutton23                         87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton24                         88  0x00000058 (const ??? 0)  (usage 3)
iUserbutton25                         89  0x00000059 (const ??? 0)  (usage 3)
iUserbutton26                        132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton27                        179  0x000000b3 (const ??? 0)  (usage 3)
iUserbutton28                        180  0x000000b4 (const ??? 0)  (usage 3)
iUserbutton29                        181  0x000000b5 (const ??? 0)  (usage 3)
iUserbutton3                          29  0x0000001d (const ??? 0)  (usage 3)
iUserbutton30                        183  0x000000b7 (const ??? 0)  (usage 3)
iUserbutton31                        184  0x000000b8 (const ??? 0)  (usage 3)
iUserbutton32                         49  0x00000031 (const ??? 0)  (usage 3)
iUserbutton33                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton34                        166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton35                        185  0x000000b9 (const ??? 0)  (usage 3)
iUserbutton36                        187  0x000000bb (const ??? 0)  (usage 3)
iUserbutton37                        192  0x000000c0 (const ??? 0)  (usage 3)
iUserbutton38                        194  0x000000c2 (const ??? 0)  (usage 3)
iUserbutton39                        189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton4                           5  0x00000005 (const ??? 0)  (usage 3)
iUserbutton40                        196  0x000000c4 (const ??? 0)  (usage 3)
iUserbutton41                        145  0x00000091 (const ??? 0)  (usage 3)
iUserbutton42                        199  0x000000c7 (const ??? 0)  (usage 3)
iUserbutton43                        211  0x000000d3 (const ??? 0)  (usage 3)
iUserbutton44                        202  0x000000ca (const ??? 0)  (usage 3)
iUserbutton45                        148  0x00000094 (const ??? 0)  (usage 3)
iUserbutton46                        205  0x000000cd (const ??? 0)  (usage 3)
iUserbutton47                        212  0x000000d4 (const ??? 0)  (usage 3)
iUserbutton48                        213  0x000000d5 (const ??? 0)  (usage 3)
iUserbutton49                        142  0x0000008e (const ??? 0)  (usage 3)
iUserbutton5                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton50                         20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton51                         77  0x0000004d (const ??? 0)  (usage 3)
iUserbutton52                         52  0x00000034 (const ??? 0)  (usage 3)
iUserbutton53                         59  0x0000003b (const ??? 0)  (usage 3)
iUserbutton54                        206  0x000000ce (const ??? 0)  (usage 3)
iUserbutton55                        197  0x000000c5 (const ??? 0)  (usage 3)
iUserbutton56                        200  0x000000c8 (const ??? 0)  (usage 3)
iUserbutton57                        203  0x000000cb (const ??? 0)  (usage 3)
iUserbutton58                        208  0x000000d0 (const ??? 0)  (usage 3)
iUserbutton59                        190  0x000000be (const ??? 0)  (usage 3)
iUserbutton6                          10  0x0000000a (const ??? 0)  (usage 3)
iUserbutton60                        216  0x000000d8 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        217  0x000000d9 (const ??? 0)  (usage 3)
iUserbutton63                         39  0x00000027 (const ??? 0)  (usage 3)
iUserbutton65                        150  0x00000096 (const ??? 0)  (usage 3)
iUserbutton66                         63  0x0000003f (const ??? 0)  (usage 3)
iUserbutton67                        163  0x000000a3 (const ??? 0)  (usage 3)
iUserbutton68                         64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton69                         68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton7                          11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton70                        151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton72                         78  0x0000004e (const ??? 0)  (usage 3)
iUserbutton73                         90  0x0000005a (const ??? 0)  (usage 3)
iUserbutton74                        167  0x000000a7 (const ??? 0)  (usage 3)
iUserbutton75                         55  0x00000037 (const ??? 0)  (usage 3)
iUserbutton76                         56  0x00000038 (const ??? 0)  (usage 3)
iUserbutton77                         57  0x00000039 (const ??? 0)  (usage 3)
iUserbutton78                         91  0x0000005b (const ??? 0)  (usage 3)
iUserbutton79                         92  0x0000005c (const ??? 0)  (usage 3)
iUserbutton8                          12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton80                         93  0x0000005d (const ??? 0)  (usage 3)
iUserbutton81                         94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton82                         95  0x0000005f (const ??? 0)  (usage 3)
iUserbutton83                         98  0x00000062 (const ??? 0)  (usage 3)
iUserbutton84                        101  0x00000065 (const ??? 0)  (usage 3)
iUserbutton85                        102  0x00000066 (const ??? 0)  (usage 3)
iUserbutton86                        103  0x00000067 (const ??? 0)  (usage 3)
iUserbutton87                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton88                        105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton89                        106  0x0000006a (const ??? 0)  (usage 3)
iUserbutton9                          13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton90                        107  0x0000006b (const ??? 0)  (usage 3)
iUserbutton91                        108  0x0000006c (const ??? 0)  (usage 3)
iUserbutton92                         99  0x00000063 (const ??? 0)  (usage 3)
iUserbutton93                        111  0x0000006f (const ??? 0)  (usage 3)
iUserbutton94                        114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton95                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton96                         79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton97                         80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton98                         81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton99                         82  0x00000052 (const ??? 0)  (usage 3)
iUserimages1                          53  0x00000035 (const ??? 0)  (usage 3)
iUserimages10                         71  0x00000047 (const ??? 0)  (usage 3)
iUserimages11                        164  0x000000a4 (const ??? 0)  (usage 3)
iUserimages13                         61  0x0000003d (const ??? 0)  (usage 3)
iUserimages16                         69  0x00000045 (const ??? 0)  (usage 3)
iUserimages2                          73  0x00000049 (const ??? 0)  (usage 3)
iUserimages3                         110  0x0000006e (const ??? 0)  (usage 3)
iUserimages4                         115  0x00000073 (const ??? 0)  (usage 3)
iUserimages5                         119  0x00000077 (const ??? 0)  (usage 3)
iUserimages7                         112  0x00000070 (const ??? 0)  (usage 3)
iUserimages8                         116  0x00000074 (const ??? 0)  (usage 3)
iUserimages9                         120  0x00000078 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                           22  0x00000016 (const ??? 0)  (usage 3)
iWinbutton1                           23  0x00000017 (const ??? 0)  (usage 3)
iWinbutton2                           24  0x00000018 (const ??? 0)  (usage 3)
iWinbutton3                           25  0x00000019 (const ??? 0)  (usage 3)
iWinbutton4                           26  0x0000001a (const ??? 0)  (usage 3)
iWinbutton5                           40  0x00000028 (const ??? 0)  (usage 3)
iWinbutton6                           41  0x00000029 (const ??? 0)  (usage 3)
iWinbutton7                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton8                           28  0x0000001c (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 9075  0x00002373kKeyboardKeystrokes                 9075  0x00002373 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   12554  0x0000310a (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                                9641  0x000025a9 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               13676  0x0000356c (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              308  0x00000134 (const dword)  (usage 3)
nObjects                             224  0x000000e0 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              54  0x00000036 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                          8639  0x000021bfo4Dbuttons                          8639  0x000021bf (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAngularmeters                      8321  0x00002081oAngularmeters                      8321  0x00002081 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAniButtons                         8641  0x000021c1oAniButtons                         8641  0x000021c1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       8643  0x000021c3oColorPickers                       8643  0x000021c3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCoolgauges                         8323  0x00002083oCoolgauges                         8323  0x00002083 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCustomdigitss                      8325  0x00002085oCustomdigitss                      8325  0x00002085 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oDipSwitchs                         8289  0x00002061oDipSwitchs                         8289  0x00002061 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              8327  0x00002087oForms                              8327  0x00002087 (mem) word[51] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 15)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                             8429  0x000020edoGauges                             8429  0x000020ed (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGSliders                           8297  0x00002069oGSliders                           8297  0x00002069 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oImages                             8431  0x000020efoImages                             8431  0x000020ef (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKeyboards                          8433  0x000020f1oKeyboards                          8433  0x000020f1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKnobs                              8291  0x00002063oKnobs                              8291  0x00002063 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLedDigitsn                         9079  0x00002377oLedDigitsn                         9079  0x00002377 (mem) word[15] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
oLeddigitss                         8437  0x000020f5oLeddigitss                         8437  0x000020f5 (mem) word[4] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
oLeds                               8435  0x000020f3oLeds                               8435  0x000020f3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             8445  0x000020fdoMeters                             8445  0x000020fd (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             220  0x000000dc (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                          8637  0x000021bdoPinInputs                          8637  0x000021bd (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oPinOutputs                         8973  0x0000230doPinOutputs                         8973  0x0000230d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      8293  0x00002065oRockerSwitchs                      8293  0x00002065 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oRotarySwitchs                      8295  0x00002067oRotarySwitchs                      8295  0x00002067 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oScopes                             8597  0x00002195oScopes                             8597  0x00002195 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
oSoundss                            8971  0x0000230boSoundss                            8971  0x0000230b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oSpectrums                          8595  0x00002193oSpectrums                          8595  0x00002193 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStaticTexts                        8563  0x00002173oStaticTexts                        8563  0x00002173 (mem) word[16] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStringss                           8447  0x000020ffoStringss                           8447  0x000020ff (mem) word[55] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 90)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 393)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              8599  0x00002197oTanks                              8599  0x00002197 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oThermometers                       8557  0x0000216doThermometers                       8557  0x0000216d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTimers                             8969  0x00002309oTimers                             8969  0x00002309 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTrackbars                          8299  0x0000206boTrackbars                          8299  0x0000206b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserButtons                        8645  0x000021c5oUserButtons                        8645  0x000021c5 (mem) word[162] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
oUserImagess                        8601  0x00002199oUserImagess                        8601  0x00002199 (mem) word[18] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserleds                           8559  0x0000216foUserleds                           8559  0x0000216f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             544  0x00000220 (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                             8561  0x00002171oVideos                             8561  0x00002171 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                         8301  0x0000206doWinButtons                         8301  0x0000206d (mem) word[10] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          300  0x0000012c (mem) word (global)  (usage 18)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       13711  0x0000358f (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         13423  0x0000346f (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                   9077  0x00002375rKeyboardRoutines                   9077  0x00002375 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         13609  0x00003529 (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           13692  0x0000357c (User func) args[1] r=0  (usage 15)
seroutOcs                          13659  0x0000355b (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           7  0x00000007 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      2560  0x00000a00 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                          5  0x00000005 (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         73  0x00000049 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         14  0x0000000e (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings13Size                          0  0x00000000 (const dword)  (not used)
Strings13StartH                        0  0x00000000 (const dword)  (not used)
Strings13StartL                        0  0x00000000 (const dword)  (not used)
Strings14Size                          0  0x00000000 (const dword)  (not used)
Strings14StartH                        0  0x00000000 (const dword)  (not used)
Strings14StartL                        0  0x00000000 (const dword)  (not used)
Strings15Size                          0  0x00000000 (const dword)  (not used)
Strings15StartH                        0  0x00000000 (const dword)  (not used)
Strings15StartL                        0  0x00000000 (const dword)  (not used)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings17Count                         0  0x00000000 (const dword)  (not used)
Strings17Size                          1  0x00000001 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings18Size                          0  0x00000000 (const dword)  (not used)
Strings18StartH                        0  0x00000000 (const dword)  (not used)
Strings18StartL                        0  0x00000000 (const dword)  (not used)
Strings19Size                          0  0x00000000 (const dword)  (not used)
Strings19StartH                        0  0x00000000 (const dword)  (not used)
Strings19StartL                        0  0x00000000 (const dword)  (not used)
Strings1Count                          1  0x00000001 (const dword)  (not used)
Strings1Size                          30  0x0000001e (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                       512  0x00000200 (const dword)  (usage 3)
Strings20Size                          0  0x00000000 (const dword)  (not used)
Strings20StartH                        0  0x00000000 (const dword)  (not used)
Strings20StartL                        0  0x00000000 (const dword)  (not used)
Strings21Size                          0  0x00000000 (const dword)  (not used)
Strings21StartH                        0  0x00000000 (const dword)  (not used)
Strings21StartL                        0  0x00000000 (const dword)  (not used)
Strings22Size                          0  0x00000000 (const dword)  (not used)
Strings22StartH                        0  0x00000000 (const dword)  (not used)
Strings22StartL                        0  0x00000000 (const dword)  (not used)
Strings23Size                          0  0x00000000 (const dword)  (not used)
Strings23StartH                        0  0x00000000 (const dword)  (not used)
Strings23StartL                        0  0x00000000 (const dword)  (not used)
Strings24Size                          0  0x00000000 (const dword)  (not used)
Strings24StartH                        0  0x00000000 (const dword)  (not used)
Strings24StartL                        0  0x00000000 (const dword)  (not used)
Strings25Size                          0  0x00000000 (const dword)  (not used)
Strings25StartH                        0  0x00000000 (const dword)  (not used)
Strings25StartL                        0  0x00000000 (const dword)  (not used)
Strings26Size                          0  0x00000000 (const dword)  (not used)
Strings26StartH                        0  0x00000000 (const dword)  (not used)
Strings26StartL                        0  0x00000000 (const dword)  (not used)
Strings27Size                          0  0x00000000 (const dword)  (not used)
Strings27StartH                        0  0x00000000 (const dword)  (not used)
Strings27StartL                        0  0x00000000 (const dword)  (not used)
Strings28Size                          0  0x00000000 (const dword)  (not used)
Strings28StartH                        0  0x00000000 (const dword)  (not used)
Strings28StartL                        0  0x00000000 (const dword)  (not used)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                         53  0x00000035 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      2048  0x00000800 (const dword)  (usage 3)
Strings30Size                          0  0x00000000 (const dword)  (not used)
Strings30StartH                        0  0x00000000 (const dword)  (not used)
Strings30StartL                        0  0x00000000 (const dword)  (not used)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          7  0x00000007 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                         19  0x00000013 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings33Size                          0  0x00000000 (const dword)  (not used)
Strings33StartH                        0  0x00000000 (const dword)  (not used)
Strings33StartL                        0  0x00000000 (const dword)  (not used)
Strings34Count                         0  0x00000000 (const dword)  (not used)
Strings34Size                          1  0x00000001 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     3584  0x00000e00 (const dword)  (usage 3)
Strings35Size                          0  0x00000000 (const dword)  (not used)
Strings35StartH                        0  0x00000000 (const dword)  (not used)
Strings35StartL                        0  0x00000000 (const dword)  (not used)
Strings36Count                         0  0x00000000 (const dword)  (not used)
Strings36Size                          1  0x00000001 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings37Count                         0  0x00000000 (const dword)  (not used)
Strings37Size                          1  0x00000001 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings38Count                         0  0x00000000 (const dword)  (not used)
Strings38Size                          1  0x00000001 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings3Count                          0  0x00000000 (const dword)  (not used)
Strings3Size                           1  0x00000001 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                         0  0x00000000 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                          7  0x00000007 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings41Count                         1  0x00000001 (const dword)  (not used)
Strings41Size                          7  0x00000007 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings42Count                         1  0x00000001 (const dword)  (not used)
Strings42Size                          7  0x00000007 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings46Size                          0  0x00000000 (const dword)  (not used)
Strings46StartH                        0  0x00000000 (const dword)  (not used)
Strings46StartL                        0  0x00000000 (const dword)  (not used)
Strings47Size                          0  0x00000000 (const dword)  (not used)
Strings47StartH                        0  0x00000000 (const dword)  (not used)
Strings47StartL                        0  0x00000000 (const dword)  (not used)
Strings48Size                          0  0x00000000 (const dword)  (not used)
Strings48StartH                        0  0x00000000 (const dword)  (not used)
Strings48StartL                        0  0x00000000 (const dword)  (not used)
Strings49Size                          0  0x00000000 (const dword)  (not used)
Strings49StartH                        0  0x00000000 (const dword)  (not used)
Strings49StartL                        0  0x00000000 (const dword)  (not used)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings50Count                         0  0x00000000 (const dword)  (not used)
Strings50Size                          1  0x00000001 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    14336  0x00003800 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    11776  0x00002e00 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings53Count                         1  0x00000001 (const dword)  (not used)
Strings53Size                         67  0x00000043 (const dword)  (usage 3)
Strings53StartH                        0  0x00000000 (const dword)  (usage 3)
Strings53StartL                    14848  0x00003a00 (const dword)  (usage 3)
Strings5Count                          0  0x00000000 (const dword)  (not used)
Strings5Size                           1  0x00000001 (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                     15360  0x00003c00 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          31  0x0000001f (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                      6656  0x00001a00 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                      7168  0x00001c00 (const dword)  (usage 3)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      3072  0x00000c00 (const dword)  (usage 3)
stringsCV                            110  0x0000006e (mem) word[54] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           296  0x00000128 (mem) word (global)  (usage 24)
TouchXpos                            290  0x00000122 (mem) word (global)  (usage 12)
TouchYpos                            292  0x00000124 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     12868  0x00003244 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 435)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 45)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      11577  0x00002d39 (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS    2803  0x00000af3 (const ??? 0)  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 96)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        13068  0x0000330c (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
