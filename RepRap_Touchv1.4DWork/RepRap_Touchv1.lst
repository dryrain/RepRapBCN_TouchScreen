file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318        
003998  004319  //------------------------------------------------------------------------------
003999  004320  // FILEIO Error Code Constants
004000  004321  //------------------------------------------------------------------------------
004001  004322  #CONST
004002  004348  #END
004003  004349        
004004  004350  //------------------------------------------------------------------------------
004005  004351  // DISK struct offsets
004006  004352  //------------------------------------------------------------------------------
004007  004353  #CONST
004008  004370  #END
004009  004371        
004010  004372  //------------------------------------------------------------------------------
004011  004373  // FILE struct offsets
004012  004374  //------------------------------------------------------------------------------
004013  004375  #CONST
004014  004394  #END
004015  004395        
004016  004396        
004017  004397  //------------------------------------------------------------------//
004018  004398  //        Sound Class Services
004019  004399  //------------------------------------------------------------------//
004020  004400        
004021  004401  func snd_Volume("var"), 0;
004022  004402  // Syntax: snd_Volume("var");
004023  004403  // Usage : snd_Volume(30);
004024  004404  // Notes : set sound playback volume.  Var must
004025  004405  //       : be in the range from 8 (min volume)
004026  004406  //       : to 127 (max volume). If var is less
004027  004407  //       : than 8 volume is set to 8, and if
004028  004408  //       : var > 127 it is set to 127.
004029  004409        
004030  004410  func snd_Pitch("pitch"), 1;
004031  004411  // func snd_Pitch("freq"), 1;
004032  004412  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004033  004413  // Notes : sets the samples playback rate to a different frequency
004034  004414  //       : The minimum value is 4khz
004035  004415  //       : Setting the pitch to zero restores the original sample rate
004036  004416  //       : Return value is the samples original sample rate.
004037  004417        
004038  004418  func snd_BufSize("var"), 0;
004039  004419  // Syntax: snd_BufSize("var");
004040  004420  // Usage : snd_BufSize(2);
004041  004421  // Notes : specify the a memory chunk size for the wavefile buffer.
004042  004422  //       : default size 1024 bytes.
004043  004423  //       : 0 = 1024 bytes (default)
004044  004424  //       : 1 = 2048 bytes
004045  004425  //       : 2 = 4096 bytes
004046  004426  //       : 3 = 8192 bytes
004047  004427        
004048  004428  func snd_Stop(), 0;
004049  004429  // Syntax: snd_Stop();
004050  004430  // Usage : snd_Stop();
004051  004431  // Notes : stop any sound that is playing, releasing
004052  004432  //       : buffers and closes any open wav file.
004053  004433        
004054  004434  func snd_Pause(), 0;
004055  004435  // Syntax: snd_Pause();
004056  004436  // Usage : snd_Pause();
004057  004437  // Notes : pauses any sound that is playing, does nothing
004058  004438  //       : until sound is resumed with snd_Continue().
004059  004439  //       : The sample cam be terminated with snd_Stop.
004060  004440  //       : buffers and closes any open wav file.
004061  004441        
004062  004442  func snd_Continue(), 0;
004063  004443  // Syntax: snd_Continue();
004064  004444  // Usage : snd_Continue();
004065  004445  // Notes : resume any sound that is paused by snd_Pause.
004066  004446        
004067  004447  func snd_Playing(), 1;
004068  004448  // Syntax: snd_Playing();
004069  004449  // Usage : r := snd_Playing();
004070  004450  // Notes : returns 0 if sound has finished playing,
004071  004451  //       : else return number of 512 byte blocks to go.
004072  004452        
004073  004453  func snd_Freq("Freq", "Duration"), 1;
004074  004454  // Syntax: snd_Freq("Freq", "Duration");
004075  004455  // Usage : r := snd_Freq(1000, 2000);
004076  004456  // Notes : Returns 0 if note cannot be played because a wav file is playing
004077  004457  //       : else return True.
004078  004458  //       : Minimum Freq is 20
004079  004459  //       : This will produce a pure Square wave and is designed for driving
004080  004460  //       : Piezo transducers which require this sort of drive. It can also be
004081  004461  //       : used to drive the amp on displays with audio.
004082  004462        
004083  004463        
004084  004464  func __reserved60(), 0; // do not remove
004085  004465  func __reserved61(), 0; // do not remove
004086  004466  func __reserved62(), 0; // do not remove
004087  004467        
004088  004468  //=========================================================================================================
004089  004469  // String functions
004090  004470  //=========================================================================================================
004091  004471        
004092  004472  func str_Ptr("&var"), 1;
004093  004473  // Syntax: str_Ptr(&var);
004094  004474  // Usage : p := str_Ptr(&var);
004095  004475  // Notes : return a byte pointer to a word region
004096  004476        
004097  004477  func str_GetD("&ptr", "&var"), 1;
004098  004478  // Syntax: str_GetD(&ptr, &var);
004099  004479  // Usage : ok := str_GetD(&ptr, &var);
004100  004480  // Notes : convert number in a string to DWORD ( myvar[2] )
004101  004481  //       : returns true if function succeeds, advancing ptr
004102  004482        
004103  004483  func str_GetW("&ptr", "&var"), 1;
004104  004484  // Syntax: str_GetW(&ptr, &var);
004105  004485  // Usage : ok := str_GetW(&ptr, &var);
004106  004486  // Notes : convert number in a string to WORD ( myvar )
004107  004487  //       : returns true if function succeeds, advancing ptr
004108  004488        
004109  004489  func str_GetHexW("&ptr", "&var"), 1;
004110  004490  // Syntax: str_GetHexW(&ptr, &var);
004111  004491  // Usage : ok := str_GetHexW(&ptr, &var);
004112  004492  // Notes : convert HEX number in a string to WORD ( myvar )
004113  004493  //       : returns true if function succeeds, advancing ptr
004114  004494        
004115  004495  func str_GetC("&ptr", "&var"), 1;
004116  004496  // Syntax: str_GetC(&ptr, &var);
004117  004497  // Usage : ok := str_GetC(&ptr, &var);
004118  004498  // Notes : get a valid ascii char in a string to WORD ( myvar )
004119  004499  //       : returns true if function succeeds, advancing ptr
004120  004500        
004121  004501  func str_GetByte("ptr"), 1;
004122  004502  // Syntax: str_GetByte(ptr);
004123  004503  // Usage : myvar := str_GetByte(ptr);
004124  004504  // Notes : get a byte to myvar
004125  004505  //       : returns value
004126  004506        
004127  004507  func str_GetWord("ptr"), 1;
004128  004508  // Syntax: GetWord(ptr);
004129  004509  // Usage : GetWord(ptr);
004130  004510  // Notes : get a word to myvar
004131  004511  //       : returns value
004132  004512        
004133  004513  func str_PutByte("ptr","val"), 0;
004134  004514  // Syntax: str_PutByte(ptr);
004135  004515  // Usage : myvar := str_PutByte(ptr);
004136  004516  // Notes : put a byte at ptr
004137  004517  //       : returns value
004138  004518        
004139  004519  func str_PutWord("ptr","val"), 0;
004140  004520  // Syntax: str_PutWord("ptr","val");
004141  004521  // Usage : str_PutWord(p,100);
004142  004522  // Notes : put word 100 at current pointer location
004143  004523  //       : returns value
004144  004524        
004145  004525  func str_Match("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Match(&ptr, *str);
004147  004527  // Usage : r := str_Match(&p, "hello");
004148  004528  // Notes : Case sensitive match
004149  004529  //       : returns true if function succeded, andvancing pointer to position past
004150  004530  //       : the matched item. Note that any whitespace characters are skipped
004151  004531  //       : in the source string prior to the test.
004152  004532        
004153  004533  func str_MatchI("&ptr", "*str"), 1;
004154  004534  // Syntax: str_MatchI(&ptr, *str);
004155  004535  // Usage : r := str_MatchI(&p, "hello");
004156  004536  // Notes : Case insensitive match
004157  004537  //       : returns true if function succeded, andvancing pointer to position past
004158  004538  //       : the matched item. Note that any whitespace characters are skipped
004159  004539  //       : in the source string prior to the test.
004160  004540        
004161  004541  func str_Find("&ptr", "*str"), 1;
004162  004542  // Syntax: str_Find(&ptr, *str);
004163  004543  // Usage : n := str_Find(&p, "hello");
004164  004544  // Notes : given the address of a pointer to a source string as the
004165  004545  //       : first argument, and a pointer to a test string as the second
004166  004546  //       : argument, attempt to find the position of the matching string
004167  004547  //       : in the source string. The test is performed with case sensitivity.
004168  004548  //       : return 0 if not found, else returns the address of the first
004169  004549  //       : character of the match. NB:- The source pointer is not altered.
004170  004550        
004171  004551  func str_FindI("&ptr", "*str"), 1;
004172  004552  // Syntax: str_Find(&ptr, *str);
004173  004553  // Usage : n := str_Find(&p, "hello");
004174  004554  // Notes : given the address of a pointer to a source string as the
004175  004555  //       : first argument, and a pointer to a test string as the second
004176  004556  //       : argument, attempt to find the position of the matching string
004177  004557  //       : in the source string. The test is performed with no case
004178  004558  //       : sensitivity, eg upper and lower case chars are accepted.
004179  004559  //       : return 0 if not found, else returns the address of the first
004180  004560  //       : character of the match. NB:- The source pointer is not altered.
004181  004561        
004182  004562  func str_Length("ptr"), 1;
004183  004563  // Syntax: str_Length(ptr);
004184  004564  // Usage : len := str_Ptr(mystring);
004185  004565  // Notes : return the length of a byte aligned string excluding terminator
004186  004566        
004187  004567  func str_Printf("&ptr", "*format"), 1;
004188  004568  // Syntax: str_Printf("&ptr", "*format");
004189  004569  // Usage : r := str_Printf(&p, "hello");
004190  004570  // Notes : refer to documentation
004191  004571  //       :
004192  004572        
004193  004573  func str_Cat("dest","src"), 1;
004194  004574  // Syntax: str_Append("&dest","&src");
004195  004575  // Usage : str_Append(&buf,"Hello");
004196  004576  // Notes : Appends a copy of the source string to the destination string.
004197  004577  //       : The terminating null character in destination is overwritten by
004198  004578  //       : the first character of source, and a new null-character is appended
004199  004579  //       : at the end of the new string formed by the concatenation of both in destination.
004200  004580  //       : returns destination.
004201  004581        
004202  004582  func str_CatN("dest","src","count"), 1;
004203  004583  // Syntax: str_Append("&dest","&src","count");
004204  004584  // Usage : str_Append(&buf,"Monday",3);
004205  004585  // Notes : Appends a copy of the source string to the destination string.
004206  004586  //       : The number of characters copied is limited by "count".
004207  004587  //       : The terminating null character in destination is overwritten by
004208  004588  //       : the first character of source, and a new null-character is appended
004209  004589  //       : at the end of the new string formed by the concatenation of both in destination.
004210  004590  //       : returns destination.
004211  004591        
004212  004592        
004213  004593  func str_ByteMove("src", "dest", "count"), 1;
004214  004594  // Syntax   : str_ByteMove(src, dest, bytecount);
004215  004595  // Input    : STR *source points to byte aligned source.
004216  004596  //          : STR *dest   points to byte aligned destination.
004217  004597  //          : VAR count   number of bytes to transfer.
004218  004598  // Usage    : nextpos := str_ByteMove(s, d, 100);
004219  004599  // Notes    : copy bytes from "src" to "dest", stopping only
004220  004600  //          : when "count" is exhausted.
004221  004601  //          : No terminator is appended, it is purely a
004222  004602  //          : byte copy, and any zeroes encountered will
004223  004603  //          : also be copied.
004224  004604  // Returns  : returns a pointer to the end of the destination
004225  004605  //          : (which is "dest" + "count")
004226  004606        
004227  004607        
004228  004608  func str_Copy("dest", "src"), 1;
004229  004609  // Syntax   : str_Copy(dest, src);
004230  004610  // Input    : STR *dest   points to byte aligned destination.
004231  004611  //          : STR *source points to byte aligned source.
004232  004612  // Usage    : nextplace := str_Copy(d, s);
004233  004613  // Notes    : copy a string from "src" to "dest", stopping only
004234  004614  //          : when the end of source string "src" is encountered
004235  004615  //          : (0x00 terminator).
004236  004616  //          : The terminator is always appended, even if "src" is
004237  004617  //          : an empty string.
004238  004618  // Returns  : returns a pointer to the 0x00 string terminator at
004239  004619  //          : end of "dest" (which is "dest" + str_Length(src); )
004240  004620        
004241  004621        
004242  004622  func str_CopyN("dest", "src", "count"), 1;
004243  004623  // Syntax   : str_CopyN(dest, src, bytecount);
004244  004624  // Input    : STR *dest   points to byte aligned destination.
004245  004625  //          : STR *source points to byte aligned source.
004246  004626  //          : VAR count   max number of chars to copy.
004247  004627  // Usage    : nextplace := str_CopyN(d, s, 100);
004248  004628  // Notes    : copy a string from "src" to "dest", stopping only
004249  004629  //          : when "count" is exhausted, or end of source
004250  004630  //          : string "str" is encountered (0x00 string terminator).
004251  004631  //          : The terminator is always appended, even if
004252  004632  //          : "count" is zero, or "src" is a null string.
004253  004633  // Returns  : returns a pointer to the 0x00 string terminator
004254  004634  //          : (which is "dest" + whatever was copied)
004255  004635        
004256  004636        
004257  004637  func __reserved63(), 0; // do not remove
004258  004638  func __reserved64(), 0; // do not remove
004259  004639  func __reserved65(), 0; // do not remove
004260  004640  func __reserved66(), 0; // do not remove
004261  004641        
004262  004642  //=========================================================================================================
004263  004643  // FLASH memory functions
004264  004644  //=========================================================================================================
004265  004645  func flash_GetByte("bank", "ptr"), 1;
004266  004646  // Syntax   : flash_GetByte(bank, ptr);
004267  004647  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004268  004648  // Notes    : Reads a single byte from any flash location.
004269  004649  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004270  004650  //          : which is the header signature for a valid program.
004271  004651  // Returns  : the byte value from the location
004272  004652        
004273  004653        
004274  004654  func flash_GetWord("bank", "ptr"), 1;
004275  004655  // Syntax   : flash_GetWord(bank, ptr);
004276  004656  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004277  004657  // Notes    : Reads a single word from any flash location.
004278  004658  //          : The pointer is byte aligned.
004279  004659  //          : If the bank is read protected, only the first word can be read
004280  004660  //          : which is the header signature for a valid program (0xAA55).
004281  004661  // Returns  : the byte value from the location
004282  004662        
004283  004663        
004284  004664  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004285  004665  // Syntax   : flash_Copy(bank, ptr);
004286  004666  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004287  004667  // Notes    : Copies bytes from any flash locations to a user buffer.
004288  004668  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004289  004669  //          : If the bank is read protected, 0 bytes will be read
004290  004670  //          : which is the header signature for a valid program (0xAA55).
004291  004671  // Returns  : the count of bytes transferred.
004292  004672        
004293  004673        
004294  004674  func flash_Run("bank"), 1;
004295  004675  // Syntax    : flash_Run(bankx);
004296  004676  // Usage     : res := flash_Run(FLASHBANK_5);
004297  004677  // Notes     : Restarts the processor, running code from the required
004298  004678  //           : flash bank. bank may be a variable, or one of the
004299  004679  //           : pre-defined constants:-
004300  004680  //           :    FLASHBANK_0                 //0x00
004301  004681  //           :    FLASHBANK_1                 //0x01
004302  004682  //           :    FLASHBANK_2                 //0x02
004303  004683  //           :    FLASHBANK_3                 //0x03
004304  004684  //           :    FLASHBANK_4                 //0x04
004305  004685  //           :    FLASHBANK_5                 //0x05
004306  004686  // returns    : This function should net return as it restarts
004307  004687  //        : the processor and jumps to the required bank,
004308  004688  //        : If it does return, -1 indicates incorrect/invalid
004309  004689  //        : bank number, and -2 indicates no valid program
004310  004690  //        : in the selected bank.
004311  004691        
004312  004692  func flash_Bank(), 1;
004313  004693  // Syntax   : flash_Bank();
004314  004694  // Usage    : myvar := flash_Bank();
004315  004695  // Notes    : Identifies which flash bank the code is running from.
004316  004696  // Returns  : The FLASH bank that code is currently running from, 0-5.
004317  004697        
004318  004698        
004319  004699  func flash_EraseBank("bank", "confirmation"), 1;
004320  004700  // Syntax   : flash_EraseBank(bank, confirmation);
004321  004701  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004322  004702  // Notes    : This function should be used with extreme caution.
004323  004703  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004324  004704  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004325  004705  //          : a protected bank will not be erased, and function will return with 0
004326  004706  //          : If the destination bank is the same as the execution bank, the processor will reset
004327  004707  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004328  004708  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004329  004709  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004330  004710  // Returns  : returns true if the function succeeded
004331  004711  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004332  004712        
004333  004713  func flash_LoadFile("bank", "filename"), 1;
004334  004714  // Syntax   : flash_LoadFile(bank, ptr);
004335  004715  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004336  004716  // Notes    : Copies a file from uSD to the required flashbank.
004337  004717  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004338  004718  // Returns  : returns true if the function succeeded.
004339  004719        
004340  004720        
004341  004721  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004342  004722  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004343  004723  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004344  004724  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004345  004725  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004346  004726  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004347  004727  // Returns  : returns true if the function succeeded.
004348  004728        
004349  004729        
004350  004730  func flash_putstr("bank", "ptr"), 1;
004351  004731  // Syntax   : flash_putstr(bank, ptr);
004352  004732  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004353  004733  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004354  004734  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004355  004735  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004356  004736        
004357  004737  func flash_Blit16("bank", "offset", "count"), 1;
004358  004738  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004359  004739  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004360  004740  // Notes    : Blit an image to a GRAM window from FLASH storage.
004361  004741  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004362  004742  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004363  004743        
004364  004744  func flash_Blit8("bank", "offset", "count"), 1;
004365  004745  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004366  004746  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004367  004747  // Notes    : Blit an image to a GRAM window from FLASH storage.
004368  004748  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004369  004749  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004370  004750        
004371  004751  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004372  004752  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004373  004753  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004374  004754  // Notes    : Blit an image to a GRAM window from FLASH storage.
004375  004755  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004376  004756  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004377  004757        
004378  004758  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004379  004759  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004380  004760  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004381  004761  // Notes    : Blit an image to a GRAM window from FLASH storage.
004382  004762  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004383  004763  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004384  004764        
004385  004765  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004386  004766  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004387  004767  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004388  004768  // Notes    : Blit an image to a GRAM window from FLASH storage.
004389  004769  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004390  004770  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004391  004771        
004392  004772  func flash_Exec("bank", "arglistptr"), 1;
004393  004773  // Syntax: res := flash_Exec("bank","arglistptr");
004394  004774  // Usage : res := flash_Exec("bank","arglistptr");
004395  004775  // Notes : returns like a function, current program
004396  004776  //       : calling program is kept active and control returns to it.
004397  004777  //       : If arglistptr is 0, no arguments are passed, else
004398  004778  //       : arglist points to an array, the first element being
004399  004779  //       : the number of elements in the array.
004400  004780  //       : func 'main' in the called bank accepts the arguments.
004401  004781  // WARNING Not currently implemented!
004402  004782        
004403  004783        
004404  004784  func __reserved68(), 0; // do not remove
004405  004785  func __reserved69(), 0; // do not remove
004406  004786  func __reserved70(), 0; // do not remove
004407  004787        
004408  004788  //=========================================================================================================
004409  004789  // I/O and hardware functions
004410  004790  //=========================================================================================================
004411  004791        
004412  004792        
004413  004793        
004414  004794        
004415  004795  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004416  004796  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004417  004797  // Syntax: pin_Pulseout(pin, value);
004418  004798  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004419  004799  // Notes : only available on PA0 to PA9
004420  004800  //       : Invert the state of an output for "value" milliseconds.
004421  004801  //       : pulseout is non blocking, that is, code execution may continue while
004422  004802  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004423  004803  //       : If not already an output, pin is automatically made a push/pull output,
004424  004804  //       : and the last state of its output latch will determine pulse polarity.
004425  004805  //       : It's its open drain state is not altered if the pin was already an output.
004426  004806  //       : If pulseout is called while pulseout is still active, the pulse timer
004427  004807  //       : will simply be updated with the new "value" and the pulse will continue
004428  004808  //       : with the extended value.
004429  004809  //       : returns true if the pin number is legal (usually ignored)
004430  004810        
004431  004811        
004432  004812  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004433  004813  // Syntax: pin_Counter(pin, mode, userfunc);
004434  004814  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004435  004815  // Notes : only available on PA4 to PA9
004436  004816  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004437  004817  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004438  004818  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004439  004819  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004440  004820  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004441  004821  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004442  004822  //       : The pin may be configured as an input or output, the function behaves the same.
004443  004823  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004444  004824  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004445  004825  //       : "mode" has the following effect:-
004446  004826  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004447  004827  //       : mode COUNT_RISE(1) = increment on every rising edge
004448  004828  //       : mode COUNT_FALL(2) = increment on every falling edge
004449  004829  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004450  004830        
004451  004831  //------------------------------------------------------------------//
004452  004832  // pin counter mode constants                                       //
004453  004833  //------------------------------------------------------------------//
004454  004834  #CONST
004455  004839  #END
004456  004840        
004457  004841  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004458  004842  // Syntax: Qencoder1(pinA, pinB, mode);
004459  004843  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004460  004844  // Notes : not available on pins PA14 and PA15
004461  004845  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004462  004846  //       : or written to at any time with peekW and pokeW using the following constants:-
004463  004847  //       : It is necessary to configure the pins first, depending on your requirements, eg
004464  004848  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004465  004849  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004466  004850  //       : Returns true if the pin numbers are legal (usually ignored)
004467  004851  //    QEN1_COUNTER_LO
004468  004852  //    QEN1_COUNTER_HI
004469  004853  //    QEN1_DELTA This is reset to 0 when read
004470  004854        
004471  004855  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004472  004856  // Syntax: Qencoder2(pinA, pinB, mode);
004473  004857  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004474  004858  // Notes : not available on pins PA14 and PA15
004475  004859  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004476  004860  //       : or written to at any time with peekW and pokeW using the following constants:-
004477  004861  //       : It is necessary to configure the pins first, depending on your requirements, eg
004478  004862  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004479  004863  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004480  004864  //       : Returns true if the pin numbers are legal (usually ignored)
004481  004865  //    QEN2_COUNTER_LO
004482  004866  //    QEN2_COUNTER_HI
004483  004867  //    QEN2_DELTA This is reset to 0 when read
004484  004868        
004485  004869        
004486  004870  func Qencoder1Reset(), 0;
004487  004871  // Syntax: Qencoder1Reset();
004488  004872  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004489  004873  // Notes :
004490  004874  //    QEN1_COUNTER_LO is reset to zero
004491  004875  //    QEN1_COUNTER_HI is reset to zero
004492  004876  //    QEN1_DELTA is reset to zero
004493  004877        
004494  004878  func Qencoder2Reset(), 0;
004495  004879  // Syntax: Qencoder2Reset();
004496  004880  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004497  004881  // Notes :
004498  004882  //    QEN2_COUNTER_LO is reset to zero
004499  004883  //    QEN2_COUNTER_HI is reset to zero
004500  004884  //    QEN2_DELTA is reset to zero
004501  004885        
004502  004886        
004503  004887  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004504  004888  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004505  004889  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004506  004890  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004507  004891  //       : Invert the state of an output at a "freq" freuency "count" times.
004508  004892  //       : PulseoutCount is non blocking, that is, code execution may continue while
004509  004893  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004510  004894  //       : If not already an output, pin is automatically made a push/pull output,
004511  004895  //       : and the last state of its output latch will determine pulse polarity.
004512  004896  //       : It's its open drain state is not altered if the pin was already an output.
004513  004897  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004514  004898  //       : will simply have the new "value" added to it.
004515  004899  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004516  004900  //       : returns true if the pin number is legal (usually ignored)
004517  004901        
004518  004902  func __reserved72(), 0; // do not remove
004519  004903        
004520  004904  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004521  004905  // Syntax: pwm_Init(pin, value);
004522  004906  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004523  004907  // Notes : only available on PA4 to PA9
004524  004908  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004525  004909  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004526  004910  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004527  004911  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004528  004912  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004529  004913  //       :                    : Repetition rate ~50hz or 20ms
004530  004914  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004531  004915  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004532  004916  //       : pwm_Init is non blocking and the pwm continues until turn off
004533  004917  //       : Returns true if the pin number is legal (usually ignored)
004534  004918        
004535  004919  //------------------------------------------------------------------------------
004536  004920  // PWM Constants
004537  004921  //------------------------------------------------------------------------------
004538  004922  #CONST
004539  004927  #END
004540  004928        
004541  004929  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004542  004930  // Syntax   : OW_Reset(PA0);
004543  004931  // Usage    : OW_Reset(PA0);
004544  004932  // Notes    : Only available on PA0 to PA13
004545  004933  //          : Resets  ONEWIRE device
004546  004934  //          : Returns the status, 0 = ACK.
004547  004935  //          :
004548  004936        
004549  004937  func OW_Read("pin"), 1;                              // read data from 1wire bus
004550  004938  // Syntax   : OW_Read(PA0);
004551  004939  // Usage    : arg1 := OW_Read(PA0);
004552  004940  // Notes    : Only available on PA0 to PA13
004553  004941  //          : Reads value of the ONEWIRE pin
004554  004942  //          : that was previously selected for ONEWIRE comms.
004555  004943  //          :
004556  004944  //          : pin = 0 : the next byte from the ONEWIRE bus
004557  004945        
004558  004946  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004559  004947  // Syntax   : OW_Read9(PA0);
004560  004948  // Usage    : OW_Read9(PA0);
004561  004949  // Notes    : Only available on PA0 to PA13
004562  004950  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004563  004951  //          : that was previously selected for ONEWIRE comms.
004564  004952  //          :
004565  004953  //          : read the 9 bits from the ONEWIRE bus
004566  004954        
004567  004955  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004568  004956  // Syntax   : OW_Write(PA0, arg);
004569  004957  // Usage    : OW_Write(PA0, arg);
004570  004958  // Notes    : Only available on PA0 to PA13
004571  004959  //          : Sends ONEWIRE data on the appropriate
004572  004960  //          : pin that was previously  selected as ONEWIRE comms.
004573  004961  //          :
004574  004962  //          : write arg to the ONEWIRE bus
004575  004963        
004576  004964  func __reserved77(), 0; // do not remove
004577  004965  func __reserved78(), 0; // do not remove
004578  004966        
004579  004967  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004580  004968  // Syntax: sys_GetDateVar(&year, &month, &day);
004581  004969  // Usage : sys_GetDateVar(&year, &month, &day);
004582  004970  // Notes : Retrieves the date values into variables
004583  004971        
004584  004972  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004585  004973  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004974  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004587  004975  // Notes : Retrieves the time values into variables
004588  004976        
004589  004977  func sys_PmmC(), 0;
004590  004978  // Syntax: sys_PmmC();
004591  004979  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004592  004980  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004593  004981  //       : Can be captured to a buffer using the to( function
004594  004982  //       : Returns nothing.
004595  004983        
004596  004984  func sys_Driver(), 0;
004597  004985  // Syntax: sys_Driver();
004598  004986  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004599  004987  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004600  004988  //       : Can be captured to a buffer using the to( function
004601  004989  //       : Returns nothing.
004602  004990        
004603  004991  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004604  004992  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004605  004993  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004606  004994  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004607  004995  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004608  004996  //       : elements in each buffer. This will need to be greater than "width" for negative
004609  004997  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004610  004998  //       : pass 0 as the address for any unused traces
004611  004999  //       : X position is incremented each point by "xstep" pixels.
004612  005000  //       : Y values are derived from a Y buffer "newy" (signed values).
004613  005001  //       : 2 buffers need to be supplied, "newy" contains new
004614  005002  //       : points to be drawn, "oldy" contains most recent set
004615  005003  //       : of points to be un-drawn. After the waveform is drawn,
004616  005004  //       : "newy" buffer is automatically copied to "oldy" buffer.
004617  005005        
004618  005006        
004619  005007  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004620  005008  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004621  005009  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004622  005010  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004623  005011  //       : and calls "COMPLETEfunction" when done.
004624  005012  //       : "rate" is samples in 100 of samples per second
004625  005013  //       : Any unused IOx pins should have their buffer addresses set to 0
004626  005014  //       : For performance reasons samples are taken in chunks of 32, thus if you
004627  005015  //       : request 33 samples there will be a delay of 31 samples before
004628  005016  //       : "COMPLETEfunction" is called
004629  005017  //       : If Touch is enabled this function should be called no more than once per
004630  005018  //       : millisecond, otherwise touch behaviour could be eratic.
004631  005019        
004632  005020        
004633  005021  func sys_ErrorMessage("msgnum"), 1;
004634  005022        
004635  005023  //==============================//
004636  005024  // NeoPixel specific functions  //
004637  005025  //==============================//
004638  005026        
004639  005027  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004640  005028  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004641  005029  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004642  005030  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004643  005031  //       : data        : Address of data to be sent
004644  005032  //       : size        : number of colour 'sets' to follow
004645  005033  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004646  005034  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004647  005035  //       : Repeat      : Number of times to repeat the colours between first and last
004648  005036  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004649  005037  //       : Returns true if the pin number is legal (usually ignored)
004650  005038  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004651  005039  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004652  005040        
004653  005041  // NeoPixel related constants
004654  005042  #CONST
004655  005046  #END
004656  005047        
004657  005048  func __reserved85(), 0; // do not remove
004658  005049  func __reserved86(), 0; // do not remove
004659  005050        
004660  005051  //==============================================//
004661  005052  // spi flash device specific functions          //
004662  005053  //==============================================//
004663  005054        
004664  005055  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004665  005056  // Syntax   : spiflash_SIG("spi#","enablepin");
004666  005057  // Usage    : var := spiflash_SIG(SPI1, PA0);
004667  005058  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004668  005059  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004669  005060  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004670  005061  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004671  005062  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004672  005063  //          : byte is ignored.
004673  005064        
004674  005065  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004675  005066  // Syntax   : spiflash_ID("spi#","enablepin");
004676  005067  // Usage    : var := spiflash_ID(SPI1, PA0);
004677  005068  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004678  005069  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004679  005070  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004680  005071  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004681  005072  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004682  005073  //          : contains capacity. Refer to the device data sheet for further information.
004683  005074        
004684  005075  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004685  005076  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004686  005077  // Usage    : spiflash_BulkErase(SPI1, PA0);
004687  005078  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004688  005079  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004689  005080  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004690  005081  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004691  005082  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004692  005083  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004693  005084        
004694  005085  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004695  005086  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004696  005087  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004697  005088  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004698  005089  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004699  005090  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004700  005091  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004701  005092  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004702  005093  //          : blockAddress The address of the 64k FLASH block to be erased.
004703  005094  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004704  005095  //          : can take up to 3 milliseconds.
004705  005096        
004706  005097  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004707  005098  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004708  005099  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004709  005100  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004710  005101        
004711  005102  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004712  005103  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004713  005104  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004714  005105  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004715  005106  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004716  005107  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004717  005108  //       : returns number of characters read
004718  005109  //       : if "dest" is zero, data is read direct to GRAM window
004719  005110  //       :
004720  005111        
004721  005112  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004722  005113  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004723  005114  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004724  005115  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004725  005116  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004726  005117  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004727  005118  //       : returns number of bytes written
004728  005119  //       :
004729  005120        
004730  005121  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004731  005122  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004732  005123  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004733  005124  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004734  005125  //       : The image is displayed at x,y (with respect to top left corner).
004735  005126        
004736  005127  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004737  005128  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004738  005129  // Usage : spiflash_PutC('x', SPI1, PA0);
004739  005130  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004740  005131  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004741  005132  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004742  005133        
004743  005134  func spiflash_GetC("spi#", "enablepin"), 1;
004744  005135  // Syntax: spiflash_GetC("spi#", "enablepin");
004745  005136  // Usage : mychar := fgetC(SPI1, PA0);
004746  005137  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004747  005138  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004748  005139  //       : by subsequent reads or writes.
004749  005140  //       : returns next char from file
004750  005141        
004751  005142  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004752  005143  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004753  005144  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004754  005145  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004755  005146  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004756  005147  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004757  005148        
004758  005149  func spiflash_GetW("spi#", "enablepin"), 1;
004759  005150  // Syntax: spiflash_GetW("spi#", "enablepin");
004760  005151  // Usage : myword := fgetW(SPI1, PA0);
004761  005152  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004762  005153  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004763  005154  //       : by subsequent reads or writes.
004764  005155  // Notes : returns next word in file
004765  005156        
004766  005157  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004767  005158  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004768  005159  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004769  005160  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004770  005161  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004771  005162  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004772  005163  //       : returns number of characters written
004773  005164  //       :
004774  005165        
004775  005166  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004776  005167  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004777  005168  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004778  005169  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004779  005170  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004780  005171  //       : by subsequent reads or writes.
004781  005172  //       : returns pointer to string or null if failed.
004782  005173  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004783  005174  //       : NB:- only reads up to "size-1" characters into "string"
004784  005175  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004785  005176  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004786  005177  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004787  005178  //       : C] It reaches the end of file
004788  005179  //       : D] A read error occurs.
004789  005180        
004790  005181  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004791  005182  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004792  005183  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004793  005184  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004794  005185  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004795  005186  //       : return a function pointer to the allocation.
004796  005187  //       : The function can then be invoked just like any other
004797  005188  //       : function would be called via a function pointer.
004798  005189  //       : Parameters may be passed to it in a conventional way.
004799  005190  //       : The function may be discarded at any time when no
004800  005191  //       : longer required, thus freeing its memory resources.
004801  005192  //       : The loaded function can be discarded with mem_Free(..)
004802  005193  //       : eg:
004803  005194  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004804  005195  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004805  005196  //       : then elsewhere in your program:-
004806  005197  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004807  005198  //       : if(res == QUIT_APPLICATION) goto exitApp;
004808  005199  //       : Later in your program, when popupWindow is no longer
004809  005200  //       : required for the application:-
004810  005201  //       : res := mem_Free(popupWindow);
004811  005202  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004812  005203  //       : The callers stack is shared by the loaded function,
004813  005204  //       : however any global variables in the loaded function
004814  005205  //       : are private to that function.
004815  005206  //
004816  005207        
004817  005208  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004818  005209  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004819  005210  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004820  005211  // Notes : current program releases any allocated memory but
004821  005212  //       : retains the stack and global memory.
004822  005213  //       : If arglistptr is 0, no arguments are passed, else
004823  005214  //       : arglist points to an array, the first element being
004824  005215  //       : the number of elements in the array.
004825  005216  //       : func 'main' in the called program accepts
004826  005217  //       : the arguments, if any. The arguments can only
004827  005218  //       : be passed by value, no pointers or references can be
004828  005219  //       : used as all memory is cleared before the file
004829  005220  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004830  005221  //       : for functions that can pass by reference.
004831  005222        
004832  005223  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004833  005224  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004834  005225  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004835  005226  // Notes : returns like a function, current program
004836  005227  //       : calling program is kept active and control returns to it.
004837  005228  //       : If arglistptr is 0, no arguments are passed, else
004838  005229  //       : arglist points to an array, the first element being
004839  005230  //       : the number of elements in the array.
004840  005231  //       : func 'main' in the called program accepts the arguments.
004841  005232  //       : This function is similar to spiflash_LoadFunction(...), however,
004842  005233  //       : the function argument list is passed by pointer, and
004843  005234  //       : the memory consumed by the function is released as
004844  005235  //       : soon as the function completes.
004845  005236        
004846  005237  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004847  005238  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004848  005239  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004849  005240  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004850  005241  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004851  005242  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004852  005243  //       : Returns NULL if function fails.
004853  005244  //       : Returns a handle (pointer to the memory allocation) to the
004854  005245  //       : image control list that has been created.
004855  005246        
004856  005247  // Notes : This function Calculates the size of a chunk of memory required for
004857  005248  //       : a image list and populates it from the image control file ("*.dat")
004858  005249  //       : therefore, when imagelist is no longer required, you must de-allocate
004859  005250  //       : the image list memory by using eg:- mem_Free(hImagelist);
004860  005251  //       : to restore the heap.
004861  005252  //       :
004862  005253        
004863  005254  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004864  005255  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004865  005256  // Usage : spiflash_PlayWAV(SPI1, PA0);
004866  005257  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004867  005258  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004868  005259  //       : or writes.
004869  005260  //       : This function automatically grabs a chunk
004870  005261  //       : of memory for a file buffer, and a wave
004871  005262  //       : buffer. The minimum memory requirement is
004872  005263  //       : about 580 bytes for the disk io service and
004873  005264  //       : a minimum wave buffer size of 1024. The size
004874  005265  //       : of the wave buffer allocation
004875  005266  //       : can be increased by the snd_BufSize function.
004876  005267  //       : The default size 1024 bytes.
004877  005268  //       : NB the memory is only required during the
004878  005269  //       : duration of play, and is automatically
004879  005270  //       : released while not in use.
004880  005271  //       : See the Sound Class services for other associated controls.
004881  005272  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004882  005273  //       : If errors occured, the folling is returned
004883  005274  //       : -7  : Insufficient memory available for WAV buffer and file
004884  005275  //       : -6  : cant play this rate
004885  005276  //       : -5  : no data chunk found in first rsector
004886  005277  //       : -4  : no format data
004887  005278  //       : -3  : no wave chunk signature
004888  005279  //       : -2  : bad wave file format
004889  005280  //       : -1  : file not found
004890  005281        
004891  005282  //==============================================//
004892  005283  // more com functions                           //
004893  005284  //==============================================//
004894  005285        
004895  005286  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004896  005287  // Syntax   : com1_TXblock("buf", "bufsize");
004897  005288  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004898  005289  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004899  005290  //          : if a transmit buffer is active and space is available this function will return almost
004900  005291  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004901  005292        
004902  005293  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004903  005294  // Syntax   : com1_RXblock("buf", "bufsize");
004904  005295  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004905  005296  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004906  005297  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004907  005298  //          : immediately otherwise it will block until until the required bytes are received.
004908  005299        
004909  005300  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004910  005301  // Syntax   : com_TXblock("buf", "bufsize");
004911  005302  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004912  005303  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004913  005304  //          : if a transmit buffer is active and space is available this function will return almost
004914  005305  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004915  005306        
004916  005307  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004917  005308  // Syntax   : com_RXblock("buf", "bufsize");
004918  005309  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004919  005310  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004920  005311  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004921  005312  //          : immediately otherwise it will block until until the required bytes are received.
004922  005313        
004923  005314  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004924  005315  // Syntax   : com_TXblock("buf", "bufsize");
004925  005316  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004926  005317  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004927  005318  //          : if a transmit buffer is active and space is available this function will return almost
004928  005319  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004929  005320        
004930  005321  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004931  005322  // Syntax   : com_RXblock("buf", "bufsize");
004932  005323  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004933  005324  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004934  005325  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004935  005326  //          : immediately otherwise it will block until until the required bytes are received.
004936  005327        
004937  005328  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004938  005329  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004939  005330  // Usage : disp_BlitPixelsFromCOM1();
004940  005331  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004941  005332  //       : display from the specified com port.
004942  005333        
004943  005334  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004944  005335  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004945  005336  // Usage : disp_BlitPixelsFromCOM2();
004946  005337  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004947  005338  //       : display from the specified com port.
004948  005339        
004949  005340  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004950  005341  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004951  005342  // Usage : disp_BlitPixelsFromCOM3();
004952  005343  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004953  005344  //       : display from the specified com port.
004954  005345        
004955  005346        
004956  005347  //==============================================//
004957  005348  // crc generation functions                     //
004958  005349  //==============================================//
004959  005350        
004960  005351  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004961  005352  // *Notes   : (if you calculate all of the incoming data
004962  005353  //          : INCLUDING the CRC, the result should be 0x00
004963  005354  //          : This is equivalent to simple addition of all bytes
004964  005355  //          : and returning the negated sum an 8 bit value.
004965  005356  //          : For the standard test string "123456789",
004966  005357  //          : crc_CSUM_8 will return 0x0023.
004967  005358        
004968  005359        
004969  005360  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004970  005361  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004971  005362  //          : (if you calculate all of the incoming data
004972  005363  //          : INCLUDING the CRC, the result should be 0x0000
004973  005364  //          : For the standard test string "123456789",
004974  005365  //          : crc_16 will return 0xBB3D.
004975  005366        
004976  005367        
004977  005368  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004978  005369  // *Notes   : (if you calculate all of the incoming data
004979  005370  //          : INCLUDING the CRC, the result should be 0x0000
004980  005371  //          : For the standard test string "123456789",
004981  005372  //          : crc_MODBUS will return 0x4B37.
004982  005373        
004983  005374        
004984  005375  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004985  005376  // *Notes   : (if you calculate all of the incoming data
004986  005377  //          : INCLUDING the CRC, the result should be 0x0000
004987  005378  //          : For the standard test string "123456789",
004988  005379  //          : crc_CCITT will return the following:-
004989  005380  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004990  005381  //          : seed = 0xFFFF, result = 0x29B1
004991  005382  //          : seed = 0x1D0F, result = 0xE5CC
004992  005383        
004993  005384        
004994  005385  //------------------------------------------------------------------//
004995  005386  // CONSTANTS
004996  005387  //------------------------------------------------------------------//
004997  005388        
004998  005389  #CONST
004999  005393  #END
005000  005394        
005001  005395  // timebase constants for timebase_init
005002  005396  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005003  005397  #CONST
005004  005408  #END
005005  005409        
005006  005410        
005007  005411  // generic constants
005008  005412  #CONST
005009  005420  #END
005010  005421        
005011  005422        
005012  005423        
005013  005424  //gfx_Get() related constants
005014  005425  #CONST
005015  005434  #END
005016  005435        
005017  005436        
005018  005437        
005019  005438        
005020  005439  #CONST
005021  005452  #END
005022  005453        
005023  005454        
005024  005455  #CONST
005025  005480  #END
005026  005481        
005027  005482        
005028  005483        
005029  005484        
005030  005485  // timer control  related constants
005031  005486  #CONST
005032  005495  #END
005033  005496        
005034  005497        
005035  005498        
005036  005499  //------------------------------------------------------------------------------
005037  005500  // system WORD variables accesible with peekW and pokeW or pointer access
005038  005501  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005039  005502  // can also be accessed with peekW and pokeW
005040  005503  //------------------------------------------------------------------------------
005041  005504        
005042  005505  #CONST
005043  005600  #END
005044  005601        
005045  005602  #CONST
005046  005767  #END
005047  005768        
005048  005769        
005049  005770        
005050  005771  //==================================================================================================
005051  005772        
005052  005773        
005053  005774        
005054  000013      #ENDIF
005055  000014        
005056  000015        
005057  000016  //===========================================================================================
005058  000017        
005059  000018        
005060  000002        
005061  000003  // generated 21/07/2015 13:27:41
005062  000004        
005063  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005064  000006  #inherit "4DGL_16bitColours.fnc"
005065  000006  #inherit "4DGL_16bitColours.fnc"
005066  000004  */
005067  000005        
005068  000006        
005069  000007        
005070  000008  #CONST
005071  000149  #END
005072  000150        
005073  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005074  000008  #inherit "VisualConst.inc"
005075  000008  #inherit "VisualConst.inc"
005076  000001  // Line Patterns
005077  000002  #constant  LPCOARSE    0xF0F0
005078  000002  #constant  LPCOARSE    0xF0F0
005079  000003  #constant  LPMEDIUM    0x3333
005080  000003  #constant  LPMEDIUM    0x3333
005081  000004  #constant  LPFINE      0xAAAA
005082  000004  #constant  LPFINE      0xAAAA
005083  000005  #constant  LPDASHDOT   0x03CF
005084  000005  #constant  LPDASHDOT   0x03CF
005085  000006  #constant  LPDASHDOTDOT 0x0333
005086  000006  #constant  LPDASHDOTDOT 0x0333
005087  000007  #constant  LPSOLID     0x0000
005088  000007  #constant  LPSOLID     0x0000
005089  000009        
005090  000010        
file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1Const.inc

005091  000011  #inherit "RepRap_Touchv1Const.inc"
005092  000011  #inherit "RepRap_Touchv1Const.inc"
005093  000001  // File generated 21/07/2015 13:27:08
005094  000002  // Warning! This is a generated file, any manual changes will be
005095  000003  // lost during the next generation.
005096  000004        
005097  000005  #constant  Strings1Count    0
005098  000005  #constant  Strings1Count    0
005099  000006  #constant  Strings1Size     1
005100  000006  #constant  Strings1Size     1
005101  000007  #constant  Strings3Count    1
005102  000007  #constant  Strings3Count    1
005103  000008  #constant  Strings3Size     18
005104  000008  #constant  Strings3Size     18
005105  000009  #constant  Strings4Count    1
005106  000009  #constant  Strings4Count    1
005107  000010  #constant  Strings4Size     25
005108  000010  #constant  Strings4Size     25
005109  000011  #constant  Strings6Count    1
005110  000011  #constant  Strings6Count    1
005111  000012  #constant  Strings6Size     31
005112  000012  #constant  Strings6Size     31
005113  000013  #constant  Strings2Count    0
005114  000013  #constant  Strings2Count    0
005115  000014  #constant  Strings2Size     1
005116  000014  #constant  Strings2Size     1
005117  000015  #constant  Strings0Count    1
005118  000015  #constant  Strings0Count    1
005119  000016  #constant  Strings0Size     7
005120  000016  #constant  Strings0Size     7
005121  000017  #constant  Strings9Count    0
005122  000017  #constant  Strings9Count    0
005123  000018  #constant  Strings9Size     1
005124  000018  #constant  Strings9Size     1
005125  000019  #constant  Strings34Count    0
005126  000019  #constant  Strings34Count    0
005127  000020  #constant  Strings34Size     1
005128  000020  #constant  Strings34Size     1
005129  000021  #constant  Strings36Count    0
005130  000021  #constant  Strings36Count    0
005131  000022  #constant  Strings36Size     1
005132  000022  #constant  Strings36Size     1
005133  000023  #constant  Strings37Count    0
005134  000023  #constant  Strings37Count    0
005135  000024  #constant  Strings37Size     1
005136  000024  #constant  Strings37Size     1
005137  000025  #constant  Strings12Count    1
005138  000025  #constant  Strings12Count    1
005139  000026  #constant  Strings12Size     14
005140  000026  #constant  Strings12Size     14
005141  000027  #constant  Strings14Count    1
005142  000027  #constant  Strings14Count    1
005143  000028  #constant  Strings14Size     23
005144  000028  #constant  Strings14Size     23
005145  000029  #constant  Strings16Count    0
005146  000029  #constant  Strings16Count    0
005147  000030  #constant  Strings16Size     1
005148  000030  #constant  Strings16Size     1
005149  000031  #constant  Strings15Count    1
005150  000031  #constant  Strings15Count    1
005151  000032  #constant  Strings15Size     24
005152  000032  #constant  Strings15Size     24
005153  000033  #constant  Strings21Count    1
005154  000033  #constant  Strings21Count    1
005155  000034  #constant  Strings21Size     35
005156  000034  #constant  Strings21Size     35
005157  000035  #constant  Strings11Count    1
005158  000035  #constant  Strings11Count    1
005159  000036  #constant  Strings11Size     31
005160  000036  #constant  Strings11Size     31
005161  000037  #constant  Strings22Count    1
005162  000037  #constant  Strings22Count    1
005163  000038  #constant  Strings22Size     20
005164  000038  #constant  Strings22Size     20
005165  000039  #constant  Strings24Count    1
005166  000039  #constant  Strings24Count    1
005167  000040  #constant  Strings24Size     26
005168  000040  #constant  Strings24Size     26
005169  000041  #constant  Strings25Count    1
005170  000041  #constant  Strings25Count    1
005171  000042  #constant  Strings25Size     10
005172  000042  #constant  Strings25Size     10
005173  000043  #constant  Strings26Count    1
005174  000043  #constant  Strings26Count    1
005175  000044  #constant  Strings26Size     10
005176  000044  #constant  Strings26Size     10
005177  000045  #constant  Strings27Count    1
005178  000045  #constant  Strings27Count    1
005179  000046  #constant  Strings27Size     11
005180  000046  #constant  Strings27Size     11
005181  000047  #constant  Strings28Count    1
005182  000047  #constant  Strings28Count    1
005183  000048  #constant  Strings28Size     40
005184  000048  #constant  Strings28Size     40
005185  000049  #constant  Strings35Count    1
005186  000049  #constant  Strings35Count    1
005187  000050  #constant  Strings35Size     36
005188  000050  #constant  Strings35Size     36
005189  000051  #constant  Strings33Count    1
005190  000051  #constant  Strings33Count    1
005191  000052  #constant  Strings33Size     32
005192  000052  #constant  Strings33Size     32
005193  000053  #constant  Strings10Count    1
005194  000053  #constant  Strings10Count    1
005195  000054  #constant  Strings10Size     14
005196  000054  #constant  Strings10Size     14
005197  000055  #constant  Strings7Count    0
005198  000055  #constant  Strings7Count    0
005199  000056  #constant  Strings7Size     1
005200  000056  #constant  Strings7Size     1
005201  000057  #constant  Strings8Count    0
005202  000057  #constant  Strings8Count    0
005203  000058  #constant  Strings8Size     1
005204  000058  #constant  Strings8Size     1
005205  000059  #constant  Strings38Count    0
005206  000059  #constant  Strings38Count    0
005207  000060  #constant  Strings38Size     1
005208  000060  #constant  Strings38Size     1
005209  000061  #constant  Strings39Count    0
005210  000061  #constant  Strings39Count    0
005211  000062  #constant  Strings39Size     1
005212  000062  #constant  Strings39Size     1
005213  000063  #constant  Strings40Count    1
005214  000063  #constant  Strings40Count    1
005215  000064  #constant  Strings40Size     7
005216  000064  #constant  Strings40Size     7
005217  000065  #constant  Strings41Count    1
005218  000065  #constant  Strings41Count    1
005219  000066  #constant  Strings41Size     7
005220  000066  #constant  Strings41Size     7
005221  000067  #constant  Strings42Count    1
005222  000067  #constant  Strings42Count    1
005223  000068  #constant  Strings42Size     7
005224  000068  #constant  Strings42Size     7
005225  000069  #constant  Strings43Count    0
005226  000069  #constant  Strings43Count    0
005227  000070  #constant  Strings43Size     1
005228  000070  #constant  Strings43Size     1
005229  000071  #constant  Strings44Count    0
005230  000071  #constant  Strings44Count    0
005231  000072  #constant  Strings44Size     1
005232  000072  #constant  Strings44Size     1
005233  000073  #constant  Strings45Count    0
005234  000073  #constant  Strings45Count    0
005235  000074  #constant  Strings45Size     1
005236  000074  #constant  Strings45Size     1
005237  000075  #constant  Strings51Count    0
005238  000075  #constant  Strings51Count    0
005239  000076  #constant  Strings51Size     1
005240  000076  #constant  Strings51Size     1
005241  000077  #constant  Strings52Count    0
005242  000077  #constant  Strings52Count    0
005243  000078  #constant  Strings52Size     1
005244  000078  #constant  Strings52Size     1
005245  000079  #constant  Strings17Count    1
005246  000079  #constant  Strings17Count    1
005247  000080  #constant  Strings17Size     56
005248  000080  #constant  Strings17Size     56
005249  000081  #constant  Strings18Count    1
005250  000081  #constant  Strings18Count    1
005251  000082  #constant  Strings18Size     39
005252  000082  #constant  Strings18Size     39
005253  000083  #constant  Strings19Count    1
005254  000083  #constant  Strings19Count    1
005255  000084  #constant  Strings19Size     43
005256  000084  #constant  Strings19Size     43
005257  000085  #constant  Strings29Count    1
005258  000085  #constant  Strings29Count    1
005259  000086  #constant  Strings29Size     64
005260  000086  #constant  Strings29Size     64
005261  000087  #constant  Strings30Count    1
005262  000087  #constant  Strings30Count    1
005263  000088  #constant  Strings30Size     42
005264  000088  #constant  Strings30Size     42
005265  000089  #constant  Strings31Count    1
005266  000089  #constant  Strings31Count    1
005267  000090  #constant  Strings31Size     7
005268  000090  #constant  Strings31Size     7
005269  000091  #constant  Strings32Count    1
005270  000091  #constant  Strings32Count    1
005271  000092  #constant  Strings32Size     19
005272  000092  #constant  Strings32Size     19
005273  000093  #constant  Strings49Count    1
005274  000093  #constant  Strings49Count    1
005275  000094  #constant  Strings49Size     17
005276  000094  #constant  Strings49Size     17
005277  000095  #constant  Strings50Count    1
005278  000095  #constant  Strings50Count    1
005279  000096  #constant  Strings50Size     20
005280  000096  #constant  Strings50Size     20
005281  000097  #constant  Strings13Count    1
005282  000097  #constant  Strings13Count    1
005283  000098  #constant  Strings13Size     3
005284  000098  #constant  Strings13Size     3
005285  000099  #constant  Strings46Count    0
005286  000099  #constant  Strings46Count    0
005287  000100  #constant  Strings46Size     1
005288  000100  #constant  Strings46Size     1
005289  000101  #constant  Strings47Count    1
005290  000101  #constant  Strings47Count    1
005291  000102  #constant  Strings47Size     3
005292  000102  #constant  Strings47Size     3
005293  000103  #constant  Strings48Count    0
005294  000103  #constant  Strings48Count    0
005295  000104  #constant  Strings48Size     1
005296  000104  #constant  Strings48Size     1
005297  000105  #constant  Strings53Count    0
005298  000105  #constant  Strings53Count    0
005299  000106  #constant  Strings53Size     1
005300  000106  #constant  Strings53Size     1
005301  000107  // object indexes into ImageControl
005302  000108  #CONST
005303  000340  #END
005304  000341        
005305  000342  #constant  Strings5Size     0
005306  000342  #constant  Strings5Size     0
005307  000343  #constant  Strings5StartH   0
005308  000343  #constant  Strings5StartH   0
005309  000344  #constant  Strings5StartL   0
005310  000344  #constant  Strings5StartL   0
005311  000345  #constant  Strings20Size     0
005312  000345  #constant  Strings20Size     0
005313  000346  #constant  Strings20StartH   0
005314  000346  #constant  Strings20StartH   0
005315  000347  #constant  Strings20StartL   0
005316  000347  #constant  Strings20StartL   0
005317  000348  #constant  Strings23Size     0
005318  000348  #constant  Strings23Size     0
005319  000349  #constant  Strings23StartH   0
005320  000349  #constant  Strings23StartH   0
005321  000350  #constant  Strings23StartL   0
005322  000350  #constant  Strings23StartL   0
005323  000351  #constant  Strings1StartH   0x0
005324  000351  #constant  Strings1StartH   0x0
005325  000352  #constant  Strings1StartL   0x0
005326  000352  #constant  Strings1StartL   0x0
005327  000353  #constant  Strings3StartH   0x0
005328  000353  #constant  Strings3StartH   0x0
005329  000354  #constant  Strings3StartL   0x200
005330  000354  #constant  Strings3StartL   0x200
005331  000355  #constant  Strings4StartH   0x0
005332  000355  #constant  Strings4StartH   0x0
005333  000356  #constant  Strings4StartL   0x400
005334  000356  #constant  Strings4StartL   0x400
005335  000357  #constant  Strings6StartH   0x0
005336  000357  #constant  Strings6StartH   0x0
005337  000358  #constant  Strings6StartL   0x600
005338  000358  #constant  Strings6StartL   0x600
005339  000359  #constant  Strings2StartH   0x0
005340  000359  #constant  Strings2StartH   0x0
005341  000360  #constant  Strings2StartL   0x800
005342  000360  #constant  Strings2StartL   0x800
005343  000361  #constant  Strings0StartH   0x0
005344  000361  #constant  Strings0StartH   0x0
005345  000362  #constant  Strings0StartL   0xA00
005346  000362  #constant  Strings0StartL   0xA00
005347  000363  #constant  Strings9StartH   0x0
005348  000363  #constant  Strings9StartH   0x0
005349  000364  #constant  Strings9StartL   0xC00
005350  000364  #constant  Strings9StartL   0xC00
005351  000365  #constant  Strings34StartH   0x0
005352  000365  #constant  Strings34StartH   0x0
005353  000366  #constant  Strings34StartL   0xE00
005354  000366  #constant  Strings34StartL   0xE00
005355  000367  #constant  Strings36StartH   0x0
005356  000367  #constant  Strings36StartH   0x0
005357  000368  #constant  Strings36StartL   0x1000
005358  000368  #constant  Strings36StartL   0x1000
005359  000369  #constant  Strings37StartH   0x0
005360  000369  #constant  Strings37StartH   0x0
005361  000370  #constant  Strings37StartL   0x1200
005362  000370  #constant  Strings37StartL   0x1200
005363  000371  #constant  Strings12StartH   0x0
005364  000371  #constant  Strings12StartH   0x0
005365  000372  #constant  Strings12StartL   0x1400
005366  000372  #constant  Strings12StartL   0x1400
005367  000373  #constant  Strings14StartH   0x0
005368  000373  #constant  Strings14StartH   0x0
005369  000374  #constant  Strings14StartL   0x1600
005370  000374  #constant  Strings14StartL   0x1600
005371  000375  #constant  Strings16StartH   0x0
005372  000375  #constant  Strings16StartH   0x0
005373  000376  #constant  Strings16StartL   0x1800
005374  000376  #constant  Strings16StartL   0x1800
005375  000377  #constant  Strings15StartH   0x0
005376  000377  #constant  Strings15StartH   0x0
005377  000378  #constant  Strings15StartL   0x1A00
005378  000378  #constant  Strings15StartL   0x1A00
005379  000379  #constant  Strings21StartH   0x0
005380  000379  #constant  Strings21StartH   0x0
005381  000380  #constant  Strings21StartL   0x1C00
005382  000380  #constant  Strings21StartL   0x1C00
005383  000381  #constant  Strings11StartH   0x0
005384  000381  #constant  Strings11StartH   0x0
005385  000382  #constant  Strings11StartL   0x1E00
005386  000382  #constant  Strings11StartL   0x1E00
005387  000383  #constant  Strings22StartH   0x0
005388  000383  #constant  Strings22StartH   0x0
005389  000384  #constant  Strings22StartL   0x2000
005390  000384  #constant  Strings22StartL   0x2000
005391  000385  #constant  Strings24StartH   0x0
005392  000385  #constant  Strings24StartH   0x0
005393  000386  #constant  Strings24StartL   0x2200
005394  000386  #constant  Strings24StartL   0x2200
005395  000387  #constant  Strings25StartH   0x0
005396  000387  #constant  Strings25StartH   0x0
005397  000388  #constant  Strings25StartL   0x2400
005398  000388  #constant  Strings25StartL   0x2400
005399  000389  #constant  Strings26StartH   0x0
005400  000389  #constant  Strings26StartH   0x0
005401  000390  #constant  Strings26StartL   0x2600
005402  000390  #constant  Strings26StartL   0x2600
005403  000391  #constant  Strings27StartH   0x0
005404  000391  #constant  Strings27StartH   0x0
005405  000392  #constant  Strings27StartL   0x2800
005406  000392  #constant  Strings27StartL   0x2800
005407  000393  #constant  Strings28StartH   0x0
005408  000393  #constant  Strings28StartH   0x0
005409  000394  #constant  Strings28StartL   0x2A00
005410  000394  #constant  Strings28StartL   0x2A00
005411  000395  #constant  Strings35StartH   0x0
005412  000395  #constant  Strings35StartH   0x0
005413  000396  #constant  Strings35StartL   0x2C00
005414  000396  #constant  Strings35StartL   0x2C00
005415  000397  #constant  Strings33StartH   0x0
005416  000397  #constant  Strings33StartH   0x0
005417  000398  #constant  Strings33StartL   0x2E00
005418  000398  #constant  Strings33StartL   0x2E00
005419  000399  #constant  Strings10StartH   0x0
005420  000399  #constant  Strings10StartH   0x0
005421  000400  #constant  Strings10StartL   0x3000
005422  000400  #constant  Strings10StartL   0x3000
005423  000401  #constant  Strings7StartH   0x0
005424  000401  #constant  Strings7StartH   0x0
005425  000402  #constant  Strings7StartL   0x3200
005426  000402  #constant  Strings7StartL   0x3200
005427  000403  #constant  Strings8StartH   0x0
005428  000403  #constant  Strings8StartH   0x0
005429  000404  #constant  Strings8StartL   0x3400
005430  000404  #constant  Strings8StartL   0x3400
005431  000405  #constant  Strings38StartH   0x0
005432  000405  #constant  Strings38StartH   0x0
005433  000406  #constant  Strings38StartL   0x3600
005434  000406  #constant  Strings38StartL   0x3600
005435  000407  #constant  Strings39StartH   0x0
005436  000407  #constant  Strings39StartH   0x0
005437  000408  #constant  Strings39StartL   0x3800
005438  000408  #constant  Strings39StartL   0x3800
005439  000409  #constant  Strings40StartH   0x0
005440  000409  #constant  Strings40StartH   0x0
005441  000410  #constant  Strings40StartL   0x3A00
005442  000410  #constant  Strings40StartL   0x3A00
005443  000411  #constant  Strings41StartH   0x0
005444  000411  #constant  Strings41StartH   0x0
005445  000412  #constant  Strings41StartL   0x3C00
005446  000412  #constant  Strings41StartL   0x3C00
005447  000413  #constant  Strings42StartH   0x0
005448  000413  #constant  Strings42StartH   0x0
005449  000414  #constant  Strings42StartL   0x3E00
005450  000414  #constant  Strings42StartL   0x3E00
005451  000415  #constant  Strings43StartH   0x0
005452  000415  #constant  Strings43StartH   0x0
005453  000416  #constant  Strings43StartL   0x4000
005454  000416  #constant  Strings43StartL   0x4000
005455  000417  #constant  Strings44StartH   0x0
005456  000417  #constant  Strings44StartH   0x0
005457  000418  #constant  Strings44StartL   0x4200
005458  000418  #constant  Strings44StartL   0x4200
005459  000419  #constant  Strings45StartH   0x0
005460  000419  #constant  Strings45StartH   0x0
005461  000420  #constant  Strings45StartL   0x4400
005462  000420  #constant  Strings45StartL   0x4400
005463  000421  #constant  Strings51StartH   0x0
005464  000421  #constant  Strings51StartH   0x0
005465  000422  #constant  Strings51StartL   0x4600
005466  000422  #constant  Strings51StartL   0x4600
005467  000423  #constant  Strings52StartH   0x0
005468  000423  #constant  Strings52StartH   0x0
005469  000424  #constant  Strings52StartL   0x4800
005470  000424  #constant  Strings52StartL   0x4800
005471  000425  #constant  Strings17StartH   0x0
005472  000425  #constant  Strings17StartH   0x0
005473  000426  #constant  Strings17StartL   0x4A00
005474  000426  #constant  Strings17StartL   0x4A00
005475  000427  #constant  Strings18StartH   0x0
005476  000427  #constant  Strings18StartH   0x0
005477  000428  #constant  Strings18StartL   0x4C00
005478  000428  #constant  Strings18StartL   0x4C00
005479  000429  #constant  Strings19StartH   0x0
005480  000429  #constant  Strings19StartH   0x0
005481  000430  #constant  Strings19StartL   0x4E00
005482  000430  #constant  Strings19StartL   0x4E00
005483  000431  #constant  Strings29StartH   0x0
005484  000431  #constant  Strings29StartH   0x0
005485  000432  #constant  Strings29StartL   0x5000
005486  000432  #constant  Strings29StartL   0x5000
005487  000433  #constant  Strings30StartH   0x0
005488  000433  #constant  Strings30StartH   0x0
005489  000434  #constant  Strings30StartL   0x5200
005490  000434  #constant  Strings30StartL   0x5200
005491  000435  #constant  Strings31StartH   0x0
005492  000435  #constant  Strings31StartH   0x0
005493  000436  #constant  Strings31StartL   0x5400
005494  000436  #constant  Strings31StartL   0x5400
005495  000437  #constant  Strings32StartH   0x0
005496  000437  #constant  Strings32StartH   0x0
005497  000438  #constant  Strings32StartL   0x5600
005498  000438  #constant  Strings32StartL   0x5600
005499  000439  #constant  Strings49StartH   0x0
005500  000439  #constant  Strings49StartH   0x0
005501  000440  #constant  Strings49StartL   0x5800
005502  000440  #constant  Strings49StartL   0x5800
005503  000441  #constant  Strings50StartH   0x0
005504  000441  #constant  Strings50StartH   0x0
005505  000442  #constant  Strings50StartL   0x5A00
005506  000442  #constant  Strings50StartL   0x5A00
005507  000443  #constant  Strings13StartH   0x0
005508  000443  #constant  Strings13StartH   0x0
005509  000444  #constant  Strings13StartL   0x5C00
005510  000444  #constant  Strings13StartL   0x5C00
005511  000445  #constant  Strings46StartH   0x0
005512  000445  #constant  Strings46StartH   0x0
005513  000446  #constant  Strings46StartL   0x5E00
005514  000446  #constant  Strings46StartL   0x5E00
005515  000447  #constant  Strings47StartH   0x0
005516  000447  #constant  Strings47StartH   0x0
005517  000448  #constant  Strings47StartL   0x6000
005518  000448  #constant  Strings47StartL   0x6000
005519  000449  #constant  Strings48StartH   0x0
005520  000449  #constant  Strings48StartH   0x0
005521  000450  #constant  Strings48StartL   0x6200
005522  000450  #constant  Strings48StartL   0x6200
005523  000451  #constant  Strings53StartH   0x0
005524  000451  #constant  Strings53StartH   0x0
005525  000452  #constant  Strings53StartL   0x6400
005526  000452  #constant  Strings53StartL   0x6400
005527  000453  #IFNOT EXISTS NOGLOBALS
005528  000454  var hndl ;
005529  000455  #ENDIF
005530  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005531  000013  #inherit "CLPrintStrings.inc"
005532  000013  #inherit "CLPrintStrings.inc"
005533  000001  func PrintStrings(var ID, var *msgid, var String)
005534  000002      var StringID, i, ch, offs32[2], res32[2];
005535  000003      StringID := oStringss[1+ID] ;
005536  000004      if (String)
005537  000005          stringsCV[ID] := -1 ;
005538  000006      else
005539  000007          stringsCV[ID] := msgid ;
005540  000008      endif
005541  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005542  000010      txt_FontID(hFonts[ID]) ;
005543  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005544  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005545  000013        
005546  000014      if (*(StringID + Ofs_String_Transparent))
005547  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005548  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005549  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005550  000018      else
005551  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005552  000020          gfx_Clipping(ON) ;
005553  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005554  000022          gfx_Clipping(OFF) ;
005555  000023        
005556  000024      endif
005557  000025        
005558  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005559  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005560  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005561  000029        
005562  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005563  000031        
005564  000032      if (String)
005565  000033          i := 0 ;
005566  000034          ch := msgid[i++] ;
005567  000035          while (ch != 0)
005568  000036              putch(ch) ;
005569  000037              ch := msgid[i++] ;
005570  000038          wend
005571  000039      else
005572  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005573  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005574  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005575  000043          uadd_3232(res32,res32,offs32) ;
005576  000044          file_Seek(hstrings, res32[1], res32[0]);
005577  000045          repeat
005578  000046              if (*(StringID + Ofs_String_Ansi))
005579  000047                  ch := file_GetC(hstrings) ;
005580  000048              else
005581  000049                  ch := file_GetW(hstrings) ;
005582  000050              endif
005583  000051              putch(ch) ;
005584  000052          until (ch == 0) ;
005585  000053      endif
005586  000054        
005587  000055  endfunc
005588  000056        
005589  000014        
005590  000015  #constant IPDatasize 22
005591  000015  #constant IPDatasize 22
005592  000016        
005593  000017  #CONST
005594  000021  #END
005595  000022        
005596  000023  #CONST
005597  000130  #END
005598  000131        
005599  000556  #END
5600  26BA
5601  26BB
5602  26BC
5603  26BD
5604  26BE
5605  26BF
5606  26C0
5607  26C1
5608  26C2
5609  26C3
5610  26C4
5611  26C5
5612  26C6
5613  26C7
5614  26C8
5615  26C9
5616  26CA
5617  26CB
5618  26CC
5619  26CD
5620  26CE
5621  26CF
5622  26D0
5623  26D1
5624  26D2
5625  26D3
5626  26D4
5627  26D5
5628  26D6
5629  26D7
5630  26D8
5631  26D9
5632  26DA
5633  26DB
5634  26DC
5635  26DD
5636  26DE
5637  26DF
5638  26E0
5639  26E1
5640  26E2
5641  26E3
5642  26E4
5643  26E5
5644  26E6
5645  26E7
5646  26E8
5647  26E9
5648  26EA
5649  26EB
5650  26EC
5651  26ED
5652  26EE
5653  26EF
5654  26F0
5655  26F1
5656  26F2
5657  26F3
5658  26F4
5659  26F5
5660  26F6
5661  26F7
5662  26F8
5663  26F9
5664  26FA
5665  26FB
5666  26FC
5667  26FD
5668  26FE
5669  26FF
5670  2700
5671  2701
5672  2702
5673  2703
5674  2704
5675  2705
5676  2706
5677  2707
5678  2708
5679  2709
5680  270A
5681  270B
5682  270C
5683  270D
5684  270E
5685  270F
5686  2710
5687  2711
5688  2712
5689  2713
5690  2714
5691  2715
5692  2716
5693  2717
5694  2718
5695  2719
5696  271A
5697  271B
5698  271C
5699  271D
5700  271E
5701  271F
5702  2720
5703  2721
5704  2722
5705  2723
5706  2724
5707  2725
5708  2726
5709  2727
5710  2728
5711  2729
5712  272A
5713  272B
5714  272C
5715  272D
5716  272E
5717  272F
5718  2730
5719  2731
5720  2732
5721  2733
5722  2734
5723  2735
5724  2736
5725  2737
5726  2738
5727  2739
5728  273A
5729  273B
5730  273C
5731  273D
5732  273E
5733  273F
5734  2740
5735  2741
5736  2742
5737  2743
5738  2744
5739  2745
5740  2746
5741  2747
5742  2748
5743  2749
5744  274A
5745  274B
5746  274C
5747  274D
5748  274E
5749  274F
5750  2750
5751  2751
5752  2752
5753  2753
5754  2754
5755  2755
5756  2756
5757  2757
5758  2758
5759  2759
5760  275A
5761  275B
5762  275C
5763  275D
5764  275E
5765  275F
5766  2760
5767  2761
5768  2762
5769  2763
5770  2764
5771  2765
5772  2766
5773  2767
5774  2768
5775  2769
5776  276A
5777  276B
5778  276C
5779  276D
5780  276E
5781  276F
5782  2770
5783  2771
5784  2772
5785  2773
5786  2774
5787  2775
5788  2776
5789  2777
5790  2778
5791  2779
5792  277A
5793  277B
5794  277C
5795  277D
5796  277E
5797  277F
5798  2780
5799  2781
5800  2782
5801  2783
5802  2784
5803  2785
5804  2786
5805  2787
5806  2788
5807  2789
5808  278A
5809  278B
5810  278C
5811  278D
5812  278E
5813  278F
5814  2790
5815  2791
5816  2792
5817  2793
5818  2794
5819  2795
5820  2796
5821  2797
5822  2798
5823  2799
5824  279A
5825  279B
5826  279C
5827  279D
5828  279E
5829  279F
5830  27A0
5831  27A1
5832  27A2
5833  27A3
5834  27A4
5835  27A5
5836  27A6
5837  27A7
5838  27A8
5839  27A9
5840  27AA
5841  27AB
5842  27AC
5843  27AD
5844  27AE
5845  27AF
5846  27B0
5847  27B1
5848  27B2
5849  27B3
5850  27B4
5851  27B5
5852  27B6
5853  27B7
5854  27B8
5855  27B9
5856  27BA
5857  27BB
5858  27BC
5859  27BD
5860  27BE
5861  27BF
5862  27C0
5863  27C1
5864  27C2
5865  27C3
5866  27C4
5867  27C5
5868  27C6
5869  27C7
5870  27C8
5871  27C9
5872  27CA
5873  27CB
5874  27CC
5875  27CD
5876  27CE
5877  27CF
5878  27D0
5879  27D1
5880  27D2
5881  27D3
5882  27D4
5883  27D5
5884  27D6
5885  27D7
5886  27D8
5887  27D9
5888  27DA
5889  27DB
5890  27DC
5891  27DD
5892  27DE
5893  27DF
5894  27E0
5895  27E1
5896  27E2
5897  27E3
5898  27E4
5899  27E5
5900  27E6
5901  27E7
5902  27E8
5903  27E9
5904  27EA
5905  27EB
5906  27EC
5907  27ED
5908  27EE
5909  27EF
5910  27F0
5911  27F1
5912  27F2
5913  27F3
5914  27F4
5915  27F5
5916  27F6
5917  27F7
5918  27F8
5919  27F9
5920  27FA
5921  27FB
5922  27FC
5923  27FD
5924  27FE
5925  27FF
5926  2800
5927  2801
5928  2802
5929  2803
5930  2804
5931  2805
5932  2806
5933  2807
5934  2808
5935  2809
5936  280A
5937  280B
5938  280C
5939  280D
5940  280E
5941  280F
5942  2810
5943  2811
5944  2812
5945  2813
5946  2814
5947  2815
5948  2816
5949  2817
5950  2818
5951  2819
5952  281A
5953  281B
5954  281C
5955  281D
5956  281E
5957  281F
5958  2820
5959  2821
5960  2822
5961  2823
5962  2824
5963  2825
5964  2826
5965  2827
5966  2828
5967  2829
5968  282A
5969  282B
5970  282C
5971  282D
5972  282E
5973  282F
5974  2830
5975  2831
5976  2832
5977  2833
5978  2834
5979  2835
5980  2836
5981  2837
5982  2838
5983  2839
5984  283A
5985  283B
5986  283C
5987  283D
5988  283E
5989  283F
5990  2840
5991  2841
5992  2842
5993  2843
5994  2844
5995  2845
5996  2846
5997  2847
5998  2848
5999  2849
6000  284A
6001  284B
6002  284C
6003  284D
6004  284E
6005  284F
6006  2850
6007  2851
6008  2852
6009  2853
6010  2854
6011  2855
6012  2856
6013  2857
6014  2858
6015  2859
6016  285A
6017  285B
6018  285C
6019  285D
6020  285E
6021  285F
6022  2860
6023  2861
6024  2862
6025  2863
6026  2864
6027  2865
6028  2866
6029  2867
6030  2868
6031  2869
6032  286A
6033  286B
6034  286C
6035  286D
6036  286E
6037  286F
6038  2870
6039  2871
6040  2872
6041  2873
6042  2874
6043  2875
6044  2876
6045  2877
6046  2878
6047  2879
6048  287A
6049  287B
6050  287C
6051  287D
6052  287E
6053  287F
6054  2880
6055  2881
6056  2882
6057  2883
6058  2884
6059  2885
6060  2886
6061  2887
6062  2888
6063  2889
6064  288A
6065  288B
6066  288C
6067  288D
6068  288E
6069  288F
6070  2890
6071  2891
6072  2892
6073  2893
6074  2894
6075  2895
6076  2896
6077  2897
6078  2898
6079  2899
6080  289A
6081  289B
6082  289C
6083  289D
6084  289E
6085  289F
6086  28A0
6087  28A1
6088  28A2
6089  28A3
6090  28A4
6091  28A5
6092  28A6
6093  28A7
6094  28A8
6095  28A9
6096  28AA
6097  28AB
6098  28AC
6099  28AD
6100  28AE
6101  28AF
6102  28B0
6103  28B1
6104  28B2
6105  28B3
6106  28B4
6107  28B5
6108  28B6
6109  28B7
6110  28B8
6111  28B9
6112  28BA
6113  28BB
6114  28BC
6115  28BD
6116  28BE
6117  28BF
6118  28C0
6119  28C1
6120  28C2
6121  28C3
6122  28C4
6123  28C5
6124  28C6
6125  28C7
6126  28C8
6127  28C9
6128  28CA
6129  28CB
6130  28CC
6131  28CD
6132  28CE
6133  28CF
6134  28D0
6135  28D1
6136  28D2
6137  28D3
6138  28D4
6139  28D5
6140  28D6
6141  28D7
6142  28D8
6143  28D9
6144  28DA
6145  28DB
6146  28DC
6147  28DD
6148  28DE
6149  28DF
6150  28E0
6151  28E1
6152  28E2
6153  28E3
6154  28E4
6155  28E5
6156  28E6
6157  28E7
6158  28E8
6159  28E9
6160  28EA
6161  28EB
6162  28EC
6163  28ED
6164  28EE
6165  28EF
6166  28F0
6167  28F1
6168  28F2
6169  28F3
6170  28F4
6171  28F5
6172  28F6
6173  28F7
6174  28F8
6175  28F9
6176  28FA
6177  28FB
6178  28FC
6179  28FD
6180  28FE
6181  28FF
6182  2900
6183  2901
6184  2902
6185  2903
6186  2904
6187  2905
6188  2906
6189  2907
6190  2908
6191  2909
6192  290A
6193  290B
6194  290C
6195  290D
6196  290E
6197  290F
6198  2910
6199  2911
6200  2912
6201  2913
6202  2914
6203  2915
6204  2916
6205  2917
6206  2918
6207  2919
6208  291A
6209  291B
6210  291C
6211  291D
6212  291E
6213  291F
6214  2920
6215  2921
6216  2922
6217  2923
6218  2924
6219  2925
6220  2926
6221  2927
6222  2928
6223  2929
6224  292A
6225  292B
6226  292C
6227  292D
6228  292E
6229  292F
6230  2930
6231  2931
6232  2932
6233  2933
6234  2934
6235  2935
6236  2936
6237  2937
6238  2938
6239  2939
6240  293A
6241  293B
6242  293C
6243  293D
6244  293E
6245  293F
6246  2940
6247  2941
6248  2942
6249  2943
6250  2944
6251  2945
6252  2946
6253  2947
6254  2948
6255  2949
6256  294A
6257  294B
6258  294C
6259  294D
6260  294E
6261  294F
6262  2950
6263  2951
6264  2952
6265  2953
6266  2954
6267  2955
6268  2956
6269  2957
6270  2958
6271  2959
6272  295A
6273  295B
6274  295C
6275  295D
6276  295E
6277  295F
6278  2960
6279  2961
6280  2962
6281  2963
6282  2964
6283  2965
6284  2966
6285  2967
6286  2968
6287  2969
6288  296A
6289  296B
6290  296C
6291  296D
6292  296E
6293  296F
6294  2970
6295  2971
6296  2972
6297  2973
6298  2974
6299  2975
6300  2976
6301  2977
6302  2978
6303  2979
6304  297A
6305  297B
6306  297C
6307  297D
6308  297E
6309  297F
6310  2980
6311  2981
6312  2982
6313  2983
6314  2984
6315  2985
6316  2986
6317  2987
6318  2988
6319  2989
6320  298A
6321  298B
6322  298C
6323  298D
6324  298E
6325  298F
6326  2990
6327  2991
6328  2992
6329  2993
6330  2994
6331  2995
6332  2996
6333  2997
6334  2998
6335  2999
6336  299A
6337  299B
6338  299C
6339  299D
6340  299E
6341  299F
6342  29A0
6343  29A1
6344  29A2
6345  29A3
6346  29A4
6347  29A5
6348  29A6
6349  29A7
6350  29A8
6351  29A9
6352  29AA
6353  29AB
6354  29AC
6355  29AD
6356  29AE
6357  29AF
6358  29B0
6359  29B1
6360  29B2
6361  29B3
6362  29B4
6363  29B5
6364  29B6
6365  29B7
6366  29B8
6367  29B9
6368  29BA
6369  29BB
6370  29BC
6371  29BD
6372  29BE
6373  29BF
6374  29C0
6375  29C1
6376  29C2
6377  29C3
6378  29C4
6379  29C5
6380  29C6
6381  29C7
6382  29C8
6383  29C9
6384  29CA
6385  29CB
6386  29CC
6387  29CD
6388  29CE
6389  29CF
6390  29D0
6391  29D1
6392  29D2
6393  29D3
6394  29D4
6395  29D5
6396  29D6
6397  29D7
6398  29D8
6399  29D9
6400  29DA
6401  29DB
6402  29DC
6403  29DD
6404  29DE
6405  29DF
6406  29E0
6407  29E1
6408  29E2
6409  29E3
6410  29E4
6411  29E5
6412  29E6
6413  29E7
6414  29E8
6415  29E9
6416  29EA
6417  29EB
6418  29EC
6419  29ED
6420  29EE
6421  29EF
6422  29F0
6423  29F1
6424  29F2
6425  29F3
6426  29F4
6427  29F5
6428  29F6
6429  29F7
6430  29F8
6431  29F9
6432  29FA
6433  29FB
6434  29FC
6435  29FD
6436  29FE
6437  29FF
6438  2A00
6439  2A01
6440  2A02
6441  2A03
6442  2A04
6443  2A05
6444  2A06
6445  2A07
6446  2A08
6447  2A09
6448  2A0A
6449  2A0B
6450  2A0C
6451  2A0D
6452  2A0E
6453  2A0F
6454  2A10
6455  2A11
6456  2A12
6457  2A13
6458  2A14
6459  2A15
6460  2A16
6461  2A17
6462  2A18
6463  2A19
6464  2A1A
6465  2A1B
6466  2A1C
6467  2A1D
6468  2A1E
6469  2A1F
6470  2A20
6471  2A21
6472  2A22
6473  2A23
6474  2A24
6475  2A25
6476  2A26
6477  2A27
6478  2A28
6479  2A29
6480  2A2A
6481  2A2B
6482  2A2C
6483  2A2D
6484  2A2E
6485  2A2F
6486  2A30
6487  2A31
6488  2A32
6489  2A33
6490  2A34
6491  2A35
6492  2A36
6493  2A37
6494  2A38
6495  2A39
6496  2A3A
6497  2A3B
6498  2A3C
6499  2A3D
6500  2A3E
6501  2A3F
6502  2A40
6503  2A41
6504  2A42
6505  2A43
6506  2A44
6507  2A45
6508  2A46
6509  2A47
6510  2A48
6511  2A49
6512  2A4A
6513  2A4B
6514  2A4C
6515  2A4D
6516  2A4E
6517  2A4F
6518  2A50
6519  2A51
6520  2A52
6521  2A53
6522  2A54
6523  2A55
6524  2A56
6525  2A57
6526  2A58
6527  2A59
6528  2A5A
6529  2A5B
6530  2A5C
6531  2A5D
6532  2A5E
6533  2A5F
6534  2A60
6535  2A61
6536  2A62
6537  2A63
6538  2A64
6539  2A65
6540  2A66
6541  2A67
6542  2A68
6543  2A69
6544  2A6A
6545  2A6B
6546  2A6C
6547  2A6D
6548  2A6E
6549  2A6F
6550  2A70
6551  2A71
6552  2A72
6553  2A73
6554  2A74
6555  2A75
6556  2A76
6557  2A77
6558  2A78
6559  2A79
6560  2A7A
6561  2A7B
6562  2A7C
6563  2A7D
6564  2A7E
6565  2A7F
6566  2A80
6567  2A81
6568  2A82
6569  2A83
6570  2A84
6571  2A85
6572  2A86
6573  2A87
6574  2A88
6575  2A89
6576  2A8A
6577  2A8B
6578  2A8C
6579  2A8D
6580  2A8E
6581  2A8F
6582  2A90
6583  2A91
6584  2A92
6585  2A93
6586  2A94
6587  2A95
6588  2A96
6589  2A97
6590  2A98
6591  2A99
6592  2A9A
6593  2A9B
6594  2A9C
6595  2A9D
6596  2A9E
6597  2A9F
6598  2AA0
6599  2AA1
6600  2AA2
6601  2AA3
6602  2AA4
6603  2AA5
6604  2AA6
6605  2AA7
6606  2AA8
6607  2AA9
6608  2AAA
6609  2AAB
6610  2AAC
6611  2AAD
6612  2AAE
6613  2AAF
6614  2AB0
6615  2AB1
6616  2AB2
6617  2AB3
6618  2AB4
6619  2AB5
6620  2AB6
6621  2AB7
6622  2AB8
6623  2AB9
6624  2ABA
6625  2ABB
6626  2ABC
6627  2ABD
6628  2ABE
6629  2ABF
6630  2AC0
6631  2AC1
6632  2AC2
6633  2AC3
6634  2AC4
6635  2AC5
6636  2AC6
6637  2AC7
6638  2AC8
6639  2AC9
6640  2ACA
6641  2ACB
6642  2ACC
6643  2ACD
6644  2ACE
6645  2ACF
6646  2AD0
6647  2AD1
6648  2AD2
6649  2AD3
6650  2AD4
6651  2AD5
6652  2AD6
6653  2AD7
6654  2AD8
6655  2AD9
6656  2ADA
6657  2ADB
6658  2ADC
6659  2ADD
6660  2ADE
6661  2ADF
6662  2AE0
6663  2AE1
6664  2AE2
6665  2AE3
6666  2AE4
6667  2AE5
6668  2AE6
6669  2AE7
6670  2AE8
6671  2AE9
6672  2AEA
6673  2AEB
6674  2AEC
6675  2AED
6676  2AEE
6677  2AEF
6678  2AF0
6679  2AF1
6680  2AF2
6681  2AF3
6682  2AF4
6683  2AF5
6684  2AF6
6685  2AF7
6686  2AF8
6687  2AF9
6688  2AFA
6689  2AFB
6690  2AFC
6691  2AFD
6692  2AFE
6693  2AFF
6694  2B00
6695  2B01
6696  2B02
6697  2B03
6698  2B04
6699  2B05
6700  2B06
6701  2B07
6702  2B08
6703  2B09
6704  2B0A
6705  2B0B
6706  2B0C
6707  2B0D
6708  2B0E
6709  2B0F
6710  2B10
6711  2B11
6712  2B12
6713  2B13
6714  2B14
6715  2B15
6716  2B16
6717  2B17
6718  2B18
6719  2B19
6720  2B1A
6721  2B1B
6722  2B1C
6723  2B1D
6724  2B1E
6725  2B1F
6726  2B20
6727  2B21
6728  2B22
6729  2B23
6730  2B24
6731  2B25
6732  2B26
6733  2B27
6734  2B28
6735  2B29
6736  2B2A
6737  2B2B
6738  2B2C
6739  2B2D
6740  2B2E
6741  2B2F
6742  2B30
6743  2B31
6744  2B32
6745  2B33
6746  2B34
6747  2B35
6748  2B36
6749  2B37
6750  2B38
6751  2B39
6752  2B3A
6753  2B3B
6754  2B3C
6755  2B3D
6756  2B3E
6757  2B3F
6758  2B40
6759  2B41
6760  2B42
6761  2B43
6762  2B44
6763  2B45
6764  2B46
6765  2B47
6766  2B48
6767  2B49
6768  2B4A
6769  2B4B
6770  2B4C
6771  2B4D
6772  2B4E
6773  2B4F
6774  2B50
6775  2B51
6776  2B52
6777  2B53
6778  2B54
6779  2B55
6780  2B56
6781  2B57
6782  2B58
6783  2B59
6784  2B5A
6785  2B5B
6786  2B5C
6787  2B5D
6788  2B5E
6789  2B5F
6790  2B60
6791  2B61
6792  2B62
6793  2B63
6794  2B64
6795  2B65
6796  2B66
6797  2B67
6798  2B68
6799  2B69
6800  2B6A
6801  2B6B
6802  2B6C
6803  2B6D
6804  2B6E
6805  2B6F
6806  2B70
6807  2B71
6808  2B72
6809  2B73
6810  2B74
6811  2B75
6812  2B76
6813  2B77
6814  2B78
6815  2B79
6816  2B7A
6817  2B7B
6818  2B7C
6819  2B7D
6820  2B7E
6821  2B7F
6822  2B80
6823  2B81
6824  2B82
6825  2B83
6826  2B84
6827  2B85
6828  2B86
6829  2B87
6830  2B88
6831  2B89
6832  2B8A
6833  2B8B
6834  2B8C
6835  2B8D
6836  2B8E
6837  2B8F
6838  2B90
6839  2B91
6840  2B92
6841  2B93
6842  2B94
6843  2B95
6844  2B96
6845  2B97
6846  2B98
6847  2B99
6848  2B9A
6849  2B9B
6850  2B9C
6851  2B9D
6852  2B9E
6853  2B9F
6854  2BA0
6855  2BA1
6856  2BA2
6857  2BA3
6858  2BA4
6859  2BA5
6860  2BA6
6861  2BA7
6862  2BA8
6863  2BA9
6864  2BAA
6865  2BAB
6866  2BAC
6867  2BAD
6868  2BAE
6869  2BAF
6870  2BB0
6871  2BB1
6872  2BB2
6873  2BB3
6874  2BB4
6875  2BB5
6876  2BB6
6877  2BB7
6878  2BB8
6879  2BB9
6880  2BBA
6881  2BBB
6882  2BBC
6883  2BBD
6884  2BBE
6885  2BBF
6886  2BC0
6887  2BC1
6888  2BC2
6889  2BC3
6890  2BC4
6891  2BC5
6892  2BC6
6893  2BC7
6894  2BC8
6895  2BC9
6896  2BCA
6897  2BCB
6898  2BCC
6899  2BCD
6900  2BCE
6901  2BCF
6902  2BD0
6903  2BD1
6904  2BD2
6905  2BD3
6906  2BD4
6907  2BD5
6908  2BD6
6909  2BD7
6910  2BD8
6911  2BD9
6912  2BDA
6913  2BDB
6914  2BDC
6915  2BDD
6916  2BDE
6917  2BDF
6918  2BE0
6919  2BE1
6920  2BE2
6921  2BE3
6922  2BE4
6923  2BE5
6924  2BE6
6925  2BE7
6926  2BE8
6927  2BE9
6928  2BEA
6929  2BEB
6930  2BEC
6931  2BED
6932  2BEE
6933  2BEF
6934  2BF0
6935  2BF1
6936  2BF2
6937  2BF3
6938  2BF4
6939  2BF5
6940  2BF6
6941  2BF7
6942  2BF8
6943  2BF9
6944  2BFA
6945  2BFB
6946  2BFC
6947  2BFD
6948  2BFE
6949  2BFF
6950  2C00
6951  2C01
6952  2C02
6953  2C03
6954  2C04
6955  2C05
6956  2C06
6957  2C07
6958  2C08
6959  2C09
6960  2C0A
6961  2C0B
6962  2C0C
6963  2C0D
6964  2C0E
6965  2C0F
6966  2C10
6967  2C11
6968  2C12
6969  2C13
6970  2C14
6971  2C15
6972  2C16
6973  2C17
6974  2C18
6975  2C19
6976  2C1A
6977  2C1B
6978  2C1C
6979  2C1D
6980  2C1E
6981  2C1F
6982  2C20
6983  2C21
6984  2C22
6985  2C23
6986  2C24
6987  2C25
6988  2C26
6989  2C27
6990  2C28
6991  2C29
6992  2C2A
6993  2C2B
6994  2C2C
6995  2C2D
6996  2C2E
6997  2C2F
6998  2C30
6999  2C31
7000  2C32
7001  2C33
7002  2C34
7003  2C35
7004  2C36
7005  2C37
7006  2C38
7007  2C39
7008  2C3A
7009  2C3B
7010  2C3C
7011  2C3D
7012  2C3E
7013  2C3F
7014  2C40
7015  2C41
7016  2C42
7017  2C43
7018  2C44
7019  2C45
7020  2C46
7021  2C47
7022  2C48
7023  2C49
7024  2C4A
7025  2C4B
7026  2C4C
7027  2C4D
7028  2C4E
7029  2C4F
7030  2C50
7031  2C51
7032  2C52
7033  2C53
7034  2C54
7035  2C55
7036  2C56
7037  2C57
7038  2C58
7039  2C59
7040  2C5A
7041  2C5B
7042  2C5C
7043  2C5D
7044  2C5E
7045  2C5F
7046  2C60
7047  2C61
7048  2C62
7049  2C63
7050  2C64
7051  2C65
7052  2C66
7053  2C67
7054  2C68
7055  2C69
7056  2C6A
7057  2C6B
7058  2C6C
7059  2C6D
7060  2C6E
7061  2C6F
7062  2C70
7063  2C71
7064  2C72
7065  2C73
7066  2C74
7067  2C75
7068  2C76
7069  2C77
7070  2C78
7071  2C79
7072  2C7A
7073  2C7B
7074  2C7C
7075  2C7D
7076  2C7E
7077  2C7F
7078  2C80
7079  2C81
7080  2C82
7081  2C83
7082  2C84
7083  2C85
7084  2C86
7085  2C87
7086  2C88
7087  2C89
7088  2C8A
7089  2C8B
7090  2C8C
7091  2C8D
7092  2C8E
7093  2C8F
7094  2C90
7095  2C91
7096  2C92
7097  2C93
7098  2C94
7099  2C95
7100  2C96
7101  2C97
7102  2C98
7103  2C99
7104  2C9A
7105  2C9B
7106  2C9C
7107  2C9D
7108  2C9E
7109  2C9F
7110  2CA0
7111  2CA1
7112  2CA2
7113  2CA3
7114  2CA4
7115  2CA5
7116  2CA6
7117  2CA7
7118  2CA8
7119  2CA9
7120  2CAA
7121  2CAB
7122  2CAC
7123  2CAD
7124  2CAE
7125  2CAF
7126  2CB0
7127  2CB1
7128  2CB2
7129  2CB3
7130  2CB4
7131  2CB5
7132  2CB6
7133  2CB7
7134  2CB8
7135  2CB9
7136  2CBA
7137  2CBB
7138  2CBC
7139  2CBD
7140  2CBE
7141  2CBF
7142  2CC0
7143  2CC1
7144  2CC2
7145  2CC3
7146  2CC4
7147  2CC5
7148  2CC6
7149  2CC7
7150  2CC8
7151  2CC9
7152  2CCA
7153  2CCB
7154  2CCC
7155  2CCD
7156  2CCE
7157  2CCF
7158  2CD0
7159  2CD1
7160  2CD2
7161  2CD3
7162  2CD4
7163  2CD5
7164  2CD6
7165  2CD7
7166  2CD8
7167  2CD9
7168  2CDA
7169  2CDB
7170  2CDC
7171  2CDD
7172  2CDE
7173  2CDF
7174  2CE0
7175  2CE1
7176  2CE2
7177  2CE3
7178  2CE4
7179  2CE5
7180  2CE6
7181  2CE7
7182  2CE8
7183  2CE9
7184  2CEA
7185  2CEB
7186  2CEC
7187  2CED
7188  2CEE
7189  2CEF
7190  2CF0
7191  2CF1
7192  2CF2
7193  2CF3
7194  2CF4
7195  2CF5
7196  2CF6
7197  2CF7
7198  2CF8
7199  2CF9
7200  2CFA
7201  2CFB
7202  2CFC
7203  2CFD
7204  2CFE
7205  2CFF
7206  2D00
7207  2D01
7208  2D02
7209  2D03
7210  2D04
7211  2D05
7212  2D06
7213  2D07
7214  2D08
7215  2D09
7216  2D0A
7217  2D0B
7218  2D0C
7219  2D0D
7220  2D0E
7221  2D0F
7222  2D10
7223  2D11
7224  2D12
7225  2D13
7226  2D14
7227  2D15
7228  2D16
7229  2D17
7230  2D18
7231  2D19
7232  2D1A
7233  2D1B
7234  2D1C
7235  2D1D
7236  2D1E
7237  2D1F
7238  2D20
7239  2D21
7240  2D22
7241  2D23
7242  2D24
7243  2D25
7244  2D26
7245  2D27
7246  2D28
7247  2D29
7248  2D2A
7249  2D2B
7250  2D2C
7251  2D2D
7252  2D2E
7253  2D2F
7254  2D30
7255  2D31
7256  2D32
7257  2D33
7258  2D34
7259  2D35
7260  2D36
7261  2D37
7262  2D38
7263  2D39
7264  2D3A
7265  2D3B
7266  2D3C
7267  2D3D
7268  2D3E
7269  2D3F
7270  2D40
7271  2D41
7272  2D42
7273  2D43
7274  2D44
7275  2D45
7276  2D46
7277  2D47
7278  2D48
7279  2D49
7280  2D4A
7281  2D4B
7282  2D4C
7283  2D4D
7284  2D4E
7285  2D4F
7286  2D50
7287  2D51
7288  2D52
7289  2D53
7290  2D54
7291  2D55
7292  2D56
7293  2D57
7294  2D58
7295  2D59
7296  2D5A
7297  2D5B
7298  2D5C
7299  2D5D
7300  2D5E
7301  2D5F
7302  2D60
7303  2D61
7304  2D62
7305  2D63
7306  2D64
7307  2D65
7308  2D66
7309  2D67
7310  2D68
7311  2D69
7312  2D6A
7313  2D6B
7314  2D6C
7315  2D6D
7316  2D6E
7317  2D6F
7318  2D70
7319  2D71
7320  2D72
7321  2D73
7322  2D74
7323  2D75
7324  2D76
7325  2D77
7326  2D78
7327  2D79
7328  2D7A
7329  2D7B
7330  2D7C
7331  2D7D
7332  2D7E
7333  2D7F
7334  2D80
7335  2D81
7336  2D82
7337  2D83
7338  2D84
7339  2D85
7340  2D86
7341  2D87
7342  2D88
7343  2D89
7344  2D8A
7345  2D8B
7346  2D8C
7347  2D8D
7348  2D8E
7349  2D8F
7350  2D90
7351  2D91
7352  2D92
7353  2D93
7354  2D94
7355  2D95
7356  2D96
7357  2D97
7358  2D98
7359  2D99
7360  2D9A
7361  2D9B
7362  2D9C
7363  2D9D
7364  2D9E
7365  2D9F
7366  2DA0
7367  2DA1
7368  2DA2
7369  2DA3
7370  2DA4
7371  2DA5
7372  2DA6
7373  2DA7
7374  2DA8
7375  2DA9
7376  2DAA
7377  2DAB
7378  2DAC
7379  2DAD
7380  2DAE
7381  2DAF
7382  2DB0
7383  2DB1
7384  2DB2
7385  2DB3
7386  2DB4
7387  2DB5
7388  2DB6
7389  2DB7
7390  2DB8
7391  2DB9
7392  2DBA
7393  2DBB
7394  2DBC
7395  2DBD
7396  2DBE
7397  2DBF
7398  2DC0
7399  2DC1
7400  2DC2
7401  2DC3
7402  2DC4
7403  2DC5
7404  2DC6
7405  2DC7
7406  2DC8
7407  2DC9
7408  2DCA
7409  2DCB
7410  2DCC
7411  2DCD
7412  2DCE
7413  2DCF
7414  2DD0
7415  2DD1
7416  2DD2
7417  2DD3
7418  2DD4
7419  2DD5
7420  2DD6
7421  2DD7
7422  2DD8
7423  2DD9
7424  2DDA
7425  2DDB
7426  2DDC
7427  2DDD
7428  2DDE
7429  2DDF
7430  2DE0
7431  2DE1
7432  2DE2
7433  2DE3
7434  2DE4
7435  2DE5
7436  2DE6
7437  2DE7
7438  2DE8
7439  2DE9
7440  2DEA
7441  2DEB
7442  2DEC
7443  2DED
7444  2DEE
7445  2DEF
7446  2DF0
7447  2DF1
7448  2DF2
7449  2DF3
7450  2DF4
7451  2DF5
7452  2DF6
7453  2DF7
7454  2DF8
7455  2DF9
7456  2DFA
7457  2DFB
7458  2DFC
7459  2DFD
7460  2DFE
7461  2DFF
7462  2E00
7463  2E01
7464  2E02
7465  2E03
7466  2E04
7467  2E05
7468  2E06
7469  2E07
7470  2E08
7471  2E09
7472  2E0A
7473  2E0B
7474  2E0C
7475  2E0D
7476  2E0E
7477  2E0F
7478  2E10
7479  2E11
7480  2E12
7481  2E13
7482  2E14
7483  2E15
7484  2E16
7485  2E17
7486  2E18
7487  2E19
7488  2E1A
7489  2E1B
7490  2E1C
7491  2E1D
7492  2E1E
7493  2E1F
7494  2E20
7495  2E21
7496  2E22
7497  2E23
7498  2E24
7499  2E25
7500  2E26
7501  2E27
7502  2E28
7503  2E29
7504  2E2A
7505  2E2B
7506  2E2C
7507  2E2D
7508  2E2E
7509  2E2F
7510  2E30
7511  2E31
7512  2E32
7513  2E33
7514  2E34
7515  2E35
7516  2E36
7517  2E37
7518  2E38
7519  2E39
7520  2E3A
7521  2E3B
7522  2E3C
7523  2E3D
7524  2E3E
7525  2E3F
7526  2E40
7527  2E41
7528  2E42
7529  2E43
7530  2E44
7531  2E45
7532  2E46
7533  2E47
7534  2E48
7535  2E49
7536  2E4A
7537  2E4B
7538  2E4C
7539  2E4D
7540  2E4E
7541  2E4F
7542  2E50
7543  2E51
7544  2E52
7545  2E53
7546  2E54
7547  2E55
7548  2E56
7549  2E57
7550  2E58
7551  2E59
7552  2E5A
7553  2E5B
7554  2E5C
7555  2E5D
7556  2E5E
7557  2E5F
7558  2E60
7559  2E61
7560  2E62
7561  2E63
7562  2E64
7563  2E65
7564  2E66
7565  2E67
7566  2E68
7567  2E69
7568  2E6A
7569  2E6B
7570  2E6C
7571  2E6D
7572  2E6E
7573  2E6F
7574  2E70
7575  2E71
7576  2E72
7577  2E73
7578  2E74
7579  2E75
7580  2E76
7581  2E77
7582  2E78
7583  2E79
7584  2E7A
7585  2E7B
7586  2E7C
7587  2E7D
7588  2E7E
7589  2E7F
7590  2E80
7591  2E81
7592  2E82
7593  2E83
7594  2E84
7595  2E85
7596  2E86
7597  2E87
7598  2E88
7599  2E89
7600  2E8A
7601  2E8B
7602  2E8C
7603  2E8D
7604  2E8E
7605  2E8F
7606  2E90
7607  2E91
7608  2E92
7609  2E93
7610  2E94
7611  2E95
7612  2E96
7613  2E97
7614  2E98
7615  2E99
7616  2E9A
7617  2E9B
7618  2E9C
7619  2E9D
7620  2E9E
7621  2E9F
7622  2EA0
7623  2EA1
7624  2EA2
7625  2EA3
7626  2EA4
7627  2EA5
7628  2EA6
7629  2EA7
7630  2EA8
7631  2EA9
7632  2EAA
7633  2EAB
7634  2EAC
7635  2EAD
7636  2EAE
7637  2EAF
7638  2EB0
7639  2EB1
7640  2EB2
7641  2EB3
7642  2EB4
7643  2EB5
7644  2EB6
7645  2EB7
7646  2EB8
7647  2EB9
7648  2EBA
7649  2EBB
7650  2EBC
7651  2EBD
7652  2EBE
7653  2EBF
7654  2EC0
7655  2EC1
7656  2EC2
7657  2EC3
7658  2EC4
7659  2EC5
7660  2EC6
7661  2EC7
7662  2EC8
7663  2EC9
7664  2ECA
7665  2ECB
7666  2ECC
7667  2ECD
7668  2ECE
7669  2ECF
7670  2ED0
7671  2ED1
7672  2ED2
7673  2ED3
7674  2ED4
7675  2ED5
7676  2ED6
7677  2ED7
7678  2ED8
7679  2ED9
7680  2EDA
7681  2EDB
7682  2EDC
7683  2EDD
7684  2EDE
7685  2EDF
7686  2EE0
7687  2EE1
7688  2EE2
7689  2EE3
7690  2EE4
7691  2EE5
7692  2EE6
7693  2EE7
7694  2EE8
7695  2EE9
7696  2EEA
7697  2EEB
7698  2EEC
7699  2EED
7700  2EEE
7701  2EEF
7702  2EF0
7703  2EF1
7704  2EF2
7705  2EF3
7706  2EF4
7707  2EF5
7708  2EF6
7709  2EF7
7710  2EF8
7711  2EF9
7712  2EFA
7713  2EFB
7714  2EFC
7715  2EFD
7716  2EFE
7717  2EFF
7718  2F00
7719  2F01
7720  2F02
7721  2F03
7722  2F04
7723  2F05
7724  2F06
7725  2F07
7726  2F08
7727  2F09
7728  2F0A
7729  2F0B
7730  2F0C
7731  2F0D
7732  2F0E
7733  2F0F
7734  2F10
7735  2F11
7736  2F12
7737  2F13
7738  2F14
7739  2F15
7740  2F16
7741  2F17
7742  2F18
7743  2F19
7744  2F1A
7745  2F1B
7746  2F1C
7747  2F1D
7748  2F1E
7749  2F1F
7750  2F20
7751  2F21
7752  2F22
7753  2F23
7754  2F24
7755  2F25
7756  2F26
7757  2F27
7758  2F28
7759  2F29
7760  2F2A
7761  2F2B
7762  2F2C
7763  2F2D
7764  2F2E
7765  2F2F
7766  2F30
7767  2F31
7768  2F32
7769  2F33
7770  2F34
7771  2F35
7772  2F36
7773  2F37
7774  2F38
7775  2F39
7776  2F3A
7777  2F3B
7778  2F3C
7779  2F3D
7780  2F3E
7781  2F3F
7782  2F40
7783  2F41
7784  2F42
7785  2F43
7786  2F44
7787  2F45
7788  2F46
7789  2F47
7790  2F48
7791  2F49
7792  2F4A
7793  2F4B
7794  2F4C
7795  2F4D
7796  2F4E
7797  2F4F
7798  2F50
7799  2F51
7800  2F52
7801  2F53
7802  2F54
7803  2F55
7804  2F56
7805  2F57
7806  2F58
7807  2F59
7808  2F5A
7809  2F5B
7810  2F5C
7811  2F5D
7812  2F5E
7813  2F5F
7814  2F60
7815  2F61
7816  2F62
7817  2F63
7818  2F64
7819  2F65
7820  2F66
7821  2F67
7822  2F68
7823  2F69
7824  2F6A
7825  2F6B
7826  2F6C
7827  2F6D
7828  2F6E
7829  2F6F
7830  2F70
7831  2F71
7832  2F72
7833  2F73
7834  2F74
7835  2F75
7836  2F76
7837  2F77
7838  2F78
7839  2F79
7840  2F7A
7841  2F7B
7842  2F7C
7843  2F7D
7844  2F7E
7845  2F7F
7846  2F80
7847  2F81
7848  2F82
7849  2F83
7850  2F84
7851  2F85
7852  2F86
7853  2F87
7854  2F88
7855  2F89
7856  2F8A
7857  2F8B
7858  2F8C
7859  2F8D
7860  2F8E
7861  2F8F
7862  2F90
7863  2F91
7864  2F92
7865  2F93
7866  2F94
7867  2F95
7868  2F96
7869  2F97
7870  2F98
7871  2F99
7872  2F9A
7873  2F9B
7874  2F9C
7875  2F9D
7876  2F9E
7877  2F9F
7878  2FA0
7879  2FA1
7880  2FA2
7881  2FA3
7882  2FA4
7883  2FA5
7884  2FA6
7885  2FA7
7886  2FA8
7887  2FA9
7888  2FAA
7889  2FAB
7890  2FAC
7891  2FAD
7892  2FAE
7893  2FAF
7894  2FB0
7895  2FB1
7896  2FB2
7897  2FB3
7898  2FB4
7899  2FB5
7900  2FB6
7901  2FB7
7902  2FB8
7903  2FB9
7904  2FBA
7905  2FBB
7906  2FBC
7907  2FBD
7908  2FBE
7909  2FBF
7910  2FC0
7911  2FC1
7912  2FC2
7913  2FC3
7914  2FC4
7915  2FC5
7916  2FC6
7917  2FC7
7918  2FC8
7919  2FC9
7920  2FCA
7921  2FCB
7922  2FCC
7923  2FCD
7924  2FCE
7925  2FCF
7926  2FD0
7927  2FD1
7928  2FD2
7929  2FD3
7930  2FD4
7931  2FD5
7932  2FD6
7933  2FD7
7934  2FD8
7935  2FD9
7936  2FDA
7937  2FDB
7938  2FDC
7939  2FDD
7940  2FDE
7941  2FDF
7942  2FE0
7943  2FE1
7944  2FE2
7945  2FE3
7946  2FE4
7947  2FE5
7948  2FE6
7949  2FE7
7950  2FE8
7951  2FE9
7952  2FEA
7953  2FEB
7954  2FEC
7955  2FED
7956  2FEE
7957  2FEF
7958  2FF0
7959  2FF1
7960  2FF2
7961  2FF3
7962  2FF4
7963  2FF5
7964  2FF6
7965  2FF7
7966  2FF8
7967  2FF9
7968  2FFA
7969  2FFB
7970  2FFC
7971  2FFD
7972  2FFE
7973  2FFF
7974  3000
7975  3001
7976  3002
7977  3003
7978  3004
7979  3005
7980  3006
7981  3007
7982  3008
7983  3009
7984  300A
7985  300B
7986  300C
7987  300D
7988  300E
7989  300F
7990  3010
7991  3011
7992  3012
7993  3013
7994  3014
7995  3015
7996  3016
7997  3017
7998  3018
7999  3019
8000  301A
8001  301B
8002  301C
8003  301D
8004  301E
8005  301F
8006  3020
8007  3021
8008  3022
8009  3023
8010  3024
8011  3025
8012  3026
8013  3027
8014  3028
8015  3029
8016  302A
8017  302B
8018  302C
8019  302D
8020  302E
8021  302F
8022  3030
8023  3031
8024  3032
8025  3033
8026  3034
8027  3035
8028  3036
8029  3037
8030  3038
8031  3039
8032  303A
8033  303B
8034  303C
8035  303D
8036  303E
8037  303F
8038  3040
8039  3041
8040  3042
8041  3043
8042  3044
8043  3045
8044  3046
8045  3047
8046  3048
8047  3049
8048  304A
8049  304B
8050  304C
8051  304D
8052  304E
8053  304F
8054  3050
8055  3051
8056  3052
8057  3053
8058  3054
8059  3055
8060  3056
8061  3057
8062  3058
8063  3059
8064  305A
8065  305B
8066  305C
8067  305D
8068  305E
8069  305F
8070  3060
8071  3061
8072  3062
8073  3063
8074  3064
8075  3065
8076  3066
8077  3067
8078  3068
8079  3069
8080  306A
8081  306B
8082  306C
8083  306D
8084  306E
8085  306F
8086  3070
8087  3071
8088  3072
8089  3073
8090  3074
8091  3075
8092  3076
8093  3077
8094  3078
8095  3079
8096  307A
8097  307B
8098  307C
8099  307D
8100  307E
8101  307F
8102  3080
8103  3081
8104  3082
8105  3083
8106  3084
8107  3085
8108  3086
8109  3087
8110  3088
8111  3089
8112  308A
8113  308B
8114  308C
8115  308D
8116  308E
8117  308F
8118  3090
8119  3091
8120  3092
8121  3093
8122  3094
8123  3095
8124  3096
8125  3097
8126  3098
8127  3099
8128  309A
8129  309B
8130  309C
8131  309D
8132  309E
8133  309F
8134  30A0
8135  30A1
8136  30A2
8137  30A3
8138  30A4
8139  30A5
8140  30A6
8141  30A7
8142  30A8
8143  30A9
8144  30AA
8145  30AB
8146  30AC
8147  30AD
8148  30AE
8149  30AF
8150  30B0
8151  30B1
8152  30B2
8153  30B3
8154  30B4
8155  30B5
8156  30B6
8157  30B7
8158  30B8
8159  30B9
8160  30BA
8161  30BB
8162  30BC
8163  30BD
8164  30BE
8165  30BF
8166  30C0
8167  30C1
8168  30C2
8169  30C3
8170  30C4
8171  30C5
8172  30C6
8173  30C7
8174  30C8
8175  30C9
8176  30CA
8177  30CB
8178  30CC
8179  30CD
8180  30CE
8181  30CF
8182  30D0
8183  30D1
8184  30D2
8185  30D3
8186  30D4
8187  30D5
8188  30D6
8189  30D7
8190  30D8
8191  30D9
8192  30DA
8193  30DB
8194  30DC
8195  30DD
8196  30DE
8197  30DF
8198  30E0
8199  30E1
8200  30E2
8201  30E3
8202  30E4
8203  30E5
8204  30E6
8205  30E7
8206  30E8
8207  30E9
8208  30EA
8209  30EB
8210  30EC
8211  30ED
8212  30EE
8213  30EF
8214  30F0
8215  30F1
8216  30F2
8217  30F3
8218  30F4
8219  30F5
8220  30F6
8221  30F7
8222  30F8
8223  30F9
8224  30FA
8225  30FB
8226  30FC
8227  30FD
8228  30FE
8229  30FF
8230  3100
8231  3101
8232  3102
8233  3103
8234  3104
8235  3105
8236  3106
8237  3107
8238  3108
8239  3109
8240  310A
8241  310B
8242  310C
8243  310D
8244  310E
8245  310F
8246  3110
8247  3111
8248  3112
8249  3113
8250  3114
8251  3115
8252  3116
8253  3117
8254  3118
8255  3119
8256  311A
8257  311B
8258  311C
8259  311D
8260  311E
8261  311F
8262  3120
8263  3121
8264  3122
8265  3123
8266  3124
8267  3125
8268  3126
8269  3127
8270  3128
8271  3129
8272  312A
8273  312B
8274  312C
8275  312D
8276  312E
8277  312F
8278  3130
8279  3131
8280  3132
8281  3133
8282  3134
8283  3135
8284  3136
8285  3137
8286  3138
8287  3139
8288  313A
8289  313B
8290  313C
8291  313D
8292  313E
8293  313F
8294  3140
8295  3141
8296  3142
8297  3143
8298  3144
8299  3145
8300  3146
8301  3147
8302  3148
8303  3149
8304  314A
8305  314B
8306  314C
8307  314D
8308  314E
8309  314F
8310  3150
8311  3151
8312  3152
8313  3153
8314  3154
8315  3155
8316  3156
8317  3157
8318  3158
8319  3159
8320  315A
8321  315B
8322  315C
8323  315D
8324  315E
8325  315F
8326  3160
8327  3161
8328  3162
8329  3163
8330  3164
8331  3165
8332  3166
8333  3167
8334  3168
8335  3169
8336  316A
8337  316B
8338  316C
8339  316D
8340  316E
8341  316F
8342  3170
8343  3171
8344  3172
8345  3173
8346  3174
8347  3175
8348  3176
8349  3177
8350  3178
8351  3179
8352  317A
8353  317B
8354  317C
8355  317D
8356  317E
8357  317F
8358  3180
8359  3181
8360  3182
8361  3183
8362  3184
8363  3185
8364  3186
8365  3187
8366  3188
8367  3189
8368  318A
8369  318B
8370  318C
8371  318D
8372  318E
8373  318F
8374  3190
8375  3191
8376  3192
8377  3193
8378  3194
8379  3195
8380  3196
8381  3197
8382  3198
8383  3199
8384  319A
8385  319B
8386  319C
8387  319D
8388  319E
8389  319F
8390  31A0
8391  31A1
8392  31A2
8393  31A3
8394  31A4
8395  31A5
8396  31A6
8397  31A7
8398  31A8
8399  31A9
8400  31AA
8401  31AB
8402  31AC
8403  31AD
8404  31AE
8405  31AF
8406  31B0
8407  31B1
8408  31B2
8409  31B3
8410  31B4
8411  31B5
8412  31B6
8413  31B7
8414  31B8
8415  31B9
8416  31BA
8417  31BB
8418  31BC
8419  31BD
8420  31BE
8421  31BF
8422  31C0
8423  31C1
8424  31C2
8425  31C3
8426  31C4
8427  31C5
8428  31C6
8429  31C7
8430  31C8
8431  31C9
8432  31CA
8433  31CB
8434  31CC
8435  31CD
8436  31CE
8437  31CF
8438  31D0
8439  31D1
8440  31D2
8441  31D3
8442  31D4
8443  31D5
8444  31D6
8445  31D7
8446  31D8
8447  31D9
8448  31DA
8449  31DB
8450  31DC
8451  31DD
8452  31DE
8453  31DF
8454  31E0
8455  31E1
8456  31E2
8457  31E3
8458  31E4
8459  31E5
8460  31E6
8461  31E7
8462  31E8
8463  31E9
8464  31EA
8465  31EB
8466  31EC
8467  31ED
8468  31EE
8469  31EF
8470  31F0
8471  31F1
8472  31F2
8473  31F3
8474  31F4
8475  31F5
8476  31F6
8477  31F7
8478  31F8
8479  31F9
8480  31FA
8481  31FB
8482  31FC
8483  31FD
8484  31FE
8485  31FF
8486  3200
8487  3201
8488  3202
8489  3203
8490  3204
8491  3205
8492  3206
8493  3207
8494  3208
8495  3209
8496  320A
8497  320B
8498  320C
8499  320D
8500  320E
8501  320F
8502  3210
8503  3211
8504  3212
8505  3213
8506  3214
8507  3215
8508  3216
8509  3217
8510  3218
8511  3219
8512  321A
8513  321B
8514  321C
8515  321D
8516  321E
8517  321F
8518  3220
8519  3221
8520  3222
8521  3223
8522  3224
8523  3225
8524  3226
8525  3227
8526  3228
8527  3229
8528  322A
8529  322B
8530  322C
8531  322D
8532  322E
8533  322F
8534  3230
8535  3231
8536  3232
8537  3233
8538  3234
8539  3235
8540  3236
8541  3237
8542  3238
8543  3239
8544  323A
8545  323B
8546  323C
8547  323D
8548  323E
8549  323F
8550  3240
8551  3241
8552  3242
8553  3243
8554  3244
8555  3245
8556  3246
8557  3247
8558  3248
8559  3249
8560  324A
8561  324B
8562  324C
8563  324D
8564  324E
8565  324F
8566  3250
8567  3251
8568  3252
8569  3253
8570  3254
8571  3255
8572  3256
8573  3257
8574  3258
8575  3259
8576  325A
8577  325B
8578  325C
8579  325D
8580  325E
8581  325F
8582  3260
8583  3261
8584  3262
8585  3263
8586  3264
8587  3265
8588  3266
8589  3267
8590  3268
8591  3269
8592  326A
8593  326B
8594  326C
8595  326D
8596  326E
8597  326F
8598  3270
8599  3271
8600  3272
8601  3273
8602  3274
8603  3275
8604  3276
8605  3277
8606  3278
8607  3279
8608  327A
8609  327B
8610  327C
8611  327D
8612  327E
8613  327F
8614  3280
8615  3281
8616  3282
8617  3283
8618  3284
8619  3285
8620  3286
8621  3287
8622  3288
8623  3289
8624  328A
8625  328B
8626  328C
8627  328D
8628  328E
8629  328F
8630  3290
8631  3291
8632  3292
8633  3293
8634  3294
8635  3295
8636  3296
8637  3297
8638  3298
8639  3299
8640  329A
8641  329B
8642  329C
8643  329D
8644  329E
8645  329F
8646  32A0
8647  32A1
8648  32A2
8649  32A3
8650  32A4
8651  32A5
8652  32A6
8653  32A7
8654  32A8
8655  32A9
8656  32AA
8657  32AB
8658  32AC
8659  32AD
8660  32AE
8661  32AF
8662  32B0
8663  32B1
8664  32B2
8665  32B3
8666  32B4
8667  32B5
8668  32B6
8669  32B7
8670  32B8
8671  32B9
8672  32BA
8673  32BB
8674  32BC
8675  32BD
8676  32BE
8677  32BF
8678  32C0
8679  32C1
8680  32C2
8681  32C3
8682  32C4
8683  32C5
8684  32C6
8685  32C7
8686  32C8
8687  32C9
8688  32CA
8689  32CB
8690  32CC
8691  32CD
8692  32CE
8693  32CF
8694  32D0
8695  32D1
8696  32D2
8697  32D3
8698  32D4
8699  32D5
8700  32D6
8701  32D7
8702  32D8
8703  32D9
8704  32DA
8705  32DB
8706  32DC
8707  32DD
8708  32DE
8709  32DF
8710  32E0
8711  32E1
8712  32E2
8713  32E3
8714  32E4
8715  32E5
8716  32E6
8717  32E7
8718  32E8
8719  32E9
8720  32EA
8721  32EB
8722  32EC
8723  32ED
8724  32EE
8725  32EF
8726  32F0
8727  32F1
8728  32F2
8729  32F3
8730  32F4
8731  32F5
8732  32F6
8733  32F7
8734  32F8
8735  32F9
8736  32FA
8737  32FB
8738  32FC
8739  32FD
8740  32FE
8741  32FF
8742  3300
8743  3301
8744  3302
8745  3303
8746  3304
8747  3305
8748  3306
8749  3307
8750  3308
8751  3309
8752  330A
8753  330B
8754  330C
8755  330D
8756  330E
8757  330F
8758  3310
8759  3311
8760  3312
8761  3313
8762  3314
8763  3315
8764  3316
8765  3317
8766  3318
8767  3319
8768  331A
8769  331B
8770  331C
8771  331D
8772  331E
8773  331F
8774  3320
8775  3321
8776  3322
8777  3323
8778  3324
8779  3325
8780  3326
8781  3327
8782  3328
8783  3329
8784  332A
8785  332B
8786  332C
8787  332D
8788  332E
8789  332F
8790  3330
8791  3331
8792  3332
8793  3333
8794  3334
8795  3335
8796  3336
8797  3337
8798  3338
8799  3339
8800  333A
8801  333B
8802  333C
8803  333D
8804  333E
8805  333F
8806  3340
8807  3341
8808  3342
8809  3343
8810  3344
8811  3345
8812  3346
8813  3347
8814  3348
8815  3349
8816  334A
8817  334B
8818  334C
8819  334D
8820  334E
8821  334F
8822  3350
8823  3351
8824  3352
8825  3353
8826  3354
8827  3355
8828  3356
8829  3357
8830  3358
8831  3359
8832  335A
8833  335B
8834  335C
8835  335D
8836  335E
8837  335F
8838  3360
8839  3361
8840  3362
8841  3363
8842  3364
8843  3365
8844  3366
8845  3367
8846  3368
8847  3369
8848  336A
8849  336B
8850  336C
8851  336D
8852  336E
8853  336F
8854  3370
8855  3371
8856  3372
8857  3373
8858  3374
8859  3375
8860  3376
8861  3377
8862  3378
8863  3379
8864  337A
8865  337B
8866  337C
8867  337D
8868  337E
8869  337F
8870  3380
8871  3381
8872  3382
8873  3383
8874  3384
8875  3385
8876  3386
8877  3387
8878  3388
8879  3389
8880  338A
8881  338B
8882  338C
8883  338D
8884  338E
8885  338F
8886  3390
8887  3391
8888  3392
8889  3393
8890  3394
8891  3395
8892  3396
8893  3397
8894  3398
8895  3399
8896  339A
8897  339B
8898  339C
8899  339D
8900  339E
8901  339F
8902  33A0
8903  33A1
8904  33A2
8905  33A3
8906  33A4
8907  33A5
8908  33A6
8909  33A7
8910  33A8
8911  33A9
8912  33AA
8913  33AB
8914  33AC
8915  33AD
8916  33AE
8917  33AF
8918  33B0
8919  33B1
8920  33B2
8921  33B3
8922  33B4
8923  33B5
8924  33B6
8925  33B7
8926  33B8
8927  33B9
8928  33BA
8929  33BB
8930  33BC
8931  33BD
8932  33BE
8933  33BF
8934  33C0
8935  33C1
8936  33C2
8937  33C3
8938  33C4
8939  33C5
8940  33C6
8941  33C7
8942  33C8
8943  33C9
8944  33CA
8945  33CB
8946  33CC
8947  33CD
8948  33CE
8949  33CF
8950  33D0
8951  33D1
8952  33D2
8953  33D3
8954  33D4
8955  33D5
8956  33D6
8957  33D7
8958  33D8
8959  33D9
8960  33DA
8961  33DB
8962  33DC
8963  33DD
8964  33DE
8965  33DF
8966  33E0
8967  33E1
8968  33E2
8969  33E3
8970  33E4
8971  33E5
8972  33E6
8973  33E7
8974  33E8
8975  33E9
8976  33EA
8977  33EB
8978  33EC
8979  33ED
8980  33EE
8981  33EF
8982  33F0
8983  33F1
8984  33F2
8985  33F3
8986  33F4
8987  33F5
8988  33F6
8989  33F7
8990  33F8
8991  33F9
8992  33FA
8993  33FB
8994  33FC
8995  33FD
8996  33FE
8997  33FF
8998  3400
8999  3401
9000  3402
9001  3403
9002  3404
9003  3405
9004  3406
9005  3407
9006  3408
9007  3409
9008  340A
9009  340B
9010  340C
9011  340D
9012  340E
9013  340F
9014  3410
9015  3411
9016  3412
9017  3413
9018  3414
9019  3415
9020  3416
9021  3417
9022  3418
9023  3419
9024  341A
9025  341B
9026  341C
9027  341D
9028  341E
9029  341F
9030  3420
9031  3421
9032  3422
9033  3423
9034  3424
9035  3425
9036  3426
9037  3427
9038  3428
9039  3429
9040  342A
9041  342B
9042  342C
9043  342D
9044  342E
9045  342F
9046  3430
9047  3431
9048  3432
9049  3433
9050  3434
9051  3435
9052  3436
9053  3437
9054  3438
9055  3439
9056  343A
9057  343B
9058  343C
9059  343D
9060  343E
9061  343F
9062  3440
9063  3441
9064  3442
9065  3443
9066  3444
9067  3445
9068  3446
9069  3447
9070  3448
9071  3449
9072  344A
9073  344B
9074  344C
9075  344D
9076  344E
9077  344F
9078  3450
9079  3451
9080  3452
9081  3453
9082  3454
9083  3455
9084  3456
9085  3457
9086  3458
9087  3459
9088  345A
9089  345B
9090  345C
9091  345D
9092  345E
9093  345F
9094  3460
9095  3461
9096  3462
9097  3463
9098  3464
9099  3465
9100  3466
9101  3467
9102  3468
9103  3469
9104  346A
9105  346B
9106  346C
9107  346D
9108  346E
9109  346F
9110  3470
9111  3471
9112  3472
9113  3473
9114  3474
9115  3475
9116  3476
9117  3477
9118  3478
9119  3479
9120  347A
9121  347B
9122  347C
9123  347D
9124  347E
9125  347F
9126  3480
9127  3481
9128  3482
9129  3483
9130  3484
9131  3485
9132  3486
9133  3487
9134  3488
9135  3489
9136  348A
9137  348B
9138  348C
9139  348D
9140  348E
9141  348F
9142  3490
9143  3491
9144  3492
9145  3493
9146  3494
9147  3495
9148  3496
9149  3497
9150  3498
9151  3499
9152  349A
9153  349B
9154  349C
9155  349D
9156  349E
9157  349F
9158  34A0
9159  34A1
9160  34A2
9161  34A3
9162  34A4
9163  34A5
9164  34A6
9165  34A7
9166  34A8
9167  34A9
9168  34AA
9169  34AB
9170  34AC
9171  34AD
9172  34AE
9173  34AF
9174  34B0
9175  34B1
9176  34B2
9177  34B3
9178  34B4
9179  34B5
9180  34B6
9181  34B7
9182  34B8
9183  34B9
9184  34BA
9185  34BB
9186  34BC
9187  34BD
9188  34BE
9189  34BF
9190  34C0
9191  34C1
9192  34C2
9193  34C3
9194  34C4
9195  34C5
9196  34C6
9197  34C7
9198  34C8
9199  34C9
9200  34CA
9201  34CB
9202  34CC
9203  34CD
9204  34CE
9205  34CF
9206  34D0
9207  34D1
9208  34D2
9209  34D3
9210  34D4
9211  34D5
9212  34D6
9213  34D7
9214  34D8
9215  34D9
9216  34DA
9217  34DB
9218  34DC
9219  34DD
9220  34DE
9221  34DF
9222  34E0
9223  34E1
9224  34E2
9225  34E3
9226  34E4
9227  34E5
9228  34E6
9229  34E7
9230  34E8
9231  34E9
9232  34EA
9233  34EB
9234  34EC
9235  34ED
9236  34EE
9237  34EF
9238  34F0
9239  34F1
9240  34F2
9241  34F3
9242  34F4
9243  34F5
9244  34F6
9245  34F7
9246  34F8
9247  34F9
9248  34FA
9249  34FB
9250  34FC
9251  34FD
9252  34FE
9253  34FF
9254  3500
9255  3501
9256  3502
9257  3503
9258  3504
9259  3505
9260  3506
9261  3507
9262  3508
9263  3509
9264  350A
9265  350B
9266  350C
9267  350D
9268  350E
9269  350F
9270  3510
9271  3511
9272  3512
9273  3513
9274  3514
9275  3515
9276  3516
9277  3517
9278  3518
9279  3519
9280  351A
9281  351B
9282  351C
9283  351D
9284  351E
9285  351F
9286  3520
9287  3521
9288  3522
9289  3523
9290  3524
9291  3525
9292  3526
9293  3527
9294  3528
9295  3529
9296  352A
9297  352B
9298  352C
9299  352D
9300  352E
9301  352F
9302  3530
9303  3531
9304  3532
9305  3533
9306  3534
9307  3535
9308  3536
9309  3537
9310  3538
9311  3539
9312  353A
9313  353B
9314  353C
9315  353D
9316  353E
9317  353F
9318  3540
9319  3541
9320  3542
9321  3543
9322  3544
9323  3545
9324  3546
9325  3547
9326  3548
9327  3549
9328  354A
9329  354B
9330  354C
9331  354D
9332  354E
9333  354F
9334  3550
9335  3551
9336  3552
9337  3553
9338  3554
9339  3555
9340  3556
9341  3557
9342  3558
9343  3559
9344  355A
9345  355B
9346  355C
9347  355D
9348  355E
9349  355F
9350  3560
9351  3561
9352  3562
9353  3563
9354  3564
9355  3565
9356  3566
9357  3567
9358  3568
9359  3569
9360  356A
9361  356B
9362  356C
9363  356D
9364  356E
9365  356F
9366  3570
9367  3571
9368  3572
9369  3573
9370  3574
9371  3575
9372  3576
9373  3577
9374  3578
9375  3579
9376  357A
9377  357B
9378  357C
9379  357D
9380  357E
9381  357F
9382  3580
9383  3581
9384  3582
9385  3583
9386  3584
9387  3585
9388  3586
9389  3587
9390  3588
9391  3589
9392  358A
9393  358B
9394  358C
9395  358D
9396  358E
9397  358F
9398  3590
9399  3591
9400  3592
9401  3593
9402  3594
9403  3595
9404  3596
9405  3597
9406  3598
9407  3599
9408  359A
9409  359B
9410  359C
9411  359D
9412  359E
9413  359F
9414  35A0
9415  35A1
9416  35A2
9417  35A3
9418  35A4
9419  35A5
9420  35A6
9421  35A7
9422  35A8
9423  35A9
9424  35AA
9425  35AB
9426  35AC
9427  35AD
9428  35AE
9429  35AF
9430  35B0
9431  35B1
9432  35B2
9433  35B3
9434  35B4
9435  35B5
9436  35B6
9437  35B7
9438  35B8
9439  35B9
9440  35BA
9441  35BB
9442  35BC
9443  35BD
9444  35BE
9445  35BF
9446  35C0
9447  35C1
9448  35C2
9449  35C3
9450  35C4
9451  35C5
9452  35C6
9453  35C7
9454  35C8
9455  35C9
9456  35CA
9457  35CB
9458  35CC
9459  35CD
9460  35CE
9461  35CF
9462  35D0
9463  35D1
9464  35D2
9465  35D3
9466  35D4
9467  35D5
9468  35D6
9469  35D7
9470  35D8
9471  35D9
9472  35DA
9473  35DB
9474  35DC
9475  35DD
9476  35DE
9477  35DF
9478  35E0
9479  35E1
9480  35E2
9481  35E3
9482  35E4
9483  35E5
9484  35E6
9485  35E7
9486  35E8
9487  35E9
9488  35EA
9489  35EB
9490  35EC
9491  35ED
9492  35EE
9493  35EF
9494  35F0
9495  35F1
9496  35F2
9497  35F3
9498  35F4
9499  35F5
9500  35F6
9501  35F7
9502  35F8
9503  35F9
9504  35FA
9505  35FB
9506  35FC
9507  35FD
9508  35FE
9509  35FF
9510  3600
9511  3601
9512  3602
9513  3603
9514  3604
9515  3605
9516  3606
9517  3607
9518  3608
9519  3609
9520  360A
9521  360B
9522  360C
9523  360D
9524  360E
9525  360F
9526  3610
9527  3611
9528  3612
9529  3613
9530  3614
9531  3615
9532  3616
9533  3617
9534  3618
9535  3619
9536  361A
9537  361B
9538  361C
9539  361D
9540  361E
9541  361F
9542  3620
9543  3621
9544  3622
9545  3623
9546  3624
9547  3625
9548  3626
9549  3627
9550  3628
9551  3629
9552  362A
9553  362B
9554  362C
9555  362D
9556  362E
9557  362F
9558  3630
9559  3631
9560  3632
9561  3633
9562  3634
9563  3635
9564  3636
9565  3637
9566  3638
9567  3639
9568  363A
9569  363B
9570  363C
9571  363D
9572  363E
9573  363F
9574  3640
9575  3641
9576  3642
9577  3643
9578  3644
9579  3645
9580  3646
9581  3647
9582  3648
9583  3649
9584  364A
9585  364B
9586  364C
9587  364D
9588  364E
9589  364F
9590  3650
9591  3651
9592  3652
9593  3653
9594  3654
9595  3655
9596  3656
9597  3657
9598  3658
9599  3659
9600  365A
9601  365B
9602  365C
9603  365D
9604  365E
9605  365F
9606  3660
9607  3661
9608  3662
9609  3663
9610  3664
9611  3665
9612  3666
9613  3667
9614  3668
9615  3669
9616  366A
9617  366B
9618  366C
9619  366D
9620  366E
9621  366F
9622  3670
9623  3671
9624  3672
9625  3673
9626  3674
9627  3675
9628  3676
9629  3677
9630  3678
9631  3679
9632  367A
9633  367B
9634  367C
9635  367D
9636  367E
9637  367F
9638  3680
9639  3681
9640  3682
9641  3683
9642  3684
9643  3685
9644  3686
9645  3687
9646  3688
9647  3689
9648  368A
9649  368B
9650  368C
9651  368D
9652  368E
9653  368F
9654  3690
9655  3691
9656  3692
9657  3693
9658  3694
9659  3695
9660  3696
9661  3697
9662  3698
9663  3699
9664  369A
9665  369B
9666  369C
9667  369D
9668  369E
9669  369F
9670  36A0
9671  36A1
9672  36A2
9673  36A3
9674  36A4
9675  36A5
9676  36A6
9677  36A7
9678  36A8
9679  36A9
9680  36AA
9681  36AB
9682  36AC
9683  36AD
9684  36AE
9685  36AF
9686  36B0
9687  36B1
9688  36B2
9689  36B3
9690  36B4
9691  36B5
9692  36B6
9693  36B7
9694  36B8
9695  36B9
9696  36BA
9697  36BB
9698  36BC
9699  36BD
9700  36BE
9701  36BF
9702  36C0
9703  36C1
9704  36C2
9705  36C3
9706  36C4
9707  36C5
9708  36C6
9709  36C7
9710  36C8
9711  36C9
9712  36CA
9713  36CB
9714  36CC
9715  36CD
9716  36CE
9717  36CF
9718  36D0
9719  36D1
9720  36D2
9721  36D3
9722  36D4
9723  36D5
9724  36D6
9725  36D7
9726  36D8
9727  36D9
9728  36DA
9729  36DB
9730  36DC
9731  36DD
9732  36DE
9733  36DF
9734  36E0
9735  36E1
9736  36E2
9737  36E3
9738  36E4
9739  36E5
9740  36E6
9741  36E7
9742  36E8
9743  36E9
9744  36EA
9745  36EB
9746  36EC
9747  36ED
9748  36EE
9749  36EF
9750  36F0
9751  36F1
9752  36F2
9753  36F3
9754  36F4
9755  36F5
9756  36F6
9757  36F7
9758  36F8
9759  36F9
9760  36FA
9761  36FB
9762  36FC
9763  36FD
9764  36FE
9765  36FF
9766  3700
9767  3701
9768  3702
9769  3703
9770  3704
9771  3705
9772  3706
9773  3707
9774  3708
9775  3709
9776  370A
9777  370B
9778  370C
9779  370D
9780  370E
9781  370F
9782  3710
9783  3711
9784  3712
9785  3713
9786  3714
9787  3715
9788  3716
9789  3717
9790  3718
9791  3719
9792  371A
9793  371B
9794  371C
9795  371D
9796  371E
9797  371F
9798  3720
9799  3721
9800  3722
9801  3723
9802  3724
9803  3725
9804  3726
9805  3727
9806  3728
9807  3729
9808  372A
9809  372B
9810  372C
9811  372D
9812  372E
9813  372F
9814  3730
9815  3731
9816  3732
9817  3733
9818  3734
9819  3735
9820  3736
9821  3737
9822  3738
9823  3739
9824  373A
9825  373B
9826  373C
9827  373D
9828  373E
9829  373F
9830  3740
9831  3741
9832  3742
9833  3743
9834  3744
9835  3745
9836  3746
9837  3747
9838  3748
9839  3749
9840  374A
9841  374B
9842  374C
9843  374D
9844  374E
9845  374F
9846  3750
9847  3751
9848  3752
9849  3753
9850  3754
9851  3755
9852  3756
9853  3757
9854  3758
9855  3759
9856  375A
9857  375B
9858  375C
9859  375D
9860  375E
9861  375F
9862  3760
9863  3761
9864  3762
9865  3763
9866  3764
9867  3765
9868  3766
9869  3767
9870  3768
9871  3769
9872  376A
9873  376B
9874  376C
9875  376D
9876  376E
9877  376F
9878  3770
9879  3771
9880  3772
9881  3773
9882  3774
9883  3775
9884  3776
9885  3777
9886  3778
9887  3779
9888  377A
9889  377B
9890  377C
9891  377D
9892  377E
9893  377F
9894  3780
9895  3781
9896  3782
9897  3783
9898  3784
9899  3785
9900  3786
9901  3787
9902  3788
9903  3789
9904  378A
9905  378B
9906  378C
9907  378D
9908  378E
9909  378F
9910  3790
9911  3791
9912  3792
9913  3793
9914  3794
9915  3795
9916  3796
9917  3797
9918  3798
9919  3799
9920  379A
9921  379B
9922  379C
9923  379D
9924  379E
9925  379F
9926  37A0
9927  37A1
9928  37A2
9929  37A3
9930  37A4
9931  37A5
9932  37A6
9933  37A7
9934  37A8
9935  37A9
9936  37AA
9937  37AB
9938  37AC
9939  37AD
9940  37AE
9941  37AF
9942  37B0
9943  37B1
9944  37B2
9945  37B3
9946  37B4
9947  37B5
9948  37B6
9949  37B7
9950  37B8
9951  37B9
9952  37BA
9953  37BB
9954  37BC
9955  37BD
9956  37BE
9957  37BF
9958  37C0
9959  37C1
9960  37C2
9961  37C3
9962  37C4
9963  37C5
9964  37C6
9965  37C7
9966  37C8
9967  37C9
9968  37CA
9969  37CB
9970  37CC
9971  37CD
9972  37CE
9973  37CF
9974  37D0
9975  37D1
9976  37D2
9977  37D3
9978  37D4
9979  37D5
9980  37D6
9981  37D7
9982  37D8
9983  37D9
9984  37DA
9985  37DB
9986  37DC
9987  37DD
9988  37DE
9989  37DF
9990  37E0
9991  37E1
9992  37E2
9993  37E3
9994  37E4
9995  37E5
9996  37E6
9997  37E7
9998  37E8
9999  37E9
10000  37EA
10001  37EB
10002  37EC
10003  37ED
10004  37EE
10005  37EF
10006  37F0
10007  37F1
10008  37F2
10009  37F3
10010  37F4
10011  37F5
10012  37F6
10013  37F7
10014  37F8
10015  37F9
10016  37FA
10017  37FB
10018  37FC
10019  37FD
10020  37FE
10021  37FF
10022  3800
10023  3801
10024  3802
10025  3803
10026  3804
10027  3805
10028  3806
10029  3807
10030  3808
10031  3809
10032  380A
10033  380B
10034  380C
10035  380D
10036  380E
10037  380F
10038  3810
10039  3811
10040  3812
10041  3813
10042  3814
10043  3815
10044  3816
10045  3817
10046  3818
10047  3819
10048  381A
10049  381B
10050  381C
10051  381D
10052  381E
10053  381F
10054  3820
10055  3821
10056  3822
10057  3823
10058  3824
10059  3825
10060  3826
10061  3827
10062  3828
10063  3829
10064  382A
10065  382B
10066  382C
10067  382D
10068  382E
10069  382F
10070  3830
10071  3831
10072  3832
10073  3833
10074  3834
10075  3835
10076  3836
10077  3837
10078  3838
10079  3839
10080  383A
10081  383B
10082  383C
10083  383D
10084  383E
10085  383F
10086  3840
10087  3841
10088  3842
10089  3843
10090  3844
10091  3845
10092  3846
10093  3847
10094  3848
10095  3849
10096  384A
10097  384B
10098  384C
10099  384D
10100  384E
10101  384F
10102  3850
10103  3851
10104  3852
10105  3853
10106  3854
10107  3855
10108  3856
10109  3857
10110  3858
10111  3859
10112  385A
10113  385B
10114  385C
10115  385D
10116  385E
10117  385F
10118  3860
10119  3861
10120  3862
10121  3863
10122  3864
10123  3865
10124  3866
10125  3867
10126  3868
10127  3869
10128  386A
10129  386B
10130  386C
10131  386D
10132  386E
10133  386F
10134  3870
10135  3871
10136  3872
10137  3873
10138  3874
10139  3875
10140  3876
10141  3877
10142  3878
10143  3879
10144  387A
10145  387B
10146  387C
10147  387D
10148  387E
10149  387F
10150  3880
10151  3881
10152  3882
10153  3883
10154  3884
10155  3885
10156  3886
10157  3887
10158  3888
10159  3889
10160  388A
10161  388B
10162  388C
10163  388D
10164  388E
10165  388F
10166  3890
10167  3891
10168  3892
10169  3893
10170  3894
10171  3895
10172  3896
10173  3897
10174  3898
10175  3899
10176  389A
10177  389B
10178  389C
10179  389D
10180  389E
10181  389F
10182  38A0
10183  38A1
10184  38A2
10185  38A3
10186  38A4
10187  38A5
10188  38A6
10189  38A7
10190  38A8
10191  38A9
10192  38AA
10193  38AB
10194  38AC
10195  38AD
10196  38AE
10197  38AF
10198  38B0
10199  38B1
10200  38B2
10201  38B3
10202  38B4
10203  38B5
10204  38B6
10205  38B7
10206  38B8
10207  38B9
10208  38BA
10209  38BB
10210  38BC
10211  38BD
10212  38BE
10213  38BF
10214  38C0
10215  38C1
10216  38C2
10217  38C3
10218  38C4
10219  38C5
10220  38C6
10221  38C7
10222  38C8
10223  38C9
10224  38CA
10225  38CB
10226  38CC
10227  38CD
10228  38CE
10229  38CF
10230  38D0
10231  38D1
10232  38D2
10233  38D3
10234  38D4
10235  38D5
10236  38D6
10237  38D7
10238  38D8
10239  38D9
10240  38DA
10241  38DB
10242  38DC
10243  38DD
10244  38DE
10245  38DF
10246  38E0
10247  38E1
10248  38E2
10249  38E3
10250  38E4
10251  38E5
10252  38E6
10253  38E7
10254  38E8
10255  38E9
10256  38EA
10257  38EB
10258  38EC
10259  38ED
10260  38EE
10261  38EF
10262  38F0
10263  38F1
10264  38F2
10265  38F3
10266  38F4
10267  38F5
10268  38F6
10269  38F7
10270  38F8
10271  38F9
10272  38FA
10273  38FB
10274  38FC
10275  38FD
10276  38FE
10277  38FF
10278  3900
10279  3901
10280  3902
10281  3903
10282  3904
10283  3905
10284  3906
10285  3907
10286  3908
10287  3909
10288  390A
10289  390B
10290  390C
10291  390D
10292  390E
10293  390F
10294  3910
10295  3911
10296  3912
10297  3913
10298  3914
10299  3915
10300  3916
10301  3917
10302  3918
10303  3919
10304  391A
10305  391B
10306  391C
10307  391D
10308  391E
10309  391F
10310  3920
10311  3921
10312  3922
10313  3923
10314  3924
10315  3925
10316  3926
10317  3927
10318  3928
10319  3929
10320  392A
10321  392B
10322  392C
10323  392D
10324  392E
10325  392F
10326  3930
10327  3931
10328  3932
10329  3933
10330  3934
10331  3935
10332  3936
10333  3937
10334  3938
10335  3939
10336  393A
10337  393B
10338  393C
10339  393D
10340  393E
10341  393F
10342  3940
10343  3941
10344  3942
10345  3943
10346  3944
10347  3945
10348  3946
10349  3947
10350  3948
10351  3949
10352  394A
10353  394B
10354  394C
10355  394D
10356  394E
10357  394F
10358  3950
10359  3951
10360  3952
10361  3953
10362  3954
10363  3955
10364  3956
10365  3957
10366  3958
10367  3959
10368  395A
10369  395B
10370  395C
10371  395D
10372  395E
10373  395F
10374  3960
10375  3961
10376  3962
10377  3963
10378  3964
10379  3965
10380  3966
10381  3967
10382  3968
10383  3969
10384  396A
10385  396B
10386  396C
10387  396D
10388  396E
10389  396F
10390  3970
10391  3971
10392  3972
10393  3973
10394  3974
10395  3975
10396  3976
10397  3977
10398  3978
10399  3979
10400  397A
10401  397B
10402  397C
10403  397D
10404  397E
10405  397F
10406  3980
10407  3981
10408  3982
10409  3983
10410  3984
10411  3985
10412  3986
10413  3987
10414  3988
10415  3989
10416  398A
10417  398B
10418  398C
10419  398D
10420  398E
10421  398F
10422  3990
10423  3991
10424  3992
10425  3993
10426  3994
10427  3995
10428  3996
10429  3997
10430  3998
10431  3999
10432  399A
10433  399B
10434  399C
10435  399D
10436  399E
10437  399F
10438  39A0
10439  39A1
10440  39A2
10441  39A3
10442  39A4
10443  39A5
10444  39A6
10445  39A7
10446  39A8
10447  39A9
10448  39AA
10449  39AB
10450  39AC
10451  39AD
10452  39AE
10453  39AF
10454  39B0
10455  39B1
10456  39B2
10457  39B3
10458  39B4
10459  39B5
10460  39B6
10461  39B7
10462  39B8
10463  39B9
10464  39BA
10465  39BB
10466  39BC
10467  39BD
10468  39BE
10469  39BF
10470  39C0
10471  39C1
10472  39C2
10473  39C3
10474  39C4
10475  39C5
10476  39C6
10477  39C7
10478  39C8
10479  39C9
10480  39CA
10481  39CB
10482  39CC
10483  39CD
10484  39CE
10485  39CF
10486  39D0
10487  39D1
10488  39D2
10489  39D3
10490  39D4
10491  39D5
10492  39D6
10493  39D7
10494  39D8
10495  39D9
10496  39DA
10497  39DB
10498  39DC
10499  39DD
10500  39DE
10501  39DF
10502  39E0
10503  39E1
10504  39E2
10505  39E3
10506  39E4
10507  39E5
10508  39E6
10509  39E7
10510  39E8
10511  39E9
10512  39EA
10513  39EB
10514  39EC
10515  39ED
10516  39EE
10517  39EF
10518  39F0
10519  39F1
10520  39F2
10521  39F3
10522  39F4
10523  39F5
10524  39F6
10525  39F7
10526  39F8
10527  39F9
10528  39FA
10529  39FB
10530  39FC
10531  39FD
10532  39FE
10533  39FF
10534  3A00
10535  3A01
10536  3A02
10537  3A03
10538  3A04
10539  3A05
10540  3A06
10541  3A07
10542  3A08
10543  3A09
10544  3A0A
10545  3A0B
10546  3A0C
10547  3A0D
10548  3A0E
10549  3A0F
10550  3A10
10551  3A11
10552  3A12
10553  3A13
10554  3A14
10555  3A15
10556  3A16
10557  3A17
10558  3A18
10559  3A19
10560  3A1A
10561  3A1B
10562  3A1C
10563  3A1D
10564  3A1E
10565  3A1F
10566  3A20
10567  3A21
10568  3A22
10569  3A23
10570  3A24
10571  3A25
10572  3A26
10573  3A27
10574  3A28
10575  3A29
10576  3A2A
10577  3A2B
10578  3A2C
10579  3A2D
10580  3A2E
10581  3A2F
10582  3A30
10583  3A31
10584  3A32
10585  3A33
10586  3A34
10587  3A35
10588  3A36
10589  3A37
10590  3A38
10591  3A39
10592  3A3A
10593  3A3B
10594  3A3C
10595  3A3D
10596  3A3E
10597  3A3F
10598  3A40
10599  3A41
10600  3A42
10601  3A43
10602  3A44
10603  3A45
10604  3A46
10605  3A47
10606  3A48
10607  3A49
10608  3A4A
10609  3A4B
10610  3A4C
10611  3A4D
10612  3A4E
10613  3A4F
10614  3A50
10615  3A51
10616  3A52
10617  3A53
10618  3A54
10619  3A55
10620  3A56
10621  3A57
10622  3A58
10623  3A59
10624  3A5A
10625  3A5B
10626  3A5C
10627  3A5D
10628  3A5E
10629  3A5F
10630  3A60
10631  3A61
10632  3A62
10633  3A63
10634  3A64
10635  3A65
10636  3A66
10637  3A67
10638  3A68
10639  3A69
10640  3A6A
10641  3A6B
10642  3A6C
10643  3A6D
10644  3A6E
10645  3A6F
10646  3A70
10647  3A71
10648  3A72
10649  3A73
10650  3A74
10651  3A75
10652  3A76
10653  3A77
10654  3A78
10655  3A79
10656  3A7A
10657  3A7B
10658  3A7C
10659  3A7D
10660  3A7E
10661  3A7F
10662  3A80
10663  3A81
10664  3A82
10665  3A83
10666  3A84
10667  3A85
10668  3A86
10669  3A87
10670  3A88
10671  3A89
10672  3A8A
10673  3A8B
10674  3A8C
10675  3A8D
10676  3A8E
10677  3A8F
10678  3A90
10679  3A91
10680  3A92
10681  3A93
10682  3A94
10683  3A95
10684  3A96
10685  3A97
10686  3A98
10687  3A99
10688  3A9A
10689  3A9B
10690  3A9C
10691  3A9D
10692  3A9E
10693  3A9F
10694  3AA0
10695  3AA1
10696  3AA2
10697  3AA3
10698  3AA4
10699  3AA5
10700  3AA6
10701  3AA7
10702  3AA8
10703  3AA9
10704  3AAA
10705  3AAB
10706  3AAC
10707  3AAD
10708  3AAE
10709  3AAF
10710  3AB0
10711  3AB1
10712  3AB2
10713  3AB3
10714  3AB4
10715  3AB5
10716  3AB6
10717  3AB7
10718  3AB8
10719  3AB9
10720  3ABA
10721  3ABB
10722  3ABC
10723  3ABD
10724  3ABE
10725  3ABF
10726  3AC0
10727  3AC1
10728  3AC2
10729  3AC3
10730  3AC4
10731  3AC5
10732  3AC6
10733  3AC7
10734  3AC8
10735  3AC9
10736  3ACA
10737  3ACB
10738  3ACC
10739  3ACD
10740  3ACE
10741  3ACF
10742  3AD0
10743  3AD1
10744  3AD2
10745  3AD3
10746  3AD4
10747  3AD5
10748  3AD6
10749  3AD7
10750  3AD8
10751  3AD9
10752  3ADA
10753  3ADB
10754  3ADC
10755  3ADD
10756  3ADE
10757  3ADF
10758  3AE0
10759  3AE1
10760  3AE2
10761  3AE3
10762  3AE4
10763  3AE5
10764  3AE6
10765  3AE7
10766  3AE8
10767  3AE9
10768  3AEA
10769  3AEB
10770  3AEC
10771  3AED
10772  3AEE
10773  3AEF
10774  3AF0
10775  3AF1
10776  3AF2
10777  3AF3
10778  3AF4
10779  3AF5
10780  3AF6
10781  3AF7
10782  3AF8
10783  3AF9
10784  3AFA
10785  3AFB
10786  3AFC
10787  3AFD
10788  3AFE
10789  3AFF
10790  3B00
10791  3B01
10792  3B02
10793  3B03
10794  3B04
10795  3B05
10796  3B06
10797  3B07
10798  3B08
10799  3B09
10800  3B0A
10801  3B0B
10802  3B0C
10803  3B0D
10804  3B0E
10805  3B0F
10806  3B10
10807  3B11
10808  3B12
10809  3B13
10810  3B14
10811  3B15
10812  3B16
10813  3B17
10814  3B18
10815  3B19
10816  3B1A
10817  3B1B
10818  3B1C
10819  3B1D
10820  3B1E
10821  3B1F
10822  3B20
10823  3B21
10824  3B22
10825  3B23
10826  3B24
10827  3B25
10828  3B26
10829  3B27
10830  3B28
10831  3B29
10832  3B2A
10833  3B2B
10834  3B2C
10835  3B2D
10836  3B2E
10837  3B2F
10838  3B30
10839  3B31
10840  3B32
10841  3B33
10842  3B34
10843  3B35
10844  3B36
10845  3B37
10846  3B38
10847  3B39
10848  3B3A
10849  3B3B
10850  3B3C
10851  3B3D
10852  3B3E
10853  3B3F
10854  3B40
10855  3B41
10856  3B42
10857  3B43
10858  3B44
10859  3B45
10860  3B46
10861  3B47
10862  3B48
10863  3B49
10864  3B4A
10865  3B4B
10866  3B4C
10867  3B4D
10868  3B4E
10869  3B4F
10870  3B50
10871  3B51
10872  3B52
10873  3B53
10874  3B54
10875  3B55
10876  3B56
10877  3B57
10878  3B58
10879  3B59
10880  3B5A
10881  3B5B
10882  3B5C
10883  3B5D
10884  3B5E
10885  3B5F
10886  3B60
10887  3B61
10888  3B62
10889  3B63
10890  3B64
10891  3B65
10892  3B66
10893  3B67
10894  3B68
10895  3B69
10896  3B6A
10897  3B6B
10898  3B6C
10899  3B6D
10900  3B6E
10901  3B6F
10902  3B70
10903  3B71
10904  3B72
10905  3B73
10906  3B74
10907  3B75
10908  3B76
10909  3B77
10910  3B78
10911  3B79
10912  3B7A
10913  3B7B
10914  3B7C
10915  3B7D
10916  3B7E
10917  3B7F
10918  3B80
10919  3B81
10920  3B82
10921  3B83
10922  3B84
10923  3B85
10924  3B86
10925  3B87
10926  3B88
10927  3B89
10928  3B8A
10929  3B8B
10930  3B8C
10931  3B8D
10932  3B8E
10933  3B8F
10934  3B90
10935  3B91
10936  3B92
10937  3B93
10938  3B94
10939  3B95
10940  3B96
10941  3B97
10942  3B98
10943  3B99
10944  3B9A
10945  3B9B
10946  3B9C
10947  3B9D
10948  3B9E
10949  3B9F
10950  3BA0
10951  3BA1
10952  3BA2
10953  3BA3
10954  3BA4
10955  3BA5
10956  3BA6
10957  3BA7
10958  3BA8
10959  3BA9
10960  3BAA
10961  3BAB
10962  3BAC
10963  3BAD
10964  3BAE
10965  3BAF
10966  3BB0
10967  3BB1
10968  3BB2
10969  3BB3
10970  3BB4
10971  3BB5
10972  3BB6
10973  3BB7
10974  3BB8
10975  3BB9
10976  3BBA
10977  3BBB
10978  3BBC
10979  3BBD
10980  3BBE
10981  3BBF
10982  3BC0
10983  3BC1
10984  3BC2
10985  3BC3
10986  3BC4
10987  3BC5
10988  3BC6
10989  3BC7
10990  3BC8
10991  3BC9
10992  3BCA
10993  3BCB
10994  3BCC
10995  3BCD
10996  3BCE
10997  3BCF
10998  3BD0
10999  3BD1
11000  3BD2
11001  3BD3
11002  3BD4
11003  3BD5
11004  3BD6
11005  3BD7
11006  3BD8
11007  3BD9
11008  3BDA
11009  3BDB
11010  3BDC
11011  3BDD
11012  3BDE
11013  3BDF
11014  3BE0
11015  3BE1
11016  3BE2
11017  3BE3
11018  3BE4
11019  3BE5
11020  3BE6
11021  3BE7
11022  3BE8
11023  3BE9
11024  3BEA
11025  3BEB
11026  3BEC
11027  3BED
11028  3BEE
11029  3BEF
11030  3BF0
11031  3BF1
11032  3BF2
11033  3BF3
11034  3BF4
11035  3BF5
11036  3BF6
11037  3BF7
11038  3BF8
11039  3BF9
11040  3BFA
11041  3BFB
11042  3BFC
11043  3BFD
11044  3BFE
11045  3BFF
11046  3C00
11047  3C01
11048  3C02
11049  3C03
11050  3C04
11051  3C05
11052  3C06
11053  3C07
11054  3C08
11055  3C09
11056  3C0A
11057  3C0B
11058  3C0C
11059  3C0D
11060  3C0E
11061  3C0F
11062  3C10
11063  3C11
11064  3C12
11065  3C13
11066  3C14
11067  3C15
11068  3C16
11069  3C17
11070  3C18
11071  3C19
11072  3C1A
11073  3C1B
11074  3C1C
11075  3C1D
11076  3C1E
11077  3C1F
11078  3C20
11079  3C21
11080  3C22
11081  3C23
11082  3C24
11083  3C25
11084  3C26
11085  3C27
11086  3C28
11087  3C29
11088  3C2A
11089  3C2B
11090  3C2C
11091  3C2D
11092  3C2E
11093  3C2F
11094  3C30
11095  3C31
11096  3C32
11097  3C33
11098  3C34
11099  3C35
11100  3C36
11101  3C37
11102  3C38
11103  3C39
11104  3C3A
11105  3C3B
11106  3C3C
11107  3C3D
11108  3C3E
11109  3C3F
11110  3C40
11111  3C41
11112  3C42
11113  3C43
11114  3C44
11115  3C45
11116  3C46
11117  3C47
11118  3C48
11119  3C49
11120  3C4A
11121  3C4B
11122  3C4C
11123  3C4D
11124  3C4E
11125  3C4F
11126  3C50
11127  3C51
11128  3C52
11129  3C53
11130  3C54
11131  3C55
11132  3C56
11133  3C57
11134  3C58
11135  3C59
11136  3C5A
11137  3C5B
11138  3C5C
11139  3C5D
11140  3C5E
11141  3C5F
11142  3C60
11143  3C61
11144  3C62
11145  3C63
11146  3C64
11147  3C65
11148  3C66
11149  3C67
11150  3C68
11151  3C69
11152  3C6A
11153  3C6B
11154  3C6C
11155  3C6D
11156  3C6E
11157  3C6F
11158  3C70
11159  3C71
11160  3C72
11161  3C73
11162  3C74
11163  3C75
11164  3C76
11165  3C77
11166  3C78
11167  3C79
11168  3C7A
11169  3C7B
11170  3C7C
11171  3C7D
11172  3C7E
11173  3C7F
11174  3C80
11175  3C81
11176  3C82
11177  3C83
11178  3C84
11179  3C85
11180  3C86
11181  3C87
11182  3C88
11183  3C89
11184  3C8A
11185  3C8B
11186  3C8C
11187  3C8D
11188  3C8E
11189  3C8F
11190  3C90
11191  3C91
11192  3C92
11193  3C93
11194  3C94
11195  3C95
11196  3C96
11197  3C97
11198  3C98
11199  3C99
11200  3C9A
11201  3C9B
11202  3C9C
11203  3C9D
11204  3C9E
11205  3C9F
11206  3CA0
11207  3CA1
11208  3CA2
11209  3CA3
11210  3CA4
11211  3CA5
11212  3CA6
11213  3CA7
11214  3CA8
11215  3CA9
11216  3CAA
11217  3CAB
11218  3CAC
11219  3CAD
11220  3CAE
11221  3CAF
11222  3CB0
11223  3CB1
11224  3CB2
11225  3CB3
11226  3CB4
11227  3CB5
11228  3CB6
11229  3CB7
11230  3CB8
11231  3CB9
11232  3CBA
11233  3CBB
11234  3CBC
11235  3CBD
11236  3CBE
11237  3CBF
11238  3CC0
11239  3CC1
11240  3CC2
11241  3CC3
11242  3CC4
11243  3CC5
11244  3CC6
11245  3CC7
11246  3CC8
11247  3CC9
11248  3CCA
11249  3CCB
11250  3CCC
11251  3CCD
11252  3CCE
11253  3CCF
11254  3CD0
11255  3CD1
11256  3CD2
11257  3CD3
11258  3CD4
11259  3CD5
11260  3CD6
11261  3CD7
11262  3CD8
11263  3CD9
11264  3CDA
11265  3CDB
11266  3CDC
11267  3CDD
11268  3CDE
11269  3CDF
11270  3CE0
11271  3CE1
11272  3CE2
11273  3CE3
11274  3CE4
11275  3CE5
11276  3CE6
11277  3CE7
11278  3CE8
11279  3CE9
11280  3CEA
11281  3CEB
11282  3CEC
11283  3CED
11284  3CEE
11285  3CEF
11286  3CF0
11287  3CF1
11288  3CF2
11289  3CF3
11290  3CF4
11291  3CF5
11292  3CF6
11293  3CF7
11294  3CF8
11295  3CF9
11296  3CFA
11297  3CFB
11298  3CFC
11299  3CFD
11300  3CFE
11301  3CFF
11302  3D00
11303  3D01
11304  3D02
11305  3D03
11306  3D04
11307  3D05
11308  3D06
11309  3D07
11310  3D08
11311  3D09
11312  3D0A
11313  3D0B
11314  3D0C
11315  3D0D
11316  3D0E
11317  3D0F
11318  3D10
11319  3D11
11320  3D12
11321  3D13
11322  3D14
11323  3D15
11324  3D16
11325  3D17
11326  3D18
11327  3D19
11328  3D1A
11329  3D1B
11330  3D1C
11331  3D1D
11332  3D1E
11333  3D1F
11334  3D20
11335  3D21
11336  3D22
11337  3D23
11338  3D24
11339  3D25
11340  3D26
11341  3D27
11342  3D28
11343  3D29
11344  3D2A
11345  3D2B
11346  3D2C
11347  3D2D
11348  3D2E
11349  3D2F
11350  3D30
11351  3D31
11352  3D32
11353  3D33
11354  3D34
11355  3D35
11356  3D36
11357  3D37
11358  3D38
11359  3D39
11360  3D3A
11361  3D3B
11362  3D3C
11363  3D3D
11364  3D3E
11365  3D3F
11366  3D40
11367  3D41
11368  3D42
11369  3D43
11370  3D44
11371  3D45
11372  3D46
11373  3D47
11374  3D48
11375  3D49
11376  3D4A
11377  3D4B
11378  3D4C
11379  3D4D
11380  3D4E
11381  3D4F
11382  3D50
11383  3D51
11384  3D52
11385  3D53
11386  3D54
11387  3D55
11388  3D56
11389  3D57
11390  3D58
11391  3D59
11392  3D5A
11393  3D5B
11394  3D5C
11395  3D5D
11396  3D5E
11397  3D5F
11398  3D60
11399  3D61
11400  3D62
11401  3D63
11402  3D64
11403  3D65
11404  3D66
11405  3D67
11406  3D68
11407  3D69
11408  3D6A
11409  3D6B
11410  3D6C
11411  3D6D
11412  3D6E
11413  3D6F
11414  3D70
11415  3D71
11416  3D72
11417  3D73
11418  3D74
11419  3D75
11420  3D76
11421  3D77
11422  3D78
11423  3D79
11424  3D7A
11425  3D7B
11426  3D7C
11427  3D7D
11428  3D7E
11429  3D7F
11430  3D80
11431  3D81
11432  3D82
11433  3D83
11434  3D84
11435  3D85
11436  3D86
11437  3D87
11438  3D88
11439  3D89
11440  3D8A
11441  3D8B
11442  3D8C
11443  3D8D
11444  3D8E
11445  3D8F
11446  3D90
11447  3D91
11448  3D92
11449  3D93
11450  3D94
11451  3D95
11452  3D96
11453  3D97
11454  3D98
11455  3D99
11456  3D9A
11457  3D9B
11458  3D9C
11459  3D9D
11460  3D9E
11461  3D9F
11462  3DA0
11463  3DA1
11464  3DA2
11465  3DA3
11466  3DA4
11467  3DA5
11468  3DA6
11469  3DA7
11470  3DA8
11471  3DA9
11472  3DAA
11473  3DAB
11474  3DAC
11475  3DAD
11476  3DAE
11477  3DAF
11478  3DB0
11479  3DB1
11480  3DB2
11481  3DB3
11482  3DB4
11483  3DB5
11484  3DB6
11485  3DB7
11486  3DB8
11487  3DB9
11488  3DBA
11489  3DBB
11490  3DBC
11491  3DBD
11492  3DBE
11493  3DBF
11494  3DC0
11495  3DC1
11496  3DC2
11497  3DC3
11498  3DC4
11499  3DC5
11500  3DC6
11501  3DC7
11502  3DC8
11503  3DC9
11504  3DCA
11505  3DCB
11506  3DCC
11507  3DCD
11508  3DCE
11509  3DCF
11510  3DD0
11511  3DD1
11512  3DD2
11513  3DD3
11514  3DD4
11515  3DD5
11516  3DD6
11517  3DD7
11518  3DD8
11519  3DD9
11520  3DDA
11521  3DDB
11522  3DDC
11523  3DDD
11524  3DDE
11525  3DDF
11526  3DE0
11527  3DE1
11528  3DE2
11529  3DE3
11530  3DE4
11531  3DE5
11532  3DE6
11533  3DE7
11534  3DE8
11535  3DE9
11536  3DEA
11537  3DEB
11538  3DEC
11539  3DED
11540  3DEE
11541  3DEF
11542  3DF0
11543  3DF1
11544  3DF2
11545  3DF3
11546  3DF4
11547  3DF5
11548  3DF6
11549  3DF7
11550  3DF8
11551  3DF9
11552  3DFA
11553  3DFB
11554  3DFC
11555  3DFD
11556  3DFE
11557  3DFF
11558  3E00
11559  3E01
11560  3E02
11561  3E03
11562  3E04
11563  3E05
11564  3E06
11565  3E07
11566  3E08
11567  3E09
11568  3E0A
11569  3E0B
11570  3E0C
11571  3E0D
11572  3E0E
11573  3E0F
11574  3E10
11575  3E11
11576  3E12
11577  3E13
11578  3E14
11579  3E15
11580  3E16
11581  3E17
11582  3E18
11583  3E19
11584  3E1A
11585  3E1B
11586  3E1C
11587  3E1D
11588  3E1E
11589  3E1F
11590  3E20
11591  3E21
11592  3E22
11593  3E23
11594  3E24
11595  3E25
11596  3E26
11597  3E27
11598  3E28
11599  3E29
11600  3E2A
11601  3E2B
11602  3E2C
11603  3E2D
11604  3E2E
11605  3E2F
11606  3E30
11607  3E31
11608  3E32
11609  3E33
11610  3E34
11611  3E35
11612  3E36
11613  3E37
11614  3E38
11615  3E39
11616  3E3A
11617  3E3B
11618  3E3C
11619  3E3D
11620  3E3E
11621  3E3F
11622  3E40
11623  3E41
11624  3E42
11625  3E43
11626  3E44
11627  3E45
11628  3E46
11629  3E47
11630  3E48
11631  3E49
11632  3E4A
11633  3E4B
11634  3E4C
11635  3E4D
11636  3E4E
11637  3E4F
11638  3E50
11639  3E51
11640  3E52
11641  3E53
11642  3E54
11643  3E55
11644  3E56
11645  3E57
11646  3E58
11647  3E59
11648  3E5A
11649  3E5B
11650  3E5C
11651  3E5D
11652  3E5E
11653  3E5F
11654  3E60
11655  3E61
11656  3E62
11657  3E63
11658  3E64
11659  3E65
11660  3E66
11661  3E67
11662  3E68
11663  3E69
11664  3E6A
11665  3E6B
11666  3E6C
11667  3E6D
11668  3E6E
11669  3E6F
11670  3E70
11671  3E71
11672  3E72
11673  3E73
11674  3E74
11675  3E75
11676  3E76
11677  3E77
11678  3E78
11679  3E79
11680  3E7A
11681  3E7B
11682  3E7C
11683  3E7D
11684  3E7E
11685  3E7F
11686  3E80
11687  3E81
11688  3E82
11689  3E83
11690  3E84
11691  3E85
11692  3E86
11693  3E87
11694  3E88
11695  3E89
11696  3E8A
11697  3E8B
11698  3E8C
11699  3E8D
11700  3E8E
11701  3E8F
11702  3E90
11703  3E91
11704  3E92
11705  3E93
11706  3E94
11707  3E95
11708  3E96
11709  3E97
11710  3E98
11711  3E99
11712  3E9A
11713  3E9B
11714  3E9C
11715  3E9D
11716  3E9E
11717  3E9F
11718  3EA0
11719  3EA1
11720  3EA2
11721  3EA3
11722  3EA4
11723  3EA5
11724  3EA6
11725  3EA7
11726  3EA8
11727  3EA9
11728  3EAA
11729  3EAB
11730  3EAC
11731  3EAD
11732  3EAE
11733  3EAF
11734  3EB0
11735  3EB1
11736  3EB2
11737  3EB3
11738  3EB4
11739  3EB5
11740  3EB6
11741  3EB7
11742  3EB8
11743  3EB9
11744  3EBA
11745  3EBB
11746  3EBC
11747  3EBD
11748  3EBE
11749  3EBF
11750  3EC0
11751  3EC1
11752  3EC2
11753  3EC3
11754  3EC4
11755  3EC5
11756  3EC6
11757  3EC7
11758  3EC8
11759  3EC9
11760  3ECA
11761  3ECB
11762  3ECC
11763  3ECD
11764  3ECE
11765  3ECF
11766  3ED0
11767  3ED1
11768  3ED2
11769  3ED3
11770  3ED4
11771  3ED5
11772  3ED6
11773  3ED7
11774  3ED8
11775  3ED9
11776  3EDA
11777  3EDB
11778  3EDC
11779  3EDD
11780  3EDE
11781  3EDF
11782  3EE0
11783  3EE1
11784  3EE2
11785  3EE3
11786  3EE4
11787  3EE5
11788  3EE6
11789  3EE7
11790  3EE8
11791  3EE9
11792  3EEA
11793  3EEB
11794  3EEC
11795  3EED
11796  3EEE
11797  3EEF
11798  3EF0
11799  3EF1
11800  3EF2
11801  3EF3
11802  3EF4
11803  3EF5
11804  3EF6
11805  3EF7
11806  3EF8
11807  3EF9
11808  3EFA
11809  3EFB
11810  3EFC
11811  3EFD
11812  3EFE
11813  3EFF
11814  3F00
11815  3F01
11816  3F02
11817  3F03
11818  3F04
11819  3F05
11820  3F06
11821  3F07
11822  3F08
11823  3F09
11824  3F0A
11825  3F0B
11826  3F0C
11827  3F0D
11828  3F0E
11829  3F0F
11830  3F10
11831  3F11
11832  3F12
11833  3F13
11834  3F14
11835  3F15
11836  3F16
11837  3F17
11838  3F18
11839  3F19
11840  3F1A
11841  3F1B
11842  3F1C
11843  3F1D
11844  3F1E
11845  3F1F
11846  3F20
11847  3F21
11848  3F22
11849  3F23
11850  3F24
11851  3F25
11852  3F26
11853  3F27
11854  3F28
11855  3F29
11856  3F2A
11857  3F2B
11858  3F2C
11859  3F2D
11860  3F2E
11861  3F2F
11862  3F30
11863  3F31
11864  3F32
11865  3F33
11866  3F34
11867  3F35
11868  3F36
11869  3F37
11870  3F38
11871  3F39
11872  3F3A
11873  3F3B
11874  3F3C
11875  3F3D
11876  3F3E
11877  3F3F
11878  3F40
11879  3F41
11880  3F42
11881  3F43
11882  3F44
11883  3F45
11884  3F46
11885  3F47
11886  3F48
11887  3F49
11888  3F4A
11889  3F4B
11890  3F4C
11891  3F4D
11892  3F4E
11893  3F4F
11894  3F50
11895  3F51
11896  3F52
11897  3F53
11898  3F54
11899  3F55
11900  3F56
11901  3F57
11902  3F58
11903  3F59
11904  3F5A
11905  3F5B
11906  3F5C
11907  3F5D
11908  3F5E
11909  3F5F
11910  3F60
11911  3F61
11912  3F62
11913  3F63
11914  3F64
11915  3F65
11916  3F66
11917  3F67
11918  3F68
11919  3F69
11920  3F6A
11921  3F6B
11922  3F6C
11923  3F6D
11924  3F6E
11925  3F6F
11926  3F70
11927  3F71
11928  3F72
11929  3F73
11930  3F74
11931  3F75
11932  3F76
11933  3F77
11934  3F78
11935  3F79
11936  3F7A
11937  3F7B
11938  3F7C
11939  3F7D
11940  3F7E
11941  3F7F
11942  3F80
11943  3F81
11944  3F82
11945  3F83
11946  3F84
11947  3F85
11948  3F86
11949  3F87
11950  3F88
11951  3F89
11952  3F8A
11953  3F8B
11954  3F8C
11955  3F8D
11956  3F8E
11957  3F8F
11958  3F90
11959  3F91
11960  3F92
11961  3F93
11962  3F94
11963  3F95
11964  3F96
11965  3F97
11966  3F98
11967  3F99
11968  3F9A
11969  3F9B
11970  3F9C
11971  3F9D
11972  3F9E
11973  3F9F
11974  3FA0
11975  3FA1
11976  3FA2
11977  3FA3
11978  3FA4
11979  3FA5
11980  3FA6
11981  3FA7
11982  3FA8
11983  3FA9
11984  3FAA
11985  3FAB
11986  3FAC
11987  3FAD
11988  3FAE
11989  3FAF
11990  3FB0
11991  3FB1
11992  3FB2
11993  3FB3
11994  3FB4
11995  3FB5
11996  3FB6
11997  3FB7
11998  3FB8
11999  3FB9
12000  3FBA
12001  3FBB
12002  3FBC
12003  3FBD
12004  3FBE
12005  3FBF
12006  3FC0
12007  3FC1
12008  3FC2
12009  3FC3
12010  3FC4
12011  3FC5
12012  3FC6
12013  3FC7
12014  3FC8
12015  3FC9
12016  3FCA
12017  3FCB
12018  3FCC
12019  3FCD
12020  3FCE
12021  3FCF
12022  3FD0
12023  3FD1
12024  3FD2
12025  3FD3
12026  3FD4
12027  3FD5
12028  3FD6
12029  3FD7
12030  3FD8
12031  3FD9
12032  3FDA
12033  3FDB
12034  3FDC
12035  3FDD
12036  3FDE
12037  3FDF
12038  3FE0
12039  3FE1
12040  3FE2
12041  3FE3
12042  3FE4
12043  3FE5
12044  3FE6
12045  3FE7
12046  3FE8
12047  3FE9
12048  3FEA
12049  3FEB
12050  3FEC
12051  3FED
12052  3FEE
12053  3FEF
12054  3FF0
12055  3FF1
12056  3FF2
12057  3FF3
12058  3FF4
12059  3FF5
12060  3FF6
12061  3FF7
12062  3FF8
12063  3FF9
12064  3FFA
12065  3FFB
12066  3FFC
12067  3FFD
12068  3FFE
12069  3FFF
12070  4000
12071  4001
12072  4002
12073  4003
12074  4004
12075  4005
12076  4006
12077  4007
12078  4008
12079  4009
12080  400A
12081  400B
12082  400C
12083  400D
12084  400E
12085  400F
12086  4010
12087  4011
12088  4012
12089  4013
12090  4014
12091  4015
12092  4016
12093  4017
12094  4018
12095  4019
12096  401A
12097  401B
12098  401C
12099  401D
12100  401E
12101  401F
12102  4020
12103  4021
12104  4022
12105  4023
12106  4024
12107  4025
12108  4026
12109  4027
12110  4028
12111  4029
12112  402A
12113  402B
12114  402C
12115  402D
12116  402E
12117  402F
12118  4030
12119  4031
12120  4032
12121  4033
12122  4034
12123  4035
12124  4036
12125  4037
12126  4038
12127  4039
12128  403A
12129  403B
12130  403C
12131  403D
12132  403E
12133  403F
12134  4040
12135  4041
12136  4042
12137  4043
12138  4044
12139  4045
12140  4046
12141  4047
12142  4048
12143  4049
12144  404A
12145  404B
12146  404C
12147  404D
12148  404E
12149  404F
12150  4050
12151  4051
12152  4052
12153  4053
12154  4054
12155  4055
12156  4056
12157  4057
12158  4058
12159  4059
12160  405A
12161  405B
12162  405C
12163  405D
12164  405E
12165  405F
12166  4060
12167  4061
12168  4062
12169  4063
12170  4064
12171  4065
12172  4066
12173  4067
12174  4068
12175  4069
12176  406A
12177  406B
12178  406C
12179  406D
12180  406E
12181  406F
12182  4070
12183  4071
12184  4072
12185  4073
12186  4074
12187  4075
12188  4076
12189  4077
12190  4078
12191  4079
12192  407A
12193  407B
12194  407C
12195  407D
12196  407E
12197  407F
12198  4080
12199  4081
12200  4082
12201  4083
12202  4084
12203  4085
12204  4086
12205  4087
12206  4088
12207  4089
12208  408A
12209  408B
12210  408C
12211  408D
12212  408E
12213  408F
12214  4090
12215  4091
12216  4092
12217  4093
12218  4094
12219  4095
12220  4096
12221  4097
12222  4098
12223  4099
12224  409A
12225  409B
12226  409C
12227  409D
12228  409E
12229  409F
12230  40A0
12231  40A1
12232  40A2
12233  40A3
12234  40A4
12235  40A5
12236  40A6
12237  40A7
12238  40A8
12239  40A9
12240  40AA
12241  40AB
12242  40AC
12243  40AD
12244  40AE
12245  40AF
12246  40B0
12247  40B1
12248  40B2
12249  40B3
12250  40B4
12251  40B5
12252  40B6
12253  40B7
12254  40B8
12255  40B9
12256  40BA
12257  40BB
12258  40BC
12259  40BD
12260  40BE
12261  40BF
12262  40C0
12263  40C1
12264  40C2
12265  40C3
12266  40C4
12267  40C5
12268  40C6
12269  40C7
12270  40C8
12271  40C9
12272  40CA
12273  40CB
12274  40CC
12275  40CD
12276  40CE
12277  40CF
12278  40D0
12279  40D1
12280  40D2
12281  40D3
12282  40D4
12283  40D5
12284  40D6
12285  40D7
12286  40D8
12287  40D9
12288  40DA
12289  40DB
12290  40DC
12291  40DD
12292  40DE
12293  40DF
12294  40E0
12295  40E1
12296  40E2
12297  40E3
12298  40E4
12299  40E5
12300  40E6
12301  40E7
12302  40E8
12303  40E9
12304  40EA
12305  40EB
12306  40EC
12307  40ED
12308  40EE
12309  40EF
12310  40F0
12311  40F1
12312  40F2
12313  40F3
12314  40F4
12315  40F5
12316  40F6
12317  40F7
12318  40F8
12319  40F9
12320  40FA
12321  40FB
12322  40FC
12323  40FD
12324  40FE
12325  40FF
12326  4100
12327  4101
12328  4102
12329  4103
12330  4104
12331  4105
12332  4106
12333  4107
12334  4108
12335  4109
12336  410A
12337  410B
12338  410C
12339  410D
12340  410E
12341  410F
12342  4110
12343  4111
12344  4112
12345  4113
12346  4114
12347  4115
12348  4116
12349  4117
12350  4118
12351  4119
12352  411A
12353  411B
12354  411C
12355  411D
12356  411E
12357  411F
12358  4120
12359  4121
12360  4122
12361  4123
12362  4124
12363  4125
12364  4126
12365  4127
12366  4128
12367  4129
12368  412A
12369  412B
12370  412C
12371  412D
12372  412E
12373  412F
12374  4130
12375  4131
12376  4132
12377  4133
12378  4134
12379  4135
12380  4136
12381  4137
12382  4138
12383  4139
12384  413A
12385  413B
12386  413C
12387  413D
12388  413E
12389  413F
12390  4140
12391  4141
12392  4142
12393  4143
12394  4144
12395  4145
12396  4146
12397  4147
12398  4148
12399  4149
12400  414A
12401  414B
12402  414C
12403  414D
12404  414E
12405  414F
12406  4150
12407  4151
12408  4152
12409  4153
12410  4154
12411  4155
12412  4156
12413  4157
12414  4158
12415  4159
12416  415A
12417  415B
12418  415C
12419  415D
12420  415E
12421  415F
12422  4160
12423  4161
12424  4162
12425  4163
12426  4164
12427  4165
12428  4166
12429  4167
12430  4168
12431  4169
12432  416A
12433  416B
12434  416C
12435  416D
12436  416E
12437  416F
12438  4170
12439  4171
12440  4172
12441  4173
12442  4174
12443  4175
12444  4176
12445  4177
12446  4178
12447  4179
12448  417A
12449  417B
12450  417C
12451  417D
12452  417E
12453  417F
12454  4180
12455  4181
12456  4182
12457  4183
12458  4184
12459  4185
12460  4186
12461  4187
12462  4188
12463  4189
12464  418A
12465  418B
12466  418C
12467  418D
12468  418E
12469  418F
12470  4190
12471  4191
12472  4192
12473  4193
12474  4194
12475  4195
12476  4196
12477  4197
12478  4198
12479  4199
12480  419A
12481  419B
12482  419C
12483  419D
12484  419E
12485  419F
12486  41A0
12487  41A1
12488  41A2
12489  41A3
12490  41A4
12491  41A5
12492  41A6
12493  41A7
12494  41A8
12495  41A9
12496  41AA
12497  41AB
12498  41AC
12499  41AD
12500  41AE
12501  41AF
12502  41B0
12503  41B1
12504  41B2
12505  41B3
12506  41B4
12507  41B5
12508  41B6
12509  41B7
12510  41B8
12511  41B9
12512  41BA
12513  41BB
12514  41BC
12515  41BD
12516  41BE
12517  41BF
12518  41C0
12519  41C1
12520  41C2
12521  41C3
12522  41C4
12523  41C5
12524  41C6
12525  41C7
12526  41C8
12527  41C9
12528  41CA
12529  41CB
12530  41CC
12531  41CD
12532  41CE
12533  41CF
12534  41D0
12535  41D1
12536  41D2
12537  41D3
12538  41D4
12539  41D5
12540  41D6
12541  41D7
12542  41D8
12543  41D9
12544  41DA
12545  41DB
12546  41DC
12547  41DD
12548  41DE
12549  41DF
12550  41E0
12551  41E1
12552  41E2
12553  41E3
12554  41E4
12555  41E5
12556  41E6
12557  41E7
12558  41E8
12559  41E9
12560  41EA
12561  41EB
12562  41EC
12563  41ED
12564  41EE
12565  41EF
12566  41F0
12567  41F1
12568  41F2
12569  41F3
12570  41F4
12571  41F5
12572  41F6
12573  41F7
12574  41F8
12575  41F9
12576  41FA
12577  41FB
12578  41FC
12579  41FD
12580  41FE
12581  41FF
12582  4200
12583  4201
12584  4202
12585  4203
12586  4204
12587  4205
12588  4206
12589  4207
12590  4208
12591  4209
12592  420A
12593  420B
12594  420C
12595  420D
12596  420E
12597  420F
12598  4210
12599  4211
12600  4212
12601  4213
12602  4214
12603  4215
12604  4216
12605  4217
12606  4218
12607  4219
12608  421A
12609  421B
12610  421C
12611  421D
12612  421E
12613  421F
12614  4220
12615  4221
12616  4222
12617  4223
12618  4224
12619  4225
12620  4226
12621  4227
12622  4228
12623  4229
12624  422A
12625  422B
12626  422C
12627  422D
12628  422E
12629  422F
12630  4230
12631  4231
12632  4232
12633  4233
12634  4234
12635  4235
12636  4236
12637  4237
12638  4238
12639  4239
12640  423A
12641  423B
12642  423C
12643  423D
12644  423E
12645  423F
12646  4240
12647  4241
12648  4242
12649  4243
12650  4244
12651  4245
12652  4246
12653  4247
12654  4248
12655  4249
12656  424A
12657  424B
12658  424C
12659  424D
12660  424E
12661  424F
12662  4250
12663  4251
12664  4252
12665  4253
12666  4254
12667  4255
12668  4256
12669  4257
12670  4258
12671  4259
12672  425A
12673  425B
12674  425C
12675  425D
12676  425E
12677  425F
12678  4260
12679  4261
12680  4262
12681  4263
12682  4264
12683  4265
12684  4266
12685  4267
12686  4268
12687  4269
12688  426A
12689  426B
12690  426C
12691  426D
12692  426E
12693  426F
12694  4270
12695  4271
12696  4272
12697  4273
12698  4274
12699  4275
12700  4276
12701  4277
12702  4278
12703  4279
12704  427A
12705  427B
12706  427C
12707  427D
12708  427E
12709  427F
12710  4280
12711  4281
12712  4282
12713  4283
12714  4284
12715  4285
12716  4286
12717  4287
12718  4288
12719  4289
12720  428A
12721  428B
12722  428C
12723  428D
12724  428E
12725  428F
12726  4290
12727  4291
12728  4292
12729  4293
12730  4294
12731  4295
12732  4296
12733  4297
12734  4298
12735  4299
12736  429A
12737  429B
12738  429C
12739  429D
12740  429E
12741  429F
12742  42A0
12743  42A1
12744  42A2
12745  42A3
12746  42A4
12747  42A5
12748  42A6
12749  42A7
12750  42A8
12751  42A9
12752  42AA
12753  42AB
12754  42AC
12755  42AD
12756  42AE
12757  42AF
12758  42B0
12759  42B1
12760  42B2
12761  42B3
12762  42B4
12763  42B5
12764  42B6
12765  42B7
12766  42B8
12767  42B9
12768  42BA
12769  42BB
12770  42BC
12771  42BD
12772  42BE
12773  42BF
12774  42C0
12775  42C1
12776  42C2
12777  42C3
12778  42C4
12779  42C5
12780  42C6
12781  42C7
12782  42C8
12783  42C9
12784  42CA
12785  42CB
12786  42CC
12787  42CD
12788  42CE
12789  42CF
12790  42D0
12791  42D1
12792  42D2
12793  42D3
12794  42D4
12795  42D5
12796  42D6
12797  42D7
12798  42D8
12799  42D9
12800  42DA
12801  42DB
12802  42DC
12803  42DD
12804  42DE
12805  42DF
12806  42E0
12807  42E1
12808  42E2
12809  42E3
12810  42E4
12811  42E5
12812  42E6
12813  42E7
12814  42E8
12815  42E9
12816  42EA
12817  42EB
12818  42EC
12819  42ED
12820  42EE
12821  42EF
12822  42F0
12823  42F1
12824  42F2
12825  42F3
12826  42F4
12827  42F5
12828  42F6
12829  42F7
12830  42F8
12831  42F9
12832  42FA
12833  42FB
12834  42FC
12835  42FD
12836  42FE
12837  42FF
12838  4300
12839  4301
12840  4302
12841  4303
12842  4304
12843  4305
12844  4306
12845  4307
12846  4308
12847  4309
12848  430A
12849  430B
12850  430C
12851  430D
12852  430E
12853  430F
12854  4310
12855  4311
12856  4312
12857  4313
12858  4314
12859  4315
12860  4316
12861  4317
12862  4318
12863  4319
12864  431A
12865  431B
12866  431C
12867  431D
12868  431E
12869  431F
12870  4320
12871  4321
12872  4322
12873  4323
12874  4324
12875  4325
12876  4326
12877  4327
12878  4328
12879  4329
12880  432A
12881  432B
12882  432C
12883  432D
12884  432E
12885  432F
12886  4330
12887  4331
12888  4332
12889  4333
12890  4334
12891  4335
12892  4336
12893  4337
12894  4338
12895  4339
12896  433A
12897  433B
12898  433C
12899  433D
12900  433E
12901  433F
12902  4340
12903  4341
12904  4342
12905  4343
12906  4344
12907  4345
12908  4346
12909  4347
12910  4348
12911  4349
12912  434A
12913  434B
12914  434C
12915  434D
12916  434E
12917  434F
12918  4350
12919  4351
12920  4352
12921  4353
12922  4354
12923  4355
12924  4356
12925  4357
12926  4358
12927  4359
12928  435A
12929  435B
12930  435C
12931  435D
12932  435E
12933  435F
12934  4360
12935  4361
12936  4362
12937  4363
12938  4364
12939  4365
12940  4366
12941  4367
12942  4368
12943  4369
12944  436A
12945  436B
12946  436C
12947  436D
12948  436E
12949  436F
12950  4370
12951  4371
12952  4372
12953  4373
12954  4374
12955  4375
12956  4376
12957  4377
12958  4378
12959  4379
12960  437A
12961  437B
12962  437C
12963  437D
12964  437E
12965  437F
12966  4380
12967  4381
12968  4382
12969  4383
12970  4384
12971  4385
12972  4386
12973  4387
12974  4388
12975  4389
12976  438A
12977  438B
12978  438C
12979  438D
12980  438E
12981  438F
12982  4390
12983  4391
12984  4392
12985  4393
12986  4394
12987  4395
12988  4396
12989  4397
12990  4398
12991  4399
12992  439A
12993  439B
12994  439C
12995  439D
12996  439E
12997  439F
12998  43A0
12999  43A1
13000  43A2
13001  43A3
13002  43A4
13003  43A5
13004  43A6
13005  43A7
13006  43A8
13007  43A9
13008  43AA
13009  43AB
13010  43AC
13011  43AD
13012  43AE
13013  43AF
13014  43B0
13015  43B1
13016  43B2
13017  43B3
13018  43B4
13019  43B5
13020  43B6
13021  43B7
13022  43B8
13023  43B9
13024  43BA
13025  43BB
13026  43BC
13027  43BD
13028  43BE
13029  43BF
13030  43C0
13031  43C1
13032  43C2
13033  43C3
13034  43C4
13035  43C5
13036  43C6
13037  43C7
13038  43C8
13039  43C9
13040  43CA
13041  43CB
13042  43CC
13043  43CD
13044  43CE
13045  43CF
13046  43D0
13047  43D1
13048  43D2
13049  43D3
13050  43D4
13051  43D5
13052  43D6
13053  43D7
13054  43D8
13055  43D9
13056  43DA
13057  43DB
13058  43DC
13059  43DD
13060  43DE
13061  43DF
13062  43E0
13063  43E1
13064  43E2
13065  43E3
13066  43E4
13067  43E5
13068  43E6
13069  43E7
13070  43E8
13071  43E9
13072  43EA
13073  43EB
13074  43EC
13075  43ED
13076  43EE
13077  43EF
13078  43F0
13079  43F1
13080  43F2
13081  43F3
13082  43F4
13083  43F5
13084  43F6
13085  43F7
13086  43F8
13087  43F9
13088  43FA
13089  43FB
13090  43FC
13091  43FD
13092  43FE
13093  43FF
13094  4400
13095  4401
13096  4402
13097  4403
13098  4404
13099  4405
13100  4406
13101  4407
13102  4408
13103  4409
13104  440A
13105  440B
13106  440C
13107  440D
13108  440E
13109  440F
13110  4410
13111  4411
13112  4412
13113  4413
13114  4414
13115  4415
13116  4416
13117  4417
13118  4418
13119  4419
13120  441A
13121  441B
13122  441C
13123  441D
13124  441E
13125  441F
13126  4420
13127  4421
13128  4422
13129  4423
13130  4424
13131  4425
13132  4426
13133  4427
13134  4428
13135  4429
13136  442A
13137  442B
13138  442C
13139  442D
13140  442E
13141  442F
13142  4430
13143  4431
13144  4432
13145  4433
13146  4434
13147  4435
13148  4436
13149  4437
13150  4438
13151  4439
13152  443A
13153  443B
13154  443C
13155  443D
13156  443E
13157  443F
13158  4440
13159  4441
13160  4442
13161  4443
13162  4444
13163  4445
13164  4446
13165  4447
13166  4448
13167  4449
13168  444A
13169  444B
13170  444C
13171  444D
13172  444E
13173  444F
13174  4450
13175  4451
13176  4452
13177  4453
13178  4454
13179  4455
13180  4456
13181  4457
13182  4458
13183  4459
13184  445A
13185  445B
13186  445C
13187  445D
13188  445E
13189  445F
13190  4460
13191  4461
13192  4462
13193  4463
13194  4464
13195  4465
13196  4466
13197  4467
13198  4468
13199  4469
13200  446A
13201  446B
13202  446C
13203  446D
13204  446E
13205  446F
13206  4470
13207  4471
13208  4472
13209  4473
13210  4474
13211  4475
13212  4476
13213  4477
13214  4478
13215  4479
13216  447A
13217  447B
13218  447C
13219  447D
13220  447E
13221  447F
13222  4480
13223  4481
13224  4482
13225  4483
13226  4484
13227  4485
13228  4486
13229  4487
13230  4488
13231  4489
13232  448A
13233  448B
13234  448C
13235  448D
13236  448E
13237  448F
13238  4490
13239  4491
13240  4492
13241  4493
13242  4494
13243  4495
13244  4496
13245  4497
13246  4498
13247  4499
13248  449A
13249  449B
13250  449C
13251  449D
13252  449E
13253  449F
13254  44A0
13255  44A1
13256  44A2
13257  44A3
13258  44A4
13259  44A5
13260  44A6
13261  44A7
13262  44A8
13263  44A9
13264  44AA
13265  44AB
13266  44AC
13267  44AD
13268  44AE
13269  44AF
13270  44B0
13271  44B1
13272  44B2
13273  44B3
13274  44B4
13275  44B5
13276  44B6
13277  44B7
13278  44B8
13279  44B9
13280  44BA
13281  44BB
13282  44BC
13283  44BD
13284  44BE
13285  44BF
13286  44C0
13287  44C1
13288  44C2
13289  44C3
13290  44C4
13291  44C5
13292  44C6
13293  44C7
13294  44C8
13295  44C9
13296  44CA
13297  44CB
13298  44CC
13299  44CD
13300  44CE
13301  44CF
13302  44D0
13303  44D1
13304  44D2
13305  44D3
13306  44D4
13307  44D5
13308  44D6
13309  44D7
13310  44D8
13311  44D9
13312  44DA
13313  44DB
13314  44DC
13315  44DD
13316  44DE
13317  44DF
13318  44E0
13319  44E1
13320  44E2
13321  44E3
13322  44E4
13323  44E5
13324  44E6
13325  44E7
13326  44E8
13327  44E9
13328  44EA
13329  44EB
13330  44EC
13331  44ED
13332  44EE
13333  44EF
13334  44F0
13335  44F1
13336  44F2
13337  44F3
13338  44F4
13339  44F5
13340  44F6
13341  44F7
13342  44F8
13343  44F9
13344  44FA
13345  44FB
13346  44FC
13347  44FD
13348  44FE
13349  44FF
13350  4500
13351  4501
13352  4502
13353  4503
13354  4504
13355  4505
13356  4506
13357  4507
13358  4508
13359  4509
13360  450A
13361  450B
13362  450C
13363  450D
13364  450E
13365  450F
13366  4510
13367  4511
13368  4512
13369  4513
13370  4514
13371  4515
13372  4516
13373  4517
13374  4518
13375  4519
13376  451A
13377  451B
13378  451C
13379  451D
13380  451E
13381  451F
13382  4520
13383  4521
13384  4522
13385  4523
13386  4524
13387  4525
13388  4526
13389  4527
13390  4528
13391  4529
13392  452A
13393  452B
13394  452C
13395  452D
13396  452E
13397  452F
13398  4530
13399  4531
13400  4532
13401  4533
13402  4534
13403  4535
13404  4536
13405  4537
13406  4538
13407  4539
13408  453A
13409  453B
13410  453C
13411  453D
13412  453E
13413  453F
13414  4540
13415  4541
13416  4542
13417  4543
13418  4544
13419  4545
13420  4546
13421  4547
13422  4548
13423  4549
13424  454A
13425  454B
13426  454C
13427  454D
13428  454E
13429  454F
13430  4550
13431  4551
13432  4552
13433  4553
13434  4554
13435  4555
13436  4556
13437  4557
13438  4558
13439  4559
13440  455A
13441  455B
13442  455C
13443  455D
13444  455E
13445  455F
13446  4560
13447  4561
13448  4562
13449  4563
13450  4564
13451  4565
13452  4566
13453  4567
13454  4568
13455  4569
13456  456A
13457  456B
13458  456C
13459  456D
13460  456E
13461  456F
13462  4570
13463  4571
13464  4572
13465  4573
13466  4574
13467  4575
13468  4576
13469  4577
13470  4578
13471  4579
13472  457A
13473  457B
13474  457C
13475  457D
13476  457E
13477  457F
13478  4580
13479  4581
13480  4582
13481  4583
13482  4584
13483  4585
13484  4586
13485  4587
13486  4588
13487  4589
13488  458A
13489  458B
13490  458C
13491  458D
13492  458E
13493  458F
13494  4590
13495  4591
13496  4592
13497  4593
13498  4594
13499  4595
13500  4596
13501  4597
13502  4598
13503  4599
13504  459A
13505  459B
13506  459C
13507  459D
13508  459E
13509  459F
13510  45A0
13511  45A1
13512  45A2
13513  45A3
13514  45A4
13515  45A5
13516  45A6
13517  45A7
13518  45A8
13519  45A9
13520  45AA
13521  45AB
13522  45AC
13523  45AD
13524  45AE
13525  45AF
13526  45B0
13527  45B1
13528  45B2
13529  45B3
13530  45B4
13531  45B5
13532  45B6
13533  45B7
13534  45B8
13535  45B9
13536  45BA
13537  45BB
13538  45BC
13539  45BD
13540  45BE
13541  45BF
13542  45C0
13543  45C1
13544  45C2
13545  45C3
13546  45C4
13547  45C5
13548  45C6
13549  45C7
13550  45C8
13551  45C9
13552  45CA
13553  45CB
13554  45CC
13555  45CD
13556  45CE
13557  45CF
13558  45D0
13559  45D1
13560  45D2
13561  45D3
13562  45D4
13563  45D5
13564  45D6
13565  45D7
13566  45D8
13567  45D9
13568  45DA
13569  45DB
13570  45DC
13571  45DD
13572  45DE
13573  45DF
13574  45E0
13575  45E1
13576  45E2
13577  45E3
13578  45E4
13579  45E5
13580  45E6
13581  45E7
13582  45E8
13583  45E9
13584  45EA
13585  45EB
13586  45EC
13587  45ED
13588  45EE
13589  45EF
13590  45F0
13591  45F1
13592  45F2
13593  45F3
13594  45F4
13595  45F5
13596  45F6
13597  45F7
13598  45F8
13599  45F9
13600  45FA
13601  45FB
13602  45FC
13603  45FD
13604  45FE
13605  45FF
13606  4600
13607  4601
13608  4602
13609  4603
13610  4604
13611  4605
13612  4606
13613  4607
13614  4608
13615  4609
13616  460A
13617  460B
13618  460C
13619  460D
13620  460E
13621  460F
13622  4610
13623  4611
13624  4612
13625  4613
13626  4614
13627  4615
13628  4616
13629  4617
13630  4618
13631  4619
13632  461A
13633  461B
13634  461C
13635  461D
13636  461E
13637  461F
13638  4620
13639  4621
13640  4622
13641  4623
13642  4624
13643  4625
13644  4626
13645  4627
13646  4628
13647  4629
13648  462A
13649  462B
13650  462C
13651  462D
13652  462E
13653  462F
13654  4630
13655  4631
13656  4632
13657  4633
13658  4634
13659  4635
13660  4636
13661  4637
13662  4638
13663  4639
13664  463A
13665  463B
13666  463C
13667  463D
13668  463E
13669  463F
13670  4640
13671  4641
13672  4642
13673  4643
13674  4644
13675  4645
13676  4646
13677  4647
13678  4648
13679  4649
13680  464A
13681  464B
13682  464C
13683  464D
13684  464E
13685  464F
13686  4650
13687  4651
13688  4652
13689  4653
13690  4654
13691  4655
13692  4656
13693  4657
13694  4658
13695  4659
13696  465A
13697  465B
13698  465C
13699  465D
13700  465E
13701  465F
13702  4660
13703  4661
13704  4662
13705  4663
13706  4664
13707  4665
13708  4666
13709  4667
13710  4668
13711  4669
13712  466A
13713  466B
13714  466C
13715  466D
13716  466E
13717  466F
13718  4670
13719  4671
13720  4672
13721  4673
13722  4674
13723  4675
13724  4676
13725  4677
13726  4678
13727  4679
13728  467A
13729  467B
13730  467C
13731  467D
13732  467E
13733  467F
13734  4680
13735  4681
13736  4682
13737  4683
13738  4684
13739  4685
13740  4686
13741  4687
13742  4688
13743  4689
13744  468A
13745  468B
13746  468C
13747  468D
13748  468E
13749  468F
13750  4690
13751  4691
13752  4692
13753  4693
13754  4694
13755  4695
13756  4696
13757  4697
13758  4698
13759  4699
13760  469A
13761  469B
13762  469C
13763  469D
13764  469E
13765  469F
13766  46A0
13767  46A1
13768  46A2
13769  46A3
13770  46A4
13771  46A5
13772  46A6
13773  46A7
13774  46A8
13775  46A9
13776  46AA
13777  46AB
13778  46AC
13779  46AD
13780  46AE
13781  46AF
13782  46B0
13783  46B1
13784  46B2
13785  46B3
13786  46B4
13787  46B5
13788  46B6
13789  46B7
13790  46B8
13791  46B9
13792  46BA
13793  46BB
13794  46BC
13795  46BD
13796  46BE
13797  46BF
13798  46C0
13799  46C1
13800  46C2
13801  46C3
13802  46C4
13803  46C5
13804  46C6
13805  46C7
13806  46C8
13807  46C9
13808  46CA
13809  46CB
13810  46CC
13811  46CD
13812  46CE
13813  46CF
13814  46D0
13815  46D1
13816  46D2
13817  46D3
13818  46D4
13819  46D5
13820  46D6
13821  46D7
13822  46D8
13823  46D9
13824  46DA
13825  46DB
13826  46DC
13827  46DD
13828  46DE
13829  46DF
13830  46E0
13831  46E1
13832  46E2
13833  46E3
13834  46E4
13835  46E5
13836  46E6
13837  46E7
13838  46E8
13839  46E9
13840  46EA
13841  46EB
13842  46EC
13843  46ED
13844  46EE
13845  46EF
13846  46F0
13847  46F1
13848  46F2
13849  46F3
13850  46F4
13851  46F5
13852  46F6
13853  46F7
13854  46F8
13855  46F9
13856  46FA
13857  46FB
13858  46FC
13859  46FD
13860  46FE
13861  46FF
13862  4700
13863  4701
13864  4702
13865  4703
13866  4704
13867  4705
13868  4706
13869  4707
13870  4708
13871  4709
13872  470A
13873  470B
13874  470C
13875  470D
13876  470E
13877  470F
13878  4710
13879  4711
13880  4712
13881  4713
13882  4714
13883  4715
13884  4716
13885  4717
13886  4718
13887  4719
13888  471A
13889  471B
13890  471C
13891  471D
13892  471E
13893  471F
13894  4720
13895  4721
13896  4722
13897  4723
13898  4724
13899  4725
13900  4726
13901  4727
13902  4728
13903  4729
13904  472A
13905  472B
13906  472C
13907  472D
13908  472E
13909  472F
13910  4730
13911  4731
13912  4732
13913  4733
13914  4734
13915  4735
13916  4736
13917  4737
13918  4738
13919  4739
13920  473A
13921  473B
13922  473C
13923  473D
13924  473E
13925  473F
13926  4740
13927  4741
13928  4742
13929  4743
13930  4744
13931  4745
13932  4746
13933  4747
13934  4748
13935  4749
13936  474A
13937  474B
13938  474C
13939  474D
13940  474E
13941  474F
13942  4750
13943  4751
13944  4752
13945  4753
13946  4754
13947  4755
13948  4756
13949  4757
13950  4758
13951  4759
13952  475A
13953  475B
13954  475C
13955  475D
13956  475E
13957  475F
13958  4760
13959  4761
13960  4762
13961  4763
13962  4764
13963  4765
13964  4766
13965  4767
13966  4768
13967  4769
13968  476A
13969  476B
13970  476C
13971  476D
13972  476E
13973  476F
13974  4770
13975  4771
13976  4772
13977  4773
13978  4774
13979  4775
13980  4776
13981  4777
13982  4778
13983  4779
13984  477A
13985  477B
13986  477C
13987  477D
13988  477E
13989  477F
13990  4780
13991  4781
13992  4782
13993  4783
13994  4784
13995  4785
13996  4786
13997  4787
13998  4788
13999  4789
14000  478A
14001  478B
14002  478C
14003  478D
14004  478E
14005  478F
14006  4790
14007  4791
14008  4792
14009  4793
14010  4794
14011  4795
14012  4796
14013  4797
14014  4798
14015  4799
14016  479A
14017  479B
14018  479C
14019  479D
14020  479E
14021  479F
14022  47A0
14023  47A1
14024  47A2
14025  47A3
14026  47A4
14027  47A5
14028  47A6
14029  47A7
14030  47A8
14031  47A9
14032  47AA
14033  47AB
14034  47AC
14035  47AD
14036  47AE
14037  47AF
14038  47B0
14039  47B1
14040  47B2
14041  47B3
14042  47B4
14043  47B5
14044  47B6
14045  47B7
14046  47B8
14047  47B9
14048  47BA
14049  47BB
14050  47BC
14051  47BD
14052  47BE
14053  47BF
14054  47C0
14055  47C1
14056  47C2
14057  47C3
14058  47C4
14059  47C5
14060  47C6
14061  47C7
14062  47C8
14063  47C9
14064  47CA
14065  47CB
14066  47CC
14067  47CD
14068  47CE
14069  47CF
14070  47D0
14071  47D1
14072  47D2
14073  47D3
14074  47D4
14075  47D5
14076  47D6
14077  47D7
14078  47D8
14079  47D9
14080  47DA
14081  47DB
14082  47DC
14083  47DD
14084  47DE
14085  47DF
14086  47E0
14087  47E1
14088  47E2
14089  47E3
14090  47E4
14091  47E5
14092  47E6
14093  47E7
14094  47E8
14095  47E9
14096  47EA
14097  47EB
14098  47EC
14099  47ED
14100  47EE
14101  47EF
14102  47F0
14103  47F1
14104  47F2
14105  47F3
14106  47F4
14107  47F5
14108  47F6
14109  47F7
14110  47F8
14111  47F9
14112  47FA
14113  47FB
14114  47FC
14115  47FD
14116  47FE
14117  47FF
14118  4800
14119  4801
14120  4802
14121  4803
14122  4804
14123  4805
14124  4806
14125  4807
14126  4808
14127  4809
14128  480A
14129  480B
14130  480C
14131  480D
14132  480E
14133  480F
14134  4810
14135  4811
14136  4812
14137  4813
14138  4814
14139  4815
14140  4816
14141  4817
14142  4818
14143  4819
14144  481A
14145  481B
14146  481C
14147  481D
14148  481E
14149  481F
14150  4820
14151  4821
14152  4822
14153  4823
14154  4824
14155  4825
14156  4826
14157  4827
14158  4828
14159  4829
14160  482A
14161  482B
14162  482C
14163  482D
14164  482E
14165  482F
14166  4830
14167  4831
14168  4832
14169  4833
14170  4834
14171  4835
14172  4836
14173  4837
14174  4838
14175  4839
14176  483A
14177  483B
14178  483C
14179  483D
14180  483E
14181  483F
14182  4840
14183  4841
14184  4842
14185  4843
14186  4844
14187  4845
14188  4846
14189  4847
14190  4848
14191  4849
14192  484A
14193  484B
14194  484C
14195  484D
14196  484E
14197  484F
14198  4850
14199  4851
14200  4852
14201  4853
14202  4854
14203  4855
14204  4856
14205  4857
14206  4858
14207  4859
14208  485A
14209  485B
14210  485C
14211  485D
14212  485E
14213  485F
14214  4860
14215  4861
14216  4862
14217  4863
14218  4864
14219  4865
14220  4866
14221  4867
14222  4868
14223  4869
14224  486A
14225  486B
14226  486C
14227  486D
14228  486E
14229  486F
14230  4870
14231  4871
14232  4872
14233  4873
14234  4874
14235  4875
14236  4876
14237  4877
14238  4878
14239  4879
14240  487A
14241  487B
14242  487C
14243  487D
14244  487E
14245  487F
14246  4880
14247  4881
14248  4882
14249  4883
14250  4884
14251  4885
14252  4886
14253  4887
14254  4888
14255  4889
14256  488A
14257  488B
14258  488C
14259  488D
14260  488E
14261  488F
14262  4890
14263  4891
14264  4892
14265  4893
14266  4894
14267  4895
14268  4896
14269  4897
14270  4898
14271  4899
14272  489A
14273  489B
14274  489C
14275  489D
14276  489E
14277  489F
14278  48A0
14279  48A1
14280  48A2
14281  48A3
14282  48A4
14283  48A5
14284  48A6
14285  48A7
14286  48A8
14287  48A9
14288  48AA
14289  48AB
14290  48AC
14291  48AD
14292  48AE
14293  48AF
14294  48B0
14295  48B1
14296  48B2
14297  48B3
14298  48B4
14299  48B5
14300  48B6
14301  48B7
14302  48B8
14303  48B9
14304  48BA
14305  48BB
14306  48BC
14307  48BD
14308  48BE
14309  48BF
14310  48C0
14311  48C1
14312  48C2
14313  48C3
14314  48C4
14315  48C5
14316  48C6
14317  48C7
14318  48C8
14319  48C9
14320  48CA
14321  48CB
14322  48CC
14323  48CD
14324  48CE
14325  48CF
14326  48D0
14327  48D1
14328  48D2
14329  48D3
14330  48D4
14331  48D5
14332  48D6
14333  48D7
14334  48D8
14335  48D9
14336  48DA
14337  48DB
14338  48DC
14339  48DD
14340  48DE
14341  48DF
14342  48E0
14343  48E1
14344  48E2
14345  48E3
14346  48E4
14347  48E5
14348  48E6
14349  48E7
14350  48E8
14351  48E9
14352  48EA
14353  48EB
14354  48EC
14355  48ED
14356  48EE
14357  48EF
14358  48F0
14359  48F1
14360  48F2
14361  48F3
14362  48F4
14363  48F5
14364  48F6
14365  48F7
14366  48F8
14367  48F9
14368  48FA
14369  48FB
14370  48FC
14371  48FD
14372  48FE
14373  48FF
14374  4900
14375  4901
14376  4902
14377  4903
14378  4904
14379  4905
14380  4906
14381  4907
14382  4908
14383  4909
14384  490A
14385  490B
14386  490C
14387  490D
14388  490E
14389  490F
14390  4910
14391  4911
14392  4912
14393  4913
14394  4914
14395  4915
14396  4916
14397  4917
14398  4918
14399  4919
14400  491A
14401  491B
14402  491C
14403  491D
14404  491E
14405  491F
14406  4920
14407  4921
14408  4922
14409  4923
14410  4924
14411  4925
14412  4926
14413  4927
14414  4928
14415  4929
14416  492A
14417  492B
14418  492C
14419  492D
14420  492E
14421  492F
14422  4930
14423  4931
14424  4932
14425  4933
14426  4934
14427  4935
14428  4936
14429  4937
14430  4938
14431  4939
14432  493A
14433  493B
14434  493C
14435  493D
14436  493E
14437  493F
14438  4940
14439  4941
14440  4942
14441  4943
14442  4944
14443  4945
14444  4946
14445  4947
14446  4948
14447  4949
14448  494A
14449  494B
14450  494C
14451  494D
14452  494E
14453  494F
14454  4950
14455  4951
14456  4952
14457  4953
14458  4954
14459  4955
14460  4956
14461  4957
14462  4958
14463  4959
14464  495A
14465  495B
14466  495C
14467  495D
14468  495E
14469  495F
14470  4960
14471  4961
14472  4962
14473  4963
14474  4964
14475  4965
14476  4966
14477  4967
14478  4968
14479  4969
14480  496A
14481  496B
14482  496C
14483  496D
14484  496E
14485  496F
14486  4970
14487  4971
14488  4972
14489  4973
14490  4974
14491  4975
14492  4976
14493  4977
14494  4978
14495  4979
14496  497A
14497  497B
14498  497C
14499  497D
14500  497E
14501  497F
14502  4980
14503  4981
14504  4982
14505  4983
14506  4984
14507  4985
14508  4986
14509  4987
14510  4988
14511  4989
14512  498A
14513  498B
14514  498C
14515  498D
14516  498E
14517  498F
14518  4990
14519  4991
14520  4992
14521  4993
14522  4994
14523  4995
14524  4996
14525  4997
14526  4998
14527  4999
14528  499A
14529  499B
14530  499C
14531  499D
14532  499E
14533  499F
14534  49A0
14535  49A1
14536  49A2
14537  49A3
14538  49A4
14539  49A5
14540  49A6
14541  49A7
14542  49A8
14543  49A9
14544  49AA
14545  49AB
14546  49AC
14547  49AD
14548  49AE
14549  49AF
14550  49B0
14551  49B1
14552  49B2
14553  49B3
14554  49B4
14555  49B5
14556  49B6
14557  49B7
14558  49B8
14559  49B9
14560  49BA
14561  49BB
14562  49BC
14563  49BD
14564  49BE
14565  49BF
14566  49C0
14567  49C1
14568  49C2
14569  49C3
14570  49C4
14571  49C5
14572  49C6
14573  49C7
14574  49C8
14575  49C9
14576  49CA
14577  49CB
14578  49CC
14579  49CD
14580  49CE
14581  49CF
14582  49D0
14583  49D1
14584  49D2
14585  49D3
14586  49D4
14587  49D5
14588  49D6
14589  49D7
14590  49D8
14591  49D9
14592  49DA
14593  49DB
14594  49DC
14595  49DD
14596  49DE
14597  49DF
14598  49E0
14599  49E1
14600  49E2
14601  49E3
14602  49E4
14603  49E5
14604  49E6
14605  49E7
14606  49E8
14607  49E9
14608  49EA
14609  49EB
14610  49EC
14611  49ED
14612  49EE
14613  49EF
14614  49F0
14615  49F1
14616  49F2
14617  49F3
14618  49F4
14619  49F5
14620  49F6
14621  49F7
14622  49F8
14623  49F9
14624  49FA
14625  49FB
14626  49FC
14627  49FD
14628  49FE
14629  49FF
14630  4A00
14631  4A01
14632  4A02
14633  4A03
14634  4A04
14635  4A05
14636  4A06
14637  4A07
14638  4A08
14639  4A09
14640  4A0A
14641  4A0B
14642  4A0C
14643  4A0D
14644  4A0E
14645  4A0F
14646  4A10
14647  4A11
14648  4A12
14649  4A13
14650  4A14
14651  4A15
14652  4A16
14653  4A17
14654  4A18
14655  4A19
14656  4A1A
14657  4A1B
14658  4A1C
14659  4A1D
14660  4A1E
14661  4A1F
14662  4A20
14663  4A21
14664  4A22
14665  4A23
14666  4A24
14667  4A25
14668  4A26
14669  4A27
14670  4A28
14671  4A29
14672  4A2A
14673  4A2B
14674  4A2C
14675  4A2D
14676  4A2E
14677  4A2F
14678  4A30
14679  4A31
14680  4A32
14681  4A33
14682  4A34
14683  4A35
14684  4A36
14685  4A37
14686  4A38
14687  4A39
14688  4A3A
14689  4A3B
14690  4A3C
14691  4A3D
14692  4A3E
14693  4A3F
14694  4A40
14695  4A41
14696  4A42
14697  4A43
14698  4A44
14699  4A45
14700  4A46
14701  4A47
14702  4A48
14703  4A49
14704  4A4A
14705  4A4B
14706  4A4C
14707  4A4D
14708  4A4E
14709  4A4F
14710  4A50
14711  4A51
14712  4A52
14713  4A53
14714  4A54
14715  4A55
14716  4A56
14717  4A57
14718  4A58
14719  4A59
14720  4A5A
14721  4A5B
14722  4A5C
14723  4A5D
14724  4A5E
14725  4A5F
14726  4A60
14727  4A61
14728  4A62
14729  4A63
14730  4A64
14731  4A65
14732  4A66
14733  4A67
14734  4A68
14735  4A69
14736  4A6A
14737  4A6B
14738  4A6C
14739  4A6D
14740  4A6E
14741  4A6F
14742  4A70
14743  4A71
14744  4A72
14745  4A73
14746  4A74
14747  4A75
14748  4A76
14749  4A77
14750  4A78
14751  4A79
14752  4A7A
14753  4A7B
14754  4A7C
14755  4A7D
14756  4A7E
14757  4A7F
14758  4A80
14759  4A81
14760  4A82
14761  4A83
14762  4A84
14763  4A85
14764  4A86
14765  4A87
14766  4A88
14767  4A89
14768  4A8A
14769  4A8B
14770  4A8C
14771  4A8D
14772  4A8E
14773  4A8F
14774  4A90
14775  4A91
14776  4A92
14777  4A93
14778  4A94
14779  4A95
14780  4A96
14781  4A97
14782  4A98
14783  4A99
14784  4A9A
14785  4A9B
14786  4A9C
14787  4A9D
14788  4A9E
14789  4A9F
14790  4AA0
14791  4AA1
14792  4AA2
14793  4AA3
14794  4AA4
14795  4AA5
14796  4AA6
14797  4AA7
14798  4AA8
14799  4AA9
14800  4AAA
14801  4AAB
14802  4AAC
14803  4AAD
14804  4AAE
14805  4AAF
14806  4AB0
14807  4AB1
14808  4AB2
14809  4AB3
14810  4AB4
14811  4AB5
14812  4AB6
14813  4AB7
14814  4AB8
14815  4AB9
14816  4ABA
14817  4ABB
14818  4ABC
14819  4ABD
14820  4ABE
14821  4ABF
14822  4AC0
14823  4AC1
14824  4AC2
14825  4AC3
14826  4AC4
14827  4AC5
14828  4AC6
14829  4AC7
14830  4AC8
14831  4AC9
14832  4ACA
14833  4ACB
14834  4ACC
14835  4ACD
14836  4ACE
14837  4ACF
14838  4AD0
14839  4AD1
14840  4AD2
14841  4AD3
14842  4AD4
14843  4AD5
14844  4AD6
14845  4AD7
14846  4AD8
14847  4AD9
14848  4ADA
14849  4ADB
14850  4ADC
14851  4ADD
14852  4ADE
14853  4ADF
14854  4AE0
14855  4AE1
14856  4AE2
14857  4AE3
14858  4AE4
14859  4AE5
14860  4AE6
14861  4AE7
14862  4AE8
14863  4AE9
14864  4AEA
14865  4AEB
14866  4AEC
14867  4AED
14868  4AEE
14869  4AEF
14870  4AF0
14871  4AF1
14872  4AF2
14873  4AF3
14874  4AF4
14875  4AF5
14876  4AF6
14877  4AF7
14878  4AF8
14879  4AF9
14880  4AFA
14881  4AFB
14882  4AFC
14883  4AFD
14884  4AFE
14885  4AFF
14886  4B00
14887  4B01
14888  4B02
14889  4B03
14890  4B04
14891  4B05
14892  4B06
14893  4B07
14894  4B08
14895  4B09
14896  4B0A
14897  4B0B
14898  4B0C
14899  4B0D
14900  4B0E
14901  4B0F
14902  4B10
14903  4B11
14904  4B12
14905  4B13
14906  4B14
14907  4B15
14908  4B16
14909  4B17
14910  4B18
14911  4B19
14912  4B1A
14913  4B1B
14914  4B1C
14915  4B1D
14916  4B1E
14917  4B1F
14918  4B20
14919  4B21
14920  4B22
14921  4B23
14922  4B24
14923  4B25
14924  4B26
14925  4B27
14926  4B28
14927  4B29
14928  4B2A
14929  4B2B
14930  4B2C
14931  4B2D
14932  4B2E
14933  4B2F
14934  4B30
14935  4B31
14936  4B32
14937  4B33
14938  4B34
14939  4B35
14940  4B36
14941  4B37
14942  4B38
14943  4B39
14944  4B3A
14945  4B3B
14946  4B3C
14947  4B3D
14948  4B3E
14949  4B3F
14950  4B40
14951  4B41
14952  4B42
14953  4B43
14954  4B44
14955  4B45
14956  4B46
14957  4B47
14958  4B48
14959  4B49
14960  4B4A
14961  4B4B
14962  4B4C
14963  4B4D
14964  4B4E
14965  4B4F
14966  4B50
14967  4B51
14968  4B52
14969  4B53
14970  4B54
14971  4B55
14972  4B56
14973  4B57
14974  4B58
14975  4B59
14976  4B5A
14977  4B5B
14978  4B5C
14979  4B5D
14980  4B5E
14981  4B5F
14982  4B60
14983  4B61
14984  4B62
14985  4B63
14986  4B64
14987  4B65
14988  4B66
14989  4B67
14990  4B68
14991  4B69
14992  4B6A
14993  4B6B
14994  4B6C
14995  4B6D
14996  4B6E
14997  4B6F
14998  4B70
14999  4B71
15000  4B72
15001  4B73
15002  4B74
15003  4B75
15004  4B76
15005  4B77
15006  4B78
15007  4B79
15008  4B7A
15009  4B7B
15010  4B7C
15011  4B7D
15012  4B7E
15013  4B7F
15014  4B80
15015  4B81
15016  4B82
15017  4B83
15018  4B84
15019  4B85
15020  4B86
15021  4B87
15022  4B88
15023  4B89
15024  4B8A
15025  4B8B
15026  4B8C
15027  4B8D
15028  4B8E
15029  4B8F
15030  4B90
15031  4B91
15032  4B92
15033  4B93
15034  4B94
15035  4B95
15036  4B96
15037  4B97
15038  4B98
15039  4B99
15040  4B9A
15041  4B9B
15042  4B9C
15043  4B9D
15044  4B9E
15045  4B9F
15046  4BA0
15047  4BA1
15048  4BA2
15049  4BA3
15050  4BA4
15051  4BA5
15052  4BA6
15053  4BA7
15054  4BA8
15055  4BA9
15056  4BAA
15057  4BAB
15058  4BAC
15059  4BAD
15060  4BAE
15061  4BAF
15062  4BB0
15063  4BB1
15064  4BB2
15065  4BB3
15066  4BB4
15067  4BB5
15068  4BB6
15069  4BB7
15070  4BB8
15071  4BB9
15072  4BBA
15073  4BBB
15074  4BBC
15075  4BBD
15076  4BBE
15077  4BBF
15078  4BC0
15079  4BC1
15080  4BC2
15081  4BC3
15082  4BC4
15083  4BC5
15084  4BC6
15085  4BC7
15086  4BC8
15087  4BC9
15088  4BCA
15089  4BCB
15090  4BCC
15091  4BCD
15092  4BCE
15093  4BCF
15094  4BD0
15095  4BD1
15096  4BD2
15097  4BD3
15098  4BD4
15099  4BD5
15100  4BD6
15101  4BD7
15102  4BD8
15103  4BD9
15104  4BDA
15105  4BDB
15106  4BDC
15107  4BDD
15108  4BDE
15109  4BDF
15110  4BE0
15111  4BE1
15112  4BE2
15113  4BE3
15114  4BE4
15115  4BE5
15116  4BE6
15117  4BE7
15118  4BE8
15119  4BE9
15120  4BEA
15121  4BEB
15122  4BEC
15123  4BED
15124  4BEE
15125  4BEF
15126  4BF0
15127  4BF1
15128  4BF2
15129  4BF3
15130  4BF4
15131  4BF5
15132  4BF6
15133  4BF7
15134  4BF8
15135  4BF9
15136  4BFA
15137  4BFB
15138  4BFC
15139  4BFD
15140  4BFE
15141  4BFF
15142  4C00
15143  4C01
15144  4C02
15145  4C03
15146  4C04
15147  4C05
15148  4C06
15149  4C07
15150  4C08
15151  4C09
15152  4C0A
15153  4C0B
15154  4C0C
15155  4C0D
15156  4C0E
15157  4C0F
15158  4C10
15159  4C11
15160  4C12
15161  4C13
15162  4C14
15163  4C15
15164  4C16
15165  4C17
15166  4C18
15167  4C19
15168  4C1A
15169  4C1B
15170  4C1C
15171  4C1D
15172  4C1E
15173  4C1F
15174  4C20
15175  4C21
15176  4C22
15177  4C23
15178  4C24
15179  4C25
15180  4C26
15181  4C27
15182  4C28
15183  4C29
15184  4C2A
15185  4C2B
15186  4C2C
15187  4C2D
15188  4C2E
15189  4C2F
15190  4C30
15191  4C31
15192  4C32
15193  4C33
15194  4C34
15195  4C35
15196  4C36
15197  4C37
15198  4C38
15199  4C39
15200  4C3A
15201  4C3B
15202  4C3C
15203  4C3D
15204  4C3E
15205  4C3F
15206  4C40
15207  4C41
15208  4C42
15209  4C43
15210  4C44
15211  4C45
15212  4C46
15213  4C47
15214  4C48
15215  4C49
15216  4C4A
15217  4C4B
15218  4C4C
15219  4C4D
15220  4C4E
15221  4C4F
15222  4C50
15223  4C51
15224  4C52
15225  4C53
15226  4C54
15227  4C55
15228  4C56
15229  4C57
15230  4C58
15231  4C59
15232  4C5A
15233  4C5B
15234  4C5C
15235  4C5D
15236  4C5E
15237  4C5F
15238  4C60
15239  4C61
15240  4C62
15241  4C63
15242  4C64
15243  4C65
15244  4C66
15245  4C67
15246  4C68
15247  4C69
15248  4C6A
15249  4C6B
15250  4C6C
15251  4C6D
15252  4C6E
15253  4C6F
15254  4C70
15255  4C71
15256  4C72
15257  4C73
15258  4C74
15259  4C75
15260  4C76
15261  4C77
15262  4C78
15263  4C79
15264  4C7A
15265  4C7B
15266  4C7C
15267  4C7D
15268  4C7E
15269  4C7F
15270  4C80
15271  4C81
15272  4C82
15273  4C83
15274  4C84
15275  4C85
15276  4C86
15277  4C87
15278  4C88
15279  4C89
15280  4C8A
15281  4C8B
15282  4C8C
15283  4C8D
15284  4C8E
15285  4C8F
15286  4C90
15287  4C91
15288  4C92
15289  4C93
15290  4C94
15291  4C95
15292  4C96
15293  4C97
15294  4C98
15295  4C99
15296  4C9A
15297  4C9B
15298  4C9C
15299  4C9D
15300  4C9E
15301  4C9F
15302  4CA0
15303  4CA1
15304  4CA2
15305  4CA3
15306  4CA4
15307  4CA5
15308  4CA6
15309  4CA7
15310  4CA8
15311  4CA9
15312  4CAA
15313  4CAB
15314  4CAC
15315  4CAD
15316  4CAE
15317  4CAF
15318  4CB0
15319  4CB1
15320  4CB2
15321  4CB3
15322  4CB4
15323  4CB5
15324  4CB6
15325  4CB7
15326  4CB8
15327  4CB9
15328  4CBA
15329  4CBB
15330  4CBC
15331  4CBD
15332  4CBE
15333  4CBF
15334  4CC0
15335  4CC1
15336  4CC2
15337  4CC3
15338  4CC4
15339  4CC5
15340  4CC6
15341  4CC7
15342  4CC8
15343  4CC9
15344  4CCA
15345  4CCB
15346  4CCC
15347  4CCD
15348  4CCE
15349  4CCF
15350  4CD0
15351  4CD1
15352  4CD2
15353  4CD3
15354  4CD4
15355  4CD5
15356  4CD6
15357  4CD7
15358  4CD8
15359  4CD9
15360  4CDA
15361  4CDB
15362  4CDC
15363  4CDD
15364  4CDE
15365  4CDF
15366  4CE0
15367  4CE1
15368  4CE2
15369  4CE3
15370  4CE4
15371  4CE5
15372  4CE6
15373  4CE7
15374  4CE8
15375  4CE9
15376  4CEA
15377  4CEB
15378  4CEC
15379  4CED
15380  4CEE
15381  4CEF
15382  4CF0
15383  4CF1
15384  4CF2
15385  4CF3
15386  4CF4
15387  4CF5
15388  4CF6
15389  4CF7
15390  4CF8
15391  4CF9
15392  4CFA
15393  4CFB
15394  4CFC
15395  4CFD
15396  4CFE
15397  4CFF
15398  4D00
15399  4D01
15400  4D02
15401  4D03
15402  4D04
15403  4D05
15404  4D06
15405  4D07
15406  4D08
15407  4D09
15408  4D0A
15409  4D0B
15410  4D0C
15411  4D0D
15412  4D0E
15413  4D0F
15414  4D10
15415  4D11
15416  4D12
15417  4D13
15418  4D14
15419  4D15
15420  4D16
15421  4D17
15422  4D18
15423  4D19
15424  4D1A
15425  4D1B
15426  4D1C
15427  4D1D
15428  4D1E
15429  4D1F
15430  4D20
15431  4D21
15432  4D22
15433  4D23
15434  4D24
15435  4D25
15436  4D26
15437  4D27
15438  4D28
15439  4D29
15440  4D2A
15441  4D2B
15442  4D2C
15443  4D2D
15444  4D2E
15445  4D2F
15446  4D30
15447  4D31
15448  4D32
15449  4D33
15450  4D34
15451  4D35
15452  4D36
15453  4D37
15454  4D38
15455  4D39
15456  4D3A
15457  4D3B
15458  4D3C
15459  4D3D
15460  4D3E
15461  4D3F
15462  4D40
15463  4D41
15464  4D42
15465  4D43
15466  4D44
15467  4D45
15468  4D46
15469  4D47
15470  4D48
15471  4D49
15472  4D4A
15473  4D4B
15474  4D4C
15475  4D4D
15476  4D4E
15477  4D4F
15478  4D50
15479  4D51
15480  4D52
15481  4D53
15482  4D54
15483  4D55
15484  4D56
15485  4D57
15486  4D58
15487  4D59
15488  4D5A
15489  4D5B
15490  4D5C
15491  4D5D
15492  4D5E
15493  4D5F
15494  4D60
15495  4D61
15496  4D62
15497  4D63
15498  4D64
15499  4D65
15500  4D66
15501  4D67
15502  4D68
15503  4D69
15504  4D6A
15505  4D6B
15506  4D6C
15507  4D6D
015508  000557        
015509  000558  var hFonts[54] ;
015510  000559  var stringsCV[54] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
15511  2726
15512  2727
15513  2728
15514  2729
15515  272A
15516  272B
15517  272C
15518  272D
15519  272E
15520  272F
15521  2730
15522  2731
15523  2732
15524  2733
15525  2734
15526  2735
15527  2736
15528  2737
15529  2738
15530  2739
15531  273A
15532  273B
15533  273C
15534  273D
15535  273E
15536  273F
15537  2740
15538  2741
15539  2742
15540  2743
15541  2744
15542  2745
15543  2746
15544  2747
15545  2748
15546  2749
15547  274A
15548  274B
15549  274C
15550  274D
15551  274E
15552  274F
15553  2750
15554  2751
15555  2752
15556  2753
15557  2754
15558  2755
15559  2756
15560  2757
15561  2758
15562  2759
15563  275A
15564  275B
15565  275C
15566  275D
15567  275E
15568  275F
15569  2760
15570  2761
15571  2762
15572  2763
15573  2764
15574  2765
15575  2766
15576  2767
15577  2768
15578  2769
15579  276A
15580  276B
15581  276C
15582  276D
15583  276E
15584  276F
15585  2770
15586  2771
15587  2772
15588  2773
15589  2774
15590  2775
15591  2776
15592  2777
15593  2778
15594  2779
15595  277A
15596  277B
15597  277C
15598  277D
15599  277E
15600  277F
15601  2780
15602  2781
15603  2782
15604  2783
15605  2784
15606  2785
15607  2786
15608  2787
15609  2788
15610  2789
15611  278A
15612  278B
15613  278C
15614  278D
15615  278E
15616  278F
15617  2790
15618  2791
015619  000560  // Start P2.inc
015620  000561  var oObjects[MaxTotObjects+1] ;                 // address of objects
015621  000562  var CurrentForm ;
015622  000563  var TouchXpos, TouchYpos ;
015623  000564  var InputType, TouchState, CurInputData, pInputIndex ;
015624  000565  var comRX[40], cmd[CMDLenMAX] ;
015625  000566        
015626  000567  var InputCS, OutputCS ;
015627  000568        
015628  000569        
015629  000570        
015630  000571  func seroutCS(var op)
015631  000572      serout(op) ;
015632  000573      OutputCS ^= op ;
015633  000574  endfunc
015634  000575        
015635  000576  func nak0()
015636  000577      serout(NAK) ;
015637  000578      InputCS := 0 ;
015638  000579  endfunc
015639  000580        
015640  000581  func seroutOcs()
015641  000582      serout(OutputCS) ;
015642  000583      OutputCS := 0 ;
015643  000584  endfunc
015644  000585        
015645  000586  func SendReport(var id, var objt, var objn, var val)
015646  000587      seroutCS(id) ;
015647  000588      seroutCS(objt) ;
015648  000589      seroutCS(objn) ;
015649  000590      seroutCS(val >> 8) ; // first 8 bits
015650  000591      seroutCS(val) ;
015651  000592      seroutOcs() ;
015652  000593  endfunc
015653  000594        
015654  000595        
015655  000596  func ReadObject(var ObjectType, var ObjectIdx)
015656  000597      var j, k, Objects ;
015657  000598      Objects := *(oObjects+ObjectType) ;
015658  000599        
015659  000600      j := 2 + ObjectIdx * 2 + Objects ;
015660  000601       if (ObjectType == tForm)
015661  000602          k := CurrentForm ;
015662  000603      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
015663  000604          k := img_GetWord(hndl, *j, IMAGE_TAG2);
015664  000605      else if (ObjectType == tStrings)
015665  000606          k := stringsCV[ObjectIdx];
015666  000607          else
015667  000608          k := img_GetWord(hndl, *j, IMAGE_INDEX);
015668  000609          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
015669  000610                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
015670  000611      endif
015671  000612      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
015672  000613  endfunc
015673  000614        
015674  000615        
015675  000616  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
015676  000617      var i, j, k, Objects ;
015677  000618      ObjectType &= 0x3f ;
015678  000619      if (ObjectType == tForm)
015679  000620          ActivateForm(ObjectIdx) ;
015680  000621      else
015681  000622          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
015682  000623          i := *(Objects) ;
015683  000624          switch (ObjectType)
015684  000625              case tWinButton :
015685  000626                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
015686  000627                  break ;
015687  000628              case tUserButton :
015688  000629                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
015689  000630                  break ;
015690  000631              default : j := -1 ;
015691  000632          endswitch
015692  000633          if (j != -1)
015693  000634              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
015694  000635              NewVal := NewVal << 1 ;
015695  000636              if (OVF())      // button group index change
015696  000637                  if (*(j+InputData+Ofs_IPD_P1))
015697  000638                      k &= 1 ;    // mask off old group index for momentary
015698  000639                  else
015699  000640                      k &= 3 ;    // mask off old group index for toggle
015700  000641                  endif
015701  000642              else            // normal set
015702  000643                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
015703  000644                  k &= 0xfffc ;    // retain only group index for state set
015704  000645              endif
015705  000646              NewVal |= k ;
015706  000647          endif
015707  000648           if (ObjectType == tLeddigits)
015708  000649              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
015709  000650              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015710  000651          else if (ObjectType == tStrings)
015711  000652              PrintStrings(ObjectIdx, NewVal, 0);
015712  000653          else
015713  000654              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
015714  000655              img_Show(hndl, i) ; // will only display if form is current
015715  000656          endif
015716  000657      endif
015717  000658  endfunc
015718  000659        
015719  000660  func TurnOffButtons(var group)
015720  000661      var j, k, l;
015721  000662      for (j := 0; j < nInputs; j++)
015722  000663          k := j*IPDatasize ;
015723  000664          if (*(InputData+k+Ofs_IPD_P2) == group)
015724  000665              l := -1 ;
015725  000666               if (*(InputData+k) == tWinButton)
015726  000667                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015727  000668                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
015728  000669                  img_Show(hndl, l);      // only shows on current form
015729  000670              else if (*(InputData+k) == tUserButton)
015730  000671                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015731  000672                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
015732  000673                  img_Show(hndl, l);      // only shows on current form
015733  000674              endif
015734  000675          endif
015735  000676      next
015736  000677  endfunc
015737  000678        
015738  000679        
015739  000680  // WARNING, this code will crash if newval exceeds maximum displayable number
015740  000681  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
015741  000682      var i, j, k, l, lb, newval ;
015742  000683      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
015743  000684      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
015744  000685      i := -1 ;
015745  000686      j := *(typeptr) ;
015746  000687      repeat
015747  000688          typeptr += 2 ;
015748  000689          i++ ;
015749  000690          until (*(typeptr) == imgidx);
015750  000691      j := setptr + i*10 ;
015751  000692        
015752  000693      imgidx++ ;
015753  000694      l := 1 ;
015754  000695      for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
015755  000696          l *= 10 ;
015756  000697      next
015757  000698      lb := *(j+Ofs_Digits_LeadingBlanks) ;
015758  000699      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
015759  000700          k := newval / l ;
015760  000701          newval -= k * l ;
015761  000702          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
015762  000703              if (k == 0)
015763  000704                  k := 10 ;
015764  000705              else
015765  000706                  lb := 0 ;
015766  000707              endif
015767  000708          endif
015768  000709          l /= 10 ;
015769  000710          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
015770  000711          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
015771  000712          img_Show(hndl, imgidx);
015772  000713      next
015773  000714  endfunc
015774  000715        
015775  000716        
015776  000717  func ActivateForm(var newform)
015777  000718      var i, j, *p ;
015778  000719        
015779  000720      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
015780  000721          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
015781  000722              if (img_GetWord(hndl, i, IMAGE_TAG))
015782  000723                  img_Disable(hndl,i) ;
015783  000724              endif
015784  000725          next
015785  000726      endif
015786  000727      CurrentForm := newform ;
015787  000728      // display newform image or clear to image color
015788  000729      if (FormBGcolors[CurrentForm] != ColorBGimage)
015789  000730          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
015790  000731          gfx_Cls() ;
015791  000732          DoGFXObjects() ;                                    // display GFX 'widgets'
015792  000733      endif
015793  000734        
015794  000735      // enable inputs
015795  000736      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
015796  000737          j := img_GetWord(hndl, i, IMAGE_TAG) ;
015797  000738          if (j)
015798  000739              j-- ;
015799  000740              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
015800  000741              //if (j != tKeyboard)
015801  000742              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
015802  000743                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
015803  000744              endif
015804  000745              img_Show(hndl,i) ; // show initialy, if required
015805  000746              if (j == tForm)
015806  000747                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
015807  000748              else if (j == tLeddigits)
015808  000749                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015809  000750              endif
015810  000751          endif
015811  000752      next
015812  000753      for (i := 0; i < nStrings; i++)
015813  000754          if (stringsCV[i] != -1)
015814  000755              WriteObject(tStrings, i, stringsCV[i]) ;
015815  000756          endif
015816  000757      next
015817  000758        
015818  000759  endfunc
015819  000760        
015820  000761  func UpdateObjects(var newval)
015821  000762      var IPidx, otherOBJ ;
015822  000763      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
015823  000764        
015824  000765          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
015825  000766              img_Show(hndl, *(pInputIndex));      // only shows on current form
015826  000767          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
015827  000768              if (*(CurInputData+Ofs_IPD_P1))
015828  000769                  newval &= 1;
015829  000770              else
015830  000771                  newval &= 3;
015831  000772              endif
015832  000773              if (newval > 1) newval := 1;
015833  000774          endif
015834  000775          IPidx := *(CurInputData+TouchState) ;
015835  000776          while(IPidx != 0)
015836  000777              otherOBJ := IPidx + InputData;
015837  000778              if (*(otherOBJ) == OT_REPORT)
015838  000779          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
015839  000780              else if (*(otherOBJ) == OT_MAGIC)
015840  000781                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
015841  000782                  IPidx(newval) ;
015842  000783              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
015843  000784                  if (*(otherOBJ) == OT_ACTIVATE)
015844  000785                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
015845  000786                      InputType := tForm ;
015846  000787                  else if (*(otherOBJ) == OT_SETCONST)
015847  000788                      newval := *(otherOBJ+Ofs_IPD_P3) ;
015848  000789                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015849  000790                  else if (*(otherOBJ) == OT_SETANOTHER)
015850  000791                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015851  000792                  else if (*(otherOBJ) == OT_PREVFRAME)
015852  000793                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
015853  000794                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
015854  000795                      endif
015855  000796                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015856  000797                  else if (*(otherOBJ) == OT_NEXTFRAME)
015857  000798                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
015858  000799                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
015859  000800                      endif
015860  000801                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015861  000802                  else if (*(otherOBJ) == OT_PREVSTRING)
015862  000803                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
015863  000804                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
015864  000805                      endif
015865  000806                  else if (*(otherOBJ) == OT_NEXTSTRING)
015866  000807                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
015867  000808                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
015868  000809                      endif
015869  000810                  endif
015870  000811              endif
015871  000812              IPidx := *(otherOBJ+TouchState) ;
015872  000813          wend
015873  000814      endif
015874  000815  endfunc
015875  000816        
015876  000817  // End P2.inc
015877  000818  func DoGFXObjects()
015878  000819  endfunc
015879  000820        
015880  000821  // Start P3.inc
015881  000822  func main()
015882  000823      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
015883  000824        
015884  000825      putstr("Mounting...\n");
015885  000826      if (!(file_Mount()))
015886  000827          while(!(file_Mount()))
015887  000828              putstr("Drive not mounted...");
015888  000829              pause(200);
015889  000830              gfx_Cls();
015890  000831              pause(200);
015891  000832          wend
015892  000833      endif
015893  000834  //    gfx_MoveTo(0, 0);
015894  000835  //    print(mem_Heap()," ") ;
015895  000836  //    gfx_TransparentColour(0x0020);
015896  000837  //    gfx_Transparency(ON);
015897  000838        
015898  000839      gfx_ScreenMode(LANDSCAPE) ;
015899  000840        
015900  000841      // open image control
015901  000842      hndl := file_LoadImageControl("RepRap_T.dat", "RepRap_T.gci", 1);
015902  000843        
015903  000844      // init 'constants'
015904  000845  // End P3.inc
015905  000846        
015906  000847      oObjects[tDipSwitch] := oDipSwitchs ;
015907  000848      oObjects[tKnob] := oKnobs ;
015908  000849      oObjects[tRockerSwitch] := oRockerSwitchs ;
015909  000850      oObjects[tRotarySwitch] := oRotarySwitchs ;
015910  000851      oObjects[tGSlider] := oGSliders ;
015911  000852      oObjects[tTrackbar] := oTrackbars ;
015912  000853      oObjects[tWinButton] := oWinButtons ;
015913  000854      oObjects[tAngularmeter] := oAngularmeters ;
015914  000855      oObjects[tCoolgauge] := oCoolgauges ;
015915  000856      oObjects[tCustomdigits] := oCustomdigitss ;
015916  000857      oObjects[tForm] := oForms ;
015917  000858      oObjects[tGauge] := oGauges ;
015918  000859      oObjects[tImage] := oImages ;
015919  000860      oObjects[tKeyboard] := oKeyboards ;
015920  000861      oObjects[tLed] := oLeds ;
015921  000862      oObjects[tLeddigits] := oLeddigitss ;
015922  000863      oObjects[tMeter] := oMeters ;
015923  000864      oObjects[tStrings] := oStringss ;
015924  000865      oObjects[tThermometer] := oThermometers ;
015925  000866      oObjects[tUserled] := oUserleds ;
015926  000867      oObjects[tVideo] := oVideos ;
015927  000868      oObjects[tStaticText] := oStaticTexts ;
015928  000869      oObjects[tSounds] := oSoundss ;
015929  000870      oObjects[tTimer] := oTimers ;
015930  000871      oObjects[tSpectrum] := oSpectrums ;
015931  000872      oObjects[tTank] := oTanks ;
015932  000873      oObjects[tUserImages] := oUserImagess ;
015933  000874      oObjects[tPinOutput] := oPinOutputs ;
015934  000875      oObjects[tPinInput] := oPinInputs ;
015935  000876      oObjects[t4Dbutton] := o4Dbuttons ;
015936  000877      oObjects[tAniButton] := oAniButtons ;
015937  000878      oObjects[tColorPicker] := oColorPickers ;
015938  000879      oObjects[tUserButton] := oUserButtons ;
015939  000880      hFonts[0] := file_LoadImageControl("RepRap_T.d03", "RepRap_T.g03", 1)  ;
015940  000881      hFonts[1] := file_LoadImageControl("RepRap_T.d01", "RepRap_T.g01", 1)  ;
015941  000882      hFonts[2] := file_LoadImageControl("RepRap_T.d02", "RepRap_T.g02", 1)  ;
015942  000883      hFonts[3] := FONT3 ;
015943  000884      hFonts[4] := FONT3 ;
015944  000885      hFonts[6] := FONT3 ;
015945  000886      hFonts[11] := file_LoadImageControl("RepRap_T.d06", "RepRap_T.g06", 1)  ;
015946  000887      hFonts[12] := file_LoadImageControl("RepRap_T.d05", "RepRap_T.g05", 1)  ;
015947  000888      hFonts[13] := file_LoadImageControl("RepRap_T.d0D", "RepRap_T.g0D", 1)  ;
015948  000889      hFonts[14] := FONT3 ;
015949  000890      hFonts[15] := FONT3 ;
015950  000891      hFonts[16] := FONT3 ;
015951  000892      hFonts[19] := file_LoadImageControl("RepRap_T.d09", "RepRap_T.g09", 1)  ;
015952  000893      hFonts[21] := FONT3 ;
015953  000894      hFonts[24] := FONT3 ;
015954  000895      hFonts[25] := file_LoadImageControl("RepRap_T.d07", "RepRap_T.g07", 1)  ;
015955  000896      hFonts[28] := FONT3 ;
015956  000897      hFonts[30] := file_LoadImageControl("RepRap_T.d0@", "RepRap_T.g0@", 1)  ;
015957  000898      hFonts[31] := file_LoadImageControl("RepRap_T.d0B", "RepRap_T.g0B", 1)  ;
015958  000899      hFonts[33] := file_LoadImageControl("RepRap_T.d08", "RepRap_T.g08", 1)  ;
015959  000900      hFonts[35] := FONT3 ;
015960  000901      hFonts[37] := file_LoadImageControl("RepRap_T.d04", "RepRap_T.g04", 1)  ;
015961  000902      hFonts[49] := file_LoadImageControl("RepRap_T.d0C", "RepRap_T.g0C", 1)  ;
015962  000903      hFonts[51] := FONT3 ;
015963  000904      hFonts[52] := FONT3 ;
015964  000905      hFonts[7] := hFonts[37] ;
015965  000906      hFonts[8] := hFonts[37] ;
015966  000907      hFonts[9] := hFonts[0] ;
015967  000908      hFonts[10] := hFonts[11] ;
015968  000909      hFonts[17] := hFonts[11] ;
015969  000910      hFonts[18] := hFonts[11] ;
015970  000911      hFonts[22] := hFonts[11] ;
015971  000912      hFonts[26] := hFonts[25] ;
015972  000913      hFonts[27] := hFonts[25] ;
015973  000914      hFonts[29] := hFonts[11] ;
015974  000915      hFonts[32] := hFonts[31] ;
015975  000916      hFonts[34] := hFonts[0] ;
015976  000917      hFonts[36] := hFonts[0] ;
015977  000918      hFonts[38] := hFonts[37] ;
015978  000919      hFonts[39] := hFonts[37] ;
015979  000920      hFonts[40] := hFonts[0] ;
015980  000921      hFonts[41] := hFonts[0] ;
015981  000922      hFonts[42] := hFonts[0] ;
015982  000923      hFonts[43] := hFonts[37] ;
015983  000924      hFonts[44] := hFonts[37] ;
015984  000925      hFonts[45] := hFonts[37] ;
015985  000926      hFonts[46] := hFonts[13] ;
015986  000927      hFonts[47] := hFonts[13] ;
015987  000928      hFonts[48] := hFonts[13] ;
015988  000929      hFonts[50] := hFonts[11] ;
015989  000930      hFonts[53] := hFonts[11] ;
015990  000931  // Start P4.inc
015991  000932      hstrings := file_Open("RepRap_T.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
015992  000933      // init comms
015993  000934      com_Init(comRX,CMDLenMAX,0);
015994  000935      com_SetBaud(COM0,19886);
015995  000936      com_TXbuffer(comTX, 100, 0);
015996  000937      snd_BufSize(2) ;
015997  000938      // tag 'real' objects
015998  000939      for (i := 0; i <= MaxTotObjects; i++)
015999  000940          if (   (i != tSounds)
016000  000941              && (i != tTimer)
016001  000942              && (i != tPinOutput)
016002  000943              && (i != tPinInput) )
016003  000944              TouchXpos := oObjects[i] ;
016004  000945              TouchYpos := *(TouchXpos) ;
016005  000946              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
016006  000947                  oldn := *(TouchXpos+ImageTouched*2) ;
016007  000948                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
016008  000949                  if (oldn != -1)
016009  000950                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
016010  000951                      img_Disable(hndl, oldn) ;
016011  000952                  endif
016012  000953              next
016013  000954          endif
016014  000955      next
016015  000956        
016016  000957      // display initial form
016017  000958      CurrentForm := -1 ;
016018  000959      ActivateForm(0) ; // need to change this according to first actual form
016019  000960        
016020  000961  // End P4.inc
016021  000962  // Start P5.inc
016022  000963      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
016023  000964      oldn := -1 ;
016024  000965      repeat
016025  000966        
016026  000967          // check comms for command, how to NAK invalid command
016027  000968          if (com_Count() != 0)
016028  000969              i := serin() ;
016029  000970              InputCS ^= i ;               // update checksum
016030  000971              if (   (cmdi > 2)
016031  000972                  && (cmd[0] == WRITE_STRU) )
016032  000973                  j := (cmdi-1) >> 1 + 2 ;
016033  000974                  if (j == CMDLenMAX)    // max length exceeded
016034  000975                      nak0() ;
016035  000976                      cmdi := -1 ;
016036  000977                  else if (cmdi & 1)
016037  000978                      cmd[j] := i ;
016038  000979                      if (cmd[2] == 0)    // if string complete
016039  000980                          if (InputCS)
016040  000981                              nak0() ;
016041  000982                          else
016042  000983                              if (cmd[0] == WRITE_STRU)
016043  000984                              cmd[j] := 0 ;                     // terminate it
016044  000985                              PrintStrings(cmd[1], &cmd[3], 1) ;
016045  000986                              serout(ACK) ;
016046  000987                              else
016047  000988                              endif
016048  000989                          endif
016049  000990                          cmdi := -1 ;
016050  000991                      endif
016051  000992                  else
016052  000993                      cmd[j] := cmd[j] << 8 + i ;
016053  000994                      cmd[2]-- ;          // dec length
016054  000995                  endif
016055  000996                  cmdi++ ;
016056  000997              else // not unicode string
016057  000998                  cmd[cmdi++] := i ;
016058  000999                   if (cmd[0] == WRITE_STR)                  // Ansi String
016059  001000                      if (cmdi == CMDLenMAX)      // max length exceeded
016060  001001                          nak0() ;
016061  001002                          cmdi := 0 ;
016062  001003                      else if (cmdi > 2)
016063  001004                          if (cmd[2] == -1)
016064  001005                              if (InputCS)
016065  001006                                  nak0() ;
016066  001007                              else
016067  001008                                  if (cmd[0] == WRITE_STR)
016068  001009                                  cmd[cmdi-1] := 0 ;                     // terminate it
016069  001010                                  PrintStrings(cmd[1], &cmd[3], 1) ;
016070  001011                                  serout(ACK) ;
016071  001012                                  else
016072  001013                                  endif
016073  001014                              endif
016074  001015                              cmdi := 0 ;
016075  001016                          else
016076  001017                              cmd[2]-- ;          // dec length
016077  001018                          endif
016078  001019                      endif
016079  001020                  else if (   (cmd[0] == READ_OBJ)
016080  001021                           && (cmdi == 4)         )
016081  001022                      if (InputCS)
016082  001023                          nak0() ;
016083  001024                      else
016084  001025                          ReadObject(cmd[1], cmd[2]) ;
016085  001026                      endif
016086  001027                      cmdi := 0 ;
016087  001028                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
016088  001029                           && (cmdi == 6)          )
016089  001030                      if (InputCS)
016090  001031                          nak0() ;
016091  001032                      else
016092  001033                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
016093  001034                          serout(ACK) ;
016094  001035                      endif
016095  001036                      cmdi := 0 ;
016096  001037                  else if (   (cmd[0] == WRITE_CONTRAST)
016097  001038                           && (cmdi == 3)         )
016098  001039                      if (InputCS)
016099  001040                          nak0() ;
016100  001041                      else
016101  001042                          gfx_Contrast(cmd[1]) ;
016102  001043                          serout(ACK) ;
016103  001044                      endif
016104  001045                      cmdi := 0 ;
016105  001046                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
016106  001047                      nak0() ;
016107  001048                      cmdi := 0 ;
016108  001049                  endif
016109  001050              endif   // not unicode string
016110  001051          endif   // a character is available
016111  001052        
016112  001053        
016113  001054      // touch code processing
016114  001055        
016115  001056          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
016116  001057          ImageTouched := img_Touched(hndl,-1) ;
016117  001058          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
016118  001059              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
016119  001060                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
016120  001061              endif
016121  001062              if (TouchStatus != TOUCH_RELEASED)        // if not released
016122  001063                  if (oldn != -1)
016123  001064                      ImageTouched := oldn ;
016124  001065                  else
016125  001066                      if (oldn != ImageTouched)
016126  001067                  oldn := ImageTouched ;
016127  001068                          TouchStatus := TOUCH_PRESSED ;
016128  001069                      endif
016129  001070                  endif
016130  001071                  TouchXpos  := touch_Get(TOUCH_GETX);
016131  001072                  TouchYpos  := touch_Get(TOUCH_GETY);
016132  001073                  TouchState := Ofs_IPD_DOWN ;
016133  001074              else
016134  001075                  ImageTouched := oldn ;                     // simulate release of what we touched
016135  001076                  oldn := -1 ;                    // prevent double release
016136  001077                  TouchState := Ofs_IPD_RELEASE ;
016137  001078              endif
016138  001079              if (ImageTouched != -1)
016139  001080                          CurInputData := InputControls[ImageTouched] + InputData;
016140  001081                          InputType := *(CurInputData) ;
016141  001082                          i := InputType ;
016142  001083                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
016143  001084                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
016144  001085              endif
016145  001086          endif
016146  001087   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
016147  001088        
016148  001089          sys_EventsResume() ;
016149  001090      forever
016150  001091        
016151  001092  cDipswitch:
016152  001093        
016153  001094  cKnob:
016154  001095        
016155  001096  cRockerswitch:
016156  001097        
016157  001098  cRotaryswitch:
016158  001099        
016159  001100  cSlider:
016160  001101  cTrackbar:
016161  001102        
016162  001103  c4DButton:
016163  001104  cUserButton:
016164  001105      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
016165  001106      goto gbutton ;
016166  001107  cWinbutton:
016167  001108      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
016168  001109  gbutton:
016169  001110      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
016170  001111      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
016171  001112          if (TouchStatus == TOUCH_RELEASED)
016172  001113              i &= 0xfffe ;
016173  001114              TouchState == Ofs_IPD_DOWN ;
016174  001115          else
016175  001116              i |= 1 ;
016176  001117              TouchState == Ofs_IPD_RELEASE ;
016177  001118          endif
016178  001119      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
016179  001120          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
016180  001121              if ((i & 3) == 3)
016181  001122                  i &= 0xfffc ;
016182  001123              else
016183  001124                  i++ ;
016184  001125              endif
016185  001126          else
016186  001127              i |= 1 ;                                      // make down regardless of current state
016187  001128          endif
016188  001129      else                        // group action, up all other buttons on touch press, reports 0 for button down
016189  001130          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
016190  001131              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
016191  001132          endif
016192  001133          i := (i & 0xfffc) | 2 ;
016193  001134      endif
016194  001135        
016195  001136      UpdateObjects(i) ;
016196  001137  endsub ;
016197  001138        
016198  001139  cAniButton:
016199  001140        
016200  001141  cColorPicker:
016201  001142        
016202  001143  endfunc
016203  001144  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 782 file:RepRap_Touchv1.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 718 file:RepRap_Touchv1.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       13159  0x00003367 (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 132)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (usage 3)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  382  0x0000017e (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 108)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                302  0x0000012e (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         298  0x0000012a (mem) word (global)  (usage 27)
CurrentForm                          288  0x00000120 (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (usage 3)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (usage 18)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       12527  0x000030ef (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 42)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (usage 36)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                        9795  0x00002643FormBGcolors                        9795  0x00002643 (mem) word[43] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                          93  0x0000005dFormEndIndex                          93  0x0000005d (mem) word[43] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[43] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[54] (global)  (usage 234)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             218  0x000000da (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm0                                 0  0x00000000 (const ??? 0)  (usage 3)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                              112  0x00000070 (const ??? 0)  (usage 3)
iForm11                               99  0x00000063 (const ??? 0)  (usage 3)
iForm12                               49  0x00000031 (const ??? 0)  (usage 3)
iForm14                               56  0x00000038 (const ??? 0)  (usage 3)
iForm16                              178  0x000000b2 (const ??? 0)  (usage 3)
iForm17                              182  0x000000b6 (const ??? 0)  (usage 3)
iForm18                              185  0x000000b9 (const ??? 0)  (usage 3)
iForm19                               67  0x00000043 (const ??? 0)  (usage 3)
iForm2                                 4  0x00000004 (const ??? 0)  (usage 3)
iForm20                               71  0x00000047 (const ??? 0)  (usage 3)
iForm21                               77  0x0000004d (const ??? 0)  (usage 3)
iForm23                               86  0x00000056 (const ??? 0)  (usage 3)
iForm24                               92  0x0000005c (const ??? 0)  (usage 3)
iForm25                              188  0x000000bc (const ??? 0)  (usage 3)
iForm26                               95  0x0000005f (const ??? 0)  (usage 3)
iForm27                              100  0x00000064 (const ??? 0)  (usage 3)
iForm28                              122  0x0000007a (const ??? 0)  (usage 3)
iForm29                              127  0x0000007f (const ??? 0)  (usage 3)
iForm30                              136  0x00000088 (const ??? 0)  (usage 3)
iForm31                              140  0x0000008c (const ??? 0)  (usage 3)
iForm32                              144  0x00000090 (const ??? 0)  (usage 3)
iForm33                              148  0x00000094 (const ??? 0)  (usage 3)
iForm34                              160  0x000000a0 (const ??? 0)  (usage 3)
iForm35                              167  0x000000a7 (const ??? 0)  (usage 3)
iForm38                              192  0x000000c0 (const ??? 0)  (usage 3)
iForm4                                10  0x0000000a (const ??? 0)  (usage 3)
iForm40                              203  0x000000cb (const ??? 0)  (usage 3)
iForm41                              228  0x000000e4 (const ??? 0)  (usage 3)
iForm5                                16  0x00000010 (const ??? 0)  (usage 3)
iForm6                                19  0x00000013 (const ??? 0)  (usage 3)
iForm7                               174  0x000000ae (const ??? 0)  (usage 3)
iForm9                                45  0x0000002d (const ??? 0)  (usage 3)
iiLeddigits0                          34  0x00000022 (const ??? 0)  (not used)
iiLeddigits1                          36  0x00000024 (const ??? 0)  (not used)
iiLeddigits2                          38  0x00000026 (const ??? 0)  (not used)
iImage0                              179  0x000000b3 (const ??? 0)  (usage 3)
iLeddigits0                           33  0x00000021 (const ??? 0)  (usage 3)
iLeddigits1                           35  0x00000023 (const ??? 0)  (usage 3)
iLeddigits2                           37  0x00000025 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        179  0x000000b3InputControls                        179  0x000000b3 (mem) word[230] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
InputCS                              542  0x0000021e (mem) word (global)  (usage 21)
InputData                            639  0x0000027fInputData                            639  0x0000027f (mem) word[3586] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 30)
InputType                            294  0x00000126 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                          93  0x0000005d (const ??? 0)  (usage 3)
iStatictext1                          39  0x00000027 (const ??? 0)  (usage 3)
iStatictext10                         60  0x0000003c (const ??? 0)  (usage 3)
iStatictext11                         75  0x0000004b (const ??? 0)  (usage 3)
iStatictext12                         76  0x0000004c (const ??? 0)  (usage 3)
iStatictext13                         90  0x0000005a (const ??? 0)  (usage 3)
iStatictext14                         91  0x0000005b (const ??? 0)  (usage 3)
iStatictext15                        101  0x00000065 (const ??? 0)  (usage 3)
iStatictext16                         23  0x00000017 (const ??? 0)  (usage 3)
iStatictext17                         24  0x00000018 (const ??? 0)  (usage 3)
iStatictext18                        171  0x000000ab (const ??? 0)  (usage 3)
iStatictext2                          40  0x00000028 (const ??? 0)  (usage 3)
iStatictext3                         149  0x00000095 (const ??? 0)  (usage 3)
iStatictext4                          41  0x00000029 (const ??? 0)  (usage 3)
iStatictext5                         161  0x000000a1 (const ??? 0)  (usage 3)
iStatictext6                         165  0x000000a5 (const ??? 0)  (usage 3)
iStatictext7                         172  0x000000ac (const ??? 0)  (usage 3)
iStatictext8                          79  0x0000004f (const ??? 0)  (usage 3)
iStrings0                           7811  0x00001e83iStrings0                           7811  0x00001e83 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings1                           7837  0x00001e9diStrings1                           7837  0x00001e9d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings10                          8045  0x00001f6diStrings10                          8045  0x00001f6d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings11                          8071  0x00001f87iStrings11                          8071  0x00001f87 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings12                          8097  0x00001fa1iStrings12                          8097  0x00001fa1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings13                          8123  0x00001fbbiStrings13                          8123  0x00001fbb (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings14                          8149  0x00001fd5iStrings14                          8149  0x00001fd5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings15                          8175  0x00001fefiStrings15                          8175  0x00001fef (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings16                          8201  0x00002009iStrings16                          8201  0x00002009 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings17                          8227  0x00002023iStrings17                          8227  0x00002023 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings18                          8253  0x0000203diStrings18                          8253  0x0000203d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings19                          8279  0x00002057iStrings19                          8279  0x00002057 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings2                           7863  0x00001eb7iStrings2                           7863  0x00001eb7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings21                          8305  0x00002071iStrings21                          8305  0x00002071 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings22                          8331  0x0000208biStrings22                          8331  0x0000208b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings24                          8357  0x000020a5iStrings24                          8357  0x000020a5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings25                          8383  0x000020bfiStrings25                          8383  0x000020bf (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings26                          8409  0x000020d9iStrings26                          8409  0x000020d9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings27                          8435  0x000020f3iStrings27                          8435  0x000020f3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings28                          8461  0x0000210diStrings28                          8461  0x0000210d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings29                          8487  0x00002127iStrings29                          8487  0x00002127 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings3                           7889  0x00001ed1iStrings3                           7889  0x00001ed1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings30                          8513  0x00002141iStrings30                          8513  0x00002141 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings31                          8539  0x0000215biStrings31                          8539  0x0000215b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings32                          8565  0x00002175iStrings32                          8565  0x00002175 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings33                          8591  0x0000218fiStrings33                          8591  0x0000218f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings34                          8617  0x000021a9iStrings34                          8617  0x000021a9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings35                          8643  0x000021c3iStrings35                          8643  0x000021c3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings36                          8669  0x000021ddiStrings36                          8669  0x000021dd (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings37                          8695  0x000021f7iStrings37                          8695  0x000021f7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings38                          8721  0x00002211iStrings38                          8721  0x00002211 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings39                          8747  0x0000222biStrings39                          8747  0x0000222b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings4                           7915  0x00001eebiStrings4                           7915  0x00001eeb (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings40                          8773  0x00002245iStrings40                          8773  0x00002245 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings41                          8799  0x0000225fiStrings41                          8799  0x0000225f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings42                          8825  0x00002279iStrings42                          8825  0x00002279 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings43                          8851  0x00002293iStrings43                          8851  0x00002293 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings44                          8877  0x000022adiStrings44                          8877  0x000022ad (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings45                          8903  0x000022c7iStrings45                          8903  0x000022c7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings46                          8929  0x000022e1iStrings46                          8929  0x000022e1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings47                          8955  0x000022fbiStrings47                          8955  0x000022fb (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings48                          8981  0x00002315iStrings48                          8981  0x00002315 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings49                          9007  0x0000232fiStrings49                          9007  0x0000232f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings50                          9033  0x00002349iStrings50                          9033  0x00002349 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings51                          9059  0x00002363iStrings51                          9059  0x00002363 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings52                          9085  0x0000237diStrings52                          9085  0x0000237d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings53                          9111  0x00002397iStrings53                          9111  0x00002397 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings6                           7941  0x00001f05iStrings6                           7941  0x00001f05 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings7                           7967  0x00001f1fiStrings7                           7967  0x00001f1f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings8                           7993  0x00001f39iStrings8                           7993  0x00001f39 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings9                           8019  0x00001f53iStrings9                           8019  0x00001f53 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                         15  0x0000000f (const ??? 0)  (usage 3)
iUserbutton100                       110  0x0000006e (const ??? 0)  (usage 3)
iUserbutton101                       111  0x0000006f (const ??? 0)  (usage 3)
iUserbutton102                       150  0x00000096 (const ??? 0)  (usage 3)
iUserbutton103                       151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton104                       152  0x00000098 (const ??? 0)  (usage 3)
iUserbutton105                       153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton106                       154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton107                       155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton108                       156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton109                       157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton11                        123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton110                       158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton111                       159  0x0000009f (const ??? 0)  (usage 3)
iUserbutton112                       162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton113                       163  0x000000a3 (const ??? 0)  (usage 3)
iUserbutton114                       164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton115                       168  0x000000a8 (const ??? 0)  (usage 3)
iUserbutton116                       169  0x000000a9 (const ??? 0)  (usage 3)
iUserbutton117                       170  0x000000aa (const ??? 0)  (usage 3)
iUserbutton118                        89  0x00000059 (const ??? 0)  (usage 3)
iUserbutton119                       205  0x000000cd (const ??? 0)  (usage 3)
iUserbutton12                         17  0x00000011 (const ??? 0)  (usage 3)
iUserbutton120                       196  0x000000c4 (const ??? 0)  (usage 3)
iUserbutton121                       197  0x000000c5 (const ??? 0)  (usage 3)
iUserbutton122                       198  0x000000c6 (const ??? 0)  (usage 3)
iUserbutton123                       199  0x000000c7 (const ??? 0)  (usage 3)
iUserbutton124                       200  0x000000c8 (const ??? 0)  (usage 3)
iUserbutton125                       201  0x000000c9 (const ??? 0)  (usage 3)
iUserbutton126                       202  0x000000ca (const ??? 0)  (usage 3)
iUserbutton127                       206  0x000000ce (const ??? 0)  (usage 3)
iUserbutton128                       207  0x000000cf (const ??? 0)  (usage 3)
iUserbutton129                       208  0x000000d0 (const ??? 0)  (usage 3)
iUserbutton13                         18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton130                       209  0x000000d1 (const ??? 0)  (usage 3)
iUserbutton131                       210  0x000000d2 (const ??? 0)  (usage 3)
iUserbutton132                       211  0x000000d3 (const ??? 0)  (usage 3)
iUserbutton133                       212  0x000000d4 (const ??? 0)  (usage 3)
iUserbutton134                       204  0x000000cc (const ??? 0)  (usage 3)
iUserbutton135                       213  0x000000d5 (const ??? 0)  (usage 3)
iUserbutton136                       214  0x000000d6 (const ??? 0)  (usage 3)
iUserbutton137                       216  0x000000d8 (const ??? 0)  (usage 3)
iUserbutton138                       217  0x000000d9 (const ??? 0)  (usage 3)
iUserbutton139                       218  0x000000da (const ??? 0)  (usage 3)
iUserbutton14                          7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton140                       219  0x000000db (const ??? 0)  (usage 3)
iUserbutton141                       220  0x000000dc (const ??? 0)  (usage 3)
iUserbutton142                       221  0x000000dd (const ??? 0)  (usage 3)
iUserbutton143                       222  0x000000de (const ??? 0)  (usage 3)
iUserbutton144                       223  0x000000df (const ??? 0)  (usage 3)
iUserbutton145                       224  0x000000e0 (const ??? 0)  (usage 3)
iUserbutton146                       225  0x000000e1 (const ??? 0)  (usage 3)
iUserbutton147                       226  0x000000e2 (const ??? 0)  (usage 3)
iUserbutton149                       215  0x000000d7 (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton150                       227  0x000000e3 (const ??? 0)  (usage 3)
iUserbutton16                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton17                         57  0x00000039 (const ??? 0)  (usage 3)
iUserbutton18                         46  0x0000002e (const ??? 0)  (usage 3)
iUserbutton19                         47  0x0000002f (const ??? 0)  (usage 3)
iUserbutton2                          21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton20                         98  0x00000062 (const ??? 0)  (usage 3)
iUserbutton21                        102  0x00000066 (const ??? 0)  (usage 3)
iUserbutton22                        103  0x00000067 (const ??? 0)  (usage 3)
iUserbutton23                        113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton24                        114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton25                        115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton26                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton27                         51  0x00000033 (const ??? 0)  (usage 3)
iUserbutton28                         52  0x00000034 (const ??? 0)  (usage 3)
iUserbutton29                         53  0x00000035 (const ??? 0)  (usage 3)
iUserbutton3                          32  0x00000020 (const ??? 0)  (usage 3)
iUserbutton30                         54  0x00000036 (const ??? 0)  (usage 3)
iUserbutton31                         55  0x00000037 (const ??? 0)  (usage 3)
iUserbutton32                         58  0x0000003a (const ??? 0)  (usage 3)
iUserbutton33                         59  0x0000003b (const ??? 0)  (usage 3)
iUserbutton34                        176  0x000000b0 (const ??? 0)  (usage 3)
iUserbutton35                         61  0x0000003d (const ??? 0)  (usage 3)
iUserbutton36                         62  0x0000003e (const ??? 0)  (usage 3)
iUserbutton37                         63  0x0000003f (const ??? 0)  (usage 3)
iUserbutton38                         66  0x00000042 (const ??? 0)  (usage 3)
iUserbutton39                         64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton4                           5  0x00000005 (const ??? 0)  (usage 3)
iUserbutton40                         65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton41                        180  0x000000b4 (const ??? 0)  (usage 3)
iUserbutton42                        181  0x000000b5 (const ??? 0)  (usage 3)
iUserbutton43                        183  0x000000b7 (const ??? 0)  (usage 3)
iUserbutton44                        184  0x000000b8 (const ??? 0)  (usage 3)
iUserbutton45                        186  0x000000ba (const ??? 0)  (usage 3)
iUserbutton46                        187  0x000000bb (const ??? 0)  (usage 3)
iUserbutton47                        189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton48                        190  0x000000be (const ??? 0)  (usage 3)
iUserbutton49                        177  0x000000b1 (const ??? 0)  (usage 3)
iUserbutton5                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton50                         22  0x00000016 (const ??? 0)  (usage 3)
iUserbutton51                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton52                         69  0x00000045 (const ??? 0)  (usage 3)
iUserbutton53                         78  0x0000004e (const ??? 0)  (usage 3)
iUserbutton54                         70  0x00000046 (const ??? 0)  (usage 3)
iUserbutton55                         80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton56                         81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton57                         82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton58                         83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton59                         84  0x00000054 (const ??? 0)  (usage 3)
iUserbutton6                          11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton60                         85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        191  0x000000bf (const ??? 0)  (usage 3)
iUserbutton63                         42  0x0000002a (const ??? 0)  (usage 3)
iUserbutton64                        193  0x000000c1 (const ??? 0)  (usage 3)
iUserbutton65                        194  0x000000c2 (const ??? 0)  (usage 3)
iUserbutton66                         87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton67                        229  0x000000e5 (const ??? 0)  (usage 3)
iUserbutton68                         88  0x00000058 (const ??? 0)  (usage 3)
iUserbutton69                         94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton7                          12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton70                        195  0x000000c3 (const ??? 0)  (usage 3)
iUserbutton71                         96  0x00000060 (const ??? 0)  (usage 3)
iUserbutton72                        105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton73                        116  0x00000074 (const ??? 0)  (usage 3)
iUserbutton74                         97  0x00000061 (const ??? 0)  (usage 3)
iUserbutton75                         72  0x00000048 (const ??? 0)  (usage 3)
iUserbutton76                         73  0x00000049 (const ??? 0)  (usage 3)
iUserbutton77                         74  0x0000004a (const ??? 0)  (usage 3)
iUserbutton78                        117  0x00000075 (const ??? 0)  (usage 3)
iUserbutton79                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton8                          13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton80                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton81                        120  0x00000078 (const ??? 0)  (usage 3)
iUserbutton82                        121  0x00000079 (const ??? 0)  (usage 3)
iUserbutton83                        124  0x0000007c (const ??? 0)  (usage 3)
iUserbutton84                        128  0x00000080 (const ??? 0)  (usage 3)
iUserbutton85                        129  0x00000081 (const ??? 0)  (usage 3)
iUserbutton86                        130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton87                        131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton88                        132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton89                        133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton9                          14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton90                        134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton91                        135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton92                        126  0x0000007e (const ??? 0)  (usage 3)
iUserbutton93                        138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton94                        141  0x0000008d (const ??? 0)  (usage 3)
iUserbutton95                        146  0x00000092 (const ??? 0)  (usage 3)
iUserbutton96                        106  0x0000006a (const ??? 0)  (usage 3)
iUserbutton97                        107  0x0000006b (const ??? 0)  (usage 3)
iUserbutton98                        108  0x0000006c (const ??? 0)  (usage 3)
iUserbutton99                        109  0x0000006d (const ??? 0)  (usage 3)
iUserimages0                         125  0x0000007d (const ??? 0)  (usage 3)
iUserimages1                          68  0x00000044 (const ??? 0)  (usage 3)
iUserimages11                        230  0x000000e6 (const ??? 0)  (usage 3)
iUserimages13                        166  0x000000a6 (const ??? 0)  (usage 3)
iUserimages2                         173  0x000000ad (const ??? 0)  (usage 3)
iUserimages3                         137  0x00000089 (const ??? 0)  (usage 3)
iUserimages4                         142  0x0000008e (const ??? 0)  (usage 3)
iUserimages5                         145  0x00000091 (const ??? 0)  (usage 3)
iUserimages6                         175  0x000000af (const ??? 0)  (usage 3)
iUserimages7                         139  0x0000008b (const ??? 0)  (usage 3)
iUserimages8                         143  0x0000008f (const ??? 0)  (usage 3)
iUserimages9                         147  0x00000093 (const ??? 0)  (usage 3)
iVideo0                                9  0x00000009 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                           25  0x00000019 (const ??? 0)  (usage 3)
iWinbutton1                           26  0x0000001a (const ??? 0)  (usage 3)
iWinbutton2                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton3                           28  0x0000001c (const ??? 0)  (usage 3)
iWinbutton4                           29  0x0000001d (const ??? 0)  (usage 3)
iWinbutton5                           43  0x0000002b (const ??? 0)  (usage 3)
iWinbutton6                           44  0x0000002c (const ??? 0)  (usage 3)
iWinbutton7                           30  0x0000001e (const ??? 0)  (usage 3)
iWinbutton8                           31  0x0000001f (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 9881  0x00002699kKeyboardKeystrokes                 9881  0x00002699 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   13505  0x000034c1 (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                               10473  0x000028e9 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               14627  0x00003923 (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              326  0x00000146 (const dword)  (usage 3)
nObjects                             231  0x000000e7 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              54  0x00000036 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                          9479  0x00002507o4Dbuttons                          9479  0x00002507 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAngularmeters                      9169  0x000023d1oAngularmeters                      9169  0x000023d1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAniButtons                         9481  0x00002509oAniButtons                         9481  0x00002509 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       9483  0x0000250boColorPickers                       9483  0x0000250b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCoolgauges                         9171  0x000023d3oCoolgauges                         9171  0x000023d3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCustomdigitss                      9173  0x000023d5oCustomdigitss                      9173  0x000023d5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oDipSwitchs                         9137  0x000023b1oDipSwitchs                         9137  0x000023b1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              9175  0x000023d7oForms                              9175  0x000023d7 (mem) word[44] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 15)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                             9263  0x0000242foGauges                             9263  0x0000242f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGSliders                           9145  0x000023b9oGSliders                           9145  0x000023b9 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oImages                             9265  0x00002431oImages                             9265  0x00002431 (mem) word[2] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKeyboards                          9269  0x00002435oKeyboards                          9269  0x00002435 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKnobs                              9139  0x000023b3oKnobs                              9139  0x000023b3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLedDigitsn                         9885  0x0000269doLedDigitsn                         9885  0x0000269d (mem) word[15] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
oLeddigitss                         9273  0x00002439oLeddigitss                         9273  0x00002439 (mem) word[4] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
oLeds                               9271  0x00002437oLeds                               9271  0x00002437 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             9281  0x00002441oMeters                             9281  0x00002441 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             220  0x000000dc (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                          9477  0x00002505oPinInputs                          9477  0x00002505 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oPinOutputs                         9793  0x00002641oPinOutputs                         9793  0x00002641 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      9141  0x000023b5oRockerSwitchs                      9141  0x000023b5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oRotarySwitchs                      9143  0x000023b7oRotarySwitchs                      9143  0x000023b7 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oScopes                             9443  0x000024e3oScopes                             9443  0x000024e3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
oSoundss                            9791  0x0000263foSoundss                            9791  0x0000263f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oSpectrums                          9441  0x000024e1oSpectrums                          9441  0x000024e1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStaticTexts                        9401  0x000024b9oStaticTexts                        9401  0x000024b9 (mem) word[20] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStringss                           9283  0x00002443oStringss                           9283  0x00002443 (mem) word[55] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 84)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 423)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              9445  0x000024e5oTanks                              9445  0x000024e5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oThermometers                       9393  0x000024b1oThermometers                       9393  0x000024b1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTimers                             9789  0x0000263doTimers                             9789  0x0000263d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTrackbars                          9147  0x000023bboTrackbars                          9147  0x000023bb (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserButtons                        9485  0x0000250doUserButtons                        9485  0x0000250d (mem) word[152] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
oUserImagess                        9447  0x000024e7oUserImagess                        9447  0x000024e7 (mem) word[15] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserleds                           9395  0x000024b3oUserleds                           9395  0x000024b3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             544  0x00000220 (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                             9397  0x000024b5oVideos                             9397  0x000024b5 (mem) word[2] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                         9149  0x000023bdoWinButtons                         9149  0x000023bd (mem) word[10] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          300  0x0000012c (mem) word (global)  (usage 18)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       14662  0x00003946 (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         14374  0x00003826 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                   9883  0x0000269brKeyboardRoutines                   9883  0x0000269b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         14560  0x000038e0 (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           14643  0x00003933 (User func) args[1] r=0  (usage 15)
seroutOcs                          14610  0x00003912 (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           7  0x00000007 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      2560  0x00000a00 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                         14  0x0000000e (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         31  0x0000001f (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         14  0x0000000e (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                          3  0x00000003 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                    23552  0x00005c00 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                         23  0x00000017 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                         24  0x00000018 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                     6656  0x00001a00 (const dword)  (usage 3)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings17Count                         1  0x00000001 (const dword)  (not used)
Strings17Size                         56  0x00000038 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                    18944  0x00004a00 (const dword)  (usage 3)
Strings18Count                         1  0x00000001 (const dword)  (not used)
Strings18Size                         39  0x00000027 (const dword)  (usage 3)
Strings18StartH                        0  0x00000000 (const dword)  (usage 3)
Strings18StartL                    19456  0x00004c00 (const dword)  (usage 3)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                         43  0x0000002b (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                    19968  0x00004e00 (const dword)  (usage 3)
Strings1Count                          0  0x00000000 (const dword)  (not used)
Strings1Size                           1  0x00000001 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                         0  0x00000000 (const dword)  (usage 3)
Strings20Size                          0  0x00000000 (const dword)  (not used)
Strings20StartH                        0  0x00000000 (const dword)  (not used)
Strings20StartL                        0  0x00000000 (const dword)  (not used)
Strings21Count                         1  0x00000001 (const dword)  (not used)
Strings21Size                         35  0x00000023 (const dword)  (usage 3)
Strings21StartH                        0  0x00000000 (const dword)  (usage 3)
Strings21StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings22Count                         1  0x00000001 (const dword)  (not used)
Strings22Size                         20  0x00000014 (const dword)  (usage 3)
Strings22StartH                        0  0x00000000 (const dword)  (usage 3)
Strings22StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings23Size                          0  0x00000000 (const dword)  (not used)
Strings23StartH                        0  0x00000000 (const dword)  (not used)
Strings23StartL                        0  0x00000000 (const dword)  (not used)
Strings24Count                         1  0x00000001 (const dword)  (not used)
Strings24Size                         26  0x0000001a (const dword)  (usage 3)
Strings24StartH                        0  0x00000000 (const dword)  (usage 3)
Strings24StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings25Count                         1  0x00000001 (const dword)  (not used)
Strings25Size                         10  0x0000000a (const dword)  (usage 3)
Strings25StartH                        0  0x00000000 (const dword)  (usage 3)
Strings25StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings26Count                         1  0x00000001 (const dword)  (not used)
Strings26Size                         10  0x0000000a (const dword)  (usage 3)
Strings26StartH                        0  0x00000000 (const dword)  (usage 3)
Strings26StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings27Count                         1  0x00000001 (const dword)  (not used)
Strings27Size                         11  0x0000000b (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings28Count                         1  0x00000001 (const dword)  (not used)
Strings28Size                         40  0x00000028 (const dword)  (usage 3)
Strings28StartH                        0  0x00000000 (const dword)  (usage 3)
Strings28StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                         64  0x00000040 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    20480  0x00005000 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      2048  0x00000800 (const dword)  (usage 3)
Strings30Count                         1  0x00000001 (const dword)  (not used)
Strings30Size                         42  0x0000002a (const dword)  (usage 3)
Strings30StartH                        0  0x00000000 (const dword)  (usage 3)
Strings30StartL                    20992  0x00005200 (const dword)  (usage 3)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          7  0x00000007 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    21504  0x00005400 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                         19  0x00000013 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    22016  0x00005600 (const dword)  (usage 3)
Strings33Count                         1  0x00000001 (const dword)  (not used)
Strings33Size                         32  0x00000020 (const dword)  (usage 3)
Strings33StartH                        0  0x00000000 (const dword)  (usage 3)
Strings33StartL                    11776  0x00002e00 (const dword)  (usage 3)
Strings34Count                         0  0x00000000 (const dword)  (not used)
Strings34Size                          1  0x00000001 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     3584  0x00000e00 (const dword)  (usage 3)
Strings35Count                         1  0x00000001 (const dword)  (not used)
Strings35Size                         36  0x00000024 (const dword)  (usage 3)
Strings35StartH                        0  0x00000000 (const dword)  (usage 3)
Strings35StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings36Count                         0  0x00000000 (const dword)  (not used)
Strings36Size                          1  0x00000001 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings37Count                         0  0x00000000 (const dword)  (not used)
Strings37Size                          1  0x00000001 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings38Count                         0  0x00000000 (const dword)  (not used)
Strings38Size                          1  0x00000001 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                    14336  0x00003800 (const dword)  (usage 3)
Strings3Count                          1  0x00000001 (const dword)  (not used)
Strings3Size                          18  0x00000012 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                       512  0x00000200 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                          7  0x00000007 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                    14848  0x00003a00 (const dword)  (usage 3)
Strings41Count                         1  0x00000001 (const dword)  (not used)
Strings41Size                          7  0x00000007 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                    15360  0x00003c00 (const dword)  (usage 3)
Strings42Count                         1  0x00000001 (const dword)  (not used)
Strings42Size                          7  0x00000007 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    17408  0x00004400 (const dword)  (usage 3)
Strings46Count                         0  0x00000000 (const dword)  (not used)
Strings46Size                          1  0x00000001 (const dword)  (usage 3)
Strings46StartH                        0  0x00000000 (const dword)  (usage 3)
Strings46StartL                    24064  0x00005e00 (const dword)  (usage 3)
Strings47Count                         1  0x00000001 (const dword)  (not used)
Strings47Size                          3  0x00000003 (const dword)  (usage 3)
Strings47StartH                        0  0x00000000 (const dword)  (usage 3)
Strings47StartL                    24576  0x00006000 (const dword)  (usage 3)
Strings48Count                         0  0x00000000 (const dword)  (not used)
Strings48Size                          1  0x00000001 (const dword)  (usage 3)
Strings48StartH                        0  0x00000000 (const dword)  (usage 3)
Strings48StartL                    25088  0x00006200 (const dword)  (usage 3)
Strings49Count                         1  0x00000001 (const dword)  (not used)
Strings49Size                         17  0x00000011 (const dword)  (usage 3)
Strings49StartH                        0  0x00000000 (const dword)  (usage 3)
Strings49StartL                    22528  0x00005800 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings50Count                         1  0x00000001 (const dword)  (not used)
Strings50Size                         20  0x00000014 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    23040  0x00005a00 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    17920  0x00004600 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    18432  0x00004800 (const dword)  (usage 3)
Strings53Count                         0  0x00000000 (const dword)  (not used)
Strings53Size                          1  0x00000001 (const dword)  (usage 3)
Strings53StartH                        0  0x00000000 (const dword)  (usage 3)
Strings53StartL                    25600  0x00006400 (const dword)  (usage 3)
Strings5Size                           0  0x00000000 (const dword)  (not used)
Strings5StartH                         0  0x00000000 (const dword)  (not used)
Strings5StartL                         0  0x00000000 (const dword)  (not used)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          31  0x0000001f (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                     12800  0x00003200 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                     13312  0x00003400 (const dword)  (usage 3)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      3072  0x00000c00 (const dword)  (usage 3)
stringsCV                            110  0x0000006e (mem) word[54] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           296  0x00000128 (mem) word (global)  (usage 24)
TouchXpos                            290  0x00000122 (mem) word (global)  (usage 12)
TouchYpos                            292  0x00000124 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     13819  0x000035fb (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 465)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 45)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      12528  0x000030f0 (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS    2803  0x00000af3 (const ??? 0)  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 150)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        14019  0x000036c3 (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
