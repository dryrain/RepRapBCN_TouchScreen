file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318        
003998  004319  //------------------------------------------------------------------------------
003999  004320  // FILEIO Error Code Constants
004000  004321  //------------------------------------------------------------------------------
004001  004322  #CONST
004002  004348  #END
004003  004349        
004004  004350  //------------------------------------------------------------------------------
004005  004351  // DISK struct offsets
004006  004352  //------------------------------------------------------------------------------
004007  004353  #CONST
004008  004370  #END
004009  004371        
004010  004372  //------------------------------------------------------------------------------
004011  004373  // FILE struct offsets
004012  004374  //------------------------------------------------------------------------------
004013  004375  #CONST
004014  004394  #END
004015  004395        
004016  004396        
004017  004397  //------------------------------------------------------------------//
004018  004398  //        Sound Class Services
004019  004399  //------------------------------------------------------------------//
004020  004400        
004021  004401  func snd_Volume("var"), 0;
004022  004402  // Syntax: snd_Volume("var");
004023  004403  // Usage : snd_Volume(30);
004024  004404  // Notes : set sound playback volume.  Var must
004025  004405  //       : be in the range from 8 (min volume)
004026  004406  //       : to 127 (max volume). If var is less
004027  004407  //       : than 8 volume is set to 8, and if
004028  004408  //       : var > 127 it is set to 127.
004029  004409        
004030  004410  func snd_Pitch("pitch"), 1;
004031  004411  // func snd_Pitch("freq"), 1;
004032  004412  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004033  004413  // Notes : sets the samples playback rate to a different frequency
004034  004414  //       : The minimum value is 4khz
004035  004415  //       : Setting the pitch to zero restores the original sample rate
004036  004416  //       : Return value is the samples original sample rate.
004037  004417        
004038  004418  func snd_BufSize("var"), 0;
004039  004419  // Syntax: snd_BufSize("var");
004040  004420  // Usage : snd_BufSize(2);
004041  004421  // Notes : specify the a memory chunk size for the wavefile buffer.
004042  004422  //       : default size 1024 bytes.
004043  004423  //       : 0 = 1024 bytes (default)
004044  004424  //       : 1 = 2048 bytes
004045  004425  //       : 2 = 4096 bytes
004046  004426  //       : 3 = 8192 bytes
004047  004427        
004048  004428  func snd_Stop(), 0;
004049  004429  // Syntax: snd_Stop();
004050  004430  // Usage : snd_Stop();
004051  004431  // Notes : stop any sound that is playing, releasing
004052  004432  //       : buffers and closes any open wav file.
004053  004433        
004054  004434  func snd_Pause(), 0;
004055  004435  // Syntax: snd_Pause();
004056  004436  // Usage : snd_Pause();
004057  004437  // Notes : pauses any sound that is playing, does nothing
004058  004438  //       : until sound is resumed with snd_Continue().
004059  004439  //       : The sample cam be terminated with snd_Stop.
004060  004440  //       : buffers and closes any open wav file.
004061  004441        
004062  004442  func snd_Continue(), 0;
004063  004443  // Syntax: snd_Continue();
004064  004444  // Usage : snd_Continue();
004065  004445  // Notes : resume any sound that is paused by snd_Pause.
004066  004446        
004067  004447  func snd_Playing(), 1;
004068  004448  // Syntax: snd_Playing();
004069  004449  // Usage : r := snd_Playing();
004070  004450  // Notes : returns 0 if sound has finished playing,
004071  004451  //       : else return number of 512 byte blocks to go.
004072  004452        
004073  004453  func snd_Freq("Freq", "Duration"), 1;
004074  004454  // Syntax: snd_Freq("Freq", "Duration");
004075  004455  // Usage : r := snd_Freq(1000, 2000);
004076  004456  // Notes : Returns 0 if note cannot be played because a wav file is playing
004077  004457  //       : else return True.
004078  004458  //       : Minimum Freq is 20
004079  004459  //       : This will produce a pure Square wave and is designed for driving
004080  004460  //       : Piezo transducers which require this sort of drive. It can also be
004081  004461  //       : used to drive the amp on displays with audio.
004082  004462        
004083  004463        
004084  004464  func __reserved60(), 0; // do not remove
004085  004465  func __reserved61(), 0; // do not remove
004086  004466  func __reserved62(), 0; // do not remove
004087  004467        
004088  004468  //=========================================================================================================
004089  004469  // String functions
004090  004470  //=========================================================================================================
004091  004471        
004092  004472  func str_Ptr("&var"), 1;
004093  004473  // Syntax: str_Ptr(&var);
004094  004474  // Usage : p := str_Ptr(&var);
004095  004475  // Notes : return a byte pointer to a word region
004096  004476        
004097  004477  func str_GetD("&ptr", "&var"), 1;
004098  004478  // Syntax: str_GetD(&ptr, &var);
004099  004479  // Usage : ok := str_GetD(&ptr, &var);
004100  004480  // Notes : convert number in a string to DWORD ( myvar[2] )
004101  004481  //       : returns true if function succeeds, advancing ptr
004102  004482        
004103  004483  func str_GetW("&ptr", "&var"), 1;
004104  004484  // Syntax: str_GetW(&ptr, &var);
004105  004485  // Usage : ok := str_GetW(&ptr, &var);
004106  004486  // Notes : convert number in a string to WORD ( myvar )
004107  004487  //       : returns true if function succeeds, advancing ptr
004108  004488        
004109  004489  func str_GetHexW("&ptr", "&var"), 1;
004110  004490  // Syntax: str_GetHexW(&ptr, &var);
004111  004491  // Usage : ok := str_GetHexW(&ptr, &var);
004112  004492  // Notes : convert HEX number in a string to WORD ( myvar )
004113  004493  //       : returns true if function succeeds, advancing ptr
004114  004494        
004115  004495  func str_GetC("&ptr", "&var"), 1;
004116  004496  // Syntax: str_GetC(&ptr, &var);
004117  004497  // Usage : ok := str_GetC(&ptr, &var);
004118  004498  // Notes : get a valid ascii char in a string to WORD ( myvar )
004119  004499  //       : returns true if function succeeds, advancing ptr
004120  004500        
004121  004501  func str_GetByte("ptr"), 1;
004122  004502  // Syntax: str_GetByte(ptr);
004123  004503  // Usage : myvar := str_GetByte(ptr);
004124  004504  // Notes : get a byte to myvar
004125  004505  //       : returns value
004126  004506        
004127  004507  func str_GetWord("ptr"), 1;
004128  004508  // Syntax: GetWord(ptr);
004129  004509  // Usage : GetWord(ptr);
004130  004510  // Notes : get a word to myvar
004131  004511  //       : returns value
004132  004512        
004133  004513  func str_PutByte("ptr","val"), 0;
004134  004514  // Syntax: str_PutByte(ptr);
004135  004515  // Usage : myvar := str_PutByte(ptr);
004136  004516  // Notes : put a byte at ptr
004137  004517  //       : returns value
004138  004518        
004139  004519  func str_PutWord("ptr","val"), 0;
004140  004520  // Syntax: str_PutWord("ptr","val");
004141  004521  // Usage : str_PutWord(p,100);
004142  004522  // Notes : put word 100 at current pointer location
004143  004523  //       : returns value
004144  004524        
004145  004525  func str_Match("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Match(&ptr, *str);
004147  004527  // Usage : r := str_Match(&p, "hello");
004148  004528  // Notes : Case sensitive match
004149  004529  //       : returns true if function succeded, andvancing pointer to position past
004150  004530  //       : the matched item. Note that any whitespace characters are skipped
004151  004531  //       : in the source string prior to the test.
004152  004532        
004153  004533  func str_MatchI("&ptr", "*str"), 1;
004154  004534  // Syntax: str_MatchI(&ptr, *str);
004155  004535  // Usage : r := str_MatchI(&p, "hello");
004156  004536  // Notes : Case insensitive match
004157  004537  //       : returns true if function succeded, andvancing pointer to position past
004158  004538  //       : the matched item. Note that any whitespace characters are skipped
004159  004539  //       : in the source string prior to the test.
004160  004540        
004161  004541  func str_Find("&ptr", "*str"), 1;
004162  004542  // Syntax: str_Find(&ptr, *str);
004163  004543  // Usage : n := str_Find(&p, "hello");
004164  004544  // Notes : given the address of a pointer to a source string as the
004165  004545  //       : first argument, and a pointer to a test string as the second
004166  004546  //       : argument, attempt to find the position of the matching string
004167  004547  //       : in the source string. The test is performed with case sensitivity.
004168  004548  //       : return 0 if not found, else returns the address of the first
004169  004549  //       : character of the match. NB:- The source pointer is not altered.
004170  004550        
004171  004551  func str_FindI("&ptr", "*str"), 1;
004172  004552  // Syntax: str_Find(&ptr, *str);
004173  004553  // Usage : n := str_Find(&p, "hello");
004174  004554  // Notes : given the address of a pointer to a source string as the
004175  004555  //       : first argument, and a pointer to a test string as the second
004176  004556  //       : argument, attempt to find the position of the matching string
004177  004557  //       : in the source string. The test is performed with no case
004178  004558  //       : sensitivity, eg upper and lower case chars are accepted.
004179  004559  //       : return 0 if not found, else returns the address of the first
004180  004560  //       : character of the match. NB:- The source pointer is not altered.
004181  004561        
004182  004562  func str_Length("ptr"), 1;
004183  004563  // Syntax: str_Length(ptr);
004184  004564  // Usage : len := str_Ptr(mystring);
004185  004565  // Notes : return the length of a byte aligned string excluding terminator
004186  004566        
004187  004567  func str_Printf("&ptr", "*format"), 1;
004188  004568  // Syntax: str_Printf("&ptr", "*format");
004189  004569  // Usage : r := str_Printf(&p, "hello");
004190  004570  // Notes : refer to documentation
004191  004571  //       :
004192  004572        
004193  004573  func str_Cat("dest","src"), 1;
004194  004574  // Syntax: str_Append("&dest","&src");
004195  004575  // Usage : str_Append(&buf,"Hello");
004196  004576  // Notes : Appends a copy of the source string to the destination string.
004197  004577  //       : The terminating null character in destination is overwritten by
004198  004578  //       : the first character of source, and a new null-character is appended
004199  004579  //       : at the end of the new string formed by the concatenation of both in destination.
004200  004580  //       : returns destination.
004201  004581        
004202  004582  func str_CatN("dest","src","count"), 1;
004203  004583  // Syntax: str_Append("&dest","&src","count");
004204  004584  // Usage : str_Append(&buf,"Monday",3);
004205  004585  // Notes : Appends a copy of the source string to the destination string.
004206  004586  //       : The number of characters copied is limited by "count".
004207  004587  //       : The terminating null character in destination is overwritten by
004208  004588  //       : the first character of source, and a new null-character is appended
004209  004589  //       : at the end of the new string formed by the concatenation of both in destination.
004210  004590  //       : returns destination.
004211  004591        
004212  004592        
004213  004593  func str_ByteMove("src", "dest", "count"), 1;
004214  004594  // Syntax   : str_ByteMove(src, dest, bytecount);
004215  004595  // Input    : STR *source points to byte aligned source.
004216  004596  //          : STR *dest   points to byte aligned destination.
004217  004597  //          : VAR count   number of bytes to transfer.
004218  004598  // Usage    : nextpos := str_ByteMove(s, d, 100);
004219  004599  // Notes    : copy bytes from "src" to "dest", stopping only
004220  004600  //          : when "count" is exhausted.
004221  004601  //          : No terminator is appended, it is purely a
004222  004602  //          : byte copy, and any zeroes encountered will
004223  004603  //          : also be copied.
004224  004604  // Returns  : returns a pointer to the end of the destination
004225  004605  //          : (which is "dest" + "count")
004226  004606        
004227  004607        
004228  004608  func str_Copy("dest", "src"), 1;
004229  004609  // Syntax   : str_Copy(dest, src);
004230  004610  // Input    : STR *dest   points to byte aligned destination.
004231  004611  //          : STR *source points to byte aligned source.
004232  004612  // Usage    : nextplace := str_Copy(d, s);
004233  004613  // Notes    : copy a string from "src" to "dest", stopping only
004234  004614  //          : when the end of source string "src" is encountered
004235  004615  //          : (0x00 terminator).
004236  004616  //          : The terminator is always appended, even if "src" is
004237  004617  //          : an empty string.
004238  004618  // Returns  : returns a pointer to the 0x00 string terminator at
004239  004619  //          : end of "dest" (which is "dest" + str_Length(src); )
004240  004620        
004241  004621        
004242  004622  func str_CopyN("dest", "src", "count"), 1;
004243  004623  // Syntax   : str_CopyN(dest, src, bytecount);
004244  004624  // Input    : STR *dest   points to byte aligned destination.
004245  004625  //          : STR *source points to byte aligned source.
004246  004626  //          : VAR count   max number of chars to copy.
004247  004627  // Usage    : nextplace := str_CopyN(d, s, 100);
004248  004628  // Notes    : copy a string from "src" to "dest", stopping only
004249  004629  //          : when "count" is exhausted, or end of source
004250  004630  //          : string "str" is encountered (0x00 string terminator).
004251  004631  //          : The terminator is always appended, even if
004252  004632  //          : "count" is zero, or "src" is a null string.
004253  004633  // Returns  : returns a pointer to the 0x00 string terminator
004254  004634  //          : (which is "dest" + whatever was copied)
004255  004635        
004256  004636        
004257  004637  func __reserved63(), 0; // do not remove
004258  004638  func __reserved64(), 0; // do not remove
004259  004639  func __reserved65(), 0; // do not remove
004260  004640  func __reserved66(), 0; // do not remove
004261  004641        
004262  004642  //=========================================================================================================
004263  004643  // FLASH memory functions
004264  004644  //=========================================================================================================
004265  004645  func flash_GetByte("bank", "ptr"), 1;
004266  004646  // Syntax   : flash_GetByte(bank, ptr);
004267  004647  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004268  004648  // Notes    : Reads a single byte from any flash location.
004269  004649  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004270  004650  //          : which is the header signature for a valid program.
004271  004651  // Returns  : the byte value from the location
004272  004652        
004273  004653        
004274  004654  func flash_GetWord("bank", "ptr"), 1;
004275  004655  // Syntax   : flash_GetWord(bank, ptr);
004276  004656  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004277  004657  // Notes    : Reads a single word from any flash location.
004278  004658  //          : The pointer is byte aligned.
004279  004659  //          : If the bank is read protected, only the first word can be read
004280  004660  //          : which is the header signature for a valid program (0xAA55).
004281  004661  // Returns  : the byte value from the location
004282  004662        
004283  004663        
004284  004664  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004285  004665  // Syntax   : flash_Copy(bank, ptr);
004286  004666  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004287  004667  // Notes    : Copies bytes from any flash locations to a user buffer.
004288  004668  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004289  004669  //          : If the bank is read protected, 0 bytes will be read
004290  004670  //          : which is the header signature for a valid program (0xAA55).
004291  004671  // Returns  : the count of bytes transferred.
004292  004672        
004293  004673        
004294  004674  func flash_Run("bank"), 1;
004295  004675  // Syntax    : flash_Run(bankx);
004296  004676  // Usage     : res := flash_Run(FLASHBANK_5);
004297  004677  // Notes     : Restarts the processor, running code from the required
004298  004678  //           : flash bank. bank may be a variable, or one of the
004299  004679  //           : pre-defined constants:-
004300  004680  //           :    FLASHBANK_0                 //0x00
004301  004681  //           :    FLASHBANK_1                 //0x01
004302  004682  //           :    FLASHBANK_2                 //0x02
004303  004683  //           :    FLASHBANK_3                 //0x03
004304  004684  //           :    FLASHBANK_4                 //0x04
004305  004685  //           :    FLASHBANK_5                 //0x05
004306  004686  // returns    : This function should net return as it restarts
004307  004687  //        : the processor and jumps to the required bank,
004308  004688  //        : If it does return, -1 indicates incorrect/invalid
004309  004689  //        : bank number, and -2 indicates no valid program
004310  004690  //        : in the selected bank.
004311  004691        
004312  004692  func flash_Bank(), 1;
004313  004693  // Syntax   : flash_Bank();
004314  004694  // Usage    : myvar := flash_Bank();
004315  004695  // Notes    : Identifies which flash bank the code is running from.
004316  004696  // Returns  : The FLASH bank that code is currently running from, 0-5.
004317  004697        
004318  004698        
004319  004699  func flash_EraseBank("bank", "confirmation"), 1;
004320  004700  // Syntax   : flash_EraseBank(bank, confirmation);
004321  004701  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004322  004702  // Notes    : This function should be used with extreme caution.
004323  004703  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004324  004704  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004325  004705  //          : a protected bank will not be erased, and function will return with 0
004326  004706  //          : If the destination bank is the same as the execution bank, the processor will reset
004327  004707  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004328  004708  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004329  004709  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004330  004710  // Returns  : returns true if the function succeeded
004331  004711  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004332  004712        
004333  004713  func flash_LoadFile("bank", "filename"), 1;
004334  004714  // Syntax   : flash_LoadFile(bank, ptr);
004335  004715  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004336  004716  // Notes    : Copies a file from uSD to the required flashbank.
004337  004717  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004338  004718  // Returns  : returns true if the function succeeded.
004339  004719        
004340  004720        
004341  004721  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004342  004722  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004343  004723  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004344  004724  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004345  004725  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004346  004726  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004347  004727  // Returns  : returns true if the function succeeded.
004348  004728        
004349  004729        
004350  004730  func flash_putstr("bank", "ptr"), 1;
004351  004731  // Syntax   : flash_putstr(bank, ptr);
004352  004732  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004353  004733  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004354  004734  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004355  004735  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004356  004736        
004357  004737  func flash_Blit16("bank", "offset", "count"), 1;
004358  004738  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004359  004739  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004360  004740  // Notes    : Blit an image to a GRAM window from FLASH storage.
004361  004741  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004362  004742  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004363  004743        
004364  004744  func flash_Blit8("bank", "offset", "count"), 1;
004365  004745  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004366  004746  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004367  004747  // Notes    : Blit an image to a GRAM window from FLASH storage.
004368  004748  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004369  004749  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004370  004750        
004371  004751  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004372  004752  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004373  004753  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004374  004754  // Notes    : Blit an image to a GRAM window from FLASH storage.
004375  004755  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004376  004756  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004377  004757        
004378  004758  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004379  004759  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004380  004760  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004381  004761  // Notes    : Blit an image to a GRAM window from FLASH storage.
004382  004762  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004383  004763  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004384  004764        
004385  004765  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004386  004766  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004387  004767  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004388  004768  // Notes    : Blit an image to a GRAM window from FLASH storage.
004389  004769  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004390  004770  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004391  004771        
004392  004772  func flash_Exec("bank", "arglistptr"), 1;
004393  004773  // Syntax: res := flash_Exec("bank","arglistptr");
004394  004774  // Usage : res := flash_Exec("bank","arglistptr");
004395  004775  // Notes : returns like a function, current program
004396  004776  //       : calling program is kept active and control returns to it.
004397  004777  //       : If arglistptr is 0, no arguments are passed, else
004398  004778  //       : arglist points to an array, the first element being
004399  004779  //       : the number of elements in the array.
004400  004780  //       : func 'main' in the called bank accepts the arguments.
004401  004781  // WARNING Not currently implemented!
004402  004782        
004403  004783        
004404  004784  func __reserved68(), 0; // do not remove
004405  004785  func __reserved69(), 0; // do not remove
004406  004786  func __reserved70(), 0; // do not remove
004407  004787        
004408  004788  //=========================================================================================================
004409  004789  // I/O and hardware functions
004410  004790  //=========================================================================================================
004411  004791        
004412  004792        
004413  004793        
004414  004794        
004415  004795  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004416  004796  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004417  004797  // Syntax: pin_Pulseout(pin, value);
004418  004798  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004419  004799  // Notes : only available on PA0 to PA9
004420  004800  //       : Invert the state of an output for "value" milliseconds.
004421  004801  //       : pulseout is non blocking, that is, code execution may continue while
004422  004802  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004423  004803  //       : If not already an output, pin is automatically made a push/pull output,
004424  004804  //       : and the last state of its output latch will determine pulse polarity.
004425  004805  //       : It's its open drain state is not altered if the pin was already an output.
004426  004806  //       : If pulseout is called while pulseout is still active, the pulse timer
004427  004807  //       : will simply be updated with the new "value" and the pulse will continue
004428  004808  //       : with the extended value.
004429  004809  //       : returns true if the pin number is legal (usually ignored)
004430  004810        
004431  004811        
004432  004812  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004433  004813  // Syntax: pin_Counter(pin, mode, userfunc);
004434  004814  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004435  004815  // Notes : only available on PA4 to PA9
004436  004816  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004437  004817  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004438  004818  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004439  004819  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004440  004820  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004441  004821  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004442  004822  //       : The pin may be configured as an input or output, the function behaves the same.
004443  004823  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004444  004824  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004445  004825  //       : "mode" has the following effect:-
004446  004826  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004447  004827  //       : mode COUNT_RISE(1) = increment on every rising edge
004448  004828  //       : mode COUNT_FALL(2) = increment on every falling edge
004449  004829  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004450  004830        
004451  004831  //------------------------------------------------------------------//
004452  004832  // pin counter mode constants                                       //
004453  004833  //------------------------------------------------------------------//
004454  004834  #CONST
004455  004839  #END
004456  004840        
004457  004841  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004458  004842  // Syntax: Qencoder1(pinA, pinB, mode);
004459  004843  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004460  004844  // Notes : not available on pins PA14 and PA15
004461  004845  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004462  004846  //       : or written to at any time with peekW and pokeW using the following constants:-
004463  004847  //       : It is necessary to configure the pins first, depending on your requirements, eg
004464  004848  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004465  004849  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004466  004850  //       : Returns true if the pin numbers are legal (usually ignored)
004467  004851  //    QEN1_COUNTER_LO
004468  004852  //    QEN1_COUNTER_HI
004469  004853  //    QEN1_DELTA This is reset to 0 when read
004470  004854        
004471  004855  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004472  004856  // Syntax: Qencoder2(pinA, pinB, mode);
004473  004857  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004474  004858  // Notes : not available on pins PA14 and PA15
004475  004859  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004476  004860  //       : or written to at any time with peekW and pokeW using the following constants:-
004477  004861  //       : It is necessary to configure the pins first, depending on your requirements, eg
004478  004862  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004479  004863  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004480  004864  //       : Returns true if the pin numbers are legal (usually ignored)
004481  004865  //    QEN2_COUNTER_LO
004482  004866  //    QEN2_COUNTER_HI
004483  004867  //    QEN2_DELTA This is reset to 0 when read
004484  004868        
004485  004869        
004486  004870  func Qencoder1Reset(), 0;
004487  004871  // Syntax: Qencoder1Reset();
004488  004872  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004489  004873  // Notes :
004490  004874  //    QEN1_COUNTER_LO is reset to zero
004491  004875  //    QEN1_COUNTER_HI is reset to zero
004492  004876  //    QEN1_DELTA is reset to zero
004493  004877        
004494  004878  func Qencoder2Reset(), 0;
004495  004879  // Syntax: Qencoder2Reset();
004496  004880  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004497  004881  // Notes :
004498  004882  //    QEN2_COUNTER_LO is reset to zero
004499  004883  //    QEN2_COUNTER_HI is reset to zero
004500  004884  //    QEN2_DELTA is reset to zero
004501  004885        
004502  004886        
004503  004887  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004504  004888  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004505  004889  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004506  004890  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004507  004891  //       : Invert the state of an output at a "freq" freuency "count" times.
004508  004892  //       : PulseoutCount is non blocking, that is, code execution may continue while
004509  004893  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004510  004894  //       : If not already an output, pin is automatically made a push/pull output,
004511  004895  //       : and the last state of its output latch will determine pulse polarity.
004512  004896  //       : It's its open drain state is not altered if the pin was already an output.
004513  004897  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004514  004898  //       : will simply have the new "value" added to it.
004515  004899  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004516  004900  //       : returns true if the pin number is legal (usually ignored)
004517  004901        
004518  004902  func __reserved72(), 0; // do not remove
004519  004903        
004520  004904  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004521  004905  // Syntax: pwm_Init(pin, value);
004522  004906  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004523  004907  // Notes : only available on PA4 to PA9
004524  004908  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004525  004909  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004526  004910  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004527  004911  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004528  004912  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004529  004913  //       :                    : Repetition rate ~50hz or 20ms
004530  004914  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004531  004915  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004532  004916  //       : pwm_Init is non blocking and the pwm continues until turn off
004533  004917  //       : Returns true if the pin number is legal (usually ignored)
004534  004918        
004535  004919  //------------------------------------------------------------------------------
004536  004920  // PWM Constants
004537  004921  //------------------------------------------------------------------------------
004538  004922  #CONST
004539  004927  #END
004540  004928        
004541  004929  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004542  004930  // Syntax   : OW_Reset(PA0);
004543  004931  // Usage    : OW_Reset(PA0);
004544  004932  // Notes    : Only available on PA0 to PA13
004545  004933  //          : Resets  ONEWIRE device
004546  004934  //          : Returns the status, 0 = ACK.
004547  004935  //          :
004548  004936        
004549  004937  func OW_Read("pin"), 1;                              // read data from 1wire bus
004550  004938  // Syntax   : OW_Read(PA0);
004551  004939  // Usage    : arg1 := OW_Read(PA0);
004552  004940  // Notes    : Only available on PA0 to PA13
004553  004941  //          : Reads value of the ONEWIRE pin
004554  004942  //          : that was previously selected for ONEWIRE comms.
004555  004943  //          :
004556  004944  //          : pin = 0 : the next byte from the ONEWIRE bus
004557  004945        
004558  004946  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004559  004947  // Syntax   : OW_Read9(PA0);
004560  004948  // Usage    : OW_Read9(PA0);
004561  004949  // Notes    : Only available on PA0 to PA13
004562  004950  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004563  004951  //          : that was previously selected for ONEWIRE comms.
004564  004952  //          :
004565  004953  //          : read the 9 bits from the ONEWIRE bus
004566  004954        
004567  004955  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004568  004956  // Syntax   : OW_Write(PA0, arg);
004569  004957  // Usage    : OW_Write(PA0, arg);
004570  004958  // Notes    : Only available on PA0 to PA13
004571  004959  //          : Sends ONEWIRE data on the appropriate
004572  004960  //          : pin that was previously  selected as ONEWIRE comms.
004573  004961  //          :
004574  004962  //          : write arg to the ONEWIRE bus
004575  004963        
004576  004964  func __reserved77(), 0; // do not remove
004577  004965  func __reserved78(), 0; // do not remove
004578  004966        
004579  004967  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004580  004968  // Syntax: sys_GetDateVar(&year, &month, &day);
004581  004969  // Usage : sys_GetDateVar(&year, &month, &day);
004582  004970  // Notes : Retrieves the date values into variables
004583  004971        
004584  004972  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004585  004973  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004974  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004587  004975  // Notes : Retrieves the time values into variables
004588  004976        
004589  004977  func sys_PmmC(), 0;
004590  004978  // Syntax: sys_PmmC();
004591  004979  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004592  004980  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004593  004981  //       : Can be captured to a buffer using the to( function
004594  004982  //       : Returns nothing.
004595  004983        
004596  004984  func sys_Driver(), 0;
004597  004985  // Syntax: sys_Driver();
004598  004986  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004599  004987  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004600  004988  //       : Can be captured to a buffer using the to( function
004601  004989  //       : Returns nothing.
004602  004990        
004603  004991  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004604  004992  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004605  004993  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004606  004994  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004607  004995  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004608  004996  //       : elements in each buffer. This will need to be greater than "width" for negative
004609  004997  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004610  004998  //       : pass 0 as the address for any unused traces
004611  004999  //       : X position is incremented each point by "xstep" pixels.
004612  005000  //       : Y values are derived from a Y buffer "newy" (signed values).
004613  005001  //       : 2 buffers need to be supplied, "newy" contains new
004614  005002  //       : points to be drawn, "oldy" contains most recent set
004615  005003  //       : of points to be un-drawn. After the waveform is drawn,
004616  005004  //       : "newy" buffer is automatically copied to "oldy" buffer.
004617  005005        
004618  005006        
004619  005007  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004620  005008  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004621  005009  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004622  005010  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004623  005011  //       : and calls "COMPLETEfunction" when done.
004624  005012  //       : "rate" is samples in 100 of samples per second
004625  005013  //       : Any unused IOx pins should have their buffer addresses set to 0
004626  005014  //       : For performance reasons samples are taken in chunks of 32, thus if you
004627  005015  //       : request 33 samples there will be a delay of 31 samples before
004628  005016  //       : "COMPLETEfunction" is called
004629  005017  //       : If Touch is enabled this function should be called no more than once per
004630  005018  //       : millisecond, otherwise touch behaviour could be eratic.
004631  005019        
004632  005020        
004633  005021  func sys_ErrorMessage("msgnum"), 1;
004634  005022        
004635  005023  //==============================//
004636  005024  // NeoPixel specific functions  //
004637  005025  //==============================//
004638  005026        
004639  005027  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004640  005028  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004641  005029  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004642  005030  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004643  005031  //       : data        : Address of data to be sent
004644  005032  //       : size        : number of colour 'sets' to follow
004645  005033  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004646  005034  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004647  005035  //       : Repeat      : Number of times to repeat the colours between first and last
004648  005036  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004649  005037  //       : Returns true if the pin number is legal (usually ignored)
004650  005038  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004651  005039  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004652  005040        
004653  005041  // NeoPixel related constants
004654  005042  #CONST
004655  005046  #END
004656  005047        
004657  005048  func __reserved85(), 0; // do not remove
004658  005049  func __reserved86(), 0; // do not remove
004659  005050        
004660  005051  //==============================================//
004661  005052  // spi flash device specific functions          //
004662  005053  //==============================================//
004663  005054        
004664  005055  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004665  005056  // Syntax   : spiflash_SIG("spi#","enablepin");
004666  005057  // Usage    : var := spiflash_SIG(SPI1, PA0);
004667  005058  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004668  005059  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004669  005060  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004670  005061  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004671  005062  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004672  005063  //          : byte is ignored.
004673  005064        
004674  005065  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004675  005066  // Syntax   : spiflash_ID("spi#","enablepin");
004676  005067  // Usage    : var := spiflash_ID(SPI1, PA0);
004677  005068  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004678  005069  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004679  005070  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004680  005071  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004681  005072  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004682  005073  //          : contains capacity. Refer to the device data sheet for further information.
004683  005074        
004684  005075  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004685  005076  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004686  005077  // Usage    : spiflash_BulkErase(SPI1, PA0);
004687  005078  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004688  005079  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004689  005080  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004690  005081  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004691  005082  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004692  005083  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004693  005084        
004694  005085  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004695  005086  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004696  005087  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004697  005088  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004698  005089  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004699  005090  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004700  005091  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004701  005092  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004702  005093  //          : blockAddress The address of the 64k FLASH block to be erased.
004703  005094  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004704  005095  //          : can take up to 3 milliseconds.
004705  005096        
004706  005097  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004707  005098  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004708  005099  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004709  005100  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004710  005101        
004711  005102  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004712  005103  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004713  005104  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004714  005105  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004715  005106  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004716  005107  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004717  005108  //       : returns number of characters read
004718  005109  //       : if "dest" is zero, data is read direct to GRAM window
004719  005110  //       :
004720  005111        
004721  005112  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004722  005113  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004723  005114  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004724  005115  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004725  005116  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004726  005117  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004727  005118  //       : returns number of bytes written
004728  005119  //       :
004729  005120        
004730  005121  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004731  005122  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004732  005123  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004733  005124  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004734  005125  //       : The image is displayed at x,y (with respect to top left corner).
004735  005126        
004736  005127  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004737  005128  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004738  005129  // Usage : spiflash_PutC('x', SPI1, PA0);
004739  005130  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004740  005131  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004741  005132  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004742  005133        
004743  005134  func spiflash_GetC("spi#", "enablepin"), 1;
004744  005135  // Syntax: spiflash_GetC("spi#", "enablepin");
004745  005136  // Usage : mychar := fgetC(SPI1, PA0);
004746  005137  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004747  005138  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004748  005139  //       : by subsequent reads or writes.
004749  005140  //       : returns next char from file
004750  005141        
004751  005142  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004752  005143  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004753  005144  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004754  005145  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004755  005146  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004756  005147  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004757  005148        
004758  005149  func spiflash_GetW("spi#", "enablepin"), 1;
004759  005150  // Syntax: spiflash_GetW("spi#", "enablepin");
004760  005151  // Usage : myword := fgetW(SPI1, PA0);
004761  005152  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004762  005153  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004763  005154  //       : by subsequent reads or writes.
004764  005155  // Notes : returns next word in file
004765  005156        
004766  005157  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004767  005158  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004768  005159  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004769  005160  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004770  005161  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004771  005162  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004772  005163  //       : returns number of characters written
004773  005164  //       :
004774  005165        
004775  005166  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004776  005167  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004777  005168  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004778  005169  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004779  005170  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004780  005171  //       : by subsequent reads or writes.
004781  005172  //       : returns pointer to string or null if failed.
004782  005173  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004783  005174  //       : NB:- only reads up to "size-1" characters into "string"
004784  005175  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004785  005176  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004786  005177  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004787  005178  //       : C] It reaches the end of file
004788  005179  //       : D] A read error occurs.
004789  005180        
004790  005181  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004791  005182  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004792  005183  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004793  005184  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004794  005185  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004795  005186  //       : return a function pointer to the allocation.
004796  005187  //       : The function can then be invoked just like any other
004797  005188  //       : function would be called via a function pointer.
004798  005189  //       : Parameters may be passed to it in a conventional way.
004799  005190  //       : The function may be discarded at any time when no
004800  005191  //       : longer required, thus freeing its memory resources.
004801  005192  //       : The loaded function can be discarded with mem_Free(..)
004802  005193  //       : eg:
004803  005194  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004804  005195  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004805  005196  //       : then elsewhere in your program:-
004806  005197  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004807  005198  //       : if(res == QUIT_APPLICATION) goto exitApp;
004808  005199  //       : Later in your program, when popupWindow is no longer
004809  005200  //       : required for the application:-
004810  005201  //       : res := mem_Free(popupWindow);
004811  005202  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004812  005203  //       : The callers stack is shared by the loaded function,
004813  005204  //       : however any global variables in the loaded function
004814  005205  //       : are private to that function.
004815  005206  //
004816  005207        
004817  005208  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004818  005209  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004819  005210  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004820  005211  // Notes : current program releases any allocated memory but
004821  005212  //       : retains the stack and global memory.
004822  005213  //       : If arglistptr is 0, no arguments are passed, else
004823  005214  //       : arglist points to an array, the first element being
004824  005215  //       : the number of elements in the array.
004825  005216  //       : func 'main' in the called program accepts
004826  005217  //       : the arguments, if any. The arguments can only
004827  005218  //       : be passed by value, no pointers or references can be
004828  005219  //       : used as all memory is cleared before the file
004829  005220  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004830  005221  //       : for functions that can pass by reference.
004831  005222        
004832  005223  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004833  005224  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004834  005225  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004835  005226  // Notes : returns like a function, current program
004836  005227  //       : calling program is kept active and control returns to it.
004837  005228  //       : If arglistptr is 0, no arguments are passed, else
004838  005229  //       : arglist points to an array, the first element being
004839  005230  //       : the number of elements in the array.
004840  005231  //       : func 'main' in the called program accepts the arguments.
004841  005232  //       : This function is similar to spiflash_LoadFunction(...), however,
004842  005233  //       : the function argument list is passed by pointer, and
004843  005234  //       : the memory consumed by the function is released as
004844  005235  //       : soon as the function completes.
004845  005236        
004846  005237  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004847  005238  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004848  005239  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004849  005240  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004850  005241  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004851  005242  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004852  005243  //       : Returns NULL if function fails.
004853  005244  //       : Returns a handle (pointer to the memory allocation) to the
004854  005245  //       : image control list that has been created.
004855  005246        
004856  005247  // Notes : This function Calculates the size of a chunk of memory required for
004857  005248  //       : a image list and populates it from the image control file ("*.dat")
004858  005249  //       : therefore, when imagelist is no longer required, you must de-allocate
004859  005250  //       : the image list memory by using eg:- mem_Free(hImagelist);
004860  005251  //       : to restore the heap.
004861  005252  //       :
004862  005253        
004863  005254  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004864  005255  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004865  005256  // Usage : spiflash_PlayWAV(SPI1, PA0);
004866  005257  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004867  005258  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004868  005259  //       : or writes.
004869  005260  //       : This function automatically grabs a chunk
004870  005261  //       : of memory for a file buffer, and a wave
004871  005262  //       : buffer. The minimum memory requirement is
004872  005263  //       : about 580 bytes for the disk io service and
004873  005264  //       : a minimum wave buffer size of 1024. The size
004874  005265  //       : of the wave buffer allocation
004875  005266  //       : can be increased by the snd_BufSize function.
004876  005267  //       : The default size 1024 bytes.
004877  005268  //       : NB the memory is only required during the
004878  005269  //       : duration of play, and is automatically
004879  005270  //       : released while not in use.
004880  005271  //       : See the Sound Class services for other associated controls.
004881  005272  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004882  005273  //       : If errors occured, the folling is returned
004883  005274  //       : -7  : Insufficient memory available for WAV buffer and file
004884  005275  //       : -6  : cant play this rate
004885  005276  //       : -5  : no data chunk found in first rsector
004886  005277  //       : -4  : no format data
004887  005278  //       : -3  : no wave chunk signature
004888  005279  //       : -2  : bad wave file format
004889  005280  //       : -1  : file not found
004890  005281        
004891  005282  //==============================================//
004892  005283  // more com functions                           //
004893  005284  //==============================================//
004894  005285        
004895  005286  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004896  005287  // Syntax   : com1_TXblock("buf", "bufsize");
004897  005288  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004898  005289  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004899  005290  //          : if a transmit buffer is active and space is available this function will return almost
004900  005291  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004901  005292        
004902  005293  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004903  005294  // Syntax   : com1_RXblock("buf", "bufsize");
004904  005295  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004905  005296  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004906  005297  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004907  005298  //          : immediately otherwise it will block until until the required bytes are received.
004908  005299        
004909  005300  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004910  005301  // Syntax   : com_TXblock("buf", "bufsize");
004911  005302  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004912  005303  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004913  005304  //          : if a transmit buffer is active and space is available this function will return almost
004914  005305  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004915  005306        
004916  005307  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004917  005308  // Syntax   : com_RXblock("buf", "bufsize");
004918  005309  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004919  005310  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004920  005311  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004921  005312  //          : immediately otherwise it will block until until the required bytes are received.
004922  005313        
004923  005314  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004924  005315  // Syntax   : com_TXblock("buf", "bufsize");
004925  005316  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004926  005317  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004927  005318  //          : if a transmit buffer is active and space is available this function will return almost
004928  005319  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004929  005320        
004930  005321  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004931  005322  // Syntax   : com_RXblock("buf", "bufsize");
004932  005323  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004933  005324  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004934  005325  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004935  005326  //          : immediately otherwise it will block until until the required bytes are received.
004936  005327        
004937  005328  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004938  005329  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004939  005330  // Usage : disp_BlitPixelsFromCOM1();
004940  005331  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004941  005332  //       : display from the specified com port.
004942  005333        
004943  005334  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004944  005335  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004945  005336  // Usage : disp_BlitPixelsFromCOM2();
004946  005337  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004947  005338  //       : display from the specified com port.
004948  005339        
004949  005340  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004950  005341  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004951  005342  // Usage : disp_BlitPixelsFromCOM3();
004952  005343  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004953  005344  //       : display from the specified com port.
004954  005345        
004955  005346        
004956  005347  //==============================================//
004957  005348  // crc generation functions                     //
004958  005349  //==============================================//
004959  005350        
004960  005351  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004961  005352  // *Notes   : (if you calculate all of the incoming data
004962  005353  //          : INCLUDING the CRC, the result should be 0x00
004963  005354  //          : This is equivalent to simple addition of all bytes
004964  005355  //          : and returning the negated sum an 8 bit value.
004965  005356  //          : For the standard test string "123456789",
004966  005357  //          : crc_CSUM_8 will return 0x0023.
004967  005358        
004968  005359        
004969  005360  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004970  005361  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004971  005362  //          : (if you calculate all of the incoming data
004972  005363  //          : INCLUDING the CRC, the result should be 0x0000
004973  005364  //          : For the standard test string "123456789",
004974  005365  //          : crc_16 will return 0xBB3D.
004975  005366        
004976  005367        
004977  005368  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004978  005369  // *Notes   : (if you calculate all of the incoming data
004979  005370  //          : INCLUDING the CRC, the result should be 0x0000
004980  005371  //          : For the standard test string "123456789",
004981  005372  //          : crc_MODBUS will return 0x4B37.
004982  005373        
004983  005374        
004984  005375  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004985  005376  // *Notes   : (if you calculate all of the incoming data
004986  005377  //          : INCLUDING the CRC, the result should be 0x0000
004987  005378  //          : For the standard test string "123456789",
004988  005379  //          : crc_CCITT will return the following:-
004989  005380  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004990  005381  //          : seed = 0xFFFF, result = 0x29B1
004991  005382  //          : seed = 0x1D0F, result = 0xE5CC
004992  005383        
004993  005384        
004994  005385  //------------------------------------------------------------------//
004995  005386  // CONSTANTS
004996  005387  //------------------------------------------------------------------//
004997  005388        
004998  005389  #CONST
004999  005393  #END
005000  005394        
005001  005395  // timebase constants for timebase_init
005002  005396  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005003  005397  #CONST
005004  005408  #END
005005  005409        
005006  005410        
005007  005411  // generic constants
005008  005412  #CONST
005009  005420  #END
005010  005421        
005011  005422        
005012  005423        
005013  005424  //gfx_Get() related constants
005014  005425  #CONST
005015  005434  #END
005016  005435        
005017  005436        
005018  005437        
005019  005438        
005020  005439  #CONST
005021  005452  #END
005022  005453        
005023  005454        
005024  005455  #CONST
005025  005480  #END
005026  005481        
005027  005482        
005028  005483        
005029  005484        
005030  005485  // timer control  related constants
005031  005486  #CONST
005032  005495  #END
005033  005496        
005034  005497        
005035  005498        
005036  005499  //------------------------------------------------------------------------------
005037  005500  // system WORD variables accesible with peekW and pokeW or pointer access
005038  005501  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005039  005502  // can also be accessed with peekW and pokeW
005040  005503  //------------------------------------------------------------------------------
005041  005504        
005042  005505  #CONST
005043  005600  #END
005044  005601        
005045  005602  #CONST
005046  005767  #END
005047  005768        
005048  005769        
005049  005770        
005050  005771  //==================================================================================================
005051  005772        
005052  005773        
005053  005774        
005054  000013      #ENDIF
005055  000014        
005056  000015        
005057  000016  //===========================================================================================
005058  000017        
005059  000018        
005060  000002        
005061  000003  // generated 24/07/2015 16:18:44
005062  000004        
005063  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005064  000006  #inherit "4DGL_16bitColours.fnc"
005065  000006  #inherit "4DGL_16bitColours.fnc"
005066  000004  */
005067  000005        
005068  000006        
005069  000007        
005070  000008  #CONST
005071  000149  #END
005072  000150        
005073  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005074  000008  #inherit "VisualConst.inc"
005075  000008  #inherit "VisualConst.inc"
005076  000001  // Line Patterns
005077  000002  #constant  LPCOARSE    0xF0F0
005078  000002  #constant  LPCOARSE    0xF0F0
005079  000003  #constant  LPMEDIUM    0x3333
005080  000003  #constant  LPMEDIUM    0x3333
005081  000004  #constant  LPFINE      0xAAAA
005082  000004  #constant  LPFINE      0xAAAA
005083  000005  #constant  LPDASHDOT   0x03CF
005084  000005  #constant  LPDASHDOT   0x03CF
005085  000006  #constant  LPDASHDOTDOT 0x0333
005086  000006  #constant  LPDASHDOTDOT 0x0333
005087  000007  #constant  LPSOLID     0x0000
005088  000007  #constant  LPSOLID     0x0000
005089  000009        
005090  000010        
file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1Const.inc

005091  000011  #inherit "RepRap_Touchv1Const.inc"
005092  000011  #inherit "RepRap_Touchv1Const.inc"
005093  000001  // File generated 24/07/2015 16:18:18
005094  000002  // Warning! This is a generated file, any manual changes will be
005095  000003  // lost during the next generation.
005096  000004        
005097  000005  #constant  Strings1Count    1
005098  000005  #constant  Strings1Count    1
005099  000006  #constant  Strings1Size     25
005100  000006  #constant  Strings1Size     25
005101  000007  #constant  Strings3Count    1
005102  000007  #constant  Strings3Count    1
005103  000008  #constant  Strings3Size     18
005104  000008  #constant  Strings3Size     18
005105  000009  #constant  Strings4Count    1
005106  000009  #constant  Strings4Count    1
005107  000010  #constant  Strings4Size     25
005108  000010  #constant  Strings4Size     25
005109  000011  #constant  Strings6Count    1
005110  000011  #constant  Strings6Count    1
005111  000012  #constant  Strings6Size     31
005112  000012  #constant  Strings6Size     31
005113  000013  #constant  Strings2Count    0
005114  000013  #constant  Strings2Count    0
005115  000014  #constant  Strings2Size     1
005116  000014  #constant  Strings2Size     1
005117  000015  #constant  Strings0Count    1
005118  000015  #constant  Strings0Count    1
005119  000016  #constant  Strings0Size     7
005120  000016  #constant  Strings0Size     7
005121  000017  #constant  Strings9Count    0
005122  000017  #constant  Strings9Count    0
005123  000018  #constant  Strings9Size     1
005124  000018  #constant  Strings9Size     1
005125  000019  #constant  Strings34Count    0
005126  000019  #constant  Strings34Count    0
005127  000020  #constant  Strings34Size     1
005128  000020  #constant  Strings34Size     1
005129  000021  #constant  Strings36Count    0
005130  000021  #constant  Strings36Count    0
005131  000022  #constant  Strings36Size     1
005132  000022  #constant  Strings36Size     1
005133  000023  #constant  Strings37Count    0
005134  000023  #constant  Strings37Count    0
005135  000024  #constant  Strings37Size     1
005136  000024  #constant  Strings37Size     1
005137  000025  #constant  Strings12Count    1
005138  000025  #constant  Strings12Count    1
005139  000026  #constant  Strings12Size     14
005140  000026  #constant  Strings12Size     14
005141  000027  #constant  Strings14Count    1
005142  000027  #constant  Strings14Count    1
005143  000028  #constant  Strings14Size     23
005144  000028  #constant  Strings14Size     23
005145  000029  #constant  Strings16Count    0
005146  000029  #constant  Strings16Count    0
005147  000030  #constant  Strings16Size     1
005148  000030  #constant  Strings16Size     1
005149  000031  #constant  Strings15Count    1
005150  000031  #constant  Strings15Count    1
005151  000032  #constant  Strings15Size     24
005152  000032  #constant  Strings15Size     24
005153  000033  #constant  Strings21Count    1
005154  000033  #constant  Strings21Count    1
005155  000034  #constant  Strings21Size     35
005156  000034  #constant  Strings21Size     35
005157  000035  #constant  Strings11Count    1
005158  000035  #constant  Strings11Count    1
005159  000036  #constant  Strings11Size     32
005160  000036  #constant  Strings11Size     32
005161  000037  #constant  Strings22Count    1
005162  000037  #constant  Strings22Count    1
005163  000038  #constant  Strings22Size     19
005164  000038  #constant  Strings22Size     19
005165  000039  #constant  Strings24Count    1
005166  000039  #constant  Strings24Count    1
005167  000040  #constant  Strings24Size     26
005168  000040  #constant  Strings24Size     26
005169  000041  #constant  Strings25Count    1
005170  000041  #constant  Strings25Count    1
005171  000042  #constant  Strings25Size     10
005172  000042  #constant  Strings25Size     10
005173  000043  #constant  Strings26Count    1
005174  000043  #constant  Strings26Count    1
005175  000044  #constant  Strings26Size     10
005176  000044  #constant  Strings26Size     10
005177  000045  #constant  Strings27Count    1
005178  000045  #constant  Strings27Count    1
005179  000046  #constant  Strings27Size     11
005180  000046  #constant  Strings27Size     11
005181  000047  #constant  Strings28Count    1
005182  000047  #constant  Strings28Count    1
005183  000048  #constant  Strings28Size     40
005184  000048  #constant  Strings28Size     40
005185  000049  #constant  Strings35Count    1
005186  000049  #constant  Strings35Count    1
005187  000050  #constant  Strings35Size     36
005188  000050  #constant  Strings35Size     36
005189  000051  #constant  Strings33Count    1
005190  000051  #constant  Strings33Count    1
005191  000052  #constant  Strings33Size     83
005192  000052  #constant  Strings33Size     83
005193  000053  #constant  Strings10Count    1
005194  000053  #constant  Strings10Count    1
005195  000054  #constant  Strings10Size     14
005196  000054  #constant  Strings10Size     14
005197  000055  #constant  Strings7Count    0
005198  000055  #constant  Strings7Count    0
005199  000056  #constant  Strings7Size     1
005200  000056  #constant  Strings7Size     1
005201  000057  #constant  Strings8Count    0
005202  000057  #constant  Strings8Count    0
005203  000058  #constant  Strings8Size     1
005204  000058  #constant  Strings8Size     1
005205  000059  #constant  Strings38Count    0
005206  000059  #constant  Strings38Count    0
005207  000060  #constant  Strings38Size     1
005208  000060  #constant  Strings38Size     1
005209  000061  #constant  Strings39Count    0
005210  000061  #constant  Strings39Count    0
005211  000062  #constant  Strings39Size     1
005212  000062  #constant  Strings39Size     1
005213  000063  #constant  Strings40Count    1
005214  000063  #constant  Strings40Count    1
005215  000064  #constant  Strings40Size     7
005216  000064  #constant  Strings40Size     7
005217  000065  #constant  Strings41Count    1
005218  000065  #constant  Strings41Count    1
005219  000066  #constant  Strings41Size     7
005220  000066  #constant  Strings41Size     7
005221  000067  #constant  Strings42Count    1
005222  000067  #constant  Strings42Count    1
005223  000068  #constant  Strings42Size     7
005224  000068  #constant  Strings42Size     7
005225  000069  #constant  Strings43Count    0
005226  000069  #constant  Strings43Count    0
005227  000070  #constant  Strings43Size     1
005228  000070  #constant  Strings43Size     1
005229  000071  #constant  Strings44Count    0
005230  000071  #constant  Strings44Count    0
005231  000072  #constant  Strings44Size     1
005232  000072  #constant  Strings44Size     1
005233  000073  #constant  Strings45Count    0
005234  000073  #constant  Strings45Count    0
005235  000074  #constant  Strings45Size     1
005236  000074  #constant  Strings45Size     1
005237  000075  #constant  Strings51Count    0
005238  000075  #constant  Strings51Count    0
005239  000076  #constant  Strings51Size     1
005240  000076  #constant  Strings51Size     1
005241  000077  #constant  Strings52Count    0
005242  000077  #constant  Strings52Count    0
005243  000078  #constant  Strings52Size     1
005244  000078  #constant  Strings52Size     1
005245  000079  #constant  Strings17Count    1
005246  000079  #constant  Strings17Count    1
005247  000080  #constant  Strings17Size     56
005248  000080  #constant  Strings17Size     56
005249  000081  #constant  Strings18Count    1
005250  000081  #constant  Strings18Count    1
005251  000082  #constant  Strings18Size     39
005252  000082  #constant  Strings18Size     39
005253  000083  #constant  Strings19Count    1
005254  000083  #constant  Strings19Count    1
005255  000084  #constant  Strings19Size     43
005256  000084  #constant  Strings19Size     43
005257  000085  #constant  Strings29Count    1
005258  000085  #constant  Strings29Count    1
005259  000086  #constant  Strings29Size     64
005260  000086  #constant  Strings29Size     64
005261  000087  #constant  Strings30Count    1
005262  000087  #constant  Strings30Count    1
005263  000088  #constant  Strings30Size     42
005264  000088  #constant  Strings30Size     42
005265  000089  #constant  Strings31Count    1
005266  000089  #constant  Strings31Count    1
005267  000090  #constant  Strings31Size     7
005268  000090  #constant  Strings31Size     7
005269  000091  #constant  Strings32Count    1
005270  000091  #constant  Strings32Count    1
005271  000092  #constant  Strings32Size     19
005272  000092  #constant  Strings32Size     19
005273  000093  #constant  Strings49Count    1
005274  000093  #constant  Strings49Count    1
005275  000094  #constant  Strings49Size     17
005276  000094  #constant  Strings49Size     17
005277  000095  #constant  Strings50Count    0
005278  000095  #constant  Strings50Count    0
005279  000096  #constant  Strings50Size     1
005280  000096  #constant  Strings50Size     1
005281  000097  #constant  Strings13Count    1
005282  000097  #constant  Strings13Count    1
005283  000098  #constant  Strings13Size     3
005284  000098  #constant  Strings13Size     3
005285  000099  #constant  Strings46Count    0
005286  000099  #constant  Strings46Count    0
005287  000100  #constant  Strings46Size     1
005288  000100  #constant  Strings46Size     1
005289  000101  #constant  Strings47Count    1
005290  000101  #constant  Strings47Count    1
005291  000102  #constant  Strings47Size     3
005292  000102  #constant  Strings47Size     3
005293  000103  #constant  Strings48Count    0
005294  000103  #constant  Strings48Count    0
005295  000104  #constant  Strings48Size     1
005296  000104  #constant  Strings48Size     1
005297  000105  #constant  Strings53Count    1
005298  000105  #constant  Strings53Count    1
005299  000106  #constant  Strings53Size     100
005300  000106  #constant  Strings53Size     100
005301  000107  // object indexes into ImageControl
005302  000108  #CONST
005303  000342  #END
005304  000343        
005305  000344  #constant  Strings5Size     0
005306  000344  #constant  Strings5Size     0
005307  000345  #constant  Strings5StartH   0
005308  000345  #constant  Strings5StartH   0
005309  000346  #constant  Strings5StartL   0
005310  000346  #constant  Strings5StartL   0
005311  000347  #constant  Strings20Size     0
005312  000347  #constant  Strings20Size     0
005313  000348  #constant  Strings20StartH   0
005314  000348  #constant  Strings20StartH   0
005315  000349  #constant  Strings20StartL   0
005316  000349  #constant  Strings20StartL   0
005317  000350  #constant  Strings23Size     0
005318  000350  #constant  Strings23Size     0
005319  000351  #constant  Strings23StartH   0
005320  000351  #constant  Strings23StartH   0
005321  000352  #constant  Strings23StartL   0
005322  000352  #constant  Strings23StartL   0
005323  000353  #constant  Strings1StartH   0x0
005324  000353  #constant  Strings1StartH   0x0
005325  000354  #constant  Strings1StartL   0x0
005326  000354  #constant  Strings1StartL   0x0
005327  000355  #constant  Strings3StartH   0x0
005328  000355  #constant  Strings3StartH   0x0
005329  000356  #constant  Strings3StartL   0x200
005330  000356  #constant  Strings3StartL   0x200
005331  000357  #constant  Strings4StartH   0x0
005332  000357  #constant  Strings4StartH   0x0
005333  000358  #constant  Strings4StartL   0x400
005334  000358  #constant  Strings4StartL   0x400
005335  000359  #constant  Strings6StartH   0x0
005336  000359  #constant  Strings6StartH   0x0
005337  000360  #constant  Strings6StartL   0x600
005338  000360  #constant  Strings6StartL   0x600
005339  000361  #constant  Strings2StartH   0x0
005340  000361  #constant  Strings2StartH   0x0
005341  000362  #constant  Strings2StartL   0x800
005342  000362  #constant  Strings2StartL   0x800
005343  000363  #constant  Strings0StartH   0x0
005344  000363  #constant  Strings0StartH   0x0
005345  000364  #constant  Strings0StartL   0xA00
005346  000364  #constant  Strings0StartL   0xA00
005347  000365  #constant  Strings9StartH   0x0
005348  000365  #constant  Strings9StartH   0x0
005349  000366  #constant  Strings9StartL   0xC00
005350  000366  #constant  Strings9StartL   0xC00
005351  000367  #constant  Strings34StartH   0x0
005352  000367  #constant  Strings34StartH   0x0
005353  000368  #constant  Strings34StartL   0xE00
005354  000368  #constant  Strings34StartL   0xE00
005355  000369  #constant  Strings36StartH   0x0
005356  000369  #constant  Strings36StartH   0x0
005357  000370  #constant  Strings36StartL   0x1000
005358  000370  #constant  Strings36StartL   0x1000
005359  000371  #constant  Strings37StartH   0x0
005360  000371  #constant  Strings37StartH   0x0
005361  000372  #constant  Strings37StartL   0x1200
005362  000372  #constant  Strings37StartL   0x1200
005363  000373  #constant  Strings12StartH   0x0
005364  000373  #constant  Strings12StartH   0x0
005365  000374  #constant  Strings12StartL   0x1400
005366  000374  #constant  Strings12StartL   0x1400
005367  000375  #constant  Strings14StartH   0x0
005368  000375  #constant  Strings14StartH   0x0
005369  000376  #constant  Strings14StartL   0x1600
005370  000376  #constant  Strings14StartL   0x1600
005371  000377  #constant  Strings16StartH   0x0
005372  000377  #constant  Strings16StartH   0x0
005373  000378  #constant  Strings16StartL   0x1800
005374  000378  #constant  Strings16StartL   0x1800
005375  000379  #constant  Strings15StartH   0x0
005376  000379  #constant  Strings15StartH   0x0
005377  000380  #constant  Strings15StartL   0x1A00
005378  000380  #constant  Strings15StartL   0x1A00
005379  000381  #constant  Strings21StartH   0x0
005380  000381  #constant  Strings21StartH   0x0
005381  000382  #constant  Strings21StartL   0x1C00
005382  000382  #constant  Strings21StartL   0x1C00
005383  000383  #constant  Strings11StartH   0x0
005384  000383  #constant  Strings11StartH   0x0
005385  000384  #constant  Strings11StartL   0x1E00
005386  000384  #constant  Strings11StartL   0x1E00
005387  000385  #constant  Strings22StartH   0x0
005388  000385  #constant  Strings22StartH   0x0
005389  000386  #constant  Strings22StartL   0x2000
005390  000386  #constant  Strings22StartL   0x2000
005391  000387  #constant  Strings24StartH   0x0
005392  000387  #constant  Strings24StartH   0x0
005393  000388  #constant  Strings24StartL   0x2200
005394  000388  #constant  Strings24StartL   0x2200
005395  000389  #constant  Strings25StartH   0x0
005396  000389  #constant  Strings25StartH   0x0
005397  000390  #constant  Strings25StartL   0x2400
005398  000390  #constant  Strings25StartL   0x2400
005399  000391  #constant  Strings26StartH   0x0
005400  000391  #constant  Strings26StartH   0x0
005401  000392  #constant  Strings26StartL   0x2600
005402  000392  #constant  Strings26StartL   0x2600
005403  000393  #constant  Strings27StartH   0x0
005404  000393  #constant  Strings27StartH   0x0
005405  000394  #constant  Strings27StartL   0x2800
005406  000394  #constant  Strings27StartL   0x2800
005407  000395  #constant  Strings28StartH   0x0
005408  000395  #constant  Strings28StartH   0x0
005409  000396  #constant  Strings28StartL   0x2A00
005410  000396  #constant  Strings28StartL   0x2A00
005411  000397  #constant  Strings35StartH   0x0
005412  000397  #constant  Strings35StartH   0x0
005413  000398  #constant  Strings35StartL   0x2C00
005414  000398  #constant  Strings35StartL   0x2C00
005415  000399  #constant  Strings33StartH   0x0
005416  000399  #constant  Strings33StartH   0x0
005417  000400  #constant  Strings33StartL   0x2E00
005418  000400  #constant  Strings33StartL   0x2E00
005419  000401  #constant  Strings10StartH   0x0
005420  000401  #constant  Strings10StartH   0x0
005421  000402  #constant  Strings10StartL   0x3000
005422  000402  #constant  Strings10StartL   0x3000
005423  000403  #constant  Strings7StartH   0x0
005424  000403  #constant  Strings7StartH   0x0
005425  000404  #constant  Strings7StartL   0x3200
005426  000404  #constant  Strings7StartL   0x3200
005427  000405  #constant  Strings8StartH   0x0
005428  000405  #constant  Strings8StartH   0x0
005429  000406  #constant  Strings8StartL   0x3400
005430  000406  #constant  Strings8StartL   0x3400
005431  000407  #constant  Strings38StartH   0x0
005432  000407  #constant  Strings38StartH   0x0
005433  000408  #constant  Strings38StartL   0x3600
005434  000408  #constant  Strings38StartL   0x3600
005435  000409  #constant  Strings39StartH   0x0
005436  000409  #constant  Strings39StartH   0x0
005437  000410  #constant  Strings39StartL   0x3800
005438  000410  #constant  Strings39StartL   0x3800
005439  000411  #constant  Strings40StartH   0x0
005440  000411  #constant  Strings40StartH   0x0
005441  000412  #constant  Strings40StartL   0x3A00
005442  000412  #constant  Strings40StartL   0x3A00
005443  000413  #constant  Strings41StartH   0x0
005444  000413  #constant  Strings41StartH   0x0
005445  000414  #constant  Strings41StartL   0x3C00
005446  000414  #constant  Strings41StartL   0x3C00
005447  000415  #constant  Strings42StartH   0x0
005448  000415  #constant  Strings42StartH   0x0
005449  000416  #constant  Strings42StartL   0x3E00
005450  000416  #constant  Strings42StartL   0x3E00
005451  000417  #constant  Strings43StartH   0x0
005452  000417  #constant  Strings43StartH   0x0
005453  000418  #constant  Strings43StartL   0x4000
005454  000418  #constant  Strings43StartL   0x4000
005455  000419  #constant  Strings44StartH   0x0
005456  000419  #constant  Strings44StartH   0x0
005457  000420  #constant  Strings44StartL   0x4200
005458  000420  #constant  Strings44StartL   0x4200
005459  000421  #constant  Strings45StartH   0x0
005460  000421  #constant  Strings45StartH   0x0
005461  000422  #constant  Strings45StartL   0x4400
005462  000422  #constant  Strings45StartL   0x4400
005463  000423  #constant  Strings51StartH   0x0
005464  000423  #constant  Strings51StartH   0x0
005465  000424  #constant  Strings51StartL   0x4600
005466  000424  #constant  Strings51StartL   0x4600
005467  000425  #constant  Strings52StartH   0x0
005468  000425  #constant  Strings52StartH   0x0
005469  000426  #constant  Strings52StartL   0x4800
005470  000426  #constant  Strings52StartL   0x4800
005471  000427  #constant  Strings17StartH   0x0
005472  000427  #constant  Strings17StartH   0x0
005473  000428  #constant  Strings17StartL   0x4A00
005474  000428  #constant  Strings17StartL   0x4A00
005475  000429  #constant  Strings18StartH   0x0
005476  000429  #constant  Strings18StartH   0x0
005477  000430  #constant  Strings18StartL   0x4C00
005478  000430  #constant  Strings18StartL   0x4C00
005479  000431  #constant  Strings19StartH   0x0
005480  000431  #constant  Strings19StartH   0x0
005481  000432  #constant  Strings19StartL   0x4E00
005482  000432  #constant  Strings19StartL   0x4E00
005483  000433  #constant  Strings29StartH   0x0
005484  000433  #constant  Strings29StartH   0x0
005485  000434  #constant  Strings29StartL   0x5000
005486  000434  #constant  Strings29StartL   0x5000
005487  000435  #constant  Strings30StartH   0x0
005488  000435  #constant  Strings30StartH   0x0
005489  000436  #constant  Strings30StartL   0x5200
005490  000436  #constant  Strings30StartL   0x5200
005491  000437  #constant  Strings31StartH   0x0
005492  000437  #constant  Strings31StartH   0x0
005493  000438  #constant  Strings31StartL   0x5400
005494  000438  #constant  Strings31StartL   0x5400
005495  000439  #constant  Strings32StartH   0x0
005496  000439  #constant  Strings32StartH   0x0
005497  000440  #constant  Strings32StartL   0x5600
005498  000440  #constant  Strings32StartL   0x5600
005499  000441  #constant  Strings49StartH   0x0
005500  000441  #constant  Strings49StartH   0x0
005501  000442  #constant  Strings49StartL   0x5800
005502  000442  #constant  Strings49StartL   0x5800
005503  000443  #constant  Strings50StartH   0x0
005504  000443  #constant  Strings50StartH   0x0
005505  000444  #constant  Strings50StartL   0x5A00
005506  000444  #constant  Strings50StartL   0x5A00
005507  000445  #constant  Strings13StartH   0x0
005508  000445  #constant  Strings13StartH   0x0
005509  000446  #constant  Strings13StartL   0x5C00
005510  000446  #constant  Strings13StartL   0x5C00
005511  000447  #constant  Strings46StartH   0x0
005512  000447  #constant  Strings46StartH   0x0
005513  000448  #constant  Strings46StartL   0x5E00
005514  000448  #constant  Strings46StartL   0x5E00
005515  000449  #constant  Strings47StartH   0x0
005516  000449  #constant  Strings47StartH   0x0
005517  000450  #constant  Strings47StartL   0x6000
005518  000450  #constant  Strings47StartL   0x6000
005519  000451  #constant  Strings48StartH   0x0
005520  000451  #constant  Strings48StartH   0x0
005521  000452  #constant  Strings48StartL   0x6200
005522  000452  #constant  Strings48StartL   0x6200
005523  000453  #constant  Strings53StartH   0x0
005524  000453  #constant  Strings53StartH   0x0
005525  000454  #constant  Strings53StartL   0x6400
005526  000454  #constant  Strings53StartL   0x6400
005527  000455  #IFNOT EXISTS NOGLOBALS
005528  000456  var hndl ;
005529  000457  #ENDIF
005530  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005531  000013  #inherit "CLPrintStrings.inc"
005532  000013  #inherit "CLPrintStrings.inc"
005533  000001  func PrintStrings(var ID, var *msgid, var String)
005534  000002      var StringID, i, ch, offs32[2], res32[2];
005535  000003      StringID := oStringss[1+ID] ;
005536  000004      if (String)
005537  000005          stringsCV[ID] := -1 ;
005538  000006      else
005539  000007          stringsCV[ID] := msgid ;
005540  000008      endif
005541  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005542  000010      txt_FontID(hFonts[ID]) ;
005543  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005544  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005545  000013        
005546  000014      if (*(StringID + Ofs_String_Transparent))
005547  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005548  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005549  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005550  000018      else
005551  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005552  000020          gfx_Clipping(ON) ;
005553  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005554  000022          gfx_Clipping(OFF) ;
005555  000023        
005556  000024      endif
005557  000025        
005558  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005559  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005560  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005561  000029        
005562  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005563  000031        
005564  000032      if (String)
005565  000033          i := 0 ;
005566  000034          ch := msgid[i++] ;
005567  000035          while (ch != 0)
005568  000036              putch(ch) ;
005569  000037              ch := msgid[i++] ;
005570  000038          wend
005571  000039      else
005572  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005573  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005574  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005575  000043          uadd_3232(res32,res32,offs32) ;
005576  000044          file_Seek(hstrings, res32[1], res32[0]);
005577  000045          repeat
005578  000046              if (*(StringID + Ofs_String_Ansi))
005579  000047                  ch := file_GetC(hstrings) ;
005580  000048              else
005581  000049                  ch := file_GetW(hstrings) ;
005582  000050              endif
005583  000051              putch(ch) ;
005584  000052          until (ch == 0) ;
005585  000053      endif
005586  000054        
005587  000055  endfunc
005588  000056        
005589  000014        
005590  000015  #constant IPDatasize 22
005591  000015  #constant IPDatasize 22
005592  000016        
005593  000017  #CONST
005594  000021  #END
005595  000022        
005596  000023  #CONST
005597  000130  #END
005598  000131        
005599  000556  #END
5600  26C0
5601  26C1
5602  26C2
5603  26C3
5604  26C4
5605  26C5
5606  26C6
5607  26C7
5608  26C8
5609  26C9
5610  26CA
5611  26CB
5612  26CC
5613  26CD
5614  26CE
5615  26CF
5616  26D0
5617  26D1
5618  26D2
5619  26D3
5620  26D4
5621  26D5
5622  26D6
5623  26D7
5624  26D8
5625  26D9
5626  26DA
5627  26DB
5628  26DC
5629  26DD
5630  26DE
5631  26DF
5632  26E0
5633  26E1
5634  26E2
5635  26E3
5636  26E4
5637  26E5
5638  26E6
5639  26E7
5640  26E8
5641  26E9
5642  26EA
5643  26EB
5644  26EC
5645  26ED
5646  26EE
5647  26EF
5648  26F0
5649  26F1
5650  26F2
5651  26F3
5652  26F4
5653  26F5
5654  26F6
5655  26F7
5656  26F8
5657  26F9
5658  26FA
5659  26FB
5660  26FC
5661  26FD
5662  26FE
5663  26FF
5664  2700
5665  2701
5666  2702
5667  2703
5668  2704
5669  2705
5670  2706
5671  2707
5672  2708
5673  2709
5674  270A
5675  270B
5676  270C
5677  270D
5678  270E
5679  270F
5680  2710
5681  2711
5682  2712
5683  2713
5684  2714
5685  2715
5686  2716
5687  2717
5688  2718
5689  2719
5690  271A
5691  271B
5692  271C
5693  271D
5694  271E
5695  271F
5696  2720
5697  2721
5698  2722
5699  2723
5700  2724
5701  2725
5702  2726
5703  2727
5704  2728
5705  2729
5706  272A
5707  272B
5708  272C
5709  272D
5710  272E
5711  272F
5712  2730
5713  2731
5714  2732
5715  2733
5716  2734
5717  2735
5718  2736
5719  2737
5720  2738
5721  2739
5722  273A
5723  273B
5724  273C
5725  273D
5726  273E
5727  273F
5728  2740
5729  2741
5730  2742
5731  2743
5732  2744
5733  2745
5734  2746
5735  2747
5736  2748
5737  2749
5738  274A
5739  274B
5740  274C
5741  274D
5742  274E
5743  274F
5744  2750
5745  2751
5746  2752
5747  2753
5748  2754
5749  2755
5750  2756
5751  2757
5752  2758
5753  2759
5754  275A
5755  275B
5756  275C
5757  275D
5758  275E
5759  275F
5760  2760
5761  2761
5762  2762
5763  2763
5764  2764
5765  2765
5766  2766
5767  2767
5768  2768
5769  2769
5770  276A
5771  276B
5772  276C
5773  276D
5774  276E
5775  276F
5776  2770
5777  2771
5778  2772
5779  2773
5780  2774
5781  2775
5782  2776
5783  2777
5784  2778
5785  2779
5786  277A
5787  277B
5788  277C
5789  277D
5790  277E
5791  277F
5792  2780
5793  2781
5794  2782
5795  2783
5796  2784
5797  2785
5798  2786
5799  2787
5800  2788
5801  2789
5802  278A
5803  278B
5804  278C
5805  278D
5806  278E
5807  278F
5808  2790
5809  2791
5810  2792
5811  2793
5812  2794
5813  2795
5814  2796
5815  2797
5816  2798
5817  2799
5818  279A
5819  279B
5820  279C
5821  279D
5822  279E
5823  279F
5824  27A0
5825  27A1
5826  27A2
5827  27A3
5828  27A4
5829  27A5
5830  27A6
5831  27A7
5832  27A8
5833  27A9
5834  27AA
5835  27AB
5836  27AC
5837  27AD
5838  27AE
5839  27AF
5840  27B0
5841  27B1
5842  27B2
5843  27B3
5844  27B4
5845  27B5
5846  27B6
5847  27B7
5848  27B8
5849  27B9
5850  27BA
5851  27BB
5852  27BC
5853  27BD
5854  27BE
5855  27BF
5856  27C0
5857  27C1
5858  27C2
5859  27C3
5860  27C4
5861  27C5
5862  27C6
5863  27C7
5864  27C8
5865  27C9
5866  27CA
5867  27CB
5868  27CC
5869  27CD
5870  27CE
5871  27CF
5872  27D0
5873  27D1
5874  27D2
5875  27D3
5876  27D4
5877  27D5
5878  27D6
5879  27D7
5880  27D8
5881  27D9
5882  27DA
5883  27DB
5884  27DC
5885  27DD
5886  27DE
5887  27DF
5888  27E0
5889  27E1
5890  27E2
5891  27E3
5892  27E4
5893  27E5
5894  27E6
5895  27E7
5896  27E8
5897  27E9
5898  27EA
5899  27EB
5900  27EC
5901  27ED
5902  27EE
5903  27EF
5904  27F0
5905  27F1
5906  27F2
5907  27F3
5908  27F4
5909  27F5
5910  27F6
5911  27F7
5912  27F8
5913  27F9
5914  27FA
5915  27FB
5916  27FC
5917  27FD
5918  27FE
5919  27FF
5920  2800
5921  2801
5922  2802
5923  2803
5924  2804
5925  2805
5926  2806
5927  2807
5928  2808
5929  2809
5930  280A
5931  280B
5932  280C
5933  280D
5934  280E
5935  280F
5936  2810
5937  2811
5938  2812
5939  2813
5940  2814
5941  2815
5942  2816
5943  2817
5944  2818
5945  2819
5946  281A
5947  281B
5948  281C
5949  281D
5950  281E
5951  281F
5952  2820
5953  2821
5954  2822
5955  2823
5956  2824
5957  2825
5958  2826
5959  2827
5960  2828
5961  2829
5962  282A
5963  282B
5964  282C
5965  282D
5966  282E
5967  282F
5968  2830
5969  2831
5970  2832
5971  2833
5972  2834
5973  2835
5974  2836
5975  2837
5976  2838
5977  2839
5978  283A
5979  283B
5980  283C
5981  283D
5982  283E
5983  283F
5984  2840
5985  2841
5986  2842
5987  2843
5988  2844
5989  2845
5990  2846
5991  2847
5992  2848
5993  2849
5994  284A
5995  284B
5996  284C
5997  284D
5998  284E
5999  284F
6000  2850
6001  2851
6002  2852
6003  2853
6004  2854
6005  2855
6006  2856
6007  2857
6008  2858
6009  2859
6010  285A
6011  285B
6012  285C
6013  285D
6014  285E
6015  285F
6016  2860
6017  2861
6018  2862
6019  2863
6020  2864
6021  2865
6022  2866
6023  2867
6024  2868
6025  2869
6026  286A
6027  286B
6028  286C
6029  286D
6030  286E
6031  286F
6032  2870
6033  2871
6034  2872
6035  2873
6036  2874
6037  2875
6038  2876
6039  2877
6040  2878
6041  2879
6042  287A
6043  287B
6044  287C
6045  287D
6046  287E
6047  287F
6048  2880
6049  2881
6050  2882
6051  2883
6052  2884
6053  2885
6054  2886
6055  2887
6056  2888
6057  2889
6058  288A
6059  288B
6060  288C
6061  288D
6062  288E
6063  288F
6064  2890
6065  2891
6066  2892
6067  2893
6068  2894
6069  2895
6070  2896
6071  2897
6072  2898
6073  2899
6074  289A
6075  289B
6076  289C
6077  289D
6078  289E
6079  289F
6080  28A0
6081  28A1
6082  28A2
6083  28A3
6084  28A4
6085  28A5
6086  28A6
6087  28A7
6088  28A8
6089  28A9
6090  28AA
6091  28AB
6092  28AC
6093  28AD
6094  28AE
6095  28AF
6096  28B0
6097  28B1
6098  28B2
6099  28B3
6100  28B4
6101  28B5
6102  28B6
6103  28B7
6104  28B8
6105  28B9
6106  28BA
6107  28BB
6108  28BC
6109  28BD
6110  28BE
6111  28BF
6112  28C0
6113  28C1
6114  28C2
6115  28C3
6116  28C4
6117  28C5
6118  28C6
6119  28C7
6120  28C8
6121  28C9
6122  28CA
6123  28CB
6124  28CC
6125  28CD
6126  28CE
6127  28CF
6128  28D0
6129  28D1
6130  28D2
6131  28D3
6132  28D4
6133  28D5
6134  28D6
6135  28D7
6136  28D8
6137  28D9
6138  28DA
6139  28DB
6140  28DC
6141  28DD
6142  28DE
6143  28DF
6144  28E0
6145  28E1
6146  28E2
6147  28E3
6148  28E4
6149  28E5
6150  28E6
6151  28E7
6152  28E8
6153  28E9
6154  28EA
6155  28EB
6156  28EC
6157  28ED
6158  28EE
6159  28EF
6160  28F0
6161  28F1
6162  28F2
6163  28F3
6164  28F4
6165  28F5
6166  28F6
6167  28F7
6168  28F8
6169  28F9
6170  28FA
6171  28FB
6172  28FC
6173  28FD
6174  28FE
6175  28FF
6176  2900
6177  2901
6178  2902
6179  2903
6180  2904
6181  2905
6182  2906
6183  2907
6184  2908
6185  2909
6186  290A
6187  290B
6188  290C
6189  290D
6190  290E
6191  290F
6192  2910
6193  2911
6194  2912
6195  2913
6196  2914
6197  2915
6198  2916
6199  2917
6200  2918
6201  2919
6202  291A
6203  291B
6204  291C
6205  291D
6206  291E
6207  291F
6208  2920
6209  2921
6210  2922
6211  2923
6212  2924
6213  2925
6214  2926
6215  2927
6216  2928
6217  2929
6218  292A
6219  292B
6220  292C
6221  292D
6222  292E
6223  292F
6224  2930
6225  2931
6226  2932
6227  2933
6228  2934
6229  2935
6230  2936
6231  2937
6232  2938
6233  2939
6234  293A
6235  293B
6236  293C
6237  293D
6238  293E
6239  293F
6240  2940
6241  2941
6242  2942
6243  2943
6244  2944
6245  2945
6246  2946
6247  2947
6248  2948
6249  2949
6250  294A
6251  294B
6252  294C
6253  294D
6254  294E
6255  294F
6256  2950
6257  2951
6258  2952
6259  2953
6260  2954
6261  2955
6262  2956
6263  2957
6264  2958
6265  2959
6266  295A
6267  295B
6268  295C
6269  295D
6270  295E
6271  295F
6272  2960
6273  2961
6274  2962
6275  2963
6276  2964
6277  2965
6278  2966
6279  2967
6280  2968
6281  2969
6282  296A
6283  296B
6284  296C
6285  296D
6286  296E
6287  296F
6288  2970
6289  2971
6290  2972
6291  2973
6292  2974
6293  2975
6294  2976
6295  2977
6296  2978
6297  2979
6298  297A
6299  297B
6300  297C
6301  297D
6302  297E
6303  297F
6304  2980
6305  2981
6306  2982
6307  2983
6308  2984
6309  2985
6310  2986
6311  2987
6312  2988
6313  2989
6314  298A
6315  298B
6316  298C
6317  298D
6318  298E
6319  298F
6320  2990
6321  2991
6322  2992
6323  2993
6324  2994
6325  2995
6326  2996
6327  2997
6328  2998
6329  2999
6330  299A
6331  299B
6332  299C
6333  299D
6334  299E
6335  299F
6336  29A0
6337  29A1
6338  29A2
6339  29A3
6340  29A4
6341  29A5
6342  29A6
6343  29A7
6344  29A8
6345  29A9
6346  29AA
6347  29AB
6348  29AC
6349  29AD
6350  29AE
6351  29AF
6352  29B0
6353  29B1
6354  29B2
6355  29B3
6356  29B4
6357  29B5
6358  29B6
6359  29B7
6360  29B8
6361  29B9
6362  29BA
6363  29BB
6364  29BC
6365  29BD
6366  29BE
6367  29BF
6368  29C0
6369  29C1
6370  29C2
6371  29C3
6372  29C4
6373  29C5
6374  29C6
6375  29C7
6376  29C8
6377  29C9
6378  29CA
6379  29CB
6380  29CC
6381  29CD
6382  29CE
6383  29CF
6384  29D0
6385  29D1
6386  29D2
6387  29D3
6388  29D4
6389  29D5
6390  29D6
6391  29D7
6392  29D8
6393  29D9
6394  29DA
6395  29DB
6396  29DC
6397  29DD
6398  29DE
6399  29DF
6400  29E0
6401  29E1
6402  29E2
6403  29E3
6404  29E4
6405  29E5
6406  29E6
6407  29E7
6408  29E8
6409  29E9
6410  29EA
6411  29EB
6412  29EC
6413  29ED
6414  29EE
6415  29EF
6416  29F0
6417  29F1
6418  29F2
6419  29F3
6420  29F4
6421  29F5
6422  29F6
6423  29F7
6424  29F8
6425  29F9
6426  29FA
6427  29FB
6428  29FC
6429  29FD
6430  29FE
6431  29FF
6432  2A00
6433  2A01
6434  2A02
6435  2A03
6436  2A04
6437  2A05
6438  2A06
6439  2A07
6440  2A08
6441  2A09
6442  2A0A
6443  2A0B
6444  2A0C
6445  2A0D
6446  2A0E
6447  2A0F
6448  2A10
6449  2A11
6450  2A12
6451  2A13
6452  2A14
6453  2A15
6454  2A16
6455  2A17
6456  2A18
6457  2A19
6458  2A1A
6459  2A1B
6460  2A1C
6461  2A1D
6462  2A1E
6463  2A1F
6464  2A20
6465  2A21
6466  2A22
6467  2A23
6468  2A24
6469  2A25
6470  2A26
6471  2A27
6472  2A28
6473  2A29
6474  2A2A
6475  2A2B
6476  2A2C
6477  2A2D
6478  2A2E
6479  2A2F
6480  2A30
6481  2A31
6482  2A32
6483  2A33
6484  2A34
6485  2A35
6486  2A36
6487  2A37
6488  2A38
6489  2A39
6490  2A3A
6491  2A3B
6492  2A3C
6493  2A3D
6494  2A3E
6495  2A3F
6496  2A40
6497  2A41
6498  2A42
6499  2A43
6500  2A44
6501  2A45
6502  2A46
6503  2A47
6504  2A48
6505  2A49
6506  2A4A
6507  2A4B
6508  2A4C
6509  2A4D
6510  2A4E
6511  2A4F
6512  2A50
6513  2A51
6514  2A52
6515  2A53
6516  2A54
6517  2A55
6518  2A56
6519  2A57
6520  2A58
6521  2A59
6522  2A5A
6523  2A5B
6524  2A5C
6525  2A5D
6526  2A5E
6527  2A5F
6528  2A60
6529  2A61
6530  2A62
6531  2A63
6532  2A64
6533  2A65
6534  2A66
6535  2A67
6536  2A68
6537  2A69
6538  2A6A
6539  2A6B
6540  2A6C
6541  2A6D
6542  2A6E
6543  2A6F
6544  2A70
6545  2A71
6546  2A72
6547  2A73
6548  2A74
6549  2A75
6550  2A76
6551  2A77
6552  2A78
6553  2A79
6554  2A7A
6555  2A7B
6556  2A7C
6557  2A7D
6558  2A7E
6559  2A7F
6560  2A80
6561  2A81
6562  2A82
6563  2A83
6564  2A84
6565  2A85
6566  2A86
6567  2A87
6568  2A88
6569  2A89
6570  2A8A
6571  2A8B
6572  2A8C
6573  2A8D
6574  2A8E
6575  2A8F
6576  2A90
6577  2A91
6578  2A92
6579  2A93
6580  2A94
6581  2A95
6582  2A96
6583  2A97
6584  2A98
6585  2A99
6586  2A9A
6587  2A9B
6588  2A9C
6589  2A9D
6590  2A9E
6591  2A9F
6592  2AA0
6593  2AA1
6594  2AA2
6595  2AA3
6596  2AA4
6597  2AA5
6598  2AA6
6599  2AA7
6600  2AA8
6601  2AA9
6602  2AAA
6603  2AAB
6604  2AAC
6605  2AAD
6606  2AAE
6607  2AAF
6608  2AB0
6609  2AB1
6610  2AB2
6611  2AB3
6612  2AB4
6613  2AB5
6614  2AB6
6615  2AB7
6616  2AB8
6617  2AB9
6618  2ABA
6619  2ABB
6620  2ABC
6621  2ABD
6622  2ABE
6623  2ABF
6624  2AC0
6625  2AC1
6626  2AC2
6627  2AC3
6628  2AC4
6629  2AC5
6630  2AC6
6631  2AC7
6632  2AC8
6633  2AC9
6634  2ACA
6635  2ACB
6636  2ACC
6637  2ACD
6638  2ACE
6639  2ACF
6640  2AD0
6641  2AD1
6642  2AD2
6643  2AD3
6644  2AD4
6645  2AD5
6646  2AD6
6647  2AD7
6648  2AD8
6649  2AD9
6650  2ADA
6651  2ADB
6652  2ADC
6653  2ADD
6654  2ADE
6655  2ADF
6656  2AE0
6657  2AE1
6658  2AE2
6659  2AE3
6660  2AE4
6661  2AE5
6662  2AE6
6663  2AE7
6664  2AE8
6665  2AE9
6666  2AEA
6667  2AEB
6668  2AEC
6669  2AED
6670  2AEE
6671  2AEF
6672  2AF0
6673  2AF1
6674  2AF2
6675  2AF3
6676  2AF4
6677  2AF5
6678  2AF6
6679  2AF7
6680  2AF8
6681  2AF9
6682  2AFA
6683  2AFB
6684  2AFC
6685  2AFD
6686  2AFE
6687  2AFF
6688  2B00
6689  2B01
6690  2B02
6691  2B03
6692  2B04
6693  2B05
6694  2B06
6695  2B07
6696  2B08
6697  2B09
6698  2B0A
6699  2B0B
6700  2B0C
6701  2B0D
6702  2B0E
6703  2B0F
6704  2B10
6705  2B11
6706  2B12
6707  2B13
6708  2B14
6709  2B15
6710  2B16
6711  2B17
6712  2B18
6713  2B19
6714  2B1A
6715  2B1B
6716  2B1C
6717  2B1D
6718  2B1E
6719  2B1F
6720  2B20
6721  2B21
6722  2B22
6723  2B23
6724  2B24
6725  2B25
6726  2B26
6727  2B27
6728  2B28
6729  2B29
6730  2B2A
6731  2B2B
6732  2B2C
6733  2B2D
6734  2B2E
6735  2B2F
6736  2B30
6737  2B31
6738  2B32
6739  2B33
6740  2B34
6741  2B35
6742  2B36
6743  2B37
6744  2B38
6745  2B39
6746  2B3A
6747  2B3B
6748  2B3C
6749  2B3D
6750  2B3E
6751  2B3F
6752  2B40
6753  2B41
6754  2B42
6755  2B43
6756  2B44
6757  2B45
6758  2B46
6759  2B47
6760  2B48
6761  2B49
6762  2B4A
6763  2B4B
6764  2B4C
6765  2B4D
6766  2B4E
6767  2B4F
6768  2B50
6769  2B51
6770  2B52
6771  2B53
6772  2B54
6773  2B55
6774  2B56
6775  2B57
6776  2B58
6777  2B59
6778  2B5A
6779  2B5B
6780  2B5C
6781  2B5D
6782  2B5E
6783  2B5F
6784  2B60
6785  2B61
6786  2B62
6787  2B63
6788  2B64
6789  2B65
6790  2B66
6791  2B67
6792  2B68
6793  2B69
6794  2B6A
6795  2B6B
6796  2B6C
6797  2B6D
6798  2B6E
6799  2B6F
6800  2B70
6801  2B71
6802  2B72
6803  2B73
6804  2B74
6805  2B75
6806  2B76
6807  2B77
6808  2B78
6809  2B79
6810  2B7A
6811  2B7B
6812  2B7C
6813  2B7D
6814  2B7E
6815  2B7F
6816  2B80
6817  2B81
6818  2B82
6819  2B83
6820  2B84
6821  2B85
6822  2B86
6823  2B87
6824  2B88
6825  2B89
6826  2B8A
6827  2B8B
6828  2B8C
6829  2B8D
6830  2B8E
6831  2B8F
6832  2B90
6833  2B91
6834  2B92
6835  2B93
6836  2B94
6837  2B95
6838  2B96
6839  2B97
6840  2B98
6841  2B99
6842  2B9A
6843  2B9B
6844  2B9C
6845  2B9D
6846  2B9E
6847  2B9F
6848  2BA0
6849  2BA1
6850  2BA2
6851  2BA3
6852  2BA4
6853  2BA5
6854  2BA6
6855  2BA7
6856  2BA8
6857  2BA9
6858  2BAA
6859  2BAB
6860  2BAC
6861  2BAD
6862  2BAE
6863  2BAF
6864  2BB0
6865  2BB1
6866  2BB2
6867  2BB3
6868  2BB4
6869  2BB5
6870  2BB6
6871  2BB7
6872  2BB8
6873  2BB9
6874  2BBA
6875  2BBB
6876  2BBC
6877  2BBD
6878  2BBE
6879  2BBF
6880  2BC0
6881  2BC1
6882  2BC2
6883  2BC3
6884  2BC4
6885  2BC5
6886  2BC6
6887  2BC7
6888  2BC8
6889  2BC9
6890  2BCA
6891  2BCB
6892  2BCC
6893  2BCD
6894  2BCE
6895  2BCF
6896  2BD0
6897  2BD1
6898  2BD2
6899  2BD3
6900  2BD4
6901  2BD5
6902  2BD6
6903  2BD7
6904  2BD8
6905  2BD9
6906  2BDA
6907  2BDB
6908  2BDC
6909  2BDD
6910  2BDE
6911  2BDF
6912  2BE0
6913  2BE1
6914  2BE2
6915  2BE3
6916  2BE4
6917  2BE5
6918  2BE6
6919  2BE7
6920  2BE8
6921  2BE9
6922  2BEA
6923  2BEB
6924  2BEC
6925  2BED
6926  2BEE
6927  2BEF
6928  2BF0
6929  2BF1
6930  2BF2
6931  2BF3
6932  2BF4
6933  2BF5
6934  2BF6
6935  2BF7
6936  2BF8
6937  2BF9
6938  2BFA
6939  2BFB
6940  2BFC
6941  2BFD
6942  2BFE
6943  2BFF
6944  2C00
6945  2C01
6946  2C02
6947  2C03
6948  2C04
6949  2C05
6950  2C06
6951  2C07
6952  2C08
6953  2C09
6954  2C0A
6955  2C0B
6956  2C0C
6957  2C0D
6958  2C0E
6959  2C0F
6960  2C10
6961  2C11
6962  2C12
6963  2C13
6964  2C14
6965  2C15
6966  2C16
6967  2C17
6968  2C18
6969  2C19
6970  2C1A
6971  2C1B
6972  2C1C
6973  2C1D
6974  2C1E
6975  2C1F
6976  2C20
6977  2C21
6978  2C22
6979  2C23
6980  2C24
6981  2C25
6982  2C26
6983  2C27
6984  2C28
6985  2C29
6986  2C2A
6987  2C2B
6988  2C2C
6989  2C2D
6990  2C2E
6991  2C2F
6992  2C30
6993  2C31
6994  2C32
6995  2C33
6996  2C34
6997  2C35
6998  2C36
6999  2C37
7000  2C38
7001  2C39
7002  2C3A
7003  2C3B
7004  2C3C
7005  2C3D
7006  2C3E
7007  2C3F
7008  2C40
7009  2C41
7010  2C42
7011  2C43
7012  2C44
7013  2C45
7014  2C46
7015  2C47
7016  2C48
7017  2C49
7018  2C4A
7019  2C4B
7020  2C4C
7021  2C4D
7022  2C4E
7023  2C4F
7024  2C50
7025  2C51
7026  2C52
7027  2C53
7028  2C54
7029  2C55
7030  2C56
7031  2C57
7032  2C58
7033  2C59
7034  2C5A
7035  2C5B
7036  2C5C
7037  2C5D
7038  2C5E
7039  2C5F
7040  2C60
7041  2C61
7042  2C62
7043  2C63
7044  2C64
7045  2C65
7046  2C66
7047  2C67
7048  2C68
7049  2C69
7050  2C6A
7051  2C6B
7052  2C6C
7053  2C6D
7054  2C6E
7055  2C6F
7056  2C70
7057  2C71
7058  2C72
7059  2C73
7060  2C74
7061  2C75
7062  2C76
7063  2C77
7064  2C78
7065  2C79
7066  2C7A
7067  2C7B
7068  2C7C
7069  2C7D
7070  2C7E
7071  2C7F
7072  2C80
7073  2C81
7074  2C82
7075  2C83
7076  2C84
7077  2C85
7078  2C86
7079  2C87
7080  2C88
7081  2C89
7082  2C8A
7083  2C8B
7084  2C8C
7085  2C8D
7086  2C8E
7087  2C8F
7088  2C90
7089  2C91
7090  2C92
7091  2C93
7092  2C94
7093  2C95
7094  2C96
7095  2C97
7096  2C98
7097  2C99
7098  2C9A
7099  2C9B
7100  2C9C
7101  2C9D
7102  2C9E
7103  2C9F
7104  2CA0
7105  2CA1
7106  2CA2
7107  2CA3
7108  2CA4
7109  2CA5
7110  2CA6
7111  2CA7
7112  2CA8
7113  2CA9
7114  2CAA
7115  2CAB
7116  2CAC
7117  2CAD
7118  2CAE
7119  2CAF
7120  2CB0
7121  2CB1
7122  2CB2
7123  2CB3
7124  2CB4
7125  2CB5
7126  2CB6
7127  2CB7
7128  2CB8
7129  2CB9
7130  2CBA
7131  2CBB
7132  2CBC
7133  2CBD
7134  2CBE
7135  2CBF
7136  2CC0
7137  2CC1
7138  2CC2
7139  2CC3
7140  2CC4
7141  2CC5
7142  2CC6
7143  2CC7
7144  2CC8
7145  2CC9
7146  2CCA
7147  2CCB
7148  2CCC
7149  2CCD
7150  2CCE
7151  2CCF
7152  2CD0
7153  2CD1
7154  2CD2
7155  2CD3
7156  2CD4
7157  2CD5
7158  2CD6
7159  2CD7
7160  2CD8
7161  2CD9
7162  2CDA
7163  2CDB
7164  2CDC
7165  2CDD
7166  2CDE
7167  2CDF
7168  2CE0
7169  2CE1
7170  2CE2
7171  2CE3
7172  2CE4
7173  2CE5
7174  2CE6
7175  2CE7
7176  2CE8
7177  2CE9
7178  2CEA
7179  2CEB
7180  2CEC
7181  2CED
7182  2CEE
7183  2CEF
7184  2CF0
7185  2CF1
7186  2CF2
7187  2CF3
7188  2CF4
7189  2CF5
7190  2CF6
7191  2CF7
7192  2CF8
7193  2CF9
7194  2CFA
7195  2CFB
7196  2CFC
7197  2CFD
7198  2CFE
7199  2CFF
7200  2D00
7201  2D01
7202  2D02
7203  2D03
7204  2D04
7205  2D05
7206  2D06
7207  2D07
7208  2D08
7209  2D09
7210  2D0A
7211  2D0B
7212  2D0C
7213  2D0D
7214  2D0E
7215  2D0F
7216  2D10
7217  2D11
7218  2D12
7219  2D13
7220  2D14
7221  2D15
7222  2D16
7223  2D17
7224  2D18
7225  2D19
7226  2D1A
7227  2D1B
7228  2D1C
7229  2D1D
7230  2D1E
7231  2D1F
7232  2D20
7233  2D21
7234  2D22
7235  2D23
7236  2D24
7237  2D25
7238  2D26
7239  2D27
7240  2D28
7241  2D29
7242  2D2A
7243  2D2B
7244  2D2C
7245  2D2D
7246  2D2E
7247  2D2F
7248  2D30
7249  2D31
7250  2D32
7251  2D33
7252  2D34
7253  2D35
7254  2D36
7255  2D37
7256  2D38
7257  2D39
7258  2D3A
7259  2D3B
7260  2D3C
7261  2D3D
7262  2D3E
7263  2D3F
7264  2D40
7265  2D41
7266  2D42
7267  2D43
7268  2D44
7269  2D45
7270  2D46
7271  2D47
7272  2D48
7273  2D49
7274  2D4A
7275  2D4B
7276  2D4C
7277  2D4D
7278  2D4E
7279  2D4F
7280  2D50
7281  2D51
7282  2D52
7283  2D53
7284  2D54
7285  2D55
7286  2D56
7287  2D57
7288  2D58
7289  2D59
7290  2D5A
7291  2D5B
7292  2D5C
7293  2D5D
7294  2D5E
7295  2D5F
7296  2D60
7297  2D61
7298  2D62
7299  2D63
7300  2D64
7301  2D65
7302  2D66
7303  2D67
7304  2D68
7305  2D69
7306  2D6A
7307  2D6B
7308  2D6C
7309  2D6D
7310  2D6E
7311  2D6F
7312  2D70
7313  2D71
7314  2D72
7315  2D73
7316  2D74
7317  2D75
7318  2D76
7319  2D77
7320  2D78
7321  2D79
7322  2D7A
7323  2D7B
7324  2D7C
7325  2D7D
7326  2D7E
7327  2D7F
7328  2D80
7329  2D81
7330  2D82
7331  2D83
7332  2D84
7333  2D85
7334  2D86
7335  2D87
7336  2D88
7337  2D89
7338  2D8A
7339  2D8B
7340  2D8C
7341  2D8D
7342  2D8E
7343  2D8F
7344  2D90
7345  2D91
7346  2D92
7347  2D93
7348  2D94
7349  2D95
7350  2D96
7351  2D97
7352  2D98
7353  2D99
7354  2D9A
7355  2D9B
7356  2D9C
7357  2D9D
7358  2D9E
7359  2D9F
7360  2DA0
7361  2DA1
7362  2DA2
7363  2DA3
7364  2DA4
7365  2DA5
7366  2DA6
7367  2DA7
7368  2DA8
7369  2DA9
7370  2DAA
7371  2DAB
7372  2DAC
7373  2DAD
7374  2DAE
7375  2DAF
7376  2DB0
7377  2DB1
7378  2DB2
7379  2DB3
7380  2DB4
7381  2DB5
7382  2DB6
7383  2DB7
7384  2DB8
7385  2DB9
7386  2DBA
7387  2DBB
7388  2DBC
7389  2DBD
7390  2DBE
7391  2DBF
7392  2DC0
7393  2DC1
7394  2DC2
7395  2DC3
7396  2DC4
7397  2DC5
7398  2DC6
7399  2DC7
7400  2DC8
7401  2DC9
7402  2DCA
7403  2DCB
7404  2DCC
7405  2DCD
7406  2DCE
7407  2DCF
7408  2DD0
7409  2DD1
7410  2DD2
7411  2DD3
7412  2DD4
7413  2DD5
7414  2DD6
7415  2DD7
7416  2DD8
7417  2DD9
7418  2DDA
7419  2DDB
7420  2DDC
7421  2DDD
7422  2DDE
7423  2DDF
7424  2DE0
7425  2DE1
7426  2DE2
7427  2DE3
7428  2DE4
7429  2DE5
7430  2DE6
7431  2DE7
7432  2DE8
7433  2DE9
7434  2DEA
7435  2DEB
7436  2DEC
7437  2DED
7438  2DEE
7439  2DEF
7440  2DF0
7441  2DF1
7442  2DF2
7443  2DF3
7444  2DF4
7445  2DF5
7446  2DF6
7447  2DF7
7448  2DF8
7449  2DF9
7450  2DFA
7451  2DFB
7452  2DFC
7453  2DFD
7454  2DFE
7455  2DFF
7456  2E00
7457  2E01
7458  2E02
7459  2E03
7460  2E04
7461  2E05
7462  2E06
7463  2E07
7464  2E08
7465  2E09
7466  2E0A
7467  2E0B
7468  2E0C
7469  2E0D
7470  2E0E
7471  2E0F
7472  2E10
7473  2E11
7474  2E12
7475  2E13
7476  2E14
7477  2E15
7478  2E16
7479  2E17
7480  2E18
7481  2E19
7482  2E1A
7483  2E1B
7484  2E1C
7485  2E1D
7486  2E1E
7487  2E1F
7488  2E20
7489  2E21
7490  2E22
7491  2E23
7492  2E24
7493  2E25
7494  2E26
7495  2E27
7496  2E28
7497  2E29
7498  2E2A
7499  2E2B
7500  2E2C
7501  2E2D
7502  2E2E
7503  2E2F
7504  2E30
7505  2E31
7506  2E32
7507  2E33
7508  2E34
7509  2E35
7510  2E36
7511  2E37
7512  2E38
7513  2E39
7514  2E3A
7515  2E3B
7516  2E3C
7517  2E3D
7518  2E3E
7519  2E3F
7520  2E40
7521  2E41
7522  2E42
7523  2E43
7524  2E44
7525  2E45
7526  2E46
7527  2E47
7528  2E48
7529  2E49
7530  2E4A
7531  2E4B
7532  2E4C
7533  2E4D
7534  2E4E
7535  2E4F
7536  2E50
7537  2E51
7538  2E52
7539  2E53
7540  2E54
7541  2E55
7542  2E56
7543  2E57
7544  2E58
7545  2E59
7546  2E5A
7547  2E5B
7548  2E5C
7549  2E5D
7550  2E5E
7551  2E5F
7552  2E60
7553  2E61
7554  2E62
7555  2E63
7556  2E64
7557  2E65
7558  2E66
7559  2E67
7560  2E68
7561  2E69
7562  2E6A
7563  2E6B
7564  2E6C
7565  2E6D
7566  2E6E
7567  2E6F
7568  2E70
7569  2E71
7570  2E72
7571  2E73
7572  2E74
7573  2E75
7574  2E76
7575  2E77
7576  2E78
7577  2E79
7578  2E7A
7579  2E7B
7580  2E7C
7581  2E7D
7582  2E7E
7583  2E7F
7584  2E80
7585  2E81
7586  2E82
7587  2E83
7588  2E84
7589  2E85
7590  2E86
7591  2E87
7592  2E88
7593  2E89
7594  2E8A
7595  2E8B
7596  2E8C
7597  2E8D
7598  2E8E
7599  2E8F
7600  2E90
7601  2E91
7602  2E92
7603  2E93
7604  2E94
7605  2E95
7606  2E96
7607  2E97
7608  2E98
7609  2E99
7610  2E9A
7611  2E9B
7612  2E9C
7613  2E9D
7614  2E9E
7615  2E9F
7616  2EA0
7617  2EA1
7618  2EA2
7619  2EA3
7620  2EA4
7621  2EA5
7622  2EA6
7623  2EA7
7624  2EA8
7625  2EA9
7626  2EAA
7627  2EAB
7628  2EAC
7629  2EAD
7630  2EAE
7631  2EAF
7632  2EB0
7633  2EB1
7634  2EB2
7635  2EB3
7636  2EB4
7637  2EB5
7638  2EB6
7639  2EB7
7640  2EB8
7641  2EB9
7642  2EBA
7643  2EBB
7644  2EBC
7645  2EBD
7646  2EBE
7647  2EBF
7648  2EC0
7649  2EC1
7650  2EC2
7651  2EC3
7652  2EC4
7653  2EC5
7654  2EC6
7655  2EC7
7656  2EC8
7657  2EC9
7658  2ECA
7659  2ECB
7660  2ECC
7661  2ECD
7662  2ECE
7663  2ECF
7664  2ED0
7665  2ED1
7666  2ED2
7667  2ED3
7668  2ED4
7669  2ED5
7670  2ED6
7671  2ED7
7672  2ED8
7673  2ED9
7674  2EDA
7675  2EDB
7676  2EDC
7677  2EDD
7678  2EDE
7679  2EDF
7680  2EE0
7681  2EE1
7682  2EE2
7683  2EE3
7684  2EE4
7685  2EE5
7686  2EE6
7687  2EE7
7688  2EE8
7689  2EE9
7690  2EEA
7691  2EEB
7692  2EEC
7693  2EED
7694  2EEE
7695  2EEF
7696  2EF0
7697  2EF1
7698  2EF2
7699  2EF3
7700  2EF4
7701  2EF5
7702  2EF6
7703  2EF7
7704  2EF8
7705  2EF9
7706  2EFA
7707  2EFB
7708  2EFC
7709  2EFD
7710  2EFE
7711  2EFF
7712  2F00
7713  2F01
7714  2F02
7715  2F03
7716  2F04
7717  2F05
7718  2F06
7719  2F07
7720  2F08
7721  2F09
7722  2F0A
7723  2F0B
7724  2F0C
7725  2F0D
7726  2F0E
7727  2F0F
7728  2F10
7729  2F11
7730  2F12
7731  2F13
7732  2F14
7733  2F15
7734  2F16
7735  2F17
7736  2F18
7737  2F19
7738  2F1A
7739  2F1B
7740  2F1C
7741  2F1D
7742  2F1E
7743  2F1F
7744  2F20
7745  2F21
7746  2F22
7747  2F23
7748  2F24
7749  2F25
7750  2F26
7751  2F27
7752  2F28
7753  2F29
7754  2F2A
7755  2F2B
7756  2F2C
7757  2F2D
7758  2F2E
7759  2F2F
7760  2F30
7761  2F31
7762  2F32
7763  2F33
7764  2F34
7765  2F35
7766  2F36
7767  2F37
7768  2F38
7769  2F39
7770  2F3A
7771  2F3B
7772  2F3C
7773  2F3D
7774  2F3E
7775  2F3F
7776  2F40
7777  2F41
7778  2F42
7779  2F43
7780  2F44
7781  2F45
7782  2F46
7783  2F47
7784  2F48
7785  2F49
7786  2F4A
7787  2F4B
7788  2F4C
7789  2F4D
7790  2F4E
7791  2F4F
7792  2F50
7793  2F51
7794  2F52
7795  2F53
7796  2F54
7797  2F55
7798  2F56
7799  2F57
7800  2F58
7801  2F59
7802  2F5A
7803  2F5B
7804  2F5C
7805  2F5D
7806  2F5E
7807  2F5F
7808  2F60
7809  2F61
7810  2F62
7811  2F63
7812  2F64
7813  2F65
7814  2F66
7815  2F67
7816  2F68
7817  2F69
7818  2F6A
7819  2F6B
7820  2F6C
7821  2F6D
7822  2F6E
7823  2F6F
7824  2F70
7825  2F71
7826  2F72
7827  2F73
7828  2F74
7829  2F75
7830  2F76
7831  2F77
7832  2F78
7833  2F79
7834  2F7A
7835  2F7B
7836  2F7C
7837  2F7D
7838  2F7E
7839  2F7F
7840  2F80
7841  2F81
7842  2F82
7843  2F83
7844  2F84
7845  2F85
7846  2F86
7847  2F87
7848  2F88
7849  2F89
7850  2F8A
7851  2F8B
7852  2F8C
7853  2F8D
7854  2F8E
7855  2F8F
7856  2F90
7857  2F91
7858  2F92
7859  2F93
7860  2F94
7861  2F95
7862  2F96
7863  2F97
7864  2F98
7865  2F99
7866  2F9A
7867  2F9B
7868  2F9C
7869  2F9D
7870  2F9E
7871  2F9F
7872  2FA0
7873  2FA1
7874  2FA2
7875  2FA3
7876  2FA4
7877  2FA5
7878  2FA6
7879  2FA7
7880  2FA8
7881  2FA9
7882  2FAA
7883  2FAB
7884  2FAC
7885  2FAD
7886  2FAE
7887  2FAF
7888  2FB0
7889  2FB1
7890  2FB2
7891  2FB3
7892  2FB4
7893  2FB5
7894  2FB6
7895  2FB7
7896  2FB8
7897  2FB9
7898  2FBA
7899  2FBB
7900  2FBC
7901  2FBD
7902  2FBE
7903  2FBF
7904  2FC0
7905  2FC1
7906  2FC2
7907  2FC3
7908  2FC4
7909  2FC5
7910  2FC6
7911  2FC7
7912  2FC8
7913  2FC9
7914  2FCA
7915  2FCB
7916  2FCC
7917  2FCD
7918  2FCE
7919  2FCF
7920  2FD0
7921  2FD1
7922  2FD2
7923  2FD3
7924  2FD4
7925  2FD5
7926  2FD6
7927  2FD7
7928  2FD8
7929  2FD9
7930  2FDA
7931  2FDB
7932  2FDC
7933  2FDD
7934  2FDE
7935  2FDF
7936  2FE0
7937  2FE1
7938  2FE2
7939  2FE3
7940  2FE4
7941  2FE5
7942  2FE6
7943  2FE7
7944  2FE8
7945  2FE9
7946  2FEA
7947  2FEB
7948  2FEC
7949  2FED
7950  2FEE
7951  2FEF
7952  2FF0
7953  2FF1
7954  2FF2
7955  2FF3
7956  2FF4
7957  2FF5
7958  2FF6
7959  2FF7
7960  2FF8
7961  2FF9
7962  2FFA
7963  2FFB
7964  2FFC
7965  2FFD
7966  2FFE
7967  2FFF
7968  3000
7969  3001
7970  3002
7971  3003
7972  3004
7973  3005
7974  3006
7975  3007
7976  3008
7977  3009
7978  300A
7979  300B
7980  300C
7981  300D
7982  300E
7983  300F
7984  3010
7985  3011
7986  3012
7987  3013
7988  3014
7989  3015
7990  3016
7991  3017
7992  3018
7993  3019
7994  301A
7995  301B
7996  301C
7997  301D
7998  301E
7999  301F
8000  3020
8001  3021
8002  3022
8003  3023
8004  3024
8005  3025
8006  3026
8007  3027
8008  3028
8009  3029
8010  302A
8011  302B
8012  302C
8013  302D
8014  302E
8015  302F
8016  3030
8017  3031
8018  3032
8019  3033
8020  3034
8021  3035
8022  3036
8023  3037
8024  3038
8025  3039
8026  303A
8027  303B
8028  303C
8029  303D
8030  303E
8031  303F
8032  3040
8033  3041
8034  3042
8035  3043
8036  3044
8037  3045
8038  3046
8039  3047
8040  3048
8041  3049
8042  304A
8043  304B
8044  304C
8045  304D
8046  304E
8047  304F
8048  3050
8049  3051
8050  3052
8051  3053
8052  3054
8053  3055
8054  3056
8055  3057
8056  3058
8057  3059
8058  305A
8059  305B
8060  305C
8061  305D
8062  305E
8063  305F
8064  3060
8065  3061
8066  3062
8067  3063
8068  3064
8069  3065
8070  3066
8071  3067
8072  3068
8073  3069
8074  306A
8075  306B
8076  306C
8077  306D
8078  306E
8079  306F
8080  3070
8081  3071
8082  3072
8083  3073
8084  3074
8085  3075
8086  3076
8087  3077
8088  3078
8089  3079
8090  307A
8091  307B
8092  307C
8093  307D
8094  307E
8095  307F
8096  3080
8097  3081
8098  3082
8099  3083
8100  3084
8101  3085
8102  3086
8103  3087
8104  3088
8105  3089
8106  308A
8107  308B
8108  308C
8109  308D
8110  308E
8111  308F
8112  3090
8113  3091
8114  3092
8115  3093
8116  3094
8117  3095
8118  3096
8119  3097
8120  3098
8121  3099
8122  309A
8123  309B
8124  309C
8125  309D
8126  309E
8127  309F
8128  30A0
8129  30A1
8130  30A2
8131  30A3
8132  30A4
8133  30A5
8134  30A6
8135  30A7
8136  30A8
8137  30A9
8138  30AA
8139  30AB
8140  30AC
8141  30AD
8142  30AE
8143  30AF
8144  30B0
8145  30B1
8146  30B2
8147  30B3
8148  30B4
8149  30B5
8150  30B6
8151  30B7
8152  30B8
8153  30B9
8154  30BA
8155  30BB
8156  30BC
8157  30BD
8158  30BE
8159  30BF
8160  30C0
8161  30C1
8162  30C2
8163  30C3
8164  30C4
8165  30C5
8166  30C6
8167  30C7
8168  30C8
8169  30C9
8170  30CA
8171  30CB
8172  30CC
8173  30CD
8174  30CE
8175  30CF
8176  30D0
8177  30D1
8178  30D2
8179  30D3
8180  30D4
8181  30D5
8182  30D6
8183  30D7
8184  30D8
8185  30D9
8186  30DA
8187  30DB
8188  30DC
8189  30DD
8190  30DE
8191  30DF
8192  30E0
8193  30E1
8194  30E2
8195  30E3
8196  30E4
8197  30E5
8198  30E6
8199  30E7
8200  30E8
8201  30E9
8202  30EA
8203  30EB
8204  30EC
8205  30ED
8206  30EE
8207  30EF
8208  30F0
8209  30F1
8210  30F2
8211  30F3
8212  30F4
8213  30F5
8214  30F6
8215  30F7
8216  30F8
8217  30F9
8218  30FA
8219  30FB
8220  30FC
8221  30FD
8222  30FE
8223  30FF
8224  3100
8225  3101
8226  3102
8227  3103
8228  3104
8229  3105
8230  3106
8231  3107
8232  3108
8233  3109
8234  310A
8235  310B
8236  310C
8237  310D
8238  310E
8239  310F
8240  3110
8241  3111
8242  3112
8243  3113
8244  3114
8245  3115
8246  3116
8247  3117
8248  3118
8249  3119
8250  311A
8251  311B
8252  311C
8253  311D
8254  311E
8255  311F
8256  3120
8257  3121
8258  3122
8259  3123
8260  3124
8261  3125
8262  3126
8263  3127
8264  3128
8265  3129
8266  312A
8267  312B
8268  312C
8269  312D
8270  312E
8271  312F
8272  3130
8273  3131
8274  3132
8275  3133
8276  3134
8277  3135
8278  3136
8279  3137
8280  3138
8281  3139
8282  313A
8283  313B
8284  313C
8285  313D
8286  313E
8287  313F
8288  3140
8289  3141
8290  3142
8291  3143
8292  3144
8293  3145
8294  3146
8295  3147
8296  3148
8297  3149
8298  314A
8299  314B
8300  314C
8301  314D
8302  314E
8303  314F
8304  3150
8305  3151
8306  3152
8307  3153
8308  3154
8309  3155
8310  3156
8311  3157
8312  3158
8313  3159
8314  315A
8315  315B
8316  315C
8317  315D
8318  315E
8319  315F
8320  3160
8321  3161
8322  3162
8323  3163
8324  3164
8325  3165
8326  3166
8327  3167
8328  3168
8329  3169
8330  316A
8331  316B
8332  316C
8333  316D
8334  316E
8335  316F
8336  3170
8337  3171
8338  3172
8339  3173
8340  3174
8341  3175
8342  3176
8343  3177
8344  3178
8345  3179
8346  317A
8347  317B
8348  317C
8349  317D
8350  317E
8351  317F
8352  3180
8353  3181
8354  3182
8355  3183
8356  3184
8357  3185
8358  3186
8359  3187
8360  3188
8361  3189
8362  318A
8363  318B
8364  318C
8365  318D
8366  318E
8367  318F
8368  3190
8369  3191
8370  3192
8371  3193
8372  3194
8373  3195
8374  3196
8375  3197
8376  3198
8377  3199
8378  319A
8379  319B
8380  319C
8381  319D
8382  319E
8383  319F
8384  31A0
8385  31A1
8386  31A2
8387  31A3
8388  31A4
8389  31A5
8390  31A6
8391  31A7
8392  31A8
8393  31A9
8394  31AA
8395  31AB
8396  31AC
8397  31AD
8398  31AE
8399  31AF
8400  31B0
8401  31B1
8402  31B2
8403  31B3
8404  31B4
8405  31B5
8406  31B6
8407  31B7
8408  31B8
8409  31B9
8410  31BA
8411  31BB
8412  31BC
8413  31BD
8414  31BE
8415  31BF
8416  31C0
8417  31C1
8418  31C2
8419  31C3
8420  31C4
8421  31C5
8422  31C6
8423  31C7
8424  31C8
8425  31C9
8426  31CA
8427  31CB
8428  31CC
8429  31CD
8430  31CE
8431  31CF
8432  31D0
8433  31D1
8434  31D2
8435  31D3
8436  31D4
8437  31D5
8438  31D6
8439  31D7
8440  31D8
8441  31D9
8442  31DA
8443  31DB
8444  31DC
8445  31DD
8446  31DE
8447  31DF
8448  31E0
8449  31E1
8450  31E2
8451  31E3
8452  31E4
8453  31E5
8454  31E6
8455  31E7
8456  31E8
8457  31E9
8458  31EA
8459  31EB
8460  31EC
8461  31ED
8462  31EE
8463  31EF
8464  31F0
8465  31F1
8466  31F2
8467  31F3
8468  31F4
8469  31F5
8470  31F6
8471  31F7
8472  31F8
8473  31F9
8474  31FA
8475  31FB
8476  31FC
8477  31FD
8478  31FE
8479  31FF
8480  3200
8481  3201
8482  3202
8483  3203
8484  3204
8485  3205
8486  3206
8487  3207
8488  3208
8489  3209
8490  320A
8491  320B
8492  320C
8493  320D
8494  320E
8495  320F
8496  3210
8497  3211
8498  3212
8499  3213
8500  3214
8501  3215
8502  3216
8503  3217
8504  3218
8505  3219
8506  321A
8507  321B
8508  321C
8509  321D
8510  321E
8511  321F
8512  3220
8513  3221
8514  3222
8515  3223
8516  3224
8517  3225
8518  3226
8519  3227
8520  3228
8521  3229
8522  322A
8523  322B
8524  322C
8525  322D
8526  322E
8527  322F
8528  3230
8529  3231
8530  3232
8531  3233
8532  3234
8533  3235
8534  3236
8535  3237
8536  3238
8537  3239
8538  323A
8539  323B
8540  323C
8541  323D
8542  323E
8543  323F
8544  3240
8545  3241
8546  3242
8547  3243
8548  3244
8549  3245
8550  3246
8551  3247
8552  3248
8553  3249
8554  324A
8555  324B
8556  324C
8557  324D
8558  324E
8559  324F
8560  3250
8561  3251
8562  3252
8563  3253
8564  3254
8565  3255
8566  3256
8567  3257
8568  3258
8569  3259
8570  325A
8571  325B
8572  325C
8573  325D
8574  325E
8575  325F
8576  3260
8577  3261
8578  3262
8579  3263
8580  3264
8581  3265
8582  3266
8583  3267
8584  3268
8585  3269
8586  326A
8587  326B
8588  326C
8589  326D
8590  326E
8591  326F
8592  3270
8593  3271
8594  3272
8595  3273
8596  3274
8597  3275
8598  3276
8599  3277
8600  3278
8601  3279
8602  327A
8603  327B
8604  327C
8605  327D
8606  327E
8607  327F
8608  3280
8609  3281
8610  3282
8611  3283
8612  3284
8613  3285
8614  3286
8615  3287
8616  3288
8617  3289
8618  328A
8619  328B
8620  328C
8621  328D
8622  328E
8623  328F
8624  3290
8625  3291
8626  3292
8627  3293
8628  3294
8629  3295
8630  3296
8631  3297
8632  3298
8633  3299
8634  329A
8635  329B
8636  329C
8637  329D
8638  329E
8639  329F
8640  32A0
8641  32A1
8642  32A2
8643  32A3
8644  32A4
8645  32A5
8646  32A6
8647  32A7
8648  32A8
8649  32A9
8650  32AA
8651  32AB
8652  32AC
8653  32AD
8654  32AE
8655  32AF
8656  32B0
8657  32B1
8658  32B2
8659  32B3
8660  32B4
8661  32B5
8662  32B6
8663  32B7
8664  32B8
8665  32B9
8666  32BA
8667  32BB
8668  32BC
8669  32BD
8670  32BE
8671  32BF
8672  32C0
8673  32C1
8674  32C2
8675  32C3
8676  32C4
8677  32C5
8678  32C6
8679  32C7
8680  32C8
8681  32C9
8682  32CA
8683  32CB
8684  32CC
8685  32CD
8686  32CE
8687  32CF
8688  32D0
8689  32D1
8690  32D2
8691  32D3
8692  32D4
8693  32D5
8694  32D6
8695  32D7
8696  32D8
8697  32D9
8698  32DA
8699  32DB
8700  32DC
8701  32DD
8702  32DE
8703  32DF
8704  32E0
8705  32E1
8706  32E2
8707  32E3
8708  32E4
8709  32E5
8710  32E6
8711  32E7
8712  32E8
8713  32E9
8714  32EA
8715  32EB
8716  32EC
8717  32ED
8718  32EE
8719  32EF
8720  32F0
8721  32F1
8722  32F2
8723  32F3
8724  32F4
8725  32F5
8726  32F6
8727  32F7
8728  32F8
8729  32F9
8730  32FA
8731  32FB
8732  32FC
8733  32FD
8734  32FE
8735  32FF
8736  3300
8737  3301
8738  3302
8739  3303
8740  3304
8741  3305
8742  3306
8743  3307
8744  3308
8745  3309
8746  330A
8747  330B
8748  330C
8749  330D
8750  330E
8751  330F
8752  3310
8753  3311
8754  3312
8755  3313
8756  3314
8757  3315
8758  3316
8759  3317
8760  3318
8761  3319
8762  331A
8763  331B
8764  331C
8765  331D
8766  331E
8767  331F
8768  3320
8769  3321
8770  3322
8771  3323
8772  3324
8773  3325
8774  3326
8775  3327
8776  3328
8777  3329
8778  332A
8779  332B
8780  332C
8781  332D
8782  332E
8783  332F
8784  3330
8785  3331
8786  3332
8787  3333
8788  3334
8789  3335
8790  3336
8791  3337
8792  3338
8793  3339
8794  333A
8795  333B
8796  333C
8797  333D
8798  333E
8799  333F
8800  3340
8801  3341
8802  3342
8803  3343
8804  3344
8805  3345
8806  3346
8807  3347
8808  3348
8809  3349
8810  334A
8811  334B
8812  334C
8813  334D
8814  334E
8815  334F
8816  3350
8817  3351
8818  3352
8819  3353
8820  3354
8821  3355
8822  3356
8823  3357
8824  3358
8825  3359
8826  335A
8827  335B
8828  335C
8829  335D
8830  335E
8831  335F
8832  3360
8833  3361
8834  3362
8835  3363
8836  3364
8837  3365
8838  3366
8839  3367
8840  3368
8841  3369
8842  336A
8843  336B
8844  336C
8845  336D
8846  336E
8847  336F
8848  3370
8849  3371
8850  3372
8851  3373
8852  3374
8853  3375
8854  3376
8855  3377
8856  3378
8857  3379
8858  337A
8859  337B
8860  337C
8861  337D
8862  337E
8863  337F
8864  3380
8865  3381
8866  3382
8867  3383
8868  3384
8869  3385
8870  3386
8871  3387
8872  3388
8873  3389
8874  338A
8875  338B
8876  338C
8877  338D
8878  338E
8879  338F
8880  3390
8881  3391
8882  3392
8883  3393
8884  3394
8885  3395
8886  3396
8887  3397
8888  3398
8889  3399
8890  339A
8891  339B
8892  339C
8893  339D
8894  339E
8895  339F
8896  33A0
8897  33A1
8898  33A2
8899  33A3
8900  33A4
8901  33A5
8902  33A6
8903  33A7
8904  33A8
8905  33A9
8906  33AA
8907  33AB
8908  33AC
8909  33AD
8910  33AE
8911  33AF
8912  33B0
8913  33B1
8914  33B2
8915  33B3
8916  33B4
8917  33B5
8918  33B6
8919  33B7
8920  33B8
8921  33B9
8922  33BA
8923  33BB
8924  33BC
8925  33BD
8926  33BE
8927  33BF
8928  33C0
8929  33C1
8930  33C2
8931  33C3
8932  33C4
8933  33C5
8934  33C6
8935  33C7
8936  33C8
8937  33C9
8938  33CA
8939  33CB
8940  33CC
8941  33CD
8942  33CE
8943  33CF
8944  33D0
8945  33D1
8946  33D2
8947  33D3
8948  33D4
8949  33D5
8950  33D6
8951  33D7
8952  33D8
8953  33D9
8954  33DA
8955  33DB
8956  33DC
8957  33DD
8958  33DE
8959  33DF
8960  33E0
8961  33E1
8962  33E2
8963  33E3
8964  33E4
8965  33E5
8966  33E6
8967  33E7
8968  33E8
8969  33E9
8970  33EA
8971  33EB
8972  33EC
8973  33ED
8974  33EE
8975  33EF
8976  33F0
8977  33F1
8978  33F2
8979  33F3
8980  33F4
8981  33F5
8982  33F6
8983  33F7
8984  33F8
8985  33F9
8986  33FA
8987  33FB
8988  33FC
8989  33FD
8990  33FE
8991  33FF
8992  3400
8993  3401
8994  3402
8995  3403
8996  3404
8997  3405
8998  3406
8999  3407
9000  3408
9001  3409
9002  340A
9003  340B
9004  340C
9005  340D
9006  340E
9007  340F
9008  3410
9009  3411
9010  3412
9011  3413
9012  3414
9013  3415
9014  3416
9015  3417
9016  3418
9017  3419
9018  341A
9019  341B
9020  341C
9021  341D
9022  341E
9023  341F
9024  3420
9025  3421
9026  3422
9027  3423
9028  3424
9029  3425
9030  3426
9031  3427
9032  3428
9033  3429
9034  342A
9035  342B
9036  342C
9037  342D
9038  342E
9039  342F
9040  3430
9041  3431
9042  3432
9043  3433
9044  3434
9045  3435
9046  3436
9047  3437
9048  3438
9049  3439
9050  343A
9051  343B
9052  343C
9053  343D
9054  343E
9055  343F
9056  3440
9057  3441
9058  3442
9059  3443
9060  3444
9061  3445
9062  3446
9063  3447
9064  3448
9065  3449
9066  344A
9067  344B
9068  344C
9069  344D
9070  344E
9071  344F
9072  3450
9073  3451
9074  3452
9075  3453
9076  3454
9077  3455
9078  3456
9079  3457
9080  3458
9081  3459
9082  345A
9083  345B
9084  345C
9085  345D
9086  345E
9087  345F
9088  3460
9089  3461
9090  3462
9091  3463
9092  3464
9093  3465
9094  3466
9095  3467
9096  3468
9097  3469
9098  346A
9099  346B
9100  346C
9101  346D
9102  346E
9103  346F
9104  3470
9105  3471
9106  3472
9107  3473
9108  3474
9109  3475
9110  3476
9111  3477
9112  3478
9113  3479
9114  347A
9115  347B
9116  347C
9117  347D
9118  347E
9119  347F
9120  3480
9121  3481
9122  3482
9123  3483
9124  3484
9125  3485
9126  3486
9127  3487
9128  3488
9129  3489
9130  348A
9131  348B
9132  348C
9133  348D
9134  348E
9135  348F
9136  3490
9137  3491
9138  3492
9139  3493
9140  3494
9141  3495
9142  3496
9143  3497
9144  3498
9145  3499
9146  349A
9147  349B
9148  349C
9149  349D
9150  349E
9151  349F
9152  34A0
9153  34A1
9154  34A2
9155  34A3
9156  34A4
9157  34A5
9158  34A6
9159  34A7
9160  34A8
9161  34A9
9162  34AA
9163  34AB
9164  34AC
9165  34AD
9166  34AE
9167  34AF
9168  34B0
9169  34B1
9170  34B2
9171  34B3
9172  34B4
9173  34B5
9174  34B6
9175  34B7
9176  34B8
9177  34B9
9178  34BA
9179  34BB
9180  34BC
9181  34BD
9182  34BE
9183  34BF
9184  34C0
9185  34C1
9186  34C2
9187  34C3
9188  34C4
9189  34C5
9190  34C6
9191  34C7
9192  34C8
9193  34C9
9194  34CA
9195  34CB
9196  34CC
9197  34CD
9198  34CE
9199  34CF
9200  34D0
9201  34D1
9202  34D2
9203  34D3
9204  34D4
9205  34D5
9206  34D6
9207  34D7
9208  34D8
9209  34D9
9210  34DA
9211  34DB
9212  34DC
9213  34DD
9214  34DE
9215  34DF
9216  34E0
9217  34E1
9218  34E2
9219  34E3
9220  34E4
9221  34E5
9222  34E6
9223  34E7
9224  34E8
9225  34E9
9226  34EA
9227  34EB
9228  34EC
9229  34ED
9230  34EE
9231  34EF
9232  34F0
9233  34F1
9234  34F2
9235  34F3
9236  34F4
9237  34F5
9238  34F6
9239  34F7
9240  34F8
9241  34F9
9242  34FA
9243  34FB
9244  34FC
9245  34FD
9246  34FE
9247  34FF
9248  3500
9249  3501
9250  3502
9251  3503
9252  3504
9253  3505
9254  3506
9255  3507
9256  3508
9257  3509
9258  350A
9259  350B
9260  350C
9261  350D
9262  350E
9263  350F
9264  3510
9265  3511
9266  3512
9267  3513
9268  3514
9269  3515
9270  3516
9271  3517
9272  3518
9273  3519
9274  351A
9275  351B
9276  351C
9277  351D
9278  351E
9279  351F
9280  3520
9281  3521
9282  3522
9283  3523
9284  3524
9285  3525
9286  3526
9287  3527
9288  3528
9289  3529
9290  352A
9291  352B
9292  352C
9293  352D
9294  352E
9295  352F
9296  3530
9297  3531
9298  3532
9299  3533
9300  3534
9301  3535
9302  3536
9303  3537
9304  3538
9305  3539
9306  353A
9307  353B
9308  353C
9309  353D
9310  353E
9311  353F
9312  3540
9313  3541
9314  3542
9315  3543
9316  3544
9317  3545
9318  3546
9319  3547
9320  3548
9321  3549
9322  354A
9323  354B
9324  354C
9325  354D
9326  354E
9327  354F
9328  3550
9329  3551
9330  3552
9331  3553
9332  3554
9333  3555
9334  3556
9335  3557
9336  3558
9337  3559
9338  355A
9339  355B
9340  355C
9341  355D
9342  355E
9343  355F
9344  3560
9345  3561
9346  3562
9347  3563
9348  3564
9349  3565
9350  3566
9351  3567
9352  3568
9353  3569
9354  356A
9355  356B
9356  356C
9357  356D
9358  356E
9359  356F
9360  3570
9361  3571
9362  3572
9363  3573
9364  3574
9365  3575
9366  3576
9367  3577
9368  3578
9369  3579
9370  357A
9371  357B
9372  357C
9373  357D
9374  357E
9375  357F
9376  3580
9377  3581
9378  3582
9379  3583
9380  3584
9381  3585
9382  3586
9383  3587
9384  3588
9385  3589
9386  358A
9387  358B
9388  358C
9389  358D
9390  358E
9391  358F
9392  3590
9393  3591
9394  3592
9395  3593
9396  3594
9397  3595
9398  3596
9399  3597
9400  3598
9401  3599
9402  359A
9403  359B
9404  359C
9405  359D
9406  359E
9407  359F
9408  35A0
9409  35A1
9410  35A2
9411  35A3
9412  35A4
9413  35A5
9414  35A6
9415  35A7
9416  35A8
9417  35A9
9418  35AA
9419  35AB
9420  35AC
9421  35AD
9422  35AE
9423  35AF
9424  35B0
9425  35B1
9426  35B2
9427  35B3
9428  35B4
9429  35B5
9430  35B6
9431  35B7
9432  35B8
9433  35B9
9434  35BA
9435  35BB
9436  35BC
9437  35BD
9438  35BE
9439  35BF
9440  35C0
9441  35C1
9442  35C2
9443  35C3
9444  35C4
9445  35C5
9446  35C6
9447  35C7
9448  35C8
9449  35C9
9450  35CA
9451  35CB
9452  35CC
9453  35CD
9454  35CE
9455  35CF
9456  35D0
9457  35D1
9458  35D2
9459  35D3
9460  35D4
9461  35D5
9462  35D6
9463  35D7
9464  35D8
9465  35D9
9466  35DA
9467  35DB
9468  35DC
9469  35DD
9470  35DE
9471  35DF
9472  35E0
9473  35E1
9474  35E2
9475  35E3
9476  35E4
9477  35E5
9478  35E6
9479  35E7
9480  35E8
9481  35E9
9482  35EA
9483  35EB
9484  35EC
9485  35ED
9486  35EE
9487  35EF
9488  35F0
9489  35F1
9490  35F2
9491  35F3
9492  35F4
9493  35F5
9494  35F6
9495  35F7
9496  35F8
9497  35F9
9498  35FA
9499  35FB
9500  35FC
9501  35FD
9502  35FE
9503  35FF
9504  3600
9505  3601
9506  3602
9507  3603
9508  3604
9509  3605
9510  3606
9511  3607
9512  3608
9513  3609
9514  360A
9515  360B
9516  360C
9517  360D
9518  360E
9519  360F
9520  3610
9521  3611
9522  3612
9523  3613
9524  3614
9525  3615
9526  3616
9527  3617
9528  3618
9529  3619
9530  361A
9531  361B
9532  361C
9533  361D
9534  361E
9535  361F
9536  3620
9537  3621
9538  3622
9539  3623
9540  3624
9541  3625
9542  3626
9543  3627
9544  3628
9545  3629
9546  362A
9547  362B
9548  362C
9549  362D
9550  362E
9551  362F
9552  3630
9553  3631
9554  3632
9555  3633
9556  3634
9557  3635
9558  3636
9559  3637
9560  3638
9561  3639
9562  363A
9563  363B
9564  363C
9565  363D
9566  363E
9567  363F
9568  3640
9569  3641
9570  3642
9571  3643
9572  3644
9573  3645
9574  3646
9575  3647
9576  3648
9577  3649
9578  364A
9579  364B
9580  364C
9581  364D
9582  364E
9583  364F
9584  3650
9585  3651
9586  3652
9587  3653
9588  3654
9589  3655
9590  3656
9591  3657
9592  3658
9593  3659
9594  365A
9595  365B
9596  365C
9597  365D
9598  365E
9599  365F
9600  3660
9601  3661
9602  3662
9603  3663
9604  3664
9605  3665
9606  3666
9607  3667
9608  3668
9609  3669
9610  366A
9611  366B
9612  366C
9613  366D
9614  366E
9615  366F
9616  3670
9617  3671
9618  3672
9619  3673
9620  3674
9621  3675
9622  3676
9623  3677
9624  3678
9625  3679
9626  367A
9627  367B
9628  367C
9629  367D
9630  367E
9631  367F
9632  3680
9633  3681
9634  3682
9635  3683
9636  3684
9637  3685
9638  3686
9639  3687
9640  3688
9641  3689
9642  368A
9643  368B
9644  368C
9645  368D
9646  368E
9647  368F
9648  3690
9649  3691
9650  3692
9651  3693
9652  3694
9653  3695
9654  3696
9655  3697
9656  3698
9657  3699
9658  369A
9659  369B
9660  369C
9661  369D
9662  369E
9663  369F
9664  36A0
9665  36A1
9666  36A2
9667  36A3
9668  36A4
9669  36A5
9670  36A6
9671  36A7
9672  36A8
9673  36A9
9674  36AA
9675  36AB
9676  36AC
9677  36AD
9678  36AE
9679  36AF
9680  36B0
9681  36B1
9682  36B2
9683  36B3
9684  36B4
9685  36B5
9686  36B6
9687  36B7
9688  36B8
9689  36B9
9690  36BA
9691  36BB
9692  36BC
9693  36BD
9694  36BE
9695  36BF
9696  36C0
9697  36C1
9698  36C2
9699  36C3
9700  36C4
9701  36C5
9702  36C6
9703  36C7
9704  36C8
9705  36C9
9706  36CA
9707  36CB
9708  36CC
9709  36CD
9710  36CE
9711  36CF
9712  36D0
9713  36D1
9714  36D2
9715  36D3
9716  36D4
9717  36D5
9718  36D6
9719  36D7
9720  36D8
9721  36D9
9722  36DA
9723  36DB
9724  36DC
9725  36DD
9726  36DE
9727  36DF
9728  36E0
9729  36E1
9730  36E2
9731  36E3
9732  36E4
9733  36E5
9734  36E6
9735  36E7
9736  36E8
9737  36E9
9738  36EA
9739  36EB
9740  36EC
9741  36ED
9742  36EE
9743  36EF
9744  36F0
9745  36F1
9746  36F2
9747  36F3
9748  36F4
9749  36F5
9750  36F6
9751  36F7
9752  36F8
9753  36F9
9754  36FA
9755  36FB
9756  36FC
9757  36FD
9758  36FE
9759  36FF
9760  3700
9761  3701
9762  3702
9763  3703
9764  3704
9765  3705
9766  3706
9767  3707
9768  3708
9769  3709
9770  370A
9771  370B
9772  370C
9773  370D
9774  370E
9775  370F
9776  3710
9777  3711
9778  3712
9779  3713
9780  3714
9781  3715
9782  3716
9783  3717
9784  3718
9785  3719
9786  371A
9787  371B
9788  371C
9789  371D
9790  371E
9791  371F
9792  3720
9793  3721
9794  3722
9795  3723
9796  3724
9797  3725
9798  3726
9799  3727
9800  3728
9801  3729
9802  372A
9803  372B
9804  372C
9805  372D
9806  372E
9807  372F
9808  3730
9809  3731
9810  3732
9811  3733
9812  3734
9813  3735
9814  3736
9815  3737
9816  3738
9817  3739
9818  373A
9819  373B
9820  373C
9821  373D
9822  373E
9823  373F
9824  3740
9825  3741
9826  3742
9827  3743
9828  3744
9829  3745
9830  3746
9831  3747
9832  3748
9833  3749
9834  374A
9835  374B
9836  374C
9837  374D
9838  374E
9839  374F
9840  3750
9841  3751
9842  3752
9843  3753
9844  3754
9845  3755
9846  3756
9847  3757
9848  3758
9849  3759
9850  375A
9851  375B
9852  375C
9853  375D
9854  375E
9855  375F
9856  3760
9857  3761
9858  3762
9859  3763
9860  3764
9861  3765
9862  3766
9863  3767
9864  3768
9865  3769
9866  376A
9867  376B
9868  376C
9869  376D
9870  376E
9871  376F
9872  3770
9873  3771
9874  3772
9875  3773
9876  3774
9877  3775
9878  3776
9879  3777
9880  3778
9881  3779
9882  377A
9883  377B
9884  377C
9885  377D
9886  377E
9887  377F
9888  3780
9889  3781
9890  3782
9891  3783
9892  3784
9893  3785
9894  3786
9895  3787
9896  3788
9897  3789
9898  378A
9899  378B
9900  378C
9901  378D
9902  378E
9903  378F
9904  3790
9905  3791
9906  3792
9907  3793
9908  3794
9909  3795
9910  3796
9911  3797
9912  3798
9913  3799
9914  379A
9915  379B
9916  379C
9917  379D
9918  379E
9919  379F
9920  37A0
9921  37A1
9922  37A2
9923  37A3
9924  37A4
9925  37A5
9926  37A6
9927  37A7
9928  37A8
9929  37A9
9930  37AA
9931  37AB
9932  37AC
9933  37AD
9934  37AE
9935  37AF
9936  37B0
9937  37B1
9938  37B2
9939  37B3
9940  37B4
9941  37B5
9942  37B6
9943  37B7
9944  37B8
9945  37B9
9946  37BA
9947  37BB
9948  37BC
9949  37BD
9950  37BE
9951  37BF
9952  37C0
9953  37C1
9954  37C2
9955  37C3
9956  37C4
9957  37C5
9958  37C6
9959  37C7
9960  37C8
9961  37C9
9962  37CA
9963  37CB
9964  37CC
9965  37CD
9966  37CE
9967  37CF
9968  37D0
9969  37D1
9970  37D2
9971  37D3
9972  37D4
9973  37D5
9974  37D6
9975  37D7
9976  37D8
9977  37D9
9978  37DA
9979  37DB
9980  37DC
9981  37DD
9982  37DE
9983  37DF
9984  37E0
9985  37E1
9986  37E2
9987  37E3
9988  37E4
9989  37E5
9990  37E6
9991  37E7
9992  37E8
9993  37E9
9994  37EA
9995  37EB
9996  37EC
9997  37ED
9998  37EE
9999  37EF
10000  37F0
10001  37F1
10002  37F2
10003  37F3
10004  37F4
10005  37F5
10006  37F6
10007  37F7
10008  37F8
10009  37F9
10010  37FA
10011  37FB
10012  37FC
10013  37FD
10014  37FE
10015  37FF
10016  3800
10017  3801
10018  3802
10019  3803
10020  3804
10021  3805
10022  3806
10023  3807
10024  3808
10025  3809
10026  380A
10027  380B
10028  380C
10029  380D
10030  380E
10031  380F
10032  3810
10033  3811
10034  3812
10035  3813
10036  3814
10037  3815
10038  3816
10039  3817
10040  3818
10041  3819
10042  381A
10043  381B
10044  381C
10045  381D
10046  381E
10047  381F
10048  3820
10049  3821
10050  3822
10051  3823
10052  3824
10053  3825
10054  3826
10055  3827
10056  3828
10057  3829
10058  382A
10059  382B
10060  382C
10061  382D
10062  382E
10063  382F
10064  3830
10065  3831
10066  3832
10067  3833
10068  3834
10069  3835
10070  3836
10071  3837
10072  3838
10073  3839
10074  383A
10075  383B
10076  383C
10077  383D
10078  383E
10079  383F
10080  3840
10081  3841
10082  3842
10083  3843
10084  3844
10085  3845
10086  3846
10087  3847
10088  3848
10089  3849
10090  384A
10091  384B
10092  384C
10093  384D
10094  384E
10095  384F
10096  3850
10097  3851
10098  3852
10099  3853
10100  3854
10101  3855
10102  3856
10103  3857
10104  3858
10105  3859
10106  385A
10107  385B
10108  385C
10109  385D
10110  385E
10111  385F
10112  3860
10113  3861
10114  3862
10115  3863
10116  3864
10117  3865
10118  3866
10119  3867
10120  3868
10121  3869
10122  386A
10123  386B
10124  386C
10125  386D
10126  386E
10127  386F
10128  3870
10129  3871
10130  3872
10131  3873
10132  3874
10133  3875
10134  3876
10135  3877
10136  3878
10137  3879
10138  387A
10139  387B
10140  387C
10141  387D
10142  387E
10143  387F
10144  3880
10145  3881
10146  3882
10147  3883
10148  3884
10149  3885
10150  3886
10151  3887
10152  3888
10153  3889
10154  388A
10155  388B
10156  388C
10157  388D
10158  388E
10159  388F
10160  3890
10161  3891
10162  3892
10163  3893
10164  3894
10165  3895
10166  3896
10167  3897
10168  3898
10169  3899
10170  389A
10171  389B
10172  389C
10173  389D
10174  389E
10175  389F
10176  38A0
10177  38A1
10178  38A2
10179  38A3
10180  38A4
10181  38A5
10182  38A6
10183  38A7
10184  38A8
10185  38A9
10186  38AA
10187  38AB
10188  38AC
10189  38AD
10190  38AE
10191  38AF
10192  38B0
10193  38B1
10194  38B2
10195  38B3
10196  38B4
10197  38B5
10198  38B6
10199  38B7
10200  38B8
10201  38B9
10202  38BA
10203  38BB
10204  38BC
10205  38BD
10206  38BE
10207  38BF
10208  38C0
10209  38C1
10210  38C2
10211  38C3
10212  38C4
10213  38C5
10214  38C6
10215  38C7
10216  38C8
10217  38C9
10218  38CA
10219  38CB
10220  38CC
10221  38CD
10222  38CE
10223  38CF
10224  38D0
10225  38D1
10226  38D2
10227  38D3
10228  38D4
10229  38D5
10230  38D6
10231  38D7
10232  38D8
10233  38D9
10234  38DA
10235  38DB
10236  38DC
10237  38DD
10238  38DE
10239  38DF
10240  38E0
10241  38E1
10242  38E2
10243  38E3
10244  38E4
10245  38E5
10246  38E6
10247  38E7
10248  38E8
10249  38E9
10250  38EA
10251  38EB
10252  38EC
10253  38ED
10254  38EE
10255  38EF
10256  38F0
10257  38F1
10258  38F2
10259  38F3
10260  38F4
10261  38F5
10262  38F6
10263  38F7
10264  38F8
10265  38F9
10266  38FA
10267  38FB
10268  38FC
10269  38FD
10270  38FE
10271  38FF
10272  3900
10273  3901
10274  3902
10275  3903
10276  3904
10277  3905
10278  3906
10279  3907
10280  3908
10281  3909
10282  390A
10283  390B
10284  390C
10285  390D
10286  390E
10287  390F
10288  3910
10289  3911
10290  3912
10291  3913
10292  3914
10293  3915
10294  3916
10295  3917
10296  3918
10297  3919
10298  391A
10299  391B
10300  391C
10301  391D
10302  391E
10303  391F
10304  3920
10305  3921
10306  3922
10307  3923
10308  3924
10309  3925
10310  3926
10311  3927
10312  3928
10313  3929
10314  392A
10315  392B
10316  392C
10317  392D
10318  392E
10319  392F
10320  3930
10321  3931
10322  3932
10323  3933
10324  3934
10325  3935
10326  3936
10327  3937
10328  3938
10329  3939
10330  393A
10331  393B
10332  393C
10333  393D
10334  393E
10335  393F
10336  3940
10337  3941
10338  3942
10339  3943
10340  3944
10341  3945
10342  3946
10343  3947
10344  3948
10345  3949
10346  394A
10347  394B
10348  394C
10349  394D
10350  394E
10351  394F
10352  3950
10353  3951
10354  3952
10355  3953
10356  3954
10357  3955
10358  3956
10359  3957
10360  3958
10361  3959
10362  395A
10363  395B
10364  395C
10365  395D
10366  395E
10367  395F
10368  3960
10369  3961
10370  3962
10371  3963
10372  3964
10373  3965
10374  3966
10375  3967
10376  3968
10377  3969
10378  396A
10379  396B
10380  396C
10381  396D
10382  396E
10383  396F
10384  3970
10385  3971
10386  3972
10387  3973
10388  3974
10389  3975
10390  3976
10391  3977
10392  3978
10393  3979
10394  397A
10395  397B
10396  397C
10397  397D
10398  397E
10399  397F
10400  3980
10401  3981
10402  3982
10403  3983
10404  3984
10405  3985
10406  3986
10407  3987
10408  3988
10409  3989
10410  398A
10411  398B
10412  398C
10413  398D
10414  398E
10415  398F
10416  3990
10417  3991
10418  3992
10419  3993
10420  3994
10421  3995
10422  3996
10423  3997
10424  3998
10425  3999
10426  399A
10427  399B
10428  399C
10429  399D
10430  399E
10431  399F
10432  39A0
10433  39A1
10434  39A2
10435  39A3
10436  39A4
10437  39A5
10438  39A6
10439  39A7
10440  39A8
10441  39A9
10442  39AA
10443  39AB
10444  39AC
10445  39AD
10446  39AE
10447  39AF
10448  39B0
10449  39B1
10450  39B2
10451  39B3
10452  39B4
10453  39B5
10454  39B6
10455  39B7
10456  39B8
10457  39B9
10458  39BA
10459  39BB
10460  39BC
10461  39BD
10462  39BE
10463  39BF
10464  39C0
10465  39C1
10466  39C2
10467  39C3
10468  39C4
10469  39C5
10470  39C6
10471  39C7
10472  39C8
10473  39C9
10474  39CA
10475  39CB
10476  39CC
10477  39CD
10478  39CE
10479  39CF
10480  39D0
10481  39D1
10482  39D2
10483  39D3
10484  39D4
10485  39D5
10486  39D6
10487  39D7
10488  39D8
10489  39D9
10490  39DA
10491  39DB
10492  39DC
10493  39DD
10494  39DE
10495  39DF
10496  39E0
10497  39E1
10498  39E2
10499  39E3
10500  39E4
10501  39E5
10502  39E6
10503  39E7
10504  39E8
10505  39E9
10506  39EA
10507  39EB
10508  39EC
10509  39ED
10510  39EE
10511  39EF
10512  39F0
10513  39F1
10514  39F2
10515  39F3
10516  39F4
10517  39F5
10518  39F6
10519  39F7
10520  39F8
10521  39F9
10522  39FA
10523  39FB
10524  39FC
10525  39FD
10526  39FE
10527  39FF
10528  3A00
10529  3A01
10530  3A02
10531  3A03
10532  3A04
10533  3A05
10534  3A06
10535  3A07
10536  3A08
10537  3A09
10538  3A0A
10539  3A0B
10540  3A0C
10541  3A0D
10542  3A0E
10543  3A0F
10544  3A10
10545  3A11
10546  3A12
10547  3A13
10548  3A14
10549  3A15
10550  3A16
10551  3A17
10552  3A18
10553  3A19
10554  3A1A
10555  3A1B
10556  3A1C
10557  3A1D
10558  3A1E
10559  3A1F
10560  3A20
10561  3A21
10562  3A22
10563  3A23
10564  3A24
10565  3A25
10566  3A26
10567  3A27
10568  3A28
10569  3A29
10570  3A2A
10571  3A2B
10572  3A2C
10573  3A2D
10574  3A2E
10575  3A2F
10576  3A30
10577  3A31
10578  3A32
10579  3A33
10580  3A34
10581  3A35
10582  3A36
10583  3A37
10584  3A38
10585  3A39
10586  3A3A
10587  3A3B
10588  3A3C
10589  3A3D
10590  3A3E
10591  3A3F
10592  3A40
10593  3A41
10594  3A42
10595  3A43
10596  3A44
10597  3A45
10598  3A46
10599  3A47
10600  3A48
10601  3A49
10602  3A4A
10603  3A4B
10604  3A4C
10605  3A4D
10606  3A4E
10607  3A4F
10608  3A50
10609  3A51
10610  3A52
10611  3A53
10612  3A54
10613  3A55
10614  3A56
10615  3A57
10616  3A58
10617  3A59
10618  3A5A
10619  3A5B
10620  3A5C
10621  3A5D
10622  3A5E
10623  3A5F
10624  3A60
10625  3A61
10626  3A62
10627  3A63
10628  3A64
10629  3A65
10630  3A66
10631  3A67
10632  3A68
10633  3A69
10634  3A6A
10635  3A6B
10636  3A6C
10637  3A6D
10638  3A6E
10639  3A6F
10640  3A70
10641  3A71
10642  3A72
10643  3A73
10644  3A74
10645  3A75
10646  3A76
10647  3A77
10648  3A78
10649  3A79
10650  3A7A
10651  3A7B
10652  3A7C
10653  3A7D
10654  3A7E
10655  3A7F
10656  3A80
10657  3A81
10658  3A82
10659  3A83
10660  3A84
10661  3A85
10662  3A86
10663  3A87
10664  3A88
10665  3A89
10666  3A8A
10667  3A8B
10668  3A8C
10669  3A8D
10670  3A8E
10671  3A8F
10672  3A90
10673  3A91
10674  3A92
10675  3A93
10676  3A94
10677  3A95
10678  3A96
10679  3A97
10680  3A98
10681  3A99
10682  3A9A
10683  3A9B
10684  3A9C
10685  3A9D
10686  3A9E
10687  3A9F
10688  3AA0
10689  3AA1
10690  3AA2
10691  3AA3
10692  3AA4
10693  3AA5
10694  3AA6
10695  3AA7
10696  3AA8
10697  3AA9
10698  3AAA
10699  3AAB
10700  3AAC
10701  3AAD
10702  3AAE
10703  3AAF
10704  3AB0
10705  3AB1
10706  3AB2
10707  3AB3
10708  3AB4
10709  3AB5
10710  3AB6
10711  3AB7
10712  3AB8
10713  3AB9
10714  3ABA
10715  3ABB
10716  3ABC
10717  3ABD
10718  3ABE
10719  3ABF
10720  3AC0
10721  3AC1
10722  3AC2
10723  3AC3
10724  3AC4
10725  3AC5
10726  3AC6
10727  3AC7
10728  3AC8
10729  3AC9
10730  3ACA
10731  3ACB
10732  3ACC
10733  3ACD
10734  3ACE
10735  3ACF
10736  3AD0
10737  3AD1
10738  3AD2
10739  3AD3
10740  3AD4
10741  3AD5
10742  3AD6
10743  3AD7
10744  3AD8
10745  3AD9
10746  3ADA
10747  3ADB
10748  3ADC
10749  3ADD
10750  3ADE
10751  3ADF
10752  3AE0
10753  3AE1
10754  3AE2
10755  3AE3
10756  3AE4
10757  3AE5
10758  3AE6
10759  3AE7
10760  3AE8
10761  3AE9
10762  3AEA
10763  3AEB
10764  3AEC
10765  3AED
10766  3AEE
10767  3AEF
10768  3AF0
10769  3AF1
10770  3AF2
10771  3AF3
10772  3AF4
10773  3AF5
10774  3AF6
10775  3AF7
10776  3AF8
10777  3AF9
10778  3AFA
10779  3AFB
10780  3AFC
10781  3AFD
10782  3AFE
10783  3AFF
10784  3B00
10785  3B01
10786  3B02
10787  3B03
10788  3B04
10789  3B05
10790  3B06
10791  3B07
10792  3B08
10793  3B09
10794  3B0A
10795  3B0B
10796  3B0C
10797  3B0D
10798  3B0E
10799  3B0F
10800  3B10
10801  3B11
10802  3B12
10803  3B13
10804  3B14
10805  3B15
10806  3B16
10807  3B17
10808  3B18
10809  3B19
10810  3B1A
10811  3B1B
10812  3B1C
10813  3B1D
10814  3B1E
10815  3B1F
10816  3B20
10817  3B21
10818  3B22
10819  3B23
10820  3B24
10821  3B25
10822  3B26
10823  3B27
10824  3B28
10825  3B29
10826  3B2A
10827  3B2B
10828  3B2C
10829  3B2D
10830  3B2E
10831  3B2F
10832  3B30
10833  3B31
10834  3B32
10835  3B33
10836  3B34
10837  3B35
10838  3B36
10839  3B37
10840  3B38
10841  3B39
10842  3B3A
10843  3B3B
10844  3B3C
10845  3B3D
10846  3B3E
10847  3B3F
10848  3B40
10849  3B41
10850  3B42
10851  3B43
10852  3B44
10853  3B45
10854  3B46
10855  3B47
10856  3B48
10857  3B49
10858  3B4A
10859  3B4B
10860  3B4C
10861  3B4D
10862  3B4E
10863  3B4F
10864  3B50
10865  3B51
10866  3B52
10867  3B53
10868  3B54
10869  3B55
10870  3B56
10871  3B57
10872  3B58
10873  3B59
10874  3B5A
10875  3B5B
10876  3B5C
10877  3B5D
10878  3B5E
10879  3B5F
10880  3B60
10881  3B61
10882  3B62
10883  3B63
10884  3B64
10885  3B65
10886  3B66
10887  3B67
10888  3B68
10889  3B69
10890  3B6A
10891  3B6B
10892  3B6C
10893  3B6D
10894  3B6E
10895  3B6F
10896  3B70
10897  3B71
10898  3B72
10899  3B73
10900  3B74
10901  3B75
10902  3B76
10903  3B77
10904  3B78
10905  3B79
10906  3B7A
10907  3B7B
10908  3B7C
10909  3B7D
10910  3B7E
10911  3B7F
10912  3B80
10913  3B81
10914  3B82
10915  3B83
10916  3B84
10917  3B85
10918  3B86
10919  3B87
10920  3B88
10921  3B89
10922  3B8A
10923  3B8B
10924  3B8C
10925  3B8D
10926  3B8E
10927  3B8F
10928  3B90
10929  3B91
10930  3B92
10931  3B93
10932  3B94
10933  3B95
10934  3B96
10935  3B97
10936  3B98
10937  3B99
10938  3B9A
10939  3B9B
10940  3B9C
10941  3B9D
10942  3B9E
10943  3B9F
10944  3BA0
10945  3BA1
10946  3BA2
10947  3BA3
10948  3BA4
10949  3BA5
10950  3BA6
10951  3BA7
10952  3BA8
10953  3BA9
10954  3BAA
10955  3BAB
10956  3BAC
10957  3BAD
10958  3BAE
10959  3BAF
10960  3BB0
10961  3BB1
10962  3BB2
10963  3BB3
10964  3BB4
10965  3BB5
10966  3BB6
10967  3BB7
10968  3BB8
10969  3BB9
10970  3BBA
10971  3BBB
10972  3BBC
10973  3BBD
10974  3BBE
10975  3BBF
10976  3BC0
10977  3BC1
10978  3BC2
10979  3BC3
10980  3BC4
10981  3BC5
10982  3BC6
10983  3BC7
10984  3BC8
10985  3BC9
10986  3BCA
10987  3BCB
10988  3BCC
10989  3BCD
10990  3BCE
10991  3BCF
10992  3BD0
10993  3BD1
10994  3BD2
10995  3BD3
10996  3BD4
10997  3BD5
10998  3BD6
10999  3BD7
11000  3BD8
11001  3BD9
11002  3BDA
11003  3BDB
11004  3BDC
11005  3BDD
11006  3BDE
11007  3BDF
11008  3BE0
11009  3BE1
11010  3BE2
11011  3BE3
11012  3BE4
11013  3BE5
11014  3BE6
11015  3BE7
11016  3BE8
11017  3BE9
11018  3BEA
11019  3BEB
11020  3BEC
11021  3BED
11022  3BEE
11023  3BEF
11024  3BF0
11025  3BF1
11026  3BF2
11027  3BF3
11028  3BF4
11029  3BF5
11030  3BF6
11031  3BF7
11032  3BF8
11033  3BF9
11034  3BFA
11035  3BFB
11036  3BFC
11037  3BFD
11038  3BFE
11039  3BFF
11040  3C00
11041  3C01
11042  3C02
11043  3C03
11044  3C04
11045  3C05
11046  3C06
11047  3C07
11048  3C08
11049  3C09
11050  3C0A
11051  3C0B
11052  3C0C
11053  3C0D
11054  3C0E
11055  3C0F
11056  3C10
11057  3C11
11058  3C12
11059  3C13
11060  3C14
11061  3C15
11062  3C16
11063  3C17
11064  3C18
11065  3C19
11066  3C1A
11067  3C1B
11068  3C1C
11069  3C1D
11070  3C1E
11071  3C1F
11072  3C20
11073  3C21
11074  3C22
11075  3C23
11076  3C24
11077  3C25
11078  3C26
11079  3C27
11080  3C28
11081  3C29
11082  3C2A
11083  3C2B
11084  3C2C
11085  3C2D
11086  3C2E
11087  3C2F
11088  3C30
11089  3C31
11090  3C32
11091  3C33
11092  3C34
11093  3C35
11094  3C36
11095  3C37
11096  3C38
11097  3C39
11098  3C3A
11099  3C3B
11100  3C3C
11101  3C3D
11102  3C3E
11103  3C3F
11104  3C40
11105  3C41
11106  3C42
11107  3C43
11108  3C44
11109  3C45
11110  3C46
11111  3C47
11112  3C48
11113  3C49
11114  3C4A
11115  3C4B
11116  3C4C
11117  3C4D
11118  3C4E
11119  3C4F
11120  3C50
11121  3C51
11122  3C52
11123  3C53
11124  3C54
11125  3C55
11126  3C56
11127  3C57
11128  3C58
11129  3C59
11130  3C5A
11131  3C5B
11132  3C5C
11133  3C5D
11134  3C5E
11135  3C5F
11136  3C60
11137  3C61
11138  3C62
11139  3C63
11140  3C64
11141  3C65
11142  3C66
11143  3C67
11144  3C68
11145  3C69
11146  3C6A
11147  3C6B
11148  3C6C
11149  3C6D
11150  3C6E
11151  3C6F
11152  3C70
11153  3C71
11154  3C72
11155  3C73
11156  3C74
11157  3C75
11158  3C76
11159  3C77
11160  3C78
11161  3C79
11162  3C7A
11163  3C7B
11164  3C7C
11165  3C7D
11166  3C7E
11167  3C7F
11168  3C80
11169  3C81
11170  3C82
11171  3C83
11172  3C84
11173  3C85
11174  3C86
11175  3C87
11176  3C88
11177  3C89
11178  3C8A
11179  3C8B
11180  3C8C
11181  3C8D
11182  3C8E
11183  3C8F
11184  3C90
11185  3C91
11186  3C92
11187  3C93
11188  3C94
11189  3C95
11190  3C96
11191  3C97
11192  3C98
11193  3C99
11194  3C9A
11195  3C9B
11196  3C9C
11197  3C9D
11198  3C9E
11199  3C9F
11200  3CA0
11201  3CA1
11202  3CA2
11203  3CA3
11204  3CA4
11205  3CA5
11206  3CA6
11207  3CA7
11208  3CA8
11209  3CA9
11210  3CAA
11211  3CAB
11212  3CAC
11213  3CAD
11214  3CAE
11215  3CAF
11216  3CB0
11217  3CB1
11218  3CB2
11219  3CB3
11220  3CB4
11221  3CB5
11222  3CB6
11223  3CB7
11224  3CB8
11225  3CB9
11226  3CBA
11227  3CBB
11228  3CBC
11229  3CBD
11230  3CBE
11231  3CBF
11232  3CC0
11233  3CC1
11234  3CC2
11235  3CC3
11236  3CC4
11237  3CC5
11238  3CC6
11239  3CC7
11240  3CC8
11241  3CC9
11242  3CCA
11243  3CCB
11244  3CCC
11245  3CCD
11246  3CCE
11247  3CCF
11248  3CD0
11249  3CD1
11250  3CD2
11251  3CD3
11252  3CD4
11253  3CD5
11254  3CD6
11255  3CD7
11256  3CD8
11257  3CD9
11258  3CDA
11259  3CDB
11260  3CDC
11261  3CDD
11262  3CDE
11263  3CDF
11264  3CE0
11265  3CE1
11266  3CE2
11267  3CE3
11268  3CE4
11269  3CE5
11270  3CE6
11271  3CE7
11272  3CE8
11273  3CE9
11274  3CEA
11275  3CEB
11276  3CEC
11277  3CED
11278  3CEE
11279  3CEF
11280  3CF0
11281  3CF1
11282  3CF2
11283  3CF3
11284  3CF4
11285  3CF5
11286  3CF6
11287  3CF7
11288  3CF8
11289  3CF9
11290  3CFA
11291  3CFB
11292  3CFC
11293  3CFD
11294  3CFE
11295  3CFF
11296  3D00
11297  3D01
11298  3D02
11299  3D03
11300  3D04
11301  3D05
11302  3D06
11303  3D07
11304  3D08
11305  3D09
11306  3D0A
11307  3D0B
11308  3D0C
11309  3D0D
11310  3D0E
11311  3D0F
11312  3D10
11313  3D11
11314  3D12
11315  3D13
11316  3D14
11317  3D15
11318  3D16
11319  3D17
11320  3D18
11321  3D19
11322  3D1A
11323  3D1B
11324  3D1C
11325  3D1D
11326  3D1E
11327  3D1F
11328  3D20
11329  3D21
11330  3D22
11331  3D23
11332  3D24
11333  3D25
11334  3D26
11335  3D27
11336  3D28
11337  3D29
11338  3D2A
11339  3D2B
11340  3D2C
11341  3D2D
11342  3D2E
11343  3D2F
11344  3D30
11345  3D31
11346  3D32
11347  3D33
11348  3D34
11349  3D35
11350  3D36
11351  3D37
11352  3D38
11353  3D39
11354  3D3A
11355  3D3B
11356  3D3C
11357  3D3D
11358  3D3E
11359  3D3F
11360  3D40
11361  3D41
11362  3D42
11363  3D43
11364  3D44
11365  3D45
11366  3D46
11367  3D47
11368  3D48
11369  3D49
11370  3D4A
11371  3D4B
11372  3D4C
11373  3D4D
11374  3D4E
11375  3D4F
11376  3D50
11377  3D51
11378  3D52
11379  3D53
11380  3D54
11381  3D55
11382  3D56
11383  3D57
11384  3D58
11385  3D59
11386  3D5A
11387  3D5B
11388  3D5C
11389  3D5D
11390  3D5E
11391  3D5F
11392  3D60
11393  3D61
11394  3D62
11395  3D63
11396  3D64
11397  3D65
11398  3D66
11399  3D67
11400  3D68
11401  3D69
11402  3D6A
11403  3D6B
11404  3D6C
11405  3D6D
11406  3D6E
11407  3D6F
11408  3D70
11409  3D71
11410  3D72
11411  3D73
11412  3D74
11413  3D75
11414  3D76
11415  3D77
11416  3D78
11417  3D79
11418  3D7A
11419  3D7B
11420  3D7C
11421  3D7D
11422  3D7E
11423  3D7F
11424  3D80
11425  3D81
11426  3D82
11427  3D83
11428  3D84
11429  3D85
11430  3D86
11431  3D87
11432  3D88
11433  3D89
11434  3D8A
11435  3D8B
11436  3D8C
11437  3D8D
11438  3D8E
11439  3D8F
11440  3D90
11441  3D91
11442  3D92
11443  3D93
11444  3D94
11445  3D95
11446  3D96
11447  3D97
11448  3D98
11449  3D99
11450  3D9A
11451  3D9B
11452  3D9C
11453  3D9D
11454  3D9E
11455  3D9F
11456  3DA0
11457  3DA1
11458  3DA2
11459  3DA3
11460  3DA4
11461  3DA5
11462  3DA6
11463  3DA7
11464  3DA8
11465  3DA9
11466  3DAA
11467  3DAB
11468  3DAC
11469  3DAD
11470  3DAE
11471  3DAF
11472  3DB0
11473  3DB1
11474  3DB2
11475  3DB3
11476  3DB4
11477  3DB5
11478  3DB6
11479  3DB7
11480  3DB8
11481  3DB9
11482  3DBA
11483  3DBB
11484  3DBC
11485  3DBD
11486  3DBE
11487  3DBF
11488  3DC0
11489  3DC1
11490  3DC2
11491  3DC3
11492  3DC4
11493  3DC5
11494  3DC6
11495  3DC7
11496  3DC8
11497  3DC9
11498  3DCA
11499  3DCB
11500  3DCC
11501  3DCD
11502  3DCE
11503  3DCF
11504  3DD0
11505  3DD1
11506  3DD2
11507  3DD3
11508  3DD4
11509  3DD5
11510  3DD6
11511  3DD7
11512  3DD8
11513  3DD9
11514  3DDA
11515  3DDB
11516  3DDC
11517  3DDD
11518  3DDE
11519  3DDF
11520  3DE0
11521  3DE1
11522  3DE2
11523  3DE3
11524  3DE4
11525  3DE5
11526  3DE6
11527  3DE7
11528  3DE8
11529  3DE9
11530  3DEA
11531  3DEB
11532  3DEC
11533  3DED
11534  3DEE
11535  3DEF
11536  3DF0
11537  3DF1
11538  3DF2
11539  3DF3
11540  3DF4
11541  3DF5
11542  3DF6
11543  3DF7
11544  3DF8
11545  3DF9
11546  3DFA
11547  3DFB
11548  3DFC
11549  3DFD
11550  3DFE
11551  3DFF
11552  3E00
11553  3E01
11554  3E02
11555  3E03
11556  3E04
11557  3E05
11558  3E06
11559  3E07
11560  3E08
11561  3E09
11562  3E0A
11563  3E0B
11564  3E0C
11565  3E0D
11566  3E0E
11567  3E0F
11568  3E10
11569  3E11
11570  3E12
11571  3E13
11572  3E14
11573  3E15
11574  3E16
11575  3E17
11576  3E18
11577  3E19
11578  3E1A
11579  3E1B
11580  3E1C
11581  3E1D
11582  3E1E
11583  3E1F
11584  3E20
11585  3E21
11586  3E22
11587  3E23
11588  3E24
11589  3E25
11590  3E26
11591  3E27
11592  3E28
11593  3E29
11594  3E2A
11595  3E2B
11596  3E2C
11597  3E2D
11598  3E2E
11599  3E2F
11600  3E30
11601  3E31
11602  3E32
11603  3E33
11604  3E34
11605  3E35
11606  3E36
11607  3E37
11608  3E38
11609  3E39
11610  3E3A
11611  3E3B
11612  3E3C
11613  3E3D
11614  3E3E
11615  3E3F
11616  3E40
11617  3E41
11618  3E42
11619  3E43
11620  3E44
11621  3E45
11622  3E46
11623  3E47
11624  3E48
11625  3E49
11626  3E4A
11627  3E4B
11628  3E4C
11629  3E4D
11630  3E4E
11631  3E4F
11632  3E50
11633  3E51
11634  3E52
11635  3E53
11636  3E54
11637  3E55
11638  3E56
11639  3E57
11640  3E58
11641  3E59
11642  3E5A
11643  3E5B
11644  3E5C
11645  3E5D
11646  3E5E
11647  3E5F
11648  3E60
11649  3E61
11650  3E62
11651  3E63
11652  3E64
11653  3E65
11654  3E66
11655  3E67
11656  3E68
11657  3E69
11658  3E6A
11659  3E6B
11660  3E6C
11661  3E6D
11662  3E6E
11663  3E6F
11664  3E70
11665  3E71
11666  3E72
11667  3E73
11668  3E74
11669  3E75
11670  3E76
11671  3E77
11672  3E78
11673  3E79
11674  3E7A
11675  3E7B
11676  3E7C
11677  3E7D
11678  3E7E
11679  3E7F
11680  3E80
11681  3E81
11682  3E82
11683  3E83
11684  3E84
11685  3E85
11686  3E86
11687  3E87
11688  3E88
11689  3E89
11690  3E8A
11691  3E8B
11692  3E8C
11693  3E8D
11694  3E8E
11695  3E8F
11696  3E90
11697  3E91
11698  3E92
11699  3E93
11700  3E94
11701  3E95
11702  3E96
11703  3E97
11704  3E98
11705  3E99
11706  3E9A
11707  3E9B
11708  3E9C
11709  3E9D
11710  3E9E
11711  3E9F
11712  3EA0
11713  3EA1
11714  3EA2
11715  3EA3
11716  3EA4
11717  3EA5
11718  3EA6
11719  3EA7
11720  3EA8
11721  3EA9
11722  3EAA
11723  3EAB
11724  3EAC
11725  3EAD
11726  3EAE
11727  3EAF
11728  3EB0
11729  3EB1
11730  3EB2
11731  3EB3
11732  3EB4
11733  3EB5
11734  3EB6
11735  3EB7
11736  3EB8
11737  3EB9
11738  3EBA
11739  3EBB
11740  3EBC
11741  3EBD
11742  3EBE
11743  3EBF
11744  3EC0
11745  3EC1
11746  3EC2
11747  3EC3
11748  3EC4
11749  3EC5
11750  3EC6
11751  3EC7
11752  3EC8
11753  3EC9
11754  3ECA
11755  3ECB
11756  3ECC
11757  3ECD
11758  3ECE
11759  3ECF
11760  3ED0
11761  3ED1
11762  3ED2
11763  3ED3
11764  3ED4
11765  3ED5
11766  3ED6
11767  3ED7
11768  3ED8
11769  3ED9
11770  3EDA
11771  3EDB
11772  3EDC
11773  3EDD
11774  3EDE
11775  3EDF
11776  3EE0
11777  3EE1
11778  3EE2
11779  3EE3
11780  3EE4
11781  3EE5
11782  3EE6
11783  3EE7
11784  3EE8
11785  3EE9
11786  3EEA
11787  3EEB
11788  3EEC
11789  3EED
11790  3EEE
11791  3EEF
11792  3EF0
11793  3EF1
11794  3EF2
11795  3EF3
11796  3EF4
11797  3EF5
11798  3EF6
11799  3EF7
11800  3EF8
11801  3EF9
11802  3EFA
11803  3EFB
11804  3EFC
11805  3EFD
11806  3EFE
11807  3EFF
11808  3F00
11809  3F01
11810  3F02
11811  3F03
11812  3F04
11813  3F05
11814  3F06
11815  3F07
11816  3F08
11817  3F09
11818  3F0A
11819  3F0B
11820  3F0C
11821  3F0D
11822  3F0E
11823  3F0F
11824  3F10
11825  3F11
11826  3F12
11827  3F13
11828  3F14
11829  3F15
11830  3F16
11831  3F17
11832  3F18
11833  3F19
11834  3F1A
11835  3F1B
11836  3F1C
11837  3F1D
11838  3F1E
11839  3F1F
11840  3F20
11841  3F21
11842  3F22
11843  3F23
11844  3F24
11845  3F25
11846  3F26
11847  3F27
11848  3F28
11849  3F29
11850  3F2A
11851  3F2B
11852  3F2C
11853  3F2D
11854  3F2E
11855  3F2F
11856  3F30
11857  3F31
11858  3F32
11859  3F33
11860  3F34
11861  3F35
11862  3F36
11863  3F37
11864  3F38
11865  3F39
11866  3F3A
11867  3F3B
11868  3F3C
11869  3F3D
11870  3F3E
11871  3F3F
11872  3F40
11873  3F41
11874  3F42
11875  3F43
11876  3F44
11877  3F45
11878  3F46
11879  3F47
11880  3F48
11881  3F49
11882  3F4A
11883  3F4B
11884  3F4C
11885  3F4D
11886  3F4E
11887  3F4F
11888  3F50
11889  3F51
11890  3F52
11891  3F53
11892  3F54
11893  3F55
11894  3F56
11895  3F57
11896  3F58
11897  3F59
11898  3F5A
11899  3F5B
11900  3F5C
11901  3F5D
11902  3F5E
11903  3F5F
11904  3F60
11905  3F61
11906  3F62
11907  3F63
11908  3F64
11909  3F65
11910  3F66
11911  3F67
11912  3F68
11913  3F69
11914  3F6A
11915  3F6B
11916  3F6C
11917  3F6D
11918  3F6E
11919  3F6F
11920  3F70
11921  3F71
11922  3F72
11923  3F73
11924  3F74
11925  3F75
11926  3F76
11927  3F77
11928  3F78
11929  3F79
11930  3F7A
11931  3F7B
11932  3F7C
11933  3F7D
11934  3F7E
11935  3F7F
11936  3F80
11937  3F81
11938  3F82
11939  3F83
11940  3F84
11941  3F85
11942  3F86
11943  3F87
11944  3F88
11945  3F89
11946  3F8A
11947  3F8B
11948  3F8C
11949  3F8D
11950  3F8E
11951  3F8F
11952  3F90
11953  3F91
11954  3F92
11955  3F93
11956  3F94
11957  3F95
11958  3F96
11959  3F97
11960  3F98
11961  3F99
11962  3F9A
11963  3F9B
11964  3F9C
11965  3F9D
11966  3F9E
11967  3F9F
11968  3FA0
11969  3FA1
11970  3FA2
11971  3FA3
11972  3FA4
11973  3FA5
11974  3FA6
11975  3FA7
11976  3FA8
11977  3FA9
11978  3FAA
11979  3FAB
11980  3FAC
11981  3FAD
11982  3FAE
11983  3FAF
11984  3FB0
11985  3FB1
11986  3FB2
11987  3FB3
11988  3FB4
11989  3FB5
11990  3FB6
11991  3FB7
11992  3FB8
11993  3FB9
11994  3FBA
11995  3FBB
11996  3FBC
11997  3FBD
11998  3FBE
11999  3FBF
12000  3FC0
12001  3FC1
12002  3FC2
12003  3FC3
12004  3FC4
12005  3FC5
12006  3FC6
12007  3FC7
12008  3FC8
12009  3FC9
12010  3FCA
12011  3FCB
12012  3FCC
12013  3FCD
12014  3FCE
12015  3FCF
12016  3FD0
12017  3FD1
12018  3FD2
12019  3FD3
12020  3FD4
12021  3FD5
12022  3FD6
12023  3FD7
12024  3FD8
12025  3FD9
12026  3FDA
12027  3FDB
12028  3FDC
12029  3FDD
12030  3FDE
12031  3FDF
12032  3FE0
12033  3FE1
12034  3FE2
12035  3FE3
12036  3FE4
12037  3FE5
12038  3FE6
12039  3FE7
12040  3FE8
12041  3FE9
12042  3FEA
12043  3FEB
12044  3FEC
12045  3FED
12046  3FEE
12047  3FEF
12048  3FF0
12049  3FF1
12050  3FF2
12051  3FF3
12052  3FF4
12053  3FF5
12054  3FF6
12055  3FF7
12056  3FF8
12057  3FF9
12058  3FFA
12059  3FFB
12060  3FFC
12061  3FFD
12062  3FFE
12063  3FFF
12064  4000
12065  4001
12066  4002
12067  4003
12068  4004
12069  4005
12070  4006
12071  4007
12072  4008
12073  4009
12074  400A
12075  400B
12076  400C
12077  400D
12078  400E
12079  400F
12080  4010
12081  4011
12082  4012
12083  4013
12084  4014
12085  4015
12086  4016
12087  4017
12088  4018
12089  4019
12090  401A
12091  401B
12092  401C
12093  401D
12094  401E
12095  401F
12096  4020
12097  4021
12098  4022
12099  4023
12100  4024
12101  4025
12102  4026
12103  4027
12104  4028
12105  4029
12106  402A
12107  402B
12108  402C
12109  402D
12110  402E
12111  402F
12112  4030
12113  4031
12114  4032
12115  4033
12116  4034
12117  4035
12118  4036
12119  4037
12120  4038
12121  4039
12122  403A
12123  403B
12124  403C
12125  403D
12126  403E
12127  403F
12128  4040
12129  4041
12130  4042
12131  4043
12132  4044
12133  4045
12134  4046
12135  4047
12136  4048
12137  4049
12138  404A
12139  404B
12140  404C
12141  404D
12142  404E
12143  404F
12144  4050
12145  4051
12146  4052
12147  4053
12148  4054
12149  4055
12150  4056
12151  4057
12152  4058
12153  4059
12154  405A
12155  405B
12156  405C
12157  405D
12158  405E
12159  405F
12160  4060
12161  4061
12162  4062
12163  4063
12164  4064
12165  4065
12166  4066
12167  4067
12168  4068
12169  4069
12170  406A
12171  406B
12172  406C
12173  406D
12174  406E
12175  406F
12176  4070
12177  4071
12178  4072
12179  4073
12180  4074
12181  4075
12182  4076
12183  4077
12184  4078
12185  4079
12186  407A
12187  407B
12188  407C
12189  407D
12190  407E
12191  407F
12192  4080
12193  4081
12194  4082
12195  4083
12196  4084
12197  4085
12198  4086
12199  4087
12200  4088
12201  4089
12202  408A
12203  408B
12204  408C
12205  408D
12206  408E
12207  408F
12208  4090
12209  4091
12210  4092
12211  4093
12212  4094
12213  4095
12214  4096
12215  4097
12216  4098
12217  4099
12218  409A
12219  409B
12220  409C
12221  409D
12222  409E
12223  409F
12224  40A0
12225  40A1
12226  40A2
12227  40A3
12228  40A4
12229  40A5
12230  40A6
12231  40A7
12232  40A8
12233  40A9
12234  40AA
12235  40AB
12236  40AC
12237  40AD
12238  40AE
12239  40AF
12240  40B0
12241  40B1
12242  40B2
12243  40B3
12244  40B4
12245  40B5
12246  40B6
12247  40B7
12248  40B8
12249  40B9
12250  40BA
12251  40BB
12252  40BC
12253  40BD
12254  40BE
12255  40BF
12256  40C0
12257  40C1
12258  40C2
12259  40C3
12260  40C4
12261  40C5
12262  40C6
12263  40C7
12264  40C8
12265  40C9
12266  40CA
12267  40CB
12268  40CC
12269  40CD
12270  40CE
12271  40CF
12272  40D0
12273  40D1
12274  40D2
12275  40D3
12276  40D4
12277  40D5
12278  40D6
12279  40D7
12280  40D8
12281  40D9
12282  40DA
12283  40DB
12284  40DC
12285  40DD
12286  40DE
12287  40DF
12288  40E0
12289  40E1
12290  40E2
12291  40E3
12292  40E4
12293  40E5
12294  40E6
12295  40E7
12296  40E8
12297  40E9
12298  40EA
12299  40EB
12300  40EC
12301  40ED
12302  40EE
12303  40EF
12304  40F0
12305  40F1
12306  40F2
12307  40F3
12308  40F4
12309  40F5
12310  40F6
12311  40F7
12312  40F8
12313  40F9
12314  40FA
12315  40FB
12316  40FC
12317  40FD
12318  40FE
12319  40FF
12320  4100
12321  4101
12322  4102
12323  4103
12324  4104
12325  4105
12326  4106
12327  4107
12328  4108
12329  4109
12330  410A
12331  410B
12332  410C
12333  410D
12334  410E
12335  410F
12336  4110
12337  4111
12338  4112
12339  4113
12340  4114
12341  4115
12342  4116
12343  4117
12344  4118
12345  4119
12346  411A
12347  411B
12348  411C
12349  411D
12350  411E
12351  411F
12352  4120
12353  4121
12354  4122
12355  4123
12356  4124
12357  4125
12358  4126
12359  4127
12360  4128
12361  4129
12362  412A
12363  412B
12364  412C
12365  412D
12366  412E
12367  412F
12368  4130
12369  4131
12370  4132
12371  4133
12372  4134
12373  4135
12374  4136
12375  4137
12376  4138
12377  4139
12378  413A
12379  413B
12380  413C
12381  413D
12382  413E
12383  413F
12384  4140
12385  4141
12386  4142
12387  4143
12388  4144
12389  4145
12390  4146
12391  4147
12392  4148
12393  4149
12394  414A
12395  414B
12396  414C
12397  414D
12398  414E
12399  414F
12400  4150
12401  4151
12402  4152
12403  4153
12404  4154
12405  4155
12406  4156
12407  4157
12408  4158
12409  4159
12410  415A
12411  415B
12412  415C
12413  415D
12414  415E
12415  415F
12416  4160
12417  4161
12418  4162
12419  4163
12420  4164
12421  4165
12422  4166
12423  4167
12424  4168
12425  4169
12426  416A
12427  416B
12428  416C
12429  416D
12430  416E
12431  416F
12432  4170
12433  4171
12434  4172
12435  4173
12436  4174
12437  4175
12438  4176
12439  4177
12440  4178
12441  4179
12442  417A
12443  417B
12444  417C
12445  417D
12446  417E
12447  417F
12448  4180
12449  4181
12450  4182
12451  4183
12452  4184
12453  4185
12454  4186
12455  4187
12456  4188
12457  4189
12458  418A
12459  418B
12460  418C
12461  418D
12462  418E
12463  418F
12464  4190
12465  4191
12466  4192
12467  4193
12468  4194
12469  4195
12470  4196
12471  4197
12472  4198
12473  4199
12474  419A
12475  419B
12476  419C
12477  419D
12478  419E
12479  419F
12480  41A0
12481  41A1
12482  41A2
12483  41A3
12484  41A4
12485  41A5
12486  41A6
12487  41A7
12488  41A8
12489  41A9
12490  41AA
12491  41AB
12492  41AC
12493  41AD
12494  41AE
12495  41AF
12496  41B0
12497  41B1
12498  41B2
12499  41B3
12500  41B4
12501  41B5
12502  41B6
12503  41B7
12504  41B8
12505  41B9
12506  41BA
12507  41BB
12508  41BC
12509  41BD
12510  41BE
12511  41BF
12512  41C0
12513  41C1
12514  41C2
12515  41C3
12516  41C4
12517  41C5
12518  41C6
12519  41C7
12520  41C8
12521  41C9
12522  41CA
12523  41CB
12524  41CC
12525  41CD
12526  41CE
12527  41CF
12528  41D0
12529  41D1
12530  41D2
12531  41D3
12532  41D4
12533  41D5
12534  41D6
12535  41D7
12536  41D8
12537  41D9
12538  41DA
12539  41DB
12540  41DC
12541  41DD
12542  41DE
12543  41DF
12544  41E0
12545  41E1
12546  41E2
12547  41E3
12548  41E4
12549  41E5
12550  41E6
12551  41E7
12552  41E8
12553  41E9
12554  41EA
12555  41EB
12556  41EC
12557  41ED
12558  41EE
12559  41EF
12560  41F0
12561  41F1
12562  41F2
12563  41F3
12564  41F4
12565  41F5
12566  41F6
12567  41F7
12568  41F8
12569  41F9
12570  41FA
12571  41FB
12572  41FC
12573  41FD
12574  41FE
12575  41FF
12576  4200
12577  4201
12578  4202
12579  4203
12580  4204
12581  4205
12582  4206
12583  4207
12584  4208
12585  4209
12586  420A
12587  420B
12588  420C
12589  420D
12590  420E
12591  420F
12592  4210
12593  4211
12594  4212
12595  4213
12596  4214
12597  4215
12598  4216
12599  4217
12600  4218
12601  4219
12602  421A
12603  421B
12604  421C
12605  421D
12606  421E
12607  421F
12608  4220
12609  4221
12610  4222
12611  4223
12612  4224
12613  4225
12614  4226
12615  4227
12616  4228
12617  4229
12618  422A
12619  422B
12620  422C
12621  422D
12622  422E
12623  422F
12624  4230
12625  4231
12626  4232
12627  4233
12628  4234
12629  4235
12630  4236
12631  4237
12632  4238
12633  4239
12634  423A
12635  423B
12636  423C
12637  423D
12638  423E
12639  423F
12640  4240
12641  4241
12642  4242
12643  4243
12644  4244
12645  4245
12646  4246
12647  4247
12648  4248
12649  4249
12650  424A
12651  424B
12652  424C
12653  424D
12654  424E
12655  424F
12656  4250
12657  4251
12658  4252
12659  4253
12660  4254
12661  4255
12662  4256
12663  4257
12664  4258
12665  4259
12666  425A
12667  425B
12668  425C
12669  425D
12670  425E
12671  425F
12672  4260
12673  4261
12674  4262
12675  4263
12676  4264
12677  4265
12678  4266
12679  4267
12680  4268
12681  4269
12682  426A
12683  426B
12684  426C
12685  426D
12686  426E
12687  426F
12688  4270
12689  4271
12690  4272
12691  4273
12692  4274
12693  4275
12694  4276
12695  4277
12696  4278
12697  4279
12698  427A
12699  427B
12700  427C
12701  427D
12702  427E
12703  427F
12704  4280
12705  4281
12706  4282
12707  4283
12708  4284
12709  4285
12710  4286
12711  4287
12712  4288
12713  4289
12714  428A
12715  428B
12716  428C
12717  428D
12718  428E
12719  428F
12720  4290
12721  4291
12722  4292
12723  4293
12724  4294
12725  4295
12726  4296
12727  4297
12728  4298
12729  4299
12730  429A
12731  429B
12732  429C
12733  429D
12734  429E
12735  429F
12736  42A0
12737  42A1
12738  42A2
12739  42A3
12740  42A4
12741  42A5
12742  42A6
12743  42A7
12744  42A8
12745  42A9
12746  42AA
12747  42AB
12748  42AC
12749  42AD
12750  42AE
12751  42AF
12752  42B0
12753  42B1
12754  42B2
12755  42B3
12756  42B4
12757  42B5
12758  42B6
12759  42B7
12760  42B8
12761  42B9
12762  42BA
12763  42BB
12764  42BC
12765  42BD
12766  42BE
12767  42BF
12768  42C0
12769  42C1
12770  42C2
12771  42C3
12772  42C4
12773  42C5
12774  42C6
12775  42C7
12776  42C8
12777  42C9
12778  42CA
12779  42CB
12780  42CC
12781  42CD
12782  42CE
12783  42CF
12784  42D0
12785  42D1
12786  42D2
12787  42D3
12788  42D4
12789  42D5
12790  42D6
12791  42D7
12792  42D8
12793  42D9
12794  42DA
12795  42DB
12796  42DC
12797  42DD
12798  42DE
12799  42DF
12800  42E0
12801  42E1
12802  42E2
12803  42E3
12804  42E4
12805  42E5
12806  42E6
12807  42E7
12808  42E8
12809  42E9
12810  42EA
12811  42EB
12812  42EC
12813  42ED
12814  42EE
12815  42EF
12816  42F0
12817  42F1
12818  42F2
12819  42F3
12820  42F4
12821  42F5
12822  42F6
12823  42F7
12824  42F8
12825  42F9
12826  42FA
12827  42FB
12828  42FC
12829  42FD
12830  42FE
12831  42FF
12832  4300
12833  4301
12834  4302
12835  4303
12836  4304
12837  4305
12838  4306
12839  4307
12840  4308
12841  4309
12842  430A
12843  430B
12844  430C
12845  430D
12846  430E
12847  430F
12848  4310
12849  4311
12850  4312
12851  4313
12852  4314
12853  4315
12854  4316
12855  4317
12856  4318
12857  4319
12858  431A
12859  431B
12860  431C
12861  431D
12862  431E
12863  431F
12864  4320
12865  4321
12866  4322
12867  4323
12868  4324
12869  4325
12870  4326
12871  4327
12872  4328
12873  4329
12874  432A
12875  432B
12876  432C
12877  432D
12878  432E
12879  432F
12880  4330
12881  4331
12882  4332
12883  4333
12884  4334
12885  4335
12886  4336
12887  4337
12888  4338
12889  4339
12890  433A
12891  433B
12892  433C
12893  433D
12894  433E
12895  433F
12896  4340
12897  4341
12898  4342
12899  4343
12900  4344
12901  4345
12902  4346
12903  4347
12904  4348
12905  4349
12906  434A
12907  434B
12908  434C
12909  434D
12910  434E
12911  434F
12912  4350
12913  4351
12914  4352
12915  4353
12916  4354
12917  4355
12918  4356
12919  4357
12920  4358
12921  4359
12922  435A
12923  435B
12924  435C
12925  435D
12926  435E
12927  435F
12928  4360
12929  4361
12930  4362
12931  4363
12932  4364
12933  4365
12934  4366
12935  4367
12936  4368
12937  4369
12938  436A
12939  436B
12940  436C
12941  436D
12942  436E
12943  436F
12944  4370
12945  4371
12946  4372
12947  4373
12948  4374
12949  4375
12950  4376
12951  4377
12952  4378
12953  4379
12954  437A
12955  437B
12956  437C
12957  437D
12958  437E
12959  437F
12960  4380
12961  4381
12962  4382
12963  4383
12964  4384
12965  4385
12966  4386
12967  4387
12968  4388
12969  4389
12970  438A
12971  438B
12972  438C
12973  438D
12974  438E
12975  438F
12976  4390
12977  4391
12978  4392
12979  4393
12980  4394
12981  4395
12982  4396
12983  4397
12984  4398
12985  4399
12986  439A
12987  439B
12988  439C
12989  439D
12990  439E
12991  439F
12992  43A0
12993  43A1
12994  43A2
12995  43A3
12996  43A4
12997  43A5
12998  43A6
12999  43A7
13000  43A8
13001  43A9
13002  43AA
13003  43AB
13004  43AC
13005  43AD
13006  43AE
13007  43AF
13008  43B0
13009  43B1
13010  43B2
13011  43B3
13012  43B4
13013  43B5
13014  43B6
13015  43B7
13016  43B8
13017  43B9
13018  43BA
13019  43BB
13020  43BC
13021  43BD
13022  43BE
13023  43BF
13024  43C0
13025  43C1
13026  43C2
13027  43C3
13028  43C4
13029  43C5
13030  43C6
13031  43C7
13032  43C8
13033  43C9
13034  43CA
13035  43CB
13036  43CC
13037  43CD
13038  43CE
13039  43CF
13040  43D0
13041  43D1
13042  43D2
13043  43D3
13044  43D4
13045  43D5
13046  43D6
13047  43D7
13048  43D8
13049  43D9
13050  43DA
13051  43DB
13052  43DC
13053  43DD
13054  43DE
13055  43DF
13056  43E0
13057  43E1
13058  43E2
13059  43E3
13060  43E4
13061  43E5
13062  43E6
13063  43E7
13064  43E8
13065  43E9
13066  43EA
13067  43EB
13068  43EC
13069  43ED
13070  43EE
13071  43EF
13072  43F0
13073  43F1
13074  43F2
13075  43F3
13076  43F4
13077  43F5
13078  43F6
13079  43F7
13080  43F8
13081  43F9
13082  43FA
13083  43FB
13084  43FC
13085  43FD
13086  43FE
13087  43FF
13088  4400
13089  4401
13090  4402
13091  4403
13092  4404
13093  4405
13094  4406
13095  4407
13096  4408
13097  4409
13098  440A
13099  440B
13100  440C
13101  440D
13102  440E
13103  440F
13104  4410
13105  4411
13106  4412
13107  4413
13108  4414
13109  4415
13110  4416
13111  4417
13112  4418
13113  4419
13114  441A
13115  441B
13116  441C
13117  441D
13118  441E
13119  441F
13120  4420
13121  4421
13122  4422
13123  4423
13124  4424
13125  4425
13126  4426
13127  4427
13128  4428
13129  4429
13130  442A
13131  442B
13132  442C
13133  442D
13134  442E
13135  442F
13136  4430
13137  4431
13138  4432
13139  4433
13140  4434
13141  4435
13142  4436
13143  4437
13144  4438
13145  4439
13146  443A
13147  443B
13148  443C
13149  443D
13150  443E
13151  443F
13152  4440
13153  4441
13154  4442
13155  4443
13156  4444
13157  4445
13158  4446
13159  4447
13160  4448
13161  4449
13162  444A
13163  444B
13164  444C
13165  444D
13166  444E
13167  444F
13168  4450
13169  4451
13170  4452
13171  4453
13172  4454
13173  4455
13174  4456
13175  4457
13176  4458
13177  4459
13178  445A
13179  445B
13180  445C
13181  445D
13182  445E
13183  445F
13184  4460
13185  4461
13186  4462
13187  4463
13188  4464
13189  4465
13190  4466
13191  4467
13192  4468
13193  4469
13194  446A
13195  446B
13196  446C
13197  446D
13198  446E
13199  446F
13200  4470
13201  4471
13202  4472
13203  4473
13204  4474
13205  4475
13206  4476
13207  4477
13208  4478
13209  4479
13210  447A
13211  447B
13212  447C
13213  447D
13214  447E
13215  447F
13216  4480
13217  4481
13218  4482
13219  4483
13220  4484
13221  4485
13222  4486
13223  4487
13224  4488
13225  4489
13226  448A
13227  448B
13228  448C
13229  448D
13230  448E
13231  448F
13232  4490
13233  4491
13234  4492
13235  4493
13236  4494
13237  4495
13238  4496
13239  4497
13240  4498
13241  4499
13242  449A
13243  449B
13244  449C
13245  449D
13246  449E
13247  449F
13248  44A0
13249  44A1
13250  44A2
13251  44A3
13252  44A4
13253  44A5
13254  44A6
13255  44A7
13256  44A8
13257  44A9
13258  44AA
13259  44AB
13260  44AC
13261  44AD
13262  44AE
13263  44AF
13264  44B0
13265  44B1
13266  44B2
13267  44B3
13268  44B4
13269  44B5
13270  44B6
13271  44B7
13272  44B8
13273  44B9
13274  44BA
13275  44BB
13276  44BC
13277  44BD
13278  44BE
13279  44BF
13280  44C0
13281  44C1
13282  44C2
13283  44C3
13284  44C4
13285  44C5
13286  44C6
13287  44C7
13288  44C8
13289  44C9
13290  44CA
13291  44CB
13292  44CC
13293  44CD
13294  44CE
13295  44CF
13296  44D0
13297  44D1
13298  44D2
13299  44D3
13300  44D4
13301  44D5
13302  44D6
13303  44D7
13304  44D8
13305  44D9
13306  44DA
13307  44DB
13308  44DC
13309  44DD
13310  44DE
13311  44DF
13312  44E0
13313  44E1
13314  44E2
13315  44E3
13316  44E4
13317  44E5
13318  44E6
13319  44E7
13320  44E8
13321  44E9
13322  44EA
13323  44EB
13324  44EC
13325  44ED
13326  44EE
13327  44EF
13328  44F0
13329  44F1
13330  44F2
13331  44F3
13332  44F4
13333  44F5
13334  44F6
13335  44F7
13336  44F8
13337  44F9
13338  44FA
13339  44FB
13340  44FC
13341  44FD
13342  44FE
13343  44FF
13344  4500
13345  4501
13346  4502
13347  4503
13348  4504
13349  4505
13350  4506
13351  4507
13352  4508
13353  4509
13354  450A
13355  450B
13356  450C
13357  450D
13358  450E
13359  450F
13360  4510
13361  4511
13362  4512
13363  4513
13364  4514
13365  4515
13366  4516
13367  4517
13368  4518
13369  4519
13370  451A
13371  451B
13372  451C
13373  451D
13374  451E
13375  451F
13376  4520
13377  4521
13378  4522
13379  4523
13380  4524
13381  4525
13382  4526
13383  4527
13384  4528
13385  4529
13386  452A
13387  452B
13388  452C
13389  452D
13390  452E
13391  452F
13392  4530
13393  4531
13394  4532
13395  4533
13396  4534
13397  4535
13398  4536
13399  4537
13400  4538
13401  4539
13402  453A
13403  453B
13404  453C
13405  453D
13406  453E
13407  453F
13408  4540
13409  4541
13410  4542
13411  4543
13412  4544
13413  4545
13414  4546
13415  4547
13416  4548
13417  4549
13418  454A
13419  454B
13420  454C
13421  454D
13422  454E
13423  454F
13424  4550
13425  4551
13426  4552
13427  4553
13428  4554
13429  4555
13430  4556
13431  4557
13432  4558
13433  4559
13434  455A
13435  455B
13436  455C
13437  455D
13438  455E
13439  455F
13440  4560
13441  4561
13442  4562
13443  4563
13444  4564
13445  4565
13446  4566
13447  4567
13448  4568
13449  4569
13450  456A
13451  456B
13452  456C
13453  456D
13454  456E
13455  456F
13456  4570
13457  4571
13458  4572
13459  4573
13460  4574
13461  4575
13462  4576
13463  4577
13464  4578
13465  4579
13466  457A
13467  457B
13468  457C
13469  457D
13470  457E
13471  457F
13472  4580
13473  4581
13474  4582
13475  4583
13476  4584
13477  4585
13478  4586
13479  4587
13480  4588
13481  4589
13482  458A
13483  458B
13484  458C
13485  458D
13486  458E
13487  458F
13488  4590
13489  4591
13490  4592
13491  4593
13492  4594
13493  4595
13494  4596
13495  4597
13496  4598
13497  4599
13498  459A
13499  459B
13500  459C
13501  459D
13502  459E
13503  459F
13504  45A0
13505  45A1
13506  45A2
13507  45A3
13508  45A4
13509  45A5
13510  45A6
13511  45A7
13512  45A8
13513  45A9
13514  45AA
13515  45AB
13516  45AC
13517  45AD
13518  45AE
13519  45AF
13520  45B0
13521  45B1
13522  45B2
13523  45B3
13524  45B4
13525  45B5
13526  45B6
13527  45B7
13528  45B8
13529  45B9
13530  45BA
13531  45BB
13532  45BC
13533  45BD
13534  45BE
13535  45BF
13536  45C0
13537  45C1
13538  45C2
13539  45C3
13540  45C4
13541  45C5
13542  45C6
13543  45C7
13544  45C8
13545  45C9
13546  45CA
13547  45CB
13548  45CC
13549  45CD
13550  45CE
13551  45CF
13552  45D0
13553  45D1
13554  45D2
13555  45D3
13556  45D4
13557  45D5
13558  45D6
13559  45D7
13560  45D8
13561  45D9
13562  45DA
13563  45DB
13564  45DC
13565  45DD
13566  45DE
13567  45DF
13568  45E0
13569  45E1
13570  45E2
13571  45E3
13572  45E4
13573  45E5
13574  45E6
13575  45E7
13576  45E8
13577  45E9
13578  45EA
13579  45EB
13580  45EC
13581  45ED
13582  45EE
13583  45EF
13584  45F0
13585  45F1
13586  45F2
13587  45F3
13588  45F4
13589  45F5
13590  45F6
13591  45F7
13592  45F8
13593  45F9
13594  45FA
13595  45FB
13596  45FC
13597  45FD
13598  45FE
13599  45FF
13600  4600
13601  4601
13602  4602
13603  4603
13604  4604
13605  4605
13606  4606
13607  4607
13608  4608
13609  4609
13610  460A
13611  460B
13612  460C
13613  460D
13614  460E
13615  460F
13616  4610
13617  4611
13618  4612
13619  4613
13620  4614
13621  4615
13622  4616
13623  4617
13624  4618
13625  4619
13626  461A
13627  461B
13628  461C
13629  461D
13630  461E
13631  461F
13632  4620
13633  4621
13634  4622
13635  4623
13636  4624
13637  4625
13638  4626
13639  4627
13640  4628
13641  4629
13642  462A
13643  462B
13644  462C
13645  462D
13646  462E
13647  462F
13648  4630
13649  4631
13650  4632
13651  4633
13652  4634
13653  4635
13654  4636
13655  4637
13656  4638
13657  4639
13658  463A
13659  463B
13660  463C
13661  463D
13662  463E
13663  463F
13664  4640
13665  4641
13666  4642
13667  4643
13668  4644
13669  4645
13670  4646
13671  4647
13672  4648
13673  4649
13674  464A
13675  464B
13676  464C
13677  464D
13678  464E
13679  464F
13680  4650
13681  4651
13682  4652
13683  4653
13684  4654
13685  4655
13686  4656
13687  4657
13688  4658
13689  4659
13690  465A
13691  465B
13692  465C
13693  465D
13694  465E
13695  465F
13696  4660
13697  4661
13698  4662
13699  4663
13700  4664
13701  4665
13702  4666
13703  4667
13704  4668
13705  4669
13706  466A
13707  466B
13708  466C
13709  466D
13710  466E
13711  466F
13712  4670
13713  4671
13714  4672
13715  4673
13716  4674
13717  4675
13718  4676
13719  4677
13720  4678
13721  4679
13722  467A
13723  467B
13724  467C
13725  467D
13726  467E
13727  467F
13728  4680
13729  4681
13730  4682
13731  4683
13732  4684
13733  4685
13734  4686
13735  4687
13736  4688
13737  4689
13738  468A
13739  468B
13740  468C
13741  468D
13742  468E
13743  468F
13744  4690
13745  4691
13746  4692
13747  4693
13748  4694
13749  4695
13750  4696
13751  4697
13752  4698
13753  4699
13754  469A
13755  469B
13756  469C
13757  469D
13758  469E
13759  469F
13760  46A0
13761  46A1
13762  46A2
13763  46A3
13764  46A4
13765  46A5
13766  46A6
13767  46A7
13768  46A8
13769  46A9
13770  46AA
13771  46AB
13772  46AC
13773  46AD
13774  46AE
13775  46AF
13776  46B0
13777  46B1
13778  46B2
13779  46B3
13780  46B4
13781  46B5
13782  46B6
13783  46B7
13784  46B8
13785  46B9
13786  46BA
13787  46BB
13788  46BC
13789  46BD
13790  46BE
13791  46BF
13792  46C0
13793  46C1
13794  46C2
13795  46C3
13796  46C4
13797  46C5
13798  46C6
13799  46C7
13800  46C8
13801  46C9
13802  46CA
13803  46CB
13804  46CC
13805  46CD
13806  46CE
13807  46CF
13808  46D0
13809  46D1
13810  46D2
13811  46D3
13812  46D4
13813  46D5
13814  46D6
13815  46D7
13816  46D8
13817  46D9
13818  46DA
13819  46DB
13820  46DC
13821  46DD
13822  46DE
13823  46DF
13824  46E0
13825  46E1
13826  46E2
13827  46E3
13828  46E4
13829  46E5
13830  46E6
13831  46E7
13832  46E8
13833  46E9
13834  46EA
13835  46EB
13836  46EC
13837  46ED
13838  46EE
13839  46EF
13840  46F0
13841  46F1
13842  46F2
13843  46F3
13844  46F4
13845  46F5
13846  46F6
13847  46F7
13848  46F8
13849  46F9
13850  46FA
13851  46FB
13852  46FC
13853  46FD
13854  46FE
13855  46FF
13856  4700
13857  4701
13858  4702
13859  4703
13860  4704
13861  4705
13862  4706
13863  4707
13864  4708
13865  4709
13866  470A
13867  470B
13868  470C
13869  470D
13870  470E
13871  470F
13872  4710
13873  4711
13874  4712
13875  4713
13876  4714
13877  4715
13878  4716
13879  4717
13880  4718
13881  4719
13882  471A
13883  471B
13884  471C
13885  471D
13886  471E
13887  471F
13888  4720
13889  4721
13890  4722
13891  4723
13892  4724
13893  4725
13894  4726
13895  4727
13896  4728
13897  4729
13898  472A
13899  472B
13900  472C
13901  472D
13902  472E
13903  472F
13904  4730
13905  4731
13906  4732
13907  4733
13908  4734
13909  4735
13910  4736
13911  4737
13912  4738
13913  4739
13914  473A
13915  473B
13916  473C
13917  473D
13918  473E
13919  473F
13920  4740
13921  4741
13922  4742
13923  4743
13924  4744
13925  4745
13926  4746
13927  4747
13928  4748
13929  4749
13930  474A
13931  474B
13932  474C
13933  474D
13934  474E
13935  474F
13936  4750
13937  4751
13938  4752
13939  4753
13940  4754
13941  4755
13942  4756
13943  4757
13944  4758
13945  4759
13946  475A
13947  475B
13948  475C
13949  475D
13950  475E
13951  475F
13952  4760
13953  4761
13954  4762
13955  4763
13956  4764
13957  4765
13958  4766
13959  4767
13960  4768
13961  4769
13962  476A
13963  476B
13964  476C
13965  476D
13966  476E
13967  476F
13968  4770
13969  4771
13970  4772
13971  4773
13972  4774
13973  4775
13974  4776
13975  4777
13976  4778
13977  4779
13978  477A
13979  477B
13980  477C
13981  477D
13982  477E
13983  477F
13984  4780
13985  4781
13986  4782
13987  4783
13988  4784
13989  4785
13990  4786
13991  4787
13992  4788
13993  4789
13994  478A
13995  478B
13996  478C
13997  478D
13998  478E
13999  478F
14000  4790
14001  4791
14002  4792
14003  4793
14004  4794
14005  4795
14006  4796
14007  4797
14008  4798
14009  4799
14010  479A
14011  479B
14012  479C
14013  479D
14014  479E
14015  479F
14016  47A0
14017  47A1
14018  47A2
14019  47A3
14020  47A4
14021  47A5
14022  47A6
14023  47A7
14024  47A8
14025  47A9
14026  47AA
14027  47AB
14028  47AC
14029  47AD
14030  47AE
14031  47AF
14032  47B0
14033  47B1
14034  47B2
14035  47B3
14036  47B4
14037  47B5
14038  47B6
14039  47B7
14040  47B8
14041  47B9
14042  47BA
14043  47BB
14044  47BC
14045  47BD
14046  47BE
14047  47BF
14048  47C0
14049  47C1
14050  47C2
14051  47C3
14052  47C4
14053  47C5
14054  47C6
14055  47C7
14056  47C8
14057  47C9
14058  47CA
14059  47CB
14060  47CC
14061  47CD
14062  47CE
14063  47CF
14064  47D0
14065  47D1
14066  47D2
14067  47D3
14068  47D4
14069  47D5
14070  47D6
14071  47D7
14072  47D8
14073  47D9
14074  47DA
14075  47DB
14076  47DC
14077  47DD
14078  47DE
14079  47DF
14080  47E0
14081  47E1
14082  47E2
14083  47E3
14084  47E4
14085  47E5
14086  47E6
14087  47E7
14088  47E8
14089  47E9
14090  47EA
14091  47EB
14092  47EC
14093  47ED
14094  47EE
14095  47EF
14096  47F0
14097  47F1
14098  47F2
14099  47F3
14100  47F4
14101  47F5
14102  47F6
14103  47F7
14104  47F8
14105  47F9
14106  47FA
14107  47FB
14108  47FC
14109  47FD
14110  47FE
14111  47FF
14112  4800
14113  4801
14114  4802
14115  4803
14116  4804
14117  4805
14118  4806
14119  4807
14120  4808
14121  4809
14122  480A
14123  480B
14124  480C
14125  480D
14126  480E
14127  480F
14128  4810
14129  4811
14130  4812
14131  4813
14132  4814
14133  4815
14134  4816
14135  4817
14136  4818
14137  4819
14138  481A
14139  481B
14140  481C
14141  481D
14142  481E
14143  481F
14144  4820
14145  4821
14146  4822
14147  4823
14148  4824
14149  4825
14150  4826
14151  4827
14152  4828
14153  4829
14154  482A
14155  482B
14156  482C
14157  482D
14158  482E
14159  482F
14160  4830
14161  4831
14162  4832
14163  4833
14164  4834
14165  4835
14166  4836
14167  4837
14168  4838
14169  4839
14170  483A
14171  483B
14172  483C
14173  483D
14174  483E
14175  483F
14176  4840
14177  4841
14178  4842
14179  4843
14180  4844
14181  4845
14182  4846
14183  4847
14184  4848
14185  4849
14186  484A
14187  484B
14188  484C
14189  484D
14190  484E
14191  484F
14192  4850
14193  4851
14194  4852
14195  4853
14196  4854
14197  4855
14198  4856
14199  4857
14200  4858
14201  4859
14202  485A
14203  485B
14204  485C
14205  485D
14206  485E
14207  485F
14208  4860
14209  4861
14210  4862
14211  4863
14212  4864
14213  4865
14214  4866
14215  4867
14216  4868
14217  4869
14218  486A
14219  486B
14220  486C
14221  486D
14222  486E
14223  486F
14224  4870
14225  4871
14226  4872
14227  4873
14228  4874
14229  4875
14230  4876
14231  4877
14232  4878
14233  4879
14234  487A
14235  487B
14236  487C
14237  487D
14238  487E
14239  487F
14240  4880
14241  4881
14242  4882
14243  4883
14244  4884
14245  4885
14246  4886
14247  4887
14248  4888
14249  4889
14250  488A
14251  488B
14252  488C
14253  488D
14254  488E
14255  488F
14256  4890
14257  4891
14258  4892
14259  4893
14260  4894
14261  4895
14262  4896
14263  4897
14264  4898
14265  4899
14266  489A
14267  489B
14268  489C
14269  489D
14270  489E
14271  489F
14272  48A0
14273  48A1
14274  48A2
14275  48A3
14276  48A4
14277  48A5
14278  48A6
14279  48A7
14280  48A8
14281  48A9
14282  48AA
14283  48AB
14284  48AC
14285  48AD
14286  48AE
14287  48AF
14288  48B0
14289  48B1
14290  48B2
14291  48B3
14292  48B4
14293  48B5
14294  48B6
14295  48B7
14296  48B8
14297  48B9
14298  48BA
14299  48BB
14300  48BC
14301  48BD
14302  48BE
14303  48BF
14304  48C0
14305  48C1
14306  48C2
14307  48C3
14308  48C4
14309  48C5
14310  48C6
14311  48C7
14312  48C8
14313  48C9
14314  48CA
14315  48CB
14316  48CC
14317  48CD
14318  48CE
14319  48CF
14320  48D0
14321  48D1
14322  48D2
14323  48D3
14324  48D4
14325  48D5
14326  48D6
14327  48D7
14328  48D8
14329  48D9
14330  48DA
14331  48DB
14332  48DC
14333  48DD
14334  48DE
14335  48DF
14336  48E0
14337  48E1
14338  48E2
14339  48E3
14340  48E4
14341  48E5
14342  48E6
14343  48E7
14344  48E8
14345  48E9
14346  48EA
14347  48EB
14348  48EC
14349  48ED
14350  48EE
14351  48EF
14352  48F0
14353  48F1
14354  48F2
14355  48F3
14356  48F4
14357  48F5
14358  48F6
14359  48F7
14360  48F8
14361  48F9
14362  48FA
14363  48FB
14364  48FC
14365  48FD
14366  48FE
14367  48FF
14368  4900
14369  4901
14370  4902
14371  4903
14372  4904
14373  4905
14374  4906
14375  4907
14376  4908
14377  4909
14378  490A
14379  490B
14380  490C
14381  490D
14382  490E
14383  490F
14384  4910
14385  4911
14386  4912
14387  4913
14388  4914
14389  4915
14390  4916
14391  4917
14392  4918
14393  4919
14394  491A
14395  491B
14396  491C
14397  491D
14398  491E
14399  491F
14400  4920
14401  4921
14402  4922
14403  4923
14404  4924
14405  4925
14406  4926
14407  4927
14408  4928
14409  4929
14410  492A
14411  492B
14412  492C
14413  492D
14414  492E
14415  492F
14416  4930
14417  4931
14418  4932
14419  4933
14420  4934
14421  4935
14422  4936
14423  4937
14424  4938
14425  4939
14426  493A
14427  493B
14428  493C
14429  493D
14430  493E
14431  493F
14432  4940
14433  4941
14434  4942
14435  4943
14436  4944
14437  4945
14438  4946
14439  4947
14440  4948
14441  4949
14442  494A
14443  494B
14444  494C
14445  494D
14446  494E
14447  494F
14448  4950
14449  4951
14450  4952
14451  4953
14452  4954
14453  4955
14454  4956
14455  4957
14456  4958
14457  4959
14458  495A
14459  495B
14460  495C
14461  495D
14462  495E
14463  495F
14464  4960
14465  4961
14466  4962
14467  4963
14468  4964
14469  4965
14470  4966
14471  4967
14472  4968
14473  4969
14474  496A
14475  496B
14476  496C
14477  496D
14478  496E
14479  496F
14480  4970
14481  4971
14482  4972
14483  4973
14484  4974
14485  4975
14486  4976
14487  4977
14488  4978
14489  4979
14490  497A
14491  497B
14492  497C
14493  497D
14494  497E
14495  497F
14496  4980
14497  4981
14498  4982
14499  4983
14500  4984
14501  4985
14502  4986
14503  4987
14504  4988
14505  4989
14506  498A
14507  498B
14508  498C
14509  498D
14510  498E
14511  498F
14512  4990
14513  4991
14514  4992
14515  4993
14516  4994
14517  4995
14518  4996
14519  4997
14520  4998
14521  4999
14522  499A
14523  499B
14524  499C
14525  499D
14526  499E
14527  499F
14528  49A0
14529  49A1
14530  49A2
14531  49A3
14532  49A4
14533  49A5
14534  49A6
14535  49A7
14536  49A8
14537  49A9
14538  49AA
14539  49AB
14540  49AC
14541  49AD
14542  49AE
14543  49AF
14544  49B0
14545  49B1
14546  49B2
14547  49B3
14548  49B4
14549  49B5
14550  49B6
14551  49B7
14552  49B8
14553  49B9
14554  49BA
14555  49BB
14556  49BC
14557  49BD
14558  49BE
14559  49BF
14560  49C0
14561  49C1
14562  49C2
14563  49C3
14564  49C4
14565  49C5
14566  49C6
14567  49C7
14568  49C8
14569  49C9
14570  49CA
14571  49CB
14572  49CC
14573  49CD
14574  49CE
14575  49CF
14576  49D0
14577  49D1
14578  49D2
14579  49D3
14580  49D4
14581  49D5
14582  49D6
14583  49D7
14584  49D8
14585  49D9
14586  49DA
14587  49DB
14588  49DC
14589  49DD
14590  49DE
14591  49DF
14592  49E0
14593  49E1
14594  49E2
14595  49E3
14596  49E4
14597  49E5
14598  49E6
14599  49E7
14600  49E8
14601  49E9
14602  49EA
14603  49EB
14604  49EC
14605  49ED
14606  49EE
14607  49EF
14608  49F0
14609  49F1
14610  49F2
14611  49F3
14612  49F4
14613  49F5
14614  49F6
14615  49F7
14616  49F8
14617  49F9
14618  49FA
14619  49FB
14620  49FC
14621  49FD
14622  49FE
14623  49FF
14624  4A00
14625  4A01
14626  4A02
14627  4A03
14628  4A04
14629  4A05
14630  4A06
14631  4A07
14632  4A08
14633  4A09
14634  4A0A
14635  4A0B
14636  4A0C
14637  4A0D
14638  4A0E
14639  4A0F
14640  4A10
14641  4A11
14642  4A12
14643  4A13
14644  4A14
14645  4A15
14646  4A16
14647  4A17
14648  4A18
14649  4A19
14650  4A1A
14651  4A1B
14652  4A1C
14653  4A1D
14654  4A1E
14655  4A1F
14656  4A20
14657  4A21
14658  4A22
14659  4A23
14660  4A24
14661  4A25
14662  4A26
14663  4A27
14664  4A28
14665  4A29
14666  4A2A
14667  4A2B
14668  4A2C
14669  4A2D
14670  4A2E
14671  4A2F
14672  4A30
14673  4A31
14674  4A32
14675  4A33
14676  4A34
14677  4A35
14678  4A36
14679  4A37
14680  4A38
14681  4A39
14682  4A3A
14683  4A3B
14684  4A3C
14685  4A3D
14686  4A3E
14687  4A3F
14688  4A40
14689  4A41
14690  4A42
14691  4A43
14692  4A44
14693  4A45
14694  4A46
14695  4A47
14696  4A48
14697  4A49
14698  4A4A
14699  4A4B
14700  4A4C
14701  4A4D
14702  4A4E
14703  4A4F
14704  4A50
14705  4A51
14706  4A52
14707  4A53
14708  4A54
14709  4A55
14710  4A56
14711  4A57
14712  4A58
14713  4A59
14714  4A5A
14715  4A5B
14716  4A5C
14717  4A5D
14718  4A5E
14719  4A5F
14720  4A60
14721  4A61
14722  4A62
14723  4A63
14724  4A64
14725  4A65
14726  4A66
14727  4A67
14728  4A68
14729  4A69
14730  4A6A
14731  4A6B
14732  4A6C
14733  4A6D
14734  4A6E
14735  4A6F
14736  4A70
14737  4A71
14738  4A72
14739  4A73
14740  4A74
14741  4A75
14742  4A76
14743  4A77
14744  4A78
14745  4A79
14746  4A7A
14747  4A7B
14748  4A7C
14749  4A7D
14750  4A7E
14751  4A7F
14752  4A80
14753  4A81
14754  4A82
14755  4A83
14756  4A84
14757  4A85
14758  4A86
14759  4A87
14760  4A88
14761  4A89
14762  4A8A
14763  4A8B
14764  4A8C
14765  4A8D
14766  4A8E
14767  4A8F
14768  4A90
14769  4A91
14770  4A92
14771  4A93
14772  4A94
14773  4A95
14774  4A96
14775  4A97
14776  4A98
14777  4A99
14778  4A9A
14779  4A9B
14780  4A9C
14781  4A9D
14782  4A9E
14783  4A9F
14784  4AA0
14785  4AA1
14786  4AA2
14787  4AA3
14788  4AA4
14789  4AA5
14790  4AA6
14791  4AA7
14792  4AA8
14793  4AA9
14794  4AAA
14795  4AAB
14796  4AAC
14797  4AAD
14798  4AAE
14799  4AAF
14800  4AB0
14801  4AB1
14802  4AB2
14803  4AB3
14804  4AB4
14805  4AB5
14806  4AB6
14807  4AB7
14808  4AB8
14809  4AB9
14810  4ABA
14811  4ABB
14812  4ABC
14813  4ABD
14814  4ABE
14815  4ABF
14816  4AC0
14817  4AC1
14818  4AC2
14819  4AC3
14820  4AC4
14821  4AC5
14822  4AC6
14823  4AC7
14824  4AC8
14825  4AC9
14826  4ACA
14827  4ACB
14828  4ACC
14829  4ACD
14830  4ACE
14831  4ACF
14832  4AD0
14833  4AD1
14834  4AD2
14835  4AD3
14836  4AD4
14837  4AD5
14838  4AD6
14839  4AD7
14840  4AD8
14841  4AD9
14842  4ADA
14843  4ADB
14844  4ADC
14845  4ADD
14846  4ADE
14847  4ADF
14848  4AE0
14849  4AE1
14850  4AE2
14851  4AE3
14852  4AE4
14853  4AE5
14854  4AE6
14855  4AE7
14856  4AE8
14857  4AE9
14858  4AEA
14859  4AEB
14860  4AEC
14861  4AED
14862  4AEE
14863  4AEF
14864  4AF0
14865  4AF1
14866  4AF2
14867  4AF3
14868  4AF4
14869  4AF5
14870  4AF6
14871  4AF7
14872  4AF8
14873  4AF9
14874  4AFA
14875  4AFB
14876  4AFC
14877  4AFD
14878  4AFE
14879  4AFF
14880  4B00
14881  4B01
14882  4B02
14883  4B03
14884  4B04
14885  4B05
14886  4B06
14887  4B07
14888  4B08
14889  4B09
14890  4B0A
14891  4B0B
14892  4B0C
14893  4B0D
14894  4B0E
14895  4B0F
14896  4B10
14897  4B11
14898  4B12
14899  4B13
14900  4B14
14901  4B15
14902  4B16
14903  4B17
14904  4B18
14905  4B19
14906  4B1A
14907  4B1B
14908  4B1C
14909  4B1D
14910  4B1E
14911  4B1F
14912  4B20
14913  4B21
14914  4B22
14915  4B23
14916  4B24
14917  4B25
14918  4B26
14919  4B27
14920  4B28
14921  4B29
14922  4B2A
14923  4B2B
14924  4B2C
14925  4B2D
14926  4B2E
14927  4B2F
14928  4B30
14929  4B31
14930  4B32
14931  4B33
14932  4B34
14933  4B35
14934  4B36
14935  4B37
14936  4B38
14937  4B39
14938  4B3A
14939  4B3B
14940  4B3C
14941  4B3D
14942  4B3E
14943  4B3F
14944  4B40
14945  4B41
14946  4B42
14947  4B43
14948  4B44
14949  4B45
14950  4B46
14951  4B47
14952  4B48
14953  4B49
14954  4B4A
14955  4B4B
14956  4B4C
14957  4B4D
14958  4B4E
14959  4B4F
14960  4B50
14961  4B51
14962  4B52
14963  4B53
14964  4B54
14965  4B55
14966  4B56
14967  4B57
14968  4B58
14969  4B59
14970  4B5A
14971  4B5B
14972  4B5C
14973  4B5D
14974  4B5E
14975  4B5F
14976  4B60
14977  4B61
14978  4B62
14979  4B63
14980  4B64
14981  4B65
14982  4B66
14983  4B67
14984  4B68
14985  4B69
14986  4B6A
14987  4B6B
14988  4B6C
14989  4B6D
14990  4B6E
14991  4B6F
14992  4B70
14993  4B71
14994  4B72
14995  4B73
14996  4B74
14997  4B75
14998  4B76
14999  4B77
15000  4B78
15001  4B79
15002  4B7A
15003  4B7B
15004  4B7C
15005  4B7D
15006  4B7E
15007  4B7F
15008  4B80
15009  4B81
15010  4B82
15011  4B83
15012  4B84
15013  4B85
15014  4B86
15015  4B87
15016  4B88
15017  4B89
15018  4B8A
15019  4B8B
15020  4B8C
15021  4B8D
15022  4B8E
15023  4B8F
15024  4B90
15025  4B91
15026  4B92
15027  4B93
15028  4B94
15029  4B95
15030  4B96
15031  4B97
15032  4B98
15033  4B99
15034  4B9A
15035  4B9B
15036  4B9C
15037  4B9D
15038  4B9E
15039  4B9F
15040  4BA0
15041  4BA1
15042  4BA2
15043  4BA3
15044  4BA4
15045  4BA5
15046  4BA6
15047  4BA7
15048  4BA8
15049  4BA9
15050  4BAA
15051  4BAB
15052  4BAC
15053  4BAD
15054  4BAE
15055  4BAF
15056  4BB0
15057  4BB1
15058  4BB2
15059  4BB3
15060  4BB4
15061  4BB5
15062  4BB6
15063  4BB7
15064  4BB8
15065  4BB9
15066  4BBA
15067  4BBB
15068  4BBC
15069  4BBD
15070  4BBE
15071  4BBF
15072  4BC0
15073  4BC1
15074  4BC2
15075  4BC3
15076  4BC4
15077  4BC5
15078  4BC6
15079  4BC7
15080  4BC8
15081  4BC9
15082  4BCA
15083  4BCB
15084  4BCC
15085  4BCD
15086  4BCE
15087  4BCF
15088  4BD0
15089  4BD1
15090  4BD2
15091  4BD3
15092  4BD4
15093  4BD5
15094  4BD6
15095  4BD7
15096  4BD8
15097  4BD9
15098  4BDA
15099  4BDB
15100  4BDC
15101  4BDD
15102  4BDE
15103  4BDF
15104  4BE0
15105  4BE1
15106  4BE2
15107  4BE3
15108  4BE4
15109  4BE5
15110  4BE6
15111  4BE7
15112  4BE8
15113  4BE9
15114  4BEA
15115  4BEB
15116  4BEC
15117  4BED
15118  4BEE
15119  4BEF
15120  4BF0
15121  4BF1
15122  4BF2
15123  4BF3
15124  4BF4
15125  4BF5
15126  4BF6
15127  4BF7
15128  4BF8
15129  4BF9
15130  4BFA
15131  4BFB
15132  4BFC
15133  4BFD
15134  4BFE
15135  4BFF
15136  4C00
15137  4C01
15138  4C02
15139  4C03
15140  4C04
15141  4C05
15142  4C06
15143  4C07
15144  4C08
15145  4C09
15146  4C0A
15147  4C0B
15148  4C0C
15149  4C0D
15150  4C0E
15151  4C0F
15152  4C10
15153  4C11
15154  4C12
15155  4C13
15156  4C14
15157  4C15
15158  4C16
15159  4C17
15160  4C18
15161  4C19
15162  4C1A
15163  4C1B
15164  4C1C
15165  4C1D
15166  4C1E
15167  4C1F
15168  4C20
15169  4C21
15170  4C22
15171  4C23
15172  4C24
15173  4C25
15174  4C26
15175  4C27
15176  4C28
15177  4C29
15178  4C2A
15179  4C2B
15180  4C2C
15181  4C2D
15182  4C2E
15183  4C2F
15184  4C30
15185  4C31
15186  4C32
15187  4C33
15188  4C34
15189  4C35
15190  4C36
15191  4C37
15192  4C38
15193  4C39
15194  4C3A
15195  4C3B
15196  4C3C
15197  4C3D
15198  4C3E
15199  4C3F
15200  4C40
15201  4C41
15202  4C42
15203  4C43
15204  4C44
15205  4C45
15206  4C46
15207  4C47
15208  4C48
15209  4C49
15210  4C4A
15211  4C4B
15212  4C4C
15213  4C4D
15214  4C4E
15215  4C4F
15216  4C50
15217  4C51
15218  4C52
15219  4C53
15220  4C54
15221  4C55
15222  4C56
15223  4C57
15224  4C58
15225  4C59
15226  4C5A
15227  4C5B
15228  4C5C
15229  4C5D
15230  4C5E
15231  4C5F
15232  4C60
15233  4C61
15234  4C62
15235  4C63
15236  4C64
15237  4C65
15238  4C66
15239  4C67
15240  4C68
15241  4C69
15242  4C6A
15243  4C6B
15244  4C6C
15245  4C6D
15246  4C6E
15247  4C6F
15248  4C70
15249  4C71
15250  4C72
15251  4C73
15252  4C74
15253  4C75
15254  4C76
15255  4C77
15256  4C78
15257  4C79
15258  4C7A
15259  4C7B
15260  4C7C
15261  4C7D
15262  4C7E
15263  4C7F
15264  4C80
15265  4C81
15266  4C82
15267  4C83
15268  4C84
15269  4C85
15270  4C86
15271  4C87
15272  4C88
15273  4C89
15274  4C8A
15275  4C8B
15276  4C8C
15277  4C8D
15278  4C8E
15279  4C8F
15280  4C90
15281  4C91
15282  4C92
15283  4C93
15284  4C94
15285  4C95
15286  4C96
15287  4C97
15288  4C98
15289  4C99
15290  4C9A
15291  4C9B
15292  4C9C
15293  4C9D
15294  4C9E
15295  4C9F
15296  4CA0
15297  4CA1
15298  4CA2
15299  4CA3
15300  4CA4
15301  4CA5
15302  4CA6
15303  4CA7
15304  4CA8
15305  4CA9
15306  4CAA
15307  4CAB
15308  4CAC
15309  4CAD
15310  4CAE
15311  4CAF
15312  4CB0
15313  4CB1
15314  4CB2
15315  4CB3
15316  4CB4
15317  4CB5
15318  4CB6
15319  4CB7
15320  4CB8
15321  4CB9
15322  4CBA
15323  4CBB
15324  4CBC
15325  4CBD
15326  4CBE
15327  4CBF
15328  4CC0
15329  4CC1
15330  4CC2
15331  4CC3
15332  4CC4
15333  4CC5
15334  4CC6
15335  4CC7
15336  4CC8
15337  4CC9
15338  4CCA
15339  4CCB
15340  4CCC
15341  4CCD
15342  4CCE
15343  4CCF
15344  4CD0
15345  4CD1
15346  4CD2
15347  4CD3
15348  4CD4
15349  4CD5
15350  4CD6
15351  4CD7
15352  4CD8
15353  4CD9
15354  4CDA
15355  4CDB
15356  4CDC
15357  4CDD
15358  4CDE
15359  4CDF
15360  4CE0
15361  4CE1
15362  4CE2
15363  4CE3
15364  4CE4
15365  4CE5
15366  4CE6
15367  4CE7
15368  4CE8
15369  4CE9
15370  4CEA
15371  4CEB
15372  4CEC
15373  4CED
15374  4CEE
15375  4CEF
15376  4CF0
15377  4CF1
15378  4CF2
15379  4CF3
15380  4CF4
15381  4CF5
15382  4CF6
15383  4CF7
15384  4CF8
15385  4CF9
15386  4CFA
15387  4CFB
15388  4CFC
15389  4CFD
15390  4CFE
15391  4CFF
15392  4D00
15393  4D01
15394  4D02
15395  4D03
15396  4D04
15397  4D05
15398  4D06
15399  4D07
15400  4D08
15401  4D09
15402  4D0A
15403  4D0B
15404  4D0C
15405  4D0D
15406  4D0E
15407  4D0F
15408  4D10
15409  4D11
15410  4D12
15411  4D13
15412  4D14
15413  4D15
15414  4D16
15415  4D17
15416  4D18
15417  4D19
15418  4D1A
15419  4D1B
15420  4D1C
15421  4D1D
15422  4D1E
15423  4D1F
15424  4D20
15425  4D21
15426  4D22
15427  4D23
15428  4D24
15429  4D25
15430  4D26
15431  4D27
15432  4D28
15433  4D29
15434  4D2A
15435  4D2B
15436  4D2C
15437  4D2D
15438  4D2E
15439  4D2F
15440  4D30
15441  4D31
15442  4D32
15443  4D33
15444  4D34
15445  4D35
15446  4D36
15447  4D37
15448  4D38
15449  4D39
15450  4D3A
15451  4D3B
15452  4D3C
15453  4D3D
15454  4D3E
15455  4D3F
15456  4D40
15457  4D41
15458  4D42
15459  4D43
15460  4D44
15461  4D45
15462  4D46
15463  4D47
15464  4D48
15465  4D49
15466  4D4A
15467  4D4B
15468  4D4C
15469  4D4D
15470  4D4E
15471  4D4F
15472  4D50
15473  4D51
15474  4D52
15475  4D53
15476  4D54
15477  4D55
15478  4D56
15479  4D57
15480  4D58
15481  4D59
15482  4D5A
15483  4D5B
15484  4D5C
15485  4D5D
15486  4D5E
15487  4D5F
15488  4D60
15489  4D61
15490  4D62
15491  4D63
15492  4D64
15493  4D65
15494  4D66
15495  4D67
15496  4D68
15497  4D69
15498  4D6A
15499  4D6B
15500  4D6C
15501  4D6D
15502  4D6E
15503  4D6F
15504  4D70
15505  4D71
15506  4D72
15507  4D73
15508  4D74
15509  4D75
15510  4D76
15511  4D77
15512  4D78
15513  4D79
015514  000557        
015515  000558  var hFonts[54] ;
015516  000559  var stringsCV[54] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
15517  272C
15518  272D
15519  272E
15520  272F
15521  2730
15522  2731
15523  2732
15524  2733
15525  2734
15526  2735
15527  2736
15528  2737
15529  2738
15530  2739
15531  273A
15532  273B
15533  273C
15534  273D
15535  273E
15536  273F
15537  2740
15538  2741
15539  2742
15540  2743
15541  2744
15542  2745
15543  2746
15544  2747
15545  2748
15546  2749
15547  274A
15548  274B
15549  274C
15550  274D
15551  274E
15552  274F
15553  2750
15554  2751
15555  2752
15556  2753
15557  2754
15558  2755
15559  2756
15560  2757
15561  2758
15562  2759
15563  275A
15564  275B
15565  275C
15566  275D
15567  275E
15568  275F
15569  2760
15570  2761
15571  2762
15572  2763
15573  2764
15574  2765
15575  2766
15576  2767
15577  2768
15578  2769
15579  276A
15580  276B
15581  276C
15582  276D
15583  276E
15584  276F
15585  2770
15586  2771
15587  2772
15588  2773
15589  2774
15590  2775
15591  2776
15592  2777
15593  2778
15594  2779
15595  277A
15596  277B
15597  277C
15598  277D
15599  277E
15600  277F
15601  2780
15602  2781
15603  2782
15604  2783
15605  2784
15606  2785
15607  2786
15608  2787
15609  2788
15610  2789
15611  278A
15612  278B
15613  278C
15614  278D
15615  278E
15616  278F
15617  2790
15618  2791
15619  2792
15620  2793
15621  2794
15622  2795
15623  2796
15624  2797
015625  000560  // Start P2.inc
015626  000561  var oObjects[MaxTotObjects+1] ;                 // address of objects
015627  000562  var CurrentForm ;
015628  000563  var TouchXpos, TouchYpos ;
015629  000564  var InputType, TouchState, CurInputData, pInputIndex ;
015630  000565  var comRX[40], cmd[CMDLenMAX] ;
015631  000566        
015632  000567  var InputCS, OutputCS ;
015633  000568        
015634  000569        
015635  000570        
015636  000571  func seroutCS(var op)
015637  000572      serout(op) ;
015638  000573      OutputCS ^= op ;
015639  000574  endfunc
015640  000575        
015641  000576  func nak0()
015642  000577      serout(NAK) ;
015643  000578      InputCS := 0 ;
015644  000579  endfunc
015645  000580        
015646  000581  func seroutOcs()
015647  000582      serout(OutputCS) ;
015648  000583      OutputCS := 0 ;
015649  000584  endfunc
015650  000585        
015651  000586  func SendReport(var id, var objt, var objn, var val)
015652  000587      seroutCS(id) ;
015653  000588      seroutCS(objt) ;
015654  000589      seroutCS(objn) ;
015655  000590      seroutCS(val >> 8) ; // first 8 bits
015656  000591      seroutCS(val) ;
015657  000592      seroutOcs() ;
015658  000593  endfunc
015659  000594        
015660  000595        
015661  000596  func ReadObject(var ObjectType, var ObjectIdx)
015662  000597      var j, k, Objects ;
015663  000598      Objects := *(oObjects+ObjectType) ;
015664  000599        
015665  000600      j := 2 + ObjectIdx * 2 + Objects ;
015666  000601       if (ObjectType == tForm)
015667  000602          k := CurrentForm ;
015668  000603      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
015669  000604          k := img_GetWord(hndl, *j, IMAGE_TAG2);
015670  000605      else if (ObjectType == tStrings)
015671  000606          k := stringsCV[ObjectIdx];
015672  000607          else
015673  000608          k := img_GetWord(hndl, *j, IMAGE_INDEX);
015674  000609          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
015675  000610                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
015676  000611      endif
015677  000612      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
015678  000613  endfunc
015679  000614        
015680  000615        
015681  000616  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
015682  000617      var i, j, k, Objects ;
015683  000618      ObjectType &= 0x3f ;
015684  000619      if (ObjectType == tForm)
015685  000620          ActivateForm(ObjectIdx) ;
015686  000621      else
015687  000622          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
015688  000623          i := *(Objects) ;
015689  000624          switch (ObjectType)
015690  000625              case tWinButton :
015691  000626                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
015692  000627                  break ;
015693  000628              case tUserButton :
015694  000629                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
015695  000630                  break ;
015696  000631              default : j := -1 ;
015697  000632          endswitch
015698  000633          if (j != -1)
015699  000634              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
015700  000635              NewVal := NewVal << 1 ;
015701  000636              if (OVF())      // button group index change
015702  000637                  if (*(j+InputData+Ofs_IPD_P1))
015703  000638                      k &= 1 ;    // mask off old group index for momentary
015704  000639                  else
015705  000640                      k &= 3 ;    // mask off old group index for toggle
015706  000641                  endif
015707  000642              else            // normal set
015708  000643                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
015709  000644                  k &= 0xfffc ;    // retain only group index for state set
015710  000645              endif
015711  000646              NewVal |= k ;
015712  000647          endif
015713  000648           if (ObjectType == tLeddigits)
015714  000649              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
015715  000650              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015716  000651          else if (ObjectType == tStrings)
015717  000652              PrintStrings(ObjectIdx, NewVal, 0);
015718  000653          else
015719  000654              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
015720  000655              img_Show(hndl, i) ; // will only display if form is current
015721  000656          endif
015722  000657      endif
015723  000658  endfunc
015724  000659        
015725  000660  func TurnOffButtons(var group)
015726  000661      var j, k, l;
015727  000662      for (j := 0; j < nInputs; j++)
015728  000663          k := j*IPDatasize ;
015729  000664          if (*(InputData+k+Ofs_IPD_P2) == group)
015730  000665              l := -1 ;
015731  000666               if (*(InputData+k) == tWinButton)
015732  000667                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015733  000668                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
015734  000669                  img_Show(hndl, l);      // only shows on current form
015735  000670              else if (*(InputData+k) == tUserButton)
015736  000671                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015737  000672                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
015738  000673                  img_Show(hndl, l);      // only shows on current form
015739  000674              endif
015740  000675          endif
015741  000676      next
015742  000677  endfunc
015743  000678        
015744  000679        
015745  000680  // WARNING, this code will crash if newval exceeds maximum displayable number
015746  000681  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
015747  000682      var i, j, k, l, lb, newval ;
015748  000683      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
015749  000684      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
015750  000685      i := -1 ;
015751  000686      j := *(typeptr) ;
015752  000687      repeat
015753  000688          typeptr += 2 ;
015754  000689          i++ ;
015755  000690          until (*(typeptr) == imgidx);
015756  000691      j := setptr + i*10 ;
015757  000692        
015758  000693      imgidx++ ;
015759  000694      l := 1 ;
015760  000695      for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
015761  000696          l *= 10 ;
015762  000697      next
015763  000698      lb := *(j+Ofs_Digits_LeadingBlanks) ;
015764  000699      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
015765  000700          k := newval / l ;
015766  000701          newval -= k * l ;
015767  000702          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
015768  000703              if (k == 0)
015769  000704                  k := 10 ;
015770  000705              else
015771  000706                  lb := 0 ;
015772  000707              endif
015773  000708          endif
015774  000709          l /= 10 ;
015775  000710          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
015776  000711          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
015777  000712          img_Show(hndl, imgidx);
015778  000713      next
015779  000714  endfunc
015780  000715        
015781  000716        
015782  000717  func ActivateForm(var newform)
015783  000718      var i, j, *p ;
015784  000719        
015785  000720      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
015786  000721          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
015787  000722              if (img_GetWord(hndl, i, IMAGE_TAG))
015788  000723                  img_Disable(hndl,i) ;
015789  000724              endif
015790  000725          next
015791  000726      endif
015792  000727      CurrentForm := newform ;
015793  000728      // display newform image or clear to image color
015794  000729      if (FormBGcolors[CurrentForm] != ColorBGimage)
015795  000730          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
015796  000731          gfx_Cls() ;
015797  000732          DoGFXObjects() ;                                    // display GFX 'widgets'
015798  000733      endif
015799  000734        
015800  000735      // enable inputs
015801  000736      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
015802  000737          j := img_GetWord(hndl, i, IMAGE_TAG) ;
015803  000738          if (j)
015804  000739              j-- ;
015805  000740              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
015806  000741              //if (j != tKeyboard)
015807  000742              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
015808  000743                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
015809  000744              endif
015810  000745              img_Show(hndl,i) ; // show initialy, if required
015811  000746              if (j == tForm)
015812  000747                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
015813  000748              else if (j == tLeddigits)
015814  000749                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015815  000750              endif
015816  000751          endif
015817  000752      next
015818  000753      for (i := 0; i < nStrings; i++)
015819  000754          if (stringsCV[i] != -1)
015820  000755              WriteObject(tStrings, i, stringsCV[i]) ;
015821  000756          endif
015822  000757      next
015823  000758        
015824  000759  endfunc
015825  000760        
015826  000761  func UpdateObjects(var newval)
015827  000762      var IPidx, otherOBJ ;
015828  000763      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
015829  000764        
015830  000765          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
015831  000766              img_Show(hndl, *(pInputIndex));      // only shows on current form
015832  000767          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
015833  000768              if (*(CurInputData+Ofs_IPD_P1))
015834  000769                  newval &= 1;
015835  000770              else
015836  000771                  newval &= 3;
015837  000772              endif
015838  000773              if (newval > 1) newval := 1;
015839  000774          endif
015840  000775          IPidx := *(CurInputData+TouchState) ;
015841  000776          while(IPidx != 0)
015842  000777              otherOBJ := IPidx + InputData;
015843  000778              if (*(otherOBJ) == OT_REPORT)
015844  000779          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
015845  000780              else if (*(otherOBJ) == OT_MAGIC)
015846  000781                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
015847  000782                  IPidx(newval) ;
015848  000783              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
015849  000784                  if (*(otherOBJ) == OT_ACTIVATE)
015850  000785                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
015851  000786                      InputType := tForm ;
015852  000787                  else if (*(otherOBJ) == OT_SETCONST)
015853  000788                      newval := *(otherOBJ+Ofs_IPD_P3) ;
015854  000789                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015855  000790                  else if (*(otherOBJ) == OT_SETANOTHER)
015856  000791                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015857  000792                  else if (*(otherOBJ) == OT_PREVFRAME)
015858  000793                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
015859  000794                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
015860  000795                      endif
015861  000796                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015862  000797                  else if (*(otherOBJ) == OT_NEXTFRAME)
015863  000798                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
015864  000799                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
015865  000800                      endif
015866  000801                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015867  000802                  else if (*(otherOBJ) == OT_PREVSTRING)
015868  000803                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
015869  000804                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
015870  000805                      endif
015871  000806                  else if (*(otherOBJ) == OT_NEXTSTRING)
015872  000807                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
015873  000808                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
015874  000809                      endif
015875  000810                  endif
015876  000811              endif
015877  000812              IPidx := *(otherOBJ+TouchState) ;
015878  000813          wend
015879  000814      endif
015880  000815  endfunc
015881  000816        
015882  000817  // End P2.inc
015883  000818  func DoGFXObjects()
015884  000819  endfunc
015885  000820        
015886  000821  // Start P3.inc
015887  000822  func main()
015888  000823      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
015889  000824        
015890  000825      putstr("Mounting...\n");
015891  000826      if (!(file_Mount()))
015892  000827          while(!(file_Mount()))
015893  000828              putstr("Drive not mounted...");
015894  000829              pause(200);
015895  000830              gfx_Cls();
015896  000831              pause(200);
015897  000832          wend
015898  000833      endif
015899  000834  //    gfx_MoveTo(0, 0);
015900  000835  //    print(mem_Heap()," ") ;
015901  000836  //    gfx_TransparentColour(0x0020);
015902  000837  //    gfx_Transparency(ON);
015903  000838        
015904  000839      gfx_ScreenMode(LANDSCAPE) ;
015905  000840        
015906  000841      // open image control
015907  000842      hndl := file_LoadImageControl("RepRap_T.dat", "RepRap_T.gci", 1);
015908  000843        
015909  000844      // init 'constants'
015910  000845  // End P3.inc
015911  000846        
015912  000847      oObjects[tDipSwitch] := oDipSwitchs ;
015913  000848      oObjects[tKnob] := oKnobs ;
015914  000849      oObjects[tRockerSwitch] := oRockerSwitchs ;
015915  000850      oObjects[tRotarySwitch] := oRotarySwitchs ;
015916  000851      oObjects[tGSlider] := oGSliders ;
015917  000852      oObjects[tTrackbar] := oTrackbars ;
015918  000853      oObjects[tWinButton] := oWinButtons ;
015919  000854      oObjects[tAngularmeter] := oAngularmeters ;
015920  000855      oObjects[tCoolgauge] := oCoolgauges ;
015921  000856      oObjects[tCustomdigits] := oCustomdigitss ;
015922  000857      oObjects[tForm] := oForms ;
015923  000858      oObjects[tGauge] := oGauges ;
015924  000859      oObjects[tImage] := oImages ;
015925  000860      oObjects[tKeyboard] := oKeyboards ;
015926  000861      oObjects[tLed] := oLeds ;
015927  000862      oObjects[tLeddigits] := oLeddigitss ;
015928  000863      oObjects[tMeter] := oMeters ;
015929  000864      oObjects[tStrings] := oStringss ;
015930  000865      oObjects[tThermometer] := oThermometers ;
015931  000866      oObjects[tUserled] := oUserleds ;
015932  000867      oObjects[tVideo] := oVideos ;
015933  000868      oObjects[tStaticText] := oStaticTexts ;
015934  000869      oObjects[tSounds] := oSoundss ;
015935  000870      oObjects[tTimer] := oTimers ;
015936  000871      oObjects[tSpectrum] := oSpectrums ;
015937  000872      oObjects[tTank] := oTanks ;
015938  000873      oObjects[tUserImages] := oUserImagess ;
015939  000874      oObjects[tPinOutput] := oPinOutputs ;
015940  000875      oObjects[tPinInput] := oPinInputs ;
015941  000876      oObjects[t4Dbutton] := o4Dbuttons ;
015942  000877      oObjects[tAniButton] := oAniButtons ;
015943  000878      oObjects[tColorPicker] := oColorPickers ;
015944  000879      oObjects[tUserButton] := oUserButtons ;
015945  000880      hFonts[0] := file_LoadImageControl("RepRap_T.d03", "RepRap_T.g03", 1)  ;
015946  000881      hFonts[1] := file_LoadImageControl("RepRap_T.d01", "RepRap_T.g01", 1)  ;
015947  000882      hFonts[2] := file_LoadImageControl("RepRap_T.d02", "RepRap_T.g02", 1)  ;
015948  000883      hFonts[3] := FONT3 ;
015949  000884      hFonts[4] := FONT3 ;
015950  000885      hFonts[6] := FONT3 ;
015951  000886      hFonts[11] := file_LoadImageControl("RepRap_T.d06", "RepRap_T.g06", 1)  ;
015952  000887      hFonts[12] := file_LoadImageControl("RepRap_T.d05", "RepRap_T.g05", 1)  ;
015953  000888      hFonts[13] := file_LoadImageControl("RepRap_T.d0D", "RepRap_T.g0D", 1)  ;
015954  000889      hFonts[14] := FONT3 ;
015955  000890      hFonts[15] := FONT3 ;
015956  000891      hFonts[16] := FONT3 ;
015957  000892      hFonts[19] := file_LoadImageControl("RepRap_T.d09", "RepRap_T.g09", 1)  ;
015958  000893      hFonts[21] := FONT3 ;
015959  000894      hFonts[24] := FONT3 ;
015960  000895      hFonts[25] := file_LoadImageControl("RepRap_T.d07", "RepRap_T.g07", 1)  ;
015961  000896      hFonts[28] := FONT3 ;
015962  000897      hFonts[30] := file_LoadImageControl("RepRap_T.d0@", "RepRap_T.g0@", 1)  ;
015963  000898      hFonts[31] := file_LoadImageControl("RepRap_T.d0B", "RepRap_T.g0B", 1)  ;
015964  000899      hFonts[33] := file_LoadImageControl("RepRap_T.d08", "RepRap_T.g08", 1)  ;
015965  000900      hFonts[35] := FONT3 ;
015966  000901      hFonts[37] := file_LoadImageControl("RepRap_T.d04", "RepRap_T.g04", 1)  ;
015967  000902      hFonts[49] := file_LoadImageControl("RepRap_T.d0C", "RepRap_T.g0C", 1)  ;
015968  000903      hFonts[51] := FONT3 ;
015969  000904      hFonts[52] := FONT3 ;
015970  000905      hFonts[7] := hFonts[37] ;
015971  000906      hFonts[8] := hFonts[37] ;
015972  000907      hFonts[9] := hFonts[0] ;
015973  000908      hFonts[10] := hFonts[11] ;
015974  000909      hFonts[17] := hFonts[11] ;
015975  000910      hFonts[18] := hFonts[11] ;
015976  000911      hFonts[22] := hFonts[11] ;
015977  000912      hFonts[26] := hFonts[25] ;
015978  000913      hFonts[27] := hFonts[25] ;
015979  000914      hFonts[29] := hFonts[11] ;
015980  000915      hFonts[32] := hFonts[31] ;
015981  000916      hFonts[34] := hFonts[0] ;
015982  000917      hFonts[36] := hFonts[0] ;
015983  000918      hFonts[38] := hFonts[37] ;
015984  000919      hFonts[39] := hFonts[37] ;
015985  000920      hFonts[40] := hFonts[0] ;
015986  000921      hFonts[41] := hFonts[0] ;
015987  000922      hFonts[42] := hFonts[0] ;
015988  000923      hFonts[43] := hFonts[37] ;
015989  000924      hFonts[44] := hFonts[37] ;
015990  000925      hFonts[45] := hFonts[37] ;
015991  000926      hFonts[46] := hFonts[13] ;
015992  000927      hFonts[47] := hFonts[13] ;
015993  000928      hFonts[48] := hFonts[13] ;
015994  000929      hFonts[50] := hFonts[11] ;
015995  000930      hFonts[53] := hFonts[11] ;
015996  000931  // Start P4.inc
015997  000932      hstrings := file_Open("RepRap_T.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
015998  000933      // init comms
015999  000934      com_Init(comRX,CMDLenMAX,0);
016000  000935      com_SetBaud(COM0,19886);
016001  000936      com_TXbuffer(comTX, 100, 0);
016002  000937      snd_BufSize(2) ;
016003  000938      // tag 'real' objects
016004  000939      for (i := 0; i <= MaxTotObjects; i++)
016005  000940          if (   (i != tSounds)
016006  000941              && (i != tTimer)
016007  000942              && (i != tPinOutput)
016008  000943              && (i != tPinInput) )
016009  000944              TouchXpos := oObjects[i] ;
016010  000945              TouchYpos := *(TouchXpos) ;
016011  000946              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
016012  000947                  oldn := *(TouchXpos+ImageTouched*2) ;
016013  000948                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
016014  000949                  if (oldn != -1)
016015  000950                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
016016  000951                      img_Disable(hndl, oldn) ;
016017  000952                  endif
016018  000953              next
016019  000954          endif
016020  000955      next
016021  000956        
016022  000957      // display initial form
016023  000958      CurrentForm := -1 ;
016024  000959      ActivateForm(0) ; // need to change this according to first actual form
016025  000960        
016026  000961  // End P4.inc
016027  000962  // Start P5.inc
016028  000963      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
016029  000964      oldn := -1 ;
016030  000965      repeat
016031  000966        
016032  000967          // check comms for command, how to NAK invalid command
016033  000968          if (com_Count() != 0)
016034  000969              i := serin() ;
016035  000970              InputCS ^= i ;               // update checksum
016036  000971              if (   (cmdi > 2)
016037  000972                  && (cmd[0] == WRITE_STRU) )
016038  000973                  j := (cmdi-1) >> 1 + 2 ;
016039  000974                  if (j == CMDLenMAX)    // max length exceeded
016040  000975                      nak0() ;
016041  000976                      cmdi := -1 ;
016042  000977                  else if (cmdi & 1)
016043  000978                      cmd[j] := i ;
016044  000979                      if (cmd[2] == 0)    // if string complete
016045  000980                          if (InputCS)
016046  000981                              nak0() ;
016047  000982                          else
016048  000983                              if (cmd[0] == WRITE_STRU)
016049  000984                              cmd[j] := 0 ;                     // terminate it
016050  000985                              PrintStrings(cmd[1], &cmd[3], 1) ;
016051  000986                              serout(ACK) ;
016052  000987                              else
016053  000988                              endif
016054  000989                          endif
016055  000990                          cmdi := -1 ;
016056  000991                      endif
016057  000992                  else
016058  000993                      cmd[j] := cmd[j] << 8 + i ;
016059  000994                      cmd[2]-- ;          // dec length
016060  000995                  endif
016061  000996                  cmdi++ ;
016062  000997              else // not unicode string
016063  000998                  cmd[cmdi++] := i ;
016064  000999                   if (cmd[0] == WRITE_STR)                  // Ansi String
016065  001000                      if (cmdi == CMDLenMAX)      // max length exceeded
016066  001001                          nak0() ;
016067  001002                          cmdi := 0 ;
016068  001003                      else if (cmdi > 2)
016069  001004                          if (cmd[2] == -1)
016070  001005                              if (InputCS)
016071  001006                                  nak0() ;
016072  001007                              else
016073  001008                                  if (cmd[0] == WRITE_STR)
016074  001009                                  cmd[cmdi-1] := 0 ;                     // terminate it
016075  001010                                  PrintStrings(cmd[1], &cmd[3], 1) ;
016076  001011                                  serout(ACK) ;
016077  001012                                  else
016078  001013                                  endif
016079  001014                              endif
016080  001015                              cmdi := 0 ;
016081  001016                          else
016082  001017                              cmd[2]-- ;          // dec length
016083  001018                          endif
016084  001019                      endif
016085  001020                  else if (   (cmd[0] == READ_OBJ)
016086  001021                           && (cmdi == 4)         )
016087  001022                      if (InputCS)
016088  001023                          nak0() ;
016089  001024                      else
016090  001025                          ReadObject(cmd[1], cmd[2]) ;
016091  001026                      endif
016092  001027                      cmdi := 0 ;
016093  001028                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
016094  001029                           && (cmdi == 6)          )
016095  001030                      if (InputCS)
016096  001031                          nak0() ;
016097  001032                      else
016098  001033                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
016099  001034                          serout(ACK) ;
016100  001035                      endif
016101  001036                      cmdi := 0 ;
016102  001037                  else if (   (cmd[0] == WRITE_CONTRAST)
016103  001038                           && (cmdi == 3)         )
016104  001039                      if (InputCS)
016105  001040                          nak0() ;
016106  001041                      else
016107  001042                          gfx_Contrast(cmd[1]) ;
016108  001043                          serout(ACK) ;
016109  001044                      endif
016110  001045                      cmdi := 0 ;
016111  001046                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
016112  001047                      nak0() ;
016113  001048                      cmdi := 0 ;
016114  001049                  endif
016115  001050              endif   // not unicode string
016116  001051          endif   // a character is available
016117  001052        
016118  001053        
016119  001054      // touch code processing
016120  001055        
016121  001056          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
016122  001057          ImageTouched := img_Touched(hndl,-1) ;
016123  001058          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
016124  001059              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
016125  001060                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
016126  001061              endif
016127  001062              if (TouchStatus != TOUCH_RELEASED)        // if not released
016128  001063                  if (oldn != -1)
016129  001064                      ImageTouched := oldn ;
016130  001065                  else
016131  001066                      if (oldn != ImageTouched)
016132  001067                  oldn := ImageTouched ;
016133  001068                          TouchStatus := TOUCH_PRESSED ;
016134  001069                      endif
016135  001070                  endif
016136  001071                  TouchXpos  := touch_Get(TOUCH_GETX);
016137  001072                  TouchYpos  := touch_Get(TOUCH_GETY);
016138  001073                  TouchState := Ofs_IPD_DOWN ;
016139  001074              else
016140  001075                  ImageTouched := oldn ;                     // simulate release of what we touched
016141  001076                  oldn := -1 ;                    // prevent double release
016142  001077                  TouchState := Ofs_IPD_RELEASE ;
016143  001078              endif
016144  001079              if (ImageTouched != -1)
016145  001080                          CurInputData := InputControls[ImageTouched] + InputData;
016146  001081                          InputType := *(CurInputData) ;
016147  001082                          i := InputType ;
016148  001083                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
016149  001084                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
016150  001085              endif
016151  001086          endif
016152  001087   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
016153  001088        
016154  001089          sys_EventsResume() ;
016155  001090      forever
016156  001091        
016157  001092  cDipswitch:
016158  001093        
016159  001094  cKnob:
016160  001095        
016161  001096  cRockerswitch:
016162  001097        
016163  001098  cRotaryswitch:
016164  001099        
016165  001100  cSlider:
016166  001101  cTrackbar:
016167  001102        
016168  001103  c4DButton:
016169  001104  cUserButton:
016170  001105      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
016171  001106      goto gbutton ;
016172  001107  cWinbutton:
016173  001108      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
016174  001109  gbutton:
016175  001110      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
016176  001111      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
016177  001112          if (TouchStatus == TOUCH_RELEASED)
016178  001113              i &= 0xfffe ;
016179  001114              TouchState == Ofs_IPD_DOWN ;
016180  001115          else
016181  001116              i |= 1 ;
016182  001117              TouchState == Ofs_IPD_RELEASE ;
016183  001118          endif
016184  001119      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
016185  001120          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
016186  001121              if ((i & 3) == 3)
016187  001122                  i &= 0xfffc ;
016188  001123              else
016189  001124                  i++ ;
016190  001125              endif
016191  001126          else
016192  001127              i |= 1 ;                                      // make down regardless of current state
016193  001128          endif
016194  001129      else                        // group action, up all other buttons on touch press, reports 0 for button down
016195  001130          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
016196  001131              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
016197  001132          endif
016198  001133          i := (i & 0xfffc) | 2 ;
016199  001134      endif
016200  001135        
016201  001136      UpdateObjects(i) ;
016202  001137  endsub ;
016203  001138        
016204  001139  cAniButton:
016205  001140        
016206  001141  cColorPicker:
016207  001142        
016208  001143  endfunc
016209  001144  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 782 file:RepRap_Touchv1.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 718 file:RepRap_Touchv1.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       13165  0x0000336d (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 129)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (usage 3)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  382  0x0000017e (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 108)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                302  0x0000012e (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         298  0x0000012a (mem) word (global)  (usage 27)
CurrentForm                          288  0x00000120 (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (usage 3)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (usage 18)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       12533  0x000030f5 (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 42)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (usage 36)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                        9801  0x00002649FormBGcolors                        9801  0x00002649 (mem) word[43] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                          93  0x0000005dFormEndIndex                          93  0x0000005d (mem) word[43] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[43] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[54] (global)  (usage 234)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             218  0x000000da (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm0                                 0  0x00000000 (const ??? 0)  (usage 3)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                              114  0x00000072 (const ??? 0)  (usage 3)
iForm11                              101  0x00000065 (const ??? 0)  (usage 3)
iForm12                               49  0x00000031 (const ??? 0)  (usage 3)
iForm14                               56  0x00000038 (const ??? 0)  (usage 3)
iForm16                              180  0x000000b4 (const ??? 0)  (usage 3)
iForm17                              184  0x000000b8 (const ??? 0)  (usage 3)
iForm18                              187  0x000000bb (const ??? 0)  (usage 3)
iForm19                               69  0x00000045 (const ??? 0)  (usage 3)
iForm2                                 4  0x00000004 (const ??? 0)  (usage 3)
iForm20                               73  0x00000049 (const ??? 0)  (usage 3)
iForm21                               79  0x0000004f (const ??? 0)  (usage 3)
iForm23                               88  0x00000058 (const ??? 0)  (usage 3)
iForm24                               94  0x0000005e (const ??? 0)  (usage 3)
iForm25                              190  0x000000be (const ??? 0)  (usage 3)
iForm26                               97  0x00000061 (const ??? 0)  (usage 3)
iForm27                              102  0x00000066 (const ??? 0)  (usage 3)
iForm28                              124  0x0000007c (const ??? 0)  (usage 3)
iForm29                              129  0x00000081 (const ??? 0)  (usage 3)
iForm30                              138  0x0000008a (const ??? 0)  (usage 3)
iForm31                              142  0x0000008e (const ??? 0)  (usage 3)
iForm32                              146  0x00000092 (const ??? 0)  (usage 3)
iForm33                              150  0x00000096 (const ??? 0)  (usage 3)
iForm34                              162  0x000000a2 (const ??? 0)  (usage 3)
iForm35                              169  0x000000a9 (const ??? 0)  (usage 3)
iForm38                              194  0x000000c2 (const ??? 0)  (usage 3)
iForm4                                10  0x0000000a (const ??? 0)  (usage 3)
iForm40                              205  0x000000cd (const ??? 0)  (usage 3)
iForm41                              230  0x000000e6 (const ??? 0)  (usage 3)
iForm5                                16  0x00000010 (const ??? 0)  (usage 3)
iForm6                                19  0x00000013 (const ??? 0)  (usage 3)
iForm7                               176  0x000000b0 (const ??? 0)  (usage 3)
iForm9                                45  0x0000002d (const ??? 0)  (usage 3)
iiLeddigits0                          34  0x00000022 (const ??? 0)  (not used)
iiLeddigits1                          36  0x00000024 (const ??? 0)  (not used)
iiLeddigits2                          38  0x00000026 (const ??? 0)  (not used)
iImage0                              181  0x000000b5 (const ??? 0)  (usage 3)
iLeddigits0                           33  0x00000021 (const ??? 0)  (usage 3)
iLeddigits1                           35  0x00000023 (const ??? 0)  (usage 3)
iLeddigits2                           37  0x00000025 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        179  0x000000b3InputControls                        179  0x000000b3 (mem) word[232] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
InputCS                              542  0x0000021e (mem) word (global)  (usage 21)
InputData                            643  0x00000283InputData                            643  0x00000283 (mem) word[3586] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 30)
InputType                            294  0x00000126 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                          95  0x0000005f (const ??? 0)  (usage 3)
iStatictext1                          39  0x00000027 (const ??? 0)  (usage 3)
iStatictext10                         60  0x0000003c (const ??? 0)  (usage 3)
iStatictext11                         77  0x0000004d (const ??? 0)  (usage 3)
iStatictext12                         78  0x0000004e (const ??? 0)  (usage 3)
iStatictext13                         92  0x0000005c (const ??? 0)  (usage 3)
iStatictext14                         93  0x0000005d (const ??? 0)  (usage 3)
iStatictext15                        103  0x00000067 (const ??? 0)  (usage 3)
iStatictext16                         23  0x00000017 (const ??? 0)  (usage 3)
iStatictext17                         24  0x00000018 (const ??? 0)  (usage 3)
iStatictext18                        173  0x000000ad (const ??? 0)  (usage 3)
iStatictext19                         62  0x0000003e (const ??? 0)  (usage 3)
iStatictext2                          40  0x00000028 (const ??? 0)  (usage 3)
iStatictext3                         151  0x00000097 (const ??? 0)  (usage 3)
iStatictext4                          41  0x00000029 (const ??? 0)  (usage 3)
iStatictext5                         163  0x000000a3 (const ??? 0)  (usage 3)
iStatictext6                         167  0x000000a7 (const ??? 0)  (usage 3)
iStatictext7                         174  0x000000ae (const ??? 0)  (usage 3)
iStatictext8                          81  0x00000051 (const ??? 0)  (usage 3)
iStatictext9                          61  0x0000003d (const ??? 0)  (usage 3)
iStrings0                           7815  0x00001e87iStrings0                           7815  0x00001e87 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings1                           7841  0x00001ea1iStrings1                           7841  0x00001ea1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings10                          8049  0x00001f71iStrings10                          8049  0x00001f71 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings11                          8075  0x00001f8biStrings11                          8075  0x00001f8b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings12                          8101  0x00001fa5iStrings12                          8101  0x00001fa5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings13                          8127  0x00001fbfiStrings13                          8127  0x00001fbf (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings14                          8153  0x00001fd9iStrings14                          8153  0x00001fd9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings15                          8179  0x00001ff3iStrings15                          8179  0x00001ff3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings16                          8205  0x0000200diStrings16                          8205  0x0000200d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings17                          8231  0x00002027iStrings17                          8231  0x00002027 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings18                          8257  0x00002041iStrings18                          8257  0x00002041 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings19                          8283  0x0000205biStrings19                          8283  0x0000205b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings2                           7867  0x00001ebbiStrings2                           7867  0x00001ebb (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings21                          8309  0x00002075iStrings21                          8309  0x00002075 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings22                          8335  0x0000208fiStrings22                          8335  0x0000208f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings24                          8361  0x000020a9iStrings24                          8361  0x000020a9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings25                          8387  0x000020c3iStrings25                          8387  0x000020c3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings26                          8413  0x000020ddiStrings26                          8413  0x000020dd (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings27                          8439  0x000020f7iStrings27                          8439  0x000020f7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings28                          8465  0x00002111iStrings28                          8465  0x00002111 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings29                          8491  0x0000212biStrings29                          8491  0x0000212b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings3                           7893  0x00001ed5iStrings3                           7893  0x00001ed5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings30                          8517  0x00002145iStrings30                          8517  0x00002145 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings31                          8543  0x0000215fiStrings31                          8543  0x0000215f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings32                          8569  0x00002179iStrings32                          8569  0x00002179 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings33                          8595  0x00002193iStrings33                          8595  0x00002193 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings34                          8621  0x000021adiStrings34                          8621  0x000021ad (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings35                          8647  0x000021c7iStrings35                          8647  0x000021c7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings36                          8673  0x000021e1iStrings36                          8673  0x000021e1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings37                          8699  0x000021fbiStrings37                          8699  0x000021fb (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings38                          8725  0x00002215iStrings38                          8725  0x00002215 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings39                          8751  0x0000222fiStrings39                          8751  0x0000222f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings4                           7919  0x00001eefiStrings4                           7919  0x00001eef (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings40                          8777  0x00002249iStrings40                          8777  0x00002249 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings41                          8803  0x00002263iStrings41                          8803  0x00002263 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings42                          8829  0x0000227diStrings42                          8829  0x0000227d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings43                          8855  0x00002297iStrings43                          8855  0x00002297 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings44                          8881  0x000022b1iStrings44                          8881  0x000022b1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings45                          8907  0x000022cbiStrings45                          8907  0x000022cb (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings46                          8933  0x000022e5iStrings46                          8933  0x000022e5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings47                          8959  0x000022ffiStrings47                          8959  0x000022ff (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings48                          8985  0x00002319iStrings48                          8985  0x00002319 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings49                          9011  0x00002333iStrings49                          9011  0x00002333 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings50                          9037  0x0000234diStrings50                          9037  0x0000234d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings51                          9063  0x00002367iStrings51                          9063  0x00002367 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings52                          9089  0x00002381iStrings52                          9089  0x00002381 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings53                          9115  0x0000239biStrings53                          9115  0x0000239b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings6                           7945  0x00001f09iStrings6                           7945  0x00001f09 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings7                           7971  0x00001f23iStrings7                           7971  0x00001f23 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings8                           7997  0x00001f3diStrings8                           7997  0x00001f3d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings9                           8023  0x00001f57iStrings9                           8023  0x00001f57 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                         15  0x0000000f (const ??? 0)  (usage 3)
iUserbutton100                       112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton101                       113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton102                       152  0x00000098 (const ??? 0)  (usage 3)
iUserbutton103                       153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton104                       154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton105                       155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton106                       156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton107                       157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton108                       158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton109                       159  0x0000009f (const ??? 0)  (usage 3)
iUserbutton11                        125  0x0000007d (const ??? 0)  (usage 3)
iUserbutton110                       160  0x000000a0 (const ??? 0)  (usage 3)
iUserbutton111                       161  0x000000a1 (const ??? 0)  (usage 3)
iUserbutton112                       164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton113                       165  0x000000a5 (const ??? 0)  (usage 3)
iUserbutton114                       166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton115                       170  0x000000aa (const ??? 0)  (usage 3)
iUserbutton116                       171  0x000000ab (const ??? 0)  (usage 3)
iUserbutton117                       172  0x000000ac (const ??? 0)  (usage 3)
iUserbutton118                        91  0x0000005b (const ??? 0)  (usage 3)
iUserbutton119                       207  0x000000cf (const ??? 0)  (usage 3)
iUserbutton12                         17  0x00000011 (const ??? 0)  (usage 3)
iUserbutton120                       198  0x000000c6 (const ??? 0)  (usage 3)
iUserbutton121                       199  0x000000c7 (const ??? 0)  (usage 3)
iUserbutton122                       200  0x000000c8 (const ??? 0)  (usage 3)
iUserbutton123                       201  0x000000c9 (const ??? 0)  (usage 3)
iUserbutton124                       202  0x000000ca (const ??? 0)  (usage 3)
iUserbutton125                       203  0x000000cb (const ??? 0)  (usage 3)
iUserbutton126                       204  0x000000cc (const ??? 0)  (usage 3)
iUserbutton127                       208  0x000000d0 (const ??? 0)  (usage 3)
iUserbutton128                       209  0x000000d1 (const ??? 0)  (usage 3)
iUserbutton129                       210  0x000000d2 (const ??? 0)  (usage 3)
iUserbutton13                         18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton130                       211  0x000000d3 (const ??? 0)  (usage 3)
iUserbutton131                       212  0x000000d4 (const ??? 0)  (usage 3)
iUserbutton132                       213  0x000000d5 (const ??? 0)  (usage 3)
iUserbutton133                       214  0x000000d6 (const ??? 0)  (usage 3)
iUserbutton134                       206  0x000000ce (const ??? 0)  (usage 3)
iUserbutton135                       215  0x000000d7 (const ??? 0)  (usage 3)
iUserbutton136                       216  0x000000d8 (const ??? 0)  (usage 3)
iUserbutton137                       218  0x000000da (const ??? 0)  (usage 3)
iUserbutton138                       219  0x000000db (const ??? 0)  (usage 3)
iUserbutton139                       220  0x000000dc (const ??? 0)  (usage 3)
iUserbutton14                          7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton140                       221  0x000000dd (const ??? 0)  (usage 3)
iUserbutton141                       222  0x000000de (const ??? 0)  (usage 3)
iUserbutton142                       223  0x000000df (const ??? 0)  (usage 3)
iUserbutton143                       224  0x000000e0 (const ??? 0)  (usage 3)
iUserbutton144                       225  0x000000e1 (const ??? 0)  (usage 3)
iUserbutton145                       226  0x000000e2 (const ??? 0)  (usage 3)
iUserbutton146                       227  0x000000e3 (const ??? 0)  (usage 3)
iUserbutton147                       228  0x000000e4 (const ??? 0)  (usage 3)
iUserbutton149                       217  0x000000d9 (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton150                       229  0x000000e5 (const ??? 0)  (usage 3)
iUserbutton16                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton17                         57  0x00000039 (const ??? 0)  (usage 3)
iUserbutton18                         46  0x0000002e (const ??? 0)  (usage 3)
iUserbutton19                         47  0x0000002f (const ??? 0)  (usage 3)
iUserbutton2                          21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton20                        100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton21                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton22                        105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton23                        115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton24                        116  0x00000074 (const ??? 0)  (usage 3)
iUserbutton25                        117  0x00000075 (const ??? 0)  (usage 3)
iUserbutton26                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton27                         51  0x00000033 (const ??? 0)  (usage 3)
iUserbutton28                         52  0x00000034 (const ??? 0)  (usage 3)
iUserbutton29                         53  0x00000035 (const ??? 0)  (usage 3)
iUserbutton3                          32  0x00000020 (const ??? 0)  (usage 3)
iUserbutton30                         54  0x00000036 (const ??? 0)  (usage 3)
iUserbutton31                         55  0x00000037 (const ??? 0)  (usage 3)
iUserbutton32                         58  0x0000003a (const ??? 0)  (usage 3)
iUserbutton33                         59  0x0000003b (const ??? 0)  (usage 3)
iUserbutton34                        178  0x000000b2 (const ??? 0)  (usage 3)
iUserbutton35                         63  0x0000003f (const ??? 0)  (usage 3)
iUserbutton36                         64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton37                         65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton38                         68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton39                         66  0x00000042 (const ??? 0)  (usage 3)
iUserbutton4                           5  0x00000005 (const ??? 0)  (usage 3)
iUserbutton40                         67  0x00000043 (const ??? 0)  (usage 3)
iUserbutton41                        182  0x000000b6 (const ??? 0)  (usage 3)
iUserbutton42                        183  0x000000b7 (const ??? 0)  (usage 3)
iUserbutton43                        185  0x000000b9 (const ??? 0)  (usage 3)
iUserbutton44                        186  0x000000ba (const ??? 0)  (usage 3)
iUserbutton45                        188  0x000000bc (const ??? 0)  (usage 3)
iUserbutton46                        189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton47                        191  0x000000bf (const ??? 0)  (usage 3)
iUserbutton48                        192  0x000000c0 (const ??? 0)  (usage 3)
iUserbutton49                        179  0x000000b3 (const ??? 0)  (usage 3)
iUserbutton5                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton50                         22  0x00000016 (const ??? 0)  (usage 3)
iUserbutton51                        106  0x0000006a (const ??? 0)  (usage 3)
iUserbutton52                         71  0x00000047 (const ??? 0)  (usage 3)
iUserbutton53                         80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton54                         72  0x00000048 (const ??? 0)  (usage 3)
iUserbutton55                         82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton56                         83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton57                         84  0x00000054 (const ??? 0)  (usage 3)
iUserbutton58                         85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton59                         86  0x00000056 (const ??? 0)  (usage 3)
iUserbutton6                          11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton60                         87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        193  0x000000c1 (const ??? 0)  (usage 3)
iUserbutton63                         42  0x0000002a (const ??? 0)  (usage 3)
iUserbutton64                        195  0x000000c3 (const ??? 0)  (usage 3)
iUserbutton65                        196  0x000000c4 (const ??? 0)  (usage 3)
iUserbutton66                         89  0x00000059 (const ??? 0)  (usage 3)
iUserbutton67                        231  0x000000e7 (const ??? 0)  (usage 3)
iUserbutton68                         90  0x0000005a (const ??? 0)  (usage 3)
iUserbutton69                         96  0x00000060 (const ??? 0)  (usage 3)
iUserbutton7                          12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton70                        197  0x000000c5 (const ??? 0)  (usage 3)
iUserbutton71                         98  0x00000062 (const ??? 0)  (usage 3)
iUserbutton72                        107  0x0000006b (const ??? 0)  (usage 3)
iUserbutton73                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton74                         99  0x00000063 (const ??? 0)  (usage 3)
iUserbutton75                         74  0x0000004a (const ??? 0)  (usage 3)
iUserbutton76                         75  0x0000004b (const ??? 0)  (usage 3)
iUserbutton77                         76  0x0000004c (const ??? 0)  (usage 3)
iUserbutton78                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton79                        120  0x00000078 (const ??? 0)  (usage 3)
iUserbutton8                          13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton80                        121  0x00000079 (const ??? 0)  (usage 3)
iUserbutton81                        122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton82                        123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton83                        126  0x0000007e (const ??? 0)  (usage 3)
iUserbutton84                        130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton85                        131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton86                        132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton87                        133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton88                        134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton89                        135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton9                          14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton90                        136  0x00000088 (const ??? 0)  (usage 3)
iUserbutton91                        137  0x00000089 (const ??? 0)  (usage 3)
iUserbutton92                        128  0x00000080 (const ??? 0)  (usage 3)
iUserbutton93                        140  0x0000008c (const ??? 0)  (usage 3)
iUserbutton94                        143  0x0000008f (const ??? 0)  (usage 3)
iUserbutton95                        147  0x00000093 (const ??? 0)  (usage 3)
iUserbutton96                        108  0x0000006c (const ??? 0)  (usage 3)
iUserbutton97                        109  0x0000006d (const ??? 0)  (usage 3)
iUserbutton98                        110  0x0000006e (const ??? 0)  (usage 3)
iUserbutton99                        111  0x0000006f (const ??? 0)  (usage 3)
iUserimages0                         127  0x0000007f (const ??? 0)  (usage 3)
iUserimages1                          70  0x00000046 (const ??? 0)  (usage 3)
iUserimages11                        232  0x000000e8 (const ??? 0)  (usage 3)
iUserimages13                        168  0x000000a8 (const ??? 0)  (usage 3)
iUserimages2                         175  0x000000af (const ??? 0)  (usage 3)
iUserimages3                         139  0x0000008b (const ??? 0)  (usage 3)
iUserimages4                         145  0x00000091 (const ??? 0)  (usage 3)
iUserimages5                         149  0x00000095 (const ??? 0)  (usage 3)
iUserimages6                         177  0x000000b1 (const ??? 0)  (usage 3)
iUserimages7                         141  0x0000008d (const ??? 0)  (usage 3)
iUserimages8                         144  0x00000090 (const ??? 0)  (usage 3)
iUserimages9                         148  0x00000094 (const ??? 0)  (usage 3)
iVideo0                                9  0x00000009 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                           25  0x00000019 (const ??? 0)  (usage 3)
iWinbutton1                           26  0x0000001a (const ??? 0)  (usage 3)
iWinbutton2                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton3                           28  0x0000001c (const ??? 0)  (usage 3)
iWinbutton4                           29  0x0000001d (const ??? 0)  (usage 3)
iWinbutton5                           43  0x0000002b (const ??? 0)  (usage 3)
iWinbutton6                           44  0x0000002c (const ??? 0)  (usage 3)
iWinbutton7                           30  0x0000001e (const ??? 0)  (usage 3)
iWinbutton8                           31  0x0000001f (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 9887  0x0000269fkKeyboardKeystrokes                 9887  0x0000269f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   13511  0x000034c7 (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                               10479  0x000028ef (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               14633  0x00003929 (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              326  0x00000146 (const dword)  (usage 3)
nObjects                             233  0x000000e9 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              54  0x00000036 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                          9485  0x0000250do4Dbuttons                          9485  0x0000250d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAngularmeters                      9173  0x000023d5oAngularmeters                      9173  0x000023d5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAniButtons                         9487  0x0000250foAniButtons                         9487  0x0000250f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       9489  0x00002511oColorPickers                       9489  0x00002511 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCoolgauges                         9175  0x000023d7oCoolgauges                         9175  0x000023d7 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCustomdigitss                      9177  0x000023d9oCustomdigitss                      9177  0x000023d9 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oDipSwitchs                         9141  0x000023b5oDipSwitchs                         9141  0x000023b5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              9179  0x000023dboForms                              9179  0x000023db (mem) word[44] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 15)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                             9267  0x00002433oGauges                             9267  0x00002433 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGSliders                           9149  0x000023bdoGSliders                           9149  0x000023bd (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oImages                             9269  0x00002435oImages                             9269  0x00002435 (mem) word[2] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKeyboards                          9273  0x00002439oKeyboards                          9273  0x00002439 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKnobs                              9143  0x000023b7oKnobs                              9143  0x000023b7 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLedDigitsn                         9891  0x000026a3oLedDigitsn                         9891  0x000026a3 (mem) word[15] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
oLeddigitss                         9277  0x0000243doLeddigitss                         9277  0x0000243d (mem) word[4] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
oLeds                               9275  0x0000243boLeds                               9275  0x0000243b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             9285  0x00002445oMeters                             9285  0x00002445 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             220  0x000000dc (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                          9483  0x0000250boPinInputs                          9483  0x0000250b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oPinOutputs                         9799  0x00002647oPinOutputs                         9799  0x00002647 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      9145  0x000023b9oRockerSwitchs                      9145  0x000023b9 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oRotarySwitchs                      9147  0x000023bboRotarySwitchs                      9147  0x000023bb (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oScopes                             9449  0x000024e9oScopes                             9449  0x000024e9 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
oSoundss                            9797  0x00002645oSoundss                            9797  0x00002645 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oSpectrums                          9447  0x000024e7oSpectrums                          9447  0x000024e7 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStaticTexts                        9405  0x000024bdoStaticTexts                        9405  0x000024bd (mem) word[21] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStringss                           9287  0x00002447oStringss                           9287  0x00002447 (mem) word[55] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 84)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 423)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              9451  0x000024eboTanks                              9451  0x000024eb (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oThermometers                       9397  0x000024b5oThermometers                       9397  0x000024b5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTimers                             9795  0x00002643oTimers                             9795  0x00002643 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTrackbars                          9151  0x000023bfoTrackbars                          9151  0x000023bf (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserButtons                        9491  0x00002513oUserButtons                        9491  0x00002513 (mem) word[152] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
oUserImagess                        9453  0x000024edoUserImagess                        9453  0x000024ed (mem) word[15] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserleds                           9399  0x000024b7oUserleds                           9399  0x000024b7 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             544  0x00000220 (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                             9401  0x000024b9oVideos                             9401  0x000024b9 (mem) word[2] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                         9153  0x000023c1oWinButtons                         9153  0x000023c1 (mem) word[10] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          300  0x0000012c (mem) word (global)  (usage 18)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       14668  0x0000394c (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         14380  0x0000382c (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                   9889  0x000026a1rKeyboardRoutines                   9889  0x000026a1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         14566  0x000038e6 (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           14649  0x00003939 (User func) args[1] r=0  (usage 15)
seroutOcs                          14616  0x00003918 (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           7  0x00000007 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      2560  0x00000a00 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                         14  0x0000000e (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         32  0x00000020 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         14  0x0000000e (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                          3  0x00000003 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                    23552  0x00005c00 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                         23  0x00000017 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                         24  0x00000018 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                     6656  0x00001a00 (const dword)  (usage 3)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings17Count                         1  0x00000001 (const dword)  (not used)
Strings17Size                         56  0x00000038 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                    18944  0x00004a00 (const dword)  (usage 3)
Strings18Count                         1  0x00000001 (const dword)  (not used)
Strings18Size                         39  0x00000027 (const dword)  (usage 3)
Strings18StartH                        0  0x00000000 (const dword)  (usage 3)
Strings18StartL                    19456  0x00004c00 (const dword)  (usage 3)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                         43  0x0000002b (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                    19968  0x00004e00 (const dword)  (usage 3)
Strings1Count                          1  0x00000001 (const dword)  (not used)
Strings1Size                          25  0x00000019 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                         0  0x00000000 (const dword)  (usage 3)
Strings20Size                          0  0x00000000 (const dword)  (not used)
Strings20StartH                        0  0x00000000 (const dword)  (not used)
Strings20StartL                        0  0x00000000 (const dword)  (not used)
Strings21Count                         1  0x00000001 (const dword)  (not used)
Strings21Size                         35  0x00000023 (const dword)  (usage 3)
Strings21StartH                        0  0x00000000 (const dword)  (usage 3)
Strings21StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings22Count                         1  0x00000001 (const dword)  (not used)
Strings22Size                         19  0x00000013 (const dword)  (usage 3)
Strings22StartH                        0  0x00000000 (const dword)  (usage 3)
Strings22StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings23Size                          0  0x00000000 (const dword)  (not used)
Strings23StartH                        0  0x00000000 (const dword)  (not used)
Strings23StartL                        0  0x00000000 (const dword)  (not used)
Strings24Count                         1  0x00000001 (const dword)  (not used)
Strings24Size                         26  0x0000001a (const dword)  (usage 3)
Strings24StartH                        0  0x00000000 (const dword)  (usage 3)
Strings24StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings25Count                         1  0x00000001 (const dword)  (not used)
Strings25Size                         10  0x0000000a (const dword)  (usage 3)
Strings25StartH                        0  0x00000000 (const dword)  (usage 3)
Strings25StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings26Count                         1  0x00000001 (const dword)  (not used)
Strings26Size                         10  0x0000000a (const dword)  (usage 3)
Strings26StartH                        0  0x00000000 (const dword)  (usage 3)
Strings26StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings27Count                         1  0x00000001 (const dword)  (not used)
Strings27Size                         11  0x0000000b (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings28Count                         1  0x00000001 (const dword)  (not used)
Strings28Size                         40  0x00000028 (const dword)  (usage 3)
Strings28StartH                        0  0x00000000 (const dword)  (usage 3)
Strings28StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                         64  0x00000040 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    20480  0x00005000 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      2048  0x00000800 (const dword)  (usage 3)
Strings30Count                         1  0x00000001 (const dword)  (not used)
Strings30Size                         42  0x0000002a (const dword)  (usage 3)
Strings30StartH                        0  0x00000000 (const dword)  (usage 3)
Strings30StartL                    20992  0x00005200 (const dword)  (usage 3)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          7  0x00000007 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    21504  0x00005400 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                         19  0x00000013 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    22016  0x00005600 (const dword)  (usage 3)
Strings33Count                         1  0x00000001 (const dword)  (not used)
Strings33Size                         83  0x00000053 (const dword)  (usage 3)
Strings33StartH                        0  0x00000000 (const dword)  (usage 3)
Strings33StartL                    11776  0x00002e00 (const dword)  (usage 3)
Strings34Count                         0  0x00000000 (const dword)  (not used)
Strings34Size                          1  0x00000001 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     3584  0x00000e00 (const dword)  (usage 3)
Strings35Count                         1  0x00000001 (const dword)  (not used)
Strings35Size                         36  0x00000024 (const dword)  (usage 3)
Strings35StartH                        0  0x00000000 (const dword)  (usage 3)
Strings35StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings36Count                         0  0x00000000 (const dword)  (not used)
Strings36Size                          1  0x00000001 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings37Count                         0  0x00000000 (const dword)  (not used)
Strings37Size                          1  0x00000001 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings38Count                         0  0x00000000 (const dword)  (not used)
Strings38Size                          1  0x00000001 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                    14336  0x00003800 (const dword)  (usage 3)
Strings3Count                          1  0x00000001 (const dword)  (not used)
Strings3Size                          18  0x00000012 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                       512  0x00000200 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                          7  0x00000007 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                    14848  0x00003a00 (const dword)  (usage 3)
Strings41Count                         1  0x00000001 (const dword)  (not used)
Strings41Size                          7  0x00000007 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                    15360  0x00003c00 (const dword)  (usage 3)
Strings42Count                         1  0x00000001 (const dword)  (not used)
Strings42Size                          7  0x00000007 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    17408  0x00004400 (const dword)  (usage 3)
Strings46Count                         0  0x00000000 (const dword)  (not used)
Strings46Size                          1  0x00000001 (const dword)  (usage 3)
Strings46StartH                        0  0x00000000 (const dword)  (usage 3)
Strings46StartL                    24064  0x00005e00 (const dword)  (usage 3)
Strings47Count                         1  0x00000001 (const dword)  (not used)
Strings47Size                          3  0x00000003 (const dword)  (usage 3)
Strings47StartH                        0  0x00000000 (const dword)  (usage 3)
Strings47StartL                    24576  0x00006000 (const dword)  (usage 3)
Strings48Count                         0  0x00000000 (const dword)  (not used)
Strings48Size                          1  0x00000001 (const dword)  (usage 3)
Strings48StartH                        0  0x00000000 (const dword)  (usage 3)
Strings48StartL                    25088  0x00006200 (const dword)  (usage 3)
Strings49Count                         1  0x00000001 (const dword)  (not used)
Strings49Size                         17  0x00000011 (const dword)  (usage 3)
Strings49StartH                        0  0x00000000 (const dword)  (usage 3)
Strings49StartL                    22528  0x00005800 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings50Count                         0  0x00000000 (const dword)  (not used)
Strings50Size                          1  0x00000001 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    23040  0x00005a00 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    17920  0x00004600 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    18432  0x00004800 (const dword)  (usage 3)
Strings53Count                         1  0x00000001 (const dword)  (not used)
Strings53Size                        100  0x00000064 (const dword)  (usage 3)
Strings53StartH                        0  0x00000000 (const dword)  (usage 3)
Strings53StartL                    25600  0x00006400 (const dword)  (usage 3)
Strings5Size                           0  0x00000000 (const dword)  (not used)
Strings5StartH                         0  0x00000000 (const dword)  (not used)
Strings5StartL                         0  0x00000000 (const dword)  (not used)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          31  0x0000001f (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                     12800  0x00003200 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                     13312  0x00003400 (const dword)  (usage 3)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      3072  0x00000c00 (const dword)  (usage 3)
stringsCV                            110  0x0000006e (mem) word[54] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           296  0x00000128 (mem) word (global)  (usage 24)
TouchXpos                            290  0x00000122 (mem) word (global)  (usage 12)
TouchYpos                            292  0x00000124 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     13825  0x00003601 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 465)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 45)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      12534  0x000030f6 (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS    2803  0x00000af3 (const ??? 0)  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 150)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        14025  0x000036c9 (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
