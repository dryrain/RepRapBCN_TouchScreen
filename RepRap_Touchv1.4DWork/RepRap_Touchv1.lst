file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318        
003998  004319  //------------------------------------------------------------------------------
003999  004320  // FILEIO Error Code Constants
004000  004321  //------------------------------------------------------------------------------
004001  004322  #CONST
004002  004348  #END
004003  004349        
004004  004350  //------------------------------------------------------------------------------
004005  004351  // DISK struct offsets
004006  004352  //------------------------------------------------------------------------------
004007  004353  #CONST
004008  004370  #END
004009  004371        
004010  004372  //------------------------------------------------------------------------------
004011  004373  // FILE struct offsets
004012  004374  //------------------------------------------------------------------------------
004013  004375  #CONST
004014  004394  #END
004015  004395        
004016  004396        
004017  004397  //------------------------------------------------------------------//
004018  004398  //        Sound Class Services
004019  004399  //------------------------------------------------------------------//
004020  004400        
004021  004401  func snd_Volume("var"), 0;
004022  004402  // Syntax: snd_Volume("var");
004023  004403  // Usage : snd_Volume(30);
004024  004404  // Notes : set sound playback volume.  Var must
004025  004405  //       : be in the range from 8 (min volume)
004026  004406  //       : to 127 (max volume). If var is less
004027  004407  //       : than 8 volume is set to 8, and if
004028  004408  //       : var > 127 it is set to 127.
004029  004409        
004030  004410  func snd_Pitch("pitch"), 1;
004031  004411  // func snd_Pitch("freq"), 1;
004032  004412  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004033  004413  // Notes : sets the samples playback rate to a different frequency
004034  004414  //       : The minimum value is 4khz
004035  004415  //       : Setting the pitch to zero restores the original sample rate
004036  004416  //       : Return value is the samples original sample rate.
004037  004417        
004038  004418  func snd_BufSize("var"), 0;
004039  004419  // Syntax: snd_BufSize("var");
004040  004420  // Usage : snd_BufSize(2);
004041  004421  // Notes : specify the a memory chunk size for the wavefile buffer.
004042  004422  //       : default size 1024 bytes.
004043  004423  //       : 0 = 1024 bytes (default)
004044  004424  //       : 1 = 2048 bytes
004045  004425  //       : 2 = 4096 bytes
004046  004426  //       : 3 = 8192 bytes
004047  004427        
004048  004428  func snd_Stop(), 0;
004049  004429  // Syntax: snd_Stop();
004050  004430  // Usage : snd_Stop();
004051  004431  // Notes : stop any sound that is playing, releasing
004052  004432  //       : buffers and closes any open wav file.
004053  004433        
004054  004434  func snd_Pause(), 0;
004055  004435  // Syntax: snd_Pause();
004056  004436  // Usage : snd_Pause();
004057  004437  // Notes : pauses any sound that is playing, does nothing
004058  004438  //       : until sound is resumed with snd_Continue().
004059  004439  //       : The sample cam be terminated with snd_Stop.
004060  004440  //       : buffers and closes any open wav file.
004061  004441        
004062  004442  func snd_Continue(), 0;
004063  004443  // Syntax: snd_Continue();
004064  004444  // Usage : snd_Continue();
004065  004445  // Notes : resume any sound that is paused by snd_Pause.
004066  004446        
004067  004447  func snd_Playing(), 1;
004068  004448  // Syntax: snd_Playing();
004069  004449  // Usage : r := snd_Playing();
004070  004450  // Notes : returns 0 if sound has finished playing,
004071  004451  //       : else return number of 512 byte blocks to go.
004072  004452        
004073  004453  func snd_Freq("Freq", "Duration"), 1;
004074  004454  // Syntax: snd_Freq("Freq", "Duration");
004075  004455  // Usage : r := snd_Freq(1000, 2000);
004076  004456  // Notes : Returns 0 if note cannot be played because a wav file is playing
004077  004457  //       : else return True.
004078  004458  //       : Minimum Freq is 20
004079  004459  //       : This will produce a pure Square wave and is designed for driving
004080  004460  //       : Piezo transducers which require this sort of drive. It can also be
004081  004461  //       : used to drive the amp on displays with audio.
004082  004462        
004083  004463        
004084  004464  func __reserved60(), 0; // do not remove
004085  004465  func __reserved61(), 0; // do not remove
004086  004466  func __reserved62(), 0; // do not remove
004087  004467        
004088  004468  //=========================================================================================================
004089  004469  // String functions
004090  004470  //=========================================================================================================
004091  004471        
004092  004472  func str_Ptr("&var"), 1;
004093  004473  // Syntax: str_Ptr(&var);
004094  004474  // Usage : p := str_Ptr(&var);
004095  004475  // Notes : return a byte pointer to a word region
004096  004476        
004097  004477  func str_GetD("&ptr", "&var"), 1;
004098  004478  // Syntax: str_GetD(&ptr, &var);
004099  004479  // Usage : ok := str_GetD(&ptr, &var);
004100  004480  // Notes : convert number in a string to DWORD ( myvar[2] )
004101  004481  //       : returns true if function succeeds, advancing ptr
004102  004482        
004103  004483  func str_GetW("&ptr", "&var"), 1;
004104  004484  // Syntax: str_GetW(&ptr, &var);
004105  004485  // Usage : ok := str_GetW(&ptr, &var);
004106  004486  // Notes : convert number in a string to WORD ( myvar )
004107  004487  //       : returns true if function succeeds, advancing ptr
004108  004488        
004109  004489  func str_GetHexW("&ptr", "&var"), 1;
004110  004490  // Syntax: str_GetHexW(&ptr, &var);
004111  004491  // Usage : ok := str_GetHexW(&ptr, &var);
004112  004492  // Notes : convert HEX number in a string to WORD ( myvar )
004113  004493  //       : returns true if function succeeds, advancing ptr
004114  004494        
004115  004495  func str_GetC("&ptr", "&var"), 1;
004116  004496  // Syntax: str_GetC(&ptr, &var);
004117  004497  // Usage : ok := str_GetC(&ptr, &var);
004118  004498  // Notes : get a valid ascii char in a string to WORD ( myvar )
004119  004499  //       : returns true if function succeeds, advancing ptr
004120  004500        
004121  004501  func str_GetByte("ptr"), 1;
004122  004502  // Syntax: str_GetByte(ptr);
004123  004503  // Usage : myvar := str_GetByte(ptr);
004124  004504  // Notes : get a byte to myvar
004125  004505  //       : returns value
004126  004506        
004127  004507  func str_GetWord("ptr"), 1;
004128  004508  // Syntax: GetWord(ptr);
004129  004509  // Usage : GetWord(ptr);
004130  004510  // Notes : get a word to myvar
004131  004511  //       : returns value
004132  004512        
004133  004513  func str_PutByte("ptr","val"), 0;
004134  004514  // Syntax: str_PutByte(ptr);
004135  004515  // Usage : myvar := str_PutByte(ptr);
004136  004516  // Notes : put a byte at ptr
004137  004517  //       : returns value
004138  004518        
004139  004519  func str_PutWord("ptr","val"), 0;
004140  004520  // Syntax: str_PutWord("ptr","val");
004141  004521  // Usage : str_PutWord(p,100);
004142  004522  // Notes : put word 100 at current pointer location
004143  004523  //       : returns value
004144  004524        
004145  004525  func str_Match("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Match(&ptr, *str);
004147  004527  // Usage : r := str_Match(&p, "hello");
004148  004528  // Notes : Case sensitive match
004149  004529  //       : returns true if function succeded, andvancing pointer to position past
004150  004530  //       : the matched item. Note that any whitespace characters are skipped
004151  004531  //       : in the source string prior to the test.
004152  004532        
004153  004533  func str_MatchI("&ptr", "*str"), 1;
004154  004534  // Syntax: str_MatchI(&ptr, *str);
004155  004535  // Usage : r := str_MatchI(&p, "hello");
004156  004536  // Notes : Case insensitive match
004157  004537  //       : returns true if function succeded, andvancing pointer to position past
004158  004538  //       : the matched item. Note that any whitespace characters are skipped
004159  004539  //       : in the source string prior to the test.
004160  004540        
004161  004541  func str_Find("&ptr", "*str"), 1;
004162  004542  // Syntax: str_Find(&ptr, *str);
004163  004543  // Usage : n := str_Find(&p, "hello");
004164  004544  // Notes : given the address of a pointer to a source string as the
004165  004545  //       : first argument, and a pointer to a test string as the second
004166  004546  //       : argument, attempt to find the position of the matching string
004167  004547  //       : in the source string. The test is performed with case sensitivity.
004168  004548  //       : return 0 if not found, else returns the address of the first
004169  004549  //       : character of the match. NB:- The source pointer is not altered.
004170  004550        
004171  004551  func str_FindI("&ptr", "*str"), 1;
004172  004552  // Syntax: str_Find(&ptr, *str);
004173  004553  // Usage : n := str_Find(&p, "hello");
004174  004554  // Notes : given the address of a pointer to a source string as the
004175  004555  //       : first argument, and a pointer to a test string as the second
004176  004556  //       : argument, attempt to find the position of the matching string
004177  004557  //       : in the source string. The test is performed with no case
004178  004558  //       : sensitivity, eg upper and lower case chars are accepted.
004179  004559  //       : return 0 if not found, else returns the address of the first
004180  004560  //       : character of the match. NB:- The source pointer is not altered.
004181  004561        
004182  004562  func str_Length("ptr"), 1;
004183  004563  // Syntax: str_Length(ptr);
004184  004564  // Usage : len := str_Ptr(mystring);
004185  004565  // Notes : return the length of a byte aligned string excluding terminator
004186  004566        
004187  004567  func str_Printf("&ptr", "*format"), 1;
004188  004568  // Syntax: str_Printf("&ptr", "*format");
004189  004569  // Usage : r := str_Printf(&p, "hello");
004190  004570  // Notes : refer to documentation
004191  004571  //       :
004192  004572        
004193  004573  func str_Cat("dest","src"), 1;
004194  004574  // Syntax: str_Append("&dest","&src");
004195  004575  // Usage : str_Append(&buf,"Hello");
004196  004576  // Notes : Appends a copy of the source string to the destination string.
004197  004577  //       : The terminating null character in destination is overwritten by
004198  004578  //       : the first character of source, and a new null-character is appended
004199  004579  //       : at the end of the new string formed by the concatenation of both in destination.
004200  004580  //       : returns destination.
004201  004581        
004202  004582  func str_CatN("dest","src","count"), 1;
004203  004583  // Syntax: str_Append("&dest","&src","count");
004204  004584  // Usage : str_Append(&buf,"Monday",3);
004205  004585  // Notes : Appends a copy of the source string to the destination string.
004206  004586  //       : The number of characters copied is limited by "count".
004207  004587  //       : The terminating null character in destination is overwritten by
004208  004588  //       : the first character of source, and a new null-character is appended
004209  004589  //       : at the end of the new string formed by the concatenation of both in destination.
004210  004590  //       : returns destination.
004211  004591        
004212  004592        
004213  004593  func str_ByteMove("src", "dest", "count"), 1;
004214  004594  // Syntax   : str_ByteMove(src, dest, bytecount);
004215  004595  // Input    : STR *source points to byte aligned source.
004216  004596  //          : STR *dest   points to byte aligned destination.
004217  004597  //          : VAR count   number of bytes to transfer.
004218  004598  // Usage    : nextpos := str_ByteMove(s, d, 100);
004219  004599  // Notes    : copy bytes from "src" to "dest", stopping only
004220  004600  //          : when "count" is exhausted.
004221  004601  //          : No terminator is appended, it is purely a
004222  004602  //          : byte copy, and any zeroes encountered will
004223  004603  //          : also be copied.
004224  004604  // Returns  : returns a pointer to the end of the destination
004225  004605  //          : (which is "dest" + "count")
004226  004606        
004227  004607        
004228  004608  func str_Copy("dest", "src"), 1;
004229  004609  // Syntax   : str_Copy(dest, src);
004230  004610  // Input    : STR *dest   points to byte aligned destination.
004231  004611  //          : STR *source points to byte aligned source.
004232  004612  // Usage    : nextplace := str_Copy(d, s);
004233  004613  // Notes    : copy a string from "src" to "dest", stopping only
004234  004614  //          : when the end of source string "src" is encountered
004235  004615  //          : (0x00 terminator).
004236  004616  //          : The terminator is always appended, even if "src" is
004237  004617  //          : an empty string.
004238  004618  // Returns  : returns a pointer to the 0x00 string terminator at
004239  004619  //          : end of "dest" (which is "dest" + str_Length(src); )
004240  004620        
004241  004621        
004242  004622  func str_CopyN("dest", "src", "count"), 1;
004243  004623  // Syntax   : str_CopyN(dest, src, bytecount);
004244  004624  // Input    : STR *dest   points to byte aligned destination.
004245  004625  //          : STR *source points to byte aligned source.
004246  004626  //          : VAR count   max number of chars to copy.
004247  004627  // Usage    : nextplace := str_CopyN(d, s, 100);
004248  004628  // Notes    : copy a string from "src" to "dest", stopping only
004249  004629  //          : when "count" is exhausted, or end of source
004250  004630  //          : string "str" is encountered (0x00 string terminator).
004251  004631  //          : The terminator is always appended, even if
004252  004632  //          : "count" is zero, or "src" is a null string.
004253  004633  // Returns  : returns a pointer to the 0x00 string terminator
004254  004634  //          : (which is "dest" + whatever was copied)
004255  004635        
004256  004636        
004257  004637  func __reserved63(), 0; // do not remove
004258  004638  func __reserved64(), 0; // do not remove
004259  004639  func __reserved65(), 0; // do not remove
004260  004640  func __reserved66(), 0; // do not remove
004261  004641        
004262  004642  //=========================================================================================================
004263  004643  // FLASH memory functions
004264  004644  //=========================================================================================================
004265  004645  func flash_GetByte("bank", "ptr"), 1;
004266  004646  // Syntax   : flash_GetByte(bank, ptr);
004267  004647  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004268  004648  // Notes    : Reads a single byte from any flash location.
004269  004649  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004270  004650  //          : which is the header signature for a valid program.
004271  004651  // Returns  : the byte value from the location
004272  004652        
004273  004653        
004274  004654  func flash_GetWord("bank", "ptr"), 1;
004275  004655  // Syntax   : flash_GetWord(bank, ptr);
004276  004656  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004277  004657  // Notes    : Reads a single word from any flash location.
004278  004658  //          : The pointer is byte aligned.
004279  004659  //          : If the bank is read protected, only the first word can be read
004280  004660  //          : which is the header signature for a valid program (0xAA55).
004281  004661  // Returns  : the byte value from the location
004282  004662        
004283  004663        
004284  004664  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004285  004665  // Syntax   : flash_Copy(bank, ptr);
004286  004666  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004287  004667  // Notes    : Copies bytes from any flash locations to a user buffer.
004288  004668  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004289  004669  //          : If the bank is read protected, 0 bytes will be read
004290  004670  //          : which is the header signature for a valid program (0xAA55).
004291  004671  // Returns  : the count of bytes transferred.
004292  004672        
004293  004673        
004294  004674  func flash_Run("bank"), 1;
004295  004675  // Syntax    : flash_Run(bankx);
004296  004676  // Usage     : res := flash_Run(FLASHBANK_5);
004297  004677  // Notes     : Restarts the processor, running code from the required
004298  004678  //           : flash bank. bank may be a variable, or one of the
004299  004679  //           : pre-defined constants:-
004300  004680  //           :    FLASHBANK_0                 //0x00
004301  004681  //           :    FLASHBANK_1                 //0x01
004302  004682  //           :    FLASHBANK_2                 //0x02
004303  004683  //           :    FLASHBANK_3                 //0x03
004304  004684  //           :    FLASHBANK_4                 //0x04
004305  004685  //           :    FLASHBANK_5                 //0x05
004306  004686  // returns    : This function should net return as it restarts
004307  004687  //        : the processor and jumps to the required bank,
004308  004688  //        : If it does return, -1 indicates incorrect/invalid
004309  004689  //        : bank number, and -2 indicates no valid program
004310  004690  //        : in the selected bank.
004311  004691        
004312  004692  func flash_Bank(), 1;
004313  004693  // Syntax   : flash_Bank();
004314  004694  // Usage    : myvar := flash_Bank();
004315  004695  // Notes    : Identifies which flash bank the code is running from.
004316  004696  // Returns  : The FLASH bank that code is currently running from, 0-5.
004317  004697        
004318  004698        
004319  004699  func flash_EraseBank("bank", "confirmation"), 1;
004320  004700  // Syntax   : flash_EraseBank(bank, confirmation);
004321  004701  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004322  004702  // Notes    : This function should be used with extreme caution.
004323  004703  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004324  004704  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004325  004705  //          : a protected bank will not be erased, and function will return with 0
004326  004706  //          : If the destination bank is the same as the execution bank, the processor will reset
004327  004707  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004328  004708  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004329  004709  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004330  004710  // Returns  : returns true if the function succeeded
004331  004711  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004332  004712        
004333  004713  func flash_LoadFile("bank", "filename"), 1;
004334  004714  // Syntax   : flash_LoadFile(bank, ptr);
004335  004715  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004336  004716  // Notes    : Copies a file from uSD to the required flashbank.
004337  004717  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004338  004718  // Returns  : returns true if the function succeeded.
004339  004719        
004340  004720        
004341  004721  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004342  004722  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004343  004723  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004344  004724  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004345  004725  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004346  004726  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004347  004727  // Returns  : returns true if the function succeeded.
004348  004728        
004349  004729        
004350  004730  func flash_putstr("bank", "ptr"), 1;
004351  004731  // Syntax   : flash_putstr(bank, ptr);
004352  004732  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004353  004733  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004354  004734  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004355  004735  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004356  004736        
004357  004737  func flash_Blit16("bank", "offset", "count"), 1;
004358  004738  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004359  004739  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004360  004740  // Notes    : Blit an image to a GRAM window from FLASH storage.
004361  004741  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004362  004742  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004363  004743        
004364  004744  func flash_Blit8("bank", "offset", "count"), 1;
004365  004745  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004366  004746  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004367  004747  // Notes    : Blit an image to a GRAM window from FLASH storage.
004368  004748  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004369  004749  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004370  004750        
004371  004751  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004372  004752  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004373  004753  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004374  004754  // Notes    : Blit an image to a GRAM window from FLASH storage.
004375  004755  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004376  004756  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004377  004757        
004378  004758  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004379  004759  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004380  004760  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004381  004761  // Notes    : Blit an image to a GRAM window from FLASH storage.
004382  004762  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004383  004763  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004384  004764        
004385  004765  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004386  004766  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004387  004767  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004388  004768  // Notes    : Blit an image to a GRAM window from FLASH storage.
004389  004769  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004390  004770  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004391  004771        
004392  004772  func flash_Exec("bank", "arglistptr"), 1;
004393  004773  // Syntax: res := flash_Exec("bank","arglistptr");
004394  004774  // Usage : res := flash_Exec("bank","arglistptr");
004395  004775  // Notes : returns like a function, current program
004396  004776  //       : calling program is kept active and control returns to it.
004397  004777  //       : If arglistptr is 0, no arguments are passed, else
004398  004778  //       : arglist points to an array, the first element being
004399  004779  //       : the number of elements in the array.
004400  004780  //       : func 'main' in the called bank accepts the arguments.
004401  004781  // WARNING Not currently implemented!
004402  004782        
004403  004783        
004404  004784  func __reserved68(), 0; // do not remove
004405  004785  func __reserved69(), 0; // do not remove
004406  004786  func __reserved70(), 0; // do not remove
004407  004787        
004408  004788  //=========================================================================================================
004409  004789  // I/O and hardware functions
004410  004790  //=========================================================================================================
004411  004791        
004412  004792        
004413  004793        
004414  004794        
004415  004795  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004416  004796  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004417  004797  // Syntax: pin_Pulseout(pin, value);
004418  004798  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004419  004799  // Notes : only available on PA0 to PA9
004420  004800  //       : Invert the state of an output for "value" milliseconds.
004421  004801  //       : pulseout is non blocking, that is, code execution may continue while
004422  004802  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004423  004803  //       : If not already an output, pin is automatically made a push/pull output,
004424  004804  //       : and the last state of its output latch will determine pulse polarity.
004425  004805  //       : It's its open drain state is not altered if the pin was already an output.
004426  004806  //       : If pulseout is called while pulseout is still active, the pulse timer
004427  004807  //       : will simply be updated with the new "value" and the pulse will continue
004428  004808  //       : with the extended value.
004429  004809  //       : returns true if the pin number is legal (usually ignored)
004430  004810        
004431  004811        
004432  004812  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004433  004813  // Syntax: pin_Counter(pin, mode, userfunc);
004434  004814  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004435  004815  // Notes : only available on PA4 to PA9
004436  004816  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004437  004817  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004438  004818  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004439  004819  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004440  004820  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004441  004821  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004442  004822  //       : The pin may be configured as an input or output, the function behaves the same.
004443  004823  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004444  004824  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004445  004825  //       : "mode" has the following effect:-
004446  004826  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004447  004827  //       : mode COUNT_RISE(1) = increment on every rising edge
004448  004828  //       : mode COUNT_FALL(2) = increment on every falling edge
004449  004829  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004450  004830        
004451  004831  //------------------------------------------------------------------//
004452  004832  // pin counter mode constants                                       //
004453  004833  //------------------------------------------------------------------//
004454  004834  #CONST
004455  004839  #END
004456  004840        
004457  004841  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004458  004842  // Syntax: Qencoder1(pinA, pinB, mode);
004459  004843  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004460  004844  // Notes : not available on pins PA14 and PA15
004461  004845  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004462  004846  //       : or written to at any time with peekW and pokeW using the following constants:-
004463  004847  //       : It is necessary to configure the pins first, depending on your requirements, eg
004464  004848  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004465  004849  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004466  004850  //       : Returns true if the pin numbers are legal (usually ignored)
004467  004851  //    QEN1_COUNTER_LO
004468  004852  //    QEN1_COUNTER_HI
004469  004853  //    QEN1_DELTA This is reset to 0 when read
004470  004854        
004471  004855  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004472  004856  // Syntax: Qencoder2(pinA, pinB, mode);
004473  004857  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004474  004858  // Notes : not available on pins PA14 and PA15
004475  004859  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004476  004860  //       : or written to at any time with peekW and pokeW using the following constants:-
004477  004861  //       : It is necessary to configure the pins first, depending on your requirements, eg
004478  004862  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004479  004863  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004480  004864  //       : Returns true if the pin numbers are legal (usually ignored)
004481  004865  //    QEN2_COUNTER_LO
004482  004866  //    QEN2_COUNTER_HI
004483  004867  //    QEN2_DELTA This is reset to 0 when read
004484  004868        
004485  004869        
004486  004870  func Qencoder1Reset(), 0;
004487  004871  // Syntax: Qencoder1Reset();
004488  004872  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004489  004873  // Notes :
004490  004874  //    QEN1_COUNTER_LO is reset to zero
004491  004875  //    QEN1_COUNTER_HI is reset to zero
004492  004876  //    QEN1_DELTA is reset to zero
004493  004877        
004494  004878  func Qencoder2Reset(), 0;
004495  004879  // Syntax: Qencoder2Reset();
004496  004880  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004497  004881  // Notes :
004498  004882  //    QEN2_COUNTER_LO is reset to zero
004499  004883  //    QEN2_COUNTER_HI is reset to zero
004500  004884  //    QEN2_DELTA is reset to zero
004501  004885        
004502  004886        
004503  004887  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004504  004888  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004505  004889  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004506  004890  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004507  004891  //       : Invert the state of an output at a "freq" freuency "count" times.
004508  004892  //       : PulseoutCount is non blocking, that is, code execution may continue while
004509  004893  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004510  004894  //       : If not already an output, pin is automatically made a push/pull output,
004511  004895  //       : and the last state of its output latch will determine pulse polarity.
004512  004896  //       : It's its open drain state is not altered if the pin was already an output.
004513  004897  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004514  004898  //       : will simply have the new "value" added to it.
004515  004899  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004516  004900  //       : returns true if the pin number is legal (usually ignored)
004517  004901        
004518  004902  func __reserved72(), 0; // do not remove
004519  004903        
004520  004904  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004521  004905  // Syntax: pwm_Init(pin, value);
004522  004906  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004523  004907  // Notes : only available on PA4 to PA9
004524  004908  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004525  004909  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004526  004910  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004527  004911  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004528  004912  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004529  004913  //       :                    : Repetition rate ~50hz or 20ms
004530  004914  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004531  004915  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004532  004916  //       : pwm_Init is non blocking and the pwm continues until turn off
004533  004917  //       : Returns true if the pin number is legal (usually ignored)
004534  004918        
004535  004919  //------------------------------------------------------------------------------
004536  004920  // PWM Constants
004537  004921  //------------------------------------------------------------------------------
004538  004922  #CONST
004539  004927  #END
004540  004928        
004541  004929  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004542  004930  // Syntax   : OW_Reset(PA0);
004543  004931  // Usage    : OW_Reset(PA0);
004544  004932  // Notes    : Only available on PA0 to PA13
004545  004933  //          : Resets  ONEWIRE device
004546  004934  //          : Returns the status, 0 = ACK.
004547  004935  //          :
004548  004936        
004549  004937  func OW_Read("pin"), 1;                              // read data from 1wire bus
004550  004938  // Syntax   : OW_Read(PA0);
004551  004939  // Usage    : arg1 := OW_Read(PA0);
004552  004940  // Notes    : Only available on PA0 to PA13
004553  004941  //          : Reads value of the ONEWIRE pin
004554  004942  //          : that was previously selected for ONEWIRE comms.
004555  004943  //          :
004556  004944  //          : pin = 0 : the next byte from the ONEWIRE bus
004557  004945        
004558  004946  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004559  004947  // Syntax   : OW_Read9(PA0);
004560  004948  // Usage    : OW_Read9(PA0);
004561  004949  // Notes    : Only available on PA0 to PA13
004562  004950  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004563  004951  //          : that was previously selected for ONEWIRE comms.
004564  004952  //          :
004565  004953  //          : read the 9 bits from the ONEWIRE bus
004566  004954        
004567  004955  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004568  004956  // Syntax   : OW_Write(PA0, arg);
004569  004957  // Usage    : OW_Write(PA0, arg);
004570  004958  // Notes    : Only available on PA0 to PA13
004571  004959  //          : Sends ONEWIRE data on the appropriate
004572  004960  //          : pin that was previously  selected as ONEWIRE comms.
004573  004961  //          :
004574  004962  //          : write arg to the ONEWIRE bus
004575  004963        
004576  004964  func __reserved77(), 0; // do not remove
004577  004965  func __reserved78(), 0; // do not remove
004578  004966        
004579  004967  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004580  004968  // Syntax: sys_GetDateVar(&year, &month, &day);
004581  004969  // Usage : sys_GetDateVar(&year, &month, &day);
004582  004970  // Notes : Retrieves the date values into variables
004583  004971        
004584  004972  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004585  004973  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004974  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004587  004975  // Notes : Retrieves the time values into variables
004588  004976        
004589  004977  func sys_PmmC(), 0;
004590  004978  // Syntax: sys_PmmC();
004591  004979  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004592  004980  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004593  004981  //       : Can be captured to a buffer using the to( function
004594  004982  //       : Returns nothing.
004595  004983        
004596  004984  func sys_Driver(), 0;
004597  004985  // Syntax: sys_Driver();
004598  004986  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004599  004987  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004600  004988  //       : Can be captured to a buffer using the to( function
004601  004989  //       : Returns nothing.
004602  004990        
004603  004991  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004604  004992  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004605  004993  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004606  004994  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004607  004995  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004608  004996  //       : elements in each buffer. This will need to be greater than "width" for negative
004609  004997  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004610  004998  //       : pass 0 as the address for any unused traces
004611  004999  //       : X position is incremented each point by "xstep" pixels.
004612  005000  //       : Y values are derived from a Y buffer "newy" (signed values).
004613  005001  //       : 2 buffers need to be supplied, "newy" contains new
004614  005002  //       : points to be drawn, "oldy" contains most recent set
004615  005003  //       : of points to be un-drawn. After the waveform is drawn,
004616  005004  //       : "newy" buffer is automatically copied to "oldy" buffer.
004617  005005        
004618  005006        
004619  005007  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004620  005008  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004621  005009  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004622  005010  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004623  005011  //       : and calls "COMPLETEfunction" when done.
004624  005012  //       : "rate" is samples in 100 of samples per second
004625  005013  //       : Any unused IOx pins should have their buffer addresses set to 0
004626  005014  //       : For performance reasons samples are taken in chunks of 32, thus if you
004627  005015  //       : request 33 samples there will be a delay of 31 samples before
004628  005016  //       : "COMPLETEfunction" is called
004629  005017  //       : If Touch is enabled this function should be called no more than once per
004630  005018  //       : millisecond, otherwise touch behaviour could be eratic.
004631  005019        
004632  005020        
004633  005021  func sys_ErrorMessage("msgnum"), 1;
004634  005022        
004635  005023  //==============================//
004636  005024  // NeoPixel specific functions  //
004637  005025  //==============================//
004638  005026        
004639  005027  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004640  005028  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004641  005029  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004642  005030  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004643  005031  //       : data        : Address of data to be sent
004644  005032  //       : size        : number of colour 'sets' to follow
004645  005033  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004646  005034  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004647  005035  //       : Repeat      : Number of times to repeat the colours between first and last
004648  005036  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004649  005037  //       : Returns true if the pin number is legal (usually ignored)
004650  005038  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004651  005039  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004652  005040        
004653  005041  // NeoPixel related constants
004654  005042  #CONST
004655  005046  #END
004656  005047        
004657  005048  func __reserved85(), 0; // do not remove
004658  005049  func __reserved86(), 0; // do not remove
004659  005050        
004660  005051  //==============================================//
004661  005052  // spi flash device specific functions          //
004662  005053  //==============================================//
004663  005054        
004664  005055  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004665  005056  // Syntax   : spiflash_SIG("spi#","enablepin");
004666  005057  // Usage    : var := spiflash_SIG(SPI1, PA0);
004667  005058  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004668  005059  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004669  005060  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004670  005061  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004671  005062  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004672  005063  //          : byte is ignored.
004673  005064        
004674  005065  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004675  005066  // Syntax   : spiflash_ID("spi#","enablepin");
004676  005067  // Usage    : var := spiflash_ID(SPI1, PA0);
004677  005068  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004678  005069  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004679  005070  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004680  005071  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004681  005072  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004682  005073  //          : contains capacity. Refer to the device data sheet for further information.
004683  005074        
004684  005075  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004685  005076  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004686  005077  // Usage    : spiflash_BulkErase(SPI1, PA0);
004687  005078  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004688  005079  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004689  005080  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004690  005081  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004691  005082  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004692  005083  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004693  005084        
004694  005085  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004695  005086  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004696  005087  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004697  005088  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004698  005089  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004699  005090  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004700  005091  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004701  005092  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004702  005093  //          : blockAddress The address of the 64k FLASH block to be erased.
004703  005094  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004704  005095  //          : can take up to 3 milliseconds.
004705  005096        
004706  005097  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004707  005098  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004708  005099  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004709  005100  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004710  005101        
004711  005102  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004712  005103  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004713  005104  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004714  005105  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004715  005106  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004716  005107  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004717  005108  //       : returns number of characters read
004718  005109  //       : if "dest" is zero, data is read direct to GRAM window
004719  005110  //       :
004720  005111        
004721  005112  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004722  005113  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004723  005114  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004724  005115  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004725  005116  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004726  005117  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004727  005118  //       : returns number of bytes written
004728  005119  //       :
004729  005120        
004730  005121  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004731  005122  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004732  005123  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004733  005124  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004734  005125  //       : The image is displayed at x,y (with respect to top left corner).
004735  005126        
004736  005127  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004737  005128  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004738  005129  // Usage : spiflash_PutC('x', SPI1, PA0);
004739  005130  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004740  005131  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004741  005132  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004742  005133        
004743  005134  func spiflash_GetC("spi#", "enablepin"), 1;
004744  005135  // Syntax: spiflash_GetC("spi#", "enablepin");
004745  005136  // Usage : mychar := fgetC(SPI1, PA0);
004746  005137  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004747  005138  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004748  005139  //       : by subsequent reads or writes.
004749  005140  //       : returns next char from file
004750  005141        
004751  005142  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004752  005143  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004753  005144  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004754  005145  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004755  005146  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004756  005147  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004757  005148        
004758  005149  func spiflash_GetW("spi#", "enablepin"), 1;
004759  005150  // Syntax: spiflash_GetW("spi#", "enablepin");
004760  005151  // Usage : myword := fgetW(SPI1, PA0);
004761  005152  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004762  005153  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004763  005154  //       : by subsequent reads or writes.
004764  005155  // Notes : returns next word in file
004765  005156        
004766  005157  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004767  005158  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004768  005159  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004769  005160  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004770  005161  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004771  005162  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004772  005163  //       : returns number of characters written
004773  005164  //       :
004774  005165        
004775  005166  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004776  005167  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004777  005168  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004778  005169  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004779  005170  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004780  005171  //       : by subsequent reads or writes.
004781  005172  //       : returns pointer to string or null if failed.
004782  005173  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004783  005174  //       : NB:- only reads up to "size-1" characters into "string"
004784  005175  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004785  005176  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004786  005177  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004787  005178  //       : C] It reaches the end of file
004788  005179  //       : D] A read error occurs.
004789  005180        
004790  005181  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004791  005182  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004792  005183  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004793  005184  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004794  005185  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004795  005186  //       : return a function pointer to the allocation.
004796  005187  //       : The function can then be invoked just like any other
004797  005188  //       : function would be called via a function pointer.
004798  005189  //       : Parameters may be passed to it in a conventional way.
004799  005190  //       : The function may be discarded at any time when no
004800  005191  //       : longer required, thus freeing its memory resources.
004801  005192  //       : The loaded function can be discarded with mem_Free(..)
004802  005193  //       : eg:
004803  005194  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004804  005195  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004805  005196  //       : then elsewhere in your program:-
004806  005197  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004807  005198  //       : if(res == QUIT_APPLICATION) goto exitApp;
004808  005199  //       : Later in your program, when popupWindow is no longer
004809  005200  //       : required for the application:-
004810  005201  //       : res := mem_Free(popupWindow);
004811  005202  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004812  005203  //       : The callers stack is shared by the loaded function,
004813  005204  //       : however any global variables in the loaded function
004814  005205  //       : are private to that function.
004815  005206  //
004816  005207        
004817  005208  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004818  005209  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004819  005210  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004820  005211  // Notes : current program releases any allocated memory but
004821  005212  //       : retains the stack and global memory.
004822  005213  //       : If arglistptr is 0, no arguments are passed, else
004823  005214  //       : arglist points to an array, the first element being
004824  005215  //       : the number of elements in the array.
004825  005216  //       : func 'main' in the called program accepts
004826  005217  //       : the arguments, if any. The arguments can only
004827  005218  //       : be passed by value, no pointers or references can be
004828  005219  //       : used as all memory is cleared before the file
004829  005220  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004830  005221  //       : for functions that can pass by reference.
004831  005222        
004832  005223  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004833  005224  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004834  005225  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004835  005226  // Notes : returns like a function, current program
004836  005227  //       : calling program is kept active and control returns to it.
004837  005228  //       : If arglistptr is 0, no arguments are passed, else
004838  005229  //       : arglist points to an array, the first element being
004839  005230  //       : the number of elements in the array.
004840  005231  //       : func 'main' in the called program accepts the arguments.
004841  005232  //       : This function is similar to spiflash_LoadFunction(...), however,
004842  005233  //       : the function argument list is passed by pointer, and
004843  005234  //       : the memory consumed by the function is released as
004844  005235  //       : soon as the function completes.
004845  005236        
004846  005237  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004847  005238  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004848  005239  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004849  005240  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004850  005241  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004851  005242  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004852  005243  //       : Returns NULL if function fails.
004853  005244  //       : Returns a handle (pointer to the memory allocation) to the
004854  005245  //       : image control list that has been created.
004855  005246        
004856  005247  // Notes : This function Calculates the size of a chunk of memory required for
004857  005248  //       : a image list and populates it from the image control file ("*.dat")
004858  005249  //       : therefore, when imagelist is no longer required, you must de-allocate
004859  005250  //       : the image list memory by using eg:- mem_Free(hImagelist);
004860  005251  //       : to restore the heap.
004861  005252  //       :
004862  005253        
004863  005254  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004864  005255  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004865  005256  // Usage : spiflash_PlayWAV(SPI1, PA0);
004866  005257  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004867  005258  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004868  005259  //       : or writes.
004869  005260  //       : This function automatically grabs a chunk
004870  005261  //       : of memory for a file buffer, and a wave
004871  005262  //       : buffer. The minimum memory requirement is
004872  005263  //       : about 580 bytes for the disk io service and
004873  005264  //       : a minimum wave buffer size of 1024. The size
004874  005265  //       : of the wave buffer allocation
004875  005266  //       : can be increased by the snd_BufSize function.
004876  005267  //       : The default size 1024 bytes.
004877  005268  //       : NB the memory is only required during the
004878  005269  //       : duration of play, and is automatically
004879  005270  //       : released while not in use.
004880  005271  //       : See the Sound Class services for other associated controls.
004881  005272  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004882  005273  //       : If errors occured, the folling is returned
004883  005274  //       : -7  : Insufficient memory available for WAV buffer and file
004884  005275  //       : -6  : cant play this rate
004885  005276  //       : -5  : no data chunk found in first rsector
004886  005277  //       : -4  : no format data
004887  005278  //       : -3  : no wave chunk signature
004888  005279  //       : -2  : bad wave file format
004889  005280  //       : -1  : file not found
004890  005281        
004891  005282  //==============================================//
004892  005283  // more com functions                           //
004893  005284  //==============================================//
004894  005285        
004895  005286  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004896  005287  // Syntax   : com1_TXblock("buf", "bufsize");
004897  005288  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004898  005289  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004899  005290  //          : if a transmit buffer is active and space is available this function will return almost
004900  005291  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004901  005292        
004902  005293  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004903  005294  // Syntax   : com1_RXblock("buf", "bufsize");
004904  005295  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004905  005296  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004906  005297  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004907  005298  //          : immediately otherwise it will block until until the required bytes are received.
004908  005299        
004909  005300  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004910  005301  // Syntax   : com_TXblock("buf", "bufsize");
004911  005302  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004912  005303  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004913  005304  //          : if a transmit buffer is active and space is available this function will return almost
004914  005305  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004915  005306        
004916  005307  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004917  005308  // Syntax   : com_RXblock("buf", "bufsize");
004918  005309  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004919  005310  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004920  005311  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004921  005312  //          : immediately otherwise it will block until until the required bytes are received.
004922  005313        
004923  005314  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004924  005315  // Syntax   : com_TXblock("buf", "bufsize");
004925  005316  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004926  005317  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004927  005318  //          : if a transmit buffer is active and space is available this function will return almost
004928  005319  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004929  005320        
004930  005321  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004931  005322  // Syntax   : com_RXblock("buf", "bufsize");
004932  005323  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004933  005324  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004934  005325  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004935  005326  //          : immediately otherwise it will block until until the required bytes are received.
004936  005327        
004937  005328  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004938  005329  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004939  005330  // Usage : disp_BlitPixelsFromCOM1();
004940  005331  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004941  005332  //       : display from the specified com port.
004942  005333        
004943  005334  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004944  005335  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004945  005336  // Usage : disp_BlitPixelsFromCOM2();
004946  005337  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004947  005338  //       : display from the specified com port.
004948  005339        
004949  005340  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004950  005341  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004951  005342  // Usage : disp_BlitPixelsFromCOM3();
004952  005343  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004953  005344  //       : display from the specified com port.
004954  005345        
004955  005346        
004956  005347  //==============================================//
004957  005348  // crc generation functions                     //
004958  005349  //==============================================//
004959  005350        
004960  005351  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004961  005352  // *Notes   : (if you calculate all of the incoming data
004962  005353  //          : INCLUDING the CRC, the result should be 0x00
004963  005354  //          : This is equivalent to simple addition of all bytes
004964  005355  //          : and returning the negated sum an 8 bit value.
004965  005356  //          : For the standard test string "123456789",
004966  005357  //          : crc_CSUM_8 will return 0x0023.
004967  005358        
004968  005359        
004969  005360  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004970  005361  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004971  005362  //          : (if you calculate all of the incoming data
004972  005363  //          : INCLUDING the CRC, the result should be 0x0000
004973  005364  //          : For the standard test string "123456789",
004974  005365  //          : crc_16 will return 0xBB3D.
004975  005366        
004976  005367        
004977  005368  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004978  005369  // *Notes   : (if you calculate all of the incoming data
004979  005370  //          : INCLUDING the CRC, the result should be 0x0000
004980  005371  //          : For the standard test string "123456789",
004981  005372  //          : crc_MODBUS will return 0x4B37.
004982  005373        
004983  005374        
004984  005375  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004985  005376  // *Notes   : (if you calculate all of the incoming data
004986  005377  //          : INCLUDING the CRC, the result should be 0x0000
004987  005378  //          : For the standard test string "123456789",
004988  005379  //          : crc_CCITT will return the following:-
004989  005380  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004990  005381  //          : seed = 0xFFFF, result = 0x29B1
004991  005382  //          : seed = 0x1D0F, result = 0xE5CC
004992  005383        
004993  005384        
004994  005385  //------------------------------------------------------------------//
004995  005386  // CONSTANTS
004996  005387  //------------------------------------------------------------------//
004997  005388        
004998  005389  #CONST
004999  005393  #END
005000  005394        
005001  005395  // timebase constants for timebase_init
005002  005396  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005003  005397  #CONST
005004  005408  #END
005005  005409        
005006  005410        
005007  005411  // generic constants
005008  005412  #CONST
005009  005420  #END
005010  005421        
005011  005422        
005012  005423        
005013  005424  //gfx_Get() related constants
005014  005425  #CONST
005015  005434  #END
005016  005435        
005017  005436        
005018  005437        
005019  005438        
005020  005439  #CONST
005021  005452  #END
005022  005453        
005023  005454        
005024  005455  #CONST
005025  005480  #END
005026  005481        
005027  005482        
005028  005483        
005029  005484        
005030  005485  // timer control  related constants
005031  005486  #CONST
005032  005495  #END
005033  005496        
005034  005497        
005035  005498        
005036  005499  //------------------------------------------------------------------------------
005037  005500  // system WORD variables accesible with peekW and pokeW or pointer access
005038  005501  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005039  005502  // can also be accessed with peekW and pokeW
005040  005503  //------------------------------------------------------------------------------
005041  005504        
005042  005505  #CONST
005043  005600  #END
005044  005601        
005045  005602  #CONST
005046  005767  #END
005047  005768        
005048  005769        
005049  005770        
005050  005771  //==================================================================================================
005051  005772        
005052  005773        
005053  005774        
005054  000013      #ENDIF
005055  000014        
005056  000015        
005057  000016  //===========================================================================================
005058  000017        
005059  000018        
005060  000002        
005061  000003  // generated 29/07/2015 17:47:08
005062  000004        
005063  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005064  000006  #inherit "4DGL_16bitColours.fnc"
005065  000006  #inherit "4DGL_16bitColours.fnc"
005066  000004  */
005067  000005        
005068  000006        
005069  000007        
005070  000008  #CONST
005071  000149  #END
005072  000150        
005073  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005074  000008  #inherit "VisualConst.inc"
005075  000008  #inherit "VisualConst.inc"
005076  000001  // Line Patterns
005077  000002  #constant  LPCOARSE    0xF0F0
005078  000002  #constant  LPCOARSE    0xF0F0
005079  000003  #constant  LPMEDIUM    0x3333
005080  000003  #constant  LPMEDIUM    0x3333
005081  000004  #constant  LPFINE      0xAAAA
005082  000004  #constant  LPFINE      0xAAAA
005083  000005  #constant  LPDASHDOT   0x03CF
005084  000005  #constant  LPDASHDOT   0x03CF
005085  000006  #constant  LPDASHDOTDOT 0x0333
005086  000006  #constant  LPDASHDOTDOT 0x0333
005087  000007  #constant  LPSOLID     0x0000
005088  000007  #constant  LPSOLID     0x0000
005089  000009        
005090  000010        
file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1Const.inc

005091  000011  #inherit "RepRap_Touchv1Const.inc"
005092  000011  #inherit "RepRap_Touchv1Const.inc"
005093  000001  // File generated 29/07/2015 17:46:47
005094  000002  // Warning! This is a generated file, any manual changes will be
005095  000003  // lost during the next generation.
005096  000004        
005097  000005  #constant  Strings1Count    1
005098  000005  #constant  Strings1Count    1
005099  000006  #constant  Strings1Size     25
005100  000006  #constant  Strings1Size     25
005101  000007  #constant  Strings3Count    1
005102  000007  #constant  Strings3Count    1
005103  000008  #constant  Strings3Size     18
005104  000008  #constant  Strings3Size     18
005105  000009  #constant  Strings4Count    1
005106  000009  #constant  Strings4Count    1
005107  000010  #constant  Strings4Size     25
005108  000010  #constant  Strings4Size     25
005109  000011  #constant  Strings6Count    1
005110  000011  #constant  Strings6Count    1
005111  000012  #constant  Strings6Size     31
005112  000012  #constant  Strings6Size     31
005113  000013  #constant  Strings2Count    0
005114  000013  #constant  Strings2Count    0
005115  000014  #constant  Strings2Size     1
005116  000014  #constant  Strings2Size     1
005117  000015  #constant  Strings0Count    1
005118  000015  #constant  Strings0Count    1
005119  000016  #constant  Strings0Size     7
005120  000016  #constant  Strings0Size     7
005121  000017  #constant  Strings9Count    0
005122  000017  #constant  Strings9Count    0
005123  000018  #constant  Strings9Size     1
005124  000018  #constant  Strings9Size     1
005125  000019  #constant  Strings34Count    0
005126  000019  #constant  Strings34Count    0
005127  000020  #constant  Strings34Size     1
005128  000020  #constant  Strings34Size     1
005129  000021  #constant  Strings36Count    0
005130  000021  #constant  Strings36Count    0
005131  000022  #constant  Strings36Size     1
005132  000022  #constant  Strings36Size     1
005133  000023  #constant  Strings37Count    0
005134  000023  #constant  Strings37Count    0
005135  000024  #constant  Strings37Size     1
005136  000024  #constant  Strings37Size     1
005137  000025  #constant  Strings12Count    1
005138  000025  #constant  Strings12Count    1
005139  000026  #constant  Strings12Size     14
005140  000026  #constant  Strings12Size     14
005141  000027  #constant  Strings14Count    1
005142  000027  #constant  Strings14Count    1
005143  000028  #constant  Strings14Size     23
005144  000028  #constant  Strings14Size     23
005145  000029  #constant  Strings16Count    0
005146  000029  #constant  Strings16Count    0
005147  000030  #constant  Strings16Size     1
005148  000030  #constant  Strings16Size     1
005149  000031  #constant  Strings15Count    1
005150  000031  #constant  Strings15Count    1
005151  000032  #constant  Strings15Size     24
005152  000032  #constant  Strings15Size     24
005153  000033  #constant  Strings11Count    0
005154  000033  #constant  Strings11Count    0
005155  000034  #constant  Strings11Size     1
005156  000034  #constant  Strings11Size     1
005157  000035  #constant  Strings24Count    1
005158  000035  #constant  Strings24Count    1
005159  000036  #constant  Strings24Size     26
005160  000036  #constant  Strings24Size     26
005161  000037  #constant  Strings25Count    1
005162  000037  #constant  Strings25Count    1
005163  000038  #constant  Strings25Size     10
005164  000038  #constant  Strings25Size     10
005165  000039  #constant  Strings26Count    1
005166  000039  #constant  Strings26Count    1
005167  000040  #constant  Strings26Size     10
005168  000040  #constant  Strings26Size     10
005169  000041  #constant  Strings27Count    1
005170  000041  #constant  Strings27Count    1
005171  000042  #constant  Strings27Size     11
005172  000042  #constant  Strings27Size     11
005173  000043  #constant  Strings35Count    1
005174  000043  #constant  Strings35Count    1
005175  000044  #constant  Strings35Size     49
005176  000044  #constant  Strings35Size     49
005177  000045  #constant  Strings33Count    0
005178  000045  #constant  Strings33Count    0
005179  000046  #constant  Strings33Size     1
005180  000046  #constant  Strings33Size     1
005181  000047  #constant  Strings10Count    1
005182  000047  #constant  Strings10Count    1
005183  000048  #constant  Strings10Size     19
005184  000048  #constant  Strings10Size     19
005185  000049  #constant  Strings7Count    0
005186  000049  #constant  Strings7Count    0
005187  000050  #constant  Strings7Size     1
005188  000050  #constant  Strings7Size     1
005189  000051  #constant  Strings8Count    0
005190  000051  #constant  Strings8Count    0
005191  000052  #constant  Strings8Size     1
005192  000052  #constant  Strings8Size     1
005193  000053  #constant  Strings38Count    0
005194  000053  #constant  Strings38Count    0
005195  000054  #constant  Strings38Size     1
005196  000054  #constant  Strings38Size     1
005197  000055  #constant  Strings39Count    0
005198  000055  #constant  Strings39Count    0
005199  000056  #constant  Strings39Size     1
005200  000056  #constant  Strings39Size     1
005201  000057  #constant  Strings40Count    1
005202  000057  #constant  Strings40Count    1
005203  000058  #constant  Strings40Size     7
005204  000058  #constant  Strings40Size     7
005205  000059  #constant  Strings41Count    1
005206  000059  #constant  Strings41Count    1
005207  000060  #constant  Strings41Size     7
005208  000060  #constant  Strings41Size     7
005209  000061  #constant  Strings42Count    1
005210  000061  #constant  Strings42Count    1
005211  000062  #constant  Strings42Size     7
005212  000062  #constant  Strings42Size     7
005213  000063  #constant  Strings43Count    0
005214  000063  #constant  Strings43Count    0
005215  000064  #constant  Strings43Size     1
005216  000064  #constant  Strings43Size     1
005217  000065  #constant  Strings44Count    0
005218  000065  #constant  Strings44Count    0
005219  000066  #constant  Strings44Size     1
005220  000066  #constant  Strings44Size     1
005221  000067  #constant  Strings45Count    0
005222  000067  #constant  Strings45Count    0
005223  000068  #constant  Strings45Size     1
005224  000068  #constant  Strings45Size     1
005225  000069  #constant  Strings51Count    0
005226  000069  #constant  Strings51Count    0
005227  000070  #constant  Strings51Size     1
005228  000070  #constant  Strings51Size     1
005229  000071  #constant  Strings52Count    0
005230  000071  #constant  Strings52Count    0
005231  000072  #constant  Strings52Size     1
005232  000072  #constant  Strings52Size     1
005233  000073  #constant  Strings17Count    1
005234  000073  #constant  Strings17Count    1
005235  000074  #constant  Strings17Size     72
005236  000074  #constant  Strings17Size     72
005237  000075  #constant  Strings18Count    1
005238  000075  #constant  Strings18Count    1
005239  000076  #constant  Strings18Size     114
005240  000076  #constant  Strings18Size     114
005241  000077  #constant  Strings19Count    1
005242  000077  #constant  Strings19Count    1
005243  000078  #constant  Strings19Size     106
005244  000078  #constant  Strings19Size     106
005245  000079  #constant  Strings29Count    1
005246  000079  #constant  Strings29Count    1
005247  000080  #constant  Strings29Size     60
005248  000080  #constant  Strings29Size     60
005249  000081  #constant  Strings30Count    1
005250  000081  #constant  Strings30Count    1
005251  000082  #constant  Strings30Size     30
005252  000082  #constant  Strings30Size     30
005253  000083  #constant  Strings31Count    1
005254  000083  #constant  Strings31Count    1
005255  000084  #constant  Strings31Size     7
005256  000084  #constant  Strings31Size     7
005257  000085  #constant  Strings32Count    1
005258  000085  #constant  Strings32Count    1
005259  000086  #constant  Strings32Size     19
005260  000086  #constant  Strings32Size     19
005261  000087  #constant  Strings49Count    1
005262  000087  #constant  Strings49Count    1
005263  000088  #constant  Strings49Size     17
005264  000088  #constant  Strings49Size     17
005265  000089  #constant  Strings50Count    0
005266  000089  #constant  Strings50Count    0
005267  000090  #constant  Strings50Size     1
005268  000090  #constant  Strings50Size     1
005269  000091  #constant  Strings13Count    1
005270  000091  #constant  Strings13Count    1
005271  000092  #constant  Strings13Size     3
005272  000092  #constant  Strings13Size     3
005273  000093  #constant  Strings46Count    0
005274  000093  #constant  Strings46Count    0
005275  000094  #constant  Strings46Size     1
005276  000094  #constant  Strings46Size     1
005277  000095  #constant  Strings47Count    1
005278  000095  #constant  Strings47Count    1
005279  000096  #constant  Strings47Size     3
005280  000096  #constant  Strings47Size     3
005281  000097  #constant  Strings48Count    0
005282  000097  #constant  Strings48Count    0
005283  000098  #constant  Strings48Size     1
005284  000098  #constant  Strings48Size     1
005285  000099  #constant  Strings53Count    1
005286  000099  #constant  Strings53Count    1
005287  000100  #constant  Strings53Size     100
005288  000100  #constant  Strings53Size     100
005289  000101  // object indexes into ImageControl
005290  000102  #CONST
005291  000327  #END
005292  000328        
005293  000329  #constant  Strings5Size     0
005294  000329  #constant  Strings5Size     0
005295  000330  #constant  Strings5StartH   0
005296  000330  #constant  Strings5StartH   0
005297  000331  #constant  Strings5StartL   0
005298  000331  #constant  Strings5StartL   0
005299  000332  #constant  Strings20Size     0
005300  000332  #constant  Strings20Size     0
005301  000333  #constant  Strings20StartH   0
005302  000333  #constant  Strings20StartH   0
005303  000334  #constant  Strings20StartL   0
005304  000334  #constant  Strings20StartL   0
005305  000335  #constant  Strings21Size     0
005306  000335  #constant  Strings21Size     0
005307  000336  #constant  Strings21StartH   0
005308  000336  #constant  Strings21StartH   0
005309  000337  #constant  Strings21StartL   0
005310  000337  #constant  Strings21StartL   0
005311  000338  #constant  Strings22Size     0
005312  000338  #constant  Strings22Size     0
005313  000339  #constant  Strings22StartH   0
005314  000339  #constant  Strings22StartH   0
005315  000340  #constant  Strings22StartL   0
005316  000340  #constant  Strings22StartL   0
005317  000341  #constant  Strings23Size     0
005318  000341  #constant  Strings23Size     0
005319  000342  #constant  Strings23StartH   0
005320  000342  #constant  Strings23StartH   0
005321  000343  #constant  Strings23StartL   0
005322  000343  #constant  Strings23StartL   0
005323  000344  #constant  Strings28Size     0
005324  000344  #constant  Strings28Size     0
005325  000345  #constant  Strings28StartH   0
005326  000345  #constant  Strings28StartH   0
005327  000346  #constant  Strings28StartL   0
005328  000346  #constant  Strings28StartL   0
005329  000347  #constant  Strings1StartH   0x0
005330  000347  #constant  Strings1StartH   0x0
005331  000348  #constant  Strings1StartL   0x0
005332  000348  #constant  Strings1StartL   0x0
005333  000349  #constant  Strings3StartH   0x0
005334  000349  #constant  Strings3StartH   0x0
005335  000350  #constant  Strings3StartL   0x200
005336  000350  #constant  Strings3StartL   0x200
005337  000351  #constant  Strings4StartH   0x0
005338  000351  #constant  Strings4StartH   0x0
005339  000352  #constant  Strings4StartL   0x400
005340  000352  #constant  Strings4StartL   0x400
005341  000353  #constant  Strings6StartH   0x0
005342  000353  #constant  Strings6StartH   0x0
005343  000354  #constant  Strings6StartL   0x600
005344  000354  #constant  Strings6StartL   0x600
005345  000355  #constant  Strings2StartH   0x0
005346  000355  #constant  Strings2StartH   0x0
005347  000356  #constant  Strings2StartL   0x800
005348  000356  #constant  Strings2StartL   0x800
005349  000357  #constant  Strings0StartH   0x0
005350  000357  #constant  Strings0StartH   0x0
005351  000358  #constant  Strings0StartL   0xA00
005352  000358  #constant  Strings0StartL   0xA00
005353  000359  #constant  Strings9StartH   0x0
005354  000359  #constant  Strings9StartH   0x0
005355  000360  #constant  Strings9StartL   0xC00
005356  000360  #constant  Strings9StartL   0xC00
005357  000361  #constant  Strings34StartH   0x0
005358  000361  #constant  Strings34StartH   0x0
005359  000362  #constant  Strings34StartL   0xE00
005360  000362  #constant  Strings34StartL   0xE00
005361  000363  #constant  Strings36StartH   0x0
005362  000363  #constant  Strings36StartH   0x0
005363  000364  #constant  Strings36StartL   0x1000
005364  000364  #constant  Strings36StartL   0x1000
005365  000365  #constant  Strings37StartH   0x0
005366  000365  #constant  Strings37StartH   0x0
005367  000366  #constant  Strings37StartL   0x1200
005368  000366  #constant  Strings37StartL   0x1200
005369  000367  #constant  Strings12StartH   0x0
005370  000367  #constant  Strings12StartH   0x0
005371  000368  #constant  Strings12StartL   0x1400
005372  000368  #constant  Strings12StartL   0x1400
005373  000369  #constant  Strings14StartH   0x0
005374  000369  #constant  Strings14StartH   0x0
005375  000370  #constant  Strings14StartL   0x1600
005376  000370  #constant  Strings14StartL   0x1600
005377  000371  #constant  Strings16StartH   0x0
005378  000371  #constant  Strings16StartH   0x0
005379  000372  #constant  Strings16StartL   0x1800
005380  000372  #constant  Strings16StartL   0x1800
005381  000373  #constant  Strings15StartH   0x0
005382  000373  #constant  Strings15StartH   0x0
005383  000374  #constant  Strings15StartL   0x1A00
005384  000374  #constant  Strings15StartL   0x1A00
005385  000375  #constant  Strings11StartH   0x0
005386  000375  #constant  Strings11StartH   0x0
005387  000376  #constant  Strings11StartL   0x1C00
005388  000376  #constant  Strings11StartL   0x1C00
005389  000377  #constant  Strings24StartH   0x0
005390  000377  #constant  Strings24StartH   0x0
005391  000378  #constant  Strings24StartL   0x1E00
005392  000378  #constant  Strings24StartL   0x1E00
005393  000379  #constant  Strings25StartH   0x0
005394  000379  #constant  Strings25StartH   0x0
005395  000380  #constant  Strings25StartL   0x2000
005396  000380  #constant  Strings25StartL   0x2000
005397  000381  #constant  Strings26StartH   0x0
005398  000381  #constant  Strings26StartH   0x0
005399  000382  #constant  Strings26StartL   0x2200
005400  000382  #constant  Strings26StartL   0x2200
005401  000383  #constant  Strings27StartH   0x0
005402  000383  #constant  Strings27StartH   0x0
005403  000384  #constant  Strings27StartL   0x2400
005404  000384  #constant  Strings27StartL   0x2400
005405  000385  #constant  Strings35StartH   0x0
005406  000385  #constant  Strings35StartH   0x0
005407  000386  #constant  Strings35StartL   0x2600
005408  000386  #constant  Strings35StartL   0x2600
005409  000387  #constant  Strings33StartH   0x0
005410  000387  #constant  Strings33StartH   0x0
005411  000388  #constant  Strings33StartL   0x2800
005412  000388  #constant  Strings33StartL   0x2800
005413  000389  #constant  Strings10StartH   0x0
005414  000389  #constant  Strings10StartH   0x0
005415  000390  #constant  Strings10StartL   0x2A00
005416  000390  #constant  Strings10StartL   0x2A00
005417  000391  #constant  Strings7StartH   0x0
005418  000391  #constant  Strings7StartH   0x0
005419  000392  #constant  Strings7StartL   0x2C00
005420  000392  #constant  Strings7StartL   0x2C00
005421  000393  #constant  Strings8StartH   0x0
005422  000393  #constant  Strings8StartH   0x0
005423  000394  #constant  Strings8StartL   0x2E00
005424  000394  #constant  Strings8StartL   0x2E00
005425  000395  #constant  Strings38StartH   0x0
005426  000395  #constant  Strings38StartH   0x0
005427  000396  #constant  Strings38StartL   0x3000
005428  000396  #constant  Strings38StartL   0x3000
005429  000397  #constant  Strings39StartH   0x0
005430  000397  #constant  Strings39StartH   0x0
005431  000398  #constant  Strings39StartL   0x3200
005432  000398  #constant  Strings39StartL   0x3200
005433  000399  #constant  Strings40StartH   0x0
005434  000399  #constant  Strings40StartH   0x0
005435  000400  #constant  Strings40StartL   0x3400
005436  000400  #constant  Strings40StartL   0x3400
005437  000401  #constant  Strings41StartH   0x0
005438  000401  #constant  Strings41StartH   0x0
005439  000402  #constant  Strings41StartL   0x3600
005440  000402  #constant  Strings41StartL   0x3600
005441  000403  #constant  Strings42StartH   0x0
005442  000403  #constant  Strings42StartH   0x0
005443  000404  #constant  Strings42StartL   0x3800
005444  000404  #constant  Strings42StartL   0x3800
005445  000405  #constant  Strings43StartH   0x0
005446  000405  #constant  Strings43StartH   0x0
005447  000406  #constant  Strings43StartL   0x3A00
005448  000406  #constant  Strings43StartL   0x3A00
005449  000407  #constant  Strings44StartH   0x0
005450  000407  #constant  Strings44StartH   0x0
005451  000408  #constant  Strings44StartL   0x3C00
005452  000408  #constant  Strings44StartL   0x3C00
005453  000409  #constant  Strings45StartH   0x0
005454  000409  #constant  Strings45StartH   0x0
005455  000410  #constant  Strings45StartL   0x3E00
005456  000410  #constant  Strings45StartL   0x3E00
005457  000411  #constant  Strings51StartH   0x0
005458  000411  #constant  Strings51StartH   0x0
005459  000412  #constant  Strings51StartL   0x4000
005460  000412  #constant  Strings51StartL   0x4000
005461  000413  #constant  Strings52StartH   0x0
005462  000413  #constant  Strings52StartH   0x0
005463  000414  #constant  Strings52StartL   0x4200
005464  000414  #constant  Strings52StartL   0x4200
005465  000415  #constant  Strings17StartH   0x0
005466  000415  #constant  Strings17StartH   0x0
005467  000416  #constant  Strings17StartL   0x4400
005468  000416  #constant  Strings17StartL   0x4400
005469  000417  #constant  Strings18StartH   0x0
005470  000417  #constant  Strings18StartH   0x0
005471  000418  #constant  Strings18StartL   0x4600
005472  000418  #constant  Strings18StartL   0x4600
005473  000419  #constant  Strings19StartH   0x0
005474  000419  #constant  Strings19StartH   0x0
005475  000420  #constant  Strings19StartL   0x4800
005476  000420  #constant  Strings19StartL   0x4800
005477  000421  #constant  Strings29StartH   0x0
005478  000421  #constant  Strings29StartH   0x0
005479  000422  #constant  Strings29StartL   0x4A00
005480  000422  #constant  Strings29StartL   0x4A00
005481  000423  #constant  Strings30StartH   0x0
005482  000423  #constant  Strings30StartH   0x0
005483  000424  #constant  Strings30StartL   0x4C00
005484  000424  #constant  Strings30StartL   0x4C00
005485  000425  #constant  Strings31StartH   0x0
005486  000425  #constant  Strings31StartH   0x0
005487  000426  #constant  Strings31StartL   0x4E00
005488  000426  #constant  Strings31StartL   0x4E00
005489  000427  #constant  Strings32StartH   0x0
005490  000427  #constant  Strings32StartH   0x0
005491  000428  #constant  Strings32StartL   0x5000
005492  000428  #constant  Strings32StartL   0x5000
005493  000429  #constant  Strings49StartH   0x0
005494  000429  #constant  Strings49StartH   0x0
005495  000430  #constant  Strings49StartL   0x5200
005496  000430  #constant  Strings49StartL   0x5200
005497  000431  #constant  Strings50StartH   0x0
005498  000431  #constant  Strings50StartH   0x0
005499  000432  #constant  Strings50StartL   0x5400
005500  000432  #constant  Strings50StartL   0x5400
005501  000433  #constant  Strings13StartH   0x0
005502  000433  #constant  Strings13StartH   0x0
005503  000434  #constant  Strings13StartL   0x5600
005504  000434  #constant  Strings13StartL   0x5600
005505  000435  #constant  Strings46StartH   0x0
005506  000435  #constant  Strings46StartH   0x0
005507  000436  #constant  Strings46StartL   0x5800
005508  000436  #constant  Strings46StartL   0x5800
005509  000437  #constant  Strings47StartH   0x0
005510  000437  #constant  Strings47StartH   0x0
005511  000438  #constant  Strings47StartL   0x5A00
005512  000438  #constant  Strings47StartL   0x5A00
005513  000439  #constant  Strings48StartH   0x0
005514  000439  #constant  Strings48StartH   0x0
005515  000440  #constant  Strings48StartL   0x5C00
005516  000440  #constant  Strings48StartL   0x5C00
005517  000441  #constant  Strings53StartH   0x0
005518  000441  #constant  Strings53StartH   0x0
005519  000442  #constant  Strings53StartL   0x5E00
005520  000442  #constant  Strings53StartL   0x5E00
005521  000443  #IFNOT EXISTS NOGLOBALS
005522  000444  var hndl ;
005523  000445  #ENDIF
005524  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005525  000013  #inherit "CLPrintStrings.inc"
005526  000013  #inherit "CLPrintStrings.inc"
005527  000001  func PrintStrings(var ID, var *msgid, var String)
005528  000002      var StringID, i, ch, offs32[2], res32[2];
005529  000003      StringID := oStringss[1+ID] ;
005530  000004      if (String)
005531  000005          stringsCV[ID] := -1 ;
005532  000006      else
005533  000007          stringsCV[ID] := msgid ;
005534  000008      endif
005535  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005536  000010      txt_FontID(hFonts[ID]) ;
005537  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005538  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005539  000013        
005540  000014      if (*(StringID + Ofs_String_Transparent))
005541  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005542  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005543  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005544  000018      else
005545  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005546  000020          gfx_Clipping(ON) ;
005547  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005548  000022          gfx_Clipping(OFF) ;
005549  000023        
005550  000024      endif
005551  000025        
005552  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005553  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005554  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005555  000029        
005556  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005557  000031        
005558  000032      if (String)
005559  000033          i := 0 ;
005560  000034          ch := msgid[i++] ;
005561  000035          while (ch != 0)
005562  000036              putch(ch) ;
005563  000037              ch := msgid[i++] ;
005564  000038          wend
005565  000039      else
005566  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005567  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005568  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005569  000043          uadd_3232(res32,res32,offs32) ;
005570  000044          file_Seek(hstrings, res32[1], res32[0]);
005571  000045          repeat
005572  000046              if (*(StringID + Ofs_String_Ansi))
005573  000047                  ch := file_GetC(hstrings) ;
005574  000048              else
005575  000049                  ch := file_GetW(hstrings) ;
005576  000050              endif
005577  000051              putch(ch) ;
005578  000052          until (ch == 0) ;
005579  000053      endif
005580  000054        
005581  000055  endfunc
005582  000056        
005583  000014        
005584  000015  #constant IPDatasize 22
005585  000015  #constant IPDatasize 22
005586  000016        
005587  000017  #CONST
005588  000021  #END
005589  000022        
005590  000023  #CONST
005591  000130  #END
005592  000131        
005593  000556  #END
5594  2662
5595  2663
5596  2664
5597  2665
5598  2666
5599  2667
5600  2668
5601  2669
5602  266A
5603  266B
5604  266C
5605  266D
5606  266E
5607  266F
5608  2670
5609  2671
5610  2672
5611  2673
5612  2674
5613  2675
5614  2676
5615  2677
5616  2678
5617  2679
5618  267A
5619  267B
5620  267C
5621  267D
5622  267E
5623  267F
5624  2680
5625  2681
5626  2682
5627  2683
5628  2684
5629  2685
5630  2686
5631  2687
5632  2688
5633  2689
5634  268A
5635  268B
5636  268C
5637  268D
5638  268E
5639  268F
5640  2690
5641  2691
5642  2692
5643  2693
5644  2694
5645  2695
5646  2696
5647  2697
5648  2698
5649  2699
5650  269A
5651  269B
5652  269C
5653  269D
5654  269E
5655  269F
5656  26A0
5657  26A1
5658  26A2
5659  26A3
5660  26A4
5661  26A5
5662  26A6
5663  26A7
5664  26A8
5665  26A9
5666  26AA
5667  26AB
5668  26AC
5669  26AD
5670  26AE
5671  26AF
5672  26B0
5673  26B1
5674  26B2
5675  26B3
5676  26B4
5677  26B5
5678  26B6
5679  26B7
5680  26B8
5681  26B9
5682  26BA
5683  26BB
5684  26BC
5685  26BD
5686  26BE
5687  26BF
5688  26C0
5689  26C1
5690  26C2
5691  26C3
5692  26C4
5693  26C5
5694  26C6
5695  26C7
5696  26C8
5697  26C9
5698  26CA
5699  26CB
5700  26CC
5701  26CD
5702  26CE
5703  26CF
5704  26D0
5705  26D1
5706  26D2
5707  26D3
5708  26D4
5709  26D5
5710  26D6
5711  26D7
5712  26D8
5713  26D9
5714  26DA
5715  26DB
5716  26DC
5717  26DD
5718  26DE
5719  26DF
5720  26E0
5721  26E1
5722  26E2
5723  26E3
5724  26E4
5725  26E5
5726  26E6
5727  26E7
5728  26E8
5729  26E9
5730  26EA
5731  26EB
5732  26EC
5733  26ED
5734  26EE
5735  26EF
5736  26F0
5737  26F1
5738  26F2
5739  26F3
5740  26F4
5741  26F5
5742  26F6
5743  26F7
5744  26F8
5745  26F9
5746  26FA
5747  26FB
5748  26FC
5749  26FD
5750  26FE
5751  26FF
5752  2700
5753  2701
5754  2702
5755  2703
5756  2704
5757  2705
5758  2706
5759  2707
5760  2708
5761  2709
5762  270A
5763  270B
5764  270C
5765  270D
5766  270E
5767  270F
5768  2710
5769  2711
5770  2712
5771  2713
5772  2714
5773  2715
5774  2716
5775  2717
5776  2718
5777  2719
5778  271A
5779  271B
5780  271C
5781  271D
5782  271E
5783  271F
5784  2720
5785  2721
5786  2722
5787  2723
5788  2724
5789  2725
5790  2726
5791  2727
5792  2728
5793  2729
5794  272A
5795  272B
5796  272C
5797  272D
5798  272E
5799  272F
5800  2730
5801  2731
5802  2732
5803  2733
5804  2734
5805  2735
5806  2736
5807  2737
5808  2738
5809  2739
5810  273A
5811  273B
5812  273C
5813  273D
5814  273E
5815  273F
5816  2740
5817  2741
5818  2742
5819  2743
5820  2744
5821  2745
5822  2746
5823  2747
5824  2748
5825  2749
5826  274A
5827  274B
5828  274C
5829  274D
5830  274E
5831  274F
5832  2750
5833  2751
5834  2752
5835  2753
5836  2754
5837  2755
5838  2756
5839  2757
5840  2758
5841  2759
5842  275A
5843  275B
5844  275C
5845  275D
5846  275E
5847  275F
5848  2760
5849  2761
5850  2762
5851  2763
5852  2764
5853  2765
5854  2766
5855  2767
5856  2768
5857  2769
5858  276A
5859  276B
5860  276C
5861  276D
5862  276E
5863  276F
5864  2770
5865  2771
5866  2772
5867  2773
5868  2774
5869  2775
5870  2776
5871  2777
5872  2778
5873  2779
5874  277A
5875  277B
5876  277C
5877  277D
5878  277E
5879  277F
5880  2780
5881  2781
5882  2782
5883  2783
5884  2784
5885  2785
5886  2786
5887  2787
5888  2788
5889  2789
5890  278A
5891  278B
5892  278C
5893  278D
5894  278E
5895  278F
5896  2790
5897  2791
5898  2792
5899  2793
5900  2794
5901  2795
5902  2796
5903  2797
5904  2798
5905  2799
5906  279A
5907  279B
5908  279C
5909  279D
5910  279E
5911  279F
5912  27A0
5913  27A1
5914  27A2
5915  27A3
5916  27A4
5917  27A5
5918  27A6
5919  27A7
5920  27A8
5921  27A9
5922  27AA
5923  27AB
5924  27AC
5925  27AD
5926  27AE
5927  27AF
5928  27B0
5929  27B1
5930  27B2
5931  27B3
5932  27B4
5933  27B5
5934  27B6
5935  27B7
5936  27B8
5937  27B9
5938  27BA
5939  27BB
5940  27BC
5941  27BD
5942  27BE
5943  27BF
5944  27C0
5945  27C1
5946  27C2
5947  27C3
5948  27C4
5949  27C5
5950  27C6
5951  27C7
5952  27C8
5953  27C9
5954  27CA
5955  27CB
5956  27CC
5957  27CD
5958  27CE
5959  27CF
5960  27D0
5961  27D1
5962  27D2
5963  27D3
5964  27D4
5965  27D5
5966  27D6
5967  27D7
5968  27D8
5969  27D9
5970  27DA
5971  27DB
5972  27DC
5973  27DD
5974  27DE
5975  27DF
5976  27E0
5977  27E1
5978  27E2
5979  27E3
5980  27E4
5981  27E5
5982  27E6
5983  27E7
5984  27E8
5985  27E9
5986  27EA
5987  27EB
5988  27EC
5989  27ED
5990  27EE
5991  27EF
5992  27F0
5993  27F1
5994  27F2
5995  27F3
5996  27F4
5997  27F5
5998  27F6
5999  27F7
6000  27F8
6001  27F9
6002  27FA
6003  27FB
6004  27FC
6005  27FD
6006  27FE
6007  27FF
6008  2800
6009  2801
6010  2802
6011  2803
6012  2804
6013  2805
6014  2806
6015  2807
6016  2808
6017  2809
6018  280A
6019  280B
6020  280C
6021  280D
6022  280E
6023  280F
6024  2810
6025  2811
6026  2812
6027  2813
6028  2814
6029  2815
6030  2816
6031  2817
6032  2818
6033  2819
6034  281A
6035  281B
6036  281C
6037  281D
6038  281E
6039  281F
6040  2820
6041  2821
6042  2822
6043  2823
6044  2824
6045  2825
6046  2826
6047  2827
6048  2828
6049  2829
6050  282A
6051  282B
6052  282C
6053  282D
6054  282E
6055  282F
6056  2830
6057  2831
6058  2832
6059  2833
6060  2834
6061  2835
6062  2836
6063  2837
6064  2838
6065  2839
6066  283A
6067  283B
6068  283C
6069  283D
6070  283E
6071  283F
6072  2840
6073  2841
6074  2842
6075  2843
6076  2844
6077  2845
6078  2846
6079  2847
6080  2848
6081  2849
6082  284A
6083  284B
6084  284C
6085  284D
6086  284E
6087  284F
6088  2850
6089  2851
6090  2852
6091  2853
6092  2854
6093  2855
6094  2856
6095  2857
6096  2858
6097  2859
6098  285A
6099  285B
6100  285C
6101  285D
6102  285E
6103  285F
6104  2860
6105  2861
6106  2862
6107  2863
6108  2864
6109  2865
6110  2866
6111  2867
6112  2868
6113  2869
6114  286A
6115  286B
6116  286C
6117  286D
6118  286E
6119  286F
6120  2870
6121  2871
6122  2872
6123  2873
6124  2874
6125  2875
6126  2876
6127  2877
6128  2878
6129  2879
6130  287A
6131  287B
6132  287C
6133  287D
6134  287E
6135  287F
6136  2880
6137  2881
6138  2882
6139  2883
6140  2884
6141  2885
6142  2886
6143  2887
6144  2888
6145  2889
6146  288A
6147  288B
6148  288C
6149  288D
6150  288E
6151  288F
6152  2890
6153  2891
6154  2892
6155  2893
6156  2894
6157  2895
6158  2896
6159  2897
6160  2898
6161  2899
6162  289A
6163  289B
6164  289C
6165  289D
6166  289E
6167  289F
6168  28A0
6169  28A1
6170  28A2
6171  28A3
6172  28A4
6173  28A5
6174  28A6
6175  28A7
6176  28A8
6177  28A9
6178  28AA
6179  28AB
6180  28AC
6181  28AD
6182  28AE
6183  28AF
6184  28B0
6185  28B1
6186  28B2
6187  28B3
6188  28B4
6189  28B5
6190  28B6
6191  28B7
6192  28B8
6193  28B9
6194  28BA
6195  28BB
6196  28BC
6197  28BD
6198  28BE
6199  28BF
6200  28C0
6201  28C1
6202  28C2
6203  28C3
6204  28C4
6205  28C5
6206  28C6
6207  28C7
6208  28C8
6209  28C9
6210  28CA
6211  28CB
6212  28CC
6213  28CD
6214  28CE
6215  28CF
6216  28D0
6217  28D1
6218  28D2
6219  28D3
6220  28D4
6221  28D5
6222  28D6
6223  28D7
6224  28D8
6225  28D9
6226  28DA
6227  28DB
6228  28DC
6229  28DD
6230  28DE
6231  28DF
6232  28E0
6233  28E1
6234  28E2
6235  28E3
6236  28E4
6237  28E5
6238  28E6
6239  28E7
6240  28E8
6241  28E9
6242  28EA
6243  28EB
6244  28EC
6245  28ED
6246  28EE
6247  28EF
6248  28F0
6249  28F1
6250  28F2
6251  28F3
6252  28F4
6253  28F5
6254  28F6
6255  28F7
6256  28F8
6257  28F9
6258  28FA
6259  28FB
6260  28FC
6261  28FD
6262  28FE
6263  28FF
6264  2900
6265  2901
6266  2902
6267  2903
6268  2904
6269  2905
6270  2906
6271  2907
6272  2908
6273  2909
6274  290A
6275  290B
6276  290C
6277  290D
6278  290E
6279  290F
6280  2910
6281  2911
6282  2912
6283  2913
6284  2914
6285  2915
6286  2916
6287  2917
6288  2918
6289  2919
6290  291A
6291  291B
6292  291C
6293  291D
6294  291E
6295  291F
6296  2920
6297  2921
6298  2922
6299  2923
6300  2924
6301  2925
6302  2926
6303  2927
6304  2928
6305  2929
6306  292A
6307  292B
6308  292C
6309  292D
6310  292E
6311  292F
6312  2930
6313  2931
6314  2932
6315  2933
6316  2934
6317  2935
6318  2936
6319  2937
6320  2938
6321  2939
6322  293A
6323  293B
6324  293C
6325  293D
6326  293E
6327  293F
6328  2940
6329  2941
6330  2942
6331  2943
6332  2944
6333  2945
6334  2946
6335  2947
6336  2948
6337  2949
6338  294A
6339  294B
6340  294C
6341  294D
6342  294E
6343  294F
6344  2950
6345  2951
6346  2952
6347  2953
6348  2954
6349  2955
6350  2956
6351  2957
6352  2958
6353  2959
6354  295A
6355  295B
6356  295C
6357  295D
6358  295E
6359  295F
6360  2960
6361  2961
6362  2962
6363  2963
6364  2964
6365  2965
6366  2966
6367  2967
6368  2968
6369  2969
6370  296A
6371  296B
6372  296C
6373  296D
6374  296E
6375  296F
6376  2970
6377  2971
6378  2972
6379  2973
6380  2974
6381  2975
6382  2976
6383  2977
6384  2978
6385  2979
6386  297A
6387  297B
6388  297C
6389  297D
6390  297E
6391  297F
6392  2980
6393  2981
6394  2982
6395  2983
6396  2984
6397  2985
6398  2986
6399  2987
6400  2988
6401  2989
6402  298A
6403  298B
6404  298C
6405  298D
6406  298E
6407  298F
6408  2990
6409  2991
6410  2992
6411  2993
6412  2994
6413  2995
6414  2996
6415  2997
6416  2998
6417  2999
6418  299A
6419  299B
6420  299C
6421  299D
6422  299E
6423  299F
6424  29A0
6425  29A1
6426  29A2
6427  29A3
6428  29A4
6429  29A5
6430  29A6
6431  29A7
6432  29A8
6433  29A9
6434  29AA
6435  29AB
6436  29AC
6437  29AD
6438  29AE
6439  29AF
6440  29B0
6441  29B1
6442  29B2
6443  29B3
6444  29B4
6445  29B5
6446  29B6
6447  29B7
6448  29B8
6449  29B9
6450  29BA
6451  29BB
6452  29BC
6453  29BD
6454  29BE
6455  29BF
6456  29C0
6457  29C1
6458  29C2
6459  29C3
6460  29C4
6461  29C5
6462  29C6
6463  29C7
6464  29C8
6465  29C9
6466  29CA
6467  29CB
6468  29CC
6469  29CD
6470  29CE
6471  29CF
6472  29D0
6473  29D1
6474  29D2
6475  29D3
6476  29D4
6477  29D5
6478  29D6
6479  29D7
6480  29D8
6481  29D9
6482  29DA
6483  29DB
6484  29DC
6485  29DD
6486  29DE
6487  29DF
6488  29E0
6489  29E1
6490  29E2
6491  29E3
6492  29E4
6493  29E5
6494  29E6
6495  29E7
6496  29E8
6497  29E9
6498  29EA
6499  29EB
6500  29EC
6501  29ED
6502  29EE
6503  29EF
6504  29F0
6505  29F1
6506  29F2
6507  29F3
6508  29F4
6509  29F5
6510  29F6
6511  29F7
6512  29F8
6513  29F9
6514  29FA
6515  29FB
6516  29FC
6517  29FD
6518  29FE
6519  29FF
6520  2A00
6521  2A01
6522  2A02
6523  2A03
6524  2A04
6525  2A05
6526  2A06
6527  2A07
6528  2A08
6529  2A09
6530  2A0A
6531  2A0B
6532  2A0C
6533  2A0D
6534  2A0E
6535  2A0F
6536  2A10
6537  2A11
6538  2A12
6539  2A13
6540  2A14
6541  2A15
6542  2A16
6543  2A17
6544  2A18
6545  2A19
6546  2A1A
6547  2A1B
6548  2A1C
6549  2A1D
6550  2A1E
6551  2A1F
6552  2A20
6553  2A21
6554  2A22
6555  2A23
6556  2A24
6557  2A25
6558  2A26
6559  2A27
6560  2A28
6561  2A29
6562  2A2A
6563  2A2B
6564  2A2C
6565  2A2D
6566  2A2E
6567  2A2F
6568  2A30
6569  2A31
6570  2A32
6571  2A33
6572  2A34
6573  2A35
6574  2A36
6575  2A37
6576  2A38
6577  2A39
6578  2A3A
6579  2A3B
6580  2A3C
6581  2A3D
6582  2A3E
6583  2A3F
6584  2A40
6585  2A41
6586  2A42
6587  2A43
6588  2A44
6589  2A45
6590  2A46
6591  2A47
6592  2A48
6593  2A49
6594  2A4A
6595  2A4B
6596  2A4C
6597  2A4D
6598  2A4E
6599  2A4F
6600  2A50
6601  2A51
6602  2A52
6603  2A53
6604  2A54
6605  2A55
6606  2A56
6607  2A57
6608  2A58
6609  2A59
6610  2A5A
6611  2A5B
6612  2A5C
6613  2A5D
6614  2A5E
6615  2A5F
6616  2A60
6617  2A61
6618  2A62
6619  2A63
6620  2A64
6621  2A65
6622  2A66
6623  2A67
6624  2A68
6625  2A69
6626  2A6A
6627  2A6B
6628  2A6C
6629  2A6D
6630  2A6E
6631  2A6F
6632  2A70
6633  2A71
6634  2A72
6635  2A73
6636  2A74
6637  2A75
6638  2A76
6639  2A77
6640  2A78
6641  2A79
6642  2A7A
6643  2A7B
6644  2A7C
6645  2A7D
6646  2A7E
6647  2A7F
6648  2A80
6649  2A81
6650  2A82
6651  2A83
6652  2A84
6653  2A85
6654  2A86
6655  2A87
6656  2A88
6657  2A89
6658  2A8A
6659  2A8B
6660  2A8C
6661  2A8D
6662  2A8E
6663  2A8F
6664  2A90
6665  2A91
6666  2A92
6667  2A93
6668  2A94
6669  2A95
6670  2A96
6671  2A97
6672  2A98
6673  2A99
6674  2A9A
6675  2A9B
6676  2A9C
6677  2A9D
6678  2A9E
6679  2A9F
6680  2AA0
6681  2AA1
6682  2AA2
6683  2AA3
6684  2AA4
6685  2AA5
6686  2AA6
6687  2AA7
6688  2AA8
6689  2AA9
6690  2AAA
6691  2AAB
6692  2AAC
6693  2AAD
6694  2AAE
6695  2AAF
6696  2AB0
6697  2AB1
6698  2AB2
6699  2AB3
6700  2AB4
6701  2AB5
6702  2AB6
6703  2AB7
6704  2AB8
6705  2AB9
6706  2ABA
6707  2ABB
6708  2ABC
6709  2ABD
6710  2ABE
6711  2ABF
6712  2AC0
6713  2AC1
6714  2AC2
6715  2AC3
6716  2AC4
6717  2AC5
6718  2AC6
6719  2AC7
6720  2AC8
6721  2AC9
6722  2ACA
6723  2ACB
6724  2ACC
6725  2ACD
6726  2ACE
6727  2ACF
6728  2AD0
6729  2AD1
6730  2AD2
6731  2AD3
6732  2AD4
6733  2AD5
6734  2AD6
6735  2AD7
6736  2AD8
6737  2AD9
6738  2ADA
6739  2ADB
6740  2ADC
6741  2ADD
6742  2ADE
6743  2ADF
6744  2AE0
6745  2AE1
6746  2AE2
6747  2AE3
6748  2AE4
6749  2AE5
6750  2AE6
6751  2AE7
6752  2AE8
6753  2AE9
6754  2AEA
6755  2AEB
6756  2AEC
6757  2AED
6758  2AEE
6759  2AEF
6760  2AF0
6761  2AF1
6762  2AF2
6763  2AF3
6764  2AF4
6765  2AF5
6766  2AF6
6767  2AF7
6768  2AF8
6769  2AF9
6770  2AFA
6771  2AFB
6772  2AFC
6773  2AFD
6774  2AFE
6775  2AFF
6776  2B00
6777  2B01
6778  2B02
6779  2B03
6780  2B04
6781  2B05
6782  2B06
6783  2B07
6784  2B08
6785  2B09
6786  2B0A
6787  2B0B
6788  2B0C
6789  2B0D
6790  2B0E
6791  2B0F
6792  2B10
6793  2B11
6794  2B12
6795  2B13
6796  2B14
6797  2B15
6798  2B16
6799  2B17
6800  2B18
6801  2B19
6802  2B1A
6803  2B1B
6804  2B1C
6805  2B1D
6806  2B1E
6807  2B1F
6808  2B20
6809  2B21
6810  2B22
6811  2B23
6812  2B24
6813  2B25
6814  2B26
6815  2B27
6816  2B28
6817  2B29
6818  2B2A
6819  2B2B
6820  2B2C
6821  2B2D
6822  2B2E
6823  2B2F
6824  2B30
6825  2B31
6826  2B32
6827  2B33
6828  2B34
6829  2B35
6830  2B36
6831  2B37
6832  2B38
6833  2B39
6834  2B3A
6835  2B3B
6836  2B3C
6837  2B3D
6838  2B3E
6839  2B3F
6840  2B40
6841  2B41
6842  2B42
6843  2B43
6844  2B44
6845  2B45
6846  2B46
6847  2B47
6848  2B48
6849  2B49
6850  2B4A
6851  2B4B
6852  2B4C
6853  2B4D
6854  2B4E
6855  2B4F
6856  2B50
6857  2B51
6858  2B52
6859  2B53
6860  2B54
6861  2B55
6862  2B56
6863  2B57
6864  2B58
6865  2B59
6866  2B5A
6867  2B5B
6868  2B5C
6869  2B5D
6870  2B5E
6871  2B5F
6872  2B60
6873  2B61
6874  2B62
6875  2B63
6876  2B64
6877  2B65
6878  2B66
6879  2B67
6880  2B68
6881  2B69
6882  2B6A
6883  2B6B
6884  2B6C
6885  2B6D
6886  2B6E
6887  2B6F
6888  2B70
6889  2B71
6890  2B72
6891  2B73
6892  2B74
6893  2B75
6894  2B76
6895  2B77
6896  2B78
6897  2B79
6898  2B7A
6899  2B7B
6900  2B7C
6901  2B7D
6902  2B7E
6903  2B7F
6904  2B80
6905  2B81
6906  2B82
6907  2B83
6908  2B84
6909  2B85
6910  2B86
6911  2B87
6912  2B88
6913  2B89
6914  2B8A
6915  2B8B
6916  2B8C
6917  2B8D
6918  2B8E
6919  2B8F
6920  2B90
6921  2B91
6922  2B92
6923  2B93
6924  2B94
6925  2B95
6926  2B96
6927  2B97
6928  2B98
6929  2B99
6930  2B9A
6931  2B9B
6932  2B9C
6933  2B9D
6934  2B9E
6935  2B9F
6936  2BA0
6937  2BA1
6938  2BA2
6939  2BA3
6940  2BA4
6941  2BA5
6942  2BA6
6943  2BA7
6944  2BA8
6945  2BA9
6946  2BAA
6947  2BAB
6948  2BAC
6949  2BAD
6950  2BAE
6951  2BAF
6952  2BB0
6953  2BB1
6954  2BB2
6955  2BB3
6956  2BB4
6957  2BB5
6958  2BB6
6959  2BB7
6960  2BB8
6961  2BB9
6962  2BBA
6963  2BBB
6964  2BBC
6965  2BBD
6966  2BBE
6967  2BBF
6968  2BC0
6969  2BC1
6970  2BC2
6971  2BC3
6972  2BC4
6973  2BC5
6974  2BC6
6975  2BC7
6976  2BC8
6977  2BC9
6978  2BCA
6979  2BCB
6980  2BCC
6981  2BCD
6982  2BCE
6983  2BCF
6984  2BD0
6985  2BD1
6986  2BD2
6987  2BD3
6988  2BD4
6989  2BD5
6990  2BD6
6991  2BD7
6992  2BD8
6993  2BD9
6994  2BDA
6995  2BDB
6996  2BDC
6997  2BDD
6998  2BDE
6999  2BDF
7000  2BE0
7001  2BE1
7002  2BE2
7003  2BE3
7004  2BE4
7005  2BE5
7006  2BE6
7007  2BE7
7008  2BE8
7009  2BE9
7010  2BEA
7011  2BEB
7012  2BEC
7013  2BED
7014  2BEE
7015  2BEF
7016  2BF0
7017  2BF1
7018  2BF2
7019  2BF3
7020  2BF4
7021  2BF5
7022  2BF6
7023  2BF7
7024  2BF8
7025  2BF9
7026  2BFA
7027  2BFB
7028  2BFC
7029  2BFD
7030  2BFE
7031  2BFF
7032  2C00
7033  2C01
7034  2C02
7035  2C03
7036  2C04
7037  2C05
7038  2C06
7039  2C07
7040  2C08
7041  2C09
7042  2C0A
7043  2C0B
7044  2C0C
7045  2C0D
7046  2C0E
7047  2C0F
7048  2C10
7049  2C11
7050  2C12
7051  2C13
7052  2C14
7053  2C15
7054  2C16
7055  2C17
7056  2C18
7057  2C19
7058  2C1A
7059  2C1B
7060  2C1C
7061  2C1D
7062  2C1E
7063  2C1F
7064  2C20
7065  2C21
7066  2C22
7067  2C23
7068  2C24
7069  2C25
7070  2C26
7071  2C27
7072  2C28
7073  2C29
7074  2C2A
7075  2C2B
7076  2C2C
7077  2C2D
7078  2C2E
7079  2C2F
7080  2C30
7081  2C31
7082  2C32
7083  2C33
7084  2C34
7085  2C35
7086  2C36
7087  2C37
7088  2C38
7089  2C39
7090  2C3A
7091  2C3B
7092  2C3C
7093  2C3D
7094  2C3E
7095  2C3F
7096  2C40
7097  2C41
7098  2C42
7099  2C43
7100  2C44
7101  2C45
7102  2C46
7103  2C47
7104  2C48
7105  2C49
7106  2C4A
7107  2C4B
7108  2C4C
7109  2C4D
7110  2C4E
7111  2C4F
7112  2C50
7113  2C51
7114  2C52
7115  2C53
7116  2C54
7117  2C55
7118  2C56
7119  2C57
7120  2C58
7121  2C59
7122  2C5A
7123  2C5B
7124  2C5C
7125  2C5D
7126  2C5E
7127  2C5F
7128  2C60
7129  2C61
7130  2C62
7131  2C63
7132  2C64
7133  2C65
7134  2C66
7135  2C67
7136  2C68
7137  2C69
7138  2C6A
7139  2C6B
7140  2C6C
7141  2C6D
7142  2C6E
7143  2C6F
7144  2C70
7145  2C71
7146  2C72
7147  2C73
7148  2C74
7149  2C75
7150  2C76
7151  2C77
7152  2C78
7153  2C79
7154  2C7A
7155  2C7B
7156  2C7C
7157  2C7D
7158  2C7E
7159  2C7F
7160  2C80
7161  2C81
7162  2C82
7163  2C83
7164  2C84
7165  2C85
7166  2C86
7167  2C87
7168  2C88
7169  2C89
7170  2C8A
7171  2C8B
7172  2C8C
7173  2C8D
7174  2C8E
7175  2C8F
7176  2C90
7177  2C91
7178  2C92
7179  2C93
7180  2C94
7181  2C95
7182  2C96
7183  2C97
7184  2C98
7185  2C99
7186  2C9A
7187  2C9B
7188  2C9C
7189  2C9D
7190  2C9E
7191  2C9F
7192  2CA0
7193  2CA1
7194  2CA2
7195  2CA3
7196  2CA4
7197  2CA5
7198  2CA6
7199  2CA7
7200  2CA8
7201  2CA9
7202  2CAA
7203  2CAB
7204  2CAC
7205  2CAD
7206  2CAE
7207  2CAF
7208  2CB0
7209  2CB1
7210  2CB2
7211  2CB3
7212  2CB4
7213  2CB5
7214  2CB6
7215  2CB7
7216  2CB8
7217  2CB9
7218  2CBA
7219  2CBB
7220  2CBC
7221  2CBD
7222  2CBE
7223  2CBF
7224  2CC0
7225  2CC1
7226  2CC2
7227  2CC3
7228  2CC4
7229  2CC5
7230  2CC6
7231  2CC7
7232  2CC8
7233  2CC9
7234  2CCA
7235  2CCB
7236  2CCC
7237  2CCD
7238  2CCE
7239  2CCF
7240  2CD0
7241  2CD1
7242  2CD2
7243  2CD3
7244  2CD4
7245  2CD5
7246  2CD6
7247  2CD7
7248  2CD8
7249  2CD9
7250  2CDA
7251  2CDB
7252  2CDC
7253  2CDD
7254  2CDE
7255  2CDF
7256  2CE0
7257  2CE1
7258  2CE2
7259  2CE3
7260  2CE4
7261  2CE5
7262  2CE6
7263  2CE7
7264  2CE8
7265  2CE9
7266  2CEA
7267  2CEB
7268  2CEC
7269  2CED
7270  2CEE
7271  2CEF
7272  2CF0
7273  2CF1
7274  2CF2
7275  2CF3
7276  2CF4
7277  2CF5
7278  2CF6
7279  2CF7
7280  2CF8
7281  2CF9
7282  2CFA
7283  2CFB
7284  2CFC
7285  2CFD
7286  2CFE
7287  2CFF
7288  2D00
7289  2D01
7290  2D02
7291  2D03
7292  2D04
7293  2D05
7294  2D06
7295  2D07
7296  2D08
7297  2D09
7298  2D0A
7299  2D0B
7300  2D0C
7301  2D0D
7302  2D0E
7303  2D0F
7304  2D10
7305  2D11
7306  2D12
7307  2D13
7308  2D14
7309  2D15
7310  2D16
7311  2D17
7312  2D18
7313  2D19
7314  2D1A
7315  2D1B
7316  2D1C
7317  2D1D
7318  2D1E
7319  2D1F
7320  2D20
7321  2D21
7322  2D22
7323  2D23
7324  2D24
7325  2D25
7326  2D26
7327  2D27
7328  2D28
7329  2D29
7330  2D2A
7331  2D2B
7332  2D2C
7333  2D2D
7334  2D2E
7335  2D2F
7336  2D30
7337  2D31
7338  2D32
7339  2D33
7340  2D34
7341  2D35
7342  2D36
7343  2D37
7344  2D38
7345  2D39
7346  2D3A
7347  2D3B
7348  2D3C
7349  2D3D
7350  2D3E
7351  2D3F
7352  2D40
7353  2D41
7354  2D42
7355  2D43
7356  2D44
7357  2D45
7358  2D46
7359  2D47
7360  2D48
7361  2D49
7362  2D4A
7363  2D4B
7364  2D4C
7365  2D4D
7366  2D4E
7367  2D4F
7368  2D50
7369  2D51
7370  2D52
7371  2D53
7372  2D54
7373  2D55
7374  2D56
7375  2D57
7376  2D58
7377  2D59
7378  2D5A
7379  2D5B
7380  2D5C
7381  2D5D
7382  2D5E
7383  2D5F
7384  2D60
7385  2D61
7386  2D62
7387  2D63
7388  2D64
7389  2D65
7390  2D66
7391  2D67
7392  2D68
7393  2D69
7394  2D6A
7395  2D6B
7396  2D6C
7397  2D6D
7398  2D6E
7399  2D6F
7400  2D70
7401  2D71
7402  2D72
7403  2D73
7404  2D74
7405  2D75
7406  2D76
7407  2D77
7408  2D78
7409  2D79
7410  2D7A
7411  2D7B
7412  2D7C
7413  2D7D
7414  2D7E
7415  2D7F
7416  2D80
7417  2D81
7418  2D82
7419  2D83
7420  2D84
7421  2D85
7422  2D86
7423  2D87
7424  2D88
7425  2D89
7426  2D8A
7427  2D8B
7428  2D8C
7429  2D8D
7430  2D8E
7431  2D8F
7432  2D90
7433  2D91
7434  2D92
7435  2D93
7436  2D94
7437  2D95
7438  2D96
7439  2D97
7440  2D98
7441  2D99
7442  2D9A
7443  2D9B
7444  2D9C
7445  2D9D
7446  2D9E
7447  2D9F
7448  2DA0
7449  2DA1
7450  2DA2
7451  2DA3
7452  2DA4
7453  2DA5
7454  2DA6
7455  2DA7
7456  2DA8
7457  2DA9
7458  2DAA
7459  2DAB
7460  2DAC
7461  2DAD
7462  2DAE
7463  2DAF
7464  2DB0
7465  2DB1
7466  2DB2
7467  2DB3
7468  2DB4
7469  2DB5
7470  2DB6
7471  2DB7
7472  2DB8
7473  2DB9
7474  2DBA
7475  2DBB
7476  2DBC
7477  2DBD
7478  2DBE
7479  2DBF
7480  2DC0
7481  2DC1
7482  2DC2
7483  2DC3
7484  2DC4
7485  2DC5
7486  2DC6
7487  2DC7
7488  2DC8
7489  2DC9
7490  2DCA
7491  2DCB
7492  2DCC
7493  2DCD
7494  2DCE
7495  2DCF
7496  2DD0
7497  2DD1
7498  2DD2
7499  2DD3
7500  2DD4
7501  2DD5
7502  2DD6
7503  2DD7
7504  2DD8
7505  2DD9
7506  2DDA
7507  2DDB
7508  2DDC
7509  2DDD
7510  2DDE
7511  2DDF
7512  2DE0
7513  2DE1
7514  2DE2
7515  2DE3
7516  2DE4
7517  2DE5
7518  2DE6
7519  2DE7
7520  2DE8
7521  2DE9
7522  2DEA
7523  2DEB
7524  2DEC
7525  2DED
7526  2DEE
7527  2DEF
7528  2DF0
7529  2DF1
7530  2DF2
7531  2DF3
7532  2DF4
7533  2DF5
7534  2DF6
7535  2DF7
7536  2DF8
7537  2DF9
7538  2DFA
7539  2DFB
7540  2DFC
7541  2DFD
7542  2DFE
7543  2DFF
7544  2E00
7545  2E01
7546  2E02
7547  2E03
7548  2E04
7549  2E05
7550  2E06
7551  2E07
7552  2E08
7553  2E09
7554  2E0A
7555  2E0B
7556  2E0C
7557  2E0D
7558  2E0E
7559  2E0F
7560  2E10
7561  2E11
7562  2E12
7563  2E13
7564  2E14
7565  2E15
7566  2E16
7567  2E17
7568  2E18
7569  2E19
7570  2E1A
7571  2E1B
7572  2E1C
7573  2E1D
7574  2E1E
7575  2E1F
7576  2E20
7577  2E21
7578  2E22
7579  2E23
7580  2E24
7581  2E25
7582  2E26
7583  2E27
7584  2E28
7585  2E29
7586  2E2A
7587  2E2B
7588  2E2C
7589  2E2D
7590  2E2E
7591  2E2F
7592  2E30
7593  2E31
7594  2E32
7595  2E33
7596  2E34
7597  2E35
7598  2E36
7599  2E37
7600  2E38
7601  2E39
7602  2E3A
7603  2E3B
7604  2E3C
7605  2E3D
7606  2E3E
7607  2E3F
7608  2E40
7609  2E41
7610  2E42
7611  2E43
7612  2E44
7613  2E45
7614  2E46
7615  2E47
7616  2E48
7617  2E49
7618  2E4A
7619  2E4B
7620  2E4C
7621  2E4D
7622  2E4E
7623  2E4F
7624  2E50
7625  2E51
7626  2E52
7627  2E53
7628  2E54
7629  2E55
7630  2E56
7631  2E57
7632  2E58
7633  2E59
7634  2E5A
7635  2E5B
7636  2E5C
7637  2E5D
7638  2E5E
7639  2E5F
7640  2E60
7641  2E61
7642  2E62
7643  2E63
7644  2E64
7645  2E65
7646  2E66
7647  2E67
7648  2E68
7649  2E69
7650  2E6A
7651  2E6B
7652  2E6C
7653  2E6D
7654  2E6E
7655  2E6F
7656  2E70
7657  2E71
7658  2E72
7659  2E73
7660  2E74
7661  2E75
7662  2E76
7663  2E77
7664  2E78
7665  2E79
7666  2E7A
7667  2E7B
7668  2E7C
7669  2E7D
7670  2E7E
7671  2E7F
7672  2E80
7673  2E81
7674  2E82
7675  2E83
7676  2E84
7677  2E85
7678  2E86
7679  2E87
7680  2E88
7681  2E89
7682  2E8A
7683  2E8B
7684  2E8C
7685  2E8D
7686  2E8E
7687  2E8F
7688  2E90
7689  2E91
7690  2E92
7691  2E93
7692  2E94
7693  2E95
7694  2E96
7695  2E97
7696  2E98
7697  2E99
7698  2E9A
7699  2E9B
7700  2E9C
7701  2E9D
7702  2E9E
7703  2E9F
7704  2EA0
7705  2EA1
7706  2EA2
7707  2EA3
7708  2EA4
7709  2EA5
7710  2EA6
7711  2EA7
7712  2EA8
7713  2EA9
7714  2EAA
7715  2EAB
7716  2EAC
7717  2EAD
7718  2EAE
7719  2EAF
7720  2EB0
7721  2EB1
7722  2EB2
7723  2EB3
7724  2EB4
7725  2EB5
7726  2EB6
7727  2EB7
7728  2EB8
7729  2EB9
7730  2EBA
7731  2EBB
7732  2EBC
7733  2EBD
7734  2EBE
7735  2EBF
7736  2EC0
7737  2EC1
7738  2EC2
7739  2EC3
7740  2EC4
7741  2EC5
7742  2EC6
7743  2EC7
7744  2EC8
7745  2EC9
7746  2ECA
7747  2ECB
7748  2ECC
7749  2ECD
7750  2ECE
7751  2ECF
7752  2ED0
7753  2ED1
7754  2ED2
7755  2ED3
7756  2ED4
7757  2ED5
7758  2ED6
7759  2ED7
7760  2ED8
7761  2ED9
7762  2EDA
7763  2EDB
7764  2EDC
7765  2EDD
7766  2EDE
7767  2EDF
7768  2EE0
7769  2EE1
7770  2EE2
7771  2EE3
7772  2EE4
7773  2EE5
7774  2EE6
7775  2EE7
7776  2EE8
7777  2EE9
7778  2EEA
7779  2EEB
7780  2EEC
7781  2EED
7782  2EEE
7783  2EEF
7784  2EF0
7785  2EF1
7786  2EF2
7787  2EF3
7788  2EF4
7789  2EF5
7790  2EF6
7791  2EF7
7792  2EF8
7793  2EF9
7794  2EFA
7795  2EFB
7796  2EFC
7797  2EFD
7798  2EFE
7799  2EFF
7800  2F00
7801  2F01
7802  2F02
7803  2F03
7804  2F04
7805  2F05
7806  2F06
7807  2F07
7808  2F08
7809  2F09
7810  2F0A
7811  2F0B
7812  2F0C
7813  2F0D
7814  2F0E
7815  2F0F
7816  2F10
7817  2F11
7818  2F12
7819  2F13
7820  2F14
7821  2F15
7822  2F16
7823  2F17
7824  2F18
7825  2F19
7826  2F1A
7827  2F1B
7828  2F1C
7829  2F1D
7830  2F1E
7831  2F1F
7832  2F20
7833  2F21
7834  2F22
7835  2F23
7836  2F24
7837  2F25
7838  2F26
7839  2F27
7840  2F28
7841  2F29
7842  2F2A
7843  2F2B
7844  2F2C
7845  2F2D
7846  2F2E
7847  2F2F
7848  2F30
7849  2F31
7850  2F32
7851  2F33
7852  2F34
7853  2F35
7854  2F36
7855  2F37
7856  2F38
7857  2F39
7858  2F3A
7859  2F3B
7860  2F3C
7861  2F3D
7862  2F3E
7863  2F3F
7864  2F40
7865  2F41
7866  2F42
7867  2F43
7868  2F44
7869  2F45
7870  2F46
7871  2F47
7872  2F48
7873  2F49
7874  2F4A
7875  2F4B
7876  2F4C
7877  2F4D
7878  2F4E
7879  2F4F
7880  2F50
7881  2F51
7882  2F52
7883  2F53
7884  2F54
7885  2F55
7886  2F56
7887  2F57
7888  2F58
7889  2F59
7890  2F5A
7891  2F5B
7892  2F5C
7893  2F5D
7894  2F5E
7895  2F5F
7896  2F60
7897  2F61
7898  2F62
7899  2F63
7900  2F64
7901  2F65
7902  2F66
7903  2F67
7904  2F68
7905  2F69
7906  2F6A
7907  2F6B
7908  2F6C
7909  2F6D
7910  2F6E
7911  2F6F
7912  2F70
7913  2F71
7914  2F72
7915  2F73
7916  2F74
7917  2F75
7918  2F76
7919  2F77
7920  2F78
7921  2F79
7922  2F7A
7923  2F7B
7924  2F7C
7925  2F7D
7926  2F7E
7927  2F7F
7928  2F80
7929  2F81
7930  2F82
7931  2F83
7932  2F84
7933  2F85
7934  2F86
7935  2F87
7936  2F88
7937  2F89
7938  2F8A
7939  2F8B
7940  2F8C
7941  2F8D
7942  2F8E
7943  2F8F
7944  2F90
7945  2F91
7946  2F92
7947  2F93
7948  2F94
7949  2F95
7950  2F96
7951  2F97
7952  2F98
7953  2F99
7954  2F9A
7955  2F9B
7956  2F9C
7957  2F9D
7958  2F9E
7959  2F9F
7960  2FA0
7961  2FA1
7962  2FA2
7963  2FA3
7964  2FA4
7965  2FA5
7966  2FA6
7967  2FA7
7968  2FA8
7969  2FA9
7970  2FAA
7971  2FAB
7972  2FAC
7973  2FAD
7974  2FAE
7975  2FAF
7976  2FB0
7977  2FB1
7978  2FB2
7979  2FB3
7980  2FB4
7981  2FB5
7982  2FB6
7983  2FB7
7984  2FB8
7985  2FB9
7986  2FBA
7987  2FBB
7988  2FBC
7989  2FBD
7990  2FBE
7991  2FBF
7992  2FC0
7993  2FC1
7994  2FC2
7995  2FC3
7996  2FC4
7997  2FC5
7998  2FC6
7999  2FC7
8000  2FC8
8001  2FC9
8002  2FCA
8003  2FCB
8004  2FCC
8005  2FCD
8006  2FCE
8007  2FCF
8008  2FD0
8009  2FD1
8010  2FD2
8011  2FD3
8012  2FD4
8013  2FD5
8014  2FD6
8015  2FD7
8016  2FD8
8017  2FD9
8018  2FDA
8019  2FDB
8020  2FDC
8021  2FDD
8022  2FDE
8023  2FDF
8024  2FE0
8025  2FE1
8026  2FE2
8027  2FE3
8028  2FE4
8029  2FE5
8030  2FE6
8031  2FE7
8032  2FE8
8033  2FE9
8034  2FEA
8035  2FEB
8036  2FEC
8037  2FED
8038  2FEE
8039  2FEF
8040  2FF0
8041  2FF1
8042  2FF2
8043  2FF3
8044  2FF4
8045  2FF5
8046  2FF6
8047  2FF7
8048  2FF8
8049  2FF9
8050  2FFA
8051  2FFB
8052  2FFC
8053  2FFD
8054  2FFE
8055  2FFF
8056  3000
8057  3001
8058  3002
8059  3003
8060  3004
8061  3005
8062  3006
8063  3007
8064  3008
8065  3009
8066  300A
8067  300B
8068  300C
8069  300D
8070  300E
8071  300F
8072  3010
8073  3011
8074  3012
8075  3013
8076  3014
8077  3015
8078  3016
8079  3017
8080  3018
8081  3019
8082  301A
8083  301B
8084  301C
8085  301D
8086  301E
8087  301F
8088  3020
8089  3021
8090  3022
8091  3023
8092  3024
8093  3025
8094  3026
8095  3027
8096  3028
8097  3029
8098  302A
8099  302B
8100  302C
8101  302D
8102  302E
8103  302F
8104  3030
8105  3031
8106  3032
8107  3033
8108  3034
8109  3035
8110  3036
8111  3037
8112  3038
8113  3039
8114  303A
8115  303B
8116  303C
8117  303D
8118  303E
8119  303F
8120  3040
8121  3041
8122  3042
8123  3043
8124  3044
8125  3045
8126  3046
8127  3047
8128  3048
8129  3049
8130  304A
8131  304B
8132  304C
8133  304D
8134  304E
8135  304F
8136  3050
8137  3051
8138  3052
8139  3053
8140  3054
8141  3055
8142  3056
8143  3057
8144  3058
8145  3059
8146  305A
8147  305B
8148  305C
8149  305D
8150  305E
8151  305F
8152  3060
8153  3061
8154  3062
8155  3063
8156  3064
8157  3065
8158  3066
8159  3067
8160  3068
8161  3069
8162  306A
8163  306B
8164  306C
8165  306D
8166  306E
8167  306F
8168  3070
8169  3071
8170  3072
8171  3073
8172  3074
8173  3075
8174  3076
8175  3077
8176  3078
8177  3079
8178  307A
8179  307B
8180  307C
8181  307D
8182  307E
8183  307F
8184  3080
8185  3081
8186  3082
8187  3083
8188  3084
8189  3085
8190  3086
8191  3087
8192  3088
8193  3089
8194  308A
8195  308B
8196  308C
8197  308D
8198  308E
8199  308F
8200  3090
8201  3091
8202  3092
8203  3093
8204  3094
8205  3095
8206  3096
8207  3097
8208  3098
8209  3099
8210  309A
8211  309B
8212  309C
8213  309D
8214  309E
8215  309F
8216  30A0
8217  30A1
8218  30A2
8219  30A3
8220  30A4
8221  30A5
8222  30A6
8223  30A7
8224  30A8
8225  30A9
8226  30AA
8227  30AB
8228  30AC
8229  30AD
8230  30AE
8231  30AF
8232  30B0
8233  30B1
8234  30B2
8235  30B3
8236  30B4
8237  30B5
8238  30B6
8239  30B7
8240  30B8
8241  30B9
8242  30BA
8243  30BB
8244  30BC
8245  30BD
8246  30BE
8247  30BF
8248  30C0
8249  30C1
8250  30C2
8251  30C3
8252  30C4
8253  30C5
8254  30C6
8255  30C7
8256  30C8
8257  30C9
8258  30CA
8259  30CB
8260  30CC
8261  30CD
8262  30CE
8263  30CF
8264  30D0
8265  30D1
8266  30D2
8267  30D3
8268  30D4
8269  30D5
8270  30D6
8271  30D7
8272  30D8
8273  30D9
8274  30DA
8275  30DB
8276  30DC
8277  30DD
8278  30DE
8279  30DF
8280  30E0
8281  30E1
8282  30E2
8283  30E3
8284  30E4
8285  30E5
8286  30E6
8287  30E7
8288  30E8
8289  30E9
8290  30EA
8291  30EB
8292  30EC
8293  30ED
8294  30EE
8295  30EF
8296  30F0
8297  30F1
8298  30F2
8299  30F3
8300  30F4
8301  30F5
8302  30F6
8303  30F7
8304  30F8
8305  30F9
8306  30FA
8307  30FB
8308  30FC
8309  30FD
8310  30FE
8311  30FF
8312  3100
8313  3101
8314  3102
8315  3103
8316  3104
8317  3105
8318  3106
8319  3107
8320  3108
8321  3109
8322  310A
8323  310B
8324  310C
8325  310D
8326  310E
8327  310F
8328  3110
8329  3111
8330  3112
8331  3113
8332  3114
8333  3115
8334  3116
8335  3117
8336  3118
8337  3119
8338  311A
8339  311B
8340  311C
8341  311D
8342  311E
8343  311F
8344  3120
8345  3121
8346  3122
8347  3123
8348  3124
8349  3125
8350  3126
8351  3127
8352  3128
8353  3129
8354  312A
8355  312B
8356  312C
8357  312D
8358  312E
8359  312F
8360  3130
8361  3131
8362  3132
8363  3133
8364  3134
8365  3135
8366  3136
8367  3137
8368  3138
8369  3139
8370  313A
8371  313B
8372  313C
8373  313D
8374  313E
8375  313F
8376  3140
8377  3141
8378  3142
8379  3143
8380  3144
8381  3145
8382  3146
8383  3147
8384  3148
8385  3149
8386  314A
8387  314B
8388  314C
8389  314D
8390  314E
8391  314F
8392  3150
8393  3151
8394  3152
8395  3153
8396  3154
8397  3155
8398  3156
8399  3157
8400  3158
8401  3159
8402  315A
8403  315B
8404  315C
8405  315D
8406  315E
8407  315F
8408  3160
8409  3161
8410  3162
8411  3163
8412  3164
8413  3165
8414  3166
8415  3167
8416  3168
8417  3169
8418  316A
8419  316B
8420  316C
8421  316D
8422  316E
8423  316F
8424  3170
8425  3171
8426  3172
8427  3173
8428  3174
8429  3175
8430  3176
8431  3177
8432  3178
8433  3179
8434  317A
8435  317B
8436  317C
8437  317D
8438  317E
8439  317F
8440  3180
8441  3181
8442  3182
8443  3183
8444  3184
8445  3185
8446  3186
8447  3187
8448  3188
8449  3189
8450  318A
8451  318B
8452  318C
8453  318D
8454  318E
8455  318F
8456  3190
8457  3191
8458  3192
8459  3193
8460  3194
8461  3195
8462  3196
8463  3197
8464  3198
8465  3199
8466  319A
8467  319B
8468  319C
8469  319D
8470  319E
8471  319F
8472  31A0
8473  31A1
8474  31A2
8475  31A3
8476  31A4
8477  31A5
8478  31A6
8479  31A7
8480  31A8
8481  31A9
8482  31AA
8483  31AB
8484  31AC
8485  31AD
8486  31AE
8487  31AF
8488  31B0
8489  31B1
8490  31B2
8491  31B3
8492  31B4
8493  31B5
8494  31B6
8495  31B7
8496  31B8
8497  31B9
8498  31BA
8499  31BB
8500  31BC
8501  31BD
8502  31BE
8503  31BF
8504  31C0
8505  31C1
8506  31C2
8507  31C3
8508  31C4
8509  31C5
8510  31C6
8511  31C7
8512  31C8
8513  31C9
8514  31CA
8515  31CB
8516  31CC
8517  31CD
8518  31CE
8519  31CF
8520  31D0
8521  31D1
8522  31D2
8523  31D3
8524  31D4
8525  31D5
8526  31D6
8527  31D7
8528  31D8
8529  31D9
8530  31DA
8531  31DB
8532  31DC
8533  31DD
8534  31DE
8535  31DF
8536  31E0
8537  31E1
8538  31E2
8539  31E3
8540  31E4
8541  31E5
8542  31E6
8543  31E7
8544  31E8
8545  31E9
8546  31EA
8547  31EB
8548  31EC
8549  31ED
8550  31EE
8551  31EF
8552  31F0
8553  31F1
8554  31F2
8555  31F3
8556  31F4
8557  31F5
8558  31F6
8559  31F7
8560  31F8
8561  31F9
8562  31FA
8563  31FB
8564  31FC
8565  31FD
8566  31FE
8567  31FF
8568  3200
8569  3201
8570  3202
8571  3203
8572  3204
8573  3205
8574  3206
8575  3207
8576  3208
8577  3209
8578  320A
8579  320B
8580  320C
8581  320D
8582  320E
8583  320F
8584  3210
8585  3211
8586  3212
8587  3213
8588  3214
8589  3215
8590  3216
8591  3217
8592  3218
8593  3219
8594  321A
8595  321B
8596  321C
8597  321D
8598  321E
8599  321F
8600  3220
8601  3221
8602  3222
8603  3223
8604  3224
8605  3225
8606  3226
8607  3227
8608  3228
8609  3229
8610  322A
8611  322B
8612  322C
8613  322D
8614  322E
8615  322F
8616  3230
8617  3231
8618  3232
8619  3233
8620  3234
8621  3235
8622  3236
8623  3237
8624  3238
8625  3239
8626  323A
8627  323B
8628  323C
8629  323D
8630  323E
8631  323F
8632  3240
8633  3241
8634  3242
8635  3243
8636  3244
8637  3245
8638  3246
8639  3247
8640  3248
8641  3249
8642  324A
8643  324B
8644  324C
8645  324D
8646  324E
8647  324F
8648  3250
8649  3251
8650  3252
8651  3253
8652  3254
8653  3255
8654  3256
8655  3257
8656  3258
8657  3259
8658  325A
8659  325B
8660  325C
8661  325D
8662  325E
8663  325F
8664  3260
8665  3261
8666  3262
8667  3263
8668  3264
8669  3265
8670  3266
8671  3267
8672  3268
8673  3269
8674  326A
8675  326B
8676  326C
8677  326D
8678  326E
8679  326F
8680  3270
8681  3271
8682  3272
8683  3273
8684  3274
8685  3275
8686  3276
8687  3277
8688  3278
8689  3279
8690  327A
8691  327B
8692  327C
8693  327D
8694  327E
8695  327F
8696  3280
8697  3281
8698  3282
8699  3283
8700  3284
8701  3285
8702  3286
8703  3287
8704  3288
8705  3289
8706  328A
8707  328B
8708  328C
8709  328D
8710  328E
8711  328F
8712  3290
8713  3291
8714  3292
8715  3293
8716  3294
8717  3295
8718  3296
8719  3297
8720  3298
8721  3299
8722  329A
8723  329B
8724  329C
8725  329D
8726  329E
8727  329F
8728  32A0
8729  32A1
8730  32A2
8731  32A3
8732  32A4
8733  32A5
8734  32A6
8735  32A7
8736  32A8
8737  32A9
8738  32AA
8739  32AB
8740  32AC
8741  32AD
8742  32AE
8743  32AF
8744  32B0
8745  32B1
8746  32B2
8747  32B3
8748  32B4
8749  32B5
8750  32B6
8751  32B7
8752  32B8
8753  32B9
8754  32BA
8755  32BB
8756  32BC
8757  32BD
8758  32BE
8759  32BF
8760  32C0
8761  32C1
8762  32C2
8763  32C3
8764  32C4
8765  32C5
8766  32C6
8767  32C7
8768  32C8
8769  32C9
8770  32CA
8771  32CB
8772  32CC
8773  32CD
8774  32CE
8775  32CF
8776  32D0
8777  32D1
8778  32D2
8779  32D3
8780  32D4
8781  32D5
8782  32D6
8783  32D7
8784  32D8
8785  32D9
8786  32DA
8787  32DB
8788  32DC
8789  32DD
8790  32DE
8791  32DF
8792  32E0
8793  32E1
8794  32E2
8795  32E3
8796  32E4
8797  32E5
8798  32E6
8799  32E7
8800  32E8
8801  32E9
8802  32EA
8803  32EB
8804  32EC
8805  32ED
8806  32EE
8807  32EF
8808  32F0
8809  32F1
8810  32F2
8811  32F3
8812  32F4
8813  32F5
8814  32F6
8815  32F7
8816  32F8
8817  32F9
8818  32FA
8819  32FB
8820  32FC
8821  32FD
8822  32FE
8823  32FF
8824  3300
8825  3301
8826  3302
8827  3303
8828  3304
8829  3305
8830  3306
8831  3307
8832  3308
8833  3309
8834  330A
8835  330B
8836  330C
8837  330D
8838  330E
8839  330F
8840  3310
8841  3311
8842  3312
8843  3313
8844  3314
8845  3315
8846  3316
8847  3317
8848  3318
8849  3319
8850  331A
8851  331B
8852  331C
8853  331D
8854  331E
8855  331F
8856  3320
8857  3321
8858  3322
8859  3323
8860  3324
8861  3325
8862  3326
8863  3327
8864  3328
8865  3329
8866  332A
8867  332B
8868  332C
8869  332D
8870  332E
8871  332F
8872  3330
8873  3331
8874  3332
8875  3333
8876  3334
8877  3335
8878  3336
8879  3337
8880  3338
8881  3339
8882  333A
8883  333B
8884  333C
8885  333D
8886  333E
8887  333F
8888  3340
8889  3341
8890  3342
8891  3343
8892  3344
8893  3345
8894  3346
8895  3347
8896  3348
8897  3349
8898  334A
8899  334B
8900  334C
8901  334D
8902  334E
8903  334F
8904  3350
8905  3351
8906  3352
8907  3353
8908  3354
8909  3355
8910  3356
8911  3357
8912  3358
8913  3359
8914  335A
8915  335B
8916  335C
8917  335D
8918  335E
8919  335F
8920  3360
8921  3361
8922  3362
8923  3363
8924  3364
8925  3365
8926  3366
8927  3367
8928  3368
8929  3369
8930  336A
8931  336B
8932  336C
8933  336D
8934  336E
8935  336F
8936  3370
8937  3371
8938  3372
8939  3373
8940  3374
8941  3375
8942  3376
8943  3377
8944  3378
8945  3379
8946  337A
8947  337B
8948  337C
8949  337D
8950  337E
8951  337F
8952  3380
8953  3381
8954  3382
8955  3383
8956  3384
8957  3385
8958  3386
8959  3387
8960  3388
8961  3389
8962  338A
8963  338B
8964  338C
8965  338D
8966  338E
8967  338F
8968  3390
8969  3391
8970  3392
8971  3393
8972  3394
8973  3395
8974  3396
8975  3397
8976  3398
8977  3399
8978  339A
8979  339B
8980  339C
8981  339D
8982  339E
8983  339F
8984  33A0
8985  33A1
8986  33A2
8987  33A3
8988  33A4
8989  33A5
8990  33A6
8991  33A7
8992  33A8
8993  33A9
8994  33AA
8995  33AB
8996  33AC
8997  33AD
8998  33AE
8999  33AF
9000  33B0
9001  33B1
9002  33B2
9003  33B3
9004  33B4
9005  33B5
9006  33B6
9007  33B7
9008  33B8
9009  33B9
9010  33BA
9011  33BB
9012  33BC
9013  33BD
9014  33BE
9015  33BF
9016  33C0
9017  33C1
9018  33C2
9019  33C3
9020  33C4
9021  33C5
9022  33C6
9023  33C7
9024  33C8
9025  33C9
9026  33CA
9027  33CB
9028  33CC
9029  33CD
9030  33CE
9031  33CF
9032  33D0
9033  33D1
9034  33D2
9035  33D3
9036  33D4
9037  33D5
9038  33D6
9039  33D7
9040  33D8
9041  33D9
9042  33DA
9043  33DB
9044  33DC
9045  33DD
9046  33DE
9047  33DF
9048  33E0
9049  33E1
9050  33E2
9051  33E3
9052  33E4
9053  33E5
9054  33E6
9055  33E7
9056  33E8
9057  33E9
9058  33EA
9059  33EB
9060  33EC
9061  33ED
9062  33EE
9063  33EF
9064  33F0
9065  33F1
9066  33F2
9067  33F3
9068  33F4
9069  33F5
9070  33F6
9071  33F7
9072  33F8
9073  33F9
9074  33FA
9075  33FB
9076  33FC
9077  33FD
9078  33FE
9079  33FF
9080  3400
9081  3401
9082  3402
9083  3403
9084  3404
9085  3405
9086  3406
9087  3407
9088  3408
9089  3409
9090  340A
9091  340B
9092  340C
9093  340D
9094  340E
9095  340F
9096  3410
9097  3411
9098  3412
9099  3413
9100  3414
9101  3415
9102  3416
9103  3417
9104  3418
9105  3419
9106  341A
9107  341B
9108  341C
9109  341D
9110  341E
9111  341F
9112  3420
9113  3421
9114  3422
9115  3423
9116  3424
9117  3425
9118  3426
9119  3427
9120  3428
9121  3429
9122  342A
9123  342B
9124  342C
9125  342D
9126  342E
9127  342F
9128  3430
9129  3431
9130  3432
9131  3433
9132  3434
9133  3435
9134  3436
9135  3437
9136  3438
9137  3439
9138  343A
9139  343B
9140  343C
9141  343D
9142  343E
9143  343F
9144  3440
9145  3441
9146  3442
9147  3443
9148  3444
9149  3445
9150  3446
9151  3447
9152  3448
9153  3449
9154  344A
9155  344B
9156  344C
9157  344D
9158  344E
9159  344F
9160  3450
9161  3451
9162  3452
9163  3453
9164  3454
9165  3455
9166  3456
9167  3457
9168  3458
9169  3459
9170  345A
9171  345B
9172  345C
9173  345D
9174  345E
9175  345F
9176  3460
9177  3461
9178  3462
9179  3463
9180  3464
9181  3465
9182  3466
9183  3467
9184  3468
9185  3469
9186  346A
9187  346B
9188  346C
9189  346D
9190  346E
9191  346F
9192  3470
9193  3471
9194  3472
9195  3473
9196  3474
9197  3475
9198  3476
9199  3477
9200  3478
9201  3479
9202  347A
9203  347B
9204  347C
9205  347D
9206  347E
9207  347F
9208  3480
9209  3481
9210  3482
9211  3483
9212  3484
9213  3485
9214  3486
9215  3487
9216  3488
9217  3489
9218  348A
9219  348B
9220  348C
9221  348D
9222  348E
9223  348F
9224  3490
9225  3491
9226  3492
9227  3493
9228  3494
9229  3495
9230  3496
9231  3497
9232  3498
9233  3499
9234  349A
9235  349B
9236  349C
9237  349D
9238  349E
9239  349F
9240  34A0
9241  34A1
9242  34A2
9243  34A3
9244  34A4
9245  34A5
9246  34A6
9247  34A7
9248  34A8
9249  34A9
9250  34AA
9251  34AB
9252  34AC
9253  34AD
9254  34AE
9255  34AF
9256  34B0
9257  34B1
9258  34B2
9259  34B3
9260  34B4
9261  34B5
9262  34B6
9263  34B7
9264  34B8
9265  34B9
9266  34BA
9267  34BB
9268  34BC
9269  34BD
9270  34BE
9271  34BF
9272  34C0
9273  34C1
9274  34C2
9275  34C3
9276  34C4
9277  34C5
9278  34C6
9279  34C7
9280  34C8
9281  34C9
9282  34CA
9283  34CB
9284  34CC
9285  34CD
9286  34CE
9287  34CF
9288  34D0
9289  34D1
9290  34D2
9291  34D3
9292  34D4
9293  34D5
9294  34D6
9295  34D7
9296  34D8
9297  34D9
9298  34DA
9299  34DB
9300  34DC
9301  34DD
9302  34DE
9303  34DF
9304  34E0
9305  34E1
9306  34E2
9307  34E3
9308  34E4
9309  34E5
9310  34E6
9311  34E7
9312  34E8
9313  34E9
9314  34EA
9315  34EB
9316  34EC
9317  34ED
9318  34EE
9319  34EF
9320  34F0
9321  34F1
9322  34F2
9323  34F3
9324  34F4
9325  34F5
9326  34F6
9327  34F7
9328  34F8
9329  34F9
9330  34FA
9331  34FB
9332  34FC
9333  34FD
9334  34FE
9335  34FF
9336  3500
9337  3501
9338  3502
9339  3503
9340  3504
9341  3505
9342  3506
9343  3507
9344  3508
9345  3509
9346  350A
9347  350B
9348  350C
9349  350D
9350  350E
9351  350F
9352  3510
9353  3511
9354  3512
9355  3513
9356  3514
9357  3515
9358  3516
9359  3517
9360  3518
9361  3519
9362  351A
9363  351B
9364  351C
9365  351D
9366  351E
9367  351F
9368  3520
9369  3521
9370  3522
9371  3523
9372  3524
9373  3525
9374  3526
9375  3527
9376  3528
9377  3529
9378  352A
9379  352B
9380  352C
9381  352D
9382  352E
9383  352F
9384  3530
9385  3531
9386  3532
9387  3533
9388  3534
9389  3535
9390  3536
9391  3537
9392  3538
9393  3539
9394  353A
9395  353B
9396  353C
9397  353D
9398  353E
9399  353F
9400  3540
9401  3541
9402  3542
9403  3543
9404  3544
9405  3545
9406  3546
9407  3547
9408  3548
9409  3549
9410  354A
9411  354B
9412  354C
9413  354D
9414  354E
9415  354F
9416  3550
9417  3551
9418  3552
9419  3553
9420  3554
9421  3555
9422  3556
9423  3557
9424  3558
9425  3559
9426  355A
9427  355B
9428  355C
9429  355D
9430  355E
9431  355F
9432  3560
9433  3561
9434  3562
9435  3563
9436  3564
9437  3565
9438  3566
9439  3567
9440  3568
9441  3569
9442  356A
9443  356B
9444  356C
9445  356D
9446  356E
9447  356F
9448  3570
9449  3571
9450  3572
9451  3573
9452  3574
9453  3575
9454  3576
9455  3577
9456  3578
9457  3579
9458  357A
9459  357B
9460  357C
9461  357D
9462  357E
9463  357F
9464  3580
9465  3581
9466  3582
9467  3583
9468  3584
9469  3585
9470  3586
9471  3587
9472  3588
9473  3589
9474  358A
9475  358B
9476  358C
9477  358D
9478  358E
9479  358F
9480  3590
9481  3591
9482  3592
9483  3593
9484  3594
9485  3595
9486  3596
9487  3597
9488  3598
9489  3599
9490  359A
9491  359B
9492  359C
9493  359D
9494  359E
9495  359F
9496  35A0
9497  35A1
9498  35A2
9499  35A3
9500  35A4
9501  35A5
9502  35A6
9503  35A7
9504  35A8
9505  35A9
9506  35AA
9507  35AB
9508  35AC
9509  35AD
9510  35AE
9511  35AF
9512  35B0
9513  35B1
9514  35B2
9515  35B3
9516  35B4
9517  35B5
9518  35B6
9519  35B7
9520  35B8
9521  35B9
9522  35BA
9523  35BB
9524  35BC
9525  35BD
9526  35BE
9527  35BF
9528  35C0
9529  35C1
9530  35C2
9531  35C3
9532  35C4
9533  35C5
9534  35C6
9535  35C7
9536  35C8
9537  35C9
9538  35CA
9539  35CB
9540  35CC
9541  35CD
9542  35CE
9543  35CF
9544  35D0
9545  35D1
9546  35D2
9547  35D3
9548  35D4
9549  35D5
9550  35D6
9551  35D7
9552  35D8
9553  35D9
9554  35DA
9555  35DB
9556  35DC
9557  35DD
9558  35DE
9559  35DF
9560  35E0
9561  35E1
9562  35E2
9563  35E3
9564  35E4
9565  35E5
9566  35E6
9567  35E7
9568  35E8
9569  35E9
9570  35EA
9571  35EB
9572  35EC
9573  35ED
9574  35EE
9575  35EF
9576  35F0
9577  35F1
9578  35F2
9579  35F3
9580  35F4
9581  35F5
9582  35F6
9583  35F7
9584  35F8
9585  35F9
9586  35FA
9587  35FB
9588  35FC
9589  35FD
9590  35FE
9591  35FF
9592  3600
9593  3601
9594  3602
9595  3603
9596  3604
9597  3605
9598  3606
9599  3607
9600  3608
9601  3609
9602  360A
9603  360B
9604  360C
9605  360D
9606  360E
9607  360F
9608  3610
9609  3611
9610  3612
9611  3613
9612  3614
9613  3615
9614  3616
9615  3617
9616  3618
9617  3619
9618  361A
9619  361B
9620  361C
9621  361D
9622  361E
9623  361F
9624  3620
9625  3621
9626  3622
9627  3623
9628  3624
9629  3625
9630  3626
9631  3627
9632  3628
9633  3629
9634  362A
9635  362B
9636  362C
9637  362D
9638  362E
9639  362F
9640  3630
9641  3631
9642  3632
9643  3633
9644  3634
9645  3635
9646  3636
9647  3637
9648  3638
9649  3639
9650  363A
9651  363B
9652  363C
9653  363D
9654  363E
9655  363F
9656  3640
9657  3641
9658  3642
9659  3643
9660  3644
9661  3645
9662  3646
9663  3647
9664  3648
9665  3649
9666  364A
9667  364B
9668  364C
9669  364D
9670  364E
9671  364F
9672  3650
9673  3651
9674  3652
9675  3653
9676  3654
9677  3655
9678  3656
9679  3657
9680  3658
9681  3659
9682  365A
9683  365B
9684  365C
9685  365D
9686  365E
9687  365F
9688  3660
9689  3661
9690  3662
9691  3663
9692  3664
9693  3665
9694  3666
9695  3667
9696  3668
9697  3669
9698  366A
9699  366B
9700  366C
9701  366D
9702  366E
9703  366F
9704  3670
9705  3671
9706  3672
9707  3673
9708  3674
9709  3675
9710  3676
9711  3677
9712  3678
9713  3679
9714  367A
9715  367B
9716  367C
9717  367D
9718  367E
9719  367F
9720  3680
9721  3681
9722  3682
9723  3683
9724  3684
9725  3685
9726  3686
9727  3687
9728  3688
9729  3689
9730  368A
9731  368B
9732  368C
9733  368D
9734  368E
9735  368F
9736  3690
9737  3691
9738  3692
9739  3693
9740  3694
9741  3695
9742  3696
9743  3697
9744  3698
9745  3699
9746  369A
9747  369B
9748  369C
9749  369D
9750  369E
9751  369F
9752  36A0
9753  36A1
9754  36A2
9755  36A3
9756  36A4
9757  36A5
9758  36A6
9759  36A7
9760  36A8
9761  36A9
9762  36AA
9763  36AB
9764  36AC
9765  36AD
9766  36AE
9767  36AF
9768  36B0
9769  36B1
9770  36B2
9771  36B3
9772  36B4
9773  36B5
9774  36B6
9775  36B7
9776  36B8
9777  36B9
9778  36BA
9779  36BB
9780  36BC
9781  36BD
9782  36BE
9783  36BF
9784  36C0
9785  36C1
9786  36C2
9787  36C3
9788  36C4
9789  36C5
9790  36C6
9791  36C7
9792  36C8
9793  36C9
9794  36CA
9795  36CB
9796  36CC
9797  36CD
9798  36CE
9799  36CF
9800  36D0
9801  36D1
9802  36D2
9803  36D3
9804  36D4
9805  36D5
9806  36D6
9807  36D7
9808  36D8
9809  36D9
9810  36DA
9811  36DB
9812  36DC
9813  36DD
9814  36DE
9815  36DF
9816  36E0
9817  36E1
9818  36E2
9819  36E3
9820  36E4
9821  36E5
9822  36E6
9823  36E7
9824  36E8
9825  36E9
9826  36EA
9827  36EB
9828  36EC
9829  36ED
9830  36EE
9831  36EF
9832  36F0
9833  36F1
9834  36F2
9835  36F3
9836  36F4
9837  36F5
9838  36F6
9839  36F7
9840  36F8
9841  36F9
9842  36FA
9843  36FB
9844  36FC
9845  36FD
9846  36FE
9847  36FF
9848  3700
9849  3701
9850  3702
9851  3703
9852  3704
9853  3705
9854  3706
9855  3707
9856  3708
9857  3709
9858  370A
9859  370B
9860  370C
9861  370D
9862  370E
9863  370F
9864  3710
9865  3711
9866  3712
9867  3713
9868  3714
9869  3715
9870  3716
9871  3717
9872  3718
9873  3719
9874  371A
9875  371B
9876  371C
9877  371D
9878  371E
9879  371F
9880  3720
9881  3721
9882  3722
9883  3723
9884  3724
9885  3725
9886  3726
9887  3727
9888  3728
9889  3729
9890  372A
9891  372B
9892  372C
9893  372D
9894  372E
9895  372F
9896  3730
9897  3731
9898  3732
9899  3733
9900  3734
9901  3735
9902  3736
9903  3737
9904  3738
9905  3739
9906  373A
9907  373B
9908  373C
9909  373D
9910  373E
9911  373F
9912  3740
9913  3741
9914  3742
9915  3743
9916  3744
9917  3745
9918  3746
9919  3747
9920  3748
9921  3749
9922  374A
9923  374B
9924  374C
9925  374D
9926  374E
9927  374F
9928  3750
9929  3751
9930  3752
9931  3753
9932  3754
9933  3755
9934  3756
9935  3757
9936  3758
9937  3759
9938  375A
9939  375B
9940  375C
9941  375D
9942  375E
9943  375F
9944  3760
9945  3761
9946  3762
9947  3763
9948  3764
9949  3765
9950  3766
9951  3767
9952  3768
9953  3769
9954  376A
9955  376B
9956  376C
9957  376D
9958  376E
9959  376F
9960  3770
9961  3771
9962  3772
9963  3773
9964  3774
9965  3775
9966  3776
9967  3777
9968  3778
9969  3779
9970  377A
9971  377B
9972  377C
9973  377D
9974  377E
9975  377F
9976  3780
9977  3781
9978  3782
9979  3783
9980  3784
9981  3785
9982  3786
9983  3787
9984  3788
9985  3789
9986  378A
9987  378B
9988  378C
9989  378D
9990  378E
9991  378F
9992  3790
9993  3791
9994  3792
9995  3793
9996  3794
9997  3795
9998  3796
9999  3797
10000  3798
10001  3799
10002  379A
10003  379B
10004  379C
10005  379D
10006  379E
10007  379F
10008  37A0
10009  37A1
10010  37A2
10011  37A3
10012  37A4
10013  37A5
10014  37A6
10015  37A7
10016  37A8
10017  37A9
10018  37AA
10019  37AB
10020  37AC
10021  37AD
10022  37AE
10023  37AF
10024  37B0
10025  37B1
10026  37B2
10027  37B3
10028  37B4
10029  37B5
10030  37B6
10031  37B7
10032  37B8
10033  37B9
10034  37BA
10035  37BB
10036  37BC
10037  37BD
10038  37BE
10039  37BF
10040  37C0
10041  37C1
10042  37C2
10043  37C3
10044  37C4
10045  37C5
10046  37C6
10047  37C7
10048  37C8
10049  37C9
10050  37CA
10051  37CB
10052  37CC
10053  37CD
10054  37CE
10055  37CF
10056  37D0
10057  37D1
10058  37D2
10059  37D3
10060  37D4
10061  37D5
10062  37D6
10063  37D7
10064  37D8
10065  37D9
10066  37DA
10067  37DB
10068  37DC
10069  37DD
10070  37DE
10071  37DF
10072  37E0
10073  37E1
10074  37E2
10075  37E3
10076  37E4
10077  37E5
10078  37E6
10079  37E7
10080  37E8
10081  37E9
10082  37EA
10083  37EB
10084  37EC
10085  37ED
10086  37EE
10087  37EF
10088  37F0
10089  37F1
10090  37F2
10091  37F3
10092  37F4
10093  37F5
10094  37F6
10095  37F7
10096  37F8
10097  37F9
10098  37FA
10099  37FB
10100  37FC
10101  37FD
10102  37FE
10103  37FF
10104  3800
10105  3801
10106  3802
10107  3803
10108  3804
10109  3805
10110  3806
10111  3807
10112  3808
10113  3809
10114  380A
10115  380B
10116  380C
10117  380D
10118  380E
10119  380F
10120  3810
10121  3811
10122  3812
10123  3813
10124  3814
10125  3815
10126  3816
10127  3817
10128  3818
10129  3819
10130  381A
10131  381B
10132  381C
10133  381D
10134  381E
10135  381F
10136  3820
10137  3821
10138  3822
10139  3823
10140  3824
10141  3825
10142  3826
10143  3827
10144  3828
10145  3829
10146  382A
10147  382B
10148  382C
10149  382D
10150  382E
10151  382F
10152  3830
10153  3831
10154  3832
10155  3833
10156  3834
10157  3835
10158  3836
10159  3837
10160  3838
10161  3839
10162  383A
10163  383B
10164  383C
10165  383D
10166  383E
10167  383F
10168  3840
10169  3841
10170  3842
10171  3843
10172  3844
10173  3845
10174  3846
10175  3847
10176  3848
10177  3849
10178  384A
10179  384B
10180  384C
10181  384D
10182  384E
10183  384F
10184  3850
10185  3851
10186  3852
10187  3853
10188  3854
10189  3855
10190  3856
10191  3857
10192  3858
10193  3859
10194  385A
10195  385B
10196  385C
10197  385D
10198  385E
10199  385F
10200  3860
10201  3861
10202  3862
10203  3863
10204  3864
10205  3865
10206  3866
10207  3867
10208  3868
10209  3869
10210  386A
10211  386B
10212  386C
10213  386D
10214  386E
10215  386F
10216  3870
10217  3871
10218  3872
10219  3873
10220  3874
10221  3875
10222  3876
10223  3877
10224  3878
10225  3879
10226  387A
10227  387B
10228  387C
10229  387D
10230  387E
10231  387F
10232  3880
10233  3881
10234  3882
10235  3883
10236  3884
10237  3885
10238  3886
10239  3887
10240  3888
10241  3889
10242  388A
10243  388B
10244  388C
10245  388D
10246  388E
10247  388F
10248  3890
10249  3891
10250  3892
10251  3893
10252  3894
10253  3895
10254  3896
10255  3897
10256  3898
10257  3899
10258  389A
10259  389B
10260  389C
10261  389D
10262  389E
10263  389F
10264  38A0
10265  38A1
10266  38A2
10267  38A3
10268  38A4
10269  38A5
10270  38A6
10271  38A7
10272  38A8
10273  38A9
10274  38AA
10275  38AB
10276  38AC
10277  38AD
10278  38AE
10279  38AF
10280  38B0
10281  38B1
10282  38B2
10283  38B3
10284  38B4
10285  38B5
10286  38B6
10287  38B7
10288  38B8
10289  38B9
10290  38BA
10291  38BB
10292  38BC
10293  38BD
10294  38BE
10295  38BF
10296  38C0
10297  38C1
10298  38C2
10299  38C3
10300  38C4
10301  38C5
10302  38C6
10303  38C7
10304  38C8
10305  38C9
10306  38CA
10307  38CB
10308  38CC
10309  38CD
10310  38CE
10311  38CF
10312  38D0
10313  38D1
10314  38D2
10315  38D3
10316  38D4
10317  38D5
10318  38D6
10319  38D7
10320  38D8
10321  38D9
10322  38DA
10323  38DB
10324  38DC
10325  38DD
10326  38DE
10327  38DF
10328  38E0
10329  38E1
10330  38E2
10331  38E3
10332  38E4
10333  38E5
10334  38E6
10335  38E7
10336  38E8
10337  38E9
10338  38EA
10339  38EB
10340  38EC
10341  38ED
10342  38EE
10343  38EF
10344  38F0
10345  38F1
10346  38F2
10347  38F3
10348  38F4
10349  38F5
10350  38F6
10351  38F7
10352  38F8
10353  38F9
10354  38FA
10355  38FB
10356  38FC
10357  38FD
10358  38FE
10359  38FF
10360  3900
10361  3901
10362  3902
10363  3903
10364  3904
10365  3905
10366  3906
10367  3907
10368  3908
10369  3909
10370  390A
10371  390B
10372  390C
10373  390D
10374  390E
10375  390F
10376  3910
10377  3911
10378  3912
10379  3913
10380  3914
10381  3915
10382  3916
10383  3917
10384  3918
10385  3919
10386  391A
10387  391B
10388  391C
10389  391D
10390  391E
10391  391F
10392  3920
10393  3921
10394  3922
10395  3923
10396  3924
10397  3925
10398  3926
10399  3927
10400  3928
10401  3929
10402  392A
10403  392B
10404  392C
10405  392D
10406  392E
10407  392F
10408  3930
10409  3931
10410  3932
10411  3933
10412  3934
10413  3935
10414  3936
10415  3937
10416  3938
10417  3939
10418  393A
10419  393B
10420  393C
10421  393D
10422  393E
10423  393F
10424  3940
10425  3941
10426  3942
10427  3943
10428  3944
10429  3945
10430  3946
10431  3947
10432  3948
10433  3949
10434  394A
10435  394B
10436  394C
10437  394D
10438  394E
10439  394F
10440  3950
10441  3951
10442  3952
10443  3953
10444  3954
10445  3955
10446  3956
10447  3957
10448  3958
10449  3959
10450  395A
10451  395B
10452  395C
10453  395D
10454  395E
10455  395F
10456  3960
10457  3961
10458  3962
10459  3963
10460  3964
10461  3965
10462  3966
10463  3967
10464  3968
10465  3969
10466  396A
10467  396B
10468  396C
10469  396D
10470  396E
10471  396F
10472  3970
10473  3971
10474  3972
10475  3973
10476  3974
10477  3975
10478  3976
10479  3977
10480  3978
10481  3979
10482  397A
10483  397B
10484  397C
10485  397D
10486  397E
10487  397F
10488  3980
10489  3981
10490  3982
10491  3983
10492  3984
10493  3985
10494  3986
10495  3987
10496  3988
10497  3989
10498  398A
10499  398B
10500  398C
10501  398D
10502  398E
10503  398F
10504  3990
10505  3991
10506  3992
10507  3993
10508  3994
10509  3995
10510  3996
10511  3997
10512  3998
10513  3999
10514  399A
10515  399B
10516  399C
10517  399D
10518  399E
10519  399F
10520  39A0
10521  39A1
10522  39A2
10523  39A3
10524  39A4
10525  39A5
10526  39A6
10527  39A7
10528  39A8
10529  39A9
10530  39AA
10531  39AB
10532  39AC
10533  39AD
10534  39AE
10535  39AF
10536  39B0
10537  39B1
10538  39B2
10539  39B3
10540  39B4
10541  39B5
10542  39B6
10543  39B7
10544  39B8
10545  39B9
10546  39BA
10547  39BB
10548  39BC
10549  39BD
10550  39BE
10551  39BF
10552  39C0
10553  39C1
10554  39C2
10555  39C3
10556  39C4
10557  39C5
10558  39C6
10559  39C7
10560  39C8
10561  39C9
10562  39CA
10563  39CB
10564  39CC
10565  39CD
10566  39CE
10567  39CF
10568  39D0
10569  39D1
10570  39D2
10571  39D3
10572  39D4
10573  39D5
10574  39D6
10575  39D7
10576  39D8
10577  39D9
10578  39DA
10579  39DB
10580  39DC
10581  39DD
10582  39DE
10583  39DF
10584  39E0
10585  39E1
10586  39E2
10587  39E3
10588  39E4
10589  39E5
10590  39E6
10591  39E7
10592  39E8
10593  39E9
10594  39EA
10595  39EB
10596  39EC
10597  39ED
10598  39EE
10599  39EF
10600  39F0
10601  39F1
10602  39F2
10603  39F3
10604  39F4
10605  39F5
10606  39F6
10607  39F7
10608  39F8
10609  39F9
10610  39FA
10611  39FB
10612  39FC
10613  39FD
10614  39FE
10615  39FF
10616  3A00
10617  3A01
10618  3A02
10619  3A03
10620  3A04
10621  3A05
10622  3A06
10623  3A07
10624  3A08
10625  3A09
10626  3A0A
10627  3A0B
10628  3A0C
10629  3A0D
10630  3A0E
10631  3A0F
10632  3A10
10633  3A11
10634  3A12
10635  3A13
10636  3A14
10637  3A15
10638  3A16
10639  3A17
10640  3A18
10641  3A19
10642  3A1A
10643  3A1B
10644  3A1C
10645  3A1D
10646  3A1E
10647  3A1F
10648  3A20
10649  3A21
10650  3A22
10651  3A23
10652  3A24
10653  3A25
10654  3A26
10655  3A27
10656  3A28
10657  3A29
10658  3A2A
10659  3A2B
10660  3A2C
10661  3A2D
10662  3A2E
10663  3A2F
10664  3A30
10665  3A31
10666  3A32
10667  3A33
10668  3A34
10669  3A35
10670  3A36
10671  3A37
10672  3A38
10673  3A39
10674  3A3A
10675  3A3B
10676  3A3C
10677  3A3D
10678  3A3E
10679  3A3F
10680  3A40
10681  3A41
10682  3A42
10683  3A43
10684  3A44
10685  3A45
10686  3A46
10687  3A47
10688  3A48
10689  3A49
10690  3A4A
10691  3A4B
10692  3A4C
10693  3A4D
10694  3A4E
10695  3A4F
10696  3A50
10697  3A51
10698  3A52
10699  3A53
10700  3A54
10701  3A55
10702  3A56
10703  3A57
10704  3A58
10705  3A59
10706  3A5A
10707  3A5B
10708  3A5C
10709  3A5D
10710  3A5E
10711  3A5F
10712  3A60
10713  3A61
10714  3A62
10715  3A63
10716  3A64
10717  3A65
10718  3A66
10719  3A67
10720  3A68
10721  3A69
10722  3A6A
10723  3A6B
10724  3A6C
10725  3A6D
10726  3A6E
10727  3A6F
10728  3A70
10729  3A71
10730  3A72
10731  3A73
10732  3A74
10733  3A75
10734  3A76
10735  3A77
10736  3A78
10737  3A79
10738  3A7A
10739  3A7B
10740  3A7C
10741  3A7D
10742  3A7E
10743  3A7F
10744  3A80
10745  3A81
10746  3A82
10747  3A83
10748  3A84
10749  3A85
10750  3A86
10751  3A87
10752  3A88
10753  3A89
10754  3A8A
10755  3A8B
10756  3A8C
10757  3A8D
10758  3A8E
10759  3A8F
10760  3A90
10761  3A91
10762  3A92
10763  3A93
10764  3A94
10765  3A95
10766  3A96
10767  3A97
10768  3A98
10769  3A99
10770  3A9A
10771  3A9B
10772  3A9C
10773  3A9D
10774  3A9E
10775  3A9F
10776  3AA0
10777  3AA1
10778  3AA2
10779  3AA3
10780  3AA4
10781  3AA5
10782  3AA6
10783  3AA7
10784  3AA8
10785  3AA9
10786  3AAA
10787  3AAB
10788  3AAC
10789  3AAD
10790  3AAE
10791  3AAF
10792  3AB0
10793  3AB1
10794  3AB2
10795  3AB3
10796  3AB4
10797  3AB5
10798  3AB6
10799  3AB7
10800  3AB8
10801  3AB9
10802  3ABA
10803  3ABB
10804  3ABC
10805  3ABD
10806  3ABE
10807  3ABF
10808  3AC0
10809  3AC1
10810  3AC2
10811  3AC3
10812  3AC4
10813  3AC5
10814  3AC6
10815  3AC7
10816  3AC8
10817  3AC9
10818  3ACA
10819  3ACB
10820  3ACC
10821  3ACD
10822  3ACE
10823  3ACF
10824  3AD0
10825  3AD1
10826  3AD2
10827  3AD3
10828  3AD4
10829  3AD5
10830  3AD6
10831  3AD7
10832  3AD8
10833  3AD9
10834  3ADA
10835  3ADB
10836  3ADC
10837  3ADD
10838  3ADE
10839  3ADF
10840  3AE0
10841  3AE1
10842  3AE2
10843  3AE3
10844  3AE4
10845  3AE5
10846  3AE6
10847  3AE7
10848  3AE8
10849  3AE9
10850  3AEA
10851  3AEB
10852  3AEC
10853  3AED
10854  3AEE
10855  3AEF
10856  3AF0
10857  3AF1
10858  3AF2
10859  3AF3
10860  3AF4
10861  3AF5
10862  3AF6
10863  3AF7
10864  3AF8
10865  3AF9
10866  3AFA
10867  3AFB
10868  3AFC
10869  3AFD
10870  3AFE
10871  3AFF
10872  3B00
10873  3B01
10874  3B02
10875  3B03
10876  3B04
10877  3B05
10878  3B06
10879  3B07
10880  3B08
10881  3B09
10882  3B0A
10883  3B0B
10884  3B0C
10885  3B0D
10886  3B0E
10887  3B0F
10888  3B10
10889  3B11
10890  3B12
10891  3B13
10892  3B14
10893  3B15
10894  3B16
10895  3B17
10896  3B18
10897  3B19
10898  3B1A
10899  3B1B
10900  3B1C
10901  3B1D
10902  3B1E
10903  3B1F
10904  3B20
10905  3B21
10906  3B22
10907  3B23
10908  3B24
10909  3B25
10910  3B26
10911  3B27
10912  3B28
10913  3B29
10914  3B2A
10915  3B2B
10916  3B2C
10917  3B2D
10918  3B2E
10919  3B2F
10920  3B30
10921  3B31
10922  3B32
10923  3B33
10924  3B34
10925  3B35
10926  3B36
10927  3B37
10928  3B38
10929  3B39
10930  3B3A
10931  3B3B
10932  3B3C
10933  3B3D
10934  3B3E
10935  3B3F
10936  3B40
10937  3B41
10938  3B42
10939  3B43
10940  3B44
10941  3B45
10942  3B46
10943  3B47
10944  3B48
10945  3B49
10946  3B4A
10947  3B4B
10948  3B4C
10949  3B4D
10950  3B4E
10951  3B4F
10952  3B50
10953  3B51
10954  3B52
10955  3B53
10956  3B54
10957  3B55
10958  3B56
10959  3B57
10960  3B58
10961  3B59
10962  3B5A
10963  3B5B
10964  3B5C
10965  3B5D
10966  3B5E
10967  3B5F
10968  3B60
10969  3B61
10970  3B62
10971  3B63
10972  3B64
10973  3B65
10974  3B66
10975  3B67
10976  3B68
10977  3B69
10978  3B6A
10979  3B6B
10980  3B6C
10981  3B6D
10982  3B6E
10983  3B6F
10984  3B70
10985  3B71
10986  3B72
10987  3B73
10988  3B74
10989  3B75
10990  3B76
10991  3B77
10992  3B78
10993  3B79
10994  3B7A
10995  3B7B
10996  3B7C
10997  3B7D
10998  3B7E
10999  3B7F
11000  3B80
11001  3B81
11002  3B82
11003  3B83
11004  3B84
11005  3B85
11006  3B86
11007  3B87
11008  3B88
11009  3B89
11010  3B8A
11011  3B8B
11012  3B8C
11013  3B8D
11014  3B8E
11015  3B8F
11016  3B90
11017  3B91
11018  3B92
11019  3B93
11020  3B94
11021  3B95
11022  3B96
11023  3B97
11024  3B98
11025  3B99
11026  3B9A
11027  3B9B
11028  3B9C
11029  3B9D
11030  3B9E
11031  3B9F
11032  3BA0
11033  3BA1
11034  3BA2
11035  3BA3
11036  3BA4
11037  3BA5
11038  3BA6
11039  3BA7
11040  3BA8
11041  3BA9
11042  3BAA
11043  3BAB
11044  3BAC
11045  3BAD
11046  3BAE
11047  3BAF
11048  3BB0
11049  3BB1
11050  3BB2
11051  3BB3
11052  3BB4
11053  3BB5
11054  3BB6
11055  3BB7
11056  3BB8
11057  3BB9
11058  3BBA
11059  3BBB
11060  3BBC
11061  3BBD
11062  3BBE
11063  3BBF
11064  3BC0
11065  3BC1
11066  3BC2
11067  3BC3
11068  3BC4
11069  3BC5
11070  3BC6
11071  3BC7
11072  3BC8
11073  3BC9
11074  3BCA
11075  3BCB
11076  3BCC
11077  3BCD
11078  3BCE
11079  3BCF
11080  3BD0
11081  3BD1
11082  3BD2
11083  3BD3
11084  3BD4
11085  3BD5
11086  3BD6
11087  3BD7
11088  3BD8
11089  3BD9
11090  3BDA
11091  3BDB
11092  3BDC
11093  3BDD
11094  3BDE
11095  3BDF
11096  3BE0
11097  3BE1
11098  3BE2
11099  3BE3
11100  3BE4
11101  3BE5
11102  3BE6
11103  3BE7
11104  3BE8
11105  3BE9
11106  3BEA
11107  3BEB
11108  3BEC
11109  3BED
11110  3BEE
11111  3BEF
11112  3BF0
11113  3BF1
11114  3BF2
11115  3BF3
11116  3BF4
11117  3BF5
11118  3BF6
11119  3BF7
11120  3BF8
11121  3BF9
11122  3BFA
11123  3BFB
11124  3BFC
11125  3BFD
11126  3BFE
11127  3BFF
11128  3C00
11129  3C01
11130  3C02
11131  3C03
11132  3C04
11133  3C05
11134  3C06
11135  3C07
11136  3C08
11137  3C09
11138  3C0A
11139  3C0B
11140  3C0C
11141  3C0D
11142  3C0E
11143  3C0F
11144  3C10
11145  3C11
11146  3C12
11147  3C13
11148  3C14
11149  3C15
11150  3C16
11151  3C17
11152  3C18
11153  3C19
11154  3C1A
11155  3C1B
11156  3C1C
11157  3C1D
11158  3C1E
11159  3C1F
11160  3C20
11161  3C21
11162  3C22
11163  3C23
11164  3C24
11165  3C25
11166  3C26
11167  3C27
11168  3C28
11169  3C29
11170  3C2A
11171  3C2B
11172  3C2C
11173  3C2D
11174  3C2E
11175  3C2F
11176  3C30
11177  3C31
11178  3C32
11179  3C33
11180  3C34
11181  3C35
11182  3C36
11183  3C37
11184  3C38
11185  3C39
11186  3C3A
11187  3C3B
11188  3C3C
11189  3C3D
11190  3C3E
11191  3C3F
11192  3C40
11193  3C41
11194  3C42
11195  3C43
11196  3C44
11197  3C45
11198  3C46
11199  3C47
11200  3C48
11201  3C49
11202  3C4A
11203  3C4B
11204  3C4C
11205  3C4D
11206  3C4E
11207  3C4F
11208  3C50
11209  3C51
11210  3C52
11211  3C53
11212  3C54
11213  3C55
11214  3C56
11215  3C57
11216  3C58
11217  3C59
11218  3C5A
11219  3C5B
11220  3C5C
11221  3C5D
11222  3C5E
11223  3C5F
11224  3C60
11225  3C61
11226  3C62
11227  3C63
11228  3C64
11229  3C65
11230  3C66
11231  3C67
11232  3C68
11233  3C69
11234  3C6A
11235  3C6B
11236  3C6C
11237  3C6D
11238  3C6E
11239  3C6F
11240  3C70
11241  3C71
11242  3C72
11243  3C73
11244  3C74
11245  3C75
11246  3C76
11247  3C77
11248  3C78
11249  3C79
11250  3C7A
11251  3C7B
11252  3C7C
11253  3C7D
11254  3C7E
11255  3C7F
11256  3C80
11257  3C81
11258  3C82
11259  3C83
11260  3C84
11261  3C85
11262  3C86
11263  3C87
11264  3C88
11265  3C89
11266  3C8A
11267  3C8B
11268  3C8C
11269  3C8D
11270  3C8E
11271  3C8F
11272  3C90
11273  3C91
11274  3C92
11275  3C93
11276  3C94
11277  3C95
11278  3C96
11279  3C97
11280  3C98
11281  3C99
11282  3C9A
11283  3C9B
11284  3C9C
11285  3C9D
11286  3C9E
11287  3C9F
11288  3CA0
11289  3CA1
11290  3CA2
11291  3CA3
11292  3CA4
11293  3CA5
11294  3CA6
11295  3CA7
11296  3CA8
11297  3CA9
11298  3CAA
11299  3CAB
11300  3CAC
11301  3CAD
11302  3CAE
11303  3CAF
11304  3CB0
11305  3CB1
11306  3CB2
11307  3CB3
11308  3CB4
11309  3CB5
11310  3CB6
11311  3CB7
11312  3CB8
11313  3CB9
11314  3CBA
11315  3CBB
11316  3CBC
11317  3CBD
11318  3CBE
11319  3CBF
11320  3CC0
11321  3CC1
11322  3CC2
11323  3CC3
11324  3CC4
11325  3CC5
11326  3CC6
11327  3CC7
11328  3CC8
11329  3CC9
11330  3CCA
11331  3CCB
11332  3CCC
11333  3CCD
11334  3CCE
11335  3CCF
11336  3CD0
11337  3CD1
11338  3CD2
11339  3CD3
11340  3CD4
11341  3CD5
11342  3CD6
11343  3CD7
11344  3CD8
11345  3CD9
11346  3CDA
11347  3CDB
11348  3CDC
11349  3CDD
11350  3CDE
11351  3CDF
11352  3CE0
11353  3CE1
11354  3CE2
11355  3CE3
11356  3CE4
11357  3CE5
11358  3CE6
11359  3CE7
11360  3CE8
11361  3CE9
11362  3CEA
11363  3CEB
11364  3CEC
11365  3CED
11366  3CEE
11367  3CEF
11368  3CF0
11369  3CF1
11370  3CF2
11371  3CF3
11372  3CF4
11373  3CF5
11374  3CF6
11375  3CF7
11376  3CF8
11377  3CF9
11378  3CFA
11379  3CFB
11380  3CFC
11381  3CFD
11382  3CFE
11383  3CFF
11384  3D00
11385  3D01
11386  3D02
11387  3D03
11388  3D04
11389  3D05
11390  3D06
11391  3D07
11392  3D08
11393  3D09
11394  3D0A
11395  3D0B
11396  3D0C
11397  3D0D
11398  3D0E
11399  3D0F
11400  3D10
11401  3D11
11402  3D12
11403  3D13
11404  3D14
11405  3D15
11406  3D16
11407  3D17
11408  3D18
11409  3D19
11410  3D1A
11411  3D1B
11412  3D1C
11413  3D1D
11414  3D1E
11415  3D1F
11416  3D20
11417  3D21
11418  3D22
11419  3D23
11420  3D24
11421  3D25
11422  3D26
11423  3D27
11424  3D28
11425  3D29
11426  3D2A
11427  3D2B
11428  3D2C
11429  3D2D
11430  3D2E
11431  3D2F
11432  3D30
11433  3D31
11434  3D32
11435  3D33
11436  3D34
11437  3D35
11438  3D36
11439  3D37
11440  3D38
11441  3D39
11442  3D3A
11443  3D3B
11444  3D3C
11445  3D3D
11446  3D3E
11447  3D3F
11448  3D40
11449  3D41
11450  3D42
11451  3D43
11452  3D44
11453  3D45
11454  3D46
11455  3D47
11456  3D48
11457  3D49
11458  3D4A
11459  3D4B
11460  3D4C
11461  3D4D
11462  3D4E
11463  3D4F
11464  3D50
11465  3D51
11466  3D52
11467  3D53
11468  3D54
11469  3D55
11470  3D56
11471  3D57
11472  3D58
11473  3D59
11474  3D5A
11475  3D5B
11476  3D5C
11477  3D5D
11478  3D5E
11479  3D5F
11480  3D60
11481  3D61
11482  3D62
11483  3D63
11484  3D64
11485  3D65
11486  3D66
11487  3D67
11488  3D68
11489  3D69
11490  3D6A
11491  3D6B
11492  3D6C
11493  3D6D
11494  3D6E
11495  3D6F
11496  3D70
11497  3D71
11498  3D72
11499  3D73
11500  3D74
11501  3D75
11502  3D76
11503  3D77
11504  3D78
11505  3D79
11506  3D7A
11507  3D7B
11508  3D7C
11509  3D7D
11510  3D7E
11511  3D7F
11512  3D80
11513  3D81
11514  3D82
11515  3D83
11516  3D84
11517  3D85
11518  3D86
11519  3D87
11520  3D88
11521  3D89
11522  3D8A
11523  3D8B
11524  3D8C
11525  3D8D
11526  3D8E
11527  3D8F
11528  3D90
11529  3D91
11530  3D92
11531  3D93
11532  3D94
11533  3D95
11534  3D96
11535  3D97
11536  3D98
11537  3D99
11538  3D9A
11539  3D9B
11540  3D9C
11541  3D9D
11542  3D9E
11543  3D9F
11544  3DA0
11545  3DA1
11546  3DA2
11547  3DA3
11548  3DA4
11549  3DA5
11550  3DA6
11551  3DA7
11552  3DA8
11553  3DA9
11554  3DAA
11555  3DAB
11556  3DAC
11557  3DAD
11558  3DAE
11559  3DAF
11560  3DB0
11561  3DB1
11562  3DB2
11563  3DB3
11564  3DB4
11565  3DB5
11566  3DB6
11567  3DB7
11568  3DB8
11569  3DB9
11570  3DBA
11571  3DBB
11572  3DBC
11573  3DBD
11574  3DBE
11575  3DBF
11576  3DC0
11577  3DC1
11578  3DC2
11579  3DC3
11580  3DC4
11581  3DC5
11582  3DC6
11583  3DC7
11584  3DC8
11585  3DC9
11586  3DCA
11587  3DCB
11588  3DCC
11589  3DCD
11590  3DCE
11591  3DCF
11592  3DD0
11593  3DD1
11594  3DD2
11595  3DD3
11596  3DD4
11597  3DD5
11598  3DD6
11599  3DD7
11600  3DD8
11601  3DD9
11602  3DDA
11603  3DDB
11604  3DDC
11605  3DDD
11606  3DDE
11607  3DDF
11608  3DE0
11609  3DE1
11610  3DE2
11611  3DE3
11612  3DE4
11613  3DE5
11614  3DE6
11615  3DE7
11616  3DE8
11617  3DE9
11618  3DEA
11619  3DEB
11620  3DEC
11621  3DED
11622  3DEE
11623  3DEF
11624  3DF0
11625  3DF1
11626  3DF2
11627  3DF3
11628  3DF4
11629  3DF5
11630  3DF6
11631  3DF7
11632  3DF8
11633  3DF9
11634  3DFA
11635  3DFB
11636  3DFC
11637  3DFD
11638  3DFE
11639  3DFF
11640  3E00
11641  3E01
11642  3E02
11643  3E03
11644  3E04
11645  3E05
11646  3E06
11647  3E07
11648  3E08
11649  3E09
11650  3E0A
11651  3E0B
11652  3E0C
11653  3E0D
11654  3E0E
11655  3E0F
11656  3E10
11657  3E11
11658  3E12
11659  3E13
11660  3E14
11661  3E15
11662  3E16
11663  3E17
11664  3E18
11665  3E19
11666  3E1A
11667  3E1B
11668  3E1C
11669  3E1D
11670  3E1E
11671  3E1F
11672  3E20
11673  3E21
11674  3E22
11675  3E23
11676  3E24
11677  3E25
11678  3E26
11679  3E27
11680  3E28
11681  3E29
11682  3E2A
11683  3E2B
11684  3E2C
11685  3E2D
11686  3E2E
11687  3E2F
11688  3E30
11689  3E31
11690  3E32
11691  3E33
11692  3E34
11693  3E35
11694  3E36
11695  3E37
11696  3E38
11697  3E39
11698  3E3A
11699  3E3B
11700  3E3C
11701  3E3D
11702  3E3E
11703  3E3F
11704  3E40
11705  3E41
11706  3E42
11707  3E43
11708  3E44
11709  3E45
11710  3E46
11711  3E47
11712  3E48
11713  3E49
11714  3E4A
11715  3E4B
11716  3E4C
11717  3E4D
11718  3E4E
11719  3E4F
11720  3E50
11721  3E51
11722  3E52
11723  3E53
11724  3E54
11725  3E55
11726  3E56
11727  3E57
11728  3E58
11729  3E59
11730  3E5A
11731  3E5B
11732  3E5C
11733  3E5D
11734  3E5E
11735  3E5F
11736  3E60
11737  3E61
11738  3E62
11739  3E63
11740  3E64
11741  3E65
11742  3E66
11743  3E67
11744  3E68
11745  3E69
11746  3E6A
11747  3E6B
11748  3E6C
11749  3E6D
11750  3E6E
11751  3E6F
11752  3E70
11753  3E71
11754  3E72
11755  3E73
11756  3E74
11757  3E75
11758  3E76
11759  3E77
11760  3E78
11761  3E79
11762  3E7A
11763  3E7B
11764  3E7C
11765  3E7D
11766  3E7E
11767  3E7F
11768  3E80
11769  3E81
11770  3E82
11771  3E83
11772  3E84
11773  3E85
11774  3E86
11775  3E87
11776  3E88
11777  3E89
11778  3E8A
11779  3E8B
11780  3E8C
11781  3E8D
11782  3E8E
11783  3E8F
11784  3E90
11785  3E91
11786  3E92
11787  3E93
11788  3E94
11789  3E95
11790  3E96
11791  3E97
11792  3E98
11793  3E99
11794  3E9A
11795  3E9B
11796  3E9C
11797  3E9D
11798  3E9E
11799  3E9F
11800  3EA0
11801  3EA1
11802  3EA2
11803  3EA3
11804  3EA4
11805  3EA5
11806  3EA6
11807  3EA7
11808  3EA8
11809  3EA9
11810  3EAA
11811  3EAB
11812  3EAC
11813  3EAD
11814  3EAE
11815  3EAF
11816  3EB0
11817  3EB1
11818  3EB2
11819  3EB3
11820  3EB4
11821  3EB5
11822  3EB6
11823  3EB7
11824  3EB8
11825  3EB9
11826  3EBA
11827  3EBB
11828  3EBC
11829  3EBD
11830  3EBE
11831  3EBF
11832  3EC0
11833  3EC1
11834  3EC2
11835  3EC3
11836  3EC4
11837  3EC5
11838  3EC6
11839  3EC7
11840  3EC8
11841  3EC9
11842  3ECA
11843  3ECB
11844  3ECC
11845  3ECD
11846  3ECE
11847  3ECF
11848  3ED0
11849  3ED1
11850  3ED2
11851  3ED3
11852  3ED4
11853  3ED5
11854  3ED6
11855  3ED7
11856  3ED8
11857  3ED9
11858  3EDA
11859  3EDB
11860  3EDC
11861  3EDD
11862  3EDE
11863  3EDF
11864  3EE0
11865  3EE1
11866  3EE2
11867  3EE3
11868  3EE4
11869  3EE5
11870  3EE6
11871  3EE7
11872  3EE8
11873  3EE9
11874  3EEA
11875  3EEB
11876  3EEC
11877  3EED
11878  3EEE
11879  3EEF
11880  3EF0
11881  3EF1
11882  3EF2
11883  3EF3
11884  3EF4
11885  3EF5
11886  3EF6
11887  3EF7
11888  3EF8
11889  3EF9
11890  3EFA
11891  3EFB
11892  3EFC
11893  3EFD
11894  3EFE
11895  3EFF
11896  3F00
11897  3F01
11898  3F02
11899  3F03
11900  3F04
11901  3F05
11902  3F06
11903  3F07
11904  3F08
11905  3F09
11906  3F0A
11907  3F0B
11908  3F0C
11909  3F0D
11910  3F0E
11911  3F0F
11912  3F10
11913  3F11
11914  3F12
11915  3F13
11916  3F14
11917  3F15
11918  3F16
11919  3F17
11920  3F18
11921  3F19
11922  3F1A
11923  3F1B
11924  3F1C
11925  3F1D
11926  3F1E
11927  3F1F
11928  3F20
11929  3F21
11930  3F22
11931  3F23
11932  3F24
11933  3F25
11934  3F26
11935  3F27
11936  3F28
11937  3F29
11938  3F2A
11939  3F2B
11940  3F2C
11941  3F2D
11942  3F2E
11943  3F2F
11944  3F30
11945  3F31
11946  3F32
11947  3F33
11948  3F34
11949  3F35
11950  3F36
11951  3F37
11952  3F38
11953  3F39
11954  3F3A
11955  3F3B
11956  3F3C
11957  3F3D
11958  3F3E
11959  3F3F
11960  3F40
11961  3F41
11962  3F42
11963  3F43
11964  3F44
11965  3F45
11966  3F46
11967  3F47
11968  3F48
11969  3F49
11970  3F4A
11971  3F4B
11972  3F4C
11973  3F4D
11974  3F4E
11975  3F4F
11976  3F50
11977  3F51
11978  3F52
11979  3F53
11980  3F54
11981  3F55
11982  3F56
11983  3F57
11984  3F58
11985  3F59
11986  3F5A
11987  3F5B
11988  3F5C
11989  3F5D
11990  3F5E
11991  3F5F
11992  3F60
11993  3F61
11994  3F62
11995  3F63
11996  3F64
11997  3F65
11998  3F66
11999  3F67
12000  3F68
12001  3F69
12002  3F6A
12003  3F6B
12004  3F6C
12005  3F6D
12006  3F6E
12007  3F6F
12008  3F70
12009  3F71
12010  3F72
12011  3F73
12012  3F74
12013  3F75
12014  3F76
12015  3F77
12016  3F78
12017  3F79
12018  3F7A
12019  3F7B
12020  3F7C
12021  3F7D
12022  3F7E
12023  3F7F
12024  3F80
12025  3F81
12026  3F82
12027  3F83
12028  3F84
12029  3F85
12030  3F86
12031  3F87
12032  3F88
12033  3F89
12034  3F8A
12035  3F8B
12036  3F8C
12037  3F8D
12038  3F8E
12039  3F8F
12040  3F90
12041  3F91
12042  3F92
12043  3F93
12044  3F94
12045  3F95
12046  3F96
12047  3F97
12048  3F98
12049  3F99
12050  3F9A
12051  3F9B
12052  3F9C
12053  3F9D
12054  3F9E
12055  3F9F
12056  3FA0
12057  3FA1
12058  3FA2
12059  3FA3
12060  3FA4
12061  3FA5
12062  3FA6
12063  3FA7
12064  3FA8
12065  3FA9
12066  3FAA
12067  3FAB
12068  3FAC
12069  3FAD
12070  3FAE
12071  3FAF
12072  3FB0
12073  3FB1
12074  3FB2
12075  3FB3
12076  3FB4
12077  3FB5
12078  3FB6
12079  3FB7
12080  3FB8
12081  3FB9
12082  3FBA
12083  3FBB
12084  3FBC
12085  3FBD
12086  3FBE
12087  3FBF
12088  3FC0
12089  3FC1
12090  3FC2
12091  3FC3
12092  3FC4
12093  3FC5
12094  3FC6
12095  3FC7
12096  3FC8
12097  3FC9
12098  3FCA
12099  3FCB
12100  3FCC
12101  3FCD
12102  3FCE
12103  3FCF
12104  3FD0
12105  3FD1
12106  3FD2
12107  3FD3
12108  3FD4
12109  3FD5
12110  3FD6
12111  3FD7
12112  3FD8
12113  3FD9
12114  3FDA
12115  3FDB
12116  3FDC
12117  3FDD
12118  3FDE
12119  3FDF
12120  3FE0
12121  3FE1
12122  3FE2
12123  3FE3
12124  3FE4
12125  3FE5
12126  3FE6
12127  3FE7
12128  3FE8
12129  3FE9
12130  3FEA
12131  3FEB
12132  3FEC
12133  3FED
12134  3FEE
12135  3FEF
12136  3FF0
12137  3FF1
12138  3FF2
12139  3FF3
12140  3FF4
12141  3FF5
12142  3FF6
12143  3FF7
12144  3FF8
12145  3FF9
12146  3FFA
12147  3FFB
12148  3FFC
12149  3FFD
12150  3FFE
12151  3FFF
12152  4000
12153  4001
12154  4002
12155  4003
12156  4004
12157  4005
12158  4006
12159  4007
12160  4008
12161  4009
12162  400A
12163  400B
12164  400C
12165  400D
12166  400E
12167  400F
12168  4010
12169  4011
12170  4012
12171  4013
12172  4014
12173  4015
12174  4016
12175  4017
12176  4018
12177  4019
12178  401A
12179  401B
12180  401C
12181  401D
12182  401E
12183  401F
12184  4020
12185  4021
12186  4022
12187  4023
12188  4024
12189  4025
12190  4026
12191  4027
12192  4028
12193  4029
12194  402A
12195  402B
12196  402C
12197  402D
12198  402E
12199  402F
12200  4030
12201  4031
12202  4032
12203  4033
12204  4034
12205  4035
12206  4036
12207  4037
12208  4038
12209  4039
12210  403A
12211  403B
12212  403C
12213  403D
12214  403E
12215  403F
12216  4040
12217  4041
12218  4042
12219  4043
12220  4044
12221  4045
12222  4046
12223  4047
12224  4048
12225  4049
12226  404A
12227  404B
12228  404C
12229  404D
12230  404E
12231  404F
12232  4050
12233  4051
12234  4052
12235  4053
12236  4054
12237  4055
12238  4056
12239  4057
12240  4058
12241  4059
12242  405A
12243  405B
12244  405C
12245  405D
12246  405E
12247  405F
12248  4060
12249  4061
12250  4062
12251  4063
12252  4064
12253  4065
12254  4066
12255  4067
12256  4068
12257  4069
12258  406A
12259  406B
12260  406C
12261  406D
12262  406E
12263  406F
12264  4070
12265  4071
12266  4072
12267  4073
12268  4074
12269  4075
12270  4076
12271  4077
12272  4078
12273  4079
12274  407A
12275  407B
12276  407C
12277  407D
12278  407E
12279  407F
12280  4080
12281  4081
12282  4082
12283  4083
12284  4084
12285  4085
12286  4086
12287  4087
12288  4088
12289  4089
12290  408A
12291  408B
12292  408C
12293  408D
12294  408E
12295  408F
12296  4090
12297  4091
12298  4092
12299  4093
12300  4094
12301  4095
12302  4096
12303  4097
12304  4098
12305  4099
12306  409A
12307  409B
12308  409C
12309  409D
12310  409E
12311  409F
12312  40A0
12313  40A1
12314  40A2
12315  40A3
12316  40A4
12317  40A5
12318  40A6
12319  40A7
12320  40A8
12321  40A9
12322  40AA
12323  40AB
12324  40AC
12325  40AD
12326  40AE
12327  40AF
12328  40B0
12329  40B1
12330  40B2
12331  40B3
12332  40B4
12333  40B5
12334  40B6
12335  40B7
12336  40B8
12337  40B9
12338  40BA
12339  40BB
12340  40BC
12341  40BD
12342  40BE
12343  40BF
12344  40C0
12345  40C1
12346  40C2
12347  40C3
12348  40C4
12349  40C5
12350  40C6
12351  40C7
12352  40C8
12353  40C9
12354  40CA
12355  40CB
12356  40CC
12357  40CD
12358  40CE
12359  40CF
12360  40D0
12361  40D1
12362  40D2
12363  40D3
12364  40D4
12365  40D5
12366  40D6
12367  40D7
12368  40D8
12369  40D9
12370  40DA
12371  40DB
12372  40DC
12373  40DD
12374  40DE
12375  40DF
12376  40E0
12377  40E1
12378  40E2
12379  40E3
12380  40E4
12381  40E5
12382  40E6
12383  40E7
12384  40E8
12385  40E9
12386  40EA
12387  40EB
12388  40EC
12389  40ED
12390  40EE
12391  40EF
12392  40F0
12393  40F1
12394  40F2
12395  40F3
12396  40F4
12397  40F5
12398  40F6
12399  40F7
12400  40F8
12401  40F9
12402  40FA
12403  40FB
12404  40FC
12405  40FD
12406  40FE
12407  40FF
12408  4100
12409  4101
12410  4102
12411  4103
12412  4104
12413  4105
12414  4106
12415  4107
12416  4108
12417  4109
12418  410A
12419  410B
12420  410C
12421  410D
12422  410E
12423  410F
12424  4110
12425  4111
12426  4112
12427  4113
12428  4114
12429  4115
12430  4116
12431  4117
12432  4118
12433  4119
12434  411A
12435  411B
12436  411C
12437  411D
12438  411E
12439  411F
12440  4120
12441  4121
12442  4122
12443  4123
12444  4124
12445  4125
12446  4126
12447  4127
12448  4128
12449  4129
12450  412A
12451  412B
12452  412C
12453  412D
12454  412E
12455  412F
12456  4130
12457  4131
12458  4132
12459  4133
12460  4134
12461  4135
12462  4136
12463  4137
12464  4138
12465  4139
12466  413A
12467  413B
12468  413C
12469  413D
12470  413E
12471  413F
12472  4140
12473  4141
12474  4142
12475  4143
12476  4144
12477  4145
12478  4146
12479  4147
12480  4148
12481  4149
12482  414A
12483  414B
12484  414C
12485  414D
12486  414E
12487  414F
12488  4150
12489  4151
12490  4152
12491  4153
12492  4154
12493  4155
12494  4156
12495  4157
12496  4158
12497  4159
12498  415A
12499  415B
12500  415C
12501  415D
12502  415E
12503  415F
12504  4160
12505  4161
12506  4162
12507  4163
12508  4164
12509  4165
12510  4166
12511  4167
12512  4168
12513  4169
12514  416A
12515  416B
12516  416C
12517  416D
12518  416E
12519  416F
12520  4170
12521  4171
12522  4172
12523  4173
12524  4174
12525  4175
12526  4176
12527  4177
12528  4178
12529  4179
12530  417A
12531  417B
12532  417C
12533  417D
12534  417E
12535  417F
12536  4180
12537  4181
12538  4182
12539  4183
12540  4184
12541  4185
12542  4186
12543  4187
12544  4188
12545  4189
12546  418A
12547  418B
12548  418C
12549  418D
12550  418E
12551  418F
12552  4190
12553  4191
12554  4192
12555  4193
12556  4194
12557  4195
12558  4196
12559  4197
12560  4198
12561  4199
12562  419A
12563  419B
12564  419C
12565  419D
12566  419E
12567  419F
12568  41A0
12569  41A1
12570  41A2
12571  41A3
12572  41A4
12573  41A5
12574  41A6
12575  41A7
12576  41A8
12577  41A9
12578  41AA
12579  41AB
12580  41AC
12581  41AD
12582  41AE
12583  41AF
12584  41B0
12585  41B1
12586  41B2
12587  41B3
12588  41B4
12589  41B5
12590  41B6
12591  41B7
12592  41B8
12593  41B9
12594  41BA
12595  41BB
12596  41BC
12597  41BD
12598  41BE
12599  41BF
12600  41C0
12601  41C1
12602  41C2
12603  41C3
12604  41C4
12605  41C5
12606  41C6
12607  41C7
12608  41C8
12609  41C9
12610  41CA
12611  41CB
12612  41CC
12613  41CD
12614  41CE
12615  41CF
12616  41D0
12617  41D1
12618  41D2
12619  41D3
12620  41D4
12621  41D5
12622  41D6
12623  41D7
12624  41D8
12625  41D9
12626  41DA
12627  41DB
12628  41DC
12629  41DD
12630  41DE
12631  41DF
12632  41E0
12633  41E1
12634  41E2
12635  41E3
12636  41E4
12637  41E5
12638  41E6
12639  41E7
12640  41E8
12641  41E9
12642  41EA
12643  41EB
12644  41EC
12645  41ED
12646  41EE
12647  41EF
12648  41F0
12649  41F1
12650  41F2
12651  41F3
12652  41F4
12653  41F5
12654  41F6
12655  41F7
12656  41F8
12657  41F9
12658  41FA
12659  41FB
12660  41FC
12661  41FD
12662  41FE
12663  41FF
12664  4200
12665  4201
12666  4202
12667  4203
12668  4204
12669  4205
12670  4206
12671  4207
12672  4208
12673  4209
12674  420A
12675  420B
12676  420C
12677  420D
12678  420E
12679  420F
12680  4210
12681  4211
12682  4212
12683  4213
12684  4214
12685  4215
12686  4216
12687  4217
12688  4218
12689  4219
12690  421A
12691  421B
12692  421C
12693  421D
12694  421E
12695  421F
12696  4220
12697  4221
12698  4222
12699  4223
12700  4224
12701  4225
12702  4226
12703  4227
12704  4228
12705  4229
12706  422A
12707  422B
12708  422C
12709  422D
12710  422E
12711  422F
12712  4230
12713  4231
12714  4232
12715  4233
12716  4234
12717  4235
12718  4236
12719  4237
12720  4238
12721  4239
12722  423A
12723  423B
12724  423C
12725  423D
12726  423E
12727  423F
12728  4240
12729  4241
12730  4242
12731  4243
12732  4244
12733  4245
12734  4246
12735  4247
12736  4248
12737  4249
12738  424A
12739  424B
12740  424C
12741  424D
12742  424E
12743  424F
12744  4250
12745  4251
12746  4252
12747  4253
12748  4254
12749  4255
12750  4256
12751  4257
12752  4258
12753  4259
12754  425A
12755  425B
12756  425C
12757  425D
12758  425E
12759  425F
12760  4260
12761  4261
12762  4262
12763  4263
12764  4264
12765  4265
12766  4266
12767  4267
12768  4268
12769  4269
12770  426A
12771  426B
12772  426C
12773  426D
12774  426E
12775  426F
12776  4270
12777  4271
12778  4272
12779  4273
12780  4274
12781  4275
12782  4276
12783  4277
12784  4278
12785  4279
12786  427A
12787  427B
12788  427C
12789  427D
12790  427E
12791  427F
12792  4280
12793  4281
12794  4282
12795  4283
12796  4284
12797  4285
12798  4286
12799  4287
12800  4288
12801  4289
12802  428A
12803  428B
12804  428C
12805  428D
12806  428E
12807  428F
12808  4290
12809  4291
12810  4292
12811  4293
12812  4294
12813  4295
12814  4296
12815  4297
12816  4298
12817  4299
12818  429A
12819  429B
12820  429C
12821  429D
12822  429E
12823  429F
12824  42A0
12825  42A1
12826  42A2
12827  42A3
12828  42A4
12829  42A5
12830  42A6
12831  42A7
12832  42A8
12833  42A9
12834  42AA
12835  42AB
12836  42AC
12837  42AD
12838  42AE
12839  42AF
12840  42B0
12841  42B1
12842  42B2
12843  42B3
12844  42B4
12845  42B5
12846  42B6
12847  42B7
12848  42B8
12849  42B9
12850  42BA
12851  42BB
12852  42BC
12853  42BD
12854  42BE
12855  42BF
12856  42C0
12857  42C1
12858  42C2
12859  42C3
12860  42C4
12861  42C5
12862  42C6
12863  42C7
12864  42C8
12865  42C9
12866  42CA
12867  42CB
12868  42CC
12869  42CD
12870  42CE
12871  42CF
12872  42D0
12873  42D1
12874  42D2
12875  42D3
12876  42D4
12877  42D5
12878  42D6
12879  42D7
12880  42D8
12881  42D9
12882  42DA
12883  42DB
12884  42DC
12885  42DD
12886  42DE
12887  42DF
12888  42E0
12889  42E1
12890  42E2
12891  42E3
12892  42E4
12893  42E5
12894  42E6
12895  42E7
12896  42E8
12897  42E9
12898  42EA
12899  42EB
12900  42EC
12901  42ED
12902  42EE
12903  42EF
12904  42F0
12905  42F1
12906  42F2
12907  42F3
12908  42F4
12909  42F5
12910  42F6
12911  42F7
12912  42F8
12913  42F9
12914  42FA
12915  42FB
12916  42FC
12917  42FD
12918  42FE
12919  42FF
12920  4300
12921  4301
12922  4302
12923  4303
12924  4304
12925  4305
12926  4306
12927  4307
12928  4308
12929  4309
12930  430A
12931  430B
12932  430C
12933  430D
12934  430E
12935  430F
12936  4310
12937  4311
12938  4312
12939  4313
12940  4314
12941  4315
12942  4316
12943  4317
12944  4318
12945  4319
12946  431A
12947  431B
12948  431C
12949  431D
12950  431E
12951  431F
12952  4320
12953  4321
12954  4322
12955  4323
12956  4324
12957  4325
12958  4326
12959  4327
12960  4328
12961  4329
12962  432A
12963  432B
12964  432C
12965  432D
12966  432E
12967  432F
12968  4330
12969  4331
12970  4332
12971  4333
12972  4334
12973  4335
12974  4336
12975  4337
12976  4338
12977  4339
12978  433A
12979  433B
12980  433C
12981  433D
12982  433E
12983  433F
12984  4340
12985  4341
12986  4342
12987  4343
12988  4344
12989  4345
12990  4346
12991  4347
12992  4348
12993  4349
12994  434A
12995  434B
12996  434C
12997  434D
12998  434E
12999  434F
13000  4350
13001  4351
13002  4352
13003  4353
13004  4354
13005  4355
13006  4356
13007  4357
13008  4358
13009  4359
13010  435A
13011  435B
13012  435C
13013  435D
13014  435E
13015  435F
13016  4360
13017  4361
13018  4362
13019  4363
13020  4364
13021  4365
13022  4366
13023  4367
13024  4368
13025  4369
13026  436A
13027  436B
13028  436C
13029  436D
13030  436E
13031  436F
13032  4370
13033  4371
13034  4372
13035  4373
13036  4374
13037  4375
13038  4376
13039  4377
13040  4378
13041  4379
13042  437A
13043  437B
13044  437C
13045  437D
13046  437E
13047  437F
13048  4380
13049  4381
13050  4382
13051  4383
13052  4384
13053  4385
13054  4386
13055  4387
13056  4388
13057  4389
13058  438A
13059  438B
13060  438C
13061  438D
13062  438E
13063  438F
13064  4390
13065  4391
13066  4392
13067  4393
13068  4394
13069  4395
13070  4396
13071  4397
13072  4398
13073  4399
13074  439A
13075  439B
13076  439C
13077  439D
13078  439E
13079  439F
13080  43A0
13081  43A1
13082  43A2
13083  43A3
13084  43A4
13085  43A5
13086  43A6
13087  43A7
13088  43A8
13089  43A9
13090  43AA
13091  43AB
13092  43AC
13093  43AD
13094  43AE
13095  43AF
13096  43B0
13097  43B1
13098  43B2
13099  43B3
13100  43B4
13101  43B5
13102  43B6
13103  43B7
13104  43B8
13105  43B9
13106  43BA
13107  43BB
13108  43BC
13109  43BD
13110  43BE
13111  43BF
13112  43C0
13113  43C1
13114  43C2
13115  43C3
13116  43C4
13117  43C5
13118  43C6
13119  43C7
13120  43C8
13121  43C9
13122  43CA
13123  43CB
13124  43CC
13125  43CD
13126  43CE
13127  43CF
13128  43D0
13129  43D1
13130  43D2
13131  43D3
13132  43D4
13133  43D5
13134  43D6
13135  43D7
13136  43D8
13137  43D9
13138  43DA
13139  43DB
13140  43DC
13141  43DD
13142  43DE
13143  43DF
13144  43E0
13145  43E1
13146  43E2
13147  43E3
13148  43E4
13149  43E5
13150  43E6
13151  43E7
13152  43E8
13153  43E9
13154  43EA
13155  43EB
13156  43EC
13157  43ED
13158  43EE
13159  43EF
13160  43F0
13161  43F1
13162  43F2
13163  43F3
13164  43F4
13165  43F5
13166  43F6
13167  43F7
13168  43F8
13169  43F9
13170  43FA
13171  43FB
13172  43FC
13173  43FD
13174  43FE
13175  43FF
13176  4400
13177  4401
13178  4402
13179  4403
13180  4404
13181  4405
13182  4406
13183  4407
13184  4408
13185  4409
13186  440A
13187  440B
13188  440C
13189  440D
13190  440E
13191  440F
13192  4410
13193  4411
13194  4412
13195  4413
13196  4414
13197  4415
13198  4416
13199  4417
13200  4418
13201  4419
13202  441A
13203  441B
13204  441C
13205  441D
13206  441E
13207  441F
13208  4420
13209  4421
13210  4422
13211  4423
13212  4424
13213  4425
13214  4426
13215  4427
13216  4428
13217  4429
13218  442A
13219  442B
13220  442C
13221  442D
13222  442E
13223  442F
13224  4430
13225  4431
13226  4432
13227  4433
13228  4434
13229  4435
13230  4436
13231  4437
13232  4438
13233  4439
13234  443A
13235  443B
13236  443C
13237  443D
13238  443E
13239  443F
13240  4440
13241  4441
13242  4442
13243  4443
13244  4444
13245  4445
13246  4446
13247  4447
13248  4448
13249  4449
13250  444A
13251  444B
13252  444C
13253  444D
13254  444E
13255  444F
13256  4450
13257  4451
13258  4452
13259  4453
13260  4454
13261  4455
13262  4456
13263  4457
13264  4458
13265  4459
13266  445A
13267  445B
13268  445C
13269  445D
13270  445E
13271  445F
13272  4460
13273  4461
13274  4462
13275  4463
13276  4464
13277  4465
13278  4466
13279  4467
13280  4468
13281  4469
13282  446A
13283  446B
13284  446C
13285  446D
13286  446E
13287  446F
13288  4470
13289  4471
13290  4472
13291  4473
13292  4474
13293  4475
13294  4476
13295  4477
13296  4478
13297  4479
13298  447A
13299  447B
13300  447C
13301  447D
13302  447E
13303  447F
13304  4480
13305  4481
13306  4482
13307  4483
13308  4484
13309  4485
13310  4486
13311  4487
13312  4488
13313  4489
13314  448A
13315  448B
13316  448C
13317  448D
13318  448E
13319  448F
13320  4490
13321  4491
13322  4492
13323  4493
13324  4494
13325  4495
13326  4496
13327  4497
13328  4498
13329  4499
13330  449A
13331  449B
13332  449C
13333  449D
13334  449E
13335  449F
13336  44A0
13337  44A1
13338  44A2
13339  44A3
13340  44A4
13341  44A5
13342  44A6
13343  44A7
13344  44A8
13345  44A9
13346  44AA
13347  44AB
13348  44AC
13349  44AD
13350  44AE
13351  44AF
13352  44B0
13353  44B1
13354  44B2
13355  44B3
13356  44B4
13357  44B5
13358  44B6
13359  44B7
13360  44B8
13361  44B9
13362  44BA
13363  44BB
13364  44BC
13365  44BD
13366  44BE
13367  44BF
13368  44C0
13369  44C1
13370  44C2
13371  44C3
13372  44C4
13373  44C5
13374  44C6
13375  44C7
13376  44C8
13377  44C9
13378  44CA
13379  44CB
13380  44CC
13381  44CD
13382  44CE
13383  44CF
13384  44D0
13385  44D1
13386  44D2
13387  44D3
13388  44D4
13389  44D5
13390  44D6
13391  44D7
13392  44D8
13393  44D9
13394  44DA
13395  44DB
13396  44DC
13397  44DD
13398  44DE
13399  44DF
13400  44E0
13401  44E1
13402  44E2
13403  44E3
13404  44E4
13405  44E5
13406  44E6
13407  44E7
13408  44E8
13409  44E9
13410  44EA
13411  44EB
13412  44EC
13413  44ED
13414  44EE
13415  44EF
13416  44F0
13417  44F1
13418  44F2
13419  44F3
13420  44F4
13421  44F5
13422  44F6
13423  44F7
13424  44F8
13425  44F9
13426  44FA
13427  44FB
13428  44FC
13429  44FD
13430  44FE
13431  44FF
13432  4500
13433  4501
13434  4502
13435  4503
13436  4504
13437  4505
13438  4506
13439  4507
13440  4508
13441  4509
13442  450A
13443  450B
13444  450C
13445  450D
13446  450E
13447  450F
13448  4510
13449  4511
13450  4512
13451  4513
13452  4514
13453  4515
13454  4516
13455  4517
13456  4518
13457  4519
13458  451A
13459  451B
13460  451C
13461  451D
13462  451E
13463  451F
13464  4520
13465  4521
13466  4522
13467  4523
13468  4524
13469  4525
13470  4526
13471  4527
13472  4528
13473  4529
13474  452A
13475  452B
13476  452C
13477  452D
13478  452E
13479  452F
13480  4530
13481  4531
13482  4532
13483  4533
13484  4534
13485  4535
13486  4536
13487  4537
13488  4538
13489  4539
13490  453A
13491  453B
13492  453C
13493  453D
13494  453E
13495  453F
13496  4540
13497  4541
13498  4542
13499  4543
13500  4544
13501  4545
13502  4546
13503  4547
13504  4548
13505  4549
13506  454A
13507  454B
13508  454C
13509  454D
13510  454E
13511  454F
13512  4550
13513  4551
13514  4552
13515  4553
13516  4554
13517  4555
13518  4556
13519  4557
13520  4558
13521  4559
13522  455A
13523  455B
13524  455C
13525  455D
13526  455E
13527  455F
13528  4560
13529  4561
13530  4562
13531  4563
13532  4564
13533  4565
13534  4566
13535  4567
13536  4568
13537  4569
13538  456A
13539  456B
13540  456C
13541  456D
13542  456E
13543  456F
13544  4570
13545  4571
13546  4572
13547  4573
13548  4574
13549  4575
13550  4576
13551  4577
13552  4578
13553  4579
13554  457A
13555  457B
13556  457C
13557  457D
13558  457E
13559  457F
13560  4580
13561  4581
13562  4582
13563  4583
13564  4584
13565  4585
13566  4586
13567  4587
13568  4588
13569  4589
13570  458A
13571  458B
13572  458C
13573  458D
13574  458E
13575  458F
13576  4590
13577  4591
13578  4592
13579  4593
13580  4594
13581  4595
13582  4596
13583  4597
13584  4598
13585  4599
13586  459A
13587  459B
13588  459C
13589  459D
13590  459E
13591  459F
13592  45A0
13593  45A1
13594  45A2
13595  45A3
13596  45A4
13597  45A5
13598  45A6
13599  45A7
13600  45A8
13601  45A9
13602  45AA
13603  45AB
13604  45AC
13605  45AD
13606  45AE
13607  45AF
13608  45B0
13609  45B1
13610  45B2
13611  45B3
13612  45B4
13613  45B5
13614  45B6
13615  45B7
13616  45B8
13617  45B9
13618  45BA
13619  45BB
13620  45BC
13621  45BD
13622  45BE
13623  45BF
13624  45C0
13625  45C1
13626  45C2
13627  45C3
13628  45C4
13629  45C5
13630  45C6
13631  45C7
13632  45C8
13633  45C9
13634  45CA
13635  45CB
13636  45CC
13637  45CD
13638  45CE
13639  45CF
13640  45D0
13641  45D1
13642  45D2
13643  45D3
13644  45D4
13645  45D5
13646  45D6
13647  45D7
13648  45D8
13649  45D9
13650  45DA
13651  45DB
13652  45DC
13653  45DD
13654  45DE
13655  45DF
13656  45E0
13657  45E1
13658  45E2
13659  45E3
13660  45E4
13661  45E5
13662  45E6
13663  45E7
13664  45E8
13665  45E9
13666  45EA
13667  45EB
13668  45EC
13669  45ED
13670  45EE
13671  45EF
13672  45F0
13673  45F1
13674  45F2
13675  45F3
13676  45F4
13677  45F5
13678  45F6
13679  45F7
13680  45F8
13681  45F9
13682  45FA
13683  45FB
13684  45FC
13685  45FD
13686  45FE
13687  45FF
13688  4600
13689  4601
13690  4602
13691  4603
13692  4604
13693  4605
13694  4606
13695  4607
13696  4608
13697  4609
13698  460A
13699  460B
13700  460C
13701  460D
13702  460E
13703  460F
13704  4610
13705  4611
13706  4612
13707  4613
13708  4614
13709  4615
13710  4616
13711  4617
13712  4618
13713  4619
13714  461A
13715  461B
13716  461C
13717  461D
13718  461E
13719  461F
13720  4620
13721  4621
13722  4622
13723  4623
13724  4624
13725  4625
13726  4626
13727  4627
13728  4628
13729  4629
13730  462A
13731  462B
13732  462C
13733  462D
13734  462E
13735  462F
13736  4630
13737  4631
13738  4632
13739  4633
13740  4634
13741  4635
13742  4636
13743  4637
13744  4638
13745  4639
13746  463A
13747  463B
13748  463C
13749  463D
13750  463E
13751  463F
13752  4640
13753  4641
13754  4642
13755  4643
13756  4644
13757  4645
13758  4646
13759  4647
13760  4648
13761  4649
13762  464A
13763  464B
13764  464C
13765  464D
13766  464E
13767  464F
13768  4650
13769  4651
13770  4652
13771  4653
13772  4654
13773  4655
13774  4656
13775  4657
13776  4658
13777  4659
13778  465A
13779  465B
13780  465C
13781  465D
13782  465E
13783  465F
13784  4660
13785  4661
13786  4662
13787  4663
13788  4664
13789  4665
13790  4666
13791  4667
13792  4668
13793  4669
13794  466A
13795  466B
13796  466C
13797  466D
13798  466E
13799  466F
13800  4670
13801  4671
13802  4672
13803  4673
13804  4674
13805  4675
13806  4676
13807  4677
13808  4678
13809  4679
13810  467A
13811  467B
13812  467C
13813  467D
13814  467E
13815  467F
13816  4680
13817  4681
13818  4682
13819  4683
13820  4684
13821  4685
13822  4686
13823  4687
13824  4688
13825  4689
13826  468A
13827  468B
13828  468C
13829  468D
13830  468E
13831  468F
13832  4690
13833  4691
13834  4692
13835  4693
13836  4694
13837  4695
13838  4696
13839  4697
13840  4698
13841  4699
13842  469A
13843  469B
13844  469C
13845  469D
13846  469E
13847  469F
13848  46A0
13849  46A1
13850  46A2
13851  46A3
13852  46A4
13853  46A5
13854  46A6
13855  46A7
13856  46A8
13857  46A9
13858  46AA
13859  46AB
13860  46AC
13861  46AD
13862  46AE
13863  46AF
13864  46B0
13865  46B1
13866  46B2
13867  46B3
13868  46B4
13869  46B5
13870  46B6
13871  46B7
13872  46B8
13873  46B9
13874  46BA
13875  46BB
13876  46BC
13877  46BD
13878  46BE
13879  46BF
13880  46C0
13881  46C1
13882  46C2
13883  46C3
13884  46C4
13885  46C5
13886  46C6
13887  46C7
13888  46C8
13889  46C9
13890  46CA
13891  46CB
13892  46CC
13893  46CD
13894  46CE
13895  46CF
13896  46D0
13897  46D1
13898  46D2
13899  46D3
13900  46D4
13901  46D5
13902  46D6
13903  46D7
13904  46D8
13905  46D9
13906  46DA
13907  46DB
13908  46DC
13909  46DD
13910  46DE
13911  46DF
13912  46E0
13913  46E1
13914  46E2
13915  46E3
13916  46E4
13917  46E5
13918  46E6
13919  46E7
13920  46E8
13921  46E9
13922  46EA
13923  46EB
13924  46EC
13925  46ED
13926  46EE
13927  46EF
13928  46F0
13929  46F1
13930  46F2
13931  46F3
13932  46F4
13933  46F5
13934  46F6
13935  46F7
13936  46F8
13937  46F9
13938  46FA
13939  46FB
13940  46FC
13941  46FD
13942  46FE
13943  46FF
13944  4700
13945  4701
13946  4702
13947  4703
13948  4704
13949  4705
13950  4706
13951  4707
13952  4708
13953  4709
13954  470A
13955  470B
13956  470C
13957  470D
13958  470E
13959  470F
13960  4710
13961  4711
13962  4712
13963  4713
13964  4714
13965  4715
13966  4716
13967  4717
13968  4718
13969  4719
13970  471A
13971  471B
13972  471C
13973  471D
13974  471E
13975  471F
13976  4720
13977  4721
13978  4722
13979  4723
13980  4724
13981  4725
13982  4726
13983  4727
13984  4728
13985  4729
13986  472A
13987  472B
13988  472C
13989  472D
13990  472E
13991  472F
13992  4730
13993  4731
13994  4732
13995  4733
13996  4734
13997  4735
13998  4736
13999  4737
14000  4738
14001  4739
14002  473A
14003  473B
14004  473C
14005  473D
14006  473E
14007  473F
14008  4740
14009  4741
14010  4742
14011  4743
14012  4744
14013  4745
14014  4746
14015  4747
14016  4748
14017  4749
14018  474A
14019  474B
14020  474C
14021  474D
14022  474E
14023  474F
14024  4750
14025  4751
14026  4752
14027  4753
14028  4754
14029  4755
14030  4756
14031  4757
14032  4758
14033  4759
14034  475A
14035  475B
14036  475C
14037  475D
14038  475E
14039  475F
14040  4760
14041  4761
14042  4762
14043  4763
14044  4764
14045  4765
14046  4766
14047  4767
14048  4768
14049  4769
14050  476A
14051  476B
14052  476C
14053  476D
14054  476E
14055  476F
14056  4770
14057  4771
14058  4772
14059  4773
14060  4774
14061  4775
14062  4776
14063  4777
14064  4778
14065  4779
14066  477A
14067  477B
14068  477C
14069  477D
14070  477E
14071  477F
14072  4780
14073  4781
14074  4782
14075  4783
14076  4784
14077  4785
14078  4786
14079  4787
14080  4788
14081  4789
14082  478A
14083  478B
14084  478C
14085  478D
14086  478E
14087  478F
14088  4790
14089  4791
14090  4792
14091  4793
14092  4794
14093  4795
14094  4796
14095  4797
14096  4798
14097  4799
14098  479A
14099  479B
14100  479C
14101  479D
14102  479E
14103  479F
14104  47A0
14105  47A1
14106  47A2
14107  47A3
14108  47A4
14109  47A5
14110  47A6
14111  47A7
14112  47A8
14113  47A9
14114  47AA
14115  47AB
14116  47AC
14117  47AD
14118  47AE
14119  47AF
14120  47B0
14121  47B1
14122  47B2
14123  47B3
14124  47B4
14125  47B5
14126  47B6
14127  47B7
14128  47B8
14129  47B9
14130  47BA
14131  47BB
14132  47BC
14133  47BD
14134  47BE
14135  47BF
14136  47C0
14137  47C1
14138  47C2
14139  47C3
14140  47C4
14141  47C5
14142  47C6
14143  47C7
14144  47C8
14145  47C9
14146  47CA
14147  47CB
14148  47CC
14149  47CD
14150  47CE
14151  47CF
14152  47D0
14153  47D1
14154  47D2
14155  47D3
14156  47D4
14157  47D5
14158  47D6
14159  47D7
14160  47D8
14161  47D9
14162  47DA
14163  47DB
14164  47DC
14165  47DD
14166  47DE
14167  47DF
14168  47E0
14169  47E1
14170  47E2
14171  47E3
14172  47E4
14173  47E5
14174  47E6
14175  47E7
14176  47E8
14177  47E9
14178  47EA
14179  47EB
14180  47EC
14181  47ED
14182  47EE
14183  47EF
14184  47F0
14185  47F1
14186  47F2
14187  47F3
14188  47F4
14189  47F5
14190  47F6
14191  47F7
14192  47F8
14193  47F9
14194  47FA
14195  47FB
14196  47FC
14197  47FD
14198  47FE
14199  47FF
14200  4800
14201  4801
14202  4802
14203  4803
14204  4804
14205  4805
14206  4806
14207  4807
14208  4808
14209  4809
14210  480A
14211  480B
14212  480C
14213  480D
14214  480E
14215  480F
14216  4810
14217  4811
14218  4812
14219  4813
14220  4814
14221  4815
14222  4816
14223  4817
14224  4818
14225  4819
14226  481A
14227  481B
14228  481C
14229  481D
14230  481E
14231  481F
14232  4820
14233  4821
14234  4822
14235  4823
14236  4824
14237  4825
14238  4826
14239  4827
14240  4828
14241  4829
14242  482A
14243  482B
14244  482C
14245  482D
14246  482E
14247  482F
14248  4830
14249  4831
14250  4832
14251  4833
14252  4834
14253  4835
14254  4836
14255  4837
14256  4838
14257  4839
14258  483A
14259  483B
14260  483C
14261  483D
14262  483E
14263  483F
14264  4840
14265  4841
14266  4842
14267  4843
14268  4844
14269  4845
14270  4846
14271  4847
14272  4848
14273  4849
14274  484A
14275  484B
14276  484C
14277  484D
14278  484E
14279  484F
14280  4850
14281  4851
14282  4852
14283  4853
14284  4854
14285  4855
14286  4856
14287  4857
14288  4858
14289  4859
14290  485A
14291  485B
14292  485C
14293  485D
14294  485E
14295  485F
14296  4860
14297  4861
14298  4862
14299  4863
14300  4864
14301  4865
14302  4866
14303  4867
14304  4868
14305  4869
14306  486A
14307  486B
14308  486C
14309  486D
14310  486E
14311  486F
14312  4870
14313  4871
14314  4872
14315  4873
14316  4874
14317  4875
14318  4876
14319  4877
14320  4878
14321  4879
14322  487A
14323  487B
14324  487C
14325  487D
14326  487E
14327  487F
14328  4880
14329  4881
14330  4882
14331  4883
14332  4884
14333  4885
14334  4886
14335  4887
14336  4888
14337  4889
14338  488A
14339  488B
14340  488C
14341  488D
14342  488E
14343  488F
14344  4890
14345  4891
14346  4892
14347  4893
14348  4894
14349  4895
14350  4896
14351  4897
14352  4898
14353  4899
14354  489A
14355  489B
14356  489C
14357  489D
14358  489E
14359  489F
14360  48A0
14361  48A1
14362  48A2
14363  48A3
14364  48A4
14365  48A5
14366  48A6
14367  48A7
14368  48A8
14369  48A9
14370  48AA
14371  48AB
14372  48AC
14373  48AD
14374  48AE
14375  48AF
14376  48B0
14377  48B1
14378  48B2
14379  48B3
14380  48B4
14381  48B5
14382  48B6
14383  48B7
14384  48B8
14385  48B9
14386  48BA
14387  48BB
14388  48BC
14389  48BD
14390  48BE
14391  48BF
14392  48C0
14393  48C1
14394  48C2
14395  48C3
14396  48C4
14397  48C5
14398  48C6
14399  48C7
14400  48C8
14401  48C9
14402  48CA
14403  48CB
14404  48CC
14405  48CD
14406  48CE
14407  48CF
14408  48D0
14409  48D1
14410  48D2
14411  48D3
14412  48D4
14413  48D5
14414  48D6
14415  48D7
14416  48D8
14417  48D9
14418  48DA
14419  48DB
14420  48DC
14421  48DD
14422  48DE
14423  48DF
14424  48E0
14425  48E1
14426  48E2
14427  48E3
14428  48E4
14429  48E5
14430  48E6
14431  48E7
14432  48E8
14433  48E9
14434  48EA
14435  48EB
14436  48EC
14437  48ED
14438  48EE
14439  48EF
14440  48F0
14441  48F1
14442  48F2
14443  48F3
14444  48F4
14445  48F5
14446  48F6
14447  48F7
14448  48F8
14449  48F9
14450  48FA
14451  48FB
14452  48FC
14453  48FD
14454  48FE
14455  48FF
14456  4900
14457  4901
14458  4902
14459  4903
14460  4904
14461  4905
14462  4906
14463  4907
14464  4908
14465  4909
14466  490A
14467  490B
14468  490C
14469  490D
14470  490E
14471  490F
14472  4910
14473  4911
14474  4912
14475  4913
14476  4914
14477  4915
14478  4916
14479  4917
14480  4918
14481  4919
14482  491A
14483  491B
14484  491C
14485  491D
14486  491E
14487  491F
14488  4920
14489  4921
14490  4922
14491  4923
14492  4924
14493  4925
14494  4926
14495  4927
14496  4928
14497  4929
14498  492A
14499  492B
14500  492C
14501  492D
14502  492E
14503  492F
14504  4930
14505  4931
14506  4932
14507  4933
14508  4934
14509  4935
14510  4936
14511  4937
14512  4938
14513  4939
14514  493A
14515  493B
14516  493C
14517  493D
14518  493E
14519  493F
14520  4940
14521  4941
14522  4942
14523  4943
14524  4944
14525  4945
14526  4946
14527  4947
14528  4948
14529  4949
14530  494A
14531  494B
14532  494C
14533  494D
14534  494E
14535  494F
14536  4950
14537  4951
14538  4952
14539  4953
14540  4954
14541  4955
14542  4956
14543  4957
14544  4958
14545  4959
14546  495A
14547  495B
14548  495C
14549  495D
14550  495E
14551  495F
14552  4960
14553  4961
14554  4962
14555  4963
14556  4964
14557  4965
14558  4966
14559  4967
14560  4968
14561  4969
14562  496A
14563  496B
14564  496C
14565  496D
14566  496E
14567  496F
14568  4970
14569  4971
14570  4972
14571  4973
14572  4974
14573  4975
14574  4976
14575  4977
14576  4978
14577  4979
14578  497A
14579  497B
14580  497C
14581  497D
14582  497E
14583  497F
14584  4980
14585  4981
14586  4982
14587  4983
14588  4984
14589  4985
14590  4986
14591  4987
14592  4988
14593  4989
14594  498A
14595  498B
14596  498C
14597  498D
14598  498E
14599  498F
14600  4990
14601  4991
14602  4992
14603  4993
14604  4994
14605  4995
14606  4996
14607  4997
14608  4998
14609  4999
14610  499A
14611  499B
14612  499C
14613  499D
14614  499E
14615  499F
14616  49A0
14617  49A1
14618  49A2
14619  49A3
14620  49A4
14621  49A5
14622  49A6
14623  49A7
14624  49A8
14625  49A9
14626  49AA
14627  49AB
14628  49AC
14629  49AD
14630  49AE
14631  49AF
14632  49B0
14633  49B1
14634  49B2
14635  49B3
14636  49B4
14637  49B5
14638  49B6
14639  49B7
14640  49B8
14641  49B9
14642  49BA
14643  49BB
14644  49BC
14645  49BD
14646  49BE
14647  49BF
14648  49C0
14649  49C1
14650  49C2
14651  49C3
14652  49C4
14653  49C5
14654  49C6
14655  49C7
14656  49C8
14657  49C9
14658  49CA
14659  49CB
14660  49CC
14661  49CD
14662  49CE
14663  49CF
14664  49D0
14665  49D1
14666  49D2
14667  49D3
14668  49D4
14669  49D5
14670  49D6
14671  49D7
14672  49D8
14673  49D9
14674  49DA
14675  49DB
14676  49DC
14677  49DD
14678  49DE
14679  49DF
14680  49E0
14681  49E1
14682  49E2
14683  49E3
14684  49E4
14685  49E5
14686  49E6
14687  49E7
14688  49E8
14689  49E9
14690  49EA
14691  49EB
14692  49EC
14693  49ED
14694  49EE
14695  49EF
14696  49F0
14697  49F1
14698  49F2
14699  49F3
14700  49F4
14701  49F5
14702  49F6
14703  49F7
14704  49F8
14705  49F9
14706  49FA
14707  49FB
14708  49FC
14709  49FD
14710  49FE
14711  49FF
14712  4A00
14713  4A01
14714  4A02
14715  4A03
14716  4A04
14717  4A05
14718  4A06
14719  4A07
14720  4A08
14721  4A09
14722  4A0A
14723  4A0B
14724  4A0C
14725  4A0D
14726  4A0E
14727  4A0F
14728  4A10
14729  4A11
14730  4A12
14731  4A13
14732  4A14
14733  4A15
14734  4A16
14735  4A17
14736  4A18
14737  4A19
14738  4A1A
14739  4A1B
14740  4A1C
14741  4A1D
14742  4A1E
14743  4A1F
14744  4A20
14745  4A21
14746  4A22
14747  4A23
14748  4A24
14749  4A25
14750  4A26
14751  4A27
14752  4A28
14753  4A29
14754  4A2A
14755  4A2B
14756  4A2C
14757  4A2D
14758  4A2E
14759  4A2F
14760  4A30
14761  4A31
14762  4A32
14763  4A33
14764  4A34
14765  4A35
14766  4A36
14767  4A37
14768  4A38
14769  4A39
14770  4A3A
14771  4A3B
14772  4A3C
14773  4A3D
14774  4A3E
14775  4A3F
14776  4A40
14777  4A41
14778  4A42
14779  4A43
14780  4A44
14781  4A45
14782  4A46
14783  4A47
14784  4A48
14785  4A49
14786  4A4A
14787  4A4B
14788  4A4C
14789  4A4D
14790  4A4E
14791  4A4F
14792  4A50
14793  4A51
14794  4A52
14795  4A53
14796  4A54
14797  4A55
14798  4A56
14799  4A57
14800  4A58
14801  4A59
14802  4A5A
14803  4A5B
14804  4A5C
14805  4A5D
14806  4A5E
14807  4A5F
14808  4A60
14809  4A61
14810  4A62
14811  4A63
14812  4A64
14813  4A65
14814  4A66
14815  4A67
14816  4A68
14817  4A69
14818  4A6A
14819  4A6B
14820  4A6C
14821  4A6D
14822  4A6E
14823  4A6F
14824  4A70
14825  4A71
14826  4A72
14827  4A73
14828  4A74
14829  4A75
14830  4A76
14831  4A77
14832  4A78
14833  4A79
14834  4A7A
14835  4A7B
14836  4A7C
14837  4A7D
14838  4A7E
14839  4A7F
14840  4A80
14841  4A81
14842  4A82
14843  4A83
14844  4A84
14845  4A85
14846  4A86
14847  4A87
14848  4A88
14849  4A89
14850  4A8A
14851  4A8B
14852  4A8C
14853  4A8D
14854  4A8E
14855  4A8F
14856  4A90
14857  4A91
14858  4A92
14859  4A93
14860  4A94
14861  4A95
14862  4A96
14863  4A97
14864  4A98
14865  4A99
14866  4A9A
14867  4A9B
14868  4A9C
14869  4A9D
14870  4A9E
14871  4A9F
14872  4AA0
14873  4AA1
14874  4AA2
14875  4AA3
14876  4AA4
14877  4AA5
14878  4AA6
14879  4AA7
14880  4AA8
14881  4AA9
14882  4AAA
14883  4AAB
14884  4AAC
14885  4AAD
14886  4AAE
14887  4AAF
14888  4AB0
14889  4AB1
14890  4AB2
14891  4AB3
14892  4AB4
14893  4AB5
14894  4AB6
14895  4AB7
14896  4AB8
14897  4AB9
14898  4ABA
14899  4ABB
14900  4ABC
14901  4ABD
14902  4ABE
14903  4ABF
14904  4AC0
14905  4AC1
14906  4AC2
14907  4AC3
14908  4AC4
14909  4AC5
14910  4AC6
14911  4AC7
14912  4AC8
14913  4AC9
14914  4ACA
14915  4ACB
14916  4ACC
14917  4ACD
14918  4ACE
14919  4ACF
14920  4AD0
14921  4AD1
14922  4AD2
14923  4AD3
14924  4AD4
14925  4AD5
14926  4AD6
14927  4AD7
14928  4AD8
14929  4AD9
14930  4ADA
14931  4ADB
14932  4ADC
14933  4ADD
14934  4ADE
14935  4ADF
14936  4AE0
14937  4AE1
14938  4AE2
14939  4AE3
14940  4AE4
14941  4AE5
14942  4AE6
14943  4AE7
14944  4AE8
14945  4AE9
14946  4AEA
14947  4AEB
14948  4AEC
14949  4AED
14950  4AEE
14951  4AEF
14952  4AF0
14953  4AF1
14954  4AF2
14955  4AF3
14956  4AF4
14957  4AF5
14958  4AF6
14959  4AF7
14960  4AF8
14961  4AF9
14962  4AFA
14963  4AFB
14964  4AFC
14965  4AFD
14966  4AFE
14967  4AFF
14968  4B00
14969  4B01
14970  4B02
14971  4B03
14972  4B04
14973  4B05
14974  4B06
14975  4B07
14976  4B08
14977  4B09
14978  4B0A
14979  4B0B
14980  4B0C
14981  4B0D
14982  4B0E
14983  4B0F
14984  4B10
14985  4B11
14986  4B12
14987  4B13
14988  4B14
14989  4B15
14990  4B16
14991  4B17
14992  4B18
14993  4B19
14994  4B1A
14995  4B1B
14996  4B1C
14997  4B1D
14998  4B1E
14999  4B1F
15000  4B20
15001  4B21
15002  4B22
15003  4B23
15004  4B24
15005  4B25
15006  4B26
15007  4B27
15008  4B28
15009  4B29
15010  4B2A
15011  4B2B
15012  4B2C
15013  4B2D
15014  4B2E
15015  4B2F
15016  4B30
15017  4B31
15018  4B32
15019  4B33
15020  4B34
15021  4B35
15022  4B36
15023  4B37
15024  4B38
15025  4B39
15026  4B3A
15027  4B3B
15028  4B3C
15029  4B3D
15030  4B3E
15031  4B3F
15032  4B40
15033  4B41
15034  4B42
15035  4B43
15036  4B44
15037  4B45
15038  4B46
15039  4B47
15040  4B48
15041  4B49
15042  4B4A
15043  4B4B
15044  4B4C
15045  4B4D
15046  4B4E
15047  4B4F
15048  4B50
15049  4B51
15050  4B52
15051  4B53
15052  4B54
15053  4B55
15054  4B56
15055  4B57
15056  4B58
15057  4B59
15058  4B5A
15059  4B5B
15060  4B5C
15061  4B5D
15062  4B5E
15063  4B5F
15064  4B60
15065  4B61
15066  4B62
15067  4B63
15068  4B64
15069  4B65
15070  4B66
15071  4B67
15072  4B68
15073  4B69
15074  4B6A
15075  4B6B
15076  4B6C
15077  4B6D
15078  4B6E
15079  4B6F
15080  4B70
15081  4B71
15082  4B72
15083  4B73
15084  4B74
15085  4B75
15086  4B76
15087  4B77
15088  4B78
15089  4B79
15090  4B7A
15091  4B7B
15092  4B7C
15093  4B7D
15094  4B7E
15095  4B7F
15096  4B80
15097  4B81
15098  4B82
15099  4B83
15100  4B84
15101  4B85
15102  4B86
15103  4B87
15104  4B88
15105  4B89
15106  4B8A
15107  4B8B
15108  4B8C
15109  4B8D
15110  4B8E
15111  4B8F
15112  4B90
15113  4B91
15114  4B92
15115  4B93
15116  4B94
15117  4B95
15118  4B96
15119  4B97
15120  4B98
15121  4B99
15122  4B9A
15123  4B9B
15124  4B9C
15125  4B9D
15126  4B9E
15127  4B9F
15128  4BA0
15129  4BA1
15130  4BA2
15131  4BA3
15132  4BA4
15133  4BA5
15134  4BA6
15135  4BA7
15136  4BA8
15137  4BA9
15138  4BAA
15139  4BAB
15140  4BAC
15141  4BAD
15142  4BAE
15143  4BAF
15144  4BB0
15145  4BB1
15146  4BB2
15147  4BB3
15148  4BB4
15149  4BB5
15150  4BB6
15151  4BB7
15152  4BB8
15153  4BB9
15154  4BBA
15155  4BBB
15156  4BBC
15157  4BBD
15158  4BBE
15159  4BBF
15160  4BC0
15161  4BC1
15162  4BC2
15163  4BC3
15164  4BC4
15165  4BC5
15166  4BC6
15167  4BC7
15168  4BC8
15169  4BC9
15170  4BCA
15171  4BCB
15172  4BCC
15173  4BCD
15174  4BCE
15175  4BCF
15176  4BD0
15177  4BD1
15178  4BD2
15179  4BD3
15180  4BD4
15181  4BD5
15182  4BD6
15183  4BD7
15184  4BD8
15185  4BD9
15186  4BDA
15187  4BDB
15188  4BDC
15189  4BDD
15190  4BDE
15191  4BDF
15192  4BE0
15193  4BE1
15194  4BE2
15195  4BE3
15196  4BE4
15197  4BE5
15198  4BE6
15199  4BE7
15200  4BE8
15201  4BE9
15202  4BEA
15203  4BEB
15204  4BEC
15205  4BED
15206  4BEE
15207  4BEF
15208  4BF0
15209  4BF1
15210  4BF2
15211  4BF3
15212  4BF4
15213  4BF5
15214  4BF6
15215  4BF7
15216  4BF8
15217  4BF9
15218  4BFA
15219  4BFB
15220  4BFC
15221  4BFD
15222  4BFE
15223  4BFF
15224  4C00
15225  4C01
15226  4C02
15227  4C03
15228  4C04
15229  4C05
15230  4C06
15231  4C07
15232  4C08
15233  4C09
15234  4C0A
15235  4C0B
15236  4C0C
15237  4C0D
15238  4C0E
15239  4C0F
15240  4C10
15241  4C11
15242  4C12
15243  4C13
15244  4C14
15245  4C15
15246  4C16
15247  4C17
15248  4C18
15249  4C19
15250  4C1A
15251  4C1B
15252  4C1C
15253  4C1D
15254  4C1E
15255  4C1F
15256  4C20
15257  4C21
15258  4C22
15259  4C23
15260  4C24
15261  4C25
15262  4C26
15263  4C27
15264  4C28
15265  4C29
15266  4C2A
15267  4C2B
15268  4C2C
15269  4C2D
15270  4C2E
15271  4C2F
15272  4C30
15273  4C31
15274  4C32
15275  4C33
15276  4C34
15277  4C35
15278  4C36
15279  4C37
15280  4C38
15281  4C39
15282  4C3A
15283  4C3B
15284  4C3C
15285  4C3D
15286  4C3E
15287  4C3F
15288  4C40
15289  4C41
15290  4C42
15291  4C43
15292  4C44
15293  4C45
15294  4C46
15295  4C47
15296  4C48
15297  4C49
15298  4C4A
15299  4C4B
15300  4C4C
15301  4C4D
15302  4C4E
15303  4C4F
15304  4C50
15305  4C51
15306  4C52
15307  4C53
15308  4C54
15309  4C55
15310  4C56
15311  4C57
15312  4C58
15313  4C59
15314  4C5A
15315  4C5B
15316  4C5C
15317  4C5D
15318  4C5E
15319  4C5F
15320  4C60
15321  4C61
15322  4C62
15323  4C63
15324  4C64
15325  4C65
15326  4C66
15327  4C67
15328  4C68
15329  4C69
15330  4C6A
15331  4C6B
15332  4C6C
15333  4C6D
15334  4C6E
15335  4C6F
15336  4C70
15337  4C71
15338  4C72
15339  4C73
15340  4C74
15341  4C75
15342  4C76
15343  4C77
15344  4C78
15345  4C79
15346  4C7A
15347  4C7B
15348  4C7C
15349  4C7D
15350  4C7E
15351  4C7F
15352  4C80
15353  4C81
15354  4C82
15355  4C83
15356  4C84
15357  4C85
15358  4C86
15359  4C87
15360  4C88
15361  4C89
15362  4C8A
15363  4C8B
15364  4C8C
15365  4C8D
15366  4C8E
15367  4C8F
15368  4C90
15369  4C91
15370  4C92
15371  4C93
15372  4C94
15373  4C95
15374  4C96
15375  4C97
15376  4C98
15377  4C99
15378  4C9A
15379  4C9B
15380  4C9C
15381  4C9D
15382  4C9E
15383  4C9F
15384  4CA0
15385  4CA1
15386  4CA2
15387  4CA3
15388  4CA4
15389  4CA5
15390  4CA6
15391  4CA7
15392  4CA8
15393  4CA9
15394  4CAA
15395  4CAB
15396  4CAC
15397  4CAD
15398  4CAE
15399  4CAF
15400  4CB0
15401  4CB1
15402  4CB2
15403  4CB3
15404  4CB4
15405  4CB5
15406  4CB6
15407  4CB7
15408  4CB8
15409  4CB9
15410  4CBA
15411  4CBB
15412  4CBC
15413  4CBD
015414  000557        
015415  000558  var hFonts[54] ;
015416  000559  var stringsCV[54] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
15417  26CE
15418  26CF
15419  26D0
15420  26D1
15421  26D2
15422  26D3
15423  26D4
15424  26D5
15425  26D6
15426  26D7
15427  26D8
15428  26D9
15429  26DA
15430  26DB
15431  26DC
15432  26DD
15433  26DE
15434  26DF
15435  26E0
15436  26E1
15437  26E2
15438  26E3
15439  26E4
15440  26E5
15441  26E6
15442  26E7
15443  26E8
15444  26E9
15445  26EA
15446  26EB
15447  26EC
15448  26ED
15449  26EE
15450  26EF
15451  26F0
15452  26F1
15453  26F2
15454  26F3
15455  26F4
15456  26F5
15457  26F6
15458  26F7
15459  26F8
15460  26F9
15461  26FA
15462  26FB
15463  26FC
15464  26FD
15465  26FE
15466  26FF
15467  2700
15468  2701
15469  2702
15470  2703
15471  2704
15472  2705
15473  2706
15474  2707
15475  2708
15476  2709
15477  270A
15478  270B
15479  270C
15480  270D
15481  270E
15482  270F
15483  2710
15484  2711
15485  2712
15486  2713
15487  2714
15488  2715
15489  2716
15490  2717
15491  2718
15492  2719
15493  271A
15494  271B
15495  271C
15496  271D
15497  271E
15498  271F
15499  2720
15500  2721
15501  2722
15502  2723
15503  2724
15504  2725
15505  2726
15506  2727
15507  2728
15508  2729
15509  272A
15510  272B
15511  272C
15512  272D
15513  272E
15514  272F
15515  2730
15516  2731
15517  2732
15518  2733
15519  2734
15520  2735
15521  2736
15522  2737
15523  2738
15524  2739
015525  000560  // Start P2.inc
015526  000561  var oObjects[MaxTotObjects+1] ;                 // address of objects
015527  000562  var CurrentForm ;
015528  000563  var TouchXpos, TouchYpos ;
015529  000564  var InputType, TouchState, CurInputData, pInputIndex ;
015530  000565  var comRX[40], cmd[CMDLenMAX] ;
015531  000566        
015532  000567  var InputCS, OutputCS ;
015533  000568        
015534  000569        
015535  000570        
015536  000571  func seroutCS(var op)
015537  000572      serout(op) ;
015538  000573      OutputCS ^= op ;
015539  000574  endfunc
015540  000575        
015541  000576  func nak0()
015542  000577      serout(NAK) ;
015543  000578      InputCS := 0 ;
015544  000579  endfunc
015545  000580        
015546  000581  func seroutOcs()
015547  000582      serout(OutputCS) ;
015548  000583      OutputCS := 0 ;
015549  000584  endfunc
015550  000585        
015551  000586  func SendReport(var id, var objt, var objn, var val)
015552  000587      seroutCS(id) ;
015553  000588      seroutCS(objt) ;
015554  000589      seroutCS(objn) ;
015555  000590      seroutCS(val >> 8) ; // first 8 bits
015556  000591      seroutCS(val) ;
015557  000592      seroutOcs() ;
015558  000593  endfunc
015559  000594        
015560  000595        
015561  000596  func ReadObject(var ObjectType, var ObjectIdx)
015562  000597      var j, k, Objects ;
015563  000598      Objects := *(oObjects+ObjectType) ;
015564  000599        
015565  000600      j := 2 + ObjectIdx * 2 + Objects ;
015566  000601       if (ObjectType == tForm)
015567  000602          k := CurrentForm ;
015568  000603      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
015569  000604          k := img_GetWord(hndl, *j, IMAGE_TAG2);
015570  000605      else if (ObjectType == tStrings)
015571  000606          k := stringsCV[ObjectIdx];
015572  000607          else
015573  000608          k := img_GetWord(hndl, *j, IMAGE_INDEX);
015574  000609          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
015575  000610                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
015576  000611      endif
015577  000612      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
015578  000613  endfunc
015579  000614        
015580  000615        
015581  000616  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
015582  000617      var i, j, k, Objects ;
015583  000618      ObjectType &= 0x3f ;
015584  000619      if (ObjectType == tForm)
015585  000620          ActivateForm(ObjectIdx) ;
015586  000621      else
015587  000622          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
015588  000623          i := *(Objects) ;
015589  000624          switch (ObjectType)
015590  000625              case tWinButton :
015591  000626                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
015592  000627                  break ;
015593  000628              case tUserButton :
015594  000629                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
015595  000630                  break ;
015596  000631              default : j := -1 ;
015597  000632          endswitch
015598  000633          if (j != -1)
015599  000634              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
015600  000635              NewVal := NewVal << 1 ;
015601  000636              if (OVF())      // button group index change
015602  000637                  if (*(j+InputData+Ofs_IPD_P1))
015603  000638                      k &= 1 ;    // mask off old group index for momentary
015604  000639                  else
015605  000640                      k &= 3 ;    // mask off old group index for toggle
015606  000641                  endif
015607  000642              else            // normal set
015608  000643                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
015609  000644                  k &= 0xfffc ;    // retain only group index for state set
015610  000645              endif
015611  000646              NewVal |= k ;
015612  000647          endif
015613  000648           if (ObjectType == tLeddigits)
015614  000649              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
015615  000650              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015616  000651          else if (ObjectType == tStrings)
015617  000652              PrintStrings(ObjectIdx, NewVal, 0);
015618  000653          else
015619  000654              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
015620  000655              img_Show(hndl, i) ; // will only display if form is current
015621  000656          endif
015622  000657      endif
015623  000658  endfunc
015624  000659        
015625  000660  func TurnOffButtons(var group)
015626  000661      var j, k, l;
015627  000662      for (j := 0; j < nInputs; j++)
015628  000663          k := j*IPDatasize ;
015629  000664          if (*(InputData+k+Ofs_IPD_P2) == group)
015630  000665              l := -1 ;
015631  000666               if (*(InputData+k) == tWinButton)
015632  000667                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015633  000668                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
015634  000669                  img_Show(hndl, l);      // only shows on current form
015635  000670              else if (*(InputData+k) == tUserButton)
015636  000671                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015637  000672                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
015638  000673                  img_Show(hndl, l);      // only shows on current form
015639  000674              endif
015640  000675          endif
015641  000676      next
015642  000677  endfunc
015643  000678        
015644  000679        
015645  000680  // WARNING, this code will crash if newval exceeds maximum displayable number
015646  000681  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
015647  000682      var i, j, k, l, lb, newval ;
015648  000683      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
015649  000684      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
015650  000685      i := -1 ;
015651  000686      j := *(typeptr) ;
015652  000687      repeat
015653  000688          typeptr += 2 ;
015654  000689          i++ ;
015655  000690          until (*(typeptr) == imgidx);
015656  000691      j := setptr + i*10 ;
015657  000692        
015658  000693      imgidx++ ;
015659  000694      l := 1 ;
015660  000695      for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
015661  000696          l *= 10 ;
015662  000697      next
015663  000698      lb := *(j+Ofs_Digits_LeadingBlanks) ;
015664  000699      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
015665  000700          k := newval / l ;
015666  000701          newval -= k * l ;
015667  000702          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
015668  000703              if (k == 0)
015669  000704                  k := 10 ;
015670  000705              else
015671  000706                  lb := 0 ;
015672  000707              endif
015673  000708          endif
015674  000709          l /= 10 ;
015675  000710          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
015676  000711          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
015677  000712          img_Show(hndl, imgidx);
015678  000713      next
015679  000714  endfunc
015680  000715        
015681  000716        
015682  000717  func ActivateForm(var newform)
015683  000718      var i, j, *p ;
015684  000719        
015685  000720      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
015686  000721          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
015687  000722              if (img_GetWord(hndl, i, IMAGE_TAG))
015688  000723                  img_Disable(hndl,i) ;
015689  000724              endif
015690  000725          next
015691  000726      endif
015692  000727      CurrentForm := newform ;
015693  000728      // display newform image or clear to image color
015694  000729      if (FormBGcolors[CurrentForm] != ColorBGimage)
015695  000730          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
015696  000731          gfx_Cls() ;
015697  000732          DoGFXObjects() ;                                    // display GFX 'widgets'
015698  000733      endif
015699  000734        
015700  000735      // enable inputs
015701  000736      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
015702  000737          j := img_GetWord(hndl, i, IMAGE_TAG) ;
015703  000738          if (j)
015704  000739              j-- ;
015705  000740              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
015706  000741              //if (j != tKeyboard)
015707  000742              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
015708  000743                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
015709  000744              endif
015710  000745              img_Show(hndl,i) ; // show initialy, if required
015711  000746              if (j == tForm)
015712  000747                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
015713  000748              else if (j == tLeddigits)
015714  000749                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015715  000750              endif
015716  000751          endif
015717  000752      next
015718  000753      for (i := 0; i < nStrings; i++)
015719  000754          if (stringsCV[i] != -1)
015720  000755              WriteObject(tStrings, i, stringsCV[i]) ;
015721  000756          endif
015722  000757      next
015723  000758        
015724  000759  endfunc
015725  000760        
015726  000761  func UpdateObjects(var newval)
015727  000762      var IPidx, otherOBJ ;
015728  000763      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
015729  000764        
015730  000765          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
015731  000766              img_Show(hndl, *(pInputIndex));      // only shows on current form
015732  000767          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
015733  000768              if (*(CurInputData+Ofs_IPD_P1))
015734  000769                  newval &= 1;
015735  000770              else
015736  000771                  newval &= 3;
015737  000772              endif
015738  000773              if (newval > 1) newval := 1;
015739  000774          endif
015740  000775          IPidx := *(CurInputData+TouchState) ;
015741  000776          while(IPidx != 0)
015742  000777              otherOBJ := IPidx + InputData;
015743  000778              if (*(otherOBJ) == OT_REPORT)
015744  000779          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
015745  000780              else if (*(otherOBJ) == OT_MAGIC)
015746  000781                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
015747  000782                  IPidx(newval) ;
015748  000783              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
015749  000784                  if (*(otherOBJ) == OT_ACTIVATE)
015750  000785                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
015751  000786                      InputType := tForm ;
015752  000787                  else if (*(otherOBJ) == OT_SETCONST)
015753  000788                      newval := *(otherOBJ+Ofs_IPD_P3) ;
015754  000789                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015755  000790                  else if (*(otherOBJ) == OT_SETANOTHER)
015756  000791                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015757  000792                  else if (*(otherOBJ) == OT_PREVFRAME)
015758  000793                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
015759  000794                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
015760  000795                      endif
015761  000796                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015762  000797                  else if (*(otherOBJ) == OT_NEXTFRAME)
015763  000798                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
015764  000799                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
015765  000800                      endif
015766  000801                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015767  000802                  else if (*(otherOBJ) == OT_PREVSTRING)
015768  000803                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
015769  000804                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
015770  000805                      endif
015771  000806                  else if (*(otherOBJ) == OT_NEXTSTRING)
015772  000807                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
015773  000808                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
015774  000809                      endif
015775  000810                  endif
015776  000811              endif
015777  000812              IPidx := *(otherOBJ+TouchState) ;
015778  000813          wend
015779  000814      endif
015780  000815  endfunc
015781  000816        
015782  000817  // End P2.inc
015783  000818  func DoGFXObjects()
015784  000819  endfunc
015785  000820        
015786  000821  // Start P3.inc
015787  000822  func main()
015788  000823      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
015789  000824        
015790  000825      putstr("Mounting...\n");
015791  000826      if (!(file_Mount()))
015792  000827          while(!(file_Mount()))
015793  000828              putstr("Drive not mounted...");
015794  000829              pause(200);
015795  000830              gfx_Cls();
015796  000831              pause(200);
015797  000832          wend
015798  000833      endif
015799  000834  //    gfx_MoveTo(0, 0);
015800  000835  //    print(mem_Heap()," ") ;
015801  000836  //    gfx_TransparentColour(0x0020);
015802  000837  //    gfx_Transparency(ON);
015803  000838        
015804  000839      gfx_ScreenMode(LANDSCAPE) ;
015805  000840        
015806  000841      // open image control
015807  000842      hndl := file_LoadImageControl("RepRap_T.dat", "RepRap_T.gci", 1);
015808  000843        
015809  000844      // init 'constants'
015810  000845  // End P3.inc
015811  000846        
015812  000847      oObjects[tDipSwitch] := oDipSwitchs ;
015813  000848      oObjects[tKnob] := oKnobs ;
015814  000849      oObjects[tRockerSwitch] := oRockerSwitchs ;
015815  000850      oObjects[tRotarySwitch] := oRotarySwitchs ;
015816  000851      oObjects[tGSlider] := oGSliders ;
015817  000852      oObjects[tTrackbar] := oTrackbars ;
015818  000853      oObjects[tWinButton] := oWinButtons ;
015819  000854      oObjects[tAngularmeter] := oAngularmeters ;
015820  000855      oObjects[tCoolgauge] := oCoolgauges ;
015821  000856      oObjects[tCustomdigits] := oCustomdigitss ;
015822  000857      oObjects[tForm] := oForms ;
015823  000858      oObjects[tGauge] := oGauges ;
015824  000859      oObjects[tImage] := oImages ;
015825  000860      oObjects[tKeyboard] := oKeyboards ;
015826  000861      oObjects[tLed] := oLeds ;
015827  000862      oObjects[tLeddigits] := oLeddigitss ;
015828  000863      oObjects[tMeter] := oMeters ;
015829  000864      oObjects[tStrings] := oStringss ;
015830  000865      oObjects[tThermometer] := oThermometers ;
015831  000866      oObjects[tUserled] := oUserleds ;
015832  000867      oObjects[tVideo] := oVideos ;
015833  000868      oObjects[tStaticText] := oStaticTexts ;
015834  000869      oObjects[tSounds] := oSoundss ;
015835  000870      oObjects[tTimer] := oTimers ;
015836  000871      oObjects[tSpectrum] := oSpectrums ;
015837  000872      oObjects[tTank] := oTanks ;
015838  000873      oObjects[tUserImages] := oUserImagess ;
015839  000874      oObjects[tPinOutput] := oPinOutputs ;
015840  000875      oObjects[tPinInput] := oPinInputs ;
015841  000876      oObjects[t4Dbutton] := o4Dbuttons ;
015842  000877      oObjects[tAniButton] := oAniButtons ;
015843  000878      oObjects[tColorPicker] := oColorPickers ;
015844  000879      oObjects[tUserButton] := oUserButtons ;
015845  000880      hFonts[0] := file_LoadImageControl("RepRap_T.d03", "RepRap_T.g03", 1)  ;
015846  000881      hFonts[1] := file_LoadImageControl("RepRap_T.d01", "RepRap_T.g01", 1)  ;
015847  000882      hFonts[2] := file_LoadImageControl("RepRap_T.d02", "RepRap_T.g02", 1)  ;
015848  000883      hFonts[3] := FONT3 ;
015849  000884      hFonts[4] := FONT3 ;
015850  000885      hFonts[6] := FONT3 ;
015851  000886      hFonts[12] := file_LoadImageControl("RepRap_T.d05", "RepRap_T.g05", 1)  ;
015852  000887      hFonts[13] := file_LoadImageControl("RepRap_T.d0C", "RepRap_T.g0C", 1)  ;
015853  000888      hFonts[14] := FONT3 ;
015854  000889      hFonts[15] := FONT3 ;
015855  000890      hFonts[16] := FONT3 ;
015856  000891      hFonts[24] := FONT3 ;
015857  000892      hFonts[25] := file_LoadImageControl("RepRap_T.d06", "RepRap_T.g06", 1)  ;
015858  000893      hFonts[31] := file_LoadImageControl("RepRap_T.d09", "RepRap_T.g09", 1)  ;
015859  000894      hFonts[33] := file_LoadImageControl("RepRap_T.d08", "RepRap_T.g08", 1)  ;
015860  000895      hFonts[35] := file_LoadImageControl("RepRap_T.d07", "RepRap_T.g07", 1)  ;
015861  000896      hFonts[37] := file_LoadImageControl("RepRap_T.d04", "RepRap_T.g04", 1)  ;
015862  000897      hFonts[49] := file_LoadImageControl("RepRap_T.d0@", "RepRap_T.g0@", 1)  ;
015863  000898      hFonts[50] := file_LoadImageControl("RepRap_T.d0B", "RepRap_T.g0B", 1)  ;
015864  000899      hFonts[51] := FONT3 ;
015865  000900      hFonts[52] := FONT3 ;
015866  000901      hFonts[7] := hFonts[37] ;
015867  000902      hFonts[8] := hFonts[37] ;
015868  000903      hFonts[9] := hFonts[0] ;
015869  000904      hFonts[10] := hFonts[12] ;
015870  000905      hFonts[11] := hFonts[12] ;
015871  000906      hFonts[17] := hFonts[12] ;
015872  000907      hFonts[18] := hFonts[12] ;
015873  000908      hFonts[19] := hFonts[12] ;
015874  000909      hFonts[26] := hFonts[25] ;
015875  000910      hFonts[27] := hFonts[25] ;
015876  000911      hFonts[29] := hFonts[12] ;
015877  000912      hFonts[30] := hFonts[12] ;
015878  000913      hFonts[32] := hFonts[31] ;
015879  000914      hFonts[34] := hFonts[0] ;
015880  000915      hFonts[36] := hFonts[0] ;
015881  000916      hFonts[38] := hFonts[37] ;
015882  000917      hFonts[39] := hFonts[37] ;
015883  000918      hFonts[40] := hFonts[0] ;
015884  000919      hFonts[41] := hFonts[0] ;
015885  000920      hFonts[42] := hFonts[0] ;
015886  000921      hFonts[43] := hFonts[37] ;
015887  000922      hFonts[44] := hFonts[37] ;
015888  000923      hFonts[45] := hFonts[37] ;
015889  000924      hFonts[46] := hFonts[13] ;
015890  000925      hFonts[47] := hFonts[13] ;
015891  000926      hFonts[48] := hFonts[13] ;
015892  000927      hFonts[53] := hFonts[50] ;
015893  000928  // Start P4.inc
015894  000929      hstrings := file_Open("RepRap_T.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
015895  000930      // init comms
015896  000931      com_Init(comRX,CMDLenMAX,0);
015897  000932      com_SetBaud(COM0,19886);
015898  000933      com_TXbuffer(comTX, 100, 0);
015899  000934      snd_BufSize(2) ;
015900  000935      // tag 'real' objects
015901  000936      for (i := 0; i <= MaxTotObjects; i++)
015902  000937          if (   (i != tSounds)
015903  000938              && (i != tTimer)
015904  000939              && (i != tPinOutput)
015905  000940              && (i != tPinInput) )
015906  000941              TouchXpos := oObjects[i] ;
015907  000942              TouchYpos := *(TouchXpos) ;
015908  000943              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
015909  000944                  oldn := *(TouchXpos+ImageTouched*2) ;
015910  000945                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
015911  000946                  if (oldn != -1)
015912  000947                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
015913  000948                      img_Disable(hndl, oldn) ;
015914  000949                  endif
015915  000950              next
015916  000951          endif
015917  000952      next
015918  000953        
015919  000954      // display initial form
015920  000955      CurrentForm := -1 ;
015921  000956      ActivateForm(0) ; // need to change this according to first actual form
015922  000957        
015923  000958  // End P4.inc
015924  000959  // Start P5.inc
015925  000960      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
015926  000961      oldn := -1 ;
015927  000962      repeat
015928  000963        
015929  000964          // check comms for command, how to NAK invalid command
015930  000965          if (com_Count() != 0)
015931  000966              i := serin() ;
015932  000967              InputCS ^= i ;               // update checksum
015933  000968              if (   (cmdi > 2)
015934  000969                  && (cmd[0] == WRITE_STRU) )
015935  000970                  j := (cmdi-1) >> 1 + 2 ;
015936  000971                  if (j == CMDLenMAX)    // max length exceeded
015937  000972                      nak0() ;
015938  000973                      cmdi := -1 ;
015939  000974                  else if (cmdi & 1)
015940  000975                      cmd[j] := i ;
015941  000976                      if (cmd[2] == 0)    // if string complete
015942  000977                          if (InputCS)
015943  000978                              nak0() ;
015944  000979                          else
015945  000980                              if (cmd[0] == WRITE_STRU)
015946  000981                              cmd[j] := 0 ;                     // terminate it
015947  000982                              PrintStrings(cmd[1], &cmd[3], 1) ;
015948  000983                              serout(ACK) ;
015949  000984                              else
015950  000985                              endif
015951  000986                          endif
015952  000987                          cmdi := -1 ;
015953  000988                      endif
015954  000989                  else
015955  000990                      cmd[j] := cmd[j] << 8 + i ;
015956  000991                      cmd[2]-- ;          // dec length
015957  000992                  endif
015958  000993                  cmdi++ ;
015959  000994              else // not unicode string
015960  000995                  cmd[cmdi++] := i ;
015961  000996                   if (cmd[0] == WRITE_STR)                  // Ansi String
015962  000997                      if (cmdi == CMDLenMAX)      // max length exceeded
015963  000998                          nak0() ;
015964  000999                          cmdi := 0 ;
015965  001000                      else if (cmdi > 2)
015966  001001                          if (cmd[2] == -1)
015967  001002                              if (InputCS)
015968  001003                                  nak0() ;
015969  001004                              else
015970  001005                                  if (cmd[0] == WRITE_STR)
015971  001006                                  cmd[cmdi-1] := 0 ;                     // terminate it
015972  001007                                  PrintStrings(cmd[1], &cmd[3], 1) ;
015973  001008                                  serout(ACK) ;
015974  001009                                  else
015975  001010                                  endif
015976  001011                              endif
015977  001012                              cmdi := 0 ;
015978  001013                          else
015979  001014                              cmd[2]-- ;          // dec length
015980  001015                          endif
015981  001016                      endif
015982  001017                  else if (   (cmd[0] == READ_OBJ)
015983  001018                           && (cmdi == 4)         )
015984  001019                      if (InputCS)
015985  001020                          nak0() ;
015986  001021                      else
015987  001022                          ReadObject(cmd[1], cmd[2]) ;
015988  001023                      endif
015989  001024                      cmdi := 0 ;
015990  001025                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
015991  001026                           && (cmdi == 6)          )
015992  001027                      if (InputCS)
015993  001028                          nak0() ;
015994  001029                      else
015995  001030                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
015996  001031                          serout(ACK) ;
015997  001032                      endif
015998  001033                      cmdi := 0 ;
015999  001034                  else if (   (cmd[0] == WRITE_CONTRAST)
016000  001035                           && (cmdi == 3)         )
016001  001036                      if (InputCS)
016002  001037                          nak0() ;
016003  001038                      else
016004  001039                          gfx_Contrast(cmd[1]) ;
016005  001040                          serout(ACK) ;
016006  001041                      endif
016007  001042                      cmdi := 0 ;
016008  001043                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
016009  001044                      nak0() ;
016010  001045                      cmdi := 0 ;
016011  001046                  endif
016012  001047              endif   // not unicode string
016013  001048          endif   // a character is available
016014  001049        
016015  001050        
016016  001051      // touch code processing
016017  001052        
016018  001053          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
016019  001054          ImageTouched := img_Touched(hndl,-1) ;
016020  001055          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
016021  001056              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
016022  001057                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
016023  001058              endif
016024  001059              if (TouchStatus != TOUCH_RELEASED)        // if not released
016025  001060                  if (oldn != -1)
016026  001061                      ImageTouched := oldn ;
016027  001062                  else
016028  001063                      if (oldn != ImageTouched)
016029  001064                  oldn := ImageTouched ;
016030  001065                          TouchStatus := TOUCH_PRESSED ;
016031  001066                      endif
016032  001067                  endif
016033  001068                  TouchXpos  := touch_Get(TOUCH_GETX);
016034  001069                  TouchYpos  := touch_Get(TOUCH_GETY);
016035  001070                  TouchState := Ofs_IPD_DOWN ;
016036  001071              else
016037  001072                  ImageTouched := oldn ;                     // simulate release of what we touched
016038  001073                  oldn := -1 ;                    // prevent double release
016039  001074                  TouchState := Ofs_IPD_RELEASE ;
016040  001075              endif
016041  001076              if (ImageTouched != -1)
016042  001077                          CurInputData := InputControls[ImageTouched] + InputData;
016043  001078                          InputType := *(CurInputData) ;
016044  001079                          i := InputType ;
016045  001080                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
016046  001081                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
016047  001082              endif
016048  001083          endif
016049  001084   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
016050  001085        
016051  001086          sys_EventsResume() ;
016052  001087      forever
016053  001088        
016054  001089  cDipswitch:
016055  001090        
016056  001091  cKnob:
016057  001092        
016058  001093  cRockerswitch:
016059  001094        
016060  001095  cRotaryswitch:
016061  001096        
016062  001097  cSlider:
016063  001098  cTrackbar:
016064  001099        
016065  001100  c4DButton:
016066  001101  cUserButton:
016067  001102      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
016068  001103      goto gbutton ;
016069  001104  cWinbutton:
016070  001105      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
016071  001106  gbutton:
016072  001107      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
016073  001108      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
016074  001109          if (TouchStatus == TOUCH_RELEASED)
016075  001110              i &= 0xfffe ;
016076  001111              TouchState == Ofs_IPD_DOWN ;
016077  001112          else
016078  001113              i |= 1 ;
016079  001114              TouchState == Ofs_IPD_RELEASE ;
016080  001115          endif
016081  001116      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
016082  001117          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
016083  001118              if ((i & 3) == 3)
016084  001119                  i &= 0xfffc ;
016085  001120              else
016086  001121                  i++ ;
016087  001122              endif
016088  001123          else
016089  001124              i |= 1 ;                                      // make down regardless of current state
016090  001125          endif
016091  001126      else                        // group action, up all other buttons on touch press, reports 0 for button down
016092  001127          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
016093  001128              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
016094  001129          endif
016095  001130          i := (i & 0xfffc) | 2 ;
016096  001131      endif
016097  001132        
016098  001133      UpdateObjects(i) ;
016099  001134  endsub ;
016100  001135        
016101  001136  cAniButton:
016102  001137        
016103  001138  cColorPicker:
016104  001139        
016105  001140  endfunc
016106  001141  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 782 file:RepRap_Touchv1.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 718 file:RepRap_Touchv1.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       13016  0x000032d8 (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 120)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (usage 3)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  382  0x0000017e (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 108)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                302  0x0000012e (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         298  0x0000012a (mem) word (global)  (usage 27)
CurrentForm                          288  0x00000120 (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (usage 3)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (usage 18)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       12384  0x00003060 (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 39)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (usage 27)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                        9707  0x000025ebFormBGcolors                        9707  0x000025eb (mem) word[43] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                          93  0x0000005dFormEndIndex                          93  0x0000005d (mem) word[43] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[43] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[54] (global)  (usage 228)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             218  0x000000da (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm0                                 0  0x00000000 (const ??? 0)  (usage 3)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                              110  0x0000006e (const ??? 0)  (usage 3)
iForm11                               98  0x00000062 (const ??? 0)  (usage 3)
iForm12                               47  0x0000002f (const ??? 0)  (usage 3)
iForm14                               54  0x00000036 (const ??? 0)  (usage 3)
iForm16                              171  0x000000ab (const ??? 0)  (usage 3)
iForm17                              175  0x000000af (const ??? 0)  (usage 3)
iForm18                              178  0x000000b2 (const ??? 0)  (usage 3)
iForm19                               67  0x00000043 (const ??? 0)  (usage 3)
iForm2                                 4  0x00000004 (const ??? 0)  (usage 3)
iForm20                               71  0x00000047 (const ??? 0)  (usage 3)
iForm21                               75  0x0000004b (const ??? 0)  (usage 3)
iForm23                               84  0x00000054 (const ??? 0)  (usage 3)
iForm24                               90  0x0000005a (const ??? 0)  (usage 3)
iForm25                              181  0x000000b5 (const ??? 0)  (usage 3)
iForm26                               93  0x0000005d (const ??? 0)  (usage 3)
iForm27                               99  0x00000063 (const ??? 0)  (usage 3)
iForm28                              120  0x00000078 (const ??? 0)  (usage 3)
iForm29                              127  0x0000007f (const ??? 0)  (usage 3)
iForm30                              136  0x00000088 (const ??? 0)  (usage 3)
iForm31                              140  0x0000008c (const ??? 0)  (usage 3)
iForm32                              144  0x00000090 (const ??? 0)  (usage 3)
iForm33                              148  0x00000094 (const ??? 0)  (usage 3)
iForm34                              159  0x0000009f (const ??? 0)  (usage 3)
iForm35                              163  0x000000a3 (const ??? 0)  (usage 3)
iForm38                              185  0x000000b9 (const ??? 0)  (usage 3)
iForm4                                10  0x0000000a (const ??? 0)  (usage 3)
iForm40                              196  0x000000c4 (const ??? 0)  (usage 3)
iForm41                              221  0x000000dd (const ??? 0)  (usage 3)
iForm5                                16  0x00000010 (const ??? 0)  (usage 3)
iForm6                                19  0x00000013 (const ??? 0)  (usage 3)
iForm7                               167  0x000000a7 (const ??? 0)  (usage 3)
iForm9                                43  0x0000002b (const ??? 0)  (usage 3)
iiLeddigits0                          32  0x00000020 (const ??? 0)  (not used)
iiLeddigits1                          34  0x00000022 (const ??? 0)  (not used)
iiLeddigits2                          36  0x00000024 (const ??? 0)  (not used)
iLeddigits0                           31  0x0000001f (const ??? 0)  (usage 3)
iLeddigits1                           33  0x00000021 (const ??? 0)  (usage 3)
iLeddigits2                           35  0x00000023 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        179  0x000000b3InputControls                        179  0x000000b3 (mem) word[223] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
InputCS                              542  0x0000021e (mem) word (global)  (usage 21)
InputData                            625  0x00000271InputData                            625  0x00000271 (mem) word[3586] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 30)
InputType                            294  0x00000126 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                          91  0x0000005b (const ??? 0)  (usage 3)
iStatictext1                          37  0x00000025 (const ??? 0)  (usage 3)
iStatictext10                         58  0x0000003a (const ??? 0)  (usage 3)
iStatictext13                         88  0x00000058 (const ??? 0)  (usage 3)
iStatictext14                         89  0x00000059 (const ??? 0)  (usage 3)
iStatictext19                         60  0x0000003c (const ??? 0)  (usage 3)
iStatictext2                          38  0x00000026 (const ??? 0)  (usage 3)
iStatictext4                          39  0x00000027 (const ??? 0)  (usage 3)
iStatictext8                          77  0x0000004d (const ??? 0)  (usage 3)
iStatictext9                          59  0x0000003b (const ??? 0)  (usage 3)
iStrings0                           7797  0x00001e75iStrings0                           7797  0x00001e75 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings1                           7823  0x00001e8fiStrings1                           7823  0x00001e8f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings10                          8031  0x00001f5fiStrings10                          8031  0x00001f5f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings11                          8057  0x00001f79iStrings11                          8057  0x00001f79 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings12                          8083  0x00001f93iStrings12                          8083  0x00001f93 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings13                          8109  0x00001fadiStrings13                          8109  0x00001fad (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings14                          8135  0x00001fc7iStrings14                          8135  0x00001fc7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings15                          8161  0x00001fe1iStrings15                          8161  0x00001fe1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings16                          8187  0x00001ffbiStrings16                          8187  0x00001ffb (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings17                          8213  0x00002015iStrings17                          8213  0x00002015 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings18                          8239  0x0000202fiStrings18                          8239  0x0000202f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings19                          8265  0x00002049iStrings19                          8265  0x00002049 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings2                           7849  0x00001ea9iStrings2                           7849  0x00001ea9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings24                          8291  0x00002063iStrings24                          8291  0x00002063 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings25                          8317  0x0000207diStrings25                          8317  0x0000207d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings26                          8343  0x00002097iStrings26                          8343  0x00002097 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings27                          8369  0x000020b1iStrings27                          8369  0x000020b1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings29                          8395  0x000020cbiStrings29                          8395  0x000020cb (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings3                           7875  0x00001ec3iStrings3                           7875  0x00001ec3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings30                          8421  0x000020e5iStrings30                          8421  0x000020e5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings31                          8447  0x000020ffiStrings31                          8447  0x000020ff (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings32                          8473  0x00002119iStrings32                          8473  0x00002119 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings33                          8499  0x00002133iStrings33                          8499  0x00002133 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings34                          8525  0x0000214diStrings34                          8525  0x0000214d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings35                          8551  0x00002167iStrings35                          8551  0x00002167 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings36                          8577  0x00002181iStrings36                          8577  0x00002181 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings37                          8603  0x0000219biStrings37                          8603  0x0000219b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings38                          8629  0x000021b5iStrings38                          8629  0x000021b5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings39                          8655  0x000021cfiStrings39                          8655  0x000021cf (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings4                           7901  0x00001eddiStrings4                           7901  0x00001edd (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings40                          8681  0x000021e9iStrings40                          8681  0x000021e9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings41                          8707  0x00002203iStrings41                          8707  0x00002203 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings42                          8733  0x0000221diStrings42                          8733  0x0000221d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings43                          8759  0x00002237iStrings43                          8759  0x00002237 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings44                          8785  0x00002251iStrings44                          8785  0x00002251 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings45                          8811  0x0000226biStrings45                          8811  0x0000226b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings46                          8837  0x00002285iStrings46                          8837  0x00002285 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings47                          8863  0x0000229fiStrings47                          8863  0x0000229f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings48                          8889  0x000022b9iStrings48                          8889  0x000022b9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings49                          8915  0x000022d3iStrings49                          8915  0x000022d3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings50                          8941  0x000022ediStrings50                          8941  0x000022ed (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings51                          8967  0x00002307iStrings51                          8967  0x00002307 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings52                          8993  0x00002321iStrings52                          8993  0x00002321 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings53                          9019  0x0000233biStrings53                          9019  0x0000233b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings6                           7927  0x00001ef7iStrings6                           7927  0x00001ef7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings7                           7953  0x00001f11iStrings7                           7953  0x00001f11 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings8                           7979  0x00001f2biStrings8                           7979  0x00001f2b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings9                           8005  0x00001f45iStrings9                           8005  0x00001f45 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                         15  0x0000000f (const ??? 0)  (usage 3)
iUserbutton100                       108  0x0000006c (const ??? 0)  (usage 3)
iUserbutton101                       109  0x0000006d (const ??? 0)  (usage 3)
iUserbutton102                       149  0x00000095 (const ??? 0)  (usage 3)
iUserbutton103                       150  0x00000096 (const ??? 0)  (usage 3)
iUserbutton104                       151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton105                       152  0x00000098 (const ??? 0)  (usage 3)
iUserbutton106                       153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton107                       154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton108                       155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton109                       156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton11                        121  0x00000079 (const ??? 0)  (usage 3)
iUserbutton110                       157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton111                       158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton112                       160  0x000000a0 (const ??? 0)  (usage 3)
iUserbutton113                       161  0x000000a1 (const ??? 0)  (usage 3)
iUserbutton114                       162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton115                       164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton116                       165  0x000000a5 (const ??? 0)  (usage 3)
iUserbutton117                       166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton118                        87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton119                       198  0x000000c6 (const ??? 0)  (usage 3)
iUserbutton12                         17  0x00000011 (const ??? 0)  (usage 3)
iUserbutton120                       189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton121                       190  0x000000be (const ??? 0)  (usage 3)
iUserbutton122                       191  0x000000bf (const ??? 0)  (usage 3)
iUserbutton123                       192  0x000000c0 (const ??? 0)  (usage 3)
iUserbutton124                       193  0x000000c1 (const ??? 0)  (usage 3)
iUserbutton125                       194  0x000000c2 (const ??? 0)  (usage 3)
iUserbutton126                       195  0x000000c3 (const ??? 0)  (usage 3)
iUserbutton127                       199  0x000000c7 (const ??? 0)  (usage 3)
iUserbutton128                       200  0x000000c8 (const ??? 0)  (usage 3)
iUserbutton129                       201  0x000000c9 (const ??? 0)  (usage 3)
iUserbutton13                         18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton130                       202  0x000000ca (const ??? 0)  (usage 3)
iUserbutton131                       203  0x000000cb (const ??? 0)  (usage 3)
iUserbutton132                       204  0x000000cc (const ??? 0)  (usage 3)
iUserbutton133                       205  0x000000cd (const ??? 0)  (usage 3)
iUserbutton134                       197  0x000000c5 (const ??? 0)  (usage 3)
iUserbutton135                       206  0x000000ce (const ??? 0)  (usage 3)
iUserbutton136                       207  0x000000cf (const ??? 0)  (usage 3)
iUserbutton137                       209  0x000000d1 (const ??? 0)  (usage 3)
iUserbutton138                       210  0x000000d2 (const ??? 0)  (usage 3)
iUserbutton139                       211  0x000000d3 (const ??? 0)  (usage 3)
iUserbutton14                          7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton140                       212  0x000000d4 (const ??? 0)  (usage 3)
iUserbutton141                       213  0x000000d5 (const ??? 0)  (usage 3)
iUserbutton142                       214  0x000000d6 (const ??? 0)  (usage 3)
iUserbutton143                       215  0x000000d7 (const ??? 0)  (usage 3)
iUserbutton144                       216  0x000000d8 (const ??? 0)  (usage 3)
iUserbutton145                       217  0x000000d9 (const ??? 0)  (usage 3)
iUserbutton146                       218  0x000000da (const ??? 0)  (usage 3)
iUserbutton147                       219  0x000000db (const ??? 0)  (usage 3)
iUserbutton149                       208  0x000000d0 (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton150                       220  0x000000dc (const ??? 0)  (usage 3)
iUserbutton16                         46  0x0000002e (const ??? 0)  (usage 3)
iUserbutton17                         55  0x00000037 (const ??? 0)  (usage 3)
iUserbutton18                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton19                         45  0x0000002d (const ??? 0)  (usage 3)
iUserbutton2                          21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton20                         96  0x00000060 (const ??? 0)  (usage 3)
iUserbutton21                        100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton22                        101  0x00000065 (const ??? 0)  (usage 3)
iUserbutton23                        111  0x0000006f (const ??? 0)  (usage 3)
iUserbutton24                        112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton25                        113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton26                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton27                         49  0x00000031 (const ??? 0)  (usage 3)
iUserbutton28                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton29                         51  0x00000033 (const ??? 0)  (usage 3)
iUserbutton3                          30  0x0000001e (const ??? 0)  (usage 3)
iUserbutton30                         52  0x00000034 (const ??? 0)  (usage 3)
iUserbutton31                         53  0x00000035 (const ??? 0)  (usage 3)
iUserbutton32                         56  0x00000038 (const ??? 0)  (usage 3)
iUserbutton33                         57  0x00000039 (const ??? 0)  (usage 3)
iUserbutton34                        169  0x000000a9 (const ??? 0)  (usage 3)
iUserbutton35                         61  0x0000003d (const ??? 0)  (usage 3)
iUserbutton36                         62  0x0000003e (const ??? 0)  (usage 3)
iUserbutton37                         63  0x0000003f (const ??? 0)  (usage 3)
iUserbutton38                         66  0x00000042 (const ??? 0)  (usage 3)
iUserbutton39                         64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton4                           5  0x00000005 (const ??? 0)  (usage 3)
iUserbutton40                         65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton41                        172  0x000000ac (const ??? 0)  (usage 3)
iUserbutton42                        173  0x000000ad (const ??? 0)  (usage 3)
iUserbutton43                        176  0x000000b0 (const ??? 0)  (usage 3)
iUserbutton44                        177  0x000000b1 (const ??? 0)  (usage 3)
iUserbutton45                        179  0x000000b3 (const ??? 0)  (usage 3)
iUserbutton46                        180  0x000000b4 (const ??? 0)  (usage 3)
iUserbutton47                        182  0x000000b6 (const ??? 0)  (usage 3)
iUserbutton48                        183  0x000000b7 (const ??? 0)  (usage 3)
iUserbutton49                        170  0x000000aa (const ??? 0)  (usage 3)
iUserbutton5                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton50                         22  0x00000016 (const ??? 0)  (usage 3)
iUserbutton51                        102  0x00000066 (const ??? 0)  (usage 3)
iUserbutton52                         68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton53                         76  0x0000004c (const ??? 0)  (usage 3)
iUserbutton54                         69  0x00000045 (const ??? 0)  (usage 3)
iUserbutton55                         78  0x0000004e (const ??? 0)  (usage 3)
iUserbutton56                         79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton57                         80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton58                         81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton59                         82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton6                          11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton60                         83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        184  0x000000b8 (const ??? 0)  (usage 3)
iUserbutton63                         40  0x00000028 (const ??? 0)  (usage 3)
iUserbutton64                        186  0x000000ba (const ??? 0)  (usage 3)
iUserbutton65                        187  0x000000bb (const ??? 0)  (usage 3)
iUserbutton66                         85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton67                        222  0x000000de (const ??? 0)  (usage 3)
iUserbutton68                         86  0x00000056 (const ??? 0)  (usage 3)
iUserbutton69                         92  0x0000005c (const ??? 0)  (usage 3)
iUserbutton7                          12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton70                        188  0x000000bc (const ??? 0)  (usage 3)
iUserbutton71                         94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton72                        103  0x00000067 (const ??? 0)  (usage 3)
iUserbutton73                        114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton74                         95  0x0000005f (const ??? 0)  (usage 3)
iUserbutton75                         72  0x00000048 (const ??? 0)  (usage 3)
iUserbutton76                         73  0x00000049 (const ??? 0)  (usage 3)
iUserbutton77                         74  0x0000004a (const ??? 0)  (usage 3)
iUserbutton78                        115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton79                        116  0x00000074 (const ??? 0)  (usage 3)
iUserbutton8                          13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton80                        117  0x00000075 (const ??? 0)  (usage 3)
iUserbutton81                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton82                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton83                        122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton84                        128  0x00000080 (const ??? 0)  (usage 3)
iUserbutton85                        129  0x00000081 (const ??? 0)  (usage 3)
iUserbutton86                        130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton87                        131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton88                        132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton89                        133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton9                          14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton90                        134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton91                        135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton92                        123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton93                        138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton94                        141  0x0000008d (const ??? 0)  (usage 3)
iUserbutton95                        145  0x00000091 (const ??? 0)  (usage 3)
iUserbutton96                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton97                        105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton98                        106  0x0000006a (const ??? 0)  (usage 3)
iUserbutton99                        107  0x0000006b (const ??? 0)  (usage 3)
iUserimages0                         124  0x0000007c (const ??? 0)  (usage 3)
iUserimages1                          70  0x00000046 (const ??? 0)  (usage 3)
iUserimages10                         97  0x00000061 (const ??? 0)  (usage 3)
iUserimages11                        223  0x000000df (const ??? 0)  (usage 3)
iUserimages12                        174  0x000000ae (const ??? 0)  (usage 3)
iUserimages14                        125  0x0000007d (const ??? 0)  (usage 3)
iUserimages15                        126  0x0000007e (const ??? 0)  (usage 3)
iUserimages3                         137  0x00000089 (const ??? 0)  (usage 3)
iUserimages4                         142  0x0000008e (const ??? 0)  (usage 3)
iUserimages5                         146  0x00000092 (const ??? 0)  (usage 3)
iUserimages6                         168  0x000000a8 (const ??? 0)  (usage 3)
iUserimages7                         139  0x0000008b (const ??? 0)  (usage 3)
iUserimages8                         143  0x0000008f (const ??? 0)  (usage 3)
iUserimages9                         147  0x00000093 (const ??? 0)  (usage 3)
iVideo0                                9  0x00000009 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                           23  0x00000017 (const ??? 0)  (usage 3)
iWinbutton1                           24  0x00000018 (const ??? 0)  (usage 3)
iWinbutton2                           25  0x00000019 (const ??? 0)  (usage 3)
iWinbutton3                           26  0x0000001a (const ??? 0)  (usage 3)
iWinbutton4                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton5                           41  0x00000029 (const ??? 0)  (usage 3)
iWinbutton6                           42  0x0000002a (const ??? 0)  (usage 3)
iWinbutton7                           28  0x0000001c (const ??? 0)  (usage 3)
iWinbutton8                           29  0x0000001d (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 9793  0x00002641kKeyboardKeystrokes                 9793  0x00002641 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   13362  0x00003432 (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                               10359  0x00002877 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               14484  0x00003894 (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              326  0x00000146 (const dword)  (usage 3)
nObjects                             224  0x000000e0 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              54  0x00000036 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                          9391  0x000024afo4Dbuttons                          9391  0x000024af (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAngularmeters                      9077  0x00002375oAngularmeters                      9077  0x00002375 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAniButtons                         9393  0x000024b1oAniButtons                         9393  0x000024b1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       9395  0x000024b3oColorPickers                       9395  0x000024b3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCoolgauges                         9079  0x00002377oCoolgauges                         9079  0x00002377 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCustomdigitss                      9081  0x00002379oCustomdigitss                      9081  0x00002379 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oDipSwitchs                         9045  0x00002355oDipSwitchs                         9045  0x00002355 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              9083  0x0000237boForms                              9083  0x0000237b (mem) word[44] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 15)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                             9171  0x000023d3oGauges                             9171  0x000023d3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGSliders                           9053  0x0000235doGSliders                           9053  0x0000235d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oImages                             9173  0x000023d5oImages                             9173  0x000023d5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKeyboards                          9175  0x000023d7oKeyboards                          9175  0x000023d7 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKnobs                              9047  0x00002357oKnobs                              9047  0x00002357 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLedDigitsn                         9797  0x00002645oLedDigitsn                         9797  0x00002645 (mem) word[15] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
oLeddigitss                         9179  0x000023dboLeddigitss                         9179  0x000023db (mem) word[4] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
oLeds                               9177  0x000023d9oLeds                               9177  0x000023d9 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             9187  0x000023e3oMeters                             9187  0x000023e3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             220  0x000000dc (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                          9389  0x000024adoPinInputs                          9389  0x000024ad (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oPinOutputs                         9705  0x000025e9oPinOutputs                         9705  0x000025e9 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      9049  0x00002359oRockerSwitchs                      9049  0x00002359 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oRotarySwitchs                      9051  0x0000235boRotarySwitchs                      9051  0x0000235b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oScopes                             9351  0x00002487oScopes                             9351  0x00002487 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
oSoundss                            9703  0x000025e7oSoundss                            9703  0x000025e7 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oSpectrums                          9349  0x00002485oSpectrums                          9349  0x00002485 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStaticTexts                        9307  0x0000245boStaticTexts                        9307  0x0000245b (mem) word[21] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStringss                           9189  0x000023e5oStringss                           9189  0x000023e5 (mem) word[55] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 84)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 423)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              9353  0x00002489oTanks                              9353  0x00002489 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oThermometers                       9299  0x00002453oThermometers                       9299  0x00002453 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTimers                             9701  0x000025e5oTimers                             9701  0x000025e5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTrackbars                          9055  0x0000235foTrackbars                          9055  0x0000235f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserButtons                        9397  0x000024b5oUserButtons                        9397  0x000024b5 (mem) word[152] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
oUserImagess                        9355  0x0000248boUserImagess                        9355  0x0000248b (mem) word[17] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserleds                           9301  0x00002455oUserleds                           9301  0x00002455 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             544  0x00000220 (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                             9303  0x00002457oVideos                             9303  0x00002457 (mem) word[2] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                         9057  0x00002361oWinButtons                         9057  0x00002361 (mem) word[10] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          300  0x0000012c (mem) word (global)  (usage 18)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       14519  0x000038b7 (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         14231  0x00003797 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                   9795  0x00002643rKeyboardRoutines                   9795  0x00002643 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         14417  0x00003851 (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           14500  0x000038a4 (User func) args[1] r=0  (usage 15)
seroutOcs                          14467  0x00003883 (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           7  0x00000007 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      2560  0x00000a00 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                         19  0x00000013 (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings11Count                         0  0x00000000 (const dword)  (not used)
Strings11Size                          1  0x00000001 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         14  0x0000000e (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                          3  0x00000003 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                    22016  0x00005600 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                         23  0x00000017 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                         24  0x00000018 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                     6656  0x00001a00 (const dword)  (usage 3)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings17Count                         1  0x00000001 (const dword)  (not used)
Strings17Size                         72  0x00000048 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                    17408  0x00004400 (const dword)  (usage 3)
Strings18Count                         1  0x00000001 (const dword)  (not used)
Strings18Size                        114  0x00000072 (const dword)  (usage 3)
Strings18StartH                        0  0x00000000 (const dword)  (usage 3)
Strings18StartL                    17920  0x00004600 (const dword)  (usage 3)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                        106  0x0000006a (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                    18432  0x00004800 (const dword)  (usage 3)
Strings1Count                          1  0x00000001 (const dword)  (not used)
Strings1Size                          25  0x00000019 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                         0  0x00000000 (const dword)  (usage 3)
Strings20Size                          0  0x00000000 (const dword)  (not used)
Strings20StartH                        0  0x00000000 (const dword)  (not used)
Strings20StartL                        0  0x00000000 (const dword)  (not used)
Strings21Size                          0  0x00000000 (const dword)  (not used)
Strings21StartH                        0  0x00000000 (const dword)  (not used)
Strings21StartL                        0  0x00000000 (const dword)  (not used)
Strings22Size                          0  0x00000000 (const dword)  (not used)
Strings22StartH                        0  0x00000000 (const dword)  (not used)
Strings22StartL                        0  0x00000000 (const dword)  (not used)
Strings23Size                          0  0x00000000 (const dword)  (not used)
Strings23StartH                        0  0x00000000 (const dword)  (not used)
Strings23StartL                        0  0x00000000 (const dword)  (not used)
Strings24Count                         1  0x00000001 (const dword)  (not used)
Strings24Size                         26  0x0000001a (const dword)  (usage 3)
Strings24StartH                        0  0x00000000 (const dword)  (usage 3)
Strings24StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings25Count                         1  0x00000001 (const dword)  (not used)
Strings25Size                         10  0x0000000a (const dword)  (usage 3)
Strings25StartH                        0  0x00000000 (const dword)  (usage 3)
Strings25StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings26Count                         1  0x00000001 (const dword)  (not used)
Strings26Size                         10  0x0000000a (const dword)  (usage 3)
Strings26StartH                        0  0x00000000 (const dword)  (usage 3)
Strings26StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings27Count                         1  0x00000001 (const dword)  (not used)
Strings27Size                         11  0x0000000b (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings28Size                          0  0x00000000 (const dword)  (not used)
Strings28StartH                        0  0x00000000 (const dword)  (not used)
Strings28StartL                        0  0x00000000 (const dword)  (not used)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                         60  0x0000003c (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    18944  0x00004a00 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      2048  0x00000800 (const dword)  (usage 3)
Strings30Count                         1  0x00000001 (const dword)  (not used)
Strings30Size                         30  0x0000001e (const dword)  (usage 3)
Strings30StartH                        0  0x00000000 (const dword)  (usage 3)
Strings30StartL                    19456  0x00004c00 (const dword)  (usage 3)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          7  0x00000007 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    19968  0x00004e00 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                         19  0x00000013 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    20480  0x00005000 (const dword)  (usage 3)
Strings33Count                         0  0x00000000 (const dword)  (not used)
Strings33Size                          1  0x00000001 (const dword)  (usage 3)
Strings33StartH                        0  0x00000000 (const dword)  (usage 3)
Strings33StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings34Count                         0  0x00000000 (const dword)  (not used)
Strings34Size                          1  0x00000001 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     3584  0x00000e00 (const dword)  (usage 3)
Strings35Count                         1  0x00000001 (const dword)  (not used)
Strings35Size                         49  0x00000031 (const dword)  (usage 3)
Strings35StartH                        0  0x00000000 (const dword)  (usage 3)
Strings35StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings36Count                         0  0x00000000 (const dword)  (not used)
Strings36Size                          1  0x00000001 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings37Count                         0  0x00000000 (const dword)  (not used)
Strings37Size                          1  0x00000001 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings38Count                         0  0x00000000 (const dword)  (not used)
Strings38Size                          1  0x00000001 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings3Count                          1  0x00000001 (const dword)  (not used)
Strings3Size                          18  0x00000012 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                       512  0x00000200 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                          7  0x00000007 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings41Count                         1  0x00000001 (const dword)  (not used)
Strings41Size                          7  0x00000007 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings42Count                         1  0x00000001 (const dword)  (not used)
Strings42Size                          7  0x00000007 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                    14336  0x00003800 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    14848  0x00003a00 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    15360  0x00003c00 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings46Count                         0  0x00000000 (const dword)  (not used)
Strings46Size                          1  0x00000001 (const dword)  (usage 3)
Strings46StartH                        0  0x00000000 (const dword)  (usage 3)
Strings46StartL                    22528  0x00005800 (const dword)  (usage 3)
Strings47Count                         1  0x00000001 (const dword)  (not used)
Strings47Size                          3  0x00000003 (const dword)  (usage 3)
Strings47StartH                        0  0x00000000 (const dword)  (usage 3)
Strings47StartL                    23040  0x00005a00 (const dword)  (usage 3)
Strings48Count                         0  0x00000000 (const dword)  (not used)
Strings48Size                          1  0x00000001 (const dword)  (usage 3)
Strings48StartH                        0  0x00000000 (const dword)  (usage 3)
Strings48StartL                    23552  0x00005c00 (const dword)  (usage 3)
Strings49Count                         1  0x00000001 (const dword)  (not used)
Strings49Size                         17  0x00000011 (const dword)  (usage 3)
Strings49StartH                        0  0x00000000 (const dword)  (usage 3)
Strings49StartL                    20992  0x00005200 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings50Count                         0  0x00000000 (const dword)  (not used)
Strings50Size                          1  0x00000001 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    21504  0x00005400 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings53Count                         1  0x00000001 (const dword)  (not used)
Strings53Size                        100  0x00000064 (const dword)  (usage 3)
Strings53StartH                        0  0x00000000 (const dword)  (usage 3)
Strings53StartL                    24064  0x00005e00 (const dword)  (usage 3)
Strings5Size                           0  0x00000000 (const dword)  (not used)
Strings5StartH                         0  0x00000000 (const dword)  (not used)
Strings5StartL                         0  0x00000000 (const dword)  (not used)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          31  0x0000001f (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                     11264  0x00002c00 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                     11776  0x00002e00 (const dword)  (usage 3)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      3072  0x00000c00 (const dword)  (usage 3)
stringsCV                            110  0x0000006e (mem) word[54] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           296  0x00000128 (mem) word (global)  (usage 24)
TouchXpos                            290  0x00000122 (mem) word (global)  (usage 12)
TouchYpos                            292  0x00000124 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     13676  0x0000356c (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 465)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 45)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      12385  0x00003061 (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS    2803  0x00000af3 (const ??? 0)  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 141)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        13876  0x00003634 (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
