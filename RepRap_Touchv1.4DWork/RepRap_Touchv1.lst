file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318        
003998  004319  //------------------------------------------------------------------------------
003999  004320  // FILEIO Error Code Constants
004000  004321  //------------------------------------------------------------------------------
004001  004322  #CONST
004002  004348  #END
004003  004349        
004004  004350  //------------------------------------------------------------------------------
004005  004351  // DISK struct offsets
004006  004352  //------------------------------------------------------------------------------
004007  004353  #CONST
004008  004370  #END
004009  004371        
004010  004372  //------------------------------------------------------------------------------
004011  004373  // FILE struct offsets
004012  004374  //------------------------------------------------------------------------------
004013  004375  #CONST
004014  004394  #END
004015  004395        
004016  004396        
004017  004397  //------------------------------------------------------------------//
004018  004398  //        Sound Class Services
004019  004399  //------------------------------------------------------------------//
004020  004400        
004021  004401  func snd_Volume("var"), 0;
004022  004402  // Syntax: snd_Volume("var");
004023  004403  // Usage : snd_Volume(30);
004024  004404  // Notes : set sound playback volume.  Var must
004025  004405  //       : be in the range from 8 (min volume)
004026  004406  //       : to 127 (max volume). If var is less
004027  004407  //       : than 8 volume is set to 8, and if
004028  004408  //       : var > 127 it is set to 127.
004029  004409        
004030  004410  func snd_Pitch("pitch"), 1;
004031  004411  // func snd_Pitch("freq"), 1;
004032  004412  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004033  004413  // Notes : sets the samples playback rate to a different frequency
004034  004414  //       : The minimum value is 4khz
004035  004415  //       : Setting the pitch to zero restores the original sample rate
004036  004416  //       : Return value is the samples original sample rate.
004037  004417        
004038  004418  func snd_BufSize("var"), 0;
004039  004419  // Syntax: snd_BufSize("var");
004040  004420  // Usage : snd_BufSize(2);
004041  004421  // Notes : specify the a memory chunk size for the wavefile buffer.
004042  004422  //       : default size 1024 bytes.
004043  004423  //       : 0 = 1024 bytes (default)
004044  004424  //       : 1 = 2048 bytes
004045  004425  //       : 2 = 4096 bytes
004046  004426  //       : 3 = 8192 bytes
004047  004427        
004048  004428  func snd_Stop(), 0;
004049  004429  // Syntax: snd_Stop();
004050  004430  // Usage : snd_Stop();
004051  004431  // Notes : stop any sound that is playing, releasing
004052  004432  //       : buffers and closes any open wav file.
004053  004433        
004054  004434  func snd_Pause(), 0;
004055  004435  // Syntax: snd_Pause();
004056  004436  // Usage : snd_Pause();
004057  004437  // Notes : pauses any sound that is playing, does nothing
004058  004438  //       : until sound is resumed with snd_Continue().
004059  004439  //       : The sample cam be terminated with snd_Stop.
004060  004440  //       : buffers and closes any open wav file.
004061  004441        
004062  004442  func snd_Continue(), 0;
004063  004443  // Syntax: snd_Continue();
004064  004444  // Usage : snd_Continue();
004065  004445  // Notes : resume any sound that is paused by snd_Pause.
004066  004446        
004067  004447  func snd_Playing(), 1;
004068  004448  // Syntax: snd_Playing();
004069  004449  // Usage : r := snd_Playing();
004070  004450  // Notes : returns 0 if sound has finished playing,
004071  004451  //       : else return number of 512 byte blocks to go.
004072  004452        
004073  004453  func snd_Freq("Freq", "Duration"), 1;
004074  004454  // Syntax: snd_Freq("Freq", "Duration");
004075  004455  // Usage : r := snd_Freq(1000, 2000);
004076  004456  // Notes : Returns 0 if note cannot be played because a wav file is playing
004077  004457  //       : else return True.
004078  004458  //       : Minimum Freq is 20
004079  004459  //       : This will produce a pure Square wave and is designed for driving
004080  004460  //       : Piezo transducers which require this sort of drive. It can also be
004081  004461  //       : used to drive the amp on displays with audio.
004082  004462        
004083  004463        
004084  004464  func __reserved60(), 0; // do not remove
004085  004465  func __reserved61(), 0; // do not remove
004086  004466  func __reserved62(), 0; // do not remove
004087  004467        
004088  004468  //=========================================================================================================
004089  004469  // String functions
004090  004470  //=========================================================================================================
004091  004471        
004092  004472  func str_Ptr("&var"), 1;
004093  004473  // Syntax: str_Ptr(&var);
004094  004474  // Usage : p := str_Ptr(&var);
004095  004475  // Notes : return a byte pointer to a word region
004096  004476        
004097  004477  func str_GetD("&ptr", "&var"), 1;
004098  004478  // Syntax: str_GetD(&ptr, &var);
004099  004479  // Usage : ok := str_GetD(&ptr, &var);
004100  004480  // Notes : convert number in a string to DWORD ( myvar[2] )
004101  004481  //       : returns true if function succeeds, advancing ptr
004102  004482        
004103  004483  func str_GetW("&ptr", "&var"), 1;
004104  004484  // Syntax: str_GetW(&ptr, &var);
004105  004485  // Usage : ok := str_GetW(&ptr, &var);
004106  004486  // Notes : convert number in a string to WORD ( myvar )
004107  004487  //       : returns true if function succeeds, advancing ptr
004108  004488        
004109  004489  func str_GetHexW("&ptr", "&var"), 1;
004110  004490  // Syntax: str_GetHexW(&ptr, &var);
004111  004491  // Usage : ok := str_GetHexW(&ptr, &var);
004112  004492  // Notes : convert HEX number in a string to WORD ( myvar )
004113  004493  //       : returns true if function succeeds, advancing ptr
004114  004494        
004115  004495  func str_GetC("&ptr", "&var"), 1;
004116  004496  // Syntax: str_GetC(&ptr, &var);
004117  004497  // Usage : ok := str_GetC(&ptr, &var);
004118  004498  // Notes : get a valid ascii char in a string to WORD ( myvar )
004119  004499  //       : returns true if function succeeds, advancing ptr
004120  004500        
004121  004501  func str_GetByte("ptr"), 1;
004122  004502  // Syntax: str_GetByte(ptr);
004123  004503  // Usage : myvar := str_GetByte(ptr);
004124  004504  // Notes : get a byte to myvar
004125  004505  //       : returns value
004126  004506        
004127  004507  func str_GetWord("ptr"), 1;
004128  004508  // Syntax: GetWord(ptr);
004129  004509  // Usage : GetWord(ptr);
004130  004510  // Notes : get a word to myvar
004131  004511  //       : returns value
004132  004512        
004133  004513  func str_PutByte("ptr","val"), 0;
004134  004514  // Syntax: str_PutByte(ptr);
004135  004515  // Usage : myvar := str_PutByte(ptr);
004136  004516  // Notes : put a byte at ptr
004137  004517  //       : returns value
004138  004518        
004139  004519  func str_PutWord("ptr","val"), 0;
004140  004520  // Syntax: str_PutWord("ptr","val");
004141  004521  // Usage : str_PutWord(p,100);
004142  004522  // Notes : put word 100 at current pointer location
004143  004523  //       : returns value
004144  004524        
004145  004525  func str_Match("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Match(&ptr, *str);
004147  004527  // Usage : r := str_Match(&p, "hello");
004148  004528  // Notes : Case sensitive match
004149  004529  //       : returns true if function succeded, andvancing pointer to position past
004150  004530  //       : the matched item. Note that any whitespace characters are skipped
004151  004531  //       : in the source string prior to the test.
004152  004532        
004153  004533  func str_MatchI("&ptr", "*str"), 1;
004154  004534  // Syntax: str_MatchI(&ptr, *str);
004155  004535  // Usage : r := str_MatchI(&p, "hello");
004156  004536  // Notes : Case insensitive match
004157  004537  //       : returns true if function succeded, andvancing pointer to position past
004158  004538  //       : the matched item. Note that any whitespace characters are skipped
004159  004539  //       : in the source string prior to the test.
004160  004540        
004161  004541  func str_Find("&ptr", "*str"), 1;
004162  004542  // Syntax: str_Find(&ptr, *str);
004163  004543  // Usage : n := str_Find(&p, "hello");
004164  004544  // Notes : given the address of a pointer to a source string as the
004165  004545  //       : first argument, and a pointer to a test string as the second
004166  004546  //       : argument, attempt to find the position of the matching string
004167  004547  //       : in the source string. The test is performed with case sensitivity.
004168  004548  //       : return 0 if not found, else returns the address of the first
004169  004549  //       : character of the match. NB:- The source pointer is not altered.
004170  004550        
004171  004551  func str_FindI("&ptr", "*str"), 1;
004172  004552  // Syntax: str_Find(&ptr, *str);
004173  004553  // Usage : n := str_Find(&p, "hello");
004174  004554  // Notes : given the address of a pointer to a source string as the
004175  004555  //       : first argument, and a pointer to a test string as the second
004176  004556  //       : argument, attempt to find the position of the matching string
004177  004557  //       : in the source string. The test is performed with no case
004178  004558  //       : sensitivity, eg upper and lower case chars are accepted.
004179  004559  //       : return 0 if not found, else returns the address of the first
004180  004560  //       : character of the match. NB:- The source pointer is not altered.
004181  004561        
004182  004562  func str_Length("ptr"), 1;
004183  004563  // Syntax: str_Length(ptr);
004184  004564  // Usage : len := str_Ptr(mystring);
004185  004565  // Notes : return the length of a byte aligned string excluding terminator
004186  004566        
004187  004567  func str_Printf("&ptr", "*format"), 1;
004188  004568  // Syntax: str_Printf("&ptr", "*format");
004189  004569  // Usage : r := str_Printf(&p, "hello");
004190  004570  // Notes : refer to documentation
004191  004571  //       :
004192  004572        
004193  004573  func str_Cat("dest","src"), 1;
004194  004574  // Syntax: str_Append("&dest","&src");
004195  004575  // Usage : str_Append(&buf,"Hello");
004196  004576  // Notes : Appends a copy of the source string to the destination string.
004197  004577  //       : The terminating null character in destination is overwritten by
004198  004578  //       : the first character of source, and a new null-character is appended
004199  004579  //       : at the end of the new string formed by the concatenation of both in destination.
004200  004580  //       : returns destination.
004201  004581        
004202  004582  func str_CatN("dest","src","count"), 1;
004203  004583  // Syntax: str_Append("&dest","&src","count");
004204  004584  // Usage : str_Append(&buf,"Monday",3);
004205  004585  // Notes : Appends a copy of the source string to the destination string.
004206  004586  //       : The number of characters copied is limited by "count".
004207  004587  //       : The terminating null character in destination is overwritten by
004208  004588  //       : the first character of source, and a new null-character is appended
004209  004589  //       : at the end of the new string formed by the concatenation of both in destination.
004210  004590  //       : returns destination.
004211  004591        
004212  004592        
004213  004593  func str_ByteMove("src", "dest", "count"), 1;
004214  004594  // Syntax   : str_ByteMove(src, dest, bytecount);
004215  004595  // Input    : STR *source points to byte aligned source.
004216  004596  //          : STR *dest   points to byte aligned destination.
004217  004597  //          : VAR count   number of bytes to transfer.
004218  004598  // Usage    : nextpos := str_ByteMove(s, d, 100);
004219  004599  // Notes    : copy bytes from "src" to "dest", stopping only
004220  004600  //          : when "count" is exhausted.
004221  004601  //          : No terminator is appended, it is purely a
004222  004602  //          : byte copy, and any zeroes encountered will
004223  004603  //          : also be copied.
004224  004604  // Returns  : returns a pointer to the end of the destination
004225  004605  //          : (which is "dest" + "count")
004226  004606        
004227  004607        
004228  004608  func str_Copy("dest", "src"), 1;
004229  004609  // Syntax   : str_Copy(dest, src);
004230  004610  // Input    : STR *dest   points to byte aligned destination.
004231  004611  //          : STR *source points to byte aligned source.
004232  004612  // Usage    : nextplace := str_Copy(d, s);
004233  004613  // Notes    : copy a string from "src" to "dest", stopping only
004234  004614  //          : when the end of source string "src" is encountered
004235  004615  //          : (0x00 terminator).
004236  004616  //          : The terminator is always appended, even if "src" is
004237  004617  //          : an empty string.
004238  004618  // Returns  : returns a pointer to the 0x00 string terminator at
004239  004619  //          : end of "dest" (which is "dest" + str_Length(src); )
004240  004620        
004241  004621        
004242  004622  func str_CopyN("dest", "src", "count"), 1;
004243  004623  // Syntax   : str_CopyN(dest, src, bytecount);
004244  004624  // Input    : STR *dest   points to byte aligned destination.
004245  004625  //          : STR *source points to byte aligned source.
004246  004626  //          : VAR count   max number of chars to copy.
004247  004627  // Usage    : nextplace := str_CopyN(d, s, 100);
004248  004628  // Notes    : copy a string from "src" to "dest", stopping only
004249  004629  //          : when "count" is exhausted, or end of source
004250  004630  //          : string "str" is encountered (0x00 string terminator).
004251  004631  //          : The terminator is always appended, even if
004252  004632  //          : "count" is zero, or "src" is a null string.
004253  004633  // Returns  : returns a pointer to the 0x00 string terminator
004254  004634  //          : (which is "dest" + whatever was copied)
004255  004635        
004256  004636        
004257  004637  func __reserved63(), 0; // do not remove
004258  004638  func __reserved64(), 0; // do not remove
004259  004639  func __reserved65(), 0; // do not remove
004260  004640  func __reserved66(), 0; // do not remove
004261  004641        
004262  004642  //=========================================================================================================
004263  004643  // FLASH memory functions
004264  004644  //=========================================================================================================
004265  004645  func flash_GetByte("bank", "ptr"), 1;
004266  004646  // Syntax   : flash_GetByte(bank, ptr);
004267  004647  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004268  004648  // Notes    : Reads a single byte from any flash location.
004269  004649  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004270  004650  //          : which is the header signature for a valid program.
004271  004651  // Returns  : the byte value from the location
004272  004652        
004273  004653        
004274  004654  func flash_GetWord("bank", "ptr"), 1;
004275  004655  // Syntax   : flash_GetWord(bank, ptr);
004276  004656  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004277  004657  // Notes    : Reads a single word from any flash location.
004278  004658  //          : The pointer is byte aligned.
004279  004659  //          : If the bank is read protected, only the first word can be read
004280  004660  //          : which is the header signature for a valid program (0xAA55).
004281  004661  // Returns  : the byte value from the location
004282  004662        
004283  004663        
004284  004664  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004285  004665  // Syntax   : flash_Copy(bank, ptr);
004286  004666  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004287  004667  // Notes    : Copies bytes from any flash locations to a user buffer.
004288  004668  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004289  004669  //          : If the bank is read protected, 0 bytes will be read
004290  004670  //          : which is the header signature for a valid program (0xAA55).
004291  004671  // Returns  : the count of bytes transferred.
004292  004672        
004293  004673        
004294  004674  func flash_Run("bank"), 1;
004295  004675  // Syntax    : flash_Run(bankx);
004296  004676  // Usage     : res := flash_Run(FLASHBANK_5);
004297  004677  // Notes     : Restarts the processor, running code from the required
004298  004678  //           : flash bank. bank may be a variable, or one of the
004299  004679  //           : pre-defined constants:-
004300  004680  //           :    FLASHBANK_0                 //0x00
004301  004681  //           :    FLASHBANK_1                 //0x01
004302  004682  //           :    FLASHBANK_2                 //0x02
004303  004683  //           :    FLASHBANK_3                 //0x03
004304  004684  //           :    FLASHBANK_4                 //0x04
004305  004685  //           :    FLASHBANK_5                 //0x05
004306  004686  // returns    : This function should net return as it restarts
004307  004687  //        : the processor and jumps to the required bank,
004308  004688  //        : If it does return, -1 indicates incorrect/invalid
004309  004689  //        : bank number, and -2 indicates no valid program
004310  004690  //        : in the selected bank.
004311  004691        
004312  004692  func flash_Bank(), 1;
004313  004693  // Syntax   : flash_Bank();
004314  004694  // Usage    : myvar := flash_Bank();
004315  004695  // Notes    : Identifies which flash bank the code is running from.
004316  004696  // Returns  : The FLASH bank that code is currently running from, 0-5.
004317  004697        
004318  004698        
004319  004699  func flash_EraseBank("bank", "confirmation"), 1;
004320  004700  // Syntax   : flash_EraseBank(bank, confirmation);
004321  004701  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004322  004702  // Notes    : This function should be used with extreme caution.
004323  004703  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004324  004704  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004325  004705  //          : a protected bank will not be erased, and function will return with 0
004326  004706  //          : If the destination bank is the same as the execution bank, the processor will reset
004327  004707  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004328  004708  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004329  004709  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004330  004710  // Returns  : returns true if the function succeeded
004331  004711  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004332  004712        
004333  004713  func flash_LoadFile("bank", "filename"), 1;
004334  004714  // Syntax   : flash_LoadFile(bank, ptr);
004335  004715  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004336  004716  // Notes    : Copies a file from uSD to the required flashbank.
004337  004717  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004338  004718  // Returns  : returns true if the function succeeded.
004339  004719        
004340  004720        
004341  004721  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004342  004722  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004343  004723  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004344  004724  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004345  004725  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004346  004726  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004347  004727  // Returns  : returns true if the function succeeded.
004348  004728        
004349  004729        
004350  004730  func flash_putstr("bank", "ptr"), 1;
004351  004731  // Syntax   : flash_putstr(bank, ptr);
004352  004732  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004353  004733  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004354  004734  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004355  004735  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004356  004736        
004357  004737  func flash_Blit16("bank", "offset", "count"), 1;
004358  004738  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004359  004739  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004360  004740  // Notes    : Blit an image to a GRAM window from FLASH storage.
004361  004741  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004362  004742  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004363  004743        
004364  004744  func flash_Blit8("bank", "offset", "count"), 1;
004365  004745  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004366  004746  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004367  004747  // Notes    : Blit an image to a GRAM window from FLASH storage.
004368  004748  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004369  004749  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004370  004750        
004371  004751  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004372  004752  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004373  004753  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004374  004754  // Notes    : Blit an image to a GRAM window from FLASH storage.
004375  004755  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004376  004756  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004377  004757        
004378  004758  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004379  004759  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004380  004760  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004381  004761  // Notes    : Blit an image to a GRAM window from FLASH storage.
004382  004762  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004383  004763  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004384  004764        
004385  004765  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004386  004766  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004387  004767  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004388  004768  // Notes    : Blit an image to a GRAM window from FLASH storage.
004389  004769  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004390  004770  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004391  004771        
004392  004772  func flash_Exec("bank", "arglistptr"), 1;
004393  004773  // Syntax: res := flash_Exec("bank","arglistptr");
004394  004774  // Usage : res := flash_Exec("bank","arglistptr");
004395  004775  // Notes : returns like a function, current program
004396  004776  //       : calling program is kept active and control returns to it.
004397  004777  //       : If arglistptr is 0, no arguments are passed, else
004398  004778  //       : arglist points to an array, the first element being
004399  004779  //       : the number of elements in the array.
004400  004780  //       : func 'main' in the called bank accepts the arguments.
004401  004781  // WARNING Not currently implemented!
004402  004782        
004403  004783        
004404  004784  func __reserved68(), 0; // do not remove
004405  004785  func __reserved69(), 0; // do not remove
004406  004786  func __reserved70(), 0; // do not remove
004407  004787        
004408  004788  //=========================================================================================================
004409  004789  // I/O and hardware functions
004410  004790  //=========================================================================================================
004411  004791        
004412  004792        
004413  004793        
004414  004794        
004415  004795  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004416  004796  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004417  004797  // Syntax: pin_Pulseout(pin, value);
004418  004798  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004419  004799  // Notes : only available on PA0 to PA9
004420  004800  //       : Invert the state of an output for "value" milliseconds.
004421  004801  //       : pulseout is non blocking, that is, code execution may continue while
004422  004802  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004423  004803  //       : If not already an output, pin is automatically made a push/pull output,
004424  004804  //       : and the last state of its output latch will determine pulse polarity.
004425  004805  //       : It's its open drain state is not altered if the pin was already an output.
004426  004806  //       : If pulseout is called while pulseout is still active, the pulse timer
004427  004807  //       : will simply be updated with the new "value" and the pulse will continue
004428  004808  //       : with the extended value.
004429  004809  //       : returns true if the pin number is legal (usually ignored)
004430  004810        
004431  004811        
004432  004812  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004433  004813  // Syntax: pin_Counter(pin, mode, userfunc);
004434  004814  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004435  004815  // Notes : only available on PA4 to PA9
004436  004816  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004437  004817  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004438  004818  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004439  004819  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004440  004820  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004441  004821  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004442  004822  //       : The pin may be configured as an input or output, the function behaves the same.
004443  004823  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004444  004824  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004445  004825  //       : "mode" has the following effect:-
004446  004826  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004447  004827  //       : mode COUNT_RISE(1) = increment on every rising edge
004448  004828  //       : mode COUNT_FALL(2) = increment on every falling edge
004449  004829  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004450  004830        
004451  004831  //------------------------------------------------------------------//
004452  004832  // pin counter mode constants                                       //
004453  004833  //------------------------------------------------------------------//
004454  004834  #CONST
004455  004839  #END
004456  004840        
004457  004841  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004458  004842  // Syntax: Qencoder1(pinA, pinB, mode);
004459  004843  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004460  004844  // Notes : not available on pins PA14 and PA15
004461  004845  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004462  004846  //       : or written to at any time with peekW and pokeW using the following constants:-
004463  004847  //       : It is necessary to configure the pins first, depending on your requirements, eg
004464  004848  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004465  004849  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004466  004850  //       : Returns true if the pin numbers are legal (usually ignored)
004467  004851  //    QEN1_COUNTER_LO
004468  004852  //    QEN1_COUNTER_HI
004469  004853  //    QEN1_DELTA This is reset to 0 when read
004470  004854        
004471  004855  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004472  004856  // Syntax: Qencoder2(pinA, pinB, mode);
004473  004857  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004474  004858  // Notes : not available on pins PA14 and PA15
004475  004859  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004476  004860  //       : or written to at any time with peekW and pokeW using the following constants:-
004477  004861  //       : It is necessary to configure the pins first, depending on your requirements, eg
004478  004862  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004479  004863  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004480  004864  //       : Returns true if the pin numbers are legal (usually ignored)
004481  004865  //    QEN2_COUNTER_LO
004482  004866  //    QEN2_COUNTER_HI
004483  004867  //    QEN2_DELTA This is reset to 0 when read
004484  004868        
004485  004869        
004486  004870  func Qencoder1Reset(), 0;
004487  004871  // Syntax: Qencoder1Reset();
004488  004872  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004489  004873  // Notes :
004490  004874  //    QEN1_COUNTER_LO is reset to zero
004491  004875  //    QEN1_COUNTER_HI is reset to zero
004492  004876  //    QEN1_DELTA is reset to zero
004493  004877        
004494  004878  func Qencoder2Reset(), 0;
004495  004879  // Syntax: Qencoder2Reset();
004496  004880  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004497  004881  // Notes :
004498  004882  //    QEN2_COUNTER_LO is reset to zero
004499  004883  //    QEN2_COUNTER_HI is reset to zero
004500  004884  //    QEN2_DELTA is reset to zero
004501  004885        
004502  004886        
004503  004887  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004504  004888  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004505  004889  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004506  004890  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004507  004891  //       : Invert the state of an output at a "freq" freuency "count" times.
004508  004892  //       : PulseoutCount is non blocking, that is, code execution may continue while
004509  004893  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004510  004894  //       : If not already an output, pin is automatically made a push/pull output,
004511  004895  //       : and the last state of its output latch will determine pulse polarity.
004512  004896  //       : It's its open drain state is not altered if the pin was already an output.
004513  004897  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004514  004898  //       : will simply have the new "value" added to it.
004515  004899  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004516  004900  //       : returns true if the pin number is legal (usually ignored)
004517  004901        
004518  004902  func __reserved72(), 0; // do not remove
004519  004903        
004520  004904  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004521  004905  // Syntax: pwm_Init(pin, value);
004522  004906  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004523  004907  // Notes : only available on PA4 to PA9
004524  004908  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004525  004909  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004526  004910  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004527  004911  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004528  004912  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004529  004913  //       :                    : Repetition rate ~50hz or 20ms
004530  004914  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004531  004915  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004532  004916  //       : pwm_Init is non blocking and the pwm continues until turn off
004533  004917  //       : Returns true if the pin number is legal (usually ignored)
004534  004918        
004535  004919  //------------------------------------------------------------------------------
004536  004920  // PWM Constants
004537  004921  //------------------------------------------------------------------------------
004538  004922  #CONST
004539  004927  #END
004540  004928        
004541  004929  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004542  004930  // Syntax   : OW_Reset(PA0);
004543  004931  // Usage    : OW_Reset(PA0);
004544  004932  // Notes    : Only available on PA0 to PA13
004545  004933  //          : Resets  ONEWIRE device
004546  004934  //          : Returns the status, 0 = ACK.
004547  004935  //          :
004548  004936        
004549  004937  func OW_Read("pin"), 1;                              // read data from 1wire bus
004550  004938  // Syntax   : OW_Read(PA0);
004551  004939  // Usage    : arg1 := OW_Read(PA0);
004552  004940  // Notes    : Only available on PA0 to PA13
004553  004941  //          : Reads value of the ONEWIRE pin
004554  004942  //          : that was previously selected for ONEWIRE comms.
004555  004943  //          :
004556  004944  //          : pin = 0 : the next byte from the ONEWIRE bus
004557  004945        
004558  004946  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004559  004947  // Syntax   : OW_Read9(PA0);
004560  004948  // Usage    : OW_Read9(PA0);
004561  004949  // Notes    : Only available on PA0 to PA13
004562  004950  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004563  004951  //          : that was previously selected for ONEWIRE comms.
004564  004952  //          :
004565  004953  //          : read the 9 bits from the ONEWIRE bus
004566  004954        
004567  004955  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004568  004956  // Syntax   : OW_Write(PA0, arg);
004569  004957  // Usage    : OW_Write(PA0, arg);
004570  004958  // Notes    : Only available on PA0 to PA13
004571  004959  //          : Sends ONEWIRE data on the appropriate
004572  004960  //          : pin that was previously  selected as ONEWIRE comms.
004573  004961  //          :
004574  004962  //          : write arg to the ONEWIRE bus
004575  004963        
004576  004964  func __reserved77(), 0; // do not remove
004577  004965  func __reserved78(), 0; // do not remove
004578  004966        
004579  004967  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004580  004968  // Syntax: sys_GetDateVar(&year, &month, &day);
004581  004969  // Usage : sys_GetDateVar(&year, &month, &day);
004582  004970  // Notes : Retrieves the date values into variables
004583  004971        
004584  004972  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004585  004973  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004974  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004587  004975  // Notes : Retrieves the time values into variables
004588  004976        
004589  004977  func sys_PmmC(), 0;
004590  004978  // Syntax: sys_PmmC();
004591  004979  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004592  004980  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004593  004981  //       : Can be captured to a buffer using the to( function
004594  004982  //       : Returns nothing.
004595  004983        
004596  004984  func sys_Driver(), 0;
004597  004985  // Syntax: sys_Driver();
004598  004986  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004599  004987  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004600  004988  //       : Can be captured to a buffer using the to( function
004601  004989  //       : Returns nothing.
004602  004990        
004603  004991  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004604  004992  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004605  004993  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004606  004994  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004607  004995  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004608  004996  //       : elements in each buffer. This will need to be greater than "width" for negative
004609  004997  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004610  004998  //       : pass 0 as the address for any unused traces
004611  004999  //       : X position is incremented each point by "xstep" pixels.
004612  005000  //       : Y values are derived from a Y buffer "newy" (signed values).
004613  005001  //       : 2 buffers need to be supplied, "newy" contains new
004614  005002  //       : points to be drawn, "oldy" contains most recent set
004615  005003  //       : of points to be un-drawn. After the waveform is drawn,
004616  005004  //       : "newy" buffer is automatically copied to "oldy" buffer.
004617  005005        
004618  005006        
004619  005007  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004620  005008  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004621  005009  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004622  005010  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004623  005011  //       : and calls "COMPLETEfunction" when done.
004624  005012  //       : "rate" is samples in 100 of samples per second
004625  005013  //       : Any unused IOx pins should have their buffer addresses set to 0
004626  005014  //       : For performance reasons samples are taken in chunks of 32, thus if you
004627  005015  //       : request 33 samples there will be a delay of 31 samples before
004628  005016  //       : "COMPLETEfunction" is called
004629  005017  //       : If Touch is enabled this function should be called no more than once per
004630  005018  //       : millisecond, otherwise touch behaviour could be eratic.
004631  005019        
004632  005020        
004633  005021  func sys_ErrorMessage("msgnum"), 1;
004634  005022        
004635  005023  //==============================//
004636  005024  // NeoPixel specific functions  //
004637  005025  //==============================//
004638  005026        
004639  005027  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004640  005028  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004641  005029  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004642  005030  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004643  005031  //       : data        : Address of data to be sent
004644  005032  //       : size        : number of colour 'sets' to follow
004645  005033  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004646  005034  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004647  005035  //       : Repeat      : Number of times to repeat the colours between first and last
004648  005036  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004649  005037  //       : Returns true if the pin number is legal (usually ignored)
004650  005038  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004651  005039  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004652  005040        
004653  005041  // NeoPixel related constants
004654  005042  #CONST
004655  005046  #END
004656  005047        
004657  005048  func __reserved85(), 0; // do not remove
004658  005049  func __reserved86(), 0; // do not remove
004659  005050        
004660  005051  //==============================================//
004661  005052  // spi flash device specific functions          //
004662  005053  //==============================================//
004663  005054        
004664  005055  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004665  005056  // Syntax   : spiflash_SIG("spi#","enablepin");
004666  005057  // Usage    : var := spiflash_SIG(SPI1, PA0);
004667  005058  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004668  005059  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004669  005060  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004670  005061  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004671  005062  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004672  005063  //          : byte is ignored.
004673  005064        
004674  005065  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004675  005066  // Syntax   : spiflash_ID("spi#","enablepin");
004676  005067  // Usage    : var := spiflash_ID(SPI1, PA0);
004677  005068  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004678  005069  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004679  005070  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004680  005071  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004681  005072  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004682  005073  //          : contains capacity. Refer to the device data sheet for further information.
004683  005074        
004684  005075  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004685  005076  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004686  005077  // Usage    : spiflash_BulkErase(SPI1, PA0);
004687  005078  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004688  005079  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004689  005080  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004690  005081  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004691  005082  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004692  005083  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004693  005084        
004694  005085  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004695  005086  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004696  005087  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004697  005088  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004698  005089  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004699  005090  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004700  005091  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004701  005092  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004702  005093  //          : blockAddress The address of the 64k FLASH block to be erased.
004703  005094  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004704  005095  //          : can take up to 3 milliseconds.
004705  005096        
004706  005097  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004707  005098  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004708  005099  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004709  005100  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004710  005101        
004711  005102  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004712  005103  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004713  005104  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004714  005105  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004715  005106  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004716  005107  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004717  005108  //       : returns number of characters read
004718  005109  //       : if "dest" is zero, data is read direct to GRAM window
004719  005110  //       :
004720  005111        
004721  005112  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004722  005113  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004723  005114  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004724  005115  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004725  005116  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004726  005117  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004727  005118  //       : returns number of bytes written
004728  005119  //       :
004729  005120        
004730  005121  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004731  005122  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004732  005123  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004733  005124  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004734  005125  //       : The image is displayed at x,y (with respect to top left corner).
004735  005126        
004736  005127  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004737  005128  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004738  005129  // Usage : spiflash_PutC('x', SPI1, PA0);
004739  005130  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004740  005131  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004741  005132  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004742  005133        
004743  005134  func spiflash_GetC("spi#", "enablepin"), 1;
004744  005135  // Syntax: spiflash_GetC("spi#", "enablepin");
004745  005136  // Usage : mychar := fgetC(SPI1, PA0);
004746  005137  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004747  005138  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004748  005139  //       : by subsequent reads or writes.
004749  005140  //       : returns next char from file
004750  005141        
004751  005142  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004752  005143  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004753  005144  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004754  005145  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004755  005146  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004756  005147  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004757  005148        
004758  005149  func spiflash_GetW("spi#", "enablepin"), 1;
004759  005150  // Syntax: spiflash_GetW("spi#", "enablepin");
004760  005151  // Usage : myword := fgetW(SPI1, PA0);
004761  005152  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004762  005153  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004763  005154  //       : by subsequent reads or writes.
004764  005155  // Notes : returns next word in file
004765  005156        
004766  005157  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004767  005158  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004768  005159  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004769  005160  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004770  005161  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004771  005162  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004772  005163  //       : returns number of characters written
004773  005164  //       :
004774  005165        
004775  005166  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004776  005167  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004777  005168  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004778  005169  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004779  005170  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004780  005171  //       : by subsequent reads or writes.
004781  005172  //       : returns pointer to string or null if failed.
004782  005173  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004783  005174  //       : NB:- only reads up to "size-1" characters into "string"
004784  005175  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004785  005176  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004786  005177  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004787  005178  //       : C] It reaches the end of file
004788  005179  //       : D] A read error occurs.
004789  005180        
004790  005181  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004791  005182  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004792  005183  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004793  005184  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004794  005185  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004795  005186  //       : return a function pointer to the allocation.
004796  005187  //       : The function can then be invoked just like any other
004797  005188  //       : function would be called via a function pointer.
004798  005189  //       : Parameters may be passed to it in a conventional way.
004799  005190  //       : The function may be discarded at any time when no
004800  005191  //       : longer required, thus freeing its memory resources.
004801  005192  //       : The loaded function can be discarded with mem_Free(..)
004802  005193  //       : eg:
004803  005194  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004804  005195  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004805  005196  //       : then elsewhere in your program:-
004806  005197  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004807  005198  //       : if(res == QUIT_APPLICATION) goto exitApp;
004808  005199  //       : Later in your program, when popupWindow is no longer
004809  005200  //       : required for the application:-
004810  005201  //       : res := mem_Free(popupWindow);
004811  005202  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004812  005203  //       : The callers stack is shared by the loaded function,
004813  005204  //       : however any global variables in the loaded function
004814  005205  //       : are private to that function.
004815  005206  //
004816  005207        
004817  005208  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004818  005209  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004819  005210  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004820  005211  // Notes : current program releases any allocated memory but
004821  005212  //       : retains the stack and global memory.
004822  005213  //       : If arglistptr is 0, no arguments are passed, else
004823  005214  //       : arglist points to an array, the first element being
004824  005215  //       : the number of elements in the array.
004825  005216  //       : func 'main' in the called program accepts
004826  005217  //       : the arguments, if any. The arguments can only
004827  005218  //       : be passed by value, no pointers or references can be
004828  005219  //       : used as all memory is cleared before the file
004829  005220  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004830  005221  //       : for functions that can pass by reference.
004831  005222        
004832  005223  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004833  005224  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004834  005225  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004835  005226  // Notes : returns like a function, current program
004836  005227  //       : calling program is kept active and control returns to it.
004837  005228  //       : If arglistptr is 0, no arguments are passed, else
004838  005229  //       : arglist points to an array, the first element being
004839  005230  //       : the number of elements in the array.
004840  005231  //       : func 'main' in the called program accepts the arguments.
004841  005232  //       : This function is similar to spiflash_LoadFunction(...), however,
004842  005233  //       : the function argument list is passed by pointer, and
004843  005234  //       : the memory consumed by the function is released as
004844  005235  //       : soon as the function completes.
004845  005236        
004846  005237  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004847  005238  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004848  005239  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004849  005240  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004850  005241  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004851  005242  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004852  005243  //       : Returns NULL if function fails.
004853  005244  //       : Returns a handle (pointer to the memory allocation) to the
004854  005245  //       : image control list that has been created.
004855  005246        
004856  005247  // Notes : This function Calculates the size of a chunk of memory required for
004857  005248  //       : a image list and populates it from the image control file ("*.dat")
004858  005249  //       : therefore, when imagelist is no longer required, you must de-allocate
004859  005250  //       : the image list memory by using eg:- mem_Free(hImagelist);
004860  005251  //       : to restore the heap.
004861  005252  //       :
004862  005253        
004863  005254  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004864  005255  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004865  005256  // Usage : spiflash_PlayWAV(SPI1, PA0);
004866  005257  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004867  005258  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004868  005259  //       : or writes.
004869  005260  //       : This function automatically grabs a chunk
004870  005261  //       : of memory for a file buffer, and a wave
004871  005262  //       : buffer. The minimum memory requirement is
004872  005263  //       : about 580 bytes for the disk io service and
004873  005264  //       : a minimum wave buffer size of 1024. The size
004874  005265  //       : of the wave buffer allocation
004875  005266  //       : can be increased by the snd_BufSize function.
004876  005267  //       : The default size 1024 bytes.
004877  005268  //       : NB the memory is only required during the
004878  005269  //       : duration of play, and is automatically
004879  005270  //       : released while not in use.
004880  005271  //       : See the Sound Class services for other associated controls.
004881  005272  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004882  005273  //       : If errors occured, the folling is returned
004883  005274  //       : -7  : Insufficient memory available for WAV buffer and file
004884  005275  //       : -6  : cant play this rate
004885  005276  //       : -5  : no data chunk found in first rsector
004886  005277  //       : -4  : no format data
004887  005278  //       : -3  : no wave chunk signature
004888  005279  //       : -2  : bad wave file format
004889  005280  //       : -1  : file not found
004890  005281        
004891  005282  //==============================================//
004892  005283  // more com functions                           //
004893  005284  //==============================================//
004894  005285        
004895  005286  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004896  005287  // Syntax   : com1_TXblock("buf", "bufsize");
004897  005288  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004898  005289  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004899  005290  //          : if a transmit buffer is active and space is available this function will return almost
004900  005291  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004901  005292        
004902  005293  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004903  005294  // Syntax   : com1_RXblock("buf", "bufsize");
004904  005295  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004905  005296  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004906  005297  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004907  005298  //          : immediately otherwise it will block until until the required bytes are received.
004908  005299        
004909  005300  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004910  005301  // Syntax   : com_TXblock("buf", "bufsize");
004911  005302  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004912  005303  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004913  005304  //          : if a transmit buffer is active and space is available this function will return almost
004914  005305  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004915  005306        
004916  005307  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004917  005308  // Syntax   : com_RXblock("buf", "bufsize");
004918  005309  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004919  005310  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004920  005311  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004921  005312  //          : immediately otherwise it will block until until the required bytes are received.
004922  005313        
004923  005314  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004924  005315  // Syntax   : com_TXblock("buf", "bufsize");
004925  005316  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004926  005317  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004927  005318  //          : if a transmit buffer is active and space is available this function will return almost
004928  005319  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004929  005320        
004930  005321  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004931  005322  // Syntax   : com_RXblock("buf", "bufsize");
004932  005323  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004933  005324  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004934  005325  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004935  005326  //          : immediately otherwise it will block until until the required bytes are received.
004936  005327        
004937  005328  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004938  005329  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004939  005330  // Usage : disp_BlitPixelsFromCOM1();
004940  005331  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004941  005332  //       : display from the specified com port.
004942  005333        
004943  005334  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004944  005335  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004945  005336  // Usage : disp_BlitPixelsFromCOM2();
004946  005337  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004947  005338  //       : display from the specified com port.
004948  005339        
004949  005340  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004950  005341  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004951  005342  // Usage : disp_BlitPixelsFromCOM3();
004952  005343  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004953  005344  //       : display from the specified com port.
004954  005345        
004955  005346        
004956  005347  //==============================================//
004957  005348  // crc generation functions                     //
004958  005349  //==============================================//
004959  005350        
004960  005351  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004961  005352  // *Notes   : (if you calculate all of the incoming data
004962  005353  //          : INCLUDING the CRC, the result should be 0x00
004963  005354  //          : This is equivalent to simple addition of all bytes
004964  005355  //          : and returning the negated sum an 8 bit value.
004965  005356  //          : For the standard test string "123456789",
004966  005357  //          : crc_CSUM_8 will return 0x0023.
004967  005358        
004968  005359        
004969  005360  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004970  005361  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004971  005362  //          : (if you calculate all of the incoming data
004972  005363  //          : INCLUDING the CRC, the result should be 0x0000
004973  005364  //          : For the standard test string "123456789",
004974  005365  //          : crc_16 will return 0xBB3D.
004975  005366        
004976  005367        
004977  005368  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004978  005369  // *Notes   : (if you calculate all of the incoming data
004979  005370  //          : INCLUDING the CRC, the result should be 0x0000
004980  005371  //          : For the standard test string "123456789",
004981  005372  //          : crc_MODBUS will return 0x4B37.
004982  005373        
004983  005374        
004984  005375  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004985  005376  // *Notes   : (if you calculate all of the incoming data
004986  005377  //          : INCLUDING the CRC, the result should be 0x0000
004987  005378  //          : For the standard test string "123456789",
004988  005379  //          : crc_CCITT will return the following:-
004989  005380  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004990  005381  //          : seed = 0xFFFF, result = 0x29B1
004991  005382  //          : seed = 0x1D0F, result = 0xE5CC
004992  005383        
004993  005384        
004994  005385  //------------------------------------------------------------------//
004995  005386  // CONSTANTS
004996  005387  //------------------------------------------------------------------//
004997  005388        
004998  005389  #CONST
004999  005393  #END
005000  005394        
005001  005395  // timebase constants for timebase_init
005002  005396  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005003  005397  #CONST
005004  005408  #END
005005  005409        
005006  005410        
005007  005411  // generic constants
005008  005412  #CONST
005009  005420  #END
005010  005421        
005011  005422        
005012  005423        
005013  005424  //gfx_Get() related constants
005014  005425  #CONST
005015  005434  #END
005016  005435        
005017  005436        
005018  005437        
005019  005438        
005020  005439  #CONST
005021  005452  #END
005022  005453        
005023  005454        
005024  005455  #CONST
005025  005480  #END
005026  005481        
005027  005482        
005028  005483        
005029  005484        
005030  005485  // timer control  related constants
005031  005486  #CONST
005032  005495  #END
005033  005496        
005034  005497        
005035  005498        
005036  005499  //------------------------------------------------------------------------------
005037  005500  // system WORD variables accesible with peekW and pokeW or pointer access
005038  005501  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005039  005502  // can also be accessed with peekW and pokeW
005040  005503  //------------------------------------------------------------------------------
005041  005504        
005042  005505  #CONST
005043  005600  #END
005044  005601        
005045  005602  #CONST
005046  005767  #END
005047  005768        
005048  005769        
005049  005770        
005050  005771  //==================================================================================================
005051  005772        
005052  005773        
005053  005774        
005054  000013      #ENDIF
005055  000014        
005056  000015        
005057  000016  //===========================================================================================
005058  000017        
005059  000018        
005060  000002        
005061  000003  // generated 28/07/2015 15:41:30
005062  000004        
005063  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005064  000006  #inherit "4DGL_16bitColours.fnc"
005065  000006  #inherit "4DGL_16bitColours.fnc"
005066  000004  */
005067  000005        
005068  000006        
005069  000007        
005070  000008  #CONST
005071  000149  #END
005072  000150        
005073  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005074  000008  #inherit "VisualConst.inc"
005075  000008  #inherit "VisualConst.inc"
005076  000001  // Line Patterns
005077  000002  #constant  LPCOARSE    0xF0F0
005078  000002  #constant  LPCOARSE    0xF0F0
005079  000003  #constant  LPMEDIUM    0x3333
005080  000003  #constant  LPMEDIUM    0x3333
005081  000004  #constant  LPFINE      0xAAAA
005082  000004  #constant  LPFINE      0xAAAA
005083  000005  #constant  LPDASHDOT   0x03CF
005084  000005  #constant  LPDASHDOT   0x03CF
005085  000006  #constant  LPDASHDOTDOT 0x0333
005086  000006  #constant  LPDASHDOTDOT 0x0333
005087  000007  #constant  LPSOLID     0x0000
005088  000007  #constant  LPSOLID     0x0000
005089  000009        
005090  000010        
file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1Const.inc

005091  000011  #inherit "RepRap_Touchv1Const.inc"
005092  000011  #inherit "RepRap_Touchv1Const.inc"
005093  000001  // File generated 28/07/2015 15:41:01
005094  000002  // Warning! This is a generated file, any manual changes will be
005095  000003  // lost during the next generation.
005096  000004        
005097  000005  #constant  Strings1Count    1
005098  000005  #constant  Strings1Count    1
005099  000006  #constant  Strings1Size     25
005100  000006  #constant  Strings1Size     25
005101  000007  #constant  Strings3Count    1
005102  000007  #constant  Strings3Count    1
005103  000008  #constant  Strings3Size     18
005104  000008  #constant  Strings3Size     18
005105  000009  #constant  Strings4Count    1
005106  000009  #constant  Strings4Count    1
005107  000010  #constant  Strings4Size     25
005108  000010  #constant  Strings4Size     25
005109  000011  #constant  Strings6Count    1
005110  000011  #constant  Strings6Count    1
005111  000012  #constant  Strings6Size     31
005112  000012  #constant  Strings6Size     31
005113  000013  #constant  Strings2Count    0
005114  000013  #constant  Strings2Count    0
005115  000014  #constant  Strings2Size     1
005116  000014  #constant  Strings2Size     1
005117  000015  #constant  Strings0Count    1
005118  000015  #constant  Strings0Count    1
005119  000016  #constant  Strings0Size     7
005120  000016  #constant  Strings0Size     7
005121  000017  #constant  Strings9Count    0
005122  000017  #constant  Strings9Count    0
005123  000018  #constant  Strings9Size     1
005124  000018  #constant  Strings9Size     1
005125  000019  #constant  Strings34Count    0
005126  000019  #constant  Strings34Count    0
005127  000020  #constant  Strings34Size     1
005128  000020  #constant  Strings34Size     1
005129  000021  #constant  Strings36Count    0
005130  000021  #constant  Strings36Count    0
005131  000022  #constant  Strings36Size     1
005132  000022  #constant  Strings36Size     1
005133  000023  #constant  Strings37Count    0
005134  000023  #constant  Strings37Count    0
005135  000024  #constant  Strings37Size     1
005136  000024  #constant  Strings37Size     1
005137  000025  #constant  Strings12Count    1
005138  000025  #constant  Strings12Count    1
005139  000026  #constant  Strings12Size     14
005140  000026  #constant  Strings12Size     14
005141  000027  #constant  Strings14Count    1
005142  000027  #constant  Strings14Count    1
005143  000028  #constant  Strings14Size     23
005144  000028  #constant  Strings14Size     23
005145  000029  #constant  Strings16Count    0
005146  000029  #constant  Strings16Count    0
005147  000030  #constant  Strings16Size     1
005148  000030  #constant  Strings16Size     1
005149  000031  #constant  Strings15Count    1
005150  000031  #constant  Strings15Count    1
005151  000032  #constant  Strings15Size     24
005152  000032  #constant  Strings15Size     24
005153  000033  #constant  Strings11Count    1
005154  000033  #constant  Strings11Count    1
005155  000034  #constant  Strings11Size     33
005156  000034  #constant  Strings11Size     33
005157  000035  #constant  Strings22Count    1
005158  000035  #constant  Strings22Count    1
005159  000036  #constant  Strings22Size     20
005160  000036  #constant  Strings22Size     20
005161  000037  #constant  Strings24Count    1
005162  000037  #constant  Strings24Count    1
005163  000038  #constant  Strings24Size     26
005164  000038  #constant  Strings24Size     26
005165  000039  #constant  Strings25Count    1
005166  000039  #constant  Strings25Count    1
005167  000040  #constant  Strings25Size     10
005168  000040  #constant  Strings25Size     10
005169  000041  #constant  Strings26Count    1
005170  000041  #constant  Strings26Count    1
005171  000042  #constant  Strings26Size     10
005172  000042  #constant  Strings26Size     10
005173  000043  #constant  Strings27Count    1
005174  000043  #constant  Strings27Count    1
005175  000044  #constant  Strings27Size     11
005176  000044  #constant  Strings27Size     11
005177  000045  #constant  Strings28Count    1
005178  000045  #constant  Strings28Count    1
005179  000046  #constant  Strings28Size     40
005180  000046  #constant  Strings28Size     40
005181  000047  #constant  Strings35Count    1
005182  000047  #constant  Strings35Count    1
005183  000048  #constant  Strings35Size     49
005184  000048  #constant  Strings35Size     49
005185  000049  #constant  Strings33Count    0
005186  000049  #constant  Strings33Count    0
005187  000050  #constant  Strings33Size     1
005188  000050  #constant  Strings33Size     1
005189  000051  #constant  Strings10Count    1
005190  000051  #constant  Strings10Count    1
005191  000052  #constant  Strings10Size     14
005192  000052  #constant  Strings10Size     14
005193  000053  #constant  Strings7Count    0
005194  000053  #constant  Strings7Count    0
005195  000054  #constant  Strings7Size     1
005196  000054  #constant  Strings7Size     1
005197  000055  #constant  Strings8Count    0
005198  000055  #constant  Strings8Count    0
005199  000056  #constant  Strings8Size     1
005200  000056  #constant  Strings8Size     1
005201  000057  #constant  Strings38Count    0
005202  000057  #constant  Strings38Count    0
005203  000058  #constant  Strings38Size     1
005204  000058  #constant  Strings38Size     1
005205  000059  #constant  Strings39Count    0
005206  000059  #constant  Strings39Count    0
005207  000060  #constant  Strings39Size     1
005208  000060  #constant  Strings39Size     1
005209  000061  #constant  Strings40Count    1
005210  000061  #constant  Strings40Count    1
005211  000062  #constant  Strings40Size     7
005212  000062  #constant  Strings40Size     7
005213  000063  #constant  Strings41Count    1
005214  000063  #constant  Strings41Count    1
005215  000064  #constant  Strings41Size     7
005216  000064  #constant  Strings41Size     7
005217  000065  #constant  Strings42Count    1
005218  000065  #constant  Strings42Count    1
005219  000066  #constant  Strings42Size     7
005220  000066  #constant  Strings42Size     7
005221  000067  #constant  Strings43Count    0
005222  000067  #constant  Strings43Count    0
005223  000068  #constant  Strings43Size     1
005224  000068  #constant  Strings43Size     1
005225  000069  #constant  Strings44Count    0
005226  000069  #constant  Strings44Count    0
005227  000070  #constant  Strings44Size     1
005228  000070  #constant  Strings44Size     1
005229  000071  #constant  Strings45Count    0
005230  000071  #constant  Strings45Count    0
005231  000072  #constant  Strings45Size     1
005232  000072  #constant  Strings45Size     1
005233  000073  #constant  Strings51Count    0
005234  000073  #constant  Strings51Count    0
005235  000074  #constant  Strings51Size     1
005236  000074  #constant  Strings51Size     1
005237  000075  #constant  Strings52Count    0
005238  000075  #constant  Strings52Count    0
005239  000076  #constant  Strings52Size     1
005240  000076  #constant  Strings52Size     1
005241  000077  #constant  Strings17Count    1
005242  000077  #constant  Strings17Count    1
005243  000078  #constant  Strings17Size     56
005244  000078  #constant  Strings17Size     56
005245  000079  #constant  Strings18Count    1
005246  000079  #constant  Strings18Count    1
005247  000080  #constant  Strings18Size     39
005248  000080  #constant  Strings18Size     39
005249  000081  #constant  Strings19Count    1
005250  000081  #constant  Strings19Count    1
005251  000082  #constant  Strings19Size     43
005252  000082  #constant  Strings19Size     43
005253  000083  #constant  Strings29Count    1
005254  000083  #constant  Strings29Count    1
005255  000084  #constant  Strings29Size     64
005256  000084  #constant  Strings29Size     64
005257  000085  #constant  Strings30Count    1
005258  000085  #constant  Strings30Count    1
005259  000086  #constant  Strings30Size     42
005260  000086  #constant  Strings30Size     42
005261  000087  #constant  Strings31Count    1
005262  000087  #constant  Strings31Count    1
005263  000088  #constant  Strings31Size     7
005264  000088  #constant  Strings31Size     7
005265  000089  #constant  Strings32Count    1
005266  000089  #constant  Strings32Count    1
005267  000090  #constant  Strings32Size     19
005268  000090  #constant  Strings32Size     19
005269  000091  #constant  Strings49Count    1
005270  000091  #constant  Strings49Count    1
005271  000092  #constant  Strings49Size     17
005272  000092  #constant  Strings49Size     17
005273  000093  #constant  Strings50Count    0
005274  000093  #constant  Strings50Count    0
005275  000094  #constant  Strings50Size     1
005276  000094  #constant  Strings50Size     1
005277  000095  #constant  Strings13Count    1
005278  000095  #constant  Strings13Count    1
005279  000096  #constant  Strings13Size     3
005280  000096  #constant  Strings13Size     3
005281  000097  #constant  Strings46Count    0
005282  000097  #constant  Strings46Count    0
005283  000098  #constant  Strings46Size     1
005284  000098  #constant  Strings46Size     1
005285  000099  #constant  Strings47Count    1
005286  000099  #constant  Strings47Count    1
005287  000100  #constant  Strings47Size     3
005288  000100  #constant  Strings47Size     3
005289  000101  #constant  Strings48Count    0
005290  000101  #constant  Strings48Count    0
005291  000102  #constant  Strings48Size     1
005292  000102  #constant  Strings48Size     1
005293  000103  #constant  Strings53Count    1
005294  000103  #constant  Strings53Count    1
005295  000104  #constant  Strings53Size     100
005296  000104  #constant  Strings53Size     100
005297  000105  // object indexes into ImageControl
005298  000106  #CONST
005299  000341  #END
005300  000342        
005301  000343  #constant  Strings5Size     0
005302  000343  #constant  Strings5Size     0
005303  000344  #constant  Strings5StartH   0
005304  000344  #constant  Strings5StartH   0
005305  000345  #constant  Strings5StartL   0
005306  000345  #constant  Strings5StartL   0
005307  000346  #constant  Strings20Size     0
005308  000346  #constant  Strings20Size     0
005309  000347  #constant  Strings20StartH   0
005310  000347  #constant  Strings20StartH   0
005311  000348  #constant  Strings20StartL   0
005312  000348  #constant  Strings20StartL   0
005313  000349  #constant  Strings21Size     0
005314  000349  #constant  Strings21Size     0
005315  000350  #constant  Strings21StartH   0
005316  000350  #constant  Strings21StartH   0
005317  000351  #constant  Strings21StartL   0
005318  000351  #constant  Strings21StartL   0
005319  000352  #constant  Strings23Size     0
005320  000352  #constant  Strings23Size     0
005321  000353  #constant  Strings23StartH   0
005322  000353  #constant  Strings23StartH   0
005323  000354  #constant  Strings23StartL   0
005324  000354  #constant  Strings23StartL   0
005325  000355  #constant  Strings1StartH   0x0
005326  000355  #constant  Strings1StartH   0x0
005327  000356  #constant  Strings1StartL   0x0
005328  000356  #constant  Strings1StartL   0x0
005329  000357  #constant  Strings3StartH   0x0
005330  000357  #constant  Strings3StartH   0x0
005331  000358  #constant  Strings3StartL   0x200
005332  000358  #constant  Strings3StartL   0x200
005333  000359  #constant  Strings4StartH   0x0
005334  000359  #constant  Strings4StartH   0x0
005335  000360  #constant  Strings4StartL   0x400
005336  000360  #constant  Strings4StartL   0x400
005337  000361  #constant  Strings6StartH   0x0
005338  000361  #constant  Strings6StartH   0x0
005339  000362  #constant  Strings6StartL   0x600
005340  000362  #constant  Strings6StartL   0x600
005341  000363  #constant  Strings2StartH   0x0
005342  000363  #constant  Strings2StartH   0x0
005343  000364  #constant  Strings2StartL   0x800
005344  000364  #constant  Strings2StartL   0x800
005345  000365  #constant  Strings0StartH   0x0
005346  000365  #constant  Strings0StartH   0x0
005347  000366  #constant  Strings0StartL   0xA00
005348  000366  #constant  Strings0StartL   0xA00
005349  000367  #constant  Strings9StartH   0x0
005350  000367  #constant  Strings9StartH   0x0
005351  000368  #constant  Strings9StartL   0xC00
005352  000368  #constant  Strings9StartL   0xC00
005353  000369  #constant  Strings34StartH   0x0
005354  000369  #constant  Strings34StartH   0x0
005355  000370  #constant  Strings34StartL   0xE00
005356  000370  #constant  Strings34StartL   0xE00
005357  000371  #constant  Strings36StartH   0x0
005358  000371  #constant  Strings36StartH   0x0
005359  000372  #constant  Strings36StartL   0x1000
005360  000372  #constant  Strings36StartL   0x1000
005361  000373  #constant  Strings37StartH   0x0
005362  000373  #constant  Strings37StartH   0x0
005363  000374  #constant  Strings37StartL   0x1200
005364  000374  #constant  Strings37StartL   0x1200
005365  000375  #constant  Strings12StartH   0x0
005366  000375  #constant  Strings12StartH   0x0
005367  000376  #constant  Strings12StartL   0x1400
005368  000376  #constant  Strings12StartL   0x1400
005369  000377  #constant  Strings14StartH   0x0
005370  000377  #constant  Strings14StartH   0x0
005371  000378  #constant  Strings14StartL   0x1600
005372  000378  #constant  Strings14StartL   0x1600
005373  000379  #constant  Strings16StartH   0x0
005374  000379  #constant  Strings16StartH   0x0
005375  000380  #constant  Strings16StartL   0x1800
005376  000380  #constant  Strings16StartL   0x1800
005377  000381  #constant  Strings15StartH   0x0
005378  000381  #constant  Strings15StartH   0x0
005379  000382  #constant  Strings15StartL   0x1A00
005380  000382  #constant  Strings15StartL   0x1A00
005381  000383  #constant  Strings11StartH   0x0
005382  000383  #constant  Strings11StartH   0x0
005383  000384  #constant  Strings11StartL   0x1C00
005384  000384  #constant  Strings11StartL   0x1C00
005385  000385  #constant  Strings22StartH   0x0
005386  000385  #constant  Strings22StartH   0x0
005387  000386  #constant  Strings22StartL   0x1E00
005388  000386  #constant  Strings22StartL   0x1E00
005389  000387  #constant  Strings24StartH   0x0
005390  000387  #constant  Strings24StartH   0x0
005391  000388  #constant  Strings24StartL   0x2000
005392  000388  #constant  Strings24StartL   0x2000
005393  000389  #constant  Strings25StartH   0x0
005394  000389  #constant  Strings25StartH   0x0
005395  000390  #constant  Strings25StartL   0x2200
005396  000390  #constant  Strings25StartL   0x2200
005397  000391  #constant  Strings26StartH   0x0
005398  000391  #constant  Strings26StartH   0x0
005399  000392  #constant  Strings26StartL   0x2400
005400  000392  #constant  Strings26StartL   0x2400
005401  000393  #constant  Strings27StartH   0x0
005402  000393  #constant  Strings27StartH   0x0
005403  000394  #constant  Strings27StartL   0x2600
005404  000394  #constant  Strings27StartL   0x2600
005405  000395  #constant  Strings28StartH   0x0
005406  000395  #constant  Strings28StartH   0x0
005407  000396  #constant  Strings28StartL   0x2800
005408  000396  #constant  Strings28StartL   0x2800
005409  000397  #constant  Strings35StartH   0x0
005410  000397  #constant  Strings35StartH   0x0
005411  000398  #constant  Strings35StartL   0x2A00
005412  000398  #constant  Strings35StartL   0x2A00
005413  000399  #constant  Strings33StartH   0x0
005414  000399  #constant  Strings33StartH   0x0
005415  000400  #constant  Strings33StartL   0x2C00
005416  000400  #constant  Strings33StartL   0x2C00
005417  000401  #constant  Strings10StartH   0x0
005418  000401  #constant  Strings10StartH   0x0
005419  000402  #constant  Strings10StartL   0x2E00
005420  000402  #constant  Strings10StartL   0x2E00
005421  000403  #constant  Strings7StartH   0x0
005422  000403  #constant  Strings7StartH   0x0
005423  000404  #constant  Strings7StartL   0x3000
005424  000404  #constant  Strings7StartL   0x3000
005425  000405  #constant  Strings8StartH   0x0
005426  000405  #constant  Strings8StartH   0x0
005427  000406  #constant  Strings8StartL   0x3200
005428  000406  #constant  Strings8StartL   0x3200
005429  000407  #constant  Strings38StartH   0x0
005430  000407  #constant  Strings38StartH   0x0
005431  000408  #constant  Strings38StartL   0x3400
005432  000408  #constant  Strings38StartL   0x3400
005433  000409  #constant  Strings39StartH   0x0
005434  000409  #constant  Strings39StartH   0x0
005435  000410  #constant  Strings39StartL   0x3600
005436  000410  #constant  Strings39StartL   0x3600
005437  000411  #constant  Strings40StartH   0x0
005438  000411  #constant  Strings40StartH   0x0
005439  000412  #constant  Strings40StartL   0x3800
005440  000412  #constant  Strings40StartL   0x3800
005441  000413  #constant  Strings41StartH   0x0
005442  000413  #constant  Strings41StartH   0x0
005443  000414  #constant  Strings41StartL   0x3A00
005444  000414  #constant  Strings41StartL   0x3A00
005445  000415  #constant  Strings42StartH   0x0
005446  000415  #constant  Strings42StartH   0x0
005447  000416  #constant  Strings42StartL   0x3C00
005448  000416  #constant  Strings42StartL   0x3C00
005449  000417  #constant  Strings43StartH   0x0
005450  000417  #constant  Strings43StartH   0x0
005451  000418  #constant  Strings43StartL   0x3E00
005452  000418  #constant  Strings43StartL   0x3E00
005453  000419  #constant  Strings44StartH   0x0
005454  000419  #constant  Strings44StartH   0x0
005455  000420  #constant  Strings44StartL   0x4000
005456  000420  #constant  Strings44StartL   0x4000
005457  000421  #constant  Strings45StartH   0x0
005458  000421  #constant  Strings45StartH   0x0
005459  000422  #constant  Strings45StartL   0x4200
005460  000422  #constant  Strings45StartL   0x4200
005461  000423  #constant  Strings51StartH   0x0
005462  000423  #constant  Strings51StartH   0x0
005463  000424  #constant  Strings51StartL   0x4400
005464  000424  #constant  Strings51StartL   0x4400
005465  000425  #constant  Strings52StartH   0x0
005466  000425  #constant  Strings52StartH   0x0
005467  000426  #constant  Strings52StartL   0x4600
005468  000426  #constant  Strings52StartL   0x4600
005469  000427  #constant  Strings17StartH   0x0
005470  000427  #constant  Strings17StartH   0x0
005471  000428  #constant  Strings17StartL   0x4800
005472  000428  #constant  Strings17StartL   0x4800
005473  000429  #constant  Strings18StartH   0x0
005474  000429  #constant  Strings18StartH   0x0
005475  000430  #constant  Strings18StartL   0x4A00
005476  000430  #constant  Strings18StartL   0x4A00
005477  000431  #constant  Strings19StartH   0x0
005478  000431  #constant  Strings19StartH   0x0
005479  000432  #constant  Strings19StartL   0x4C00
005480  000432  #constant  Strings19StartL   0x4C00
005481  000433  #constant  Strings29StartH   0x0
005482  000433  #constant  Strings29StartH   0x0
005483  000434  #constant  Strings29StartL   0x4E00
005484  000434  #constant  Strings29StartL   0x4E00
005485  000435  #constant  Strings30StartH   0x0
005486  000435  #constant  Strings30StartH   0x0
005487  000436  #constant  Strings30StartL   0x5000
005488  000436  #constant  Strings30StartL   0x5000
005489  000437  #constant  Strings31StartH   0x0
005490  000437  #constant  Strings31StartH   0x0
005491  000438  #constant  Strings31StartL   0x5200
005492  000438  #constant  Strings31StartL   0x5200
005493  000439  #constant  Strings32StartH   0x0
005494  000439  #constant  Strings32StartH   0x0
005495  000440  #constant  Strings32StartL   0x5400
005496  000440  #constant  Strings32StartL   0x5400
005497  000441  #constant  Strings49StartH   0x0
005498  000441  #constant  Strings49StartH   0x0
005499  000442  #constant  Strings49StartL   0x5600
005500  000442  #constant  Strings49StartL   0x5600
005501  000443  #constant  Strings50StartH   0x0
005502  000443  #constant  Strings50StartH   0x0
005503  000444  #constant  Strings50StartL   0x5800
005504  000444  #constant  Strings50StartL   0x5800
005505  000445  #constant  Strings13StartH   0x0
005506  000445  #constant  Strings13StartH   0x0
005507  000446  #constant  Strings13StartL   0x5A00
005508  000446  #constant  Strings13StartL   0x5A00
005509  000447  #constant  Strings46StartH   0x0
005510  000447  #constant  Strings46StartH   0x0
005511  000448  #constant  Strings46StartL   0x5C00
005512  000448  #constant  Strings46StartL   0x5C00
005513  000449  #constant  Strings47StartH   0x0
005514  000449  #constant  Strings47StartH   0x0
005515  000450  #constant  Strings47StartL   0x5E00
005516  000450  #constant  Strings47StartL   0x5E00
005517  000451  #constant  Strings48StartH   0x0
005518  000451  #constant  Strings48StartH   0x0
005519  000452  #constant  Strings48StartL   0x6000
005520  000452  #constant  Strings48StartL   0x6000
005521  000453  #constant  Strings53StartH   0x0
005522  000453  #constant  Strings53StartH   0x0
005523  000454  #constant  Strings53StartL   0x6200
005524  000454  #constant  Strings53StartL   0x6200
005525  000455  #IFNOT EXISTS NOGLOBALS
005526  000456  var hndl ;
005527  000457  #ENDIF
005528  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005529  000013  #inherit "CLPrintStrings.inc"
005530  000013  #inherit "CLPrintStrings.inc"
005531  000001  func PrintStrings(var ID, var *msgid, var String)
005532  000002      var StringID, i, ch, offs32[2], res32[2];
005533  000003      StringID := oStringss[1+ID] ;
005534  000004      if (String)
005535  000005          stringsCV[ID] := -1 ;
005536  000006      else
005537  000007          stringsCV[ID] := msgid ;
005538  000008      endif
005539  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005540  000010      txt_FontID(hFonts[ID]) ;
005541  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005542  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005543  000013        
005544  000014      if (*(StringID + Ofs_String_Transparent))
005545  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005546  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005547  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005548  000018      else
005549  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005550  000020          gfx_Clipping(ON) ;
005551  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005552  000022          gfx_Clipping(OFF) ;
005553  000023        
005554  000024      endif
005555  000025        
005556  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005557  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005558  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005559  000029        
005560  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005561  000031        
005562  000032      if (String)
005563  000033          i := 0 ;
005564  000034          ch := msgid[i++] ;
005565  000035          while (ch != 0)
005566  000036              putch(ch) ;
005567  000037              ch := msgid[i++] ;
005568  000038          wend
005569  000039      else
005570  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005571  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005572  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005573  000043          uadd_3232(res32,res32,offs32) ;
005574  000044          file_Seek(hstrings, res32[1], res32[0]);
005575  000045          repeat
005576  000046              if (*(StringID + Ofs_String_Ansi))
005577  000047                  ch := file_GetC(hstrings) ;
005578  000048              else
005579  000049                  ch := file_GetW(hstrings) ;
005580  000050              endif
005581  000051              putch(ch) ;
005582  000052          until (ch == 0) ;
005583  000053      endif
005584  000054        
005585  000055  endfunc
005586  000056        
005587  000014        
005588  000015  #constant IPDatasize 22
005589  000015  #constant IPDatasize 22
005590  000016        
005591  000017  #CONST
005592  000021  #END
005593  000022        
005594  000023  #CONST
005595  000130  #END
005596  000131        
005597  000556  #END
5598  26A8
5599  26A9
5600  26AA
5601  26AB
5602  26AC
5603  26AD
5604  26AE
5605  26AF
5606  26B0
5607  26B1
5608  26B2
5609  26B3
5610  26B4
5611  26B5
5612  26B6
5613  26B7
5614  26B8
5615  26B9
5616  26BA
5617  26BB
5618  26BC
5619  26BD
5620  26BE
5621  26BF
5622  26C0
5623  26C1
5624  26C2
5625  26C3
5626  26C4
5627  26C5
5628  26C6
5629  26C7
5630  26C8
5631  26C9
5632  26CA
5633  26CB
5634  26CC
5635  26CD
5636  26CE
5637  26CF
5638  26D0
5639  26D1
5640  26D2
5641  26D3
5642  26D4
5643  26D5
5644  26D6
5645  26D7
5646  26D8
5647  26D9
5648  26DA
5649  26DB
5650  26DC
5651  26DD
5652  26DE
5653  26DF
5654  26E0
5655  26E1
5656  26E2
5657  26E3
5658  26E4
5659  26E5
5660  26E6
5661  26E7
5662  26E8
5663  26E9
5664  26EA
5665  26EB
5666  26EC
5667  26ED
5668  26EE
5669  26EF
5670  26F0
5671  26F1
5672  26F2
5673  26F3
5674  26F4
5675  26F5
5676  26F6
5677  26F7
5678  26F8
5679  26F9
5680  26FA
5681  26FB
5682  26FC
5683  26FD
5684  26FE
5685  26FF
5686  2700
5687  2701
5688  2702
5689  2703
5690  2704
5691  2705
5692  2706
5693  2707
5694  2708
5695  2709
5696  270A
5697  270B
5698  270C
5699  270D
5700  270E
5701  270F
5702  2710
5703  2711
5704  2712
5705  2713
5706  2714
5707  2715
5708  2716
5709  2717
5710  2718
5711  2719
5712  271A
5713  271B
5714  271C
5715  271D
5716  271E
5717  271F
5718  2720
5719  2721
5720  2722
5721  2723
5722  2724
5723  2725
5724  2726
5725  2727
5726  2728
5727  2729
5728  272A
5729  272B
5730  272C
5731  272D
5732  272E
5733  272F
5734  2730
5735  2731
5736  2732
5737  2733
5738  2734
5739  2735
5740  2736
5741  2737
5742  2738
5743  2739
5744  273A
5745  273B
5746  273C
5747  273D
5748  273E
5749  273F
5750  2740
5751  2741
5752  2742
5753  2743
5754  2744
5755  2745
5756  2746
5757  2747
5758  2748
5759  2749
5760  274A
5761  274B
5762  274C
5763  274D
5764  274E
5765  274F
5766  2750
5767  2751
5768  2752
5769  2753
5770  2754
5771  2755
5772  2756
5773  2757
5774  2758
5775  2759
5776  275A
5777  275B
5778  275C
5779  275D
5780  275E
5781  275F
5782  2760
5783  2761
5784  2762
5785  2763
5786  2764
5787  2765
5788  2766
5789  2767
5790  2768
5791  2769
5792  276A
5793  276B
5794  276C
5795  276D
5796  276E
5797  276F
5798  2770
5799  2771
5800  2772
5801  2773
5802  2774
5803  2775
5804  2776
5805  2777
5806  2778
5807  2779
5808  277A
5809  277B
5810  277C
5811  277D
5812  277E
5813  277F
5814  2780
5815  2781
5816  2782
5817  2783
5818  2784
5819  2785
5820  2786
5821  2787
5822  2788
5823  2789
5824  278A
5825  278B
5826  278C
5827  278D
5828  278E
5829  278F
5830  2790
5831  2791
5832  2792
5833  2793
5834  2794
5835  2795
5836  2796
5837  2797
5838  2798
5839  2799
5840  279A
5841  279B
5842  279C
5843  279D
5844  279E
5845  279F
5846  27A0
5847  27A1
5848  27A2
5849  27A3
5850  27A4
5851  27A5
5852  27A6
5853  27A7
5854  27A8
5855  27A9
5856  27AA
5857  27AB
5858  27AC
5859  27AD
5860  27AE
5861  27AF
5862  27B0
5863  27B1
5864  27B2
5865  27B3
5866  27B4
5867  27B5
5868  27B6
5869  27B7
5870  27B8
5871  27B9
5872  27BA
5873  27BB
5874  27BC
5875  27BD
5876  27BE
5877  27BF
5878  27C0
5879  27C1
5880  27C2
5881  27C3
5882  27C4
5883  27C5
5884  27C6
5885  27C7
5886  27C8
5887  27C9
5888  27CA
5889  27CB
5890  27CC
5891  27CD
5892  27CE
5893  27CF
5894  27D0
5895  27D1
5896  27D2
5897  27D3
5898  27D4
5899  27D5
5900  27D6
5901  27D7
5902  27D8
5903  27D9
5904  27DA
5905  27DB
5906  27DC
5907  27DD
5908  27DE
5909  27DF
5910  27E0
5911  27E1
5912  27E2
5913  27E3
5914  27E4
5915  27E5
5916  27E6
5917  27E7
5918  27E8
5919  27E9
5920  27EA
5921  27EB
5922  27EC
5923  27ED
5924  27EE
5925  27EF
5926  27F0
5927  27F1
5928  27F2
5929  27F3
5930  27F4
5931  27F5
5932  27F6
5933  27F7
5934  27F8
5935  27F9
5936  27FA
5937  27FB
5938  27FC
5939  27FD
5940  27FE
5941  27FF
5942  2800
5943  2801
5944  2802
5945  2803
5946  2804
5947  2805
5948  2806
5949  2807
5950  2808
5951  2809
5952  280A
5953  280B
5954  280C
5955  280D
5956  280E
5957  280F
5958  2810
5959  2811
5960  2812
5961  2813
5962  2814
5963  2815
5964  2816
5965  2817
5966  2818
5967  2819
5968  281A
5969  281B
5970  281C
5971  281D
5972  281E
5973  281F
5974  2820
5975  2821
5976  2822
5977  2823
5978  2824
5979  2825
5980  2826
5981  2827
5982  2828
5983  2829
5984  282A
5985  282B
5986  282C
5987  282D
5988  282E
5989  282F
5990  2830
5991  2831
5992  2832
5993  2833
5994  2834
5995  2835
5996  2836
5997  2837
5998  2838
5999  2839
6000  283A
6001  283B
6002  283C
6003  283D
6004  283E
6005  283F
6006  2840
6007  2841
6008  2842
6009  2843
6010  2844
6011  2845
6012  2846
6013  2847
6014  2848
6015  2849
6016  284A
6017  284B
6018  284C
6019  284D
6020  284E
6021  284F
6022  2850
6023  2851
6024  2852
6025  2853
6026  2854
6027  2855
6028  2856
6029  2857
6030  2858
6031  2859
6032  285A
6033  285B
6034  285C
6035  285D
6036  285E
6037  285F
6038  2860
6039  2861
6040  2862
6041  2863
6042  2864
6043  2865
6044  2866
6045  2867
6046  2868
6047  2869
6048  286A
6049  286B
6050  286C
6051  286D
6052  286E
6053  286F
6054  2870
6055  2871
6056  2872
6057  2873
6058  2874
6059  2875
6060  2876
6061  2877
6062  2878
6063  2879
6064  287A
6065  287B
6066  287C
6067  287D
6068  287E
6069  287F
6070  2880
6071  2881
6072  2882
6073  2883
6074  2884
6075  2885
6076  2886
6077  2887
6078  2888
6079  2889
6080  288A
6081  288B
6082  288C
6083  288D
6084  288E
6085  288F
6086  2890
6087  2891
6088  2892
6089  2893
6090  2894
6091  2895
6092  2896
6093  2897
6094  2898
6095  2899
6096  289A
6097  289B
6098  289C
6099  289D
6100  289E
6101  289F
6102  28A0
6103  28A1
6104  28A2
6105  28A3
6106  28A4
6107  28A5
6108  28A6
6109  28A7
6110  28A8
6111  28A9
6112  28AA
6113  28AB
6114  28AC
6115  28AD
6116  28AE
6117  28AF
6118  28B0
6119  28B1
6120  28B2
6121  28B3
6122  28B4
6123  28B5
6124  28B6
6125  28B7
6126  28B8
6127  28B9
6128  28BA
6129  28BB
6130  28BC
6131  28BD
6132  28BE
6133  28BF
6134  28C0
6135  28C1
6136  28C2
6137  28C3
6138  28C4
6139  28C5
6140  28C6
6141  28C7
6142  28C8
6143  28C9
6144  28CA
6145  28CB
6146  28CC
6147  28CD
6148  28CE
6149  28CF
6150  28D0
6151  28D1
6152  28D2
6153  28D3
6154  28D4
6155  28D5
6156  28D6
6157  28D7
6158  28D8
6159  28D9
6160  28DA
6161  28DB
6162  28DC
6163  28DD
6164  28DE
6165  28DF
6166  28E0
6167  28E1
6168  28E2
6169  28E3
6170  28E4
6171  28E5
6172  28E6
6173  28E7
6174  28E8
6175  28E9
6176  28EA
6177  28EB
6178  28EC
6179  28ED
6180  28EE
6181  28EF
6182  28F0
6183  28F1
6184  28F2
6185  28F3
6186  28F4
6187  28F5
6188  28F6
6189  28F7
6190  28F8
6191  28F9
6192  28FA
6193  28FB
6194  28FC
6195  28FD
6196  28FE
6197  28FF
6198  2900
6199  2901
6200  2902
6201  2903
6202  2904
6203  2905
6204  2906
6205  2907
6206  2908
6207  2909
6208  290A
6209  290B
6210  290C
6211  290D
6212  290E
6213  290F
6214  2910
6215  2911
6216  2912
6217  2913
6218  2914
6219  2915
6220  2916
6221  2917
6222  2918
6223  2919
6224  291A
6225  291B
6226  291C
6227  291D
6228  291E
6229  291F
6230  2920
6231  2921
6232  2922
6233  2923
6234  2924
6235  2925
6236  2926
6237  2927
6238  2928
6239  2929
6240  292A
6241  292B
6242  292C
6243  292D
6244  292E
6245  292F
6246  2930
6247  2931
6248  2932
6249  2933
6250  2934
6251  2935
6252  2936
6253  2937
6254  2938
6255  2939
6256  293A
6257  293B
6258  293C
6259  293D
6260  293E
6261  293F
6262  2940
6263  2941
6264  2942
6265  2943
6266  2944
6267  2945
6268  2946
6269  2947
6270  2948
6271  2949
6272  294A
6273  294B
6274  294C
6275  294D
6276  294E
6277  294F
6278  2950
6279  2951
6280  2952
6281  2953
6282  2954
6283  2955
6284  2956
6285  2957
6286  2958
6287  2959
6288  295A
6289  295B
6290  295C
6291  295D
6292  295E
6293  295F
6294  2960
6295  2961
6296  2962
6297  2963
6298  2964
6299  2965
6300  2966
6301  2967
6302  2968
6303  2969
6304  296A
6305  296B
6306  296C
6307  296D
6308  296E
6309  296F
6310  2970
6311  2971
6312  2972
6313  2973
6314  2974
6315  2975
6316  2976
6317  2977
6318  2978
6319  2979
6320  297A
6321  297B
6322  297C
6323  297D
6324  297E
6325  297F
6326  2980
6327  2981
6328  2982
6329  2983
6330  2984
6331  2985
6332  2986
6333  2987
6334  2988
6335  2989
6336  298A
6337  298B
6338  298C
6339  298D
6340  298E
6341  298F
6342  2990
6343  2991
6344  2992
6345  2993
6346  2994
6347  2995
6348  2996
6349  2997
6350  2998
6351  2999
6352  299A
6353  299B
6354  299C
6355  299D
6356  299E
6357  299F
6358  29A0
6359  29A1
6360  29A2
6361  29A3
6362  29A4
6363  29A5
6364  29A6
6365  29A7
6366  29A8
6367  29A9
6368  29AA
6369  29AB
6370  29AC
6371  29AD
6372  29AE
6373  29AF
6374  29B0
6375  29B1
6376  29B2
6377  29B3
6378  29B4
6379  29B5
6380  29B6
6381  29B7
6382  29B8
6383  29B9
6384  29BA
6385  29BB
6386  29BC
6387  29BD
6388  29BE
6389  29BF
6390  29C0
6391  29C1
6392  29C2
6393  29C3
6394  29C4
6395  29C5
6396  29C6
6397  29C7
6398  29C8
6399  29C9
6400  29CA
6401  29CB
6402  29CC
6403  29CD
6404  29CE
6405  29CF
6406  29D0
6407  29D1
6408  29D2
6409  29D3
6410  29D4
6411  29D5
6412  29D6
6413  29D7
6414  29D8
6415  29D9
6416  29DA
6417  29DB
6418  29DC
6419  29DD
6420  29DE
6421  29DF
6422  29E0
6423  29E1
6424  29E2
6425  29E3
6426  29E4
6427  29E5
6428  29E6
6429  29E7
6430  29E8
6431  29E9
6432  29EA
6433  29EB
6434  29EC
6435  29ED
6436  29EE
6437  29EF
6438  29F0
6439  29F1
6440  29F2
6441  29F3
6442  29F4
6443  29F5
6444  29F6
6445  29F7
6446  29F8
6447  29F9
6448  29FA
6449  29FB
6450  29FC
6451  29FD
6452  29FE
6453  29FF
6454  2A00
6455  2A01
6456  2A02
6457  2A03
6458  2A04
6459  2A05
6460  2A06
6461  2A07
6462  2A08
6463  2A09
6464  2A0A
6465  2A0B
6466  2A0C
6467  2A0D
6468  2A0E
6469  2A0F
6470  2A10
6471  2A11
6472  2A12
6473  2A13
6474  2A14
6475  2A15
6476  2A16
6477  2A17
6478  2A18
6479  2A19
6480  2A1A
6481  2A1B
6482  2A1C
6483  2A1D
6484  2A1E
6485  2A1F
6486  2A20
6487  2A21
6488  2A22
6489  2A23
6490  2A24
6491  2A25
6492  2A26
6493  2A27
6494  2A28
6495  2A29
6496  2A2A
6497  2A2B
6498  2A2C
6499  2A2D
6500  2A2E
6501  2A2F
6502  2A30
6503  2A31
6504  2A32
6505  2A33
6506  2A34
6507  2A35
6508  2A36
6509  2A37
6510  2A38
6511  2A39
6512  2A3A
6513  2A3B
6514  2A3C
6515  2A3D
6516  2A3E
6517  2A3F
6518  2A40
6519  2A41
6520  2A42
6521  2A43
6522  2A44
6523  2A45
6524  2A46
6525  2A47
6526  2A48
6527  2A49
6528  2A4A
6529  2A4B
6530  2A4C
6531  2A4D
6532  2A4E
6533  2A4F
6534  2A50
6535  2A51
6536  2A52
6537  2A53
6538  2A54
6539  2A55
6540  2A56
6541  2A57
6542  2A58
6543  2A59
6544  2A5A
6545  2A5B
6546  2A5C
6547  2A5D
6548  2A5E
6549  2A5F
6550  2A60
6551  2A61
6552  2A62
6553  2A63
6554  2A64
6555  2A65
6556  2A66
6557  2A67
6558  2A68
6559  2A69
6560  2A6A
6561  2A6B
6562  2A6C
6563  2A6D
6564  2A6E
6565  2A6F
6566  2A70
6567  2A71
6568  2A72
6569  2A73
6570  2A74
6571  2A75
6572  2A76
6573  2A77
6574  2A78
6575  2A79
6576  2A7A
6577  2A7B
6578  2A7C
6579  2A7D
6580  2A7E
6581  2A7F
6582  2A80
6583  2A81
6584  2A82
6585  2A83
6586  2A84
6587  2A85
6588  2A86
6589  2A87
6590  2A88
6591  2A89
6592  2A8A
6593  2A8B
6594  2A8C
6595  2A8D
6596  2A8E
6597  2A8F
6598  2A90
6599  2A91
6600  2A92
6601  2A93
6602  2A94
6603  2A95
6604  2A96
6605  2A97
6606  2A98
6607  2A99
6608  2A9A
6609  2A9B
6610  2A9C
6611  2A9D
6612  2A9E
6613  2A9F
6614  2AA0
6615  2AA1
6616  2AA2
6617  2AA3
6618  2AA4
6619  2AA5
6620  2AA6
6621  2AA7
6622  2AA8
6623  2AA9
6624  2AAA
6625  2AAB
6626  2AAC
6627  2AAD
6628  2AAE
6629  2AAF
6630  2AB0
6631  2AB1
6632  2AB2
6633  2AB3
6634  2AB4
6635  2AB5
6636  2AB6
6637  2AB7
6638  2AB8
6639  2AB9
6640  2ABA
6641  2ABB
6642  2ABC
6643  2ABD
6644  2ABE
6645  2ABF
6646  2AC0
6647  2AC1
6648  2AC2
6649  2AC3
6650  2AC4
6651  2AC5
6652  2AC6
6653  2AC7
6654  2AC8
6655  2AC9
6656  2ACA
6657  2ACB
6658  2ACC
6659  2ACD
6660  2ACE
6661  2ACF
6662  2AD0
6663  2AD1
6664  2AD2
6665  2AD3
6666  2AD4
6667  2AD5
6668  2AD6
6669  2AD7
6670  2AD8
6671  2AD9
6672  2ADA
6673  2ADB
6674  2ADC
6675  2ADD
6676  2ADE
6677  2ADF
6678  2AE0
6679  2AE1
6680  2AE2
6681  2AE3
6682  2AE4
6683  2AE5
6684  2AE6
6685  2AE7
6686  2AE8
6687  2AE9
6688  2AEA
6689  2AEB
6690  2AEC
6691  2AED
6692  2AEE
6693  2AEF
6694  2AF0
6695  2AF1
6696  2AF2
6697  2AF3
6698  2AF4
6699  2AF5
6700  2AF6
6701  2AF7
6702  2AF8
6703  2AF9
6704  2AFA
6705  2AFB
6706  2AFC
6707  2AFD
6708  2AFE
6709  2AFF
6710  2B00
6711  2B01
6712  2B02
6713  2B03
6714  2B04
6715  2B05
6716  2B06
6717  2B07
6718  2B08
6719  2B09
6720  2B0A
6721  2B0B
6722  2B0C
6723  2B0D
6724  2B0E
6725  2B0F
6726  2B10
6727  2B11
6728  2B12
6729  2B13
6730  2B14
6731  2B15
6732  2B16
6733  2B17
6734  2B18
6735  2B19
6736  2B1A
6737  2B1B
6738  2B1C
6739  2B1D
6740  2B1E
6741  2B1F
6742  2B20
6743  2B21
6744  2B22
6745  2B23
6746  2B24
6747  2B25
6748  2B26
6749  2B27
6750  2B28
6751  2B29
6752  2B2A
6753  2B2B
6754  2B2C
6755  2B2D
6756  2B2E
6757  2B2F
6758  2B30
6759  2B31
6760  2B32
6761  2B33
6762  2B34
6763  2B35
6764  2B36
6765  2B37
6766  2B38
6767  2B39
6768  2B3A
6769  2B3B
6770  2B3C
6771  2B3D
6772  2B3E
6773  2B3F
6774  2B40
6775  2B41
6776  2B42
6777  2B43
6778  2B44
6779  2B45
6780  2B46
6781  2B47
6782  2B48
6783  2B49
6784  2B4A
6785  2B4B
6786  2B4C
6787  2B4D
6788  2B4E
6789  2B4F
6790  2B50
6791  2B51
6792  2B52
6793  2B53
6794  2B54
6795  2B55
6796  2B56
6797  2B57
6798  2B58
6799  2B59
6800  2B5A
6801  2B5B
6802  2B5C
6803  2B5D
6804  2B5E
6805  2B5F
6806  2B60
6807  2B61
6808  2B62
6809  2B63
6810  2B64
6811  2B65
6812  2B66
6813  2B67
6814  2B68
6815  2B69
6816  2B6A
6817  2B6B
6818  2B6C
6819  2B6D
6820  2B6E
6821  2B6F
6822  2B70
6823  2B71
6824  2B72
6825  2B73
6826  2B74
6827  2B75
6828  2B76
6829  2B77
6830  2B78
6831  2B79
6832  2B7A
6833  2B7B
6834  2B7C
6835  2B7D
6836  2B7E
6837  2B7F
6838  2B80
6839  2B81
6840  2B82
6841  2B83
6842  2B84
6843  2B85
6844  2B86
6845  2B87
6846  2B88
6847  2B89
6848  2B8A
6849  2B8B
6850  2B8C
6851  2B8D
6852  2B8E
6853  2B8F
6854  2B90
6855  2B91
6856  2B92
6857  2B93
6858  2B94
6859  2B95
6860  2B96
6861  2B97
6862  2B98
6863  2B99
6864  2B9A
6865  2B9B
6866  2B9C
6867  2B9D
6868  2B9E
6869  2B9F
6870  2BA0
6871  2BA1
6872  2BA2
6873  2BA3
6874  2BA4
6875  2BA5
6876  2BA6
6877  2BA7
6878  2BA8
6879  2BA9
6880  2BAA
6881  2BAB
6882  2BAC
6883  2BAD
6884  2BAE
6885  2BAF
6886  2BB0
6887  2BB1
6888  2BB2
6889  2BB3
6890  2BB4
6891  2BB5
6892  2BB6
6893  2BB7
6894  2BB8
6895  2BB9
6896  2BBA
6897  2BBB
6898  2BBC
6899  2BBD
6900  2BBE
6901  2BBF
6902  2BC0
6903  2BC1
6904  2BC2
6905  2BC3
6906  2BC4
6907  2BC5
6908  2BC6
6909  2BC7
6910  2BC8
6911  2BC9
6912  2BCA
6913  2BCB
6914  2BCC
6915  2BCD
6916  2BCE
6917  2BCF
6918  2BD0
6919  2BD1
6920  2BD2
6921  2BD3
6922  2BD4
6923  2BD5
6924  2BD6
6925  2BD7
6926  2BD8
6927  2BD9
6928  2BDA
6929  2BDB
6930  2BDC
6931  2BDD
6932  2BDE
6933  2BDF
6934  2BE0
6935  2BE1
6936  2BE2
6937  2BE3
6938  2BE4
6939  2BE5
6940  2BE6
6941  2BE7
6942  2BE8
6943  2BE9
6944  2BEA
6945  2BEB
6946  2BEC
6947  2BED
6948  2BEE
6949  2BEF
6950  2BF0
6951  2BF1
6952  2BF2
6953  2BF3
6954  2BF4
6955  2BF5
6956  2BF6
6957  2BF7
6958  2BF8
6959  2BF9
6960  2BFA
6961  2BFB
6962  2BFC
6963  2BFD
6964  2BFE
6965  2BFF
6966  2C00
6967  2C01
6968  2C02
6969  2C03
6970  2C04
6971  2C05
6972  2C06
6973  2C07
6974  2C08
6975  2C09
6976  2C0A
6977  2C0B
6978  2C0C
6979  2C0D
6980  2C0E
6981  2C0F
6982  2C10
6983  2C11
6984  2C12
6985  2C13
6986  2C14
6987  2C15
6988  2C16
6989  2C17
6990  2C18
6991  2C19
6992  2C1A
6993  2C1B
6994  2C1C
6995  2C1D
6996  2C1E
6997  2C1F
6998  2C20
6999  2C21
7000  2C22
7001  2C23
7002  2C24
7003  2C25
7004  2C26
7005  2C27
7006  2C28
7007  2C29
7008  2C2A
7009  2C2B
7010  2C2C
7011  2C2D
7012  2C2E
7013  2C2F
7014  2C30
7015  2C31
7016  2C32
7017  2C33
7018  2C34
7019  2C35
7020  2C36
7021  2C37
7022  2C38
7023  2C39
7024  2C3A
7025  2C3B
7026  2C3C
7027  2C3D
7028  2C3E
7029  2C3F
7030  2C40
7031  2C41
7032  2C42
7033  2C43
7034  2C44
7035  2C45
7036  2C46
7037  2C47
7038  2C48
7039  2C49
7040  2C4A
7041  2C4B
7042  2C4C
7043  2C4D
7044  2C4E
7045  2C4F
7046  2C50
7047  2C51
7048  2C52
7049  2C53
7050  2C54
7051  2C55
7052  2C56
7053  2C57
7054  2C58
7055  2C59
7056  2C5A
7057  2C5B
7058  2C5C
7059  2C5D
7060  2C5E
7061  2C5F
7062  2C60
7063  2C61
7064  2C62
7065  2C63
7066  2C64
7067  2C65
7068  2C66
7069  2C67
7070  2C68
7071  2C69
7072  2C6A
7073  2C6B
7074  2C6C
7075  2C6D
7076  2C6E
7077  2C6F
7078  2C70
7079  2C71
7080  2C72
7081  2C73
7082  2C74
7083  2C75
7084  2C76
7085  2C77
7086  2C78
7087  2C79
7088  2C7A
7089  2C7B
7090  2C7C
7091  2C7D
7092  2C7E
7093  2C7F
7094  2C80
7095  2C81
7096  2C82
7097  2C83
7098  2C84
7099  2C85
7100  2C86
7101  2C87
7102  2C88
7103  2C89
7104  2C8A
7105  2C8B
7106  2C8C
7107  2C8D
7108  2C8E
7109  2C8F
7110  2C90
7111  2C91
7112  2C92
7113  2C93
7114  2C94
7115  2C95
7116  2C96
7117  2C97
7118  2C98
7119  2C99
7120  2C9A
7121  2C9B
7122  2C9C
7123  2C9D
7124  2C9E
7125  2C9F
7126  2CA0
7127  2CA1
7128  2CA2
7129  2CA3
7130  2CA4
7131  2CA5
7132  2CA6
7133  2CA7
7134  2CA8
7135  2CA9
7136  2CAA
7137  2CAB
7138  2CAC
7139  2CAD
7140  2CAE
7141  2CAF
7142  2CB0
7143  2CB1
7144  2CB2
7145  2CB3
7146  2CB4
7147  2CB5
7148  2CB6
7149  2CB7
7150  2CB8
7151  2CB9
7152  2CBA
7153  2CBB
7154  2CBC
7155  2CBD
7156  2CBE
7157  2CBF
7158  2CC0
7159  2CC1
7160  2CC2
7161  2CC3
7162  2CC4
7163  2CC5
7164  2CC6
7165  2CC7
7166  2CC8
7167  2CC9
7168  2CCA
7169  2CCB
7170  2CCC
7171  2CCD
7172  2CCE
7173  2CCF
7174  2CD0
7175  2CD1
7176  2CD2
7177  2CD3
7178  2CD4
7179  2CD5
7180  2CD6
7181  2CD7
7182  2CD8
7183  2CD9
7184  2CDA
7185  2CDB
7186  2CDC
7187  2CDD
7188  2CDE
7189  2CDF
7190  2CE0
7191  2CE1
7192  2CE2
7193  2CE3
7194  2CE4
7195  2CE5
7196  2CE6
7197  2CE7
7198  2CE8
7199  2CE9
7200  2CEA
7201  2CEB
7202  2CEC
7203  2CED
7204  2CEE
7205  2CEF
7206  2CF0
7207  2CF1
7208  2CF2
7209  2CF3
7210  2CF4
7211  2CF5
7212  2CF6
7213  2CF7
7214  2CF8
7215  2CF9
7216  2CFA
7217  2CFB
7218  2CFC
7219  2CFD
7220  2CFE
7221  2CFF
7222  2D00
7223  2D01
7224  2D02
7225  2D03
7226  2D04
7227  2D05
7228  2D06
7229  2D07
7230  2D08
7231  2D09
7232  2D0A
7233  2D0B
7234  2D0C
7235  2D0D
7236  2D0E
7237  2D0F
7238  2D10
7239  2D11
7240  2D12
7241  2D13
7242  2D14
7243  2D15
7244  2D16
7245  2D17
7246  2D18
7247  2D19
7248  2D1A
7249  2D1B
7250  2D1C
7251  2D1D
7252  2D1E
7253  2D1F
7254  2D20
7255  2D21
7256  2D22
7257  2D23
7258  2D24
7259  2D25
7260  2D26
7261  2D27
7262  2D28
7263  2D29
7264  2D2A
7265  2D2B
7266  2D2C
7267  2D2D
7268  2D2E
7269  2D2F
7270  2D30
7271  2D31
7272  2D32
7273  2D33
7274  2D34
7275  2D35
7276  2D36
7277  2D37
7278  2D38
7279  2D39
7280  2D3A
7281  2D3B
7282  2D3C
7283  2D3D
7284  2D3E
7285  2D3F
7286  2D40
7287  2D41
7288  2D42
7289  2D43
7290  2D44
7291  2D45
7292  2D46
7293  2D47
7294  2D48
7295  2D49
7296  2D4A
7297  2D4B
7298  2D4C
7299  2D4D
7300  2D4E
7301  2D4F
7302  2D50
7303  2D51
7304  2D52
7305  2D53
7306  2D54
7307  2D55
7308  2D56
7309  2D57
7310  2D58
7311  2D59
7312  2D5A
7313  2D5B
7314  2D5C
7315  2D5D
7316  2D5E
7317  2D5F
7318  2D60
7319  2D61
7320  2D62
7321  2D63
7322  2D64
7323  2D65
7324  2D66
7325  2D67
7326  2D68
7327  2D69
7328  2D6A
7329  2D6B
7330  2D6C
7331  2D6D
7332  2D6E
7333  2D6F
7334  2D70
7335  2D71
7336  2D72
7337  2D73
7338  2D74
7339  2D75
7340  2D76
7341  2D77
7342  2D78
7343  2D79
7344  2D7A
7345  2D7B
7346  2D7C
7347  2D7D
7348  2D7E
7349  2D7F
7350  2D80
7351  2D81
7352  2D82
7353  2D83
7354  2D84
7355  2D85
7356  2D86
7357  2D87
7358  2D88
7359  2D89
7360  2D8A
7361  2D8B
7362  2D8C
7363  2D8D
7364  2D8E
7365  2D8F
7366  2D90
7367  2D91
7368  2D92
7369  2D93
7370  2D94
7371  2D95
7372  2D96
7373  2D97
7374  2D98
7375  2D99
7376  2D9A
7377  2D9B
7378  2D9C
7379  2D9D
7380  2D9E
7381  2D9F
7382  2DA0
7383  2DA1
7384  2DA2
7385  2DA3
7386  2DA4
7387  2DA5
7388  2DA6
7389  2DA7
7390  2DA8
7391  2DA9
7392  2DAA
7393  2DAB
7394  2DAC
7395  2DAD
7396  2DAE
7397  2DAF
7398  2DB0
7399  2DB1
7400  2DB2
7401  2DB3
7402  2DB4
7403  2DB5
7404  2DB6
7405  2DB7
7406  2DB8
7407  2DB9
7408  2DBA
7409  2DBB
7410  2DBC
7411  2DBD
7412  2DBE
7413  2DBF
7414  2DC0
7415  2DC1
7416  2DC2
7417  2DC3
7418  2DC4
7419  2DC5
7420  2DC6
7421  2DC7
7422  2DC8
7423  2DC9
7424  2DCA
7425  2DCB
7426  2DCC
7427  2DCD
7428  2DCE
7429  2DCF
7430  2DD0
7431  2DD1
7432  2DD2
7433  2DD3
7434  2DD4
7435  2DD5
7436  2DD6
7437  2DD7
7438  2DD8
7439  2DD9
7440  2DDA
7441  2DDB
7442  2DDC
7443  2DDD
7444  2DDE
7445  2DDF
7446  2DE0
7447  2DE1
7448  2DE2
7449  2DE3
7450  2DE4
7451  2DE5
7452  2DE6
7453  2DE7
7454  2DE8
7455  2DE9
7456  2DEA
7457  2DEB
7458  2DEC
7459  2DED
7460  2DEE
7461  2DEF
7462  2DF0
7463  2DF1
7464  2DF2
7465  2DF3
7466  2DF4
7467  2DF5
7468  2DF6
7469  2DF7
7470  2DF8
7471  2DF9
7472  2DFA
7473  2DFB
7474  2DFC
7475  2DFD
7476  2DFE
7477  2DFF
7478  2E00
7479  2E01
7480  2E02
7481  2E03
7482  2E04
7483  2E05
7484  2E06
7485  2E07
7486  2E08
7487  2E09
7488  2E0A
7489  2E0B
7490  2E0C
7491  2E0D
7492  2E0E
7493  2E0F
7494  2E10
7495  2E11
7496  2E12
7497  2E13
7498  2E14
7499  2E15
7500  2E16
7501  2E17
7502  2E18
7503  2E19
7504  2E1A
7505  2E1B
7506  2E1C
7507  2E1D
7508  2E1E
7509  2E1F
7510  2E20
7511  2E21
7512  2E22
7513  2E23
7514  2E24
7515  2E25
7516  2E26
7517  2E27
7518  2E28
7519  2E29
7520  2E2A
7521  2E2B
7522  2E2C
7523  2E2D
7524  2E2E
7525  2E2F
7526  2E30
7527  2E31
7528  2E32
7529  2E33
7530  2E34
7531  2E35
7532  2E36
7533  2E37
7534  2E38
7535  2E39
7536  2E3A
7537  2E3B
7538  2E3C
7539  2E3D
7540  2E3E
7541  2E3F
7542  2E40
7543  2E41
7544  2E42
7545  2E43
7546  2E44
7547  2E45
7548  2E46
7549  2E47
7550  2E48
7551  2E49
7552  2E4A
7553  2E4B
7554  2E4C
7555  2E4D
7556  2E4E
7557  2E4F
7558  2E50
7559  2E51
7560  2E52
7561  2E53
7562  2E54
7563  2E55
7564  2E56
7565  2E57
7566  2E58
7567  2E59
7568  2E5A
7569  2E5B
7570  2E5C
7571  2E5D
7572  2E5E
7573  2E5F
7574  2E60
7575  2E61
7576  2E62
7577  2E63
7578  2E64
7579  2E65
7580  2E66
7581  2E67
7582  2E68
7583  2E69
7584  2E6A
7585  2E6B
7586  2E6C
7587  2E6D
7588  2E6E
7589  2E6F
7590  2E70
7591  2E71
7592  2E72
7593  2E73
7594  2E74
7595  2E75
7596  2E76
7597  2E77
7598  2E78
7599  2E79
7600  2E7A
7601  2E7B
7602  2E7C
7603  2E7D
7604  2E7E
7605  2E7F
7606  2E80
7607  2E81
7608  2E82
7609  2E83
7610  2E84
7611  2E85
7612  2E86
7613  2E87
7614  2E88
7615  2E89
7616  2E8A
7617  2E8B
7618  2E8C
7619  2E8D
7620  2E8E
7621  2E8F
7622  2E90
7623  2E91
7624  2E92
7625  2E93
7626  2E94
7627  2E95
7628  2E96
7629  2E97
7630  2E98
7631  2E99
7632  2E9A
7633  2E9B
7634  2E9C
7635  2E9D
7636  2E9E
7637  2E9F
7638  2EA0
7639  2EA1
7640  2EA2
7641  2EA3
7642  2EA4
7643  2EA5
7644  2EA6
7645  2EA7
7646  2EA8
7647  2EA9
7648  2EAA
7649  2EAB
7650  2EAC
7651  2EAD
7652  2EAE
7653  2EAF
7654  2EB0
7655  2EB1
7656  2EB2
7657  2EB3
7658  2EB4
7659  2EB5
7660  2EB6
7661  2EB7
7662  2EB8
7663  2EB9
7664  2EBA
7665  2EBB
7666  2EBC
7667  2EBD
7668  2EBE
7669  2EBF
7670  2EC0
7671  2EC1
7672  2EC2
7673  2EC3
7674  2EC4
7675  2EC5
7676  2EC6
7677  2EC7
7678  2EC8
7679  2EC9
7680  2ECA
7681  2ECB
7682  2ECC
7683  2ECD
7684  2ECE
7685  2ECF
7686  2ED0
7687  2ED1
7688  2ED2
7689  2ED3
7690  2ED4
7691  2ED5
7692  2ED6
7693  2ED7
7694  2ED8
7695  2ED9
7696  2EDA
7697  2EDB
7698  2EDC
7699  2EDD
7700  2EDE
7701  2EDF
7702  2EE0
7703  2EE1
7704  2EE2
7705  2EE3
7706  2EE4
7707  2EE5
7708  2EE6
7709  2EE7
7710  2EE8
7711  2EE9
7712  2EEA
7713  2EEB
7714  2EEC
7715  2EED
7716  2EEE
7717  2EEF
7718  2EF0
7719  2EF1
7720  2EF2
7721  2EF3
7722  2EF4
7723  2EF5
7724  2EF6
7725  2EF7
7726  2EF8
7727  2EF9
7728  2EFA
7729  2EFB
7730  2EFC
7731  2EFD
7732  2EFE
7733  2EFF
7734  2F00
7735  2F01
7736  2F02
7737  2F03
7738  2F04
7739  2F05
7740  2F06
7741  2F07
7742  2F08
7743  2F09
7744  2F0A
7745  2F0B
7746  2F0C
7747  2F0D
7748  2F0E
7749  2F0F
7750  2F10
7751  2F11
7752  2F12
7753  2F13
7754  2F14
7755  2F15
7756  2F16
7757  2F17
7758  2F18
7759  2F19
7760  2F1A
7761  2F1B
7762  2F1C
7763  2F1D
7764  2F1E
7765  2F1F
7766  2F20
7767  2F21
7768  2F22
7769  2F23
7770  2F24
7771  2F25
7772  2F26
7773  2F27
7774  2F28
7775  2F29
7776  2F2A
7777  2F2B
7778  2F2C
7779  2F2D
7780  2F2E
7781  2F2F
7782  2F30
7783  2F31
7784  2F32
7785  2F33
7786  2F34
7787  2F35
7788  2F36
7789  2F37
7790  2F38
7791  2F39
7792  2F3A
7793  2F3B
7794  2F3C
7795  2F3D
7796  2F3E
7797  2F3F
7798  2F40
7799  2F41
7800  2F42
7801  2F43
7802  2F44
7803  2F45
7804  2F46
7805  2F47
7806  2F48
7807  2F49
7808  2F4A
7809  2F4B
7810  2F4C
7811  2F4D
7812  2F4E
7813  2F4F
7814  2F50
7815  2F51
7816  2F52
7817  2F53
7818  2F54
7819  2F55
7820  2F56
7821  2F57
7822  2F58
7823  2F59
7824  2F5A
7825  2F5B
7826  2F5C
7827  2F5D
7828  2F5E
7829  2F5F
7830  2F60
7831  2F61
7832  2F62
7833  2F63
7834  2F64
7835  2F65
7836  2F66
7837  2F67
7838  2F68
7839  2F69
7840  2F6A
7841  2F6B
7842  2F6C
7843  2F6D
7844  2F6E
7845  2F6F
7846  2F70
7847  2F71
7848  2F72
7849  2F73
7850  2F74
7851  2F75
7852  2F76
7853  2F77
7854  2F78
7855  2F79
7856  2F7A
7857  2F7B
7858  2F7C
7859  2F7D
7860  2F7E
7861  2F7F
7862  2F80
7863  2F81
7864  2F82
7865  2F83
7866  2F84
7867  2F85
7868  2F86
7869  2F87
7870  2F88
7871  2F89
7872  2F8A
7873  2F8B
7874  2F8C
7875  2F8D
7876  2F8E
7877  2F8F
7878  2F90
7879  2F91
7880  2F92
7881  2F93
7882  2F94
7883  2F95
7884  2F96
7885  2F97
7886  2F98
7887  2F99
7888  2F9A
7889  2F9B
7890  2F9C
7891  2F9D
7892  2F9E
7893  2F9F
7894  2FA0
7895  2FA1
7896  2FA2
7897  2FA3
7898  2FA4
7899  2FA5
7900  2FA6
7901  2FA7
7902  2FA8
7903  2FA9
7904  2FAA
7905  2FAB
7906  2FAC
7907  2FAD
7908  2FAE
7909  2FAF
7910  2FB0
7911  2FB1
7912  2FB2
7913  2FB3
7914  2FB4
7915  2FB5
7916  2FB6
7917  2FB7
7918  2FB8
7919  2FB9
7920  2FBA
7921  2FBB
7922  2FBC
7923  2FBD
7924  2FBE
7925  2FBF
7926  2FC0
7927  2FC1
7928  2FC2
7929  2FC3
7930  2FC4
7931  2FC5
7932  2FC6
7933  2FC7
7934  2FC8
7935  2FC9
7936  2FCA
7937  2FCB
7938  2FCC
7939  2FCD
7940  2FCE
7941  2FCF
7942  2FD0
7943  2FD1
7944  2FD2
7945  2FD3
7946  2FD4
7947  2FD5
7948  2FD6
7949  2FD7
7950  2FD8
7951  2FD9
7952  2FDA
7953  2FDB
7954  2FDC
7955  2FDD
7956  2FDE
7957  2FDF
7958  2FE0
7959  2FE1
7960  2FE2
7961  2FE3
7962  2FE4
7963  2FE5
7964  2FE6
7965  2FE7
7966  2FE8
7967  2FE9
7968  2FEA
7969  2FEB
7970  2FEC
7971  2FED
7972  2FEE
7973  2FEF
7974  2FF0
7975  2FF1
7976  2FF2
7977  2FF3
7978  2FF4
7979  2FF5
7980  2FF6
7981  2FF7
7982  2FF8
7983  2FF9
7984  2FFA
7985  2FFB
7986  2FFC
7987  2FFD
7988  2FFE
7989  2FFF
7990  3000
7991  3001
7992  3002
7993  3003
7994  3004
7995  3005
7996  3006
7997  3007
7998  3008
7999  3009
8000  300A
8001  300B
8002  300C
8003  300D
8004  300E
8005  300F
8006  3010
8007  3011
8008  3012
8009  3013
8010  3014
8011  3015
8012  3016
8013  3017
8014  3018
8015  3019
8016  301A
8017  301B
8018  301C
8019  301D
8020  301E
8021  301F
8022  3020
8023  3021
8024  3022
8025  3023
8026  3024
8027  3025
8028  3026
8029  3027
8030  3028
8031  3029
8032  302A
8033  302B
8034  302C
8035  302D
8036  302E
8037  302F
8038  3030
8039  3031
8040  3032
8041  3033
8042  3034
8043  3035
8044  3036
8045  3037
8046  3038
8047  3039
8048  303A
8049  303B
8050  303C
8051  303D
8052  303E
8053  303F
8054  3040
8055  3041
8056  3042
8057  3043
8058  3044
8059  3045
8060  3046
8061  3047
8062  3048
8063  3049
8064  304A
8065  304B
8066  304C
8067  304D
8068  304E
8069  304F
8070  3050
8071  3051
8072  3052
8073  3053
8074  3054
8075  3055
8076  3056
8077  3057
8078  3058
8079  3059
8080  305A
8081  305B
8082  305C
8083  305D
8084  305E
8085  305F
8086  3060
8087  3061
8088  3062
8089  3063
8090  3064
8091  3065
8092  3066
8093  3067
8094  3068
8095  3069
8096  306A
8097  306B
8098  306C
8099  306D
8100  306E
8101  306F
8102  3070
8103  3071
8104  3072
8105  3073
8106  3074
8107  3075
8108  3076
8109  3077
8110  3078
8111  3079
8112  307A
8113  307B
8114  307C
8115  307D
8116  307E
8117  307F
8118  3080
8119  3081
8120  3082
8121  3083
8122  3084
8123  3085
8124  3086
8125  3087
8126  3088
8127  3089
8128  308A
8129  308B
8130  308C
8131  308D
8132  308E
8133  308F
8134  3090
8135  3091
8136  3092
8137  3093
8138  3094
8139  3095
8140  3096
8141  3097
8142  3098
8143  3099
8144  309A
8145  309B
8146  309C
8147  309D
8148  309E
8149  309F
8150  30A0
8151  30A1
8152  30A2
8153  30A3
8154  30A4
8155  30A5
8156  30A6
8157  30A7
8158  30A8
8159  30A9
8160  30AA
8161  30AB
8162  30AC
8163  30AD
8164  30AE
8165  30AF
8166  30B0
8167  30B1
8168  30B2
8169  30B3
8170  30B4
8171  30B5
8172  30B6
8173  30B7
8174  30B8
8175  30B9
8176  30BA
8177  30BB
8178  30BC
8179  30BD
8180  30BE
8181  30BF
8182  30C0
8183  30C1
8184  30C2
8185  30C3
8186  30C4
8187  30C5
8188  30C6
8189  30C7
8190  30C8
8191  30C9
8192  30CA
8193  30CB
8194  30CC
8195  30CD
8196  30CE
8197  30CF
8198  30D0
8199  30D1
8200  30D2
8201  30D3
8202  30D4
8203  30D5
8204  30D6
8205  30D7
8206  30D8
8207  30D9
8208  30DA
8209  30DB
8210  30DC
8211  30DD
8212  30DE
8213  30DF
8214  30E0
8215  30E1
8216  30E2
8217  30E3
8218  30E4
8219  30E5
8220  30E6
8221  30E7
8222  30E8
8223  30E9
8224  30EA
8225  30EB
8226  30EC
8227  30ED
8228  30EE
8229  30EF
8230  30F0
8231  30F1
8232  30F2
8233  30F3
8234  30F4
8235  30F5
8236  30F6
8237  30F7
8238  30F8
8239  30F9
8240  30FA
8241  30FB
8242  30FC
8243  30FD
8244  30FE
8245  30FF
8246  3100
8247  3101
8248  3102
8249  3103
8250  3104
8251  3105
8252  3106
8253  3107
8254  3108
8255  3109
8256  310A
8257  310B
8258  310C
8259  310D
8260  310E
8261  310F
8262  3110
8263  3111
8264  3112
8265  3113
8266  3114
8267  3115
8268  3116
8269  3117
8270  3118
8271  3119
8272  311A
8273  311B
8274  311C
8275  311D
8276  311E
8277  311F
8278  3120
8279  3121
8280  3122
8281  3123
8282  3124
8283  3125
8284  3126
8285  3127
8286  3128
8287  3129
8288  312A
8289  312B
8290  312C
8291  312D
8292  312E
8293  312F
8294  3130
8295  3131
8296  3132
8297  3133
8298  3134
8299  3135
8300  3136
8301  3137
8302  3138
8303  3139
8304  313A
8305  313B
8306  313C
8307  313D
8308  313E
8309  313F
8310  3140
8311  3141
8312  3142
8313  3143
8314  3144
8315  3145
8316  3146
8317  3147
8318  3148
8319  3149
8320  314A
8321  314B
8322  314C
8323  314D
8324  314E
8325  314F
8326  3150
8327  3151
8328  3152
8329  3153
8330  3154
8331  3155
8332  3156
8333  3157
8334  3158
8335  3159
8336  315A
8337  315B
8338  315C
8339  315D
8340  315E
8341  315F
8342  3160
8343  3161
8344  3162
8345  3163
8346  3164
8347  3165
8348  3166
8349  3167
8350  3168
8351  3169
8352  316A
8353  316B
8354  316C
8355  316D
8356  316E
8357  316F
8358  3170
8359  3171
8360  3172
8361  3173
8362  3174
8363  3175
8364  3176
8365  3177
8366  3178
8367  3179
8368  317A
8369  317B
8370  317C
8371  317D
8372  317E
8373  317F
8374  3180
8375  3181
8376  3182
8377  3183
8378  3184
8379  3185
8380  3186
8381  3187
8382  3188
8383  3189
8384  318A
8385  318B
8386  318C
8387  318D
8388  318E
8389  318F
8390  3190
8391  3191
8392  3192
8393  3193
8394  3194
8395  3195
8396  3196
8397  3197
8398  3198
8399  3199
8400  319A
8401  319B
8402  319C
8403  319D
8404  319E
8405  319F
8406  31A0
8407  31A1
8408  31A2
8409  31A3
8410  31A4
8411  31A5
8412  31A6
8413  31A7
8414  31A8
8415  31A9
8416  31AA
8417  31AB
8418  31AC
8419  31AD
8420  31AE
8421  31AF
8422  31B0
8423  31B1
8424  31B2
8425  31B3
8426  31B4
8427  31B5
8428  31B6
8429  31B7
8430  31B8
8431  31B9
8432  31BA
8433  31BB
8434  31BC
8435  31BD
8436  31BE
8437  31BF
8438  31C0
8439  31C1
8440  31C2
8441  31C3
8442  31C4
8443  31C5
8444  31C6
8445  31C7
8446  31C8
8447  31C9
8448  31CA
8449  31CB
8450  31CC
8451  31CD
8452  31CE
8453  31CF
8454  31D0
8455  31D1
8456  31D2
8457  31D3
8458  31D4
8459  31D5
8460  31D6
8461  31D7
8462  31D8
8463  31D9
8464  31DA
8465  31DB
8466  31DC
8467  31DD
8468  31DE
8469  31DF
8470  31E0
8471  31E1
8472  31E2
8473  31E3
8474  31E4
8475  31E5
8476  31E6
8477  31E7
8478  31E8
8479  31E9
8480  31EA
8481  31EB
8482  31EC
8483  31ED
8484  31EE
8485  31EF
8486  31F0
8487  31F1
8488  31F2
8489  31F3
8490  31F4
8491  31F5
8492  31F6
8493  31F7
8494  31F8
8495  31F9
8496  31FA
8497  31FB
8498  31FC
8499  31FD
8500  31FE
8501  31FF
8502  3200
8503  3201
8504  3202
8505  3203
8506  3204
8507  3205
8508  3206
8509  3207
8510  3208
8511  3209
8512  320A
8513  320B
8514  320C
8515  320D
8516  320E
8517  320F
8518  3210
8519  3211
8520  3212
8521  3213
8522  3214
8523  3215
8524  3216
8525  3217
8526  3218
8527  3219
8528  321A
8529  321B
8530  321C
8531  321D
8532  321E
8533  321F
8534  3220
8535  3221
8536  3222
8537  3223
8538  3224
8539  3225
8540  3226
8541  3227
8542  3228
8543  3229
8544  322A
8545  322B
8546  322C
8547  322D
8548  322E
8549  322F
8550  3230
8551  3231
8552  3232
8553  3233
8554  3234
8555  3235
8556  3236
8557  3237
8558  3238
8559  3239
8560  323A
8561  323B
8562  323C
8563  323D
8564  323E
8565  323F
8566  3240
8567  3241
8568  3242
8569  3243
8570  3244
8571  3245
8572  3246
8573  3247
8574  3248
8575  3249
8576  324A
8577  324B
8578  324C
8579  324D
8580  324E
8581  324F
8582  3250
8583  3251
8584  3252
8585  3253
8586  3254
8587  3255
8588  3256
8589  3257
8590  3258
8591  3259
8592  325A
8593  325B
8594  325C
8595  325D
8596  325E
8597  325F
8598  3260
8599  3261
8600  3262
8601  3263
8602  3264
8603  3265
8604  3266
8605  3267
8606  3268
8607  3269
8608  326A
8609  326B
8610  326C
8611  326D
8612  326E
8613  326F
8614  3270
8615  3271
8616  3272
8617  3273
8618  3274
8619  3275
8620  3276
8621  3277
8622  3278
8623  3279
8624  327A
8625  327B
8626  327C
8627  327D
8628  327E
8629  327F
8630  3280
8631  3281
8632  3282
8633  3283
8634  3284
8635  3285
8636  3286
8637  3287
8638  3288
8639  3289
8640  328A
8641  328B
8642  328C
8643  328D
8644  328E
8645  328F
8646  3290
8647  3291
8648  3292
8649  3293
8650  3294
8651  3295
8652  3296
8653  3297
8654  3298
8655  3299
8656  329A
8657  329B
8658  329C
8659  329D
8660  329E
8661  329F
8662  32A0
8663  32A1
8664  32A2
8665  32A3
8666  32A4
8667  32A5
8668  32A6
8669  32A7
8670  32A8
8671  32A9
8672  32AA
8673  32AB
8674  32AC
8675  32AD
8676  32AE
8677  32AF
8678  32B0
8679  32B1
8680  32B2
8681  32B3
8682  32B4
8683  32B5
8684  32B6
8685  32B7
8686  32B8
8687  32B9
8688  32BA
8689  32BB
8690  32BC
8691  32BD
8692  32BE
8693  32BF
8694  32C0
8695  32C1
8696  32C2
8697  32C3
8698  32C4
8699  32C5
8700  32C6
8701  32C7
8702  32C8
8703  32C9
8704  32CA
8705  32CB
8706  32CC
8707  32CD
8708  32CE
8709  32CF
8710  32D0
8711  32D1
8712  32D2
8713  32D3
8714  32D4
8715  32D5
8716  32D6
8717  32D7
8718  32D8
8719  32D9
8720  32DA
8721  32DB
8722  32DC
8723  32DD
8724  32DE
8725  32DF
8726  32E0
8727  32E1
8728  32E2
8729  32E3
8730  32E4
8731  32E5
8732  32E6
8733  32E7
8734  32E8
8735  32E9
8736  32EA
8737  32EB
8738  32EC
8739  32ED
8740  32EE
8741  32EF
8742  32F0
8743  32F1
8744  32F2
8745  32F3
8746  32F4
8747  32F5
8748  32F6
8749  32F7
8750  32F8
8751  32F9
8752  32FA
8753  32FB
8754  32FC
8755  32FD
8756  32FE
8757  32FF
8758  3300
8759  3301
8760  3302
8761  3303
8762  3304
8763  3305
8764  3306
8765  3307
8766  3308
8767  3309
8768  330A
8769  330B
8770  330C
8771  330D
8772  330E
8773  330F
8774  3310
8775  3311
8776  3312
8777  3313
8778  3314
8779  3315
8780  3316
8781  3317
8782  3318
8783  3319
8784  331A
8785  331B
8786  331C
8787  331D
8788  331E
8789  331F
8790  3320
8791  3321
8792  3322
8793  3323
8794  3324
8795  3325
8796  3326
8797  3327
8798  3328
8799  3329
8800  332A
8801  332B
8802  332C
8803  332D
8804  332E
8805  332F
8806  3330
8807  3331
8808  3332
8809  3333
8810  3334
8811  3335
8812  3336
8813  3337
8814  3338
8815  3339
8816  333A
8817  333B
8818  333C
8819  333D
8820  333E
8821  333F
8822  3340
8823  3341
8824  3342
8825  3343
8826  3344
8827  3345
8828  3346
8829  3347
8830  3348
8831  3349
8832  334A
8833  334B
8834  334C
8835  334D
8836  334E
8837  334F
8838  3350
8839  3351
8840  3352
8841  3353
8842  3354
8843  3355
8844  3356
8845  3357
8846  3358
8847  3359
8848  335A
8849  335B
8850  335C
8851  335D
8852  335E
8853  335F
8854  3360
8855  3361
8856  3362
8857  3363
8858  3364
8859  3365
8860  3366
8861  3367
8862  3368
8863  3369
8864  336A
8865  336B
8866  336C
8867  336D
8868  336E
8869  336F
8870  3370
8871  3371
8872  3372
8873  3373
8874  3374
8875  3375
8876  3376
8877  3377
8878  3378
8879  3379
8880  337A
8881  337B
8882  337C
8883  337D
8884  337E
8885  337F
8886  3380
8887  3381
8888  3382
8889  3383
8890  3384
8891  3385
8892  3386
8893  3387
8894  3388
8895  3389
8896  338A
8897  338B
8898  338C
8899  338D
8900  338E
8901  338F
8902  3390
8903  3391
8904  3392
8905  3393
8906  3394
8907  3395
8908  3396
8909  3397
8910  3398
8911  3399
8912  339A
8913  339B
8914  339C
8915  339D
8916  339E
8917  339F
8918  33A0
8919  33A1
8920  33A2
8921  33A3
8922  33A4
8923  33A5
8924  33A6
8925  33A7
8926  33A8
8927  33A9
8928  33AA
8929  33AB
8930  33AC
8931  33AD
8932  33AE
8933  33AF
8934  33B0
8935  33B1
8936  33B2
8937  33B3
8938  33B4
8939  33B5
8940  33B6
8941  33B7
8942  33B8
8943  33B9
8944  33BA
8945  33BB
8946  33BC
8947  33BD
8948  33BE
8949  33BF
8950  33C0
8951  33C1
8952  33C2
8953  33C3
8954  33C4
8955  33C5
8956  33C6
8957  33C7
8958  33C8
8959  33C9
8960  33CA
8961  33CB
8962  33CC
8963  33CD
8964  33CE
8965  33CF
8966  33D0
8967  33D1
8968  33D2
8969  33D3
8970  33D4
8971  33D5
8972  33D6
8973  33D7
8974  33D8
8975  33D9
8976  33DA
8977  33DB
8978  33DC
8979  33DD
8980  33DE
8981  33DF
8982  33E0
8983  33E1
8984  33E2
8985  33E3
8986  33E4
8987  33E5
8988  33E6
8989  33E7
8990  33E8
8991  33E9
8992  33EA
8993  33EB
8994  33EC
8995  33ED
8996  33EE
8997  33EF
8998  33F0
8999  33F1
9000  33F2
9001  33F3
9002  33F4
9003  33F5
9004  33F6
9005  33F7
9006  33F8
9007  33F9
9008  33FA
9009  33FB
9010  33FC
9011  33FD
9012  33FE
9013  33FF
9014  3400
9015  3401
9016  3402
9017  3403
9018  3404
9019  3405
9020  3406
9021  3407
9022  3408
9023  3409
9024  340A
9025  340B
9026  340C
9027  340D
9028  340E
9029  340F
9030  3410
9031  3411
9032  3412
9033  3413
9034  3414
9035  3415
9036  3416
9037  3417
9038  3418
9039  3419
9040  341A
9041  341B
9042  341C
9043  341D
9044  341E
9045  341F
9046  3420
9047  3421
9048  3422
9049  3423
9050  3424
9051  3425
9052  3426
9053  3427
9054  3428
9055  3429
9056  342A
9057  342B
9058  342C
9059  342D
9060  342E
9061  342F
9062  3430
9063  3431
9064  3432
9065  3433
9066  3434
9067  3435
9068  3436
9069  3437
9070  3438
9071  3439
9072  343A
9073  343B
9074  343C
9075  343D
9076  343E
9077  343F
9078  3440
9079  3441
9080  3442
9081  3443
9082  3444
9083  3445
9084  3446
9085  3447
9086  3448
9087  3449
9088  344A
9089  344B
9090  344C
9091  344D
9092  344E
9093  344F
9094  3450
9095  3451
9096  3452
9097  3453
9098  3454
9099  3455
9100  3456
9101  3457
9102  3458
9103  3459
9104  345A
9105  345B
9106  345C
9107  345D
9108  345E
9109  345F
9110  3460
9111  3461
9112  3462
9113  3463
9114  3464
9115  3465
9116  3466
9117  3467
9118  3468
9119  3469
9120  346A
9121  346B
9122  346C
9123  346D
9124  346E
9125  346F
9126  3470
9127  3471
9128  3472
9129  3473
9130  3474
9131  3475
9132  3476
9133  3477
9134  3478
9135  3479
9136  347A
9137  347B
9138  347C
9139  347D
9140  347E
9141  347F
9142  3480
9143  3481
9144  3482
9145  3483
9146  3484
9147  3485
9148  3486
9149  3487
9150  3488
9151  3489
9152  348A
9153  348B
9154  348C
9155  348D
9156  348E
9157  348F
9158  3490
9159  3491
9160  3492
9161  3493
9162  3494
9163  3495
9164  3496
9165  3497
9166  3498
9167  3499
9168  349A
9169  349B
9170  349C
9171  349D
9172  349E
9173  349F
9174  34A0
9175  34A1
9176  34A2
9177  34A3
9178  34A4
9179  34A5
9180  34A6
9181  34A7
9182  34A8
9183  34A9
9184  34AA
9185  34AB
9186  34AC
9187  34AD
9188  34AE
9189  34AF
9190  34B0
9191  34B1
9192  34B2
9193  34B3
9194  34B4
9195  34B5
9196  34B6
9197  34B7
9198  34B8
9199  34B9
9200  34BA
9201  34BB
9202  34BC
9203  34BD
9204  34BE
9205  34BF
9206  34C0
9207  34C1
9208  34C2
9209  34C3
9210  34C4
9211  34C5
9212  34C6
9213  34C7
9214  34C8
9215  34C9
9216  34CA
9217  34CB
9218  34CC
9219  34CD
9220  34CE
9221  34CF
9222  34D0
9223  34D1
9224  34D2
9225  34D3
9226  34D4
9227  34D5
9228  34D6
9229  34D7
9230  34D8
9231  34D9
9232  34DA
9233  34DB
9234  34DC
9235  34DD
9236  34DE
9237  34DF
9238  34E0
9239  34E1
9240  34E2
9241  34E3
9242  34E4
9243  34E5
9244  34E6
9245  34E7
9246  34E8
9247  34E9
9248  34EA
9249  34EB
9250  34EC
9251  34ED
9252  34EE
9253  34EF
9254  34F0
9255  34F1
9256  34F2
9257  34F3
9258  34F4
9259  34F5
9260  34F6
9261  34F7
9262  34F8
9263  34F9
9264  34FA
9265  34FB
9266  34FC
9267  34FD
9268  34FE
9269  34FF
9270  3500
9271  3501
9272  3502
9273  3503
9274  3504
9275  3505
9276  3506
9277  3507
9278  3508
9279  3509
9280  350A
9281  350B
9282  350C
9283  350D
9284  350E
9285  350F
9286  3510
9287  3511
9288  3512
9289  3513
9290  3514
9291  3515
9292  3516
9293  3517
9294  3518
9295  3519
9296  351A
9297  351B
9298  351C
9299  351D
9300  351E
9301  351F
9302  3520
9303  3521
9304  3522
9305  3523
9306  3524
9307  3525
9308  3526
9309  3527
9310  3528
9311  3529
9312  352A
9313  352B
9314  352C
9315  352D
9316  352E
9317  352F
9318  3530
9319  3531
9320  3532
9321  3533
9322  3534
9323  3535
9324  3536
9325  3537
9326  3538
9327  3539
9328  353A
9329  353B
9330  353C
9331  353D
9332  353E
9333  353F
9334  3540
9335  3541
9336  3542
9337  3543
9338  3544
9339  3545
9340  3546
9341  3547
9342  3548
9343  3549
9344  354A
9345  354B
9346  354C
9347  354D
9348  354E
9349  354F
9350  3550
9351  3551
9352  3552
9353  3553
9354  3554
9355  3555
9356  3556
9357  3557
9358  3558
9359  3559
9360  355A
9361  355B
9362  355C
9363  355D
9364  355E
9365  355F
9366  3560
9367  3561
9368  3562
9369  3563
9370  3564
9371  3565
9372  3566
9373  3567
9374  3568
9375  3569
9376  356A
9377  356B
9378  356C
9379  356D
9380  356E
9381  356F
9382  3570
9383  3571
9384  3572
9385  3573
9386  3574
9387  3575
9388  3576
9389  3577
9390  3578
9391  3579
9392  357A
9393  357B
9394  357C
9395  357D
9396  357E
9397  357F
9398  3580
9399  3581
9400  3582
9401  3583
9402  3584
9403  3585
9404  3586
9405  3587
9406  3588
9407  3589
9408  358A
9409  358B
9410  358C
9411  358D
9412  358E
9413  358F
9414  3590
9415  3591
9416  3592
9417  3593
9418  3594
9419  3595
9420  3596
9421  3597
9422  3598
9423  3599
9424  359A
9425  359B
9426  359C
9427  359D
9428  359E
9429  359F
9430  35A0
9431  35A1
9432  35A2
9433  35A3
9434  35A4
9435  35A5
9436  35A6
9437  35A7
9438  35A8
9439  35A9
9440  35AA
9441  35AB
9442  35AC
9443  35AD
9444  35AE
9445  35AF
9446  35B0
9447  35B1
9448  35B2
9449  35B3
9450  35B4
9451  35B5
9452  35B6
9453  35B7
9454  35B8
9455  35B9
9456  35BA
9457  35BB
9458  35BC
9459  35BD
9460  35BE
9461  35BF
9462  35C0
9463  35C1
9464  35C2
9465  35C3
9466  35C4
9467  35C5
9468  35C6
9469  35C7
9470  35C8
9471  35C9
9472  35CA
9473  35CB
9474  35CC
9475  35CD
9476  35CE
9477  35CF
9478  35D0
9479  35D1
9480  35D2
9481  35D3
9482  35D4
9483  35D5
9484  35D6
9485  35D7
9486  35D8
9487  35D9
9488  35DA
9489  35DB
9490  35DC
9491  35DD
9492  35DE
9493  35DF
9494  35E0
9495  35E1
9496  35E2
9497  35E3
9498  35E4
9499  35E5
9500  35E6
9501  35E7
9502  35E8
9503  35E9
9504  35EA
9505  35EB
9506  35EC
9507  35ED
9508  35EE
9509  35EF
9510  35F0
9511  35F1
9512  35F2
9513  35F3
9514  35F4
9515  35F5
9516  35F6
9517  35F7
9518  35F8
9519  35F9
9520  35FA
9521  35FB
9522  35FC
9523  35FD
9524  35FE
9525  35FF
9526  3600
9527  3601
9528  3602
9529  3603
9530  3604
9531  3605
9532  3606
9533  3607
9534  3608
9535  3609
9536  360A
9537  360B
9538  360C
9539  360D
9540  360E
9541  360F
9542  3610
9543  3611
9544  3612
9545  3613
9546  3614
9547  3615
9548  3616
9549  3617
9550  3618
9551  3619
9552  361A
9553  361B
9554  361C
9555  361D
9556  361E
9557  361F
9558  3620
9559  3621
9560  3622
9561  3623
9562  3624
9563  3625
9564  3626
9565  3627
9566  3628
9567  3629
9568  362A
9569  362B
9570  362C
9571  362D
9572  362E
9573  362F
9574  3630
9575  3631
9576  3632
9577  3633
9578  3634
9579  3635
9580  3636
9581  3637
9582  3638
9583  3639
9584  363A
9585  363B
9586  363C
9587  363D
9588  363E
9589  363F
9590  3640
9591  3641
9592  3642
9593  3643
9594  3644
9595  3645
9596  3646
9597  3647
9598  3648
9599  3649
9600  364A
9601  364B
9602  364C
9603  364D
9604  364E
9605  364F
9606  3650
9607  3651
9608  3652
9609  3653
9610  3654
9611  3655
9612  3656
9613  3657
9614  3658
9615  3659
9616  365A
9617  365B
9618  365C
9619  365D
9620  365E
9621  365F
9622  3660
9623  3661
9624  3662
9625  3663
9626  3664
9627  3665
9628  3666
9629  3667
9630  3668
9631  3669
9632  366A
9633  366B
9634  366C
9635  366D
9636  366E
9637  366F
9638  3670
9639  3671
9640  3672
9641  3673
9642  3674
9643  3675
9644  3676
9645  3677
9646  3678
9647  3679
9648  367A
9649  367B
9650  367C
9651  367D
9652  367E
9653  367F
9654  3680
9655  3681
9656  3682
9657  3683
9658  3684
9659  3685
9660  3686
9661  3687
9662  3688
9663  3689
9664  368A
9665  368B
9666  368C
9667  368D
9668  368E
9669  368F
9670  3690
9671  3691
9672  3692
9673  3693
9674  3694
9675  3695
9676  3696
9677  3697
9678  3698
9679  3699
9680  369A
9681  369B
9682  369C
9683  369D
9684  369E
9685  369F
9686  36A0
9687  36A1
9688  36A2
9689  36A3
9690  36A4
9691  36A5
9692  36A6
9693  36A7
9694  36A8
9695  36A9
9696  36AA
9697  36AB
9698  36AC
9699  36AD
9700  36AE
9701  36AF
9702  36B0
9703  36B1
9704  36B2
9705  36B3
9706  36B4
9707  36B5
9708  36B6
9709  36B7
9710  36B8
9711  36B9
9712  36BA
9713  36BB
9714  36BC
9715  36BD
9716  36BE
9717  36BF
9718  36C0
9719  36C1
9720  36C2
9721  36C3
9722  36C4
9723  36C5
9724  36C6
9725  36C7
9726  36C8
9727  36C9
9728  36CA
9729  36CB
9730  36CC
9731  36CD
9732  36CE
9733  36CF
9734  36D0
9735  36D1
9736  36D2
9737  36D3
9738  36D4
9739  36D5
9740  36D6
9741  36D7
9742  36D8
9743  36D9
9744  36DA
9745  36DB
9746  36DC
9747  36DD
9748  36DE
9749  36DF
9750  36E0
9751  36E1
9752  36E2
9753  36E3
9754  36E4
9755  36E5
9756  36E6
9757  36E7
9758  36E8
9759  36E9
9760  36EA
9761  36EB
9762  36EC
9763  36ED
9764  36EE
9765  36EF
9766  36F0
9767  36F1
9768  36F2
9769  36F3
9770  36F4
9771  36F5
9772  36F6
9773  36F7
9774  36F8
9775  36F9
9776  36FA
9777  36FB
9778  36FC
9779  36FD
9780  36FE
9781  36FF
9782  3700
9783  3701
9784  3702
9785  3703
9786  3704
9787  3705
9788  3706
9789  3707
9790  3708
9791  3709
9792  370A
9793  370B
9794  370C
9795  370D
9796  370E
9797  370F
9798  3710
9799  3711
9800  3712
9801  3713
9802  3714
9803  3715
9804  3716
9805  3717
9806  3718
9807  3719
9808  371A
9809  371B
9810  371C
9811  371D
9812  371E
9813  371F
9814  3720
9815  3721
9816  3722
9817  3723
9818  3724
9819  3725
9820  3726
9821  3727
9822  3728
9823  3729
9824  372A
9825  372B
9826  372C
9827  372D
9828  372E
9829  372F
9830  3730
9831  3731
9832  3732
9833  3733
9834  3734
9835  3735
9836  3736
9837  3737
9838  3738
9839  3739
9840  373A
9841  373B
9842  373C
9843  373D
9844  373E
9845  373F
9846  3740
9847  3741
9848  3742
9849  3743
9850  3744
9851  3745
9852  3746
9853  3747
9854  3748
9855  3749
9856  374A
9857  374B
9858  374C
9859  374D
9860  374E
9861  374F
9862  3750
9863  3751
9864  3752
9865  3753
9866  3754
9867  3755
9868  3756
9869  3757
9870  3758
9871  3759
9872  375A
9873  375B
9874  375C
9875  375D
9876  375E
9877  375F
9878  3760
9879  3761
9880  3762
9881  3763
9882  3764
9883  3765
9884  3766
9885  3767
9886  3768
9887  3769
9888  376A
9889  376B
9890  376C
9891  376D
9892  376E
9893  376F
9894  3770
9895  3771
9896  3772
9897  3773
9898  3774
9899  3775
9900  3776
9901  3777
9902  3778
9903  3779
9904  377A
9905  377B
9906  377C
9907  377D
9908  377E
9909  377F
9910  3780
9911  3781
9912  3782
9913  3783
9914  3784
9915  3785
9916  3786
9917  3787
9918  3788
9919  3789
9920  378A
9921  378B
9922  378C
9923  378D
9924  378E
9925  378F
9926  3790
9927  3791
9928  3792
9929  3793
9930  3794
9931  3795
9932  3796
9933  3797
9934  3798
9935  3799
9936  379A
9937  379B
9938  379C
9939  379D
9940  379E
9941  379F
9942  37A0
9943  37A1
9944  37A2
9945  37A3
9946  37A4
9947  37A5
9948  37A6
9949  37A7
9950  37A8
9951  37A9
9952  37AA
9953  37AB
9954  37AC
9955  37AD
9956  37AE
9957  37AF
9958  37B0
9959  37B1
9960  37B2
9961  37B3
9962  37B4
9963  37B5
9964  37B6
9965  37B7
9966  37B8
9967  37B9
9968  37BA
9969  37BB
9970  37BC
9971  37BD
9972  37BE
9973  37BF
9974  37C0
9975  37C1
9976  37C2
9977  37C3
9978  37C4
9979  37C5
9980  37C6
9981  37C7
9982  37C8
9983  37C9
9984  37CA
9985  37CB
9986  37CC
9987  37CD
9988  37CE
9989  37CF
9990  37D0
9991  37D1
9992  37D2
9993  37D3
9994  37D4
9995  37D5
9996  37D6
9997  37D7
9998  37D8
9999  37D9
10000  37DA
10001  37DB
10002  37DC
10003  37DD
10004  37DE
10005  37DF
10006  37E0
10007  37E1
10008  37E2
10009  37E3
10010  37E4
10011  37E5
10012  37E6
10013  37E7
10014  37E8
10015  37E9
10016  37EA
10017  37EB
10018  37EC
10019  37ED
10020  37EE
10021  37EF
10022  37F0
10023  37F1
10024  37F2
10025  37F3
10026  37F4
10027  37F5
10028  37F6
10029  37F7
10030  37F8
10031  37F9
10032  37FA
10033  37FB
10034  37FC
10035  37FD
10036  37FE
10037  37FF
10038  3800
10039  3801
10040  3802
10041  3803
10042  3804
10043  3805
10044  3806
10045  3807
10046  3808
10047  3809
10048  380A
10049  380B
10050  380C
10051  380D
10052  380E
10053  380F
10054  3810
10055  3811
10056  3812
10057  3813
10058  3814
10059  3815
10060  3816
10061  3817
10062  3818
10063  3819
10064  381A
10065  381B
10066  381C
10067  381D
10068  381E
10069  381F
10070  3820
10071  3821
10072  3822
10073  3823
10074  3824
10075  3825
10076  3826
10077  3827
10078  3828
10079  3829
10080  382A
10081  382B
10082  382C
10083  382D
10084  382E
10085  382F
10086  3830
10087  3831
10088  3832
10089  3833
10090  3834
10091  3835
10092  3836
10093  3837
10094  3838
10095  3839
10096  383A
10097  383B
10098  383C
10099  383D
10100  383E
10101  383F
10102  3840
10103  3841
10104  3842
10105  3843
10106  3844
10107  3845
10108  3846
10109  3847
10110  3848
10111  3849
10112  384A
10113  384B
10114  384C
10115  384D
10116  384E
10117  384F
10118  3850
10119  3851
10120  3852
10121  3853
10122  3854
10123  3855
10124  3856
10125  3857
10126  3858
10127  3859
10128  385A
10129  385B
10130  385C
10131  385D
10132  385E
10133  385F
10134  3860
10135  3861
10136  3862
10137  3863
10138  3864
10139  3865
10140  3866
10141  3867
10142  3868
10143  3869
10144  386A
10145  386B
10146  386C
10147  386D
10148  386E
10149  386F
10150  3870
10151  3871
10152  3872
10153  3873
10154  3874
10155  3875
10156  3876
10157  3877
10158  3878
10159  3879
10160  387A
10161  387B
10162  387C
10163  387D
10164  387E
10165  387F
10166  3880
10167  3881
10168  3882
10169  3883
10170  3884
10171  3885
10172  3886
10173  3887
10174  3888
10175  3889
10176  388A
10177  388B
10178  388C
10179  388D
10180  388E
10181  388F
10182  3890
10183  3891
10184  3892
10185  3893
10186  3894
10187  3895
10188  3896
10189  3897
10190  3898
10191  3899
10192  389A
10193  389B
10194  389C
10195  389D
10196  389E
10197  389F
10198  38A0
10199  38A1
10200  38A2
10201  38A3
10202  38A4
10203  38A5
10204  38A6
10205  38A7
10206  38A8
10207  38A9
10208  38AA
10209  38AB
10210  38AC
10211  38AD
10212  38AE
10213  38AF
10214  38B0
10215  38B1
10216  38B2
10217  38B3
10218  38B4
10219  38B5
10220  38B6
10221  38B7
10222  38B8
10223  38B9
10224  38BA
10225  38BB
10226  38BC
10227  38BD
10228  38BE
10229  38BF
10230  38C0
10231  38C1
10232  38C2
10233  38C3
10234  38C4
10235  38C5
10236  38C6
10237  38C7
10238  38C8
10239  38C9
10240  38CA
10241  38CB
10242  38CC
10243  38CD
10244  38CE
10245  38CF
10246  38D0
10247  38D1
10248  38D2
10249  38D3
10250  38D4
10251  38D5
10252  38D6
10253  38D7
10254  38D8
10255  38D9
10256  38DA
10257  38DB
10258  38DC
10259  38DD
10260  38DE
10261  38DF
10262  38E0
10263  38E1
10264  38E2
10265  38E3
10266  38E4
10267  38E5
10268  38E6
10269  38E7
10270  38E8
10271  38E9
10272  38EA
10273  38EB
10274  38EC
10275  38ED
10276  38EE
10277  38EF
10278  38F0
10279  38F1
10280  38F2
10281  38F3
10282  38F4
10283  38F5
10284  38F6
10285  38F7
10286  38F8
10287  38F9
10288  38FA
10289  38FB
10290  38FC
10291  38FD
10292  38FE
10293  38FF
10294  3900
10295  3901
10296  3902
10297  3903
10298  3904
10299  3905
10300  3906
10301  3907
10302  3908
10303  3909
10304  390A
10305  390B
10306  390C
10307  390D
10308  390E
10309  390F
10310  3910
10311  3911
10312  3912
10313  3913
10314  3914
10315  3915
10316  3916
10317  3917
10318  3918
10319  3919
10320  391A
10321  391B
10322  391C
10323  391D
10324  391E
10325  391F
10326  3920
10327  3921
10328  3922
10329  3923
10330  3924
10331  3925
10332  3926
10333  3927
10334  3928
10335  3929
10336  392A
10337  392B
10338  392C
10339  392D
10340  392E
10341  392F
10342  3930
10343  3931
10344  3932
10345  3933
10346  3934
10347  3935
10348  3936
10349  3937
10350  3938
10351  3939
10352  393A
10353  393B
10354  393C
10355  393D
10356  393E
10357  393F
10358  3940
10359  3941
10360  3942
10361  3943
10362  3944
10363  3945
10364  3946
10365  3947
10366  3948
10367  3949
10368  394A
10369  394B
10370  394C
10371  394D
10372  394E
10373  394F
10374  3950
10375  3951
10376  3952
10377  3953
10378  3954
10379  3955
10380  3956
10381  3957
10382  3958
10383  3959
10384  395A
10385  395B
10386  395C
10387  395D
10388  395E
10389  395F
10390  3960
10391  3961
10392  3962
10393  3963
10394  3964
10395  3965
10396  3966
10397  3967
10398  3968
10399  3969
10400  396A
10401  396B
10402  396C
10403  396D
10404  396E
10405  396F
10406  3970
10407  3971
10408  3972
10409  3973
10410  3974
10411  3975
10412  3976
10413  3977
10414  3978
10415  3979
10416  397A
10417  397B
10418  397C
10419  397D
10420  397E
10421  397F
10422  3980
10423  3981
10424  3982
10425  3983
10426  3984
10427  3985
10428  3986
10429  3987
10430  3988
10431  3989
10432  398A
10433  398B
10434  398C
10435  398D
10436  398E
10437  398F
10438  3990
10439  3991
10440  3992
10441  3993
10442  3994
10443  3995
10444  3996
10445  3997
10446  3998
10447  3999
10448  399A
10449  399B
10450  399C
10451  399D
10452  399E
10453  399F
10454  39A0
10455  39A1
10456  39A2
10457  39A3
10458  39A4
10459  39A5
10460  39A6
10461  39A7
10462  39A8
10463  39A9
10464  39AA
10465  39AB
10466  39AC
10467  39AD
10468  39AE
10469  39AF
10470  39B0
10471  39B1
10472  39B2
10473  39B3
10474  39B4
10475  39B5
10476  39B6
10477  39B7
10478  39B8
10479  39B9
10480  39BA
10481  39BB
10482  39BC
10483  39BD
10484  39BE
10485  39BF
10486  39C0
10487  39C1
10488  39C2
10489  39C3
10490  39C4
10491  39C5
10492  39C6
10493  39C7
10494  39C8
10495  39C9
10496  39CA
10497  39CB
10498  39CC
10499  39CD
10500  39CE
10501  39CF
10502  39D0
10503  39D1
10504  39D2
10505  39D3
10506  39D4
10507  39D5
10508  39D6
10509  39D7
10510  39D8
10511  39D9
10512  39DA
10513  39DB
10514  39DC
10515  39DD
10516  39DE
10517  39DF
10518  39E0
10519  39E1
10520  39E2
10521  39E3
10522  39E4
10523  39E5
10524  39E6
10525  39E7
10526  39E8
10527  39E9
10528  39EA
10529  39EB
10530  39EC
10531  39ED
10532  39EE
10533  39EF
10534  39F0
10535  39F1
10536  39F2
10537  39F3
10538  39F4
10539  39F5
10540  39F6
10541  39F7
10542  39F8
10543  39F9
10544  39FA
10545  39FB
10546  39FC
10547  39FD
10548  39FE
10549  39FF
10550  3A00
10551  3A01
10552  3A02
10553  3A03
10554  3A04
10555  3A05
10556  3A06
10557  3A07
10558  3A08
10559  3A09
10560  3A0A
10561  3A0B
10562  3A0C
10563  3A0D
10564  3A0E
10565  3A0F
10566  3A10
10567  3A11
10568  3A12
10569  3A13
10570  3A14
10571  3A15
10572  3A16
10573  3A17
10574  3A18
10575  3A19
10576  3A1A
10577  3A1B
10578  3A1C
10579  3A1D
10580  3A1E
10581  3A1F
10582  3A20
10583  3A21
10584  3A22
10585  3A23
10586  3A24
10587  3A25
10588  3A26
10589  3A27
10590  3A28
10591  3A29
10592  3A2A
10593  3A2B
10594  3A2C
10595  3A2D
10596  3A2E
10597  3A2F
10598  3A30
10599  3A31
10600  3A32
10601  3A33
10602  3A34
10603  3A35
10604  3A36
10605  3A37
10606  3A38
10607  3A39
10608  3A3A
10609  3A3B
10610  3A3C
10611  3A3D
10612  3A3E
10613  3A3F
10614  3A40
10615  3A41
10616  3A42
10617  3A43
10618  3A44
10619  3A45
10620  3A46
10621  3A47
10622  3A48
10623  3A49
10624  3A4A
10625  3A4B
10626  3A4C
10627  3A4D
10628  3A4E
10629  3A4F
10630  3A50
10631  3A51
10632  3A52
10633  3A53
10634  3A54
10635  3A55
10636  3A56
10637  3A57
10638  3A58
10639  3A59
10640  3A5A
10641  3A5B
10642  3A5C
10643  3A5D
10644  3A5E
10645  3A5F
10646  3A60
10647  3A61
10648  3A62
10649  3A63
10650  3A64
10651  3A65
10652  3A66
10653  3A67
10654  3A68
10655  3A69
10656  3A6A
10657  3A6B
10658  3A6C
10659  3A6D
10660  3A6E
10661  3A6F
10662  3A70
10663  3A71
10664  3A72
10665  3A73
10666  3A74
10667  3A75
10668  3A76
10669  3A77
10670  3A78
10671  3A79
10672  3A7A
10673  3A7B
10674  3A7C
10675  3A7D
10676  3A7E
10677  3A7F
10678  3A80
10679  3A81
10680  3A82
10681  3A83
10682  3A84
10683  3A85
10684  3A86
10685  3A87
10686  3A88
10687  3A89
10688  3A8A
10689  3A8B
10690  3A8C
10691  3A8D
10692  3A8E
10693  3A8F
10694  3A90
10695  3A91
10696  3A92
10697  3A93
10698  3A94
10699  3A95
10700  3A96
10701  3A97
10702  3A98
10703  3A99
10704  3A9A
10705  3A9B
10706  3A9C
10707  3A9D
10708  3A9E
10709  3A9F
10710  3AA0
10711  3AA1
10712  3AA2
10713  3AA3
10714  3AA4
10715  3AA5
10716  3AA6
10717  3AA7
10718  3AA8
10719  3AA9
10720  3AAA
10721  3AAB
10722  3AAC
10723  3AAD
10724  3AAE
10725  3AAF
10726  3AB0
10727  3AB1
10728  3AB2
10729  3AB3
10730  3AB4
10731  3AB5
10732  3AB6
10733  3AB7
10734  3AB8
10735  3AB9
10736  3ABA
10737  3ABB
10738  3ABC
10739  3ABD
10740  3ABE
10741  3ABF
10742  3AC0
10743  3AC1
10744  3AC2
10745  3AC3
10746  3AC4
10747  3AC5
10748  3AC6
10749  3AC7
10750  3AC8
10751  3AC9
10752  3ACA
10753  3ACB
10754  3ACC
10755  3ACD
10756  3ACE
10757  3ACF
10758  3AD0
10759  3AD1
10760  3AD2
10761  3AD3
10762  3AD4
10763  3AD5
10764  3AD6
10765  3AD7
10766  3AD8
10767  3AD9
10768  3ADA
10769  3ADB
10770  3ADC
10771  3ADD
10772  3ADE
10773  3ADF
10774  3AE0
10775  3AE1
10776  3AE2
10777  3AE3
10778  3AE4
10779  3AE5
10780  3AE6
10781  3AE7
10782  3AE8
10783  3AE9
10784  3AEA
10785  3AEB
10786  3AEC
10787  3AED
10788  3AEE
10789  3AEF
10790  3AF0
10791  3AF1
10792  3AF2
10793  3AF3
10794  3AF4
10795  3AF5
10796  3AF6
10797  3AF7
10798  3AF8
10799  3AF9
10800  3AFA
10801  3AFB
10802  3AFC
10803  3AFD
10804  3AFE
10805  3AFF
10806  3B00
10807  3B01
10808  3B02
10809  3B03
10810  3B04
10811  3B05
10812  3B06
10813  3B07
10814  3B08
10815  3B09
10816  3B0A
10817  3B0B
10818  3B0C
10819  3B0D
10820  3B0E
10821  3B0F
10822  3B10
10823  3B11
10824  3B12
10825  3B13
10826  3B14
10827  3B15
10828  3B16
10829  3B17
10830  3B18
10831  3B19
10832  3B1A
10833  3B1B
10834  3B1C
10835  3B1D
10836  3B1E
10837  3B1F
10838  3B20
10839  3B21
10840  3B22
10841  3B23
10842  3B24
10843  3B25
10844  3B26
10845  3B27
10846  3B28
10847  3B29
10848  3B2A
10849  3B2B
10850  3B2C
10851  3B2D
10852  3B2E
10853  3B2F
10854  3B30
10855  3B31
10856  3B32
10857  3B33
10858  3B34
10859  3B35
10860  3B36
10861  3B37
10862  3B38
10863  3B39
10864  3B3A
10865  3B3B
10866  3B3C
10867  3B3D
10868  3B3E
10869  3B3F
10870  3B40
10871  3B41
10872  3B42
10873  3B43
10874  3B44
10875  3B45
10876  3B46
10877  3B47
10878  3B48
10879  3B49
10880  3B4A
10881  3B4B
10882  3B4C
10883  3B4D
10884  3B4E
10885  3B4F
10886  3B50
10887  3B51
10888  3B52
10889  3B53
10890  3B54
10891  3B55
10892  3B56
10893  3B57
10894  3B58
10895  3B59
10896  3B5A
10897  3B5B
10898  3B5C
10899  3B5D
10900  3B5E
10901  3B5F
10902  3B60
10903  3B61
10904  3B62
10905  3B63
10906  3B64
10907  3B65
10908  3B66
10909  3B67
10910  3B68
10911  3B69
10912  3B6A
10913  3B6B
10914  3B6C
10915  3B6D
10916  3B6E
10917  3B6F
10918  3B70
10919  3B71
10920  3B72
10921  3B73
10922  3B74
10923  3B75
10924  3B76
10925  3B77
10926  3B78
10927  3B79
10928  3B7A
10929  3B7B
10930  3B7C
10931  3B7D
10932  3B7E
10933  3B7F
10934  3B80
10935  3B81
10936  3B82
10937  3B83
10938  3B84
10939  3B85
10940  3B86
10941  3B87
10942  3B88
10943  3B89
10944  3B8A
10945  3B8B
10946  3B8C
10947  3B8D
10948  3B8E
10949  3B8F
10950  3B90
10951  3B91
10952  3B92
10953  3B93
10954  3B94
10955  3B95
10956  3B96
10957  3B97
10958  3B98
10959  3B99
10960  3B9A
10961  3B9B
10962  3B9C
10963  3B9D
10964  3B9E
10965  3B9F
10966  3BA0
10967  3BA1
10968  3BA2
10969  3BA3
10970  3BA4
10971  3BA5
10972  3BA6
10973  3BA7
10974  3BA8
10975  3BA9
10976  3BAA
10977  3BAB
10978  3BAC
10979  3BAD
10980  3BAE
10981  3BAF
10982  3BB0
10983  3BB1
10984  3BB2
10985  3BB3
10986  3BB4
10987  3BB5
10988  3BB6
10989  3BB7
10990  3BB8
10991  3BB9
10992  3BBA
10993  3BBB
10994  3BBC
10995  3BBD
10996  3BBE
10997  3BBF
10998  3BC0
10999  3BC1
11000  3BC2
11001  3BC3
11002  3BC4
11003  3BC5
11004  3BC6
11005  3BC7
11006  3BC8
11007  3BC9
11008  3BCA
11009  3BCB
11010  3BCC
11011  3BCD
11012  3BCE
11013  3BCF
11014  3BD0
11015  3BD1
11016  3BD2
11017  3BD3
11018  3BD4
11019  3BD5
11020  3BD6
11021  3BD7
11022  3BD8
11023  3BD9
11024  3BDA
11025  3BDB
11026  3BDC
11027  3BDD
11028  3BDE
11029  3BDF
11030  3BE0
11031  3BE1
11032  3BE2
11033  3BE3
11034  3BE4
11035  3BE5
11036  3BE6
11037  3BE7
11038  3BE8
11039  3BE9
11040  3BEA
11041  3BEB
11042  3BEC
11043  3BED
11044  3BEE
11045  3BEF
11046  3BF0
11047  3BF1
11048  3BF2
11049  3BF3
11050  3BF4
11051  3BF5
11052  3BF6
11053  3BF7
11054  3BF8
11055  3BF9
11056  3BFA
11057  3BFB
11058  3BFC
11059  3BFD
11060  3BFE
11061  3BFF
11062  3C00
11063  3C01
11064  3C02
11065  3C03
11066  3C04
11067  3C05
11068  3C06
11069  3C07
11070  3C08
11071  3C09
11072  3C0A
11073  3C0B
11074  3C0C
11075  3C0D
11076  3C0E
11077  3C0F
11078  3C10
11079  3C11
11080  3C12
11081  3C13
11082  3C14
11083  3C15
11084  3C16
11085  3C17
11086  3C18
11087  3C19
11088  3C1A
11089  3C1B
11090  3C1C
11091  3C1D
11092  3C1E
11093  3C1F
11094  3C20
11095  3C21
11096  3C22
11097  3C23
11098  3C24
11099  3C25
11100  3C26
11101  3C27
11102  3C28
11103  3C29
11104  3C2A
11105  3C2B
11106  3C2C
11107  3C2D
11108  3C2E
11109  3C2F
11110  3C30
11111  3C31
11112  3C32
11113  3C33
11114  3C34
11115  3C35
11116  3C36
11117  3C37
11118  3C38
11119  3C39
11120  3C3A
11121  3C3B
11122  3C3C
11123  3C3D
11124  3C3E
11125  3C3F
11126  3C40
11127  3C41
11128  3C42
11129  3C43
11130  3C44
11131  3C45
11132  3C46
11133  3C47
11134  3C48
11135  3C49
11136  3C4A
11137  3C4B
11138  3C4C
11139  3C4D
11140  3C4E
11141  3C4F
11142  3C50
11143  3C51
11144  3C52
11145  3C53
11146  3C54
11147  3C55
11148  3C56
11149  3C57
11150  3C58
11151  3C59
11152  3C5A
11153  3C5B
11154  3C5C
11155  3C5D
11156  3C5E
11157  3C5F
11158  3C60
11159  3C61
11160  3C62
11161  3C63
11162  3C64
11163  3C65
11164  3C66
11165  3C67
11166  3C68
11167  3C69
11168  3C6A
11169  3C6B
11170  3C6C
11171  3C6D
11172  3C6E
11173  3C6F
11174  3C70
11175  3C71
11176  3C72
11177  3C73
11178  3C74
11179  3C75
11180  3C76
11181  3C77
11182  3C78
11183  3C79
11184  3C7A
11185  3C7B
11186  3C7C
11187  3C7D
11188  3C7E
11189  3C7F
11190  3C80
11191  3C81
11192  3C82
11193  3C83
11194  3C84
11195  3C85
11196  3C86
11197  3C87
11198  3C88
11199  3C89
11200  3C8A
11201  3C8B
11202  3C8C
11203  3C8D
11204  3C8E
11205  3C8F
11206  3C90
11207  3C91
11208  3C92
11209  3C93
11210  3C94
11211  3C95
11212  3C96
11213  3C97
11214  3C98
11215  3C99
11216  3C9A
11217  3C9B
11218  3C9C
11219  3C9D
11220  3C9E
11221  3C9F
11222  3CA0
11223  3CA1
11224  3CA2
11225  3CA3
11226  3CA4
11227  3CA5
11228  3CA6
11229  3CA7
11230  3CA8
11231  3CA9
11232  3CAA
11233  3CAB
11234  3CAC
11235  3CAD
11236  3CAE
11237  3CAF
11238  3CB0
11239  3CB1
11240  3CB2
11241  3CB3
11242  3CB4
11243  3CB5
11244  3CB6
11245  3CB7
11246  3CB8
11247  3CB9
11248  3CBA
11249  3CBB
11250  3CBC
11251  3CBD
11252  3CBE
11253  3CBF
11254  3CC0
11255  3CC1
11256  3CC2
11257  3CC3
11258  3CC4
11259  3CC5
11260  3CC6
11261  3CC7
11262  3CC8
11263  3CC9
11264  3CCA
11265  3CCB
11266  3CCC
11267  3CCD
11268  3CCE
11269  3CCF
11270  3CD0
11271  3CD1
11272  3CD2
11273  3CD3
11274  3CD4
11275  3CD5
11276  3CD6
11277  3CD7
11278  3CD8
11279  3CD9
11280  3CDA
11281  3CDB
11282  3CDC
11283  3CDD
11284  3CDE
11285  3CDF
11286  3CE0
11287  3CE1
11288  3CE2
11289  3CE3
11290  3CE4
11291  3CE5
11292  3CE6
11293  3CE7
11294  3CE8
11295  3CE9
11296  3CEA
11297  3CEB
11298  3CEC
11299  3CED
11300  3CEE
11301  3CEF
11302  3CF0
11303  3CF1
11304  3CF2
11305  3CF3
11306  3CF4
11307  3CF5
11308  3CF6
11309  3CF7
11310  3CF8
11311  3CF9
11312  3CFA
11313  3CFB
11314  3CFC
11315  3CFD
11316  3CFE
11317  3CFF
11318  3D00
11319  3D01
11320  3D02
11321  3D03
11322  3D04
11323  3D05
11324  3D06
11325  3D07
11326  3D08
11327  3D09
11328  3D0A
11329  3D0B
11330  3D0C
11331  3D0D
11332  3D0E
11333  3D0F
11334  3D10
11335  3D11
11336  3D12
11337  3D13
11338  3D14
11339  3D15
11340  3D16
11341  3D17
11342  3D18
11343  3D19
11344  3D1A
11345  3D1B
11346  3D1C
11347  3D1D
11348  3D1E
11349  3D1F
11350  3D20
11351  3D21
11352  3D22
11353  3D23
11354  3D24
11355  3D25
11356  3D26
11357  3D27
11358  3D28
11359  3D29
11360  3D2A
11361  3D2B
11362  3D2C
11363  3D2D
11364  3D2E
11365  3D2F
11366  3D30
11367  3D31
11368  3D32
11369  3D33
11370  3D34
11371  3D35
11372  3D36
11373  3D37
11374  3D38
11375  3D39
11376  3D3A
11377  3D3B
11378  3D3C
11379  3D3D
11380  3D3E
11381  3D3F
11382  3D40
11383  3D41
11384  3D42
11385  3D43
11386  3D44
11387  3D45
11388  3D46
11389  3D47
11390  3D48
11391  3D49
11392  3D4A
11393  3D4B
11394  3D4C
11395  3D4D
11396  3D4E
11397  3D4F
11398  3D50
11399  3D51
11400  3D52
11401  3D53
11402  3D54
11403  3D55
11404  3D56
11405  3D57
11406  3D58
11407  3D59
11408  3D5A
11409  3D5B
11410  3D5C
11411  3D5D
11412  3D5E
11413  3D5F
11414  3D60
11415  3D61
11416  3D62
11417  3D63
11418  3D64
11419  3D65
11420  3D66
11421  3D67
11422  3D68
11423  3D69
11424  3D6A
11425  3D6B
11426  3D6C
11427  3D6D
11428  3D6E
11429  3D6F
11430  3D70
11431  3D71
11432  3D72
11433  3D73
11434  3D74
11435  3D75
11436  3D76
11437  3D77
11438  3D78
11439  3D79
11440  3D7A
11441  3D7B
11442  3D7C
11443  3D7D
11444  3D7E
11445  3D7F
11446  3D80
11447  3D81
11448  3D82
11449  3D83
11450  3D84
11451  3D85
11452  3D86
11453  3D87
11454  3D88
11455  3D89
11456  3D8A
11457  3D8B
11458  3D8C
11459  3D8D
11460  3D8E
11461  3D8F
11462  3D90
11463  3D91
11464  3D92
11465  3D93
11466  3D94
11467  3D95
11468  3D96
11469  3D97
11470  3D98
11471  3D99
11472  3D9A
11473  3D9B
11474  3D9C
11475  3D9D
11476  3D9E
11477  3D9F
11478  3DA0
11479  3DA1
11480  3DA2
11481  3DA3
11482  3DA4
11483  3DA5
11484  3DA6
11485  3DA7
11486  3DA8
11487  3DA9
11488  3DAA
11489  3DAB
11490  3DAC
11491  3DAD
11492  3DAE
11493  3DAF
11494  3DB0
11495  3DB1
11496  3DB2
11497  3DB3
11498  3DB4
11499  3DB5
11500  3DB6
11501  3DB7
11502  3DB8
11503  3DB9
11504  3DBA
11505  3DBB
11506  3DBC
11507  3DBD
11508  3DBE
11509  3DBF
11510  3DC0
11511  3DC1
11512  3DC2
11513  3DC3
11514  3DC4
11515  3DC5
11516  3DC6
11517  3DC7
11518  3DC8
11519  3DC9
11520  3DCA
11521  3DCB
11522  3DCC
11523  3DCD
11524  3DCE
11525  3DCF
11526  3DD0
11527  3DD1
11528  3DD2
11529  3DD3
11530  3DD4
11531  3DD5
11532  3DD6
11533  3DD7
11534  3DD8
11535  3DD9
11536  3DDA
11537  3DDB
11538  3DDC
11539  3DDD
11540  3DDE
11541  3DDF
11542  3DE0
11543  3DE1
11544  3DE2
11545  3DE3
11546  3DE4
11547  3DE5
11548  3DE6
11549  3DE7
11550  3DE8
11551  3DE9
11552  3DEA
11553  3DEB
11554  3DEC
11555  3DED
11556  3DEE
11557  3DEF
11558  3DF0
11559  3DF1
11560  3DF2
11561  3DF3
11562  3DF4
11563  3DF5
11564  3DF6
11565  3DF7
11566  3DF8
11567  3DF9
11568  3DFA
11569  3DFB
11570  3DFC
11571  3DFD
11572  3DFE
11573  3DFF
11574  3E00
11575  3E01
11576  3E02
11577  3E03
11578  3E04
11579  3E05
11580  3E06
11581  3E07
11582  3E08
11583  3E09
11584  3E0A
11585  3E0B
11586  3E0C
11587  3E0D
11588  3E0E
11589  3E0F
11590  3E10
11591  3E11
11592  3E12
11593  3E13
11594  3E14
11595  3E15
11596  3E16
11597  3E17
11598  3E18
11599  3E19
11600  3E1A
11601  3E1B
11602  3E1C
11603  3E1D
11604  3E1E
11605  3E1F
11606  3E20
11607  3E21
11608  3E22
11609  3E23
11610  3E24
11611  3E25
11612  3E26
11613  3E27
11614  3E28
11615  3E29
11616  3E2A
11617  3E2B
11618  3E2C
11619  3E2D
11620  3E2E
11621  3E2F
11622  3E30
11623  3E31
11624  3E32
11625  3E33
11626  3E34
11627  3E35
11628  3E36
11629  3E37
11630  3E38
11631  3E39
11632  3E3A
11633  3E3B
11634  3E3C
11635  3E3D
11636  3E3E
11637  3E3F
11638  3E40
11639  3E41
11640  3E42
11641  3E43
11642  3E44
11643  3E45
11644  3E46
11645  3E47
11646  3E48
11647  3E49
11648  3E4A
11649  3E4B
11650  3E4C
11651  3E4D
11652  3E4E
11653  3E4F
11654  3E50
11655  3E51
11656  3E52
11657  3E53
11658  3E54
11659  3E55
11660  3E56
11661  3E57
11662  3E58
11663  3E59
11664  3E5A
11665  3E5B
11666  3E5C
11667  3E5D
11668  3E5E
11669  3E5F
11670  3E60
11671  3E61
11672  3E62
11673  3E63
11674  3E64
11675  3E65
11676  3E66
11677  3E67
11678  3E68
11679  3E69
11680  3E6A
11681  3E6B
11682  3E6C
11683  3E6D
11684  3E6E
11685  3E6F
11686  3E70
11687  3E71
11688  3E72
11689  3E73
11690  3E74
11691  3E75
11692  3E76
11693  3E77
11694  3E78
11695  3E79
11696  3E7A
11697  3E7B
11698  3E7C
11699  3E7D
11700  3E7E
11701  3E7F
11702  3E80
11703  3E81
11704  3E82
11705  3E83
11706  3E84
11707  3E85
11708  3E86
11709  3E87
11710  3E88
11711  3E89
11712  3E8A
11713  3E8B
11714  3E8C
11715  3E8D
11716  3E8E
11717  3E8F
11718  3E90
11719  3E91
11720  3E92
11721  3E93
11722  3E94
11723  3E95
11724  3E96
11725  3E97
11726  3E98
11727  3E99
11728  3E9A
11729  3E9B
11730  3E9C
11731  3E9D
11732  3E9E
11733  3E9F
11734  3EA0
11735  3EA1
11736  3EA2
11737  3EA3
11738  3EA4
11739  3EA5
11740  3EA6
11741  3EA7
11742  3EA8
11743  3EA9
11744  3EAA
11745  3EAB
11746  3EAC
11747  3EAD
11748  3EAE
11749  3EAF
11750  3EB0
11751  3EB1
11752  3EB2
11753  3EB3
11754  3EB4
11755  3EB5
11756  3EB6
11757  3EB7
11758  3EB8
11759  3EB9
11760  3EBA
11761  3EBB
11762  3EBC
11763  3EBD
11764  3EBE
11765  3EBF
11766  3EC0
11767  3EC1
11768  3EC2
11769  3EC3
11770  3EC4
11771  3EC5
11772  3EC6
11773  3EC7
11774  3EC8
11775  3EC9
11776  3ECA
11777  3ECB
11778  3ECC
11779  3ECD
11780  3ECE
11781  3ECF
11782  3ED0
11783  3ED1
11784  3ED2
11785  3ED3
11786  3ED4
11787  3ED5
11788  3ED6
11789  3ED7
11790  3ED8
11791  3ED9
11792  3EDA
11793  3EDB
11794  3EDC
11795  3EDD
11796  3EDE
11797  3EDF
11798  3EE0
11799  3EE1
11800  3EE2
11801  3EE3
11802  3EE4
11803  3EE5
11804  3EE6
11805  3EE7
11806  3EE8
11807  3EE9
11808  3EEA
11809  3EEB
11810  3EEC
11811  3EED
11812  3EEE
11813  3EEF
11814  3EF0
11815  3EF1
11816  3EF2
11817  3EF3
11818  3EF4
11819  3EF5
11820  3EF6
11821  3EF7
11822  3EF8
11823  3EF9
11824  3EFA
11825  3EFB
11826  3EFC
11827  3EFD
11828  3EFE
11829  3EFF
11830  3F00
11831  3F01
11832  3F02
11833  3F03
11834  3F04
11835  3F05
11836  3F06
11837  3F07
11838  3F08
11839  3F09
11840  3F0A
11841  3F0B
11842  3F0C
11843  3F0D
11844  3F0E
11845  3F0F
11846  3F10
11847  3F11
11848  3F12
11849  3F13
11850  3F14
11851  3F15
11852  3F16
11853  3F17
11854  3F18
11855  3F19
11856  3F1A
11857  3F1B
11858  3F1C
11859  3F1D
11860  3F1E
11861  3F1F
11862  3F20
11863  3F21
11864  3F22
11865  3F23
11866  3F24
11867  3F25
11868  3F26
11869  3F27
11870  3F28
11871  3F29
11872  3F2A
11873  3F2B
11874  3F2C
11875  3F2D
11876  3F2E
11877  3F2F
11878  3F30
11879  3F31
11880  3F32
11881  3F33
11882  3F34
11883  3F35
11884  3F36
11885  3F37
11886  3F38
11887  3F39
11888  3F3A
11889  3F3B
11890  3F3C
11891  3F3D
11892  3F3E
11893  3F3F
11894  3F40
11895  3F41
11896  3F42
11897  3F43
11898  3F44
11899  3F45
11900  3F46
11901  3F47
11902  3F48
11903  3F49
11904  3F4A
11905  3F4B
11906  3F4C
11907  3F4D
11908  3F4E
11909  3F4F
11910  3F50
11911  3F51
11912  3F52
11913  3F53
11914  3F54
11915  3F55
11916  3F56
11917  3F57
11918  3F58
11919  3F59
11920  3F5A
11921  3F5B
11922  3F5C
11923  3F5D
11924  3F5E
11925  3F5F
11926  3F60
11927  3F61
11928  3F62
11929  3F63
11930  3F64
11931  3F65
11932  3F66
11933  3F67
11934  3F68
11935  3F69
11936  3F6A
11937  3F6B
11938  3F6C
11939  3F6D
11940  3F6E
11941  3F6F
11942  3F70
11943  3F71
11944  3F72
11945  3F73
11946  3F74
11947  3F75
11948  3F76
11949  3F77
11950  3F78
11951  3F79
11952  3F7A
11953  3F7B
11954  3F7C
11955  3F7D
11956  3F7E
11957  3F7F
11958  3F80
11959  3F81
11960  3F82
11961  3F83
11962  3F84
11963  3F85
11964  3F86
11965  3F87
11966  3F88
11967  3F89
11968  3F8A
11969  3F8B
11970  3F8C
11971  3F8D
11972  3F8E
11973  3F8F
11974  3F90
11975  3F91
11976  3F92
11977  3F93
11978  3F94
11979  3F95
11980  3F96
11981  3F97
11982  3F98
11983  3F99
11984  3F9A
11985  3F9B
11986  3F9C
11987  3F9D
11988  3F9E
11989  3F9F
11990  3FA0
11991  3FA1
11992  3FA2
11993  3FA3
11994  3FA4
11995  3FA5
11996  3FA6
11997  3FA7
11998  3FA8
11999  3FA9
12000  3FAA
12001  3FAB
12002  3FAC
12003  3FAD
12004  3FAE
12005  3FAF
12006  3FB0
12007  3FB1
12008  3FB2
12009  3FB3
12010  3FB4
12011  3FB5
12012  3FB6
12013  3FB7
12014  3FB8
12015  3FB9
12016  3FBA
12017  3FBB
12018  3FBC
12019  3FBD
12020  3FBE
12021  3FBF
12022  3FC0
12023  3FC1
12024  3FC2
12025  3FC3
12026  3FC4
12027  3FC5
12028  3FC6
12029  3FC7
12030  3FC8
12031  3FC9
12032  3FCA
12033  3FCB
12034  3FCC
12035  3FCD
12036  3FCE
12037  3FCF
12038  3FD0
12039  3FD1
12040  3FD2
12041  3FD3
12042  3FD4
12043  3FD5
12044  3FD6
12045  3FD7
12046  3FD8
12047  3FD9
12048  3FDA
12049  3FDB
12050  3FDC
12051  3FDD
12052  3FDE
12053  3FDF
12054  3FE0
12055  3FE1
12056  3FE2
12057  3FE3
12058  3FE4
12059  3FE5
12060  3FE6
12061  3FE7
12062  3FE8
12063  3FE9
12064  3FEA
12065  3FEB
12066  3FEC
12067  3FED
12068  3FEE
12069  3FEF
12070  3FF0
12071  3FF1
12072  3FF2
12073  3FF3
12074  3FF4
12075  3FF5
12076  3FF6
12077  3FF7
12078  3FF8
12079  3FF9
12080  3FFA
12081  3FFB
12082  3FFC
12083  3FFD
12084  3FFE
12085  3FFF
12086  4000
12087  4001
12088  4002
12089  4003
12090  4004
12091  4005
12092  4006
12093  4007
12094  4008
12095  4009
12096  400A
12097  400B
12098  400C
12099  400D
12100  400E
12101  400F
12102  4010
12103  4011
12104  4012
12105  4013
12106  4014
12107  4015
12108  4016
12109  4017
12110  4018
12111  4019
12112  401A
12113  401B
12114  401C
12115  401D
12116  401E
12117  401F
12118  4020
12119  4021
12120  4022
12121  4023
12122  4024
12123  4025
12124  4026
12125  4027
12126  4028
12127  4029
12128  402A
12129  402B
12130  402C
12131  402D
12132  402E
12133  402F
12134  4030
12135  4031
12136  4032
12137  4033
12138  4034
12139  4035
12140  4036
12141  4037
12142  4038
12143  4039
12144  403A
12145  403B
12146  403C
12147  403D
12148  403E
12149  403F
12150  4040
12151  4041
12152  4042
12153  4043
12154  4044
12155  4045
12156  4046
12157  4047
12158  4048
12159  4049
12160  404A
12161  404B
12162  404C
12163  404D
12164  404E
12165  404F
12166  4050
12167  4051
12168  4052
12169  4053
12170  4054
12171  4055
12172  4056
12173  4057
12174  4058
12175  4059
12176  405A
12177  405B
12178  405C
12179  405D
12180  405E
12181  405F
12182  4060
12183  4061
12184  4062
12185  4063
12186  4064
12187  4065
12188  4066
12189  4067
12190  4068
12191  4069
12192  406A
12193  406B
12194  406C
12195  406D
12196  406E
12197  406F
12198  4070
12199  4071
12200  4072
12201  4073
12202  4074
12203  4075
12204  4076
12205  4077
12206  4078
12207  4079
12208  407A
12209  407B
12210  407C
12211  407D
12212  407E
12213  407F
12214  4080
12215  4081
12216  4082
12217  4083
12218  4084
12219  4085
12220  4086
12221  4087
12222  4088
12223  4089
12224  408A
12225  408B
12226  408C
12227  408D
12228  408E
12229  408F
12230  4090
12231  4091
12232  4092
12233  4093
12234  4094
12235  4095
12236  4096
12237  4097
12238  4098
12239  4099
12240  409A
12241  409B
12242  409C
12243  409D
12244  409E
12245  409F
12246  40A0
12247  40A1
12248  40A2
12249  40A3
12250  40A4
12251  40A5
12252  40A6
12253  40A7
12254  40A8
12255  40A9
12256  40AA
12257  40AB
12258  40AC
12259  40AD
12260  40AE
12261  40AF
12262  40B0
12263  40B1
12264  40B2
12265  40B3
12266  40B4
12267  40B5
12268  40B6
12269  40B7
12270  40B8
12271  40B9
12272  40BA
12273  40BB
12274  40BC
12275  40BD
12276  40BE
12277  40BF
12278  40C0
12279  40C1
12280  40C2
12281  40C3
12282  40C4
12283  40C5
12284  40C6
12285  40C7
12286  40C8
12287  40C9
12288  40CA
12289  40CB
12290  40CC
12291  40CD
12292  40CE
12293  40CF
12294  40D0
12295  40D1
12296  40D2
12297  40D3
12298  40D4
12299  40D5
12300  40D6
12301  40D7
12302  40D8
12303  40D9
12304  40DA
12305  40DB
12306  40DC
12307  40DD
12308  40DE
12309  40DF
12310  40E0
12311  40E1
12312  40E2
12313  40E3
12314  40E4
12315  40E5
12316  40E6
12317  40E7
12318  40E8
12319  40E9
12320  40EA
12321  40EB
12322  40EC
12323  40ED
12324  40EE
12325  40EF
12326  40F0
12327  40F1
12328  40F2
12329  40F3
12330  40F4
12331  40F5
12332  40F6
12333  40F7
12334  40F8
12335  40F9
12336  40FA
12337  40FB
12338  40FC
12339  40FD
12340  40FE
12341  40FF
12342  4100
12343  4101
12344  4102
12345  4103
12346  4104
12347  4105
12348  4106
12349  4107
12350  4108
12351  4109
12352  410A
12353  410B
12354  410C
12355  410D
12356  410E
12357  410F
12358  4110
12359  4111
12360  4112
12361  4113
12362  4114
12363  4115
12364  4116
12365  4117
12366  4118
12367  4119
12368  411A
12369  411B
12370  411C
12371  411D
12372  411E
12373  411F
12374  4120
12375  4121
12376  4122
12377  4123
12378  4124
12379  4125
12380  4126
12381  4127
12382  4128
12383  4129
12384  412A
12385  412B
12386  412C
12387  412D
12388  412E
12389  412F
12390  4130
12391  4131
12392  4132
12393  4133
12394  4134
12395  4135
12396  4136
12397  4137
12398  4138
12399  4139
12400  413A
12401  413B
12402  413C
12403  413D
12404  413E
12405  413F
12406  4140
12407  4141
12408  4142
12409  4143
12410  4144
12411  4145
12412  4146
12413  4147
12414  4148
12415  4149
12416  414A
12417  414B
12418  414C
12419  414D
12420  414E
12421  414F
12422  4150
12423  4151
12424  4152
12425  4153
12426  4154
12427  4155
12428  4156
12429  4157
12430  4158
12431  4159
12432  415A
12433  415B
12434  415C
12435  415D
12436  415E
12437  415F
12438  4160
12439  4161
12440  4162
12441  4163
12442  4164
12443  4165
12444  4166
12445  4167
12446  4168
12447  4169
12448  416A
12449  416B
12450  416C
12451  416D
12452  416E
12453  416F
12454  4170
12455  4171
12456  4172
12457  4173
12458  4174
12459  4175
12460  4176
12461  4177
12462  4178
12463  4179
12464  417A
12465  417B
12466  417C
12467  417D
12468  417E
12469  417F
12470  4180
12471  4181
12472  4182
12473  4183
12474  4184
12475  4185
12476  4186
12477  4187
12478  4188
12479  4189
12480  418A
12481  418B
12482  418C
12483  418D
12484  418E
12485  418F
12486  4190
12487  4191
12488  4192
12489  4193
12490  4194
12491  4195
12492  4196
12493  4197
12494  4198
12495  4199
12496  419A
12497  419B
12498  419C
12499  419D
12500  419E
12501  419F
12502  41A0
12503  41A1
12504  41A2
12505  41A3
12506  41A4
12507  41A5
12508  41A6
12509  41A7
12510  41A8
12511  41A9
12512  41AA
12513  41AB
12514  41AC
12515  41AD
12516  41AE
12517  41AF
12518  41B0
12519  41B1
12520  41B2
12521  41B3
12522  41B4
12523  41B5
12524  41B6
12525  41B7
12526  41B8
12527  41B9
12528  41BA
12529  41BB
12530  41BC
12531  41BD
12532  41BE
12533  41BF
12534  41C0
12535  41C1
12536  41C2
12537  41C3
12538  41C4
12539  41C5
12540  41C6
12541  41C7
12542  41C8
12543  41C9
12544  41CA
12545  41CB
12546  41CC
12547  41CD
12548  41CE
12549  41CF
12550  41D0
12551  41D1
12552  41D2
12553  41D3
12554  41D4
12555  41D5
12556  41D6
12557  41D7
12558  41D8
12559  41D9
12560  41DA
12561  41DB
12562  41DC
12563  41DD
12564  41DE
12565  41DF
12566  41E0
12567  41E1
12568  41E2
12569  41E3
12570  41E4
12571  41E5
12572  41E6
12573  41E7
12574  41E8
12575  41E9
12576  41EA
12577  41EB
12578  41EC
12579  41ED
12580  41EE
12581  41EF
12582  41F0
12583  41F1
12584  41F2
12585  41F3
12586  41F4
12587  41F5
12588  41F6
12589  41F7
12590  41F8
12591  41F9
12592  41FA
12593  41FB
12594  41FC
12595  41FD
12596  41FE
12597  41FF
12598  4200
12599  4201
12600  4202
12601  4203
12602  4204
12603  4205
12604  4206
12605  4207
12606  4208
12607  4209
12608  420A
12609  420B
12610  420C
12611  420D
12612  420E
12613  420F
12614  4210
12615  4211
12616  4212
12617  4213
12618  4214
12619  4215
12620  4216
12621  4217
12622  4218
12623  4219
12624  421A
12625  421B
12626  421C
12627  421D
12628  421E
12629  421F
12630  4220
12631  4221
12632  4222
12633  4223
12634  4224
12635  4225
12636  4226
12637  4227
12638  4228
12639  4229
12640  422A
12641  422B
12642  422C
12643  422D
12644  422E
12645  422F
12646  4230
12647  4231
12648  4232
12649  4233
12650  4234
12651  4235
12652  4236
12653  4237
12654  4238
12655  4239
12656  423A
12657  423B
12658  423C
12659  423D
12660  423E
12661  423F
12662  4240
12663  4241
12664  4242
12665  4243
12666  4244
12667  4245
12668  4246
12669  4247
12670  4248
12671  4249
12672  424A
12673  424B
12674  424C
12675  424D
12676  424E
12677  424F
12678  4250
12679  4251
12680  4252
12681  4253
12682  4254
12683  4255
12684  4256
12685  4257
12686  4258
12687  4259
12688  425A
12689  425B
12690  425C
12691  425D
12692  425E
12693  425F
12694  4260
12695  4261
12696  4262
12697  4263
12698  4264
12699  4265
12700  4266
12701  4267
12702  4268
12703  4269
12704  426A
12705  426B
12706  426C
12707  426D
12708  426E
12709  426F
12710  4270
12711  4271
12712  4272
12713  4273
12714  4274
12715  4275
12716  4276
12717  4277
12718  4278
12719  4279
12720  427A
12721  427B
12722  427C
12723  427D
12724  427E
12725  427F
12726  4280
12727  4281
12728  4282
12729  4283
12730  4284
12731  4285
12732  4286
12733  4287
12734  4288
12735  4289
12736  428A
12737  428B
12738  428C
12739  428D
12740  428E
12741  428F
12742  4290
12743  4291
12744  4292
12745  4293
12746  4294
12747  4295
12748  4296
12749  4297
12750  4298
12751  4299
12752  429A
12753  429B
12754  429C
12755  429D
12756  429E
12757  429F
12758  42A0
12759  42A1
12760  42A2
12761  42A3
12762  42A4
12763  42A5
12764  42A6
12765  42A7
12766  42A8
12767  42A9
12768  42AA
12769  42AB
12770  42AC
12771  42AD
12772  42AE
12773  42AF
12774  42B0
12775  42B1
12776  42B2
12777  42B3
12778  42B4
12779  42B5
12780  42B6
12781  42B7
12782  42B8
12783  42B9
12784  42BA
12785  42BB
12786  42BC
12787  42BD
12788  42BE
12789  42BF
12790  42C0
12791  42C1
12792  42C2
12793  42C3
12794  42C4
12795  42C5
12796  42C6
12797  42C7
12798  42C8
12799  42C9
12800  42CA
12801  42CB
12802  42CC
12803  42CD
12804  42CE
12805  42CF
12806  42D0
12807  42D1
12808  42D2
12809  42D3
12810  42D4
12811  42D5
12812  42D6
12813  42D7
12814  42D8
12815  42D9
12816  42DA
12817  42DB
12818  42DC
12819  42DD
12820  42DE
12821  42DF
12822  42E0
12823  42E1
12824  42E2
12825  42E3
12826  42E4
12827  42E5
12828  42E6
12829  42E7
12830  42E8
12831  42E9
12832  42EA
12833  42EB
12834  42EC
12835  42ED
12836  42EE
12837  42EF
12838  42F0
12839  42F1
12840  42F2
12841  42F3
12842  42F4
12843  42F5
12844  42F6
12845  42F7
12846  42F8
12847  42F9
12848  42FA
12849  42FB
12850  42FC
12851  42FD
12852  42FE
12853  42FF
12854  4300
12855  4301
12856  4302
12857  4303
12858  4304
12859  4305
12860  4306
12861  4307
12862  4308
12863  4309
12864  430A
12865  430B
12866  430C
12867  430D
12868  430E
12869  430F
12870  4310
12871  4311
12872  4312
12873  4313
12874  4314
12875  4315
12876  4316
12877  4317
12878  4318
12879  4319
12880  431A
12881  431B
12882  431C
12883  431D
12884  431E
12885  431F
12886  4320
12887  4321
12888  4322
12889  4323
12890  4324
12891  4325
12892  4326
12893  4327
12894  4328
12895  4329
12896  432A
12897  432B
12898  432C
12899  432D
12900  432E
12901  432F
12902  4330
12903  4331
12904  4332
12905  4333
12906  4334
12907  4335
12908  4336
12909  4337
12910  4338
12911  4339
12912  433A
12913  433B
12914  433C
12915  433D
12916  433E
12917  433F
12918  4340
12919  4341
12920  4342
12921  4343
12922  4344
12923  4345
12924  4346
12925  4347
12926  4348
12927  4349
12928  434A
12929  434B
12930  434C
12931  434D
12932  434E
12933  434F
12934  4350
12935  4351
12936  4352
12937  4353
12938  4354
12939  4355
12940  4356
12941  4357
12942  4358
12943  4359
12944  435A
12945  435B
12946  435C
12947  435D
12948  435E
12949  435F
12950  4360
12951  4361
12952  4362
12953  4363
12954  4364
12955  4365
12956  4366
12957  4367
12958  4368
12959  4369
12960  436A
12961  436B
12962  436C
12963  436D
12964  436E
12965  436F
12966  4370
12967  4371
12968  4372
12969  4373
12970  4374
12971  4375
12972  4376
12973  4377
12974  4378
12975  4379
12976  437A
12977  437B
12978  437C
12979  437D
12980  437E
12981  437F
12982  4380
12983  4381
12984  4382
12985  4383
12986  4384
12987  4385
12988  4386
12989  4387
12990  4388
12991  4389
12992  438A
12993  438B
12994  438C
12995  438D
12996  438E
12997  438F
12998  4390
12999  4391
13000  4392
13001  4393
13002  4394
13003  4395
13004  4396
13005  4397
13006  4398
13007  4399
13008  439A
13009  439B
13010  439C
13011  439D
13012  439E
13013  439F
13014  43A0
13015  43A1
13016  43A2
13017  43A3
13018  43A4
13019  43A5
13020  43A6
13021  43A7
13022  43A8
13023  43A9
13024  43AA
13025  43AB
13026  43AC
13027  43AD
13028  43AE
13029  43AF
13030  43B0
13031  43B1
13032  43B2
13033  43B3
13034  43B4
13035  43B5
13036  43B6
13037  43B7
13038  43B8
13039  43B9
13040  43BA
13041  43BB
13042  43BC
13043  43BD
13044  43BE
13045  43BF
13046  43C0
13047  43C1
13048  43C2
13049  43C3
13050  43C4
13051  43C5
13052  43C6
13053  43C7
13054  43C8
13055  43C9
13056  43CA
13057  43CB
13058  43CC
13059  43CD
13060  43CE
13061  43CF
13062  43D0
13063  43D1
13064  43D2
13065  43D3
13066  43D4
13067  43D5
13068  43D6
13069  43D7
13070  43D8
13071  43D9
13072  43DA
13073  43DB
13074  43DC
13075  43DD
13076  43DE
13077  43DF
13078  43E0
13079  43E1
13080  43E2
13081  43E3
13082  43E4
13083  43E5
13084  43E6
13085  43E7
13086  43E8
13087  43E9
13088  43EA
13089  43EB
13090  43EC
13091  43ED
13092  43EE
13093  43EF
13094  43F0
13095  43F1
13096  43F2
13097  43F3
13098  43F4
13099  43F5
13100  43F6
13101  43F7
13102  43F8
13103  43F9
13104  43FA
13105  43FB
13106  43FC
13107  43FD
13108  43FE
13109  43FF
13110  4400
13111  4401
13112  4402
13113  4403
13114  4404
13115  4405
13116  4406
13117  4407
13118  4408
13119  4409
13120  440A
13121  440B
13122  440C
13123  440D
13124  440E
13125  440F
13126  4410
13127  4411
13128  4412
13129  4413
13130  4414
13131  4415
13132  4416
13133  4417
13134  4418
13135  4419
13136  441A
13137  441B
13138  441C
13139  441D
13140  441E
13141  441F
13142  4420
13143  4421
13144  4422
13145  4423
13146  4424
13147  4425
13148  4426
13149  4427
13150  4428
13151  4429
13152  442A
13153  442B
13154  442C
13155  442D
13156  442E
13157  442F
13158  4430
13159  4431
13160  4432
13161  4433
13162  4434
13163  4435
13164  4436
13165  4437
13166  4438
13167  4439
13168  443A
13169  443B
13170  443C
13171  443D
13172  443E
13173  443F
13174  4440
13175  4441
13176  4442
13177  4443
13178  4444
13179  4445
13180  4446
13181  4447
13182  4448
13183  4449
13184  444A
13185  444B
13186  444C
13187  444D
13188  444E
13189  444F
13190  4450
13191  4451
13192  4452
13193  4453
13194  4454
13195  4455
13196  4456
13197  4457
13198  4458
13199  4459
13200  445A
13201  445B
13202  445C
13203  445D
13204  445E
13205  445F
13206  4460
13207  4461
13208  4462
13209  4463
13210  4464
13211  4465
13212  4466
13213  4467
13214  4468
13215  4469
13216  446A
13217  446B
13218  446C
13219  446D
13220  446E
13221  446F
13222  4470
13223  4471
13224  4472
13225  4473
13226  4474
13227  4475
13228  4476
13229  4477
13230  4478
13231  4479
13232  447A
13233  447B
13234  447C
13235  447D
13236  447E
13237  447F
13238  4480
13239  4481
13240  4482
13241  4483
13242  4484
13243  4485
13244  4486
13245  4487
13246  4488
13247  4489
13248  448A
13249  448B
13250  448C
13251  448D
13252  448E
13253  448F
13254  4490
13255  4491
13256  4492
13257  4493
13258  4494
13259  4495
13260  4496
13261  4497
13262  4498
13263  4499
13264  449A
13265  449B
13266  449C
13267  449D
13268  449E
13269  449F
13270  44A0
13271  44A1
13272  44A2
13273  44A3
13274  44A4
13275  44A5
13276  44A6
13277  44A7
13278  44A8
13279  44A9
13280  44AA
13281  44AB
13282  44AC
13283  44AD
13284  44AE
13285  44AF
13286  44B0
13287  44B1
13288  44B2
13289  44B3
13290  44B4
13291  44B5
13292  44B6
13293  44B7
13294  44B8
13295  44B9
13296  44BA
13297  44BB
13298  44BC
13299  44BD
13300  44BE
13301  44BF
13302  44C0
13303  44C1
13304  44C2
13305  44C3
13306  44C4
13307  44C5
13308  44C6
13309  44C7
13310  44C8
13311  44C9
13312  44CA
13313  44CB
13314  44CC
13315  44CD
13316  44CE
13317  44CF
13318  44D0
13319  44D1
13320  44D2
13321  44D3
13322  44D4
13323  44D5
13324  44D6
13325  44D7
13326  44D8
13327  44D9
13328  44DA
13329  44DB
13330  44DC
13331  44DD
13332  44DE
13333  44DF
13334  44E0
13335  44E1
13336  44E2
13337  44E3
13338  44E4
13339  44E5
13340  44E6
13341  44E7
13342  44E8
13343  44E9
13344  44EA
13345  44EB
13346  44EC
13347  44ED
13348  44EE
13349  44EF
13350  44F0
13351  44F1
13352  44F2
13353  44F3
13354  44F4
13355  44F5
13356  44F6
13357  44F7
13358  44F8
13359  44F9
13360  44FA
13361  44FB
13362  44FC
13363  44FD
13364  44FE
13365  44FF
13366  4500
13367  4501
13368  4502
13369  4503
13370  4504
13371  4505
13372  4506
13373  4507
13374  4508
13375  4509
13376  450A
13377  450B
13378  450C
13379  450D
13380  450E
13381  450F
13382  4510
13383  4511
13384  4512
13385  4513
13386  4514
13387  4515
13388  4516
13389  4517
13390  4518
13391  4519
13392  451A
13393  451B
13394  451C
13395  451D
13396  451E
13397  451F
13398  4520
13399  4521
13400  4522
13401  4523
13402  4524
13403  4525
13404  4526
13405  4527
13406  4528
13407  4529
13408  452A
13409  452B
13410  452C
13411  452D
13412  452E
13413  452F
13414  4530
13415  4531
13416  4532
13417  4533
13418  4534
13419  4535
13420  4536
13421  4537
13422  4538
13423  4539
13424  453A
13425  453B
13426  453C
13427  453D
13428  453E
13429  453F
13430  4540
13431  4541
13432  4542
13433  4543
13434  4544
13435  4545
13436  4546
13437  4547
13438  4548
13439  4549
13440  454A
13441  454B
13442  454C
13443  454D
13444  454E
13445  454F
13446  4550
13447  4551
13448  4552
13449  4553
13450  4554
13451  4555
13452  4556
13453  4557
13454  4558
13455  4559
13456  455A
13457  455B
13458  455C
13459  455D
13460  455E
13461  455F
13462  4560
13463  4561
13464  4562
13465  4563
13466  4564
13467  4565
13468  4566
13469  4567
13470  4568
13471  4569
13472  456A
13473  456B
13474  456C
13475  456D
13476  456E
13477  456F
13478  4570
13479  4571
13480  4572
13481  4573
13482  4574
13483  4575
13484  4576
13485  4577
13486  4578
13487  4579
13488  457A
13489  457B
13490  457C
13491  457D
13492  457E
13493  457F
13494  4580
13495  4581
13496  4582
13497  4583
13498  4584
13499  4585
13500  4586
13501  4587
13502  4588
13503  4589
13504  458A
13505  458B
13506  458C
13507  458D
13508  458E
13509  458F
13510  4590
13511  4591
13512  4592
13513  4593
13514  4594
13515  4595
13516  4596
13517  4597
13518  4598
13519  4599
13520  459A
13521  459B
13522  459C
13523  459D
13524  459E
13525  459F
13526  45A0
13527  45A1
13528  45A2
13529  45A3
13530  45A4
13531  45A5
13532  45A6
13533  45A7
13534  45A8
13535  45A9
13536  45AA
13537  45AB
13538  45AC
13539  45AD
13540  45AE
13541  45AF
13542  45B0
13543  45B1
13544  45B2
13545  45B3
13546  45B4
13547  45B5
13548  45B6
13549  45B7
13550  45B8
13551  45B9
13552  45BA
13553  45BB
13554  45BC
13555  45BD
13556  45BE
13557  45BF
13558  45C0
13559  45C1
13560  45C2
13561  45C3
13562  45C4
13563  45C5
13564  45C6
13565  45C7
13566  45C8
13567  45C9
13568  45CA
13569  45CB
13570  45CC
13571  45CD
13572  45CE
13573  45CF
13574  45D0
13575  45D1
13576  45D2
13577  45D3
13578  45D4
13579  45D5
13580  45D6
13581  45D7
13582  45D8
13583  45D9
13584  45DA
13585  45DB
13586  45DC
13587  45DD
13588  45DE
13589  45DF
13590  45E0
13591  45E1
13592  45E2
13593  45E3
13594  45E4
13595  45E5
13596  45E6
13597  45E7
13598  45E8
13599  45E9
13600  45EA
13601  45EB
13602  45EC
13603  45ED
13604  45EE
13605  45EF
13606  45F0
13607  45F1
13608  45F2
13609  45F3
13610  45F4
13611  45F5
13612  45F6
13613  45F7
13614  45F8
13615  45F9
13616  45FA
13617  45FB
13618  45FC
13619  45FD
13620  45FE
13621  45FF
13622  4600
13623  4601
13624  4602
13625  4603
13626  4604
13627  4605
13628  4606
13629  4607
13630  4608
13631  4609
13632  460A
13633  460B
13634  460C
13635  460D
13636  460E
13637  460F
13638  4610
13639  4611
13640  4612
13641  4613
13642  4614
13643  4615
13644  4616
13645  4617
13646  4618
13647  4619
13648  461A
13649  461B
13650  461C
13651  461D
13652  461E
13653  461F
13654  4620
13655  4621
13656  4622
13657  4623
13658  4624
13659  4625
13660  4626
13661  4627
13662  4628
13663  4629
13664  462A
13665  462B
13666  462C
13667  462D
13668  462E
13669  462F
13670  4630
13671  4631
13672  4632
13673  4633
13674  4634
13675  4635
13676  4636
13677  4637
13678  4638
13679  4639
13680  463A
13681  463B
13682  463C
13683  463D
13684  463E
13685  463F
13686  4640
13687  4641
13688  4642
13689  4643
13690  4644
13691  4645
13692  4646
13693  4647
13694  4648
13695  4649
13696  464A
13697  464B
13698  464C
13699  464D
13700  464E
13701  464F
13702  4650
13703  4651
13704  4652
13705  4653
13706  4654
13707  4655
13708  4656
13709  4657
13710  4658
13711  4659
13712  465A
13713  465B
13714  465C
13715  465D
13716  465E
13717  465F
13718  4660
13719  4661
13720  4662
13721  4663
13722  4664
13723  4665
13724  4666
13725  4667
13726  4668
13727  4669
13728  466A
13729  466B
13730  466C
13731  466D
13732  466E
13733  466F
13734  4670
13735  4671
13736  4672
13737  4673
13738  4674
13739  4675
13740  4676
13741  4677
13742  4678
13743  4679
13744  467A
13745  467B
13746  467C
13747  467D
13748  467E
13749  467F
13750  4680
13751  4681
13752  4682
13753  4683
13754  4684
13755  4685
13756  4686
13757  4687
13758  4688
13759  4689
13760  468A
13761  468B
13762  468C
13763  468D
13764  468E
13765  468F
13766  4690
13767  4691
13768  4692
13769  4693
13770  4694
13771  4695
13772  4696
13773  4697
13774  4698
13775  4699
13776  469A
13777  469B
13778  469C
13779  469D
13780  469E
13781  469F
13782  46A0
13783  46A1
13784  46A2
13785  46A3
13786  46A4
13787  46A5
13788  46A6
13789  46A7
13790  46A8
13791  46A9
13792  46AA
13793  46AB
13794  46AC
13795  46AD
13796  46AE
13797  46AF
13798  46B0
13799  46B1
13800  46B2
13801  46B3
13802  46B4
13803  46B5
13804  46B6
13805  46B7
13806  46B8
13807  46B9
13808  46BA
13809  46BB
13810  46BC
13811  46BD
13812  46BE
13813  46BF
13814  46C0
13815  46C1
13816  46C2
13817  46C3
13818  46C4
13819  46C5
13820  46C6
13821  46C7
13822  46C8
13823  46C9
13824  46CA
13825  46CB
13826  46CC
13827  46CD
13828  46CE
13829  46CF
13830  46D0
13831  46D1
13832  46D2
13833  46D3
13834  46D4
13835  46D5
13836  46D6
13837  46D7
13838  46D8
13839  46D9
13840  46DA
13841  46DB
13842  46DC
13843  46DD
13844  46DE
13845  46DF
13846  46E0
13847  46E1
13848  46E2
13849  46E3
13850  46E4
13851  46E5
13852  46E6
13853  46E7
13854  46E8
13855  46E9
13856  46EA
13857  46EB
13858  46EC
13859  46ED
13860  46EE
13861  46EF
13862  46F0
13863  46F1
13864  46F2
13865  46F3
13866  46F4
13867  46F5
13868  46F6
13869  46F7
13870  46F8
13871  46F9
13872  46FA
13873  46FB
13874  46FC
13875  46FD
13876  46FE
13877  46FF
13878  4700
13879  4701
13880  4702
13881  4703
13882  4704
13883  4705
13884  4706
13885  4707
13886  4708
13887  4709
13888  470A
13889  470B
13890  470C
13891  470D
13892  470E
13893  470F
13894  4710
13895  4711
13896  4712
13897  4713
13898  4714
13899  4715
13900  4716
13901  4717
13902  4718
13903  4719
13904  471A
13905  471B
13906  471C
13907  471D
13908  471E
13909  471F
13910  4720
13911  4721
13912  4722
13913  4723
13914  4724
13915  4725
13916  4726
13917  4727
13918  4728
13919  4729
13920  472A
13921  472B
13922  472C
13923  472D
13924  472E
13925  472F
13926  4730
13927  4731
13928  4732
13929  4733
13930  4734
13931  4735
13932  4736
13933  4737
13934  4738
13935  4739
13936  473A
13937  473B
13938  473C
13939  473D
13940  473E
13941  473F
13942  4740
13943  4741
13944  4742
13945  4743
13946  4744
13947  4745
13948  4746
13949  4747
13950  4748
13951  4749
13952  474A
13953  474B
13954  474C
13955  474D
13956  474E
13957  474F
13958  4750
13959  4751
13960  4752
13961  4753
13962  4754
13963  4755
13964  4756
13965  4757
13966  4758
13967  4759
13968  475A
13969  475B
13970  475C
13971  475D
13972  475E
13973  475F
13974  4760
13975  4761
13976  4762
13977  4763
13978  4764
13979  4765
13980  4766
13981  4767
13982  4768
13983  4769
13984  476A
13985  476B
13986  476C
13987  476D
13988  476E
13989  476F
13990  4770
13991  4771
13992  4772
13993  4773
13994  4774
13995  4775
13996  4776
13997  4777
13998  4778
13999  4779
14000  477A
14001  477B
14002  477C
14003  477D
14004  477E
14005  477F
14006  4780
14007  4781
14008  4782
14009  4783
14010  4784
14011  4785
14012  4786
14013  4787
14014  4788
14015  4789
14016  478A
14017  478B
14018  478C
14019  478D
14020  478E
14021  478F
14022  4790
14023  4791
14024  4792
14025  4793
14026  4794
14027  4795
14028  4796
14029  4797
14030  4798
14031  4799
14032  479A
14033  479B
14034  479C
14035  479D
14036  479E
14037  479F
14038  47A0
14039  47A1
14040  47A2
14041  47A3
14042  47A4
14043  47A5
14044  47A6
14045  47A7
14046  47A8
14047  47A9
14048  47AA
14049  47AB
14050  47AC
14051  47AD
14052  47AE
14053  47AF
14054  47B0
14055  47B1
14056  47B2
14057  47B3
14058  47B4
14059  47B5
14060  47B6
14061  47B7
14062  47B8
14063  47B9
14064  47BA
14065  47BB
14066  47BC
14067  47BD
14068  47BE
14069  47BF
14070  47C0
14071  47C1
14072  47C2
14073  47C3
14074  47C4
14075  47C5
14076  47C6
14077  47C7
14078  47C8
14079  47C9
14080  47CA
14081  47CB
14082  47CC
14083  47CD
14084  47CE
14085  47CF
14086  47D0
14087  47D1
14088  47D2
14089  47D3
14090  47D4
14091  47D5
14092  47D6
14093  47D7
14094  47D8
14095  47D9
14096  47DA
14097  47DB
14098  47DC
14099  47DD
14100  47DE
14101  47DF
14102  47E0
14103  47E1
14104  47E2
14105  47E3
14106  47E4
14107  47E5
14108  47E6
14109  47E7
14110  47E8
14111  47E9
14112  47EA
14113  47EB
14114  47EC
14115  47ED
14116  47EE
14117  47EF
14118  47F0
14119  47F1
14120  47F2
14121  47F3
14122  47F4
14123  47F5
14124  47F6
14125  47F7
14126  47F8
14127  47F9
14128  47FA
14129  47FB
14130  47FC
14131  47FD
14132  47FE
14133  47FF
14134  4800
14135  4801
14136  4802
14137  4803
14138  4804
14139  4805
14140  4806
14141  4807
14142  4808
14143  4809
14144  480A
14145  480B
14146  480C
14147  480D
14148  480E
14149  480F
14150  4810
14151  4811
14152  4812
14153  4813
14154  4814
14155  4815
14156  4816
14157  4817
14158  4818
14159  4819
14160  481A
14161  481B
14162  481C
14163  481D
14164  481E
14165  481F
14166  4820
14167  4821
14168  4822
14169  4823
14170  4824
14171  4825
14172  4826
14173  4827
14174  4828
14175  4829
14176  482A
14177  482B
14178  482C
14179  482D
14180  482E
14181  482F
14182  4830
14183  4831
14184  4832
14185  4833
14186  4834
14187  4835
14188  4836
14189  4837
14190  4838
14191  4839
14192  483A
14193  483B
14194  483C
14195  483D
14196  483E
14197  483F
14198  4840
14199  4841
14200  4842
14201  4843
14202  4844
14203  4845
14204  4846
14205  4847
14206  4848
14207  4849
14208  484A
14209  484B
14210  484C
14211  484D
14212  484E
14213  484F
14214  4850
14215  4851
14216  4852
14217  4853
14218  4854
14219  4855
14220  4856
14221  4857
14222  4858
14223  4859
14224  485A
14225  485B
14226  485C
14227  485D
14228  485E
14229  485F
14230  4860
14231  4861
14232  4862
14233  4863
14234  4864
14235  4865
14236  4866
14237  4867
14238  4868
14239  4869
14240  486A
14241  486B
14242  486C
14243  486D
14244  486E
14245  486F
14246  4870
14247  4871
14248  4872
14249  4873
14250  4874
14251  4875
14252  4876
14253  4877
14254  4878
14255  4879
14256  487A
14257  487B
14258  487C
14259  487D
14260  487E
14261  487F
14262  4880
14263  4881
14264  4882
14265  4883
14266  4884
14267  4885
14268  4886
14269  4887
14270  4888
14271  4889
14272  488A
14273  488B
14274  488C
14275  488D
14276  488E
14277  488F
14278  4890
14279  4891
14280  4892
14281  4893
14282  4894
14283  4895
14284  4896
14285  4897
14286  4898
14287  4899
14288  489A
14289  489B
14290  489C
14291  489D
14292  489E
14293  489F
14294  48A0
14295  48A1
14296  48A2
14297  48A3
14298  48A4
14299  48A5
14300  48A6
14301  48A7
14302  48A8
14303  48A9
14304  48AA
14305  48AB
14306  48AC
14307  48AD
14308  48AE
14309  48AF
14310  48B0
14311  48B1
14312  48B2
14313  48B3
14314  48B4
14315  48B5
14316  48B6
14317  48B7
14318  48B8
14319  48B9
14320  48BA
14321  48BB
14322  48BC
14323  48BD
14324  48BE
14325  48BF
14326  48C0
14327  48C1
14328  48C2
14329  48C3
14330  48C4
14331  48C5
14332  48C6
14333  48C7
14334  48C8
14335  48C9
14336  48CA
14337  48CB
14338  48CC
14339  48CD
14340  48CE
14341  48CF
14342  48D0
14343  48D1
14344  48D2
14345  48D3
14346  48D4
14347  48D5
14348  48D6
14349  48D7
14350  48D8
14351  48D9
14352  48DA
14353  48DB
14354  48DC
14355  48DD
14356  48DE
14357  48DF
14358  48E0
14359  48E1
14360  48E2
14361  48E3
14362  48E4
14363  48E5
14364  48E6
14365  48E7
14366  48E8
14367  48E9
14368  48EA
14369  48EB
14370  48EC
14371  48ED
14372  48EE
14373  48EF
14374  48F0
14375  48F1
14376  48F2
14377  48F3
14378  48F4
14379  48F5
14380  48F6
14381  48F7
14382  48F8
14383  48F9
14384  48FA
14385  48FB
14386  48FC
14387  48FD
14388  48FE
14389  48FF
14390  4900
14391  4901
14392  4902
14393  4903
14394  4904
14395  4905
14396  4906
14397  4907
14398  4908
14399  4909
14400  490A
14401  490B
14402  490C
14403  490D
14404  490E
14405  490F
14406  4910
14407  4911
14408  4912
14409  4913
14410  4914
14411  4915
14412  4916
14413  4917
14414  4918
14415  4919
14416  491A
14417  491B
14418  491C
14419  491D
14420  491E
14421  491F
14422  4920
14423  4921
14424  4922
14425  4923
14426  4924
14427  4925
14428  4926
14429  4927
14430  4928
14431  4929
14432  492A
14433  492B
14434  492C
14435  492D
14436  492E
14437  492F
14438  4930
14439  4931
14440  4932
14441  4933
14442  4934
14443  4935
14444  4936
14445  4937
14446  4938
14447  4939
14448  493A
14449  493B
14450  493C
14451  493D
14452  493E
14453  493F
14454  4940
14455  4941
14456  4942
14457  4943
14458  4944
14459  4945
14460  4946
14461  4947
14462  4948
14463  4949
14464  494A
14465  494B
14466  494C
14467  494D
14468  494E
14469  494F
14470  4950
14471  4951
14472  4952
14473  4953
14474  4954
14475  4955
14476  4956
14477  4957
14478  4958
14479  4959
14480  495A
14481  495B
14482  495C
14483  495D
14484  495E
14485  495F
14486  4960
14487  4961
14488  4962
14489  4963
14490  4964
14491  4965
14492  4966
14493  4967
14494  4968
14495  4969
14496  496A
14497  496B
14498  496C
14499  496D
14500  496E
14501  496F
14502  4970
14503  4971
14504  4972
14505  4973
14506  4974
14507  4975
14508  4976
14509  4977
14510  4978
14511  4979
14512  497A
14513  497B
14514  497C
14515  497D
14516  497E
14517  497F
14518  4980
14519  4981
14520  4982
14521  4983
14522  4984
14523  4985
14524  4986
14525  4987
14526  4988
14527  4989
14528  498A
14529  498B
14530  498C
14531  498D
14532  498E
14533  498F
14534  4990
14535  4991
14536  4992
14537  4993
14538  4994
14539  4995
14540  4996
14541  4997
14542  4998
14543  4999
14544  499A
14545  499B
14546  499C
14547  499D
14548  499E
14549  499F
14550  49A0
14551  49A1
14552  49A2
14553  49A3
14554  49A4
14555  49A5
14556  49A6
14557  49A7
14558  49A8
14559  49A9
14560  49AA
14561  49AB
14562  49AC
14563  49AD
14564  49AE
14565  49AF
14566  49B0
14567  49B1
14568  49B2
14569  49B3
14570  49B4
14571  49B5
14572  49B6
14573  49B7
14574  49B8
14575  49B9
14576  49BA
14577  49BB
14578  49BC
14579  49BD
14580  49BE
14581  49BF
14582  49C0
14583  49C1
14584  49C2
14585  49C3
14586  49C4
14587  49C5
14588  49C6
14589  49C7
14590  49C8
14591  49C9
14592  49CA
14593  49CB
14594  49CC
14595  49CD
14596  49CE
14597  49CF
14598  49D0
14599  49D1
14600  49D2
14601  49D3
14602  49D4
14603  49D5
14604  49D6
14605  49D7
14606  49D8
14607  49D9
14608  49DA
14609  49DB
14610  49DC
14611  49DD
14612  49DE
14613  49DF
14614  49E0
14615  49E1
14616  49E2
14617  49E3
14618  49E4
14619  49E5
14620  49E6
14621  49E7
14622  49E8
14623  49E9
14624  49EA
14625  49EB
14626  49EC
14627  49ED
14628  49EE
14629  49EF
14630  49F0
14631  49F1
14632  49F2
14633  49F3
14634  49F4
14635  49F5
14636  49F6
14637  49F7
14638  49F8
14639  49F9
14640  49FA
14641  49FB
14642  49FC
14643  49FD
14644  49FE
14645  49FF
14646  4A00
14647  4A01
14648  4A02
14649  4A03
14650  4A04
14651  4A05
14652  4A06
14653  4A07
14654  4A08
14655  4A09
14656  4A0A
14657  4A0B
14658  4A0C
14659  4A0D
14660  4A0E
14661  4A0F
14662  4A10
14663  4A11
14664  4A12
14665  4A13
14666  4A14
14667  4A15
14668  4A16
14669  4A17
14670  4A18
14671  4A19
14672  4A1A
14673  4A1B
14674  4A1C
14675  4A1D
14676  4A1E
14677  4A1F
14678  4A20
14679  4A21
14680  4A22
14681  4A23
14682  4A24
14683  4A25
14684  4A26
14685  4A27
14686  4A28
14687  4A29
14688  4A2A
14689  4A2B
14690  4A2C
14691  4A2D
14692  4A2E
14693  4A2F
14694  4A30
14695  4A31
14696  4A32
14697  4A33
14698  4A34
14699  4A35
14700  4A36
14701  4A37
14702  4A38
14703  4A39
14704  4A3A
14705  4A3B
14706  4A3C
14707  4A3D
14708  4A3E
14709  4A3F
14710  4A40
14711  4A41
14712  4A42
14713  4A43
14714  4A44
14715  4A45
14716  4A46
14717  4A47
14718  4A48
14719  4A49
14720  4A4A
14721  4A4B
14722  4A4C
14723  4A4D
14724  4A4E
14725  4A4F
14726  4A50
14727  4A51
14728  4A52
14729  4A53
14730  4A54
14731  4A55
14732  4A56
14733  4A57
14734  4A58
14735  4A59
14736  4A5A
14737  4A5B
14738  4A5C
14739  4A5D
14740  4A5E
14741  4A5F
14742  4A60
14743  4A61
14744  4A62
14745  4A63
14746  4A64
14747  4A65
14748  4A66
14749  4A67
14750  4A68
14751  4A69
14752  4A6A
14753  4A6B
14754  4A6C
14755  4A6D
14756  4A6E
14757  4A6F
14758  4A70
14759  4A71
14760  4A72
14761  4A73
14762  4A74
14763  4A75
14764  4A76
14765  4A77
14766  4A78
14767  4A79
14768  4A7A
14769  4A7B
14770  4A7C
14771  4A7D
14772  4A7E
14773  4A7F
14774  4A80
14775  4A81
14776  4A82
14777  4A83
14778  4A84
14779  4A85
14780  4A86
14781  4A87
14782  4A88
14783  4A89
14784  4A8A
14785  4A8B
14786  4A8C
14787  4A8D
14788  4A8E
14789  4A8F
14790  4A90
14791  4A91
14792  4A92
14793  4A93
14794  4A94
14795  4A95
14796  4A96
14797  4A97
14798  4A98
14799  4A99
14800  4A9A
14801  4A9B
14802  4A9C
14803  4A9D
14804  4A9E
14805  4A9F
14806  4AA0
14807  4AA1
14808  4AA2
14809  4AA3
14810  4AA4
14811  4AA5
14812  4AA6
14813  4AA7
14814  4AA8
14815  4AA9
14816  4AAA
14817  4AAB
14818  4AAC
14819  4AAD
14820  4AAE
14821  4AAF
14822  4AB0
14823  4AB1
14824  4AB2
14825  4AB3
14826  4AB4
14827  4AB5
14828  4AB6
14829  4AB7
14830  4AB8
14831  4AB9
14832  4ABA
14833  4ABB
14834  4ABC
14835  4ABD
14836  4ABE
14837  4ABF
14838  4AC0
14839  4AC1
14840  4AC2
14841  4AC3
14842  4AC4
14843  4AC5
14844  4AC6
14845  4AC7
14846  4AC8
14847  4AC9
14848  4ACA
14849  4ACB
14850  4ACC
14851  4ACD
14852  4ACE
14853  4ACF
14854  4AD0
14855  4AD1
14856  4AD2
14857  4AD3
14858  4AD4
14859  4AD5
14860  4AD6
14861  4AD7
14862  4AD8
14863  4AD9
14864  4ADA
14865  4ADB
14866  4ADC
14867  4ADD
14868  4ADE
14869  4ADF
14870  4AE0
14871  4AE1
14872  4AE2
14873  4AE3
14874  4AE4
14875  4AE5
14876  4AE6
14877  4AE7
14878  4AE8
14879  4AE9
14880  4AEA
14881  4AEB
14882  4AEC
14883  4AED
14884  4AEE
14885  4AEF
14886  4AF0
14887  4AF1
14888  4AF2
14889  4AF3
14890  4AF4
14891  4AF5
14892  4AF6
14893  4AF7
14894  4AF8
14895  4AF9
14896  4AFA
14897  4AFB
14898  4AFC
14899  4AFD
14900  4AFE
14901  4AFF
14902  4B00
14903  4B01
14904  4B02
14905  4B03
14906  4B04
14907  4B05
14908  4B06
14909  4B07
14910  4B08
14911  4B09
14912  4B0A
14913  4B0B
14914  4B0C
14915  4B0D
14916  4B0E
14917  4B0F
14918  4B10
14919  4B11
14920  4B12
14921  4B13
14922  4B14
14923  4B15
14924  4B16
14925  4B17
14926  4B18
14927  4B19
14928  4B1A
14929  4B1B
14930  4B1C
14931  4B1D
14932  4B1E
14933  4B1F
14934  4B20
14935  4B21
14936  4B22
14937  4B23
14938  4B24
14939  4B25
14940  4B26
14941  4B27
14942  4B28
14943  4B29
14944  4B2A
14945  4B2B
14946  4B2C
14947  4B2D
14948  4B2E
14949  4B2F
14950  4B30
14951  4B31
14952  4B32
14953  4B33
14954  4B34
14955  4B35
14956  4B36
14957  4B37
14958  4B38
14959  4B39
14960  4B3A
14961  4B3B
14962  4B3C
14963  4B3D
14964  4B3E
14965  4B3F
14966  4B40
14967  4B41
14968  4B42
14969  4B43
14970  4B44
14971  4B45
14972  4B46
14973  4B47
14974  4B48
14975  4B49
14976  4B4A
14977  4B4B
14978  4B4C
14979  4B4D
14980  4B4E
14981  4B4F
14982  4B50
14983  4B51
14984  4B52
14985  4B53
14986  4B54
14987  4B55
14988  4B56
14989  4B57
14990  4B58
14991  4B59
14992  4B5A
14993  4B5B
14994  4B5C
14995  4B5D
14996  4B5E
14997  4B5F
14998  4B60
14999  4B61
15000  4B62
15001  4B63
15002  4B64
15003  4B65
15004  4B66
15005  4B67
15006  4B68
15007  4B69
15008  4B6A
15009  4B6B
15010  4B6C
15011  4B6D
15012  4B6E
15013  4B6F
15014  4B70
15015  4B71
15016  4B72
15017  4B73
15018  4B74
15019  4B75
15020  4B76
15021  4B77
15022  4B78
15023  4B79
15024  4B7A
15025  4B7B
15026  4B7C
15027  4B7D
15028  4B7E
15029  4B7F
15030  4B80
15031  4B81
15032  4B82
15033  4B83
15034  4B84
15035  4B85
15036  4B86
15037  4B87
15038  4B88
15039  4B89
15040  4B8A
15041  4B8B
15042  4B8C
15043  4B8D
15044  4B8E
15045  4B8F
15046  4B90
15047  4B91
15048  4B92
15049  4B93
15050  4B94
15051  4B95
15052  4B96
15053  4B97
15054  4B98
15055  4B99
15056  4B9A
15057  4B9B
15058  4B9C
15059  4B9D
15060  4B9E
15061  4B9F
15062  4BA0
15063  4BA1
15064  4BA2
15065  4BA3
15066  4BA4
15067  4BA5
15068  4BA6
15069  4BA7
15070  4BA8
15071  4BA9
15072  4BAA
15073  4BAB
15074  4BAC
15075  4BAD
15076  4BAE
15077  4BAF
15078  4BB0
15079  4BB1
15080  4BB2
15081  4BB3
15082  4BB4
15083  4BB5
15084  4BB6
15085  4BB7
15086  4BB8
15087  4BB9
15088  4BBA
15089  4BBB
15090  4BBC
15091  4BBD
15092  4BBE
15093  4BBF
15094  4BC0
15095  4BC1
15096  4BC2
15097  4BC3
15098  4BC4
15099  4BC5
15100  4BC6
15101  4BC7
15102  4BC8
15103  4BC9
15104  4BCA
15105  4BCB
15106  4BCC
15107  4BCD
15108  4BCE
15109  4BCF
15110  4BD0
15111  4BD1
15112  4BD2
15113  4BD3
15114  4BD4
15115  4BD5
15116  4BD6
15117  4BD7
15118  4BD8
15119  4BD9
15120  4BDA
15121  4BDB
15122  4BDC
15123  4BDD
15124  4BDE
15125  4BDF
15126  4BE0
15127  4BE1
15128  4BE2
15129  4BE3
15130  4BE4
15131  4BE5
15132  4BE6
15133  4BE7
15134  4BE8
15135  4BE9
15136  4BEA
15137  4BEB
15138  4BEC
15139  4BED
15140  4BEE
15141  4BEF
15142  4BF0
15143  4BF1
15144  4BF2
15145  4BF3
15146  4BF4
15147  4BF5
15148  4BF6
15149  4BF7
15150  4BF8
15151  4BF9
15152  4BFA
15153  4BFB
15154  4BFC
15155  4BFD
15156  4BFE
15157  4BFF
15158  4C00
15159  4C01
15160  4C02
15161  4C03
15162  4C04
15163  4C05
15164  4C06
15165  4C07
15166  4C08
15167  4C09
15168  4C0A
15169  4C0B
15170  4C0C
15171  4C0D
15172  4C0E
15173  4C0F
15174  4C10
15175  4C11
15176  4C12
15177  4C13
15178  4C14
15179  4C15
15180  4C16
15181  4C17
15182  4C18
15183  4C19
15184  4C1A
15185  4C1B
15186  4C1C
15187  4C1D
15188  4C1E
15189  4C1F
15190  4C20
15191  4C21
15192  4C22
15193  4C23
15194  4C24
15195  4C25
15196  4C26
15197  4C27
15198  4C28
15199  4C29
15200  4C2A
15201  4C2B
15202  4C2C
15203  4C2D
15204  4C2E
15205  4C2F
15206  4C30
15207  4C31
15208  4C32
15209  4C33
15210  4C34
15211  4C35
15212  4C36
15213  4C37
15214  4C38
15215  4C39
15216  4C3A
15217  4C3B
15218  4C3C
15219  4C3D
15220  4C3E
15221  4C3F
15222  4C40
15223  4C41
15224  4C42
15225  4C43
15226  4C44
15227  4C45
15228  4C46
15229  4C47
15230  4C48
15231  4C49
15232  4C4A
15233  4C4B
15234  4C4C
15235  4C4D
15236  4C4E
15237  4C4F
15238  4C50
15239  4C51
15240  4C52
15241  4C53
15242  4C54
15243  4C55
15244  4C56
15245  4C57
15246  4C58
15247  4C59
15248  4C5A
15249  4C5B
15250  4C5C
15251  4C5D
15252  4C5E
15253  4C5F
15254  4C60
15255  4C61
15256  4C62
15257  4C63
15258  4C64
15259  4C65
15260  4C66
15261  4C67
15262  4C68
15263  4C69
15264  4C6A
15265  4C6B
15266  4C6C
15267  4C6D
15268  4C6E
15269  4C6F
15270  4C70
15271  4C71
15272  4C72
15273  4C73
15274  4C74
15275  4C75
15276  4C76
15277  4C77
15278  4C78
15279  4C79
15280  4C7A
15281  4C7B
15282  4C7C
15283  4C7D
15284  4C7E
15285  4C7F
15286  4C80
15287  4C81
15288  4C82
15289  4C83
15290  4C84
15291  4C85
15292  4C86
15293  4C87
15294  4C88
15295  4C89
15296  4C8A
15297  4C8B
15298  4C8C
15299  4C8D
15300  4C8E
15301  4C8F
15302  4C90
15303  4C91
15304  4C92
15305  4C93
15306  4C94
15307  4C95
15308  4C96
15309  4C97
15310  4C98
15311  4C99
15312  4C9A
15313  4C9B
15314  4C9C
15315  4C9D
15316  4C9E
15317  4C9F
15318  4CA0
15319  4CA1
15320  4CA2
15321  4CA3
15322  4CA4
15323  4CA5
15324  4CA6
15325  4CA7
15326  4CA8
15327  4CA9
15328  4CAA
15329  4CAB
15330  4CAC
15331  4CAD
15332  4CAE
15333  4CAF
15334  4CB0
15335  4CB1
15336  4CB2
15337  4CB3
15338  4CB4
15339  4CB5
15340  4CB6
15341  4CB7
15342  4CB8
15343  4CB9
15344  4CBA
15345  4CBB
15346  4CBC
15347  4CBD
15348  4CBE
15349  4CBF
15350  4CC0
15351  4CC1
15352  4CC2
15353  4CC3
15354  4CC4
15355  4CC5
15356  4CC6
15357  4CC7
15358  4CC8
15359  4CC9
15360  4CCA
15361  4CCB
15362  4CCC
15363  4CCD
15364  4CCE
15365  4CCF
15366  4CD0
15367  4CD1
15368  4CD2
15369  4CD3
15370  4CD4
15371  4CD5
15372  4CD6
15373  4CD7
15374  4CD8
15375  4CD9
15376  4CDA
15377  4CDB
15378  4CDC
15379  4CDD
15380  4CDE
15381  4CDF
15382  4CE0
15383  4CE1
15384  4CE2
15385  4CE3
15386  4CE4
15387  4CE5
15388  4CE6
15389  4CE7
15390  4CE8
15391  4CE9
15392  4CEA
15393  4CEB
15394  4CEC
15395  4CED
15396  4CEE
15397  4CEF
15398  4CF0
15399  4CF1
15400  4CF2
15401  4CF3
15402  4CF4
15403  4CF5
15404  4CF6
15405  4CF7
15406  4CF8
15407  4CF9
15408  4CFA
15409  4CFB
15410  4CFC
15411  4CFD
15412  4CFE
15413  4CFF
15414  4D00
15415  4D01
15416  4D02
15417  4D03
15418  4D04
15419  4D05
15420  4D06
15421  4D07
15422  4D08
15423  4D09
15424  4D0A
15425  4D0B
15426  4D0C
15427  4D0D
15428  4D0E
15429  4D0F
15430  4D10
15431  4D11
15432  4D12
15433  4D13
15434  4D14
15435  4D15
15436  4D16
15437  4D17
15438  4D18
15439  4D19
15440  4D1A
15441  4D1B
15442  4D1C
15443  4D1D
15444  4D1E
15445  4D1F
15446  4D20
15447  4D21
15448  4D22
15449  4D23
15450  4D24
15451  4D25
15452  4D26
15453  4D27
15454  4D28
15455  4D29
15456  4D2A
15457  4D2B
15458  4D2C
15459  4D2D
15460  4D2E
15461  4D2F
15462  4D30
15463  4D31
15464  4D32
15465  4D33
15466  4D34
15467  4D35
15468  4D36
15469  4D37
15470  4D38
15471  4D39
15472  4D3A
15473  4D3B
15474  4D3C
15475  4D3D
15476  4D3E
15477  4D3F
15478  4D40
15479  4D41
15480  4D42
15481  4D43
15482  4D44
15483  4D45
15484  4D46
15485  4D47
15486  4D48
15487  4D49
015488  000557        
015489  000558  var hFonts[54] ;
015490  000559  var stringsCV[54] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
15491  2714
15492  2715
15493  2716
15494  2717
15495  2718
15496  2719
15497  271A
15498  271B
15499  271C
15500  271D
15501  271E
15502  271F
15503  2720
15504  2721
15505  2722
15506  2723
15507  2724
15508  2725
15509  2726
15510  2727
15511  2728
15512  2729
15513  272A
15514  272B
15515  272C
15516  272D
15517  272E
15518  272F
15519  2730
15520  2731
15521  2732
15522  2733
15523  2734
15524  2735
15525  2736
15526  2737
15527  2738
15528  2739
15529  273A
15530  273B
15531  273C
15532  273D
15533  273E
15534  273F
15535  2740
15536  2741
15537  2742
15538  2743
15539  2744
15540  2745
15541  2746
15542  2747
15543  2748
15544  2749
15545  274A
15546  274B
15547  274C
15548  274D
15549  274E
15550  274F
15551  2750
15552  2751
15553  2752
15554  2753
15555  2754
15556  2755
15557  2756
15558  2757
15559  2758
15560  2759
15561  275A
15562  275B
15563  275C
15564  275D
15565  275E
15566  275F
15567  2760
15568  2761
15569  2762
15570  2763
15571  2764
15572  2765
15573  2766
15574  2767
15575  2768
15576  2769
15577  276A
15578  276B
15579  276C
15580  276D
15581  276E
15582  276F
15583  2770
15584  2771
15585  2772
15586  2773
15587  2774
15588  2775
15589  2776
15590  2777
15591  2778
15592  2779
15593  277A
15594  277B
15595  277C
15596  277D
15597  277E
15598  277F
015599  000560  // Start P2.inc
015600  000561  var oObjects[MaxTotObjects+1] ;                 // address of objects
015601  000562  var CurrentForm ;
015602  000563  var TouchXpos, TouchYpos ;
015603  000564  var InputType, TouchState, CurInputData, pInputIndex ;
015604  000565  var comRX[40], cmd[CMDLenMAX] ;
015605  000566        
015606  000567  var InputCS, OutputCS ;
015607  000568        
015608  000569        
015609  000570        
015610  000571  func seroutCS(var op)
015611  000572      serout(op) ;
015612  000573      OutputCS ^= op ;
015613  000574  endfunc
015614  000575        
015615  000576  func nak0()
015616  000577      serout(NAK) ;
015617  000578      InputCS := 0 ;
015618  000579  endfunc
015619  000580        
015620  000581  func seroutOcs()
015621  000582      serout(OutputCS) ;
015622  000583      OutputCS := 0 ;
015623  000584  endfunc
015624  000585        
015625  000586  func SendReport(var id, var objt, var objn, var val)
015626  000587      seroutCS(id) ;
015627  000588      seroutCS(objt) ;
015628  000589      seroutCS(objn) ;
015629  000590      seroutCS(val >> 8) ; // first 8 bits
015630  000591      seroutCS(val) ;
015631  000592      seroutOcs() ;
015632  000593  endfunc
015633  000594        
015634  000595        
015635  000596  func ReadObject(var ObjectType, var ObjectIdx)
015636  000597      var j, k, Objects ;
015637  000598      Objects := *(oObjects+ObjectType) ;
015638  000599        
015639  000600      j := 2 + ObjectIdx * 2 + Objects ;
015640  000601       if (ObjectType == tForm)
015641  000602          k := CurrentForm ;
015642  000603      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
015643  000604          k := img_GetWord(hndl, *j, IMAGE_TAG2);
015644  000605      else if (ObjectType == tStrings)
015645  000606          k := stringsCV[ObjectIdx];
015646  000607          else
015647  000608          k := img_GetWord(hndl, *j, IMAGE_INDEX);
015648  000609          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
015649  000610                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
015650  000611      endif
015651  000612      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
015652  000613  endfunc
015653  000614        
015654  000615        
015655  000616  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
015656  000617      var i, j, k, Objects ;
015657  000618      ObjectType &= 0x3f ;
015658  000619      if (ObjectType == tForm)
015659  000620          ActivateForm(ObjectIdx) ;
015660  000621      else
015661  000622          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
015662  000623          i := *(Objects) ;
015663  000624          switch (ObjectType)
015664  000625              case tWinButton :
015665  000626                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
015666  000627                  break ;
015667  000628              case tUserButton :
015668  000629                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
015669  000630                  break ;
015670  000631              default : j := -1 ;
015671  000632          endswitch
015672  000633          if (j != -1)
015673  000634              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
015674  000635              NewVal := NewVal << 1 ;
015675  000636              if (OVF())      // button group index change
015676  000637                  if (*(j+InputData+Ofs_IPD_P1))
015677  000638                      k &= 1 ;    // mask off old group index for momentary
015678  000639                  else
015679  000640                      k &= 3 ;    // mask off old group index for toggle
015680  000641                  endif
015681  000642              else            // normal set
015682  000643                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
015683  000644                  k &= 0xfffc ;    // retain only group index for state set
015684  000645              endif
015685  000646              NewVal |= k ;
015686  000647          endif
015687  000648           if (ObjectType == tLeddigits)
015688  000649              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
015689  000650              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015690  000651          else if (ObjectType == tStrings)
015691  000652              PrintStrings(ObjectIdx, NewVal, 0);
015692  000653          else
015693  000654              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
015694  000655              img_Show(hndl, i) ; // will only display if form is current
015695  000656          endif
015696  000657      endif
015697  000658  endfunc
015698  000659        
015699  000660  func TurnOffButtons(var group)
015700  000661      var j, k, l;
015701  000662      for (j := 0; j < nInputs; j++)
015702  000663          k := j*IPDatasize ;
015703  000664          if (*(InputData+k+Ofs_IPD_P2) == group)
015704  000665              l := -1 ;
015705  000666               if (*(InputData+k) == tWinButton)
015706  000667                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015707  000668                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
015708  000669                  img_Show(hndl, l);      // only shows on current form
015709  000670              else if (*(InputData+k) == tUserButton)
015710  000671                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015711  000672                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
015712  000673                  img_Show(hndl, l);      // only shows on current form
015713  000674              endif
015714  000675          endif
015715  000676      next
015716  000677  endfunc
015717  000678        
015718  000679        
015719  000680  // WARNING, this code will crash if newval exceeds maximum displayable number
015720  000681  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
015721  000682      var i, j, k, l, lb, newval ;
015722  000683      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
015723  000684      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
015724  000685      i := -1 ;
015725  000686      j := *(typeptr) ;
015726  000687      repeat
015727  000688          typeptr += 2 ;
015728  000689          i++ ;
015729  000690          until (*(typeptr) == imgidx);
015730  000691      j := setptr + i*10 ;
015731  000692        
015732  000693      imgidx++ ;
015733  000694      l := 1 ;
015734  000695      for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
015735  000696          l *= 10 ;
015736  000697      next
015737  000698      lb := *(j+Ofs_Digits_LeadingBlanks) ;
015738  000699      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
015739  000700          k := newval / l ;
015740  000701          newval -= k * l ;
015741  000702          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
015742  000703              if (k == 0)
015743  000704                  k := 10 ;
015744  000705              else
015745  000706                  lb := 0 ;
015746  000707              endif
015747  000708          endif
015748  000709          l /= 10 ;
015749  000710          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
015750  000711          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
015751  000712          img_Show(hndl, imgidx);
015752  000713      next
015753  000714  endfunc
015754  000715        
015755  000716        
015756  000717  func ActivateForm(var newform)
015757  000718      var i, j, *p ;
015758  000719        
015759  000720      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
015760  000721          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
015761  000722              if (img_GetWord(hndl, i, IMAGE_TAG))
015762  000723                  img_Disable(hndl,i) ;
015763  000724              endif
015764  000725          next
015765  000726      endif
015766  000727      CurrentForm := newform ;
015767  000728      // display newform image or clear to image color
015768  000729      if (FormBGcolors[CurrentForm] != ColorBGimage)
015769  000730          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
015770  000731          gfx_Cls() ;
015771  000732          DoGFXObjects() ;                                    // display GFX 'widgets'
015772  000733      endif
015773  000734        
015774  000735      // enable inputs
015775  000736      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
015776  000737          j := img_GetWord(hndl, i, IMAGE_TAG) ;
015777  000738          if (j)
015778  000739              j-- ;
015779  000740              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
015780  000741              //if (j != tKeyboard)
015781  000742              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
015782  000743                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
015783  000744              endif
015784  000745              img_Show(hndl,i) ; // show initialy, if required
015785  000746              if (j == tForm)
015786  000747                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
015787  000748              else if (j == tLeddigits)
015788  000749                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015789  000750              endif
015790  000751          endif
015791  000752      next
015792  000753      for (i := 0; i < nStrings; i++)
015793  000754          if (stringsCV[i] != -1)
015794  000755              WriteObject(tStrings, i, stringsCV[i]) ;
015795  000756          endif
015796  000757      next
015797  000758        
015798  000759  endfunc
015799  000760        
015800  000761  func UpdateObjects(var newval)
015801  000762      var IPidx, otherOBJ ;
015802  000763      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
015803  000764        
015804  000765          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
015805  000766              img_Show(hndl, *(pInputIndex));      // only shows on current form
015806  000767          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
015807  000768              if (*(CurInputData+Ofs_IPD_P1))
015808  000769                  newval &= 1;
015809  000770              else
015810  000771                  newval &= 3;
015811  000772              endif
015812  000773              if (newval > 1) newval := 1;
015813  000774          endif
015814  000775          IPidx := *(CurInputData+TouchState) ;
015815  000776          while(IPidx != 0)
015816  000777              otherOBJ := IPidx + InputData;
015817  000778              if (*(otherOBJ) == OT_REPORT)
015818  000779          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
015819  000780              else if (*(otherOBJ) == OT_MAGIC)
015820  000781                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
015821  000782                  IPidx(newval) ;
015822  000783              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
015823  000784                  if (*(otherOBJ) == OT_ACTIVATE)
015824  000785                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
015825  000786                      InputType := tForm ;
015826  000787                  else if (*(otherOBJ) == OT_SETCONST)
015827  000788                      newval := *(otherOBJ+Ofs_IPD_P3) ;
015828  000789                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015829  000790                  else if (*(otherOBJ) == OT_SETANOTHER)
015830  000791                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015831  000792                  else if (*(otherOBJ) == OT_PREVFRAME)
015832  000793                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
015833  000794                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
015834  000795                      endif
015835  000796                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015836  000797                  else if (*(otherOBJ) == OT_NEXTFRAME)
015837  000798                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
015838  000799                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
015839  000800                      endif
015840  000801                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015841  000802                  else if (*(otherOBJ) == OT_PREVSTRING)
015842  000803                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
015843  000804                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
015844  000805                      endif
015845  000806                  else if (*(otherOBJ) == OT_NEXTSTRING)
015846  000807                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
015847  000808                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
015848  000809                      endif
015849  000810                  endif
015850  000811              endif
015851  000812              IPidx := *(otherOBJ+TouchState) ;
015852  000813          wend
015853  000814      endif
015854  000815  endfunc
015855  000816        
015856  000817  // End P2.inc
015857  000818  func DoGFXObjects()
015858  000819  endfunc
015859  000820        
015860  000821  // Start P3.inc
015861  000822  func main()
015862  000823      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
015863  000824        
015864  000825      putstr("Mounting...\n");
015865  000826      if (!(file_Mount()))
015866  000827          while(!(file_Mount()))
015867  000828              putstr("Drive not mounted...");
015868  000829              pause(200);
015869  000830              gfx_Cls();
015870  000831              pause(200);
015871  000832          wend
015872  000833      endif
015873  000834  //    gfx_MoveTo(0, 0);
015874  000835  //    print(mem_Heap()," ") ;
015875  000836  //    gfx_TransparentColour(0x0020);
015876  000837  //    gfx_Transparency(ON);
015877  000838        
015878  000839      gfx_ScreenMode(LANDSCAPE) ;
015879  000840        
015880  000841      // open image control
015881  000842      hndl := file_LoadImageControl("RepRap_T.dat", "RepRap_T.gci", 1);
015882  000843        
015883  000844      // init 'constants'
015884  000845  // End P3.inc
015885  000846        
015886  000847      oObjects[tDipSwitch] := oDipSwitchs ;
015887  000848      oObjects[tKnob] := oKnobs ;
015888  000849      oObjects[tRockerSwitch] := oRockerSwitchs ;
015889  000850      oObjects[tRotarySwitch] := oRotarySwitchs ;
015890  000851      oObjects[tGSlider] := oGSliders ;
015891  000852      oObjects[tTrackbar] := oTrackbars ;
015892  000853      oObjects[tWinButton] := oWinButtons ;
015893  000854      oObjects[tAngularmeter] := oAngularmeters ;
015894  000855      oObjects[tCoolgauge] := oCoolgauges ;
015895  000856      oObjects[tCustomdigits] := oCustomdigitss ;
015896  000857      oObjects[tForm] := oForms ;
015897  000858      oObjects[tGauge] := oGauges ;
015898  000859      oObjects[tImage] := oImages ;
015899  000860      oObjects[tKeyboard] := oKeyboards ;
015900  000861      oObjects[tLed] := oLeds ;
015901  000862      oObjects[tLeddigits] := oLeddigitss ;
015902  000863      oObjects[tMeter] := oMeters ;
015903  000864      oObjects[tStrings] := oStringss ;
015904  000865      oObjects[tThermometer] := oThermometers ;
015905  000866      oObjects[tUserled] := oUserleds ;
015906  000867      oObjects[tVideo] := oVideos ;
015907  000868      oObjects[tStaticText] := oStaticTexts ;
015908  000869      oObjects[tSounds] := oSoundss ;
015909  000870      oObjects[tTimer] := oTimers ;
015910  000871      oObjects[tSpectrum] := oSpectrums ;
015911  000872      oObjects[tTank] := oTanks ;
015912  000873      oObjects[tUserImages] := oUserImagess ;
015913  000874      oObjects[tPinOutput] := oPinOutputs ;
015914  000875      oObjects[tPinInput] := oPinInputs ;
015915  000876      oObjects[t4Dbutton] := o4Dbuttons ;
015916  000877      oObjects[tAniButton] := oAniButtons ;
015917  000878      oObjects[tColorPicker] := oColorPickers ;
015918  000879      oObjects[tUserButton] := oUserButtons ;
015919  000880      hFonts[0] := file_LoadImageControl("RepRap_T.d03", "RepRap_T.g03", 1)  ;
015920  000881      hFonts[1] := file_LoadImageControl("RepRap_T.d01", "RepRap_T.g01", 1)  ;
015921  000882      hFonts[2] := file_LoadImageControl("RepRap_T.d02", "RepRap_T.g02", 1)  ;
015922  000883      hFonts[3] := FONT3 ;
015923  000884      hFonts[4] := FONT3 ;
015924  000885      hFonts[6] := FONT3 ;
015925  000886      hFonts[11] := file_LoadImageControl("RepRap_T.d06", "RepRap_T.g06", 1)  ;
015926  000887      hFonts[12] := file_LoadImageControl("RepRap_T.d05", "RepRap_T.g05", 1)  ;
015927  000888      hFonts[13] := file_LoadImageControl("RepRap_T.d0E", "RepRap_T.g0E", 1)  ;
015928  000889      hFonts[14] := FONT3 ;
015929  000890      hFonts[15] := FONT3 ;
015930  000891      hFonts[16] := FONT3 ;
015931  000892      hFonts[19] := file_LoadImageControl("RepRap_T.d0@", "RepRap_T.g0@", 1)  ;
015932  000893      hFonts[24] := FONT3 ;
015933  000894      hFonts[25] := file_LoadImageControl("RepRap_T.d07", "RepRap_T.g07", 1)  ;
015934  000895      hFonts[28] := FONT3 ;
015935  000896      hFonts[30] := file_LoadImageControl("RepRap_T.d0B", "RepRap_T.g0B", 1)  ;
015936  000897      hFonts[31] := file_LoadImageControl("RepRap_T.d0C", "RepRap_T.g0C", 1)  ;
015937  000898      hFonts[33] := file_LoadImageControl("RepRap_T.d09", "RepRap_T.g09", 1)  ;
015938  000899      hFonts[35] := file_LoadImageControl("RepRap_T.d08", "RepRap_T.g08", 1)  ;
015939  000900      hFonts[37] := file_LoadImageControl("RepRap_T.d04", "RepRap_T.g04", 1)  ;
015940  000901      hFonts[49] := file_LoadImageControl("RepRap_T.d0D", "RepRap_T.g0D", 1)  ;
015941  000902      hFonts[51] := FONT3 ;
015942  000903      hFonts[52] := FONT3 ;
015943  000904      hFonts[7] := hFonts[37] ;
015944  000905      hFonts[8] := hFonts[37] ;
015945  000906      hFonts[9] := hFonts[0] ;
015946  000907      hFonts[10] := hFonts[11] ;
015947  000908      hFonts[17] := hFonts[11] ;
015948  000909      hFonts[18] := hFonts[11] ;
015949  000910      hFonts[22] := hFonts[11] ;
015950  000911      hFonts[26] := hFonts[25] ;
015951  000912      hFonts[27] := hFonts[25] ;
015952  000913      hFonts[29] := hFonts[11] ;
015953  000914      hFonts[32] := hFonts[31] ;
015954  000915      hFonts[34] := hFonts[0] ;
015955  000916      hFonts[36] := hFonts[0] ;
015956  000917      hFonts[38] := hFonts[37] ;
015957  000918      hFonts[39] := hFonts[37] ;
015958  000919      hFonts[40] := hFonts[0] ;
015959  000920      hFonts[41] := hFonts[0] ;
015960  000921      hFonts[42] := hFonts[0] ;
015961  000922      hFonts[43] := hFonts[37] ;
015962  000923      hFonts[44] := hFonts[37] ;
015963  000924      hFonts[45] := hFonts[37] ;
015964  000925      hFonts[46] := hFonts[13] ;
015965  000926      hFonts[47] := hFonts[13] ;
015966  000927      hFonts[48] := hFonts[13] ;
015967  000928      hFonts[50] := hFonts[11] ;
015968  000929      hFonts[53] := hFonts[11] ;
015969  000930  // Start P4.inc
015970  000931      hstrings := file_Open("RepRap_T.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
015971  000932      // init comms
015972  000933      com_Init(comRX,CMDLenMAX,0);
015973  000934      com_SetBaud(COM0,19886);
015974  000935      com_TXbuffer(comTX, 100, 0);
015975  000936      snd_BufSize(2) ;
015976  000937      // tag 'real' objects
015977  000938      for (i := 0; i <= MaxTotObjects; i++)
015978  000939          if (   (i != tSounds)
015979  000940              && (i != tTimer)
015980  000941              && (i != tPinOutput)
015981  000942              && (i != tPinInput) )
015982  000943              TouchXpos := oObjects[i] ;
015983  000944              TouchYpos := *(TouchXpos) ;
015984  000945              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
015985  000946                  oldn := *(TouchXpos+ImageTouched*2) ;
015986  000947                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
015987  000948                  if (oldn != -1)
015988  000949                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
015989  000950                      img_Disable(hndl, oldn) ;
015990  000951                  endif
015991  000952              next
015992  000953          endif
015993  000954      next
015994  000955        
015995  000956      // display initial form
015996  000957      CurrentForm := -1 ;
015997  000958      ActivateForm(0) ; // need to change this according to first actual form
015998  000959        
015999  000960  // End P4.inc
016000  000961  // Start P5.inc
016001  000962      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
016002  000963      oldn := -1 ;
016003  000964      repeat
016004  000965        
016005  000966          // check comms for command, how to NAK invalid command
016006  000967          if (com_Count() != 0)
016007  000968              i := serin() ;
016008  000969              InputCS ^= i ;               // update checksum
016009  000970              if (   (cmdi > 2)
016010  000971                  && (cmd[0] == WRITE_STRU) )
016011  000972                  j := (cmdi-1) >> 1 + 2 ;
016012  000973                  if (j == CMDLenMAX)    // max length exceeded
016013  000974                      nak0() ;
016014  000975                      cmdi := -1 ;
016015  000976                  else if (cmdi & 1)
016016  000977                      cmd[j] := i ;
016017  000978                      if (cmd[2] == 0)    // if string complete
016018  000979                          if (InputCS)
016019  000980                              nak0() ;
016020  000981                          else
016021  000982                              if (cmd[0] == WRITE_STRU)
016022  000983                              cmd[j] := 0 ;                     // terminate it
016023  000984                              PrintStrings(cmd[1], &cmd[3], 1) ;
016024  000985                              serout(ACK) ;
016025  000986                              else
016026  000987                              endif
016027  000988                          endif
016028  000989                          cmdi := -1 ;
016029  000990                      endif
016030  000991                  else
016031  000992                      cmd[j] := cmd[j] << 8 + i ;
016032  000993                      cmd[2]-- ;          // dec length
016033  000994                  endif
016034  000995                  cmdi++ ;
016035  000996              else // not unicode string
016036  000997                  cmd[cmdi++] := i ;
016037  000998                   if (cmd[0] == WRITE_STR)                  // Ansi String
016038  000999                      if (cmdi == CMDLenMAX)      // max length exceeded
016039  001000                          nak0() ;
016040  001001                          cmdi := 0 ;
016041  001002                      else if (cmdi > 2)
016042  001003                          if (cmd[2] == -1)
016043  001004                              if (InputCS)
016044  001005                                  nak0() ;
016045  001006                              else
016046  001007                                  if (cmd[0] == WRITE_STR)
016047  001008                                  cmd[cmdi-1] := 0 ;                     // terminate it
016048  001009                                  PrintStrings(cmd[1], &cmd[3], 1) ;
016049  001010                                  serout(ACK) ;
016050  001011                                  else
016051  001012                                  endif
016052  001013                              endif
016053  001014                              cmdi := 0 ;
016054  001015                          else
016055  001016                              cmd[2]-- ;          // dec length
016056  001017                          endif
016057  001018                      endif
016058  001019                  else if (   (cmd[0] == READ_OBJ)
016059  001020                           && (cmdi == 4)         )
016060  001021                      if (InputCS)
016061  001022                          nak0() ;
016062  001023                      else
016063  001024                          ReadObject(cmd[1], cmd[2]) ;
016064  001025                      endif
016065  001026                      cmdi := 0 ;
016066  001027                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
016067  001028                           && (cmdi == 6)          )
016068  001029                      if (InputCS)
016069  001030                          nak0() ;
016070  001031                      else
016071  001032                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
016072  001033                          serout(ACK) ;
016073  001034                      endif
016074  001035                      cmdi := 0 ;
016075  001036                  else if (   (cmd[0] == WRITE_CONTRAST)
016076  001037                           && (cmdi == 3)         )
016077  001038                      if (InputCS)
016078  001039                          nak0() ;
016079  001040                      else
016080  001041                          gfx_Contrast(cmd[1]) ;
016081  001042                          serout(ACK) ;
016082  001043                      endif
016083  001044                      cmdi := 0 ;
016084  001045                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
016085  001046                      nak0() ;
016086  001047                      cmdi := 0 ;
016087  001048                  endif
016088  001049              endif   // not unicode string
016089  001050          endif   // a character is available
016090  001051        
016091  001052        
016092  001053      // touch code processing
016093  001054        
016094  001055          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
016095  001056          ImageTouched := img_Touched(hndl,-1) ;
016096  001057          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
016097  001058              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
016098  001059                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
016099  001060              endif
016100  001061              if (TouchStatus != TOUCH_RELEASED)        // if not released
016101  001062                  if (oldn != -1)
016102  001063                      ImageTouched := oldn ;
016103  001064                  else
016104  001065                      if (oldn != ImageTouched)
016105  001066                  oldn := ImageTouched ;
016106  001067                          TouchStatus := TOUCH_PRESSED ;
016107  001068                      endif
016108  001069                  endif
016109  001070                  TouchXpos  := touch_Get(TOUCH_GETX);
016110  001071                  TouchYpos  := touch_Get(TOUCH_GETY);
016111  001072                  TouchState := Ofs_IPD_DOWN ;
016112  001073              else
016113  001074                  ImageTouched := oldn ;                     // simulate release of what we touched
016114  001075                  oldn := -1 ;                    // prevent double release
016115  001076                  TouchState := Ofs_IPD_RELEASE ;
016116  001077              endif
016117  001078              if (ImageTouched != -1)
016118  001079                          CurInputData := InputControls[ImageTouched] + InputData;
016119  001080                          InputType := *(CurInputData) ;
016120  001081                          i := InputType ;
016121  001082                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
016122  001083                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
016123  001084              endif
016124  001085          endif
016125  001086   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
016126  001087        
016127  001088          sys_EventsResume() ;
016128  001089      forever
016129  001090        
016130  001091  cDipswitch:
016131  001092        
016132  001093  cKnob:
016133  001094        
016134  001095  cRockerswitch:
016135  001096        
016136  001097  cRotaryswitch:
016137  001098        
016138  001099  cSlider:
016139  001100  cTrackbar:
016140  001101        
016141  001102  c4DButton:
016142  001103  cUserButton:
016143  001104      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
016144  001105      goto gbutton ;
016145  001106  cWinbutton:
016146  001107      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
016147  001108  gbutton:
016148  001109      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
016149  001110      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
016150  001111          if (TouchStatus == TOUCH_RELEASED)
016151  001112              i &= 0xfffe ;
016152  001113              TouchState == Ofs_IPD_DOWN ;
016153  001114          else
016154  001115              i |= 1 ;
016155  001116              TouchState == Ofs_IPD_RELEASE ;
016156  001117          endif
016157  001118      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
016158  001119          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
016159  001120              if ((i & 3) == 3)
016160  001121                  i &= 0xfffc ;
016161  001122              else
016162  001123                  i++ ;
016163  001124              endif
016164  001125          else
016165  001126              i |= 1 ;                                      // make down regardless of current state
016166  001127          endif
016167  001128      else                        // group action, up all other buttons on touch press, reports 0 for button down
016168  001129          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
016169  001130              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
016170  001131          endif
016171  001132          i := (i & 0xfffc) | 2 ;
016172  001133      endif
016173  001134        
016174  001135      UpdateObjects(i) ;
016175  001136  endsub ;
016176  001137        
016177  001138  cAniButton:
016178  001139        
016179  001140  cColorPicker:
016180  001141        
016181  001142  endfunc
016182  001143  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 782 file:RepRap_Touchv1.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 718 file:RepRap_Touchv1.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       13172  0x00003374 (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 126)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (usage 3)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  382  0x0000017e (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 108)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                302  0x0000012e (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         298  0x0000012a (mem) word (global)  (usage 27)
CurrentForm                          288  0x00000120 (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (usage 3)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (usage 18)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       12540  0x000030fc (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 45)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (usage 30)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                        9777  0x00002631FormBGcolors                        9777  0x00002631 (mem) word[43] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                          93  0x0000005dFormEndIndex                          93  0x0000005d (mem) word[43] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[43] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[54] (global)  (usage 231)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             218  0x000000da (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm0                                 0  0x00000000 (const ??? 0)  (usage 3)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                              115  0x00000073 (const ??? 0)  (usage 3)
iForm11                              102  0x00000066 (const ??? 0)  (usage 3)
iForm12                               49  0x00000031 (const ??? 0)  (usage 3)
iForm14                               56  0x00000038 (const ??? 0)  (usage 3)
iForm16                              181  0x000000b5 (const ??? 0)  (usage 3)
iForm17                              185  0x000000b9 (const ??? 0)  (usage 3)
iForm18                              188  0x000000bc (const ??? 0)  (usage 3)
iForm19                               69  0x00000045 (const ??? 0)  (usage 3)
iForm2                                 4  0x00000004 (const ??? 0)  (usage 3)
iForm20                               73  0x00000049 (const ??? 0)  (usage 3)
iForm21                               79  0x0000004f (const ??? 0)  (usage 3)
iForm23                               88  0x00000058 (const ??? 0)  (usage 3)
iForm24                               94  0x0000005e (const ??? 0)  (usage 3)
iForm25                              191  0x000000bf (const ??? 0)  (usage 3)
iForm26                               97  0x00000061 (const ??? 0)  (usage 3)
iForm27                              103  0x00000067 (const ??? 0)  (usage 3)
iForm28                              125  0x0000007d (const ??? 0)  (usage 3)
iForm29                              130  0x00000082 (const ??? 0)  (usage 3)
iForm30                              139  0x0000008b (const ??? 0)  (usage 3)
iForm31                              143  0x0000008f (const ??? 0)  (usage 3)
iForm32                              147  0x00000093 (const ??? 0)  (usage 3)
iForm33                              151  0x00000097 (const ??? 0)  (usage 3)
iForm34                              163  0x000000a3 (const ??? 0)  (usage 3)
iForm35                              170  0x000000aa (const ??? 0)  (usage 3)
iForm38                              195  0x000000c3 (const ??? 0)  (usage 3)
iForm4                                10  0x0000000a (const ??? 0)  (usage 3)
iForm40                              206  0x000000ce (const ??? 0)  (usage 3)
iForm41                              231  0x000000e7 (const ??? 0)  (usage 3)
iForm5                                16  0x00000010 (const ??? 0)  (usage 3)
iForm6                                19  0x00000013 (const ??? 0)  (usage 3)
iForm7                               177  0x000000b1 (const ??? 0)  (usage 3)
iForm9                                45  0x0000002d (const ??? 0)  (usage 3)
iiLeddigits0                          34  0x00000022 (const ??? 0)  (not used)
iiLeddigits1                          36  0x00000024 (const ??? 0)  (not used)
iiLeddigits2                          38  0x00000026 (const ??? 0)  (not used)
iImage0                              182  0x000000b6 (const ??? 0)  (usage 3)
iLeddigits0                           33  0x00000021 (const ??? 0)  (usage 3)
iLeddigits1                           35  0x00000023 (const ??? 0)  (usage 3)
iLeddigits2                           37  0x00000025 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        179  0x000000b3InputControls                        179  0x000000b3 (mem) word[233] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
InputCS                              542  0x0000021e (mem) word (global)  (usage 21)
InputData                            645  0x00000285InputData                            645  0x00000285 (mem) word[3586] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 30)
InputType                            294  0x00000126 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                          95  0x0000005f (const ??? 0)  (usage 3)
iStatictext1                          39  0x00000027 (const ??? 0)  (usage 3)
iStatictext10                         60  0x0000003c (const ??? 0)  (usage 3)
iStatictext11                         77  0x0000004d (const ??? 0)  (usage 3)
iStatictext12                         78  0x0000004e (const ??? 0)  (usage 3)
iStatictext13                         92  0x0000005c (const ??? 0)  (usage 3)
iStatictext14                         93  0x0000005d (const ??? 0)  (usage 3)
iStatictext15                        104  0x00000068 (const ??? 0)  (usage 3)
iStatictext16                         23  0x00000017 (const ??? 0)  (usage 3)
iStatictext17                         24  0x00000018 (const ??? 0)  (usage 3)
iStatictext18                        174  0x000000ae (const ??? 0)  (usage 3)
iStatictext19                         62  0x0000003e (const ??? 0)  (usage 3)
iStatictext2                          40  0x00000028 (const ??? 0)  (usage 3)
iStatictext3                         152  0x00000098 (const ??? 0)  (usage 3)
iStatictext4                          41  0x00000029 (const ??? 0)  (usage 3)
iStatictext5                         164  0x000000a4 (const ??? 0)  (usage 3)
iStatictext6                         168  0x000000a8 (const ??? 0)  (usage 3)
iStatictext7                         175  0x000000af (const ??? 0)  (usage 3)
iStatictext8                          81  0x00000051 (const ??? 0)  (usage 3)
iStatictext9                          61  0x0000003d (const ??? 0)  (usage 3)
iStrings0                           7817  0x00001e89iStrings0                           7817  0x00001e89 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings1                           7843  0x00001ea3iStrings1                           7843  0x00001ea3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings10                          8051  0x00001f73iStrings10                          8051  0x00001f73 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings11                          8077  0x00001f8diStrings11                          8077  0x00001f8d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings12                          8103  0x00001fa7iStrings12                          8103  0x00001fa7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings13                          8129  0x00001fc1iStrings13                          8129  0x00001fc1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings14                          8155  0x00001fdbiStrings14                          8155  0x00001fdb (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings15                          8181  0x00001ff5iStrings15                          8181  0x00001ff5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings16                          8207  0x0000200fiStrings16                          8207  0x0000200f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings17                          8233  0x00002029iStrings17                          8233  0x00002029 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings18                          8259  0x00002043iStrings18                          8259  0x00002043 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings19                          8285  0x0000205diStrings19                          8285  0x0000205d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings2                           7869  0x00001ebdiStrings2                           7869  0x00001ebd (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings22                          8311  0x00002077iStrings22                          8311  0x00002077 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings24                          8337  0x00002091iStrings24                          8337  0x00002091 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings25                          8363  0x000020abiStrings25                          8363  0x000020ab (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings26                          8389  0x000020c5iStrings26                          8389  0x000020c5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings27                          8415  0x000020dfiStrings27                          8415  0x000020df (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings28                          8441  0x000020f9iStrings28                          8441  0x000020f9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings29                          8467  0x00002113iStrings29                          8467  0x00002113 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings3                           7895  0x00001ed7iStrings3                           7895  0x00001ed7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings30                          8493  0x0000212diStrings30                          8493  0x0000212d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings31                          8519  0x00002147iStrings31                          8519  0x00002147 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings32                          8545  0x00002161iStrings32                          8545  0x00002161 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings33                          8571  0x0000217biStrings33                          8571  0x0000217b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings34                          8597  0x00002195iStrings34                          8597  0x00002195 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings35                          8623  0x000021afiStrings35                          8623  0x000021af (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings36                          8649  0x000021c9iStrings36                          8649  0x000021c9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings37                          8675  0x000021e3iStrings37                          8675  0x000021e3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings38                          8701  0x000021fdiStrings38                          8701  0x000021fd (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings39                          8727  0x00002217iStrings39                          8727  0x00002217 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings4                           7921  0x00001ef1iStrings4                           7921  0x00001ef1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings40                          8753  0x00002231iStrings40                          8753  0x00002231 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings41                          8779  0x0000224biStrings41                          8779  0x0000224b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings42                          8805  0x00002265iStrings42                          8805  0x00002265 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings43                          8831  0x0000227fiStrings43                          8831  0x0000227f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings44                          8857  0x00002299iStrings44                          8857  0x00002299 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings45                          8883  0x000022b3iStrings45                          8883  0x000022b3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings46                          8909  0x000022cdiStrings46                          8909  0x000022cd (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings47                          8935  0x000022e7iStrings47                          8935  0x000022e7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings48                          8961  0x00002301iStrings48                          8961  0x00002301 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings49                          8987  0x0000231biStrings49                          8987  0x0000231b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings50                          9013  0x00002335iStrings50                          9013  0x00002335 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings51                          9039  0x0000234fiStrings51                          9039  0x0000234f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings52                          9065  0x00002369iStrings52                          9065  0x00002369 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings53                          9091  0x00002383iStrings53                          9091  0x00002383 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings6                           7947  0x00001f0biStrings6                           7947  0x00001f0b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings7                           7973  0x00001f25iStrings7                           7973  0x00001f25 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings8                           7999  0x00001f3fiStrings8                           7999  0x00001f3f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings9                           8025  0x00001f59iStrings9                           8025  0x00001f59 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                         15  0x0000000f (const ??? 0)  (usage 3)
iUserbutton100                       113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton101                       114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton102                       153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton103                       154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton104                       155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton105                       156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton106                       157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton107                       158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton108                       159  0x0000009f (const ??? 0)  (usage 3)
iUserbutton109                       160  0x000000a0 (const ??? 0)  (usage 3)
iUserbutton11                        126  0x0000007e (const ??? 0)  (usage 3)
iUserbutton110                       161  0x000000a1 (const ??? 0)  (usage 3)
iUserbutton111                       162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton112                       165  0x000000a5 (const ??? 0)  (usage 3)
iUserbutton113                       166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton114                       167  0x000000a7 (const ??? 0)  (usage 3)
iUserbutton115                       171  0x000000ab (const ??? 0)  (usage 3)
iUserbutton116                       172  0x000000ac (const ??? 0)  (usage 3)
iUserbutton117                       173  0x000000ad (const ??? 0)  (usage 3)
iUserbutton118                        91  0x0000005b (const ??? 0)  (usage 3)
iUserbutton119                       208  0x000000d0 (const ??? 0)  (usage 3)
iUserbutton12                         17  0x00000011 (const ??? 0)  (usage 3)
iUserbutton120                       199  0x000000c7 (const ??? 0)  (usage 3)
iUserbutton121                       200  0x000000c8 (const ??? 0)  (usage 3)
iUserbutton122                       201  0x000000c9 (const ??? 0)  (usage 3)
iUserbutton123                       202  0x000000ca (const ??? 0)  (usage 3)
iUserbutton124                       203  0x000000cb (const ??? 0)  (usage 3)
iUserbutton125                       204  0x000000cc (const ??? 0)  (usage 3)
iUserbutton126                       205  0x000000cd (const ??? 0)  (usage 3)
iUserbutton127                       209  0x000000d1 (const ??? 0)  (usage 3)
iUserbutton128                       210  0x000000d2 (const ??? 0)  (usage 3)
iUserbutton129                       211  0x000000d3 (const ??? 0)  (usage 3)
iUserbutton13                         18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton130                       212  0x000000d4 (const ??? 0)  (usage 3)
iUserbutton131                       213  0x000000d5 (const ??? 0)  (usage 3)
iUserbutton132                       214  0x000000d6 (const ??? 0)  (usage 3)
iUserbutton133                       215  0x000000d7 (const ??? 0)  (usage 3)
iUserbutton134                       207  0x000000cf (const ??? 0)  (usage 3)
iUserbutton135                       216  0x000000d8 (const ??? 0)  (usage 3)
iUserbutton136                       217  0x000000d9 (const ??? 0)  (usage 3)
iUserbutton137                       219  0x000000db (const ??? 0)  (usage 3)
iUserbutton138                       220  0x000000dc (const ??? 0)  (usage 3)
iUserbutton139                       221  0x000000dd (const ??? 0)  (usage 3)
iUserbutton14                          7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton140                       222  0x000000de (const ??? 0)  (usage 3)
iUserbutton141                       223  0x000000df (const ??? 0)  (usage 3)
iUserbutton142                       224  0x000000e0 (const ??? 0)  (usage 3)
iUserbutton143                       225  0x000000e1 (const ??? 0)  (usage 3)
iUserbutton144                       226  0x000000e2 (const ??? 0)  (usage 3)
iUserbutton145                       227  0x000000e3 (const ??? 0)  (usage 3)
iUserbutton146                       228  0x000000e4 (const ??? 0)  (usage 3)
iUserbutton147                       229  0x000000e5 (const ??? 0)  (usage 3)
iUserbutton149                       218  0x000000da (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton150                       230  0x000000e6 (const ??? 0)  (usage 3)
iUserbutton16                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton17                         57  0x00000039 (const ??? 0)  (usage 3)
iUserbutton18                         46  0x0000002e (const ??? 0)  (usage 3)
iUserbutton19                         47  0x0000002f (const ??? 0)  (usage 3)
iUserbutton2                          21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton20                        100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton21                        105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton22                        106  0x0000006a (const ??? 0)  (usage 3)
iUserbutton23                        116  0x00000074 (const ??? 0)  (usage 3)
iUserbutton24                        117  0x00000075 (const ??? 0)  (usage 3)
iUserbutton25                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton26                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton27                         51  0x00000033 (const ??? 0)  (usage 3)
iUserbutton28                         52  0x00000034 (const ??? 0)  (usage 3)
iUserbutton29                         53  0x00000035 (const ??? 0)  (usage 3)
iUserbutton3                          32  0x00000020 (const ??? 0)  (usage 3)
iUserbutton30                         54  0x00000036 (const ??? 0)  (usage 3)
iUserbutton31                         55  0x00000037 (const ??? 0)  (usage 3)
iUserbutton32                         58  0x0000003a (const ??? 0)  (usage 3)
iUserbutton33                         59  0x0000003b (const ??? 0)  (usage 3)
iUserbutton34                        179  0x000000b3 (const ??? 0)  (usage 3)
iUserbutton35                         63  0x0000003f (const ??? 0)  (usage 3)
iUserbutton36                         64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton37                         65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton38                         68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton39                         66  0x00000042 (const ??? 0)  (usage 3)
iUserbutton4                           5  0x00000005 (const ??? 0)  (usage 3)
iUserbutton40                         67  0x00000043 (const ??? 0)  (usage 3)
iUserbutton41                        183  0x000000b7 (const ??? 0)  (usage 3)
iUserbutton42                        184  0x000000b8 (const ??? 0)  (usage 3)
iUserbutton43                        186  0x000000ba (const ??? 0)  (usage 3)
iUserbutton44                        187  0x000000bb (const ??? 0)  (usage 3)
iUserbutton45                        189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton46                        190  0x000000be (const ??? 0)  (usage 3)
iUserbutton47                        192  0x000000c0 (const ??? 0)  (usage 3)
iUserbutton48                        193  0x000000c1 (const ??? 0)  (usage 3)
iUserbutton49                        180  0x000000b4 (const ??? 0)  (usage 3)
iUserbutton5                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton50                         22  0x00000016 (const ??? 0)  (usage 3)
iUserbutton51                        107  0x0000006b (const ??? 0)  (usage 3)
iUserbutton52                         71  0x00000047 (const ??? 0)  (usage 3)
iUserbutton53                         80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton54                         72  0x00000048 (const ??? 0)  (usage 3)
iUserbutton55                         82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton56                         83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton57                         84  0x00000054 (const ??? 0)  (usage 3)
iUserbutton58                         85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton59                         86  0x00000056 (const ??? 0)  (usage 3)
iUserbutton6                          11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton60                         87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        194  0x000000c2 (const ??? 0)  (usage 3)
iUserbutton63                         42  0x0000002a (const ??? 0)  (usage 3)
iUserbutton64                        196  0x000000c4 (const ??? 0)  (usage 3)
iUserbutton65                        197  0x000000c5 (const ??? 0)  (usage 3)
iUserbutton66                         89  0x00000059 (const ??? 0)  (usage 3)
iUserbutton67                        232  0x000000e8 (const ??? 0)  (usage 3)
iUserbutton68                         90  0x0000005a (const ??? 0)  (usage 3)
iUserbutton69                         96  0x00000060 (const ??? 0)  (usage 3)
iUserbutton7                          12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton70                        198  0x000000c6 (const ??? 0)  (usage 3)
iUserbutton71                         98  0x00000062 (const ??? 0)  (usage 3)
iUserbutton72                        108  0x0000006c (const ??? 0)  (usage 3)
iUserbutton73                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton74                         99  0x00000063 (const ??? 0)  (usage 3)
iUserbutton75                         74  0x0000004a (const ??? 0)  (usage 3)
iUserbutton76                         75  0x0000004b (const ??? 0)  (usage 3)
iUserbutton77                         76  0x0000004c (const ??? 0)  (usage 3)
iUserbutton78                        120  0x00000078 (const ??? 0)  (usage 3)
iUserbutton79                        121  0x00000079 (const ??? 0)  (usage 3)
iUserbutton8                          13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton80                        122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton81                        123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton82                        124  0x0000007c (const ??? 0)  (usage 3)
iUserbutton83                        127  0x0000007f (const ??? 0)  (usage 3)
iUserbutton84                        131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton85                        132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton86                        133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton87                        134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton88                        135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton89                        136  0x00000088 (const ??? 0)  (usage 3)
iUserbutton9                          14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton90                        137  0x00000089 (const ??? 0)  (usage 3)
iUserbutton91                        138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton92                        129  0x00000081 (const ??? 0)  (usage 3)
iUserbutton93                        141  0x0000008d (const ??? 0)  (usage 3)
iUserbutton94                        144  0x00000090 (const ??? 0)  (usage 3)
iUserbutton95                        148  0x00000094 (const ??? 0)  (usage 3)
iUserbutton96                        109  0x0000006d (const ??? 0)  (usage 3)
iUserbutton97                        110  0x0000006e (const ??? 0)  (usage 3)
iUserbutton98                        111  0x0000006f (const ??? 0)  (usage 3)
iUserbutton99                        112  0x00000070 (const ??? 0)  (usage 3)
iUserimages0                         128  0x00000080 (const ??? 0)  (usage 3)
iUserimages1                          70  0x00000046 (const ??? 0)  (usage 3)
iUserimages10                        101  0x00000065 (const ??? 0)  (usage 3)
iUserimages11                        233  0x000000e9 (const ??? 0)  (usage 3)
iUserimages13                        169  0x000000a9 (const ??? 0)  (usage 3)
iUserimages2                         176  0x000000b0 (const ??? 0)  (usage 3)
iUserimages3                         140  0x0000008c (const ??? 0)  (usage 3)
iUserimages4                         146  0x00000092 (const ??? 0)  (usage 3)
iUserimages5                         150  0x00000096 (const ??? 0)  (usage 3)
iUserimages6                         178  0x000000b2 (const ??? 0)  (usage 3)
iUserimages7                         142  0x0000008e (const ??? 0)  (usage 3)
iUserimages8                         145  0x00000091 (const ??? 0)  (usage 3)
iUserimages9                         149  0x00000095 (const ??? 0)  (usage 3)
iVideo0                                9  0x00000009 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                           25  0x00000019 (const ??? 0)  (usage 3)
iWinbutton1                           26  0x0000001a (const ??? 0)  (usage 3)
iWinbutton2                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton3                           28  0x0000001c (const ??? 0)  (usage 3)
iWinbutton4                           29  0x0000001d (const ??? 0)  (usage 3)
iWinbutton5                           43  0x0000002b (const ??? 0)  (usage 3)
iWinbutton6                           44  0x0000002c (const ??? 0)  (usage 3)
iWinbutton7                           30  0x0000001e (const ??? 0)  (usage 3)
iWinbutton8                           31  0x0000001f (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 9863  0x00002687kKeyboardKeystrokes                 9863  0x00002687 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   13518  0x000034ce (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                               10481  0x000028f1 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               14640  0x00003930 (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              326  0x00000146 (const dword)  (usage 3)
nObjects                             234  0x000000ea (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              54  0x00000036 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                          9461  0x000024f5o4Dbuttons                          9461  0x000024f5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAngularmeters                      9149  0x000023bdoAngularmeters                      9149  0x000023bd (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAniButtons                         9463  0x000024f7oAniButtons                         9463  0x000024f7 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       9465  0x000024f9oColorPickers                       9465  0x000024f9 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCoolgauges                         9151  0x000023bfoCoolgauges                         9151  0x000023bf (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCustomdigitss                      9153  0x000023c1oCustomdigitss                      9153  0x000023c1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oDipSwitchs                         9117  0x0000239doDipSwitchs                         9117  0x0000239d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              9155  0x000023c3oForms                              9155  0x000023c3 (mem) word[44] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 15)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                             9243  0x0000241boGauges                             9243  0x0000241b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGSliders                           9125  0x000023a5oGSliders                           9125  0x000023a5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oImages                             9245  0x0000241doImages                             9245  0x0000241d (mem) word[2] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKeyboards                          9249  0x00002421oKeyboards                          9249  0x00002421 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKnobs                              9119  0x0000239foKnobs                              9119  0x0000239f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLedDigitsn                         9867  0x0000268boLedDigitsn                         9867  0x0000268b (mem) word[15] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
oLeddigitss                         9253  0x00002425oLeddigitss                         9253  0x00002425 (mem) word[4] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
oLeds                               9251  0x00002423oLeds                               9251  0x00002423 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             9261  0x0000242doMeters                             9261  0x0000242d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             220  0x000000dc (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                          9459  0x000024f3oPinInputs                          9459  0x000024f3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oPinOutputs                         9775  0x0000262foPinOutputs                         9775  0x0000262f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      9121  0x000023a1oRockerSwitchs                      9121  0x000023a1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oRotarySwitchs                      9123  0x000023a3oRotarySwitchs                      9123  0x000023a3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oScopes                             9425  0x000024d1oScopes                             9425  0x000024d1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
oSoundss                            9773  0x0000262doSoundss                            9773  0x0000262d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oSpectrums                          9423  0x000024cfoSpectrums                          9423  0x000024cf (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStaticTexts                        9381  0x000024a5oStaticTexts                        9381  0x000024a5 (mem) word[21] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStringss                           9263  0x0000242foStringss                           9263  0x0000242f (mem) word[55] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 84)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 423)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              9427  0x000024d3oTanks                              9427  0x000024d3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oThermometers                       9373  0x0000249doThermometers                       9373  0x0000249d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTimers                             9771  0x0000262boTimers                             9771  0x0000262b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTrackbars                          9127  0x000023a7oTrackbars                          9127  0x000023a7 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserButtons                        9467  0x000024fboUserButtons                        9467  0x000024fb (mem) word[152] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
oUserImagess                        9429  0x000024d5oUserImagess                        9429  0x000024d5 (mem) word[15] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserleds                           9375  0x0000249foUserleds                           9375  0x0000249f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             544  0x00000220 (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                             9377  0x000024a1oVideos                             9377  0x000024a1 (mem) word[2] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                         9129  0x000023a9oWinButtons                         9129  0x000023a9 (mem) word[10] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          300  0x0000012c (mem) word (global)  (usage 18)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       14675  0x00003953 (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         14387  0x00003833 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                   9865  0x00002689rKeyboardRoutines                   9865  0x00002689 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         14573  0x000038ed (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           14656  0x00003940 (User func) args[1] r=0  (usage 15)
seroutOcs                          14623  0x0000391f (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           7  0x00000007 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      2560  0x00000a00 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                         14  0x0000000e (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    11776  0x00002e00 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         33  0x00000021 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         14  0x0000000e (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                          3  0x00000003 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                    23040  0x00005a00 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                         23  0x00000017 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                         24  0x00000018 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                     6656  0x00001a00 (const dword)  (usage 3)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings17Count                         1  0x00000001 (const dword)  (not used)
Strings17Size                         56  0x00000038 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                    18432  0x00004800 (const dword)  (usage 3)
Strings18Count                         1  0x00000001 (const dword)  (not used)
Strings18Size                         39  0x00000027 (const dword)  (usage 3)
Strings18StartH                        0  0x00000000 (const dword)  (usage 3)
Strings18StartL                    18944  0x00004a00 (const dword)  (usage 3)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                         43  0x0000002b (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                    19456  0x00004c00 (const dword)  (usage 3)
Strings1Count                          1  0x00000001 (const dword)  (not used)
Strings1Size                          25  0x00000019 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                         0  0x00000000 (const dword)  (usage 3)
Strings20Size                          0  0x00000000 (const dword)  (not used)
Strings20StartH                        0  0x00000000 (const dword)  (not used)
Strings20StartL                        0  0x00000000 (const dword)  (not used)
Strings21Size                          0  0x00000000 (const dword)  (not used)
Strings21StartH                        0  0x00000000 (const dword)  (not used)
Strings21StartL                        0  0x00000000 (const dword)  (not used)
Strings22Count                         1  0x00000001 (const dword)  (not used)
Strings22Size                         20  0x00000014 (const dword)  (usage 3)
Strings22StartH                        0  0x00000000 (const dword)  (usage 3)
Strings22StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings23Size                          0  0x00000000 (const dword)  (not used)
Strings23StartH                        0  0x00000000 (const dword)  (not used)
Strings23StartL                        0  0x00000000 (const dword)  (not used)
Strings24Count                         1  0x00000001 (const dword)  (not used)
Strings24Size                         26  0x0000001a (const dword)  (usage 3)
Strings24StartH                        0  0x00000000 (const dword)  (usage 3)
Strings24StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings25Count                         1  0x00000001 (const dword)  (not used)
Strings25Size                         10  0x0000000a (const dword)  (usage 3)
Strings25StartH                        0  0x00000000 (const dword)  (usage 3)
Strings25StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings26Count                         1  0x00000001 (const dword)  (not used)
Strings26Size                         10  0x0000000a (const dword)  (usage 3)
Strings26StartH                        0  0x00000000 (const dword)  (usage 3)
Strings26StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings27Count                         1  0x00000001 (const dword)  (not used)
Strings27Size                         11  0x0000000b (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings28Count                         1  0x00000001 (const dword)  (not used)
Strings28Size                         40  0x00000028 (const dword)  (usage 3)
Strings28StartH                        0  0x00000000 (const dword)  (usage 3)
Strings28StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                         64  0x00000040 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    19968  0x00004e00 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      2048  0x00000800 (const dword)  (usage 3)
Strings30Count                         1  0x00000001 (const dword)  (not used)
Strings30Size                         42  0x0000002a (const dword)  (usage 3)
Strings30StartH                        0  0x00000000 (const dword)  (usage 3)
Strings30StartL                    20480  0x00005000 (const dword)  (usage 3)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          7  0x00000007 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    20992  0x00005200 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                         19  0x00000013 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    21504  0x00005400 (const dword)  (usage 3)
Strings33Count                         0  0x00000000 (const dword)  (not used)
Strings33Size                          1  0x00000001 (const dword)  (usage 3)
Strings33StartH                        0  0x00000000 (const dword)  (usage 3)
Strings33StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings34Count                         0  0x00000000 (const dword)  (not used)
Strings34Size                          1  0x00000001 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     3584  0x00000e00 (const dword)  (usage 3)
Strings35Count                         1  0x00000001 (const dword)  (not used)
Strings35Size                         49  0x00000031 (const dword)  (usage 3)
Strings35StartH                        0  0x00000000 (const dword)  (usage 3)
Strings35StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings36Count                         0  0x00000000 (const dword)  (not used)
Strings36Size                          1  0x00000001 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings37Count                         0  0x00000000 (const dword)  (not used)
Strings37Size                          1  0x00000001 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings38Count                         0  0x00000000 (const dword)  (not used)
Strings38Size                          1  0x00000001 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings3Count                          1  0x00000001 (const dword)  (not used)
Strings3Size                          18  0x00000012 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                       512  0x00000200 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                          7  0x00000007 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                    14336  0x00003800 (const dword)  (usage 3)
Strings41Count                         1  0x00000001 (const dword)  (not used)
Strings41Size                          7  0x00000007 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                    14848  0x00003a00 (const dword)  (usage 3)
Strings42Count                         1  0x00000001 (const dword)  (not used)
Strings42Size                          7  0x00000007 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                    15360  0x00003c00 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings46Count                         0  0x00000000 (const dword)  (not used)
Strings46Size                          1  0x00000001 (const dword)  (usage 3)
Strings46StartH                        0  0x00000000 (const dword)  (usage 3)
Strings46StartL                    23552  0x00005c00 (const dword)  (usage 3)
Strings47Count                         1  0x00000001 (const dword)  (not used)
Strings47Size                          3  0x00000003 (const dword)  (usage 3)
Strings47StartH                        0  0x00000000 (const dword)  (usage 3)
Strings47StartL                    24064  0x00005e00 (const dword)  (usage 3)
Strings48Count                         0  0x00000000 (const dword)  (not used)
Strings48Size                          1  0x00000001 (const dword)  (usage 3)
Strings48StartH                        0  0x00000000 (const dword)  (usage 3)
Strings48StartL                    24576  0x00006000 (const dword)  (usage 3)
Strings49Count                         1  0x00000001 (const dword)  (not used)
Strings49Size                         17  0x00000011 (const dword)  (usage 3)
Strings49StartH                        0  0x00000000 (const dword)  (usage 3)
Strings49StartL                    22016  0x00005600 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings50Count                         0  0x00000000 (const dword)  (not used)
Strings50Size                          1  0x00000001 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    22528  0x00005800 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    17408  0x00004400 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    17920  0x00004600 (const dword)  (usage 3)
Strings53Count                         1  0x00000001 (const dword)  (not used)
Strings53Size                        100  0x00000064 (const dword)  (usage 3)
Strings53StartH                        0  0x00000000 (const dword)  (usage 3)
Strings53StartL                    25088  0x00006200 (const dword)  (usage 3)
Strings5Size                           0  0x00000000 (const dword)  (not used)
Strings5StartH                         0  0x00000000 (const dword)  (not used)
Strings5StartL                         0  0x00000000 (const dword)  (not used)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          31  0x0000001f (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                     12288  0x00003000 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                     12800  0x00003200 (const dword)  (usage 3)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      3072  0x00000c00 (const dword)  (usage 3)
stringsCV                            110  0x0000006e (mem) word[54] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           296  0x00000128 (mem) word (global)  (usage 24)
TouchXpos                            290  0x00000122 (mem) word (global)  (usage 12)
TouchYpos                            292  0x00000124 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     13832  0x00003608 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 465)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 45)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      12541  0x000030fd (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS    2803  0x00000af3 (const ??? 0)  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 147)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        14032  0x000036d0 (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
