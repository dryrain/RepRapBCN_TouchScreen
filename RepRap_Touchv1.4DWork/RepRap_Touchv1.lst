file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318        
003998  004319  //------------------------------------------------------------------------------
003999  004320  // FILEIO Error Code Constants
004000  004321  //------------------------------------------------------------------------------
004001  004322  #CONST
004002  004348  #END
004003  004349        
004004  004350  //------------------------------------------------------------------------------
004005  004351  // DISK struct offsets
004006  004352  //------------------------------------------------------------------------------
004007  004353  #CONST
004008  004370  #END
004009  004371        
004010  004372  //------------------------------------------------------------------------------
004011  004373  // FILE struct offsets
004012  004374  //------------------------------------------------------------------------------
004013  004375  #CONST
004014  004394  #END
004015  004395        
004016  004396        
004017  004397  //------------------------------------------------------------------//
004018  004398  //        Sound Class Services
004019  004399  //------------------------------------------------------------------//
004020  004400        
004021  004401  func snd_Volume("var"), 0;
004022  004402  // Syntax: snd_Volume("var");
004023  004403  // Usage : snd_Volume(30);
004024  004404  // Notes : set sound playback volume.  Var must
004025  004405  //       : be in the range from 8 (min volume)
004026  004406  //       : to 127 (max volume). If var is less
004027  004407  //       : than 8 volume is set to 8, and if
004028  004408  //       : var > 127 it is set to 127.
004029  004409        
004030  004410  func snd_Pitch("pitch"), 1;
004031  004411  // func snd_Pitch("freq"), 1;
004032  004412  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004033  004413  // Notes : sets the samples playback rate to a different frequency
004034  004414  //       : The minimum value is 4khz
004035  004415  //       : Setting the pitch to zero restores the original sample rate
004036  004416  //       : Return value is the samples original sample rate.
004037  004417        
004038  004418  func snd_BufSize("var"), 0;
004039  004419  // Syntax: snd_BufSize("var");
004040  004420  // Usage : snd_BufSize(2);
004041  004421  // Notes : specify the a memory chunk size for the wavefile buffer.
004042  004422  //       : default size 1024 bytes.
004043  004423  //       : 0 = 1024 bytes (default)
004044  004424  //       : 1 = 2048 bytes
004045  004425  //       : 2 = 4096 bytes
004046  004426  //       : 3 = 8192 bytes
004047  004427        
004048  004428  func snd_Stop(), 0;
004049  004429  // Syntax: snd_Stop();
004050  004430  // Usage : snd_Stop();
004051  004431  // Notes : stop any sound that is playing, releasing
004052  004432  //       : buffers and closes any open wav file.
004053  004433        
004054  004434  func snd_Pause(), 0;
004055  004435  // Syntax: snd_Pause();
004056  004436  // Usage : snd_Pause();
004057  004437  // Notes : pauses any sound that is playing, does nothing
004058  004438  //       : until sound is resumed with snd_Continue().
004059  004439  //       : The sample cam be terminated with snd_Stop.
004060  004440  //       : buffers and closes any open wav file.
004061  004441        
004062  004442  func snd_Continue(), 0;
004063  004443  // Syntax: snd_Continue();
004064  004444  // Usage : snd_Continue();
004065  004445  // Notes : resume any sound that is paused by snd_Pause.
004066  004446        
004067  004447  func snd_Playing(), 1;
004068  004448  // Syntax: snd_Playing();
004069  004449  // Usage : r := snd_Playing();
004070  004450  // Notes : returns 0 if sound has finished playing,
004071  004451  //       : else return number of 512 byte blocks to go.
004072  004452        
004073  004453  func snd_Freq("Freq", "Duration"), 1;
004074  004454  // Syntax: snd_Freq("Freq", "Duration");
004075  004455  // Usage : r := snd_Freq(1000, 2000);
004076  004456  // Notes : Returns 0 if note cannot be played because a wav file is playing
004077  004457  //       : else return True.
004078  004458  //       : Minimum Freq is 20
004079  004459  //       : This will produce a pure Square wave and is designed for driving
004080  004460  //       : Piezo transducers which require this sort of drive. It can also be
004081  004461  //       : used to drive the amp on displays with audio.
004082  004462        
004083  004463        
004084  004464  func __reserved60(), 0; // do not remove
004085  004465  func __reserved61(), 0; // do not remove
004086  004466  func __reserved62(), 0; // do not remove
004087  004467        
004088  004468  //=========================================================================================================
004089  004469  // String functions
004090  004470  //=========================================================================================================
004091  004471        
004092  004472  func str_Ptr("&var"), 1;
004093  004473  // Syntax: str_Ptr(&var);
004094  004474  // Usage : p := str_Ptr(&var);
004095  004475  // Notes : return a byte pointer to a word region
004096  004476        
004097  004477  func str_GetD("&ptr", "&var"), 1;
004098  004478  // Syntax: str_GetD(&ptr, &var);
004099  004479  // Usage : ok := str_GetD(&ptr, &var);
004100  004480  // Notes : convert number in a string to DWORD ( myvar[2] )
004101  004481  //       : returns true if function succeeds, advancing ptr
004102  004482        
004103  004483  func str_GetW("&ptr", "&var"), 1;
004104  004484  // Syntax: str_GetW(&ptr, &var);
004105  004485  // Usage : ok := str_GetW(&ptr, &var);
004106  004486  // Notes : convert number in a string to WORD ( myvar )
004107  004487  //       : returns true if function succeeds, advancing ptr
004108  004488        
004109  004489  func str_GetHexW("&ptr", "&var"), 1;
004110  004490  // Syntax: str_GetHexW(&ptr, &var);
004111  004491  // Usage : ok := str_GetHexW(&ptr, &var);
004112  004492  // Notes : convert HEX number in a string to WORD ( myvar )
004113  004493  //       : returns true if function succeeds, advancing ptr
004114  004494        
004115  004495  func str_GetC("&ptr", "&var"), 1;
004116  004496  // Syntax: str_GetC(&ptr, &var);
004117  004497  // Usage : ok := str_GetC(&ptr, &var);
004118  004498  // Notes : get a valid ascii char in a string to WORD ( myvar )
004119  004499  //       : returns true if function succeeds, advancing ptr
004120  004500        
004121  004501  func str_GetByte("ptr"), 1;
004122  004502  // Syntax: str_GetByte(ptr);
004123  004503  // Usage : myvar := str_GetByte(ptr);
004124  004504  // Notes : get a byte to myvar
004125  004505  //       : returns value
004126  004506        
004127  004507  func str_GetWord("ptr"), 1;
004128  004508  // Syntax: GetWord(ptr);
004129  004509  // Usage : GetWord(ptr);
004130  004510  // Notes : get a word to myvar
004131  004511  //       : returns value
004132  004512        
004133  004513  func str_PutByte("ptr","val"), 0;
004134  004514  // Syntax: str_PutByte(ptr);
004135  004515  // Usage : myvar := str_PutByte(ptr);
004136  004516  // Notes : put a byte at ptr
004137  004517  //       : returns value
004138  004518        
004139  004519  func str_PutWord("ptr","val"), 0;
004140  004520  // Syntax: str_PutWord("ptr","val");
004141  004521  // Usage : str_PutWord(p,100);
004142  004522  // Notes : put word 100 at current pointer location
004143  004523  //       : returns value
004144  004524        
004145  004525  func str_Match("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Match(&ptr, *str);
004147  004527  // Usage : r := str_Match(&p, "hello");
004148  004528  // Notes : Case sensitive match
004149  004529  //       : returns true if function succeded, andvancing pointer to position past
004150  004530  //       : the matched item. Note that any whitespace characters are skipped
004151  004531  //       : in the source string prior to the test.
004152  004532        
004153  004533  func str_MatchI("&ptr", "*str"), 1;
004154  004534  // Syntax: str_MatchI(&ptr, *str);
004155  004535  // Usage : r := str_MatchI(&p, "hello");
004156  004536  // Notes : Case insensitive match
004157  004537  //       : returns true if function succeded, andvancing pointer to position past
004158  004538  //       : the matched item. Note that any whitespace characters are skipped
004159  004539  //       : in the source string prior to the test.
004160  004540        
004161  004541  func str_Find("&ptr", "*str"), 1;
004162  004542  // Syntax: str_Find(&ptr, *str);
004163  004543  // Usage : n := str_Find(&p, "hello");
004164  004544  // Notes : given the address of a pointer to a source string as the
004165  004545  //       : first argument, and a pointer to a test string as the second
004166  004546  //       : argument, attempt to find the position of the matching string
004167  004547  //       : in the source string. The test is performed with case sensitivity.
004168  004548  //       : return 0 if not found, else returns the address of the first
004169  004549  //       : character of the match. NB:- The source pointer is not altered.
004170  004550        
004171  004551  func str_FindI("&ptr", "*str"), 1;
004172  004552  // Syntax: str_Find(&ptr, *str);
004173  004553  // Usage : n := str_Find(&p, "hello");
004174  004554  // Notes : given the address of a pointer to a source string as the
004175  004555  //       : first argument, and a pointer to a test string as the second
004176  004556  //       : argument, attempt to find the position of the matching string
004177  004557  //       : in the source string. The test is performed with no case
004178  004558  //       : sensitivity, eg upper and lower case chars are accepted.
004179  004559  //       : return 0 if not found, else returns the address of the first
004180  004560  //       : character of the match. NB:- The source pointer is not altered.
004181  004561        
004182  004562  func str_Length("ptr"), 1;
004183  004563  // Syntax: str_Length(ptr);
004184  004564  // Usage : len := str_Ptr(mystring);
004185  004565  // Notes : return the length of a byte aligned string excluding terminator
004186  004566        
004187  004567  func str_Printf("&ptr", "*format"), 1;
004188  004568  // Syntax: str_Printf("&ptr", "*format");
004189  004569  // Usage : r := str_Printf(&p, "hello");
004190  004570  // Notes : refer to documentation
004191  004571  //       :
004192  004572        
004193  004573  func str_Cat("dest","src"), 1;
004194  004574  // Syntax: str_Append("&dest","&src");
004195  004575  // Usage : str_Append(&buf,"Hello");
004196  004576  // Notes : Appends a copy of the source string to the destination string.
004197  004577  //       : The terminating null character in destination is overwritten by
004198  004578  //       : the first character of source, and a new null-character is appended
004199  004579  //       : at the end of the new string formed by the concatenation of both in destination.
004200  004580  //       : returns destination.
004201  004581        
004202  004582  func str_CatN("dest","src","count"), 1;
004203  004583  // Syntax: str_Append("&dest","&src","count");
004204  004584  // Usage : str_Append(&buf,"Monday",3);
004205  004585  // Notes : Appends a copy of the source string to the destination string.
004206  004586  //       : The number of characters copied is limited by "count".
004207  004587  //       : The terminating null character in destination is overwritten by
004208  004588  //       : the first character of source, and a new null-character is appended
004209  004589  //       : at the end of the new string formed by the concatenation of both in destination.
004210  004590  //       : returns destination.
004211  004591        
004212  004592        
004213  004593  func str_ByteMove("src", "dest", "count"), 1;
004214  004594  // Syntax   : str_ByteMove(src, dest, bytecount);
004215  004595  // Input    : STR *source points to byte aligned source.
004216  004596  //          : STR *dest   points to byte aligned destination.
004217  004597  //          : VAR count   number of bytes to transfer.
004218  004598  // Usage    : nextpos := str_ByteMove(s, d, 100);
004219  004599  // Notes    : copy bytes from "src" to "dest", stopping only
004220  004600  //          : when "count" is exhausted.
004221  004601  //          : No terminator is appended, it is purely a
004222  004602  //          : byte copy, and any zeroes encountered will
004223  004603  //          : also be copied.
004224  004604  // Returns  : returns a pointer to the end of the destination
004225  004605  //          : (which is "dest" + "count")
004226  004606        
004227  004607        
004228  004608  func str_Copy("dest", "src"), 1;
004229  004609  // Syntax   : str_Copy(dest, src);
004230  004610  // Input    : STR *dest   points to byte aligned destination.
004231  004611  //          : STR *source points to byte aligned source.
004232  004612  // Usage    : nextplace := str_Copy(d, s);
004233  004613  // Notes    : copy a string from "src" to "dest", stopping only
004234  004614  //          : when the end of source string "src" is encountered
004235  004615  //          : (0x00 terminator).
004236  004616  //          : The terminator is always appended, even if "src" is
004237  004617  //          : an empty string.
004238  004618  // Returns  : returns a pointer to the 0x00 string terminator at
004239  004619  //          : end of "dest" (which is "dest" + str_Length(src); )
004240  004620        
004241  004621        
004242  004622  func str_CopyN("dest", "src", "count"), 1;
004243  004623  // Syntax   : str_CopyN(dest, src, bytecount);
004244  004624  // Input    : STR *dest   points to byte aligned destination.
004245  004625  //          : STR *source points to byte aligned source.
004246  004626  //          : VAR count   max number of chars to copy.
004247  004627  // Usage    : nextplace := str_CopyN(d, s, 100);
004248  004628  // Notes    : copy a string from "src" to "dest", stopping only
004249  004629  //          : when "count" is exhausted, or end of source
004250  004630  //          : string "str" is encountered (0x00 string terminator).
004251  004631  //          : The terminator is always appended, even if
004252  004632  //          : "count" is zero, or "src" is a null string.
004253  004633  // Returns  : returns a pointer to the 0x00 string terminator
004254  004634  //          : (which is "dest" + whatever was copied)
004255  004635        
004256  004636        
004257  004637  func __reserved63(), 0; // do not remove
004258  004638  func __reserved64(), 0; // do not remove
004259  004639  func __reserved65(), 0; // do not remove
004260  004640  func __reserved66(), 0; // do not remove
004261  004641        
004262  004642  //=========================================================================================================
004263  004643  // FLASH memory functions
004264  004644  //=========================================================================================================
004265  004645  func flash_GetByte("bank", "ptr"), 1;
004266  004646  // Syntax   : flash_GetByte(bank, ptr);
004267  004647  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004268  004648  // Notes    : Reads a single byte from any flash location.
004269  004649  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004270  004650  //          : which is the header signature for a valid program.
004271  004651  // Returns  : the byte value from the location
004272  004652        
004273  004653        
004274  004654  func flash_GetWord("bank", "ptr"), 1;
004275  004655  // Syntax   : flash_GetWord(bank, ptr);
004276  004656  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004277  004657  // Notes    : Reads a single word from any flash location.
004278  004658  //          : The pointer is byte aligned.
004279  004659  //          : If the bank is read protected, only the first word can be read
004280  004660  //          : which is the header signature for a valid program (0xAA55).
004281  004661  // Returns  : the byte value from the location
004282  004662        
004283  004663        
004284  004664  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004285  004665  // Syntax   : flash_Copy(bank, ptr);
004286  004666  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004287  004667  // Notes    : Copies bytes from any flash locations to a user buffer.
004288  004668  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004289  004669  //          : If the bank is read protected, 0 bytes will be read
004290  004670  //          : which is the header signature for a valid program (0xAA55).
004291  004671  // Returns  : the count of bytes transferred.
004292  004672        
004293  004673        
004294  004674  func flash_Run("bank"), 1;
004295  004675  // Syntax    : flash_Run(bankx);
004296  004676  // Usage     : res := flash_Run(FLASHBANK_5);
004297  004677  // Notes     : Restarts the processor, running code from the required
004298  004678  //           : flash bank. bank may be a variable, or one of the
004299  004679  //           : pre-defined constants:-
004300  004680  //           :    FLASHBANK_0                 //0x00
004301  004681  //           :    FLASHBANK_1                 //0x01
004302  004682  //           :    FLASHBANK_2                 //0x02
004303  004683  //           :    FLASHBANK_3                 //0x03
004304  004684  //           :    FLASHBANK_4                 //0x04
004305  004685  //           :    FLASHBANK_5                 //0x05
004306  004686  // returns    : This function should net return as it restarts
004307  004687  //        : the processor and jumps to the required bank,
004308  004688  //        : If it does return, -1 indicates incorrect/invalid
004309  004689  //        : bank number, and -2 indicates no valid program
004310  004690  //        : in the selected bank.
004311  004691        
004312  004692  func flash_Bank(), 1;
004313  004693  // Syntax   : flash_Bank();
004314  004694  // Usage    : myvar := flash_Bank();
004315  004695  // Notes    : Identifies which flash bank the code is running from.
004316  004696  // Returns  : The FLASH bank that code is currently running from, 0-5.
004317  004697        
004318  004698        
004319  004699  func flash_EraseBank("bank", "confirmation"), 1;
004320  004700  // Syntax   : flash_EraseBank(bank, confirmation);
004321  004701  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004322  004702  // Notes    : This function should be used with extreme caution.
004323  004703  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004324  004704  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004325  004705  //          : a protected bank will not be erased, and function will return with 0
004326  004706  //          : If the destination bank is the same as the execution bank, the processor will reset
004327  004707  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004328  004708  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004329  004709  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004330  004710  // Returns  : returns true if the function succeeded
004331  004711  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004332  004712        
004333  004713  func flash_LoadFile("bank", "filename"), 1;
004334  004714  // Syntax   : flash_LoadFile(bank, ptr);
004335  004715  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004336  004716  // Notes    : Copies a file from uSD to the required flashbank.
004337  004717  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004338  004718  // Returns  : returns true if the function succeeded.
004339  004719        
004340  004720        
004341  004721  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004342  004722  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004343  004723  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004344  004724  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004345  004725  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004346  004726  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004347  004727  // Returns  : returns true if the function succeeded.
004348  004728        
004349  004729        
004350  004730  func flash_putstr("bank", "ptr"), 1;
004351  004731  // Syntax   : flash_putstr(bank, ptr);
004352  004732  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004353  004733  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004354  004734  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004355  004735  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004356  004736        
004357  004737  func flash_Blit16("bank", "offset", "count"), 1;
004358  004738  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004359  004739  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004360  004740  // Notes    : Blit an image to a GRAM window from FLASH storage.
004361  004741  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004362  004742  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004363  004743        
004364  004744  func flash_Blit8("bank", "offset", "count"), 1;
004365  004745  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004366  004746  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004367  004747  // Notes    : Blit an image to a GRAM window from FLASH storage.
004368  004748  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004369  004749  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004370  004750        
004371  004751  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004372  004752  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004373  004753  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004374  004754  // Notes    : Blit an image to a GRAM window from FLASH storage.
004375  004755  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004376  004756  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004377  004757        
004378  004758  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004379  004759  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004380  004760  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004381  004761  // Notes    : Blit an image to a GRAM window from FLASH storage.
004382  004762  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004383  004763  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004384  004764        
004385  004765  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004386  004766  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004387  004767  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004388  004768  // Notes    : Blit an image to a GRAM window from FLASH storage.
004389  004769  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004390  004770  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004391  004771        
004392  004772  func flash_Exec("bank", "arglistptr"), 1;
004393  004773  // Syntax: res := flash_Exec("bank","arglistptr");
004394  004774  // Usage : res := flash_Exec("bank","arglistptr");
004395  004775  // Notes : returns like a function, current program
004396  004776  //       : calling program is kept active and control returns to it.
004397  004777  //       : If arglistptr is 0, no arguments are passed, else
004398  004778  //       : arglist points to an array, the first element being
004399  004779  //       : the number of elements in the array.
004400  004780  //       : func 'main' in the called bank accepts the arguments.
004401  004781  // WARNING Not currently implemented!
004402  004782        
004403  004783        
004404  004784  func __reserved68(), 0; // do not remove
004405  004785  func __reserved69(), 0; // do not remove
004406  004786  func __reserved70(), 0; // do not remove
004407  004787        
004408  004788  //=========================================================================================================
004409  004789  // I/O and hardware functions
004410  004790  //=========================================================================================================
004411  004791        
004412  004792        
004413  004793        
004414  004794        
004415  004795  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004416  004796  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004417  004797  // Syntax: pin_Pulseout(pin, value);
004418  004798  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004419  004799  // Notes : only available on PA0 to PA9
004420  004800  //       : Invert the state of an output for "value" milliseconds.
004421  004801  //       : pulseout is non blocking, that is, code execution may continue while
004422  004802  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004423  004803  //       : If not already an output, pin is automatically made a push/pull output,
004424  004804  //       : and the last state of its output latch will determine pulse polarity.
004425  004805  //       : It's its open drain state is not altered if the pin was already an output.
004426  004806  //       : If pulseout is called while pulseout is still active, the pulse timer
004427  004807  //       : will simply be updated with the new "value" and the pulse will continue
004428  004808  //       : with the extended value.
004429  004809  //       : returns true if the pin number is legal (usually ignored)
004430  004810        
004431  004811        
004432  004812  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004433  004813  // Syntax: pin_Counter(pin, mode, userfunc);
004434  004814  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004435  004815  // Notes : only available on PA4 to PA9
004436  004816  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004437  004817  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004438  004818  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004439  004819  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004440  004820  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004441  004821  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004442  004822  //       : The pin may be configured as an input or output, the function behaves the same.
004443  004823  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004444  004824  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004445  004825  //       : "mode" has the following effect:-
004446  004826  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004447  004827  //       : mode COUNT_RISE(1) = increment on every rising edge
004448  004828  //       : mode COUNT_FALL(2) = increment on every falling edge
004449  004829  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004450  004830        
004451  004831  //------------------------------------------------------------------//
004452  004832  // pin counter mode constants                                       //
004453  004833  //------------------------------------------------------------------//
004454  004834  #CONST
004455  004839  #END
004456  004840        
004457  004841  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004458  004842  // Syntax: Qencoder1(pinA, pinB, mode);
004459  004843  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004460  004844  // Notes : not available on pins PA14 and PA15
004461  004845  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004462  004846  //       : or written to at any time with peekW and pokeW using the following constants:-
004463  004847  //       : It is necessary to configure the pins first, depending on your requirements, eg
004464  004848  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004465  004849  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004466  004850  //       : Returns true if the pin numbers are legal (usually ignored)
004467  004851  //    QEN1_COUNTER_LO
004468  004852  //    QEN1_COUNTER_HI
004469  004853  //    QEN1_DELTA This is reset to 0 when read
004470  004854        
004471  004855  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004472  004856  // Syntax: Qencoder2(pinA, pinB, mode);
004473  004857  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004474  004858  // Notes : not available on pins PA14 and PA15
004475  004859  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004476  004860  //       : or written to at any time with peekW and pokeW using the following constants:-
004477  004861  //       : It is necessary to configure the pins first, depending on your requirements, eg
004478  004862  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004479  004863  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004480  004864  //       : Returns true if the pin numbers are legal (usually ignored)
004481  004865  //    QEN2_COUNTER_LO
004482  004866  //    QEN2_COUNTER_HI
004483  004867  //    QEN2_DELTA This is reset to 0 when read
004484  004868        
004485  004869        
004486  004870  func Qencoder1Reset(), 0;
004487  004871  // Syntax: Qencoder1Reset();
004488  004872  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004489  004873  // Notes :
004490  004874  //    QEN1_COUNTER_LO is reset to zero
004491  004875  //    QEN1_COUNTER_HI is reset to zero
004492  004876  //    QEN1_DELTA is reset to zero
004493  004877        
004494  004878  func Qencoder2Reset(), 0;
004495  004879  // Syntax: Qencoder2Reset();
004496  004880  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004497  004881  // Notes :
004498  004882  //    QEN2_COUNTER_LO is reset to zero
004499  004883  //    QEN2_COUNTER_HI is reset to zero
004500  004884  //    QEN2_DELTA is reset to zero
004501  004885        
004502  004886        
004503  004887  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004504  004888  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004505  004889  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004506  004890  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004507  004891  //       : Invert the state of an output at a "freq" freuency "count" times.
004508  004892  //       : PulseoutCount is non blocking, that is, code execution may continue while
004509  004893  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004510  004894  //       : If not already an output, pin is automatically made a push/pull output,
004511  004895  //       : and the last state of its output latch will determine pulse polarity.
004512  004896  //       : It's its open drain state is not altered if the pin was already an output.
004513  004897  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004514  004898  //       : will simply have the new "value" added to it.
004515  004899  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004516  004900  //       : returns true if the pin number is legal (usually ignored)
004517  004901        
004518  004902  func __reserved72(), 0; // do not remove
004519  004903        
004520  004904  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004521  004905  // Syntax: pwm_Init(pin, value);
004522  004906  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004523  004907  // Notes : only available on PA4 to PA9
004524  004908  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004525  004909  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004526  004910  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004527  004911  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004528  004912  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004529  004913  //       :                    : Repetition rate ~50hz or 20ms
004530  004914  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004531  004915  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004532  004916  //       : pwm_Init is non blocking and the pwm continues until turn off
004533  004917  //       : Returns true if the pin number is legal (usually ignored)
004534  004918        
004535  004919  //------------------------------------------------------------------------------
004536  004920  // PWM Constants
004537  004921  //------------------------------------------------------------------------------
004538  004922  #CONST
004539  004927  #END
004540  004928        
004541  004929  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004542  004930  // Syntax   : OW_Reset(PA0);
004543  004931  // Usage    : OW_Reset(PA0);
004544  004932  // Notes    : Only available on PA0 to PA13
004545  004933  //          : Resets  ONEWIRE device
004546  004934  //          : Returns the status, 0 = ACK.
004547  004935  //          :
004548  004936        
004549  004937  func OW_Read("pin"), 1;                              // read data from 1wire bus
004550  004938  // Syntax   : OW_Read(PA0);
004551  004939  // Usage    : arg1 := OW_Read(PA0);
004552  004940  // Notes    : Only available on PA0 to PA13
004553  004941  //          : Reads value of the ONEWIRE pin
004554  004942  //          : that was previously selected for ONEWIRE comms.
004555  004943  //          :
004556  004944  //          : pin = 0 : the next byte from the ONEWIRE bus
004557  004945        
004558  004946  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004559  004947  // Syntax   : OW_Read9(PA0);
004560  004948  // Usage    : OW_Read9(PA0);
004561  004949  // Notes    : Only available on PA0 to PA13
004562  004950  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004563  004951  //          : that was previously selected for ONEWIRE comms.
004564  004952  //          :
004565  004953  //          : read the 9 bits from the ONEWIRE bus
004566  004954        
004567  004955  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004568  004956  // Syntax   : OW_Write(PA0, arg);
004569  004957  // Usage    : OW_Write(PA0, arg);
004570  004958  // Notes    : Only available on PA0 to PA13
004571  004959  //          : Sends ONEWIRE data on the appropriate
004572  004960  //          : pin that was previously  selected as ONEWIRE comms.
004573  004961  //          :
004574  004962  //          : write arg to the ONEWIRE bus
004575  004963        
004576  004964  func __reserved77(), 0; // do not remove
004577  004965  func __reserved78(), 0; // do not remove
004578  004966        
004579  004967  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004580  004968  // Syntax: sys_GetDateVar(&year, &month, &day);
004581  004969  // Usage : sys_GetDateVar(&year, &month, &day);
004582  004970  // Notes : Retrieves the date values into variables
004583  004971        
004584  004972  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004585  004973  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004974  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004587  004975  // Notes : Retrieves the time values into variables
004588  004976        
004589  004977  func sys_PmmC(), 0;
004590  004978  // Syntax: sys_PmmC();
004591  004979  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004592  004980  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004593  004981  //       : Can be captured to a buffer using the to( function
004594  004982  //       : Returns nothing.
004595  004983        
004596  004984  func sys_Driver(), 0;
004597  004985  // Syntax: sys_Driver();
004598  004986  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004599  004987  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004600  004988  //       : Can be captured to a buffer using the to( function
004601  004989  //       : Returns nothing.
004602  004990        
004603  004991  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004604  004992  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004605  004993  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004606  004994  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004607  004995  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004608  004996  //       : elements in each buffer. This will need to be greater than "width" for negative
004609  004997  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004610  004998  //       : pass 0 as the address for any unused traces
004611  004999  //       : X position is incremented each point by "xstep" pixels.
004612  005000  //       : Y values are derived from a Y buffer "newy" (signed values).
004613  005001  //       : 2 buffers need to be supplied, "newy" contains new
004614  005002  //       : points to be drawn, "oldy" contains most recent set
004615  005003  //       : of points to be un-drawn. After the waveform is drawn,
004616  005004  //       : "newy" buffer is automatically copied to "oldy" buffer.
004617  005005        
004618  005006        
004619  005007  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004620  005008  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004621  005009  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004622  005010  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004623  005011  //       : and calls "COMPLETEfunction" when done.
004624  005012  //       : "rate" is samples in 100 of samples per second
004625  005013  //       : Any unused IOx pins should have their buffer addresses set to 0
004626  005014  //       : For performance reasons samples are taken in chunks of 32, thus if you
004627  005015  //       : request 33 samples there will be a delay of 31 samples before
004628  005016  //       : "COMPLETEfunction" is called
004629  005017  //       : If Touch is enabled this function should be called no more than once per
004630  005018  //       : millisecond, otherwise touch behaviour could be eratic.
004631  005019        
004632  005020        
004633  005021  func sys_ErrorMessage("msgnum"), 1;
004634  005022        
004635  005023  //==============================//
004636  005024  // NeoPixel specific functions  //
004637  005025  //==============================//
004638  005026        
004639  005027  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004640  005028  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004641  005029  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004642  005030  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004643  005031  //       : data        : Address of data to be sent
004644  005032  //       : size        : number of colour 'sets' to follow
004645  005033  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004646  005034  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004647  005035  //       : Repeat      : Number of times to repeat the colours between first and last
004648  005036  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004649  005037  //       : Returns true if the pin number is legal (usually ignored)
004650  005038  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004651  005039  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004652  005040        
004653  005041  // NeoPixel related constants
004654  005042  #CONST
004655  005046  #END
004656  005047        
004657  005048  func __reserved85(), 0; // do not remove
004658  005049  func __reserved86(), 0; // do not remove
004659  005050        
004660  005051  //==============================================//
004661  005052  // spi flash device specific functions          //
004662  005053  //==============================================//
004663  005054        
004664  005055  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004665  005056  // Syntax   : spiflash_SIG("spi#","enablepin");
004666  005057  // Usage    : var := spiflash_SIG(SPI1, PA0);
004667  005058  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004668  005059  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004669  005060  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004670  005061  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004671  005062  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004672  005063  //          : byte is ignored.
004673  005064        
004674  005065  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004675  005066  // Syntax   : spiflash_ID("spi#","enablepin");
004676  005067  // Usage    : var := spiflash_ID(SPI1, PA0);
004677  005068  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004678  005069  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004679  005070  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004680  005071  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004681  005072  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004682  005073  //          : contains capacity. Refer to the device data sheet for further information.
004683  005074        
004684  005075  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004685  005076  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004686  005077  // Usage    : spiflash_BulkErase(SPI1, PA0);
004687  005078  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004688  005079  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004689  005080  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004690  005081  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004691  005082  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004692  005083  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004693  005084        
004694  005085  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004695  005086  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004696  005087  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004697  005088  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004698  005089  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004699  005090  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004700  005091  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004701  005092  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004702  005093  //          : blockAddress The address of the 64k FLASH block to be erased.
004703  005094  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004704  005095  //          : can take up to 3 milliseconds.
004705  005096        
004706  005097  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004707  005098  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004708  005099  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004709  005100  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004710  005101        
004711  005102  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004712  005103  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004713  005104  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004714  005105  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004715  005106  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004716  005107  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004717  005108  //       : returns number of characters read
004718  005109  //       : if "dest" is zero, data is read direct to GRAM window
004719  005110  //       :
004720  005111        
004721  005112  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004722  005113  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004723  005114  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004724  005115  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004725  005116  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004726  005117  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004727  005118  //       : returns number of bytes written
004728  005119  //       :
004729  005120        
004730  005121  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004731  005122  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004732  005123  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004733  005124  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004734  005125  //       : The image is displayed at x,y (with respect to top left corner).
004735  005126        
004736  005127  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004737  005128  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004738  005129  // Usage : spiflash_PutC('x', SPI1, PA0);
004739  005130  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004740  005131  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004741  005132  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004742  005133        
004743  005134  func spiflash_GetC("spi#", "enablepin"), 1;
004744  005135  // Syntax: spiflash_GetC("spi#", "enablepin");
004745  005136  // Usage : mychar := fgetC(SPI1, PA0);
004746  005137  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004747  005138  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004748  005139  //       : by subsequent reads or writes.
004749  005140  //       : returns next char from file
004750  005141        
004751  005142  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004752  005143  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004753  005144  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004754  005145  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004755  005146  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004756  005147  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004757  005148        
004758  005149  func spiflash_GetW("spi#", "enablepin"), 1;
004759  005150  // Syntax: spiflash_GetW("spi#", "enablepin");
004760  005151  // Usage : myword := fgetW(SPI1, PA0);
004761  005152  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004762  005153  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004763  005154  //       : by subsequent reads or writes.
004764  005155  // Notes : returns next word in file
004765  005156        
004766  005157  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004767  005158  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004768  005159  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004769  005160  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004770  005161  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004771  005162  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004772  005163  //       : returns number of characters written
004773  005164  //       :
004774  005165        
004775  005166  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004776  005167  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004777  005168  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004778  005169  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004779  005170  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004780  005171  //       : by subsequent reads or writes.
004781  005172  //       : returns pointer to string or null if failed.
004782  005173  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004783  005174  //       : NB:- only reads up to "size-1" characters into "string"
004784  005175  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004785  005176  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004786  005177  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004787  005178  //       : C] It reaches the end of file
004788  005179  //       : D] A read error occurs.
004789  005180        
004790  005181  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004791  005182  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004792  005183  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004793  005184  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004794  005185  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004795  005186  //       : return a function pointer to the allocation.
004796  005187  //       : The function can then be invoked just like any other
004797  005188  //       : function would be called via a function pointer.
004798  005189  //       : Parameters may be passed to it in a conventional way.
004799  005190  //       : The function may be discarded at any time when no
004800  005191  //       : longer required, thus freeing its memory resources.
004801  005192  //       : The loaded function can be discarded with mem_Free(..)
004802  005193  //       : eg:
004803  005194  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004804  005195  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004805  005196  //       : then elsewhere in your program:-
004806  005197  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004807  005198  //       : if(res == QUIT_APPLICATION) goto exitApp;
004808  005199  //       : Later in your program, when popupWindow is no longer
004809  005200  //       : required for the application:-
004810  005201  //       : res := mem_Free(popupWindow);
004811  005202  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004812  005203  //       : The callers stack is shared by the loaded function,
004813  005204  //       : however any global variables in the loaded function
004814  005205  //       : are private to that function.
004815  005206  //
004816  005207        
004817  005208  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004818  005209  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004819  005210  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004820  005211  // Notes : current program releases any allocated memory but
004821  005212  //       : retains the stack and global memory.
004822  005213  //       : If arglistptr is 0, no arguments are passed, else
004823  005214  //       : arglist points to an array, the first element being
004824  005215  //       : the number of elements in the array.
004825  005216  //       : func 'main' in the called program accepts
004826  005217  //       : the arguments, if any. The arguments can only
004827  005218  //       : be passed by value, no pointers or references can be
004828  005219  //       : used as all memory is cleared before the file
004829  005220  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004830  005221  //       : for functions that can pass by reference.
004831  005222        
004832  005223  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004833  005224  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004834  005225  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004835  005226  // Notes : returns like a function, current program
004836  005227  //       : calling program is kept active and control returns to it.
004837  005228  //       : If arglistptr is 0, no arguments are passed, else
004838  005229  //       : arglist points to an array, the first element being
004839  005230  //       : the number of elements in the array.
004840  005231  //       : func 'main' in the called program accepts the arguments.
004841  005232  //       : This function is similar to spiflash_LoadFunction(...), however,
004842  005233  //       : the function argument list is passed by pointer, and
004843  005234  //       : the memory consumed by the function is released as
004844  005235  //       : soon as the function completes.
004845  005236        
004846  005237  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004847  005238  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004848  005239  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004849  005240  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004850  005241  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004851  005242  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004852  005243  //       : Returns NULL if function fails.
004853  005244  //       : Returns a handle (pointer to the memory allocation) to the
004854  005245  //       : image control list that has been created.
004855  005246        
004856  005247  // Notes : This function Calculates the size of a chunk of memory required for
004857  005248  //       : a image list and populates it from the image control file ("*.dat")
004858  005249  //       : therefore, when imagelist is no longer required, you must de-allocate
004859  005250  //       : the image list memory by using eg:- mem_Free(hImagelist);
004860  005251  //       : to restore the heap.
004861  005252  //       :
004862  005253        
004863  005254  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004864  005255  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004865  005256  // Usage : spiflash_PlayWAV(SPI1, PA0);
004866  005257  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004867  005258  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004868  005259  //       : or writes.
004869  005260  //       : This function automatically grabs a chunk
004870  005261  //       : of memory for a file buffer, and a wave
004871  005262  //       : buffer. The minimum memory requirement is
004872  005263  //       : about 580 bytes for the disk io service and
004873  005264  //       : a minimum wave buffer size of 1024. The size
004874  005265  //       : of the wave buffer allocation
004875  005266  //       : can be increased by the snd_BufSize function.
004876  005267  //       : The default size 1024 bytes.
004877  005268  //       : NB the memory is only required during the
004878  005269  //       : duration of play, and is automatically
004879  005270  //       : released while not in use.
004880  005271  //       : See the Sound Class services for other associated controls.
004881  005272  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004882  005273  //       : If errors occured, the folling is returned
004883  005274  //       : -7  : Insufficient memory available for WAV buffer and file
004884  005275  //       : -6  : cant play this rate
004885  005276  //       : -5  : no data chunk found in first rsector
004886  005277  //       : -4  : no format data
004887  005278  //       : -3  : no wave chunk signature
004888  005279  //       : -2  : bad wave file format
004889  005280  //       : -1  : file not found
004890  005281        
004891  005282  //==============================================//
004892  005283  // more com functions                           //
004893  005284  //==============================================//
004894  005285        
004895  005286  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004896  005287  // Syntax   : com1_TXblock("buf", "bufsize");
004897  005288  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004898  005289  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004899  005290  //          : if a transmit buffer is active and space is available this function will return almost
004900  005291  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004901  005292        
004902  005293  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004903  005294  // Syntax   : com1_RXblock("buf", "bufsize");
004904  005295  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004905  005296  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004906  005297  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004907  005298  //          : immediately otherwise it will block until until the required bytes are received.
004908  005299        
004909  005300  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004910  005301  // Syntax   : com_TXblock("buf", "bufsize");
004911  005302  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004912  005303  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004913  005304  //          : if a transmit buffer is active and space is available this function will return almost
004914  005305  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004915  005306        
004916  005307  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004917  005308  // Syntax   : com_RXblock("buf", "bufsize");
004918  005309  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004919  005310  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004920  005311  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004921  005312  //          : immediately otherwise it will block until until the required bytes are received.
004922  005313        
004923  005314  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004924  005315  // Syntax   : com_TXblock("buf", "bufsize");
004925  005316  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004926  005317  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004927  005318  //          : if a transmit buffer is active and space is available this function will return almost
004928  005319  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004929  005320        
004930  005321  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004931  005322  // Syntax   : com_RXblock("buf", "bufsize");
004932  005323  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004933  005324  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004934  005325  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004935  005326  //          : immediately otherwise it will block until until the required bytes are received.
004936  005327        
004937  005328  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004938  005329  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004939  005330  // Usage : disp_BlitPixelsFromCOM1();
004940  005331  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004941  005332  //       : display from the specified com port.
004942  005333        
004943  005334  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004944  005335  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004945  005336  // Usage : disp_BlitPixelsFromCOM2();
004946  005337  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004947  005338  //       : display from the specified com port.
004948  005339        
004949  005340  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004950  005341  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004951  005342  // Usage : disp_BlitPixelsFromCOM3();
004952  005343  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004953  005344  //       : display from the specified com port.
004954  005345        
004955  005346        
004956  005347  //==============================================//
004957  005348  // crc generation functions                     //
004958  005349  //==============================================//
004959  005350        
004960  005351  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004961  005352  // *Notes   : (if you calculate all of the incoming data
004962  005353  //          : INCLUDING the CRC, the result should be 0x00
004963  005354  //          : This is equivalent to simple addition of all bytes
004964  005355  //          : and returning the negated sum an 8 bit value.
004965  005356  //          : For the standard test string "123456789",
004966  005357  //          : crc_CSUM_8 will return 0x0023.
004967  005358        
004968  005359        
004969  005360  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004970  005361  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004971  005362  //          : (if you calculate all of the incoming data
004972  005363  //          : INCLUDING the CRC, the result should be 0x0000
004973  005364  //          : For the standard test string "123456789",
004974  005365  //          : crc_16 will return 0xBB3D.
004975  005366        
004976  005367        
004977  005368  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004978  005369  // *Notes   : (if you calculate all of the incoming data
004979  005370  //          : INCLUDING the CRC, the result should be 0x0000
004980  005371  //          : For the standard test string "123456789",
004981  005372  //          : crc_MODBUS will return 0x4B37.
004982  005373        
004983  005374        
004984  005375  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004985  005376  // *Notes   : (if you calculate all of the incoming data
004986  005377  //          : INCLUDING the CRC, the result should be 0x0000
004987  005378  //          : For the standard test string "123456789",
004988  005379  //          : crc_CCITT will return the following:-
004989  005380  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004990  005381  //          : seed = 0xFFFF, result = 0x29B1
004991  005382  //          : seed = 0x1D0F, result = 0xE5CC
004992  005383        
004993  005384        
004994  005385  //------------------------------------------------------------------//
004995  005386  // CONSTANTS
004996  005387  //------------------------------------------------------------------//
004997  005388        
004998  005389  #CONST
004999  005393  #END
005000  005394        
005001  005395  // timebase constants for timebase_init
005002  005396  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005003  005397  #CONST
005004  005408  #END
005005  005409        
005006  005410        
005007  005411  // generic constants
005008  005412  #CONST
005009  005420  #END
005010  005421        
005011  005422        
005012  005423        
005013  005424  //gfx_Get() related constants
005014  005425  #CONST
005015  005434  #END
005016  005435        
005017  005436        
005018  005437        
005019  005438        
005020  005439  #CONST
005021  005452  #END
005022  005453        
005023  005454        
005024  005455  #CONST
005025  005480  #END
005026  005481        
005027  005482        
005028  005483        
005029  005484        
005030  005485  // timer control  related constants
005031  005486  #CONST
005032  005495  #END
005033  005496        
005034  005497        
005035  005498        
005036  005499  //------------------------------------------------------------------------------
005037  005500  // system WORD variables accesible with peekW and pokeW or pointer access
005038  005501  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005039  005502  // can also be accessed with peekW and pokeW
005040  005503  //------------------------------------------------------------------------------
005041  005504        
005042  005505  #CONST
005043  005600  #END
005044  005601        
005045  005602  #CONST
005046  005767  #END
005047  005768        
005048  005769        
005049  005770        
005050  005771  //==================================================================================================
005051  005772        
005052  005773        
005053  005774        
005054  000013      #ENDIF
005055  000014        
005056  000015        
005057  000016  //===========================================================================================
005058  000017        
005059  000018        
005060  000002        
005061  000003  // generated 14/10/2015 12:18:29
005062  000004        
005063  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005064  000006  #inherit "4DGL_16bitColours.fnc"
005065  000006  #inherit "4DGL_16bitColours.fnc"
005066  000004  */
005067  000005        
005068  000006        
005069  000007        
005070  000008  #CONST
005071  000149  #END
005072  000150        
005073  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005074  000008  #inherit "VisualConst.inc"
005075  000008  #inherit "VisualConst.inc"
005076  000001  // Line Patterns
005077  000002  #constant  LPCOARSE    0xF0F0
005078  000002  #constant  LPCOARSE    0xF0F0
005079  000003  #constant  LPMEDIUM    0x3333
005080  000003  #constant  LPMEDIUM    0x3333
005081  000004  #constant  LPFINE      0xAAAA
005082  000004  #constant  LPFINE      0xAAAA
005083  000005  #constant  LPDASHDOT   0x03CF
005084  000005  #constant  LPDASHDOT   0x03CF
005085  000006  #constant  LPDASHDOTDOT 0x0333
005086  000006  #constant  LPDASHDOTDOT 0x0333
005087  000007  #constant  LPSOLID     0x0000
005088  000007  #constant  LPSOLID     0x0000
005089  000009        
005090  000010        
file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1Const.inc

005091  000011  #inherit "RepRap_Touchv1Const.inc"
005092  000011  #inherit "RepRap_Touchv1Const.inc"
005093  000001  // File generated 14/10/2015 12:18:10
005094  000002  // Warning! This is a generated file, any manual changes will be
005095  000003  // lost during the next generation.
005096  000004        
005097  000005  #constant  Strings3Count    0
005098  000005  #constant  Strings3Count    0
005099  000006  #constant  Strings3Size     1
005100  000006  #constant  Strings3Size     1
005101  000007  #constant  Strings1Count    1
005102  000007  #constant  Strings1Count    1
005103  000008  #constant  Strings1Size     30
005104  000008  #constant  Strings1Size     30
005105  000009  #constant  Strings4Count    1
005106  000009  #constant  Strings4Count    1
005107  000010  #constant  Strings4Size     25
005108  000010  #constant  Strings4Size     25
005109  000011  #constant  Strings6Count    1
005110  000011  #constant  Strings6Count    1
005111  000012  #constant  Strings6Size     31
005112  000012  #constant  Strings6Size     31
005113  000013  #constant  Strings2Count    0
005114  000013  #constant  Strings2Count    0
005115  000014  #constant  Strings2Size     1
005116  000014  #constant  Strings2Size     1
005117  000015  #constant  Strings0Count    1
005118  000015  #constant  Strings0Count    1
005119  000016  #constant  Strings0Size     7
005120  000016  #constant  Strings0Size     7
005121  000017  #constant  Strings9Count    0
005122  000017  #constant  Strings9Count    0
005123  000018  #constant  Strings9Size     1
005124  000018  #constant  Strings9Size     1
005125  000019  #constant  Strings34Count    0
005126  000019  #constant  Strings34Count    0
005127  000020  #constant  Strings34Size     1
005128  000020  #constant  Strings34Size     1
005129  000021  #constant  Strings36Count    0
005130  000021  #constant  Strings36Count    0
005131  000022  #constant  Strings36Size     1
005132  000022  #constant  Strings36Size     1
005133  000023  #constant  Strings37Count    0
005134  000023  #constant  Strings37Count    0
005135  000024  #constant  Strings37Size     1
005136  000024  #constant  Strings37Size     1
005137  000025  #constant  Strings12Count    1
005138  000025  #constant  Strings12Count    1
005139  000026  #constant  Strings12Size     14
005140  000026  #constant  Strings12Size     14
005141  000027  #constant  Strings16Count    0
005142  000027  #constant  Strings16Count    0
005143  000028  #constant  Strings16Size     1
005144  000028  #constant  Strings16Size     1
005145  000029  #constant  Strings11Count    1
005146  000029  #constant  Strings11Count    1
005147  000030  #constant  Strings11Size     73
005148  000030  #constant  Strings11Size     73
005149  000031  #constant  Strings7Count    0
005150  000031  #constant  Strings7Count    0
005151  000032  #constant  Strings7Size     1
005152  000032  #constant  Strings7Size     1
005153  000033  #constant  Strings8Count    0
005154  000033  #constant  Strings8Count    0
005155  000034  #constant  Strings8Size     1
005156  000034  #constant  Strings8Size     1
005157  000035  #constant  Strings38Count    0
005158  000035  #constant  Strings38Count    0
005159  000036  #constant  Strings38Size     1
005160  000036  #constant  Strings38Size     1
005161  000037  #constant  Strings39Count    0
005162  000037  #constant  Strings39Count    0
005163  000038  #constant  Strings39Size     1
005164  000038  #constant  Strings39Size     1
005165  000039  #constant  Strings40Count    1
005166  000039  #constant  Strings40Count    1
005167  000040  #constant  Strings40Size     7
005168  000040  #constant  Strings40Size     7
005169  000041  #constant  Strings41Count    1
005170  000041  #constant  Strings41Count    1
005171  000042  #constant  Strings41Size     7
005172  000042  #constant  Strings41Size     7
005173  000043  #constant  Strings42Count    1
005174  000043  #constant  Strings42Count    1
005175  000044  #constant  Strings42Size     7
005176  000044  #constant  Strings42Size     7
005177  000045  #constant  Strings43Count    0
005178  000045  #constant  Strings43Count    0
005179  000046  #constant  Strings43Size     1
005180  000046  #constant  Strings43Size     1
005181  000047  #constant  Strings44Count    0
005182  000047  #constant  Strings44Count    0
005183  000048  #constant  Strings44Size     1
005184  000048  #constant  Strings44Size     1
005185  000049  #constant  Strings45Count    0
005186  000049  #constant  Strings45Count    0
005187  000050  #constant  Strings45Size     1
005188  000050  #constant  Strings45Size     1
005189  000051  #constant  Strings51Count    0
005190  000051  #constant  Strings51Count    0
005191  000052  #constant  Strings51Size     1
005192  000052  #constant  Strings51Size     1
005193  000053  #constant  Strings52Count    0
005194  000053  #constant  Strings52Count    0
005195  000054  #constant  Strings52Size     1
005196  000054  #constant  Strings52Size     1
005197  000055  #constant  Strings29Count    1
005198  000055  #constant  Strings29Count    1
005199  000056  #constant  Strings29Size     53
005200  000056  #constant  Strings29Size     53
005201  000057  #constant  Strings31Count    1
005202  000057  #constant  Strings31Count    1
005203  000058  #constant  Strings31Size     7
005204  000058  #constant  Strings31Size     7
005205  000059  #constant  Strings32Count    1
005206  000059  #constant  Strings32Count    1
005207  000060  #constant  Strings32Size     19
005208  000060  #constant  Strings32Size     19
005209  000061  #constant  Strings50Count    0
005210  000061  #constant  Strings50Count    0
005211  000062  #constant  Strings50Size     1
005212  000062  #constant  Strings50Size     1
005213  000063  #constant  Strings53Count    1
005214  000063  #constant  Strings53Count    1
005215  000064  #constant  Strings53Size     67
005216  000064  #constant  Strings53Size     67
005217  000065  #constant  Strings5Count    0
005218  000065  #constant  Strings5Count    0
005219  000066  #constant  Strings5Size     1
005220  000066  #constant  Strings5Size     1
005221  000067  #constant  Strings10Count    1
005222  000067  #constant  Strings10Count    1
005223  000068  #constant  Strings10Size     5
005224  000068  #constant  Strings10Size     5
005225  000069  #constant  Strings17Count    0
005226  000069  #constant  Strings17Count    0
005227  000070  #constant  Strings17Size     1
005228  000070  #constant  Strings17Size     1
005229  000071  // object indexes into ImageControl
005230  000072  #CONST
005231  000298  #END
005232  000299        
005233  000300  #constant  Strings13Size     0
005234  000300  #constant  Strings13Size     0
005235  000301  #constant  Strings13StartH   0
005236  000301  #constant  Strings13StartH   0
005237  000302  #constant  Strings13StartL   0
005238  000302  #constant  Strings13StartL   0
005239  000303  #constant  Strings14Size     0
005240  000303  #constant  Strings14Size     0
005241  000304  #constant  Strings14StartH   0
005242  000304  #constant  Strings14StartH   0
005243  000305  #constant  Strings14StartL   0
005244  000305  #constant  Strings14StartL   0
005245  000306  #constant  Strings15Size     0
005246  000306  #constant  Strings15Size     0
005247  000307  #constant  Strings15StartH   0
005248  000307  #constant  Strings15StartH   0
005249  000308  #constant  Strings15StartL   0
005250  000308  #constant  Strings15StartL   0
005251  000309  #constant  Strings18Size     0
005252  000309  #constant  Strings18Size     0
005253  000310  #constant  Strings18StartH   0
005254  000310  #constant  Strings18StartH   0
005255  000311  #constant  Strings18StartL   0
005256  000311  #constant  Strings18StartL   0
005257  000312  #constant  Strings19Size     0
005258  000312  #constant  Strings19Size     0
005259  000313  #constant  Strings19StartH   0
005260  000313  #constant  Strings19StartH   0
005261  000314  #constant  Strings19StartL   0
005262  000314  #constant  Strings19StartL   0
005263  000315  #constant  Strings20Size     0
005264  000315  #constant  Strings20Size     0
005265  000316  #constant  Strings20StartH   0
005266  000316  #constant  Strings20StartH   0
005267  000317  #constant  Strings20StartL   0
005268  000317  #constant  Strings20StartL   0
005269  000318  #constant  Strings21Size     0
005270  000318  #constant  Strings21Size     0
005271  000319  #constant  Strings21StartH   0
005272  000319  #constant  Strings21StartH   0
005273  000320  #constant  Strings21StartL   0
005274  000320  #constant  Strings21StartL   0
005275  000321  #constant  Strings22Size     0
005276  000321  #constant  Strings22Size     0
005277  000322  #constant  Strings22StartH   0
005278  000322  #constant  Strings22StartH   0
005279  000323  #constant  Strings22StartL   0
005280  000323  #constant  Strings22StartL   0
005281  000324  #constant  Strings23Size     0
005282  000324  #constant  Strings23Size     0
005283  000325  #constant  Strings23StartH   0
005284  000325  #constant  Strings23StartH   0
005285  000326  #constant  Strings23StartL   0
005286  000326  #constant  Strings23StartL   0
005287  000327  #constant  Strings24Size     0
005288  000327  #constant  Strings24Size     0
005289  000328  #constant  Strings24StartH   0
005290  000328  #constant  Strings24StartH   0
005291  000329  #constant  Strings24StartL   0
005292  000329  #constant  Strings24StartL   0
005293  000330  #constant  Strings25Size     0
005294  000330  #constant  Strings25Size     0
005295  000331  #constant  Strings25StartH   0
005296  000331  #constant  Strings25StartH   0
005297  000332  #constant  Strings25StartL   0
005298  000332  #constant  Strings25StartL   0
005299  000333  #constant  Strings26Size     0
005300  000333  #constant  Strings26Size     0
005301  000334  #constant  Strings26StartH   0
005302  000334  #constant  Strings26StartH   0
005303  000335  #constant  Strings26StartL   0
005304  000335  #constant  Strings26StartL   0
005305  000336  #constant  Strings27Size     0
005306  000336  #constant  Strings27Size     0
005307  000337  #constant  Strings27StartH   0
005308  000337  #constant  Strings27StartH   0
005309  000338  #constant  Strings27StartL   0
005310  000338  #constant  Strings27StartL   0
005311  000339  #constant  Strings28Size     0
005312  000339  #constant  Strings28Size     0
005313  000340  #constant  Strings28StartH   0
005314  000340  #constant  Strings28StartH   0
005315  000341  #constant  Strings28StartL   0
005316  000341  #constant  Strings28StartL   0
005317  000342  #constant  Strings30Size     0
005318  000342  #constant  Strings30Size     0
005319  000343  #constant  Strings30StartH   0
005320  000343  #constant  Strings30StartH   0
005321  000344  #constant  Strings30StartL   0
005322  000344  #constant  Strings30StartL   0
005323  000345  #constant  Strings33Size     0
005324  000345  #constant  Strings33Size     0
005325  000346  #constant  Strings33StartH   0
005326  000346  #constant  Strings33StartH   0
005327  000347  #constant  Strings33StartL   0
005328  000347  #constant  Strings33StartL   0
005329  000348  #constant  Strings35Size     0
005330  000348  #constant  Strings35Size     0
005331  000349  #constant  Strings35StartH   0
005332  000349  #constant  Strings35StartH   0
005333  000350  #constant  Strings35StartL   0
005334  000350  #constant  Strings35StartL   0
005335  000351  #constant  Strings46Size     0
005336  000351  #constant  Strings46Size     0
005337  000352  #constant  Strings46StartH   0
005338  000352  #constant  Strings46StartH   0
005339  000353  #constant  Strings46StartL   0
005340  000353  #constant  Strings46StartL   0
005341  000354  #constant  Strings47Size     0
005342  000354  #constant  Strings47Size     0
005343  000355  #constant  Strings47StartH   0
005344  000355  #constant  Strings47StartH   0
005345  000356  #constant  Strings47StartL   0
005346  000356  #constant  Strings47StartL   0
005347  000357  #constant  Strings48Size     0
005348  000357  #constant  Strings48Size     0
005349  000358  #constant  Strings48StartH   0
005350  000358  #constant  Strings48StartH   0
005351  000359  #constant  Strings48StartL   0
005352  000359  #constant  Strings48StartL   0
005353  000360  #constant  Strings49Size     0
005354  000360  #constant  Strings49Size     0
005355  000361  #constant  Strings49StartH   0
005356  000361  #constant  Strings49StartH   0
005357  000362  #constant  Strings49StartL   0
005358  000362  #constant  Strings49StartL   0
005359  000363  #constant  Strings3StartH   0x0
005360  000363  #constant  Strings3StartH   0x0
005361  000364  #constant  Strings3StartL   0x0
005362  000364  #constant  Strings3StartL   0x0
005363  000365  #constant  Strings1StartH   0x0
005364  000365  #constant  Strings1StartH   0x0
005365  000366  #constant  Strings1StartL   0x200
005366  000366  #constant  Strings1StartL   0x200
005367  000367  #constant  Strings4StartH   0x0
005368  000367  #constant  Strings4StartH   0x0
005369  000368  #constant  Strings4StartL   0x400
005370  000368  #constant  Strings4StartL   0x400
005371  000369  #constant  Strings6StartH   0x0
005372  000369  #constant  Strings6StartH   0x0
005373  000370  #constant  Strings6StartL   0x600
005374  000370  #constant  Strings6StartL   0x600
005375  000371  #constant  Strings2StartH   0x0
005376  000371  #constant  Strings2StartH   0x0
005377  000372  #constant  Strings2StartL   0x800
005378  000372  #constant  Strings2StartL   0x800
005379  000373  #constant  Strings0StartH   0x0
005380  000373  #constant  Strings0StartH   0x0
005381  000374  #constant  Strings0StartL   0xA00
005382  000374  #constant  Strings0StartL   0xA00
005383  000375  #constant  Strings9StartH   0x0
005384  000375  #constant  Strings9StartH   0x0
005385  000376  #constant  Strings9StartL   0xC00
005386  000376  #constant  Strings9StartL   0xC00
005387  000377  #constant  Strings34StartH   0x0
005388  000377  #constant  Strings34StartH   0x0
005389  000378  #constant  Strings34StartL   0xE00
005390  000378  #constant  Strings34StartL   0xE00
005391  000379  #constant  Strings36StartH   0x0
005392  000379  #constant  Strings36StartH   0x0
005393  000380  #constant  Strings36StartL   0x1000
005394  000380  #constant  Strings36StartL   0x1000
005395  000381  #constant  Strings37StartH   0x0
005396  000381  #constant  Strings37StartH   0x0
005397  000382  #constant  Strings37StartL   0x1200
005398  000382  #constant  Strings37StartL   0x1200
005399  000383  #constant  Strings12StartH   0x0
005400  000383  #constant  Strings12StartH   0x0
005401  000384  #constant  Strings12StartL   0x1400
005402  000384  #constant  Strings12StartL   0x1400
005403  000385  #constant  Strings16StartH   0x0
005404  000385  #constant  Strings16StartH   0x0
005405  000386  #constant  Strings16StartL   0x1600
005406  000386  #constant  Strings16StartL   0x1600
005407  000387  #constant  Strings11StartH   0x0
005408  000387  #constant  Strings11StartH   0x0
005409  000388  #constant  Strings11StartL   0x1800
005410  000388  #constant  Strings11StartL   0x1800
005411  000389  #constant  Strings7StartH   0x0
005412  000389  #constant  Strings7StartH   0x0
005413  000390  #constant  Strings7StartL   0x1A00
005414  000390  #constant  Strings7StartL   0x1A00
005415  000391  #constant  Strings8StartH   0x0
005416  000391  #constant  Strings8StartH   0x0
005417  000392  #constant  Strings8StartL   0x1C00
005418  000392  #constant  Strings8StartL   0x1C00
005419  000393  #constant  Strings38StartH   0x0
005420  000393  #constant  Strings38StartH   0x0
005421  000394  #constant  Strings38StartL   0x1E00
005422  000394  #constant  Strings38StartL   0x1E00
005423  000395  #constant  Strings39StartH   0x0
005424  000395  #constant  Strings39StartH   0x0
005425  000396  #constant  Strings39StartL   0x2000
005426  000396  #constant  Strings39StartL   0x2000
005427  000397  #constant  Strings40StartH   0x0
005428  000397  #constant  Strings40StartH   0x0
005429  000398  #constant  Strings40StartL   0x2200
005430  000398  #constant  Strings40StartL   0x2200
005431  000399  #constant  Strings41StartH   0x0
005432  000399  #constant  Strings41StartH   0x0
005433  000400  #constant  Strings41StartL   0x2400
005434  000400  #constant  Strings41StartL   0x2400
005435  000401  #constant  Strings42StartH   0x0
005436  000401  #constant  Strings42StartH   0x0
005437  000402  #constant  Strings42StartL   0x2600
005438  000402  #constant  Strings42StartL   0x2600
005439  000403  #constant  Strings43StartH   0x0
005440  000403  #constant  Strings43StartH   0x0
005441  000404  #constant  Strings43StartL   0x2800
005442  000404  #constant  Strings43StartL   0x2800
005443  000405  #constant  Strings44StartH   0x0
005444  000405  #constant  Strings44StartH   0x0
005445  000406  #constant  Strings44StartL   0x2A00
005446  000406  #constant  Strings44StartL   0x2A00
005447  000407  #constant  Strings45StartH   0x0
005448  000407  #constant  Strings45StartH   0x0
005449  000408  #constant  Strings45StartL   0x2C00
005450  000408  #constant  Strings45StartL   0x2C00
005451  000409  #constant  Strings51StartH   0x0
005452  000409  #constant  Strings51StartH   0x0
005453  000410  #constant  Strings51StartL   0x2E00
005454  000410  #constant  Strings51StartL   0x2E00
005455  000411  #constant  Strings52StartH   0x0
005456  000411  #constant  Strings52StartH   0x0
005457  000412  #constant  Strings52StartL   0x3000
005458  000412  #constant  Strings52StartL   0x3000
005459  000413  #constant  Strings29StartH   0x0
005460  000413  #constant  Strings29StartH   0x0
005461  000414  #constant  Strings29StartL   0x3200
005462  000414  #constant  Strings29StartL   0x3200
005463  000415  #constant  Strings31StartH   0x0
005464  000415  #constant  Strings31StartH   0x0
005465  000416  #constant  Strings31StartL   0x3400
005466  000416  #constant  Strings31StartL   0x3400
005467  000417  #constant  Strings32StartH   0x0
005468  000417  #constant  Strings32StartH   0x0
005469  000418  #constant  Strings32StartL   0x3600
005470  000418  #constant  Strings32StartL   0x3600
005471  000419  #constant  Strings50StartH   0x0
005472  000419  #constant  Strings50StartH   0x0
005473  000420  #constant  Strings50StartL   0x3800
005474  000420  #constant  Strings50StartL   0x3800
005475  000421  #constant  Strings53StartH   0x0
005476  000421  #constant  Strings53StartH   0x0
005477  000422  #constant  Strings53StartL   0x3A00
005478  000422  #constant  Strings53StartL   0x3A00
005479  000423  #constant  Strings5StartH   0x0
005480  000423  #constant  Strings5StartH   0x0
005481  000424  #constant  Strings5StartL   0x3C00
005482  000424  #constant  Strings5StartL   0x3C00
005483  000425  #constant  Strings10StartH   0x0
005484  000425  #constant  Strings10StartH   0x0
005485  000426  #constant  Strings10StartL   0x3E00
005486  000426  #constant  Strings10StartL   0x3E00
005487  000427  #constant  Strings17StartH   0x0
005488  000427  #constant  Strings17StartH   0x0
005489  000428  #constant  Strings17StartL   0x4000
005490  000428  #constant  Strings17StartL   0x4000
005491  000429  #IFNOT EXISTS NOGLOBALS
005492  000430  var hndl ;
005493  000431  #ENDIF
005494  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005495  000013  #inherit "CLPrintStrings.inc"
005496  000013  #inherit "CLPrintStrings.inc"
005497  000001  func PrintStrings(var ID, var *msgid, var String)
005498  000002      var StringID, i, ch, offs32[2], res32[2];
005499  000003      StringID := oStringss[1+ID] ;
005500  000004      if (String)
005501  000005          stringsCV[ID] := -1 ;
005502  000006      else
005503  000007          stringsCV[ID] := msgid ;
005504  000008      endif
005505  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005506  000010      txt_FontID(hFonts[ID]) ;
005507  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005508  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005509  000013        
005510  000014      if (*(StringID + Ofs_String_Transparent))
005511  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005512  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005513  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005514  000018      else
005515  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005516  000020          gfx_Clipping(ON) ;
005517  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005518  000022          gfx_Clipping(OFF) ;
005519  000023        
005520  000024      endif
005521  000025        
005522  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005523  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005524  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005525  000029        
005526  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005527  000031        
005528  000032      if (String)
005529  000033          i := 0 ;
005530  000034          ch := msgid[i++] ;
005531  000035          while (ch != 0)
005532  000036              putch(ch) ;
005533  000037              ch := msgid[i++] ;
005534  000038          wend
005535  000039      else
005536  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005537  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005538  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005539  000043          uadd_3232(res32,res32,offs32) ;
005540  000044          file_Seek(hstrings, res32[1], res32[0]);
005541  000045          repeat
005542  000046              if (*(StringID + Ofs_String_Ansi))
005543  000047                  ch := file_GetC(hstrings) ;
005544  000048              else
005545  000049                  ch := file_GetW(hstrings) ;
005546  000050              endif
005547  000051              putch(ch) ;
005548  000052          until (ch == 0) ;
005549  000053      endif
005550  000054        
005551  000055  endfunc
005552  000056        
005553  000014        
005554  000015  #constant IPDatasize 22
005555  000015  #constant IPDatasize 22
005556  000016        
005557  000017  #CONST
005558  000021  #END
005559  000022        
005560  000023  #CONST
005561  000130  #END
005562  000131        
005563  000538  #END
5564  239A
5565  239B
5566  239C
5567  239D
5568  239E
5569  239F
5570  23A0
5571  23A1
5572  23A2
5573  23A3
5574  23A4
5575  23A5
5576  23A6
5577  23A7
5578  23A8
5579  23A9
5580  23AA
5581  23AB
5582  23AC
5583  23AD
5584  23AE
5585  23AF
5586  23B0
5587  23B1
5588  23B2
5589  23B3
5590  23B4
5591  23B5
5592  23B6
5593  23B7
5594  23B8
5595  23B9
5596  23BA
5597  23BB
5598  23BC
5599  23BD
5600  23BE
5601  23BF
5602  23C0
5603  23C1
5604  23C2
5605  23C3
5606  23C4
5607  23C5
5608  23C6
5609  23C7
5610  23C8
5611  23C9
5612  23CA
5613  23CB
5614  23CC
5615  23CD
5616  23CE
5617  23CF
5618  23D0
5619  23D1
5620  23D2
5621  23D3
5622  23D4
5623  23D5
5624  23D6
5625  23D7
5626  23D8
5627  23D9
5628  23DA
5629  23DB
5630  23DC
5631  23DD
5632  23DE
5633  23DF
5634  23E0
5635  23E1
5636  23E2
5637  23E3
5638  23E4
5639  23E5
5640  23E6
5641  23E7
5642  23E8
5643  23E9
5644  23EA
5645  23EB
5646  23EC
5647  23ED
5648  23EE
5649  23EF
5650  23F0
5651  23F1
5652  23F2
5653  23F3
5654  23F4
5655  23F5
5656  23F6
5657  23F7
5658  23F8
5659  23F9
5660  23FA
5661  23FB
5662  23FC
5663  23FD
5664  23FE
5665  23FF
5666  2400
5667  2401
5668  2402
5669  2403
5670  2404
5671  2405
5672  2406
5673  2407
5674  2408
5675  2409
5676  240A
5677  240B
5678  240C
5679  240D
5680  240E
5681  240F
5682  2410
5683  2411
5684  2412
5685  2413
5686  2414
5687  2415
5688  2416
5689  2417
5690  2418
5691  2419
5692  241A
5693  241B
5694  241C
5695  241D
5696  241E
5697  241F
5698  2420
5699  2421
5700  2422
5701  2423
5702  2424
5703  2425
5704  2426
5705  2427
5706  2428
5707  2429
5708  242A
5709  242B
5710  242C
5711  242D
5712  242E
5713  242F
5714  2430
5715  2431
5716  2432
5717  2433
5718  2434
5719  2435
5720  2436
5721  2437
5722  2438
5723  2439
5724  243A
5725  243B
5726  243C
5727  243D
5728  243E
5729  243F
5730  2440
5731  2441
5732  2442
5733  2443
5734  2444
5735  2445
5736  2446
5737  2447
5738  2448
5739  2449
5740  244A
5741  244B
5742  244C
5743  244D
5744  244E
5745  244F
5746  2450
5747  2451
5748  2452
5749  2453
5750  2454
5751  2455
5752  2456
5753  2457
5754  2458
5755  2459
5756  245A
5757  245B
5758  245C
5759  245D
5760  245E
5761  245F
5762  2460
5763  2461
5764  2462
5765  2463
5766  2464
5767  2465
5768  2466
5769  2467
5770  2468
5771  2469
5772  246A
5773  246B
5774  246C
5775  246D
5776  246E
5777  246F
5778  2470
5779  2471
5780  2472
5781  2473
5782  2474
5783  2475
5784  2476
5785  2477
5786  2478
5787  2479
5788  247A
5789  247B
5790  247C
5791  247D
5792  247E
5793  247F
5794  2480
5795  2481
5796  2482
5797  2483
5798  2484
5799  2485
5800  2486
5801  2487
5802  2488
5803  2489
5804  248A
5805  248B
5806  248C
5807  248D
5808  248E
5809  248F
5810  2490
5811  2491
5812  2492
5813  2493
5814  2494
5815  2495
5816  2496
5817  2497
5818  2498
5819  2499
5820  249A
5821  249B
5822  249C
5823  249D
5824  249E
5825  249F
5826  24A0
5827  24A1
5828  24A2
5829  24A3
5830  24A4
5831  24A5
5832  24A6
5833  24A7
5834  24A8
5835  24A9
5836  24AA
5837  24AB
5838  24AC
5839  24AD
5840  24AE
5841  24AF
5842  24B0
5843  24B1
5844  24B2
5845  24B3
5846  24B4
5847  24B5
5848  24B6
5849  24B7
5850  24B8
5851  24B9
5852  24BA
5853  24BB
5854  24BC
5855  24BD
5856  24BE
5857  24BF
5858  24C0
5859  24C1
5860  24C2
5861  24C3
5862  24C4
5863  24C5
5864  24C6
5865  24C7
5866  24C8
5867  24C9
5868  24CA
5869  24CB
5870  24CC
5871  24CD
5872  24CE
5873  24CF
5874  24D0
5875  24D1
5876  24D2
5877  24D3
5878  24D4
5879  24D5
5880  24D6
5881  24D7
5882  24D8
5883  24D9
5884  24DA
5885  24DB
5886  24DC
5887  24DD
5888  24DE
5889  24DF
5890  24E0
5891  24E1
5892  24E2
5893  24E3
5894  24E4
5895  24E5
5896  24E6
5897  24E7
5898  24E8
5899  24E9
5900  24EA
5901  24EB
5902  24EC
5903  24ED
5904  24EE
5905  24EF
5906  24F0
5907  24F1
5908  24F2
5909  24F3
5910  24F4
5911  24F5
5912  24F6
5913  24F7
5914  24F8
5915  24F9
5916  24FA
5917  24FB
5918  24FC
5919  24FD
5920  24FE
5921  24FF
5922  2500
5923  2501
5924  2502
5925  2503
5926  2504
5927  2505
5928  2506
5929  2507
5930  2508
5931  2509
5932  250A
5933  250B
5934  250C
5935  250D
5936  250E
5937  250F
5938  2510
5939  2511
5940  2512
5941  2513
5942  2514
5943  2515
5944  2516
5945  2517
5946  2518
5947  2519
5948  251A
5949  251B
5950  251C
5951  251D
5952  251E
5953  251F
5954  2520
5955  2521
5956  2522
5957  2523
5958  2524
5959  2525
5960  2526
5961  2527
5962  2528
5963  2529
5964  252A
5965  252B
5966  252C
5967  252D
5968  252E
5969  252F
5970  2530
5971  2531
5972  2532
5973  2533
5974  2534
5975  2535
5976  2536
5977  2537
5978  2538
5979  2539
5980  253A
5981  253B
5982  253C
5983  253D
5984  253E
5985  253F
5986  2540
5987  2541
5988  2542
5989  2543
5990  2544
5991  2545
5992  2546
5993  2547
5994  2548
5995  2549
5996  254A
5997  254B
5998  254C
5999  254D
6000  254E
6001  254F
6002  2550
6003  2551
6004  2552
6005  2553
6006  2554
6007  2555
6008  2556
6009  2557
6010  2558
6011  2559
6012  255A
6013  255B
6014  255C
6015  255D
6016  255E
6017  255F
6018  2560
6019  2561
6020  2562
6021  2563
6022  2564
6023  2565
6024  2566
6025  2567
6026  2568
6027  2569
6028  256A
6029  256B
6030  256C
6031  256D
6032  256E
6033  256F
6034  2570
6035  2571
6036  2572
6037  2573
6038  2574
6039  2575
6040  2576
6041  2577
6042  2578
6043  2579
6044  257A
6045  257B
6046  257C
6047  257D
6048  257E
6049  257F
6050  2580
6051  2581
6052  2582
6053  2583
6054  2584
6055  2585
6056  2586
6057  2587
6058  2588
6059  2589
6060  258A
6061  258B
6062  258C
6063  258D
6064  258E
6065  258F
6066  2590
6067  2591
6068  2592
6069  2593
6070  2594
6071  2595
6072  2596
6073  2597
6074  2598
6075  2599
6076  259A
6077  259B
6078  259C
6079  259D
6080  259E
6081  259F
6082  25A0
6083  25A1
6084  25A2
6085  25A3
6086  25A4
6087  25A5
6088  25A6
6089  25A7
6090  25A8
6091  25A9
6092  25AA
6093  25AB
6094  25AC
6095  25AD
6096  25AE
6097  25AF
6098  25B0
6099  25B1
6100  25B2
6101  25B3
6102  25B4
6103  25B5
6104  25B6
6105  25B7
6106  25B8
6107  25B9
6108  25BA
6109  25BB
6110  25BC
6111  25BD
6112  25BE
6113  25BF
6114  25C0
6115  25C1
6116  25C2
6117  25C3
6118  25C4
6119  25C5
6120  25C6
6121  25C7
6122  25C8
6123  25C9
6124  25CA
6125  25CB
6126  25CC
6127  25CD
6128  25CE
6129  25CF
6130  25D0
6131  25D1
6132  25D2
6133  25D3
6134  25D4
6135  25D5
6136  25D6
6137  25D7
6138  25D8
6139  25D9
6140  25DA
6141  25DB
6142  25DC
6143  25DD
6144  25DE
6145  25DF
6146  25E0
6147  25E1
6148  25E2
6149  25E3
6150  25E4
6151  25E5
6152  25E6
6153  25E7
6154  25E8
6155  25E9
6156  25EA
6157  25EB
6158  25EC
6159  25ED
6160  25EE
6161  25EF
6162  25F0
6163  25F1
6164  25F2
6165  25F3
6166  25F4
6167  25F5
6168  25F6
6169  25F7
6170  25F8
6171  25F9
6172  25FA
6173  25FB
6174  25FC
6175  25FD
6176  25FE
6177  25FF
6178  2600
6179  2601
6180  2602
6181  2603
6182  2604
6183  2605
6184  2606
6185  2607
6186  2608
6187  2609
6188  260A
6189  260B
6190  260C
6191  260D
6192  260E
6193  260F
6194  2610
6195  2611
6196  2612
6197  2613
6198  2614
6199  2615
6200  2616
6201  2617
6202  2618
6203  2619
6204  261A
6205  261B
6206  261C
6207  261D
6208  261E
6209  261F
6210  2620
6211  2621
6212  2622
6213  2623
6214  2624
6215  2625
6216  2626
6217  2627
6218  2628
6219  2629
6220  262A
6221  262B
6222  262C
6223  262D
6224  262E
6225  262F
6226  2630
6227  2631
6228  2632
6229  2633
6230  2634
6231  2635
6232  2636
6233  2637
6234  2638
6235  2639
6236  263A
6237  263B
6238  263C
6239  263D
6240  263E
6241  263F
6242  2640
6243  2641
6244  2642
6245  2643
6246  2644
6247  2645
6248  2646
6249  2647
6250  2648
6251  2649
6252  264A
6253  264B
6254  264C
6255  264D
6256  264E
6257  264F
6258  2650
6259  2651
6260  2652
6261  2653
6262  2654
6263  2655
6264  2656
6265  2657
6266  2658
6267  2659
6268  265A
6269  265B
6270  265C
6271  265D
6272  265E
6273  265F
6274  2660
6275  2661
6276  2662
6277  2663
6278  2664
6279  2665
6280  2666
6281  2667
6282  2668
6283  2669
6284  266A
6285  266B
6286  266C
6287  266D
6288  266E
6289  266F
6290  2670
6291  2671
6292  2672
6293  2673
6294  2674
6295  2675
6296  2676
6297  2677
6298  2678
6299  2679
6300  267A
6301  267B
6302  267C
6303  267D
6304  267E
6305  267F
6306  2680
6307  2681
6308  2682
6309  2683
6310  2684
6311  2685
6312  2686
6313  2687
6314  2688
6315  2689
6316  268A
6317  268B
6318  268C
6319  268D
6320  268E
6321  268F
6322  2690
6323  2691
6324  2692
6325  2693
6326  2694
6327  2695
6328  2696
6329  2697
6330  2698
6331  2699
6332  269A
6333  269B
6334  269C
6335  269D
6336  269E
6337  269F
6338  26A0
6339  26A1
6340  26A2
6341  26A3
6342  26A4
6343  26A5
6344  26A6
6345  26A7
6346  26A8
6347  26A9
6348  26AA
6349  26AB
6350  26AC
6351  26AD
6352  26AE
6353  26AF
6354  26B0
6355  26B1
6356  26B2
6357  26B3
6358  26B4
6359  26B5
6360  26B6
6361  26B7
6362  26B8
6363  26B9
6364  26BA
6365  26BB
6366  26BC
6367  26BD
6368  26BE
6369  26BF
6370  26C0
6371  26C1
6372  26C2
6373  26C3
6374  26C4
6375  26C5
6376  26C6
6377  26C7
6378  26C8
6379  26C9
6380  26CA
6381  26CB
6382  26CC
6383  26CD
6384  26CE
6385  26CF
6386  26D0
6387  26D1
6388  26D2
6389  26D3
6390  26D4
6391  26D5
6392  26D6
6393  26D7
6394  26D8
6395  26D9
6396  26DA
6397  26DB
6398  26DC
6399  26DD
6400  26DE
6401  26DF
6402  26E0
6403  26E1
6404  26E2
6405  26E3
6406  26E4
6407  26E5
6408  26E6
6409  26E7
6410  26E8
6411  26E9
6412  26EA
6413  26EB
6414  26EC
6415  26ED
6416  26EE
6417  26EF
6418  26F0
6419  26F1
6420  26F2
6421  26F3
6422  26F4
6423  26F5
6424  26F6
6425  26F7
6426  26F8
6427  26F9
6428  26FA
6429  26FB
6430  26FC
6431  26FD
6432  26FE
6433  26FF
6434  2700
6435  2701
6436  2702
6437  2703
6438  2704
6439  2705
6440  2706
6441  2707
6442  2708
6443  2709
6444  270A
6445  270B
6446  270C
6447  270D
6448  270E
6449  270F
6450  2710
6451  2711
6452  2712
6453  2713
6454  2714
6455  2715
6456  2716
6457  2717
6458  2718
6459  2719
6460  271A
6461  271B
6462  271C
6463  271D
6464  271E
6465  271F
6466  2720
6467  2721
6468  2722
6469  2723
6470  2724
6471  2725
6472  2726
6473  2727
6474  2728
6475  2729
6476  272A
6477  272B
6478  272C
6479  272D
6480  272E
6481  272F
6482  2730
6483  2731
6484  2732
6485  2733
6486  2734
6487  2735
6488  2736
6489  2737
6490  2738
6491  2739
6492  273A
6493  273B
6494  273C
6495  273D
6496  273E
6497  273F
6498  2740
6499  2741
6500  2742
6501  2743
6502  2744
6503  2745
6504  2746
6505  2747
6506  2748
6507  2749
6508  274A
6509  274B
6510  274C
6511  274D
6512  274E
6513  274F
6514  2750
6515  2751
6516  2752
6517  2753
6518  2754
6519  2755
6520  2756
6521  2757
6522  2758
6523  2759
6524  275A
6525  275B
6526  275C
6527  275D
6528  275E
6529  275F
6530  2760
6531  2761
6532  2762
6533  2763
6534  2764
6535  2765
6536  2766
6537  2767
6538  2768
6539  2769
6540  276A
6541  276B
6542  276C
6543  276D
6544  276E
6545  276F
6546  2770
6547  2771
6548  2772
6549  2773
6550  2774
6551  2775
6552  2776
6553  2777
6554  2778
6555  2779
6556  277A
6557  277B
6558  277C
6559  277D
6560  277E
6561  277F
6562  2780
6563  2781
6564  2782
6565  2783
6566  2784
6567  2785
6568  2786
6569  2787
6570  2788
6571  2789
6572  278A
6573  278B
6574  278C
6575  278D
6576  278E
6577  278F
6578  2790
6579  2791
6580  2792
6581  2793
6582  2794
6583  2795
6584  2796
6585  2797
6586  2798
6587  2799
6588  279A
6589  279B
6590  279C
6591  279D
6592  279E
6593  279F
6594  27A0
6595  27A1
6596  27A2
6597  27A3
6598  27A4
6599  27A5
6600  27A6
6601  27A7
6602  27A8
6603  27A9
6604  27AA
6605  27AB
6606  27AC
6607  27AD
6608  27AE
6609  27AF
6610  27B0
6611  27B1
6612  27B2
6613  27B3
6614  27B4
6615  27B5
6616  27B6
6617  27B7
6618  27B8
6619  27B9
6620  27BA
6621  27BB
6622  27BC
6623  27BD
6624  27BE
6625  27BF
6626  27C0
6627  27C1
6628  27C2
6629  27C3
6630  27C4
6631  27C5
6632  27C6
6633  27C7
6634  27C8
6635  27C9
6636  27CA
6637  27CB
6638  27CC
6639  27CD
6640  27CE
6641  27CF
6642  27D0
6643  27D1
6644  27D2
6645  27D3
6646  27D4
6647  27D5
6648  27D6
6649  27D7
6650  27D8
6651  27D9
6652  27DA
6653  27DB
6654  27DC
6655  27DD
6656  27DE
6657  27DF
6658  27E0
6659  27E1
6660  27E2
6661  27E3
6662  27E4
6663  27E5
6664  27E6
6665  27E7
6666  27E8
6667  27E9
6668  27EA
6669  27EB
6670  27EC
6671  27ED
6672  27EE
6673  27EF
6674  27F0
6675  27F1
6676  27F2
6677  27F3
6678  27F4
6679  27F5
6680  27F6
6681  27F7
6682  27F8
6683  27F9
6684  27FA
6685  27FB
6686  27FC
6687  27FD
6688  27FE
6689  27FF
6690  2800
6691  2801
6692  2802
6693  2803
6694  2804
6695  2805
6696  2806
6697  2807
6698  2808
6699  2809
6700  280A
6701  280B
6702  280C
6703  280D
6704  280E
6705  280F
6706  2810
6707  2811
6708  2812
6709  2813
6710  2814
6711  2815
6712  2816
6713  2817
6714  2818
6715  2819
6716  281A
6717  281B
6718  281C
6719  281D
6720  281E
6721  281F
6722  2820
6723  2821
6724  2822
6725  2823
6726  2824
6727  2825
6728  2826
6729  2827
6730  2828
6731  2829
6732  282A
6733  282B
6734  282C
6735  282D
6736  282E
6737  282F
6738  2830
6739  2831
6740  2832
6741  2833
6742  2834
6743  2835
6744  2836
6745  2837
6746  2838
6747  2839
6748  283A
6749  283B
6750  283C
6751  283D
6752  283E
6753  283F
6754  2840
6755  2841
6756  2842
6757  2843
6758  2844
6759  2845
6760  2846
6761  2847
6762  2848
6763  2849
6764  284A
6765  284B
6766  284C
6767  284D
6768  284E
6769  284F
6770  2850
6771  2851
6772  2852
6773  2853
6774  2854
6775  2855
6776  2856
6777  2857
6778  2858
6779  2859
6780  285A
6781  285B
6782  285C
6783  285D
6784  285E
6785  285F
6786  2860
6787  2861
6788  2862
6789  2863
6790  2864
6791  2865
6792  2866
6793  2867
6794  2868
6795  2869
6796  286A
6797  286B
6798  286C
6799  286D
6800  286E
6801  286F
6802  2870
6803  2871
6804  2872
6805  2873
6806  2874
6807  2875
6808  2876
6809  2877
6810  2878
6811  2879
6812  287A
6813  287B
6814  287C
6815  287D
6816  287E
6817  287F
6818  2880
6819  2881
6820  2882
6821  2883
6822  2884
6823  2885
6824  2886
6825  2887
6826  2888
6827  2889
6828  288A
6829  288B
6830  288C
6831  288D
6832  288E
6833  288F
6834  2890
6835  2891
6836  2892
6837  2893
6838  2894
6839  2895
6840  2896
6841  2897
6842  2898
6843  2899
6844  289A
6845  289B
6846  289C
6847  289D
6848  289E
6849  289F
6850  28A0
6851  28A1
6852  28A2
6853  28A3
6854  28A4
6855  28A5
6856  28A6
6857  28A7
6858  28A8
6859  28A9
6860  28AA
6861  28AB
6862  28AC
6863  28AD
6864  28AE
6865  28AF
6866  28B0
6867  28B1
6868  28B2
6869  28B3
6870  28B4
6871  28B5
6872  28B6
6873  28B7
6874  28B8
6875  28B9
6876  28BA
6877  28BB
6878  28BC
6879  28BD
6880  28BE
6881  28BF
6882  28C0
6883  28C1
6884  28C2
6885  28C3
6886  28C4
6887  28C5
6888  28C6
6889  28C7
6890  28C8
6891  28C9
6892  28CA
6893  28CB
6894  28CC
6895  28CD
6896  28CE
6897  28CF
6898  28D0
6899  28D1
6900  28D2
6901  28D3
6902  28D4
6903  28D5
6904  28D6
6905  28D7
6906  28D8
6907  28D9
6908  28DA
6909  28DB
6910  28DC
6911  28DD
6912  28DE
6913  28DF
6914  28E0
6915  28E1
6916  28E2
6917  28E3
6918  28E4
6919  28E5
6920  28E6
6921  28E7
6922  28E8
6923  28E9
6924  28EA
6925  28EB
6926  28EC
6927  28ED
6928  28EE
6929  28EF
6930  28F0
6931  28F1
6932  28F2
6933  28F3
6934  28F4
6935  28F5
6936  28F6
6937  28F7
6938  28F8
6939  28F9
6940  28FA
6941  28FB
6942  28FC
6943  28FD
6944  28FE
6945  28FF
6946  2900
6947  2901
6948  2902
6949  2903
6950  2904
6951  2905
6952  2906
6953  2907
6954  2908
6955  2909
6956  290A
6957  290B
6958  290C
6959  290D
6960  290E
6961  290F
6962  2910
6963  2911
6964  2912
6965  2913
6966  2914
6967  2915
6968  2916
6969  2917
6970  2918
6971  2919
6972  291A
6973  291B
6974  291C
6975  291D
6976  291E
6977  291F
6978  2920
6979  2921
6980  2922
6981  2923
6982  2924
6983  2925
6984  2926
6985  2927
6986  2928
6987  2929
6988  292A
6989  292B
6990  292C
6991  292D
6992  292E
6993  292F
6994  2930
6995  2931
6996  2932
6997  2933
6998  2934
6999  2935
7000  2936
7001  2937
7002  2938
7003  2939
7004  293A
7005  293B
7006  293C
7007  293D
7008  293E
7009  293F
7010  2940
7011  2941
7012  2942
7013  2943
7014  2944
7015  2945
7016  2946
7017  2947
7018  2948
7019  2949
7020  294A
7021  294B
7022  294C
7023  294D
7024  294E
7025  294F
7026  2950
7027  2951
7028  2952
7029  2953
7030  2954
7031  2955
7032  2956
7033  2957
7034  2958
7035  2959
7036  295A
7037  295B
7038  295C
7039  295D
7040  295E
7041  295F
7042  2960
7043  2961
7044  2962
7045  2963
7046  2964
7047  2965
7048  2966
7049  2967
7050  2968
7051  2969
7052  296A
7053  296B
7054  296C
7055  296D
7056  296E
7057  296F
7058  2970
7059  2971
7060  2972
7061  2973
7062  2974
7063  2975
7064  2976
7065  2977
7066  2978
7067  2979
7068  297A
7069  297B
7070  297C
7071  297D
7072  297E
7073  297F
7074  2980
7075  2981
7076  2982
7077  2983
7078  2984
7079  2985
7080  2986
7081  2987
7082  2988
7083  2989
7084  298A
7085  298B
7086  298C
7087  298D
7088  298E
7089  298F
7090  2990
7091  2991
7092  2992
7093  2993
7094  2994
7095  2995
7096  2996
7097  2997
7098  2998
7099  2999
7100  299A
7101  299B
7102  299C
7103  299D
7104  299E
7105  299F
7106  29A0
7107  29A1
7108  29A2
7109  29A3
7110  29A4
7111  29A5
7112  29A6
7113  29A7
7114  29A8
7115  29A9
7116  29AA
7117  29AB
7118  29AC
7119  29AD
7120  29AE
7121  29AF
7122  29B0
7123  29B1
7124  29B2
7125  29B3
7126  29B4
7127  29B5
7128  29B6
7129  29B7
7130  29B8
7131  29B9
7132  29BA
7133  29BB
7134  29BC
7135  29BD
7136  29BE
7137  29BF
7138  29C0
7139  29C1
7140  29C2
7141  29C3
7142  29C4
7143  29C5
7144  29C6
7145  29C7
7146  29C8
7147  29C9
7148  29CA
7149  29CB
7150  29CC
7151  29CD
7152  29CE
7153  29CF
7154  29D0
7155  29D1
7156  29D2
7157  29D3
7158  29D4
7159  29D5
7160  29D6
7161  29D7
7162  29D8
7163  29D9
7164  29DA
7165  29DB
7166  29DC
7167  29DD
7168  29DE
7169  29DF
7170  29E0
7171  29E1
7172  29E2
7173  29E3
7174  29E4
7175  29E5
7176  29E6
7177  29E7
7178  29E8
7179  29E9
7180  29EA
7181  29EB
7182  29EC
7183  29ED
7184  29EE
7185  29EF
7186  29F0
7187  29F1
7188  29F2
7189  29F3
7190  29F4
7191  29F5
7192  29F6
7193  29F7
7194  29F8
7195  29F9
7196  29FA
7197  29FB
7198  29FC
7199  29FD
7200  29FE
7201  29FF
7202  2A00
7203  2A01
7204  2A02
7205  2A03
7206  2A04
7207  2A05
7208  2A06
7209  2A07
7210  2A08
7211  2A09
7212  2A0A
7213  2A0B
7214  2A0C
7215  2A0D
7216  2A0E
7217  2A0F
7218  2A10
7219  2A11
7220  2A12
7221  2A13
7222  2A14
7223  2A15
7224  2A16
7225  2A17
7226  2A18
7227  2A19
7228  2A1A
7229  2A1B
7230  2A1C
7231  2A1D
7232  2A1E
7233  2A1F
7234  2A20
7235  2A21
7236  2A22
7237  2A23
7238  2A24
7239  2A25
7240  2A26
7241  2A27
7242  2A28
7243  2A29
7244  2A2A
7245  2A2B
7246  2A2C
7247  2A2D
7248  2A2E
7249  2A2F
7250  2A30
7251  2A31
7252  2A32
7253  2A33
7254  2A34
7255  2A35
7256  2A36
7257  2A37
7258  2A38
7259  2A39
7260  2A3A
7261  2A3B
7262  2A3C
7263  2A3D
7264  2A3E
7265  2A3F
7266  2A40
7267  2A41
7268  2A42
7269  2A43
7270  2A44
7271  2A45
7272  2A46
7273  2A47
7274  2A48
7275  2A49
7276  2A4A
7277  2A4B
7278  2A4C
7279  2A4D
7280  2A4E
7281  2A4F
7282  2A50
7283  2A51
7284  2A52
7285  2A53
7286  2A54
7287  2A55
7288  2A56
7289  2A57
7290  2A58
7291  2A59
7292  2A5A
7293  2A5B
7294  2A5C
7295  2A5D
7296  2A5E
7297  2A5F
7298  2A60
7299  2A61
7300  2A62
7301  2A63
7302  2A64
7303  2A65
7304  2A66
7305  2A67
7306  2A68
7307  2A69
7308  2A6A
7309  2A6B
7310  2A6C
7311  2A6D
7312  2A6E
7313  2A6F
7314  2A70
7315  2A71
7316  2A72
7317  2A73
7318  2A74
7319  2A75
7320  2A76
7321  2A77
7322  2A78
7323  2A79
7324  2A7A
7325  2A7B
7326  2A7C
7327  2A7D
7328  2A7E
7329  2A7F
7330  2A80
7331  2A81
7332  2A82
7333  2A83
7334  2A84
7335  2A85
7336  2A86
7337  2A87
7338  2A88
7339  2A89
7340  2A8A
7341  2A8B
7342  2A8C
7343  2A8D
7344  2A8E
7345  2A8F
7346  2A90
7347  2A91
7348  2A92
7349  2A93
7350  2A94
7351  2A95
7352  2A96
7353  2A97
7354  2A98
7355  2A99
7356  2A9A
7357  2A9B
7358  2A9C
7359  2A9D
7360  2A9E
7361  2A9F
7362  2AA0
7363  2AA1
7364  2AA2
7365  2AA3
7366  2AA4
7367  2AA5
7368  2AA6
7369  2AA7
7370  2AA8
7371  2AA9
7372  2AAA
7373  2AAB
7374  2AAC
7375  2AAD
7376  2AAE
7377  2AAF
7378  2AB0
7379  2AB1
7380  2AB2
7381  2AB3
7382  2AB4
7383  2AB5
7384  2AB6
7385  2AB7
7386  2AB8
7387  2AB9
7388  2ABA
7389  2ABB
7390  2ABC
7391  2ABD
7392  2ABE
7393  2ABF
7394  2AC0
7395  2AC1
7396  2AC2
7397  2AC3
7398  2AC4
7399  2AC5
7400  2AC6
7401  2AC7
7402  2AC8
7403  2AC9
7404  2ACA
7405  2ACB
7406  2ACC
7407  2ACD
7408  2ACE
7409  2ACF
7410  2AD0
7411  2AD1
7412  2AD2
7413  2AD3
7414  2AD4
7415  2AD5
7416  2AD6
7417  2AD7
7418  2AD8
7419  2AD9
7420  2ADA
7421  2ADB
7422  2ADC
7423  2ADD
7424  2ADE
7425  2ADF
7426  2AE0
7427  2AE1
7428  2AE2
7429  2AE3
7430  2AE4
7431  2AE5
7432  2AE6
7433  2AE7
7434  2AE8
7435  2AE9
7436  2AEA
7437  2AEB
7438  2AEC
7439  2AED
7440  2AEE
7441  2AEF
7442  2AF0
7443  2AF1
7444  2AF2
7445  2AF3
7446  2AF4
7447  2AF5
7448  2AF6
7449  2AF7
7450  2AF8
7451  2AF9
7452  2AFA
7453  2AFB
7454  2AFC
7455  2AFD
7456  2AFE
7457  2AFF
7458  2B00
7459  2B01
7460  2B02
7461  2B03
7462  2B04
7463  2B05
7464  2B06
7465  2B07
7466  2B08
7467  2B09
7468  2B0A
7469  2B0B
7470  2B0C
7471  2B0D
7472  2B0E
7473  2B0F
7474  2B10
7475  2B11
7476  2B12
7477  2B13
7478  2B14
7479  2B15
7480  2B16
7481  2B17
7482  2B18
7483  2B19
7484  2B1A
7485  2B1B
7486  2B1C
7487  2B1D
7488  2B1E
7489  2B1F
7490  2B20
7491  2B21
7492  2B22
7493  2B23
7494  2B24
7495  2B25
7496  2B26
7497  2B27
7498  2B28
7499  2B29
7500  2B2A
7501  2B2B
7502  2B2C
7503  2B2D
7504  2B2E
7505  2B2F
7506  2B30
7507  2B31
7508  2B32
7509  2B33
7510  2B34
7511  2B35
7512  2B36
7513  2B37
7514  2B38
7515  2B39
7516  2B3A
7517  2B3B
7518  2B3C
7519  2B3D
7520  2B3E
7521  2B3F
7522  2B40
7523  2B41
7524  2B42
7525  2B43
7526  2B44
7527  2B45
7528  2B46
7529  2B47
7530  2B48
7531  2B49
7532  2B4A
7533  2B4B
7534  2B4C
7535  2B4D
7536  2B4E
7537  2B4F
7538  2B50
7539  2B51
7540  2B52
7541  2B53
7542  2B54
7543  2B55
7544  2B56
7545  2B57
7546  2B58
7547  2B59
7548  2B5A
7549  2B5B
7550  2B5C
7551  2B5D
7552  2B5E
7553  2B5F
7554  2B60
7555  2B61
7556  2B62
7557  2B63
7558  2B64
7559  2B65
7560  2B66
7561  2B67
7562  2B68
7563  2B69
7564  2B6A
7565  2B6B
7566  2B6C
7567  2B6D
7568  2B6E
7569  2B6F
7570  2B70
7571  2B71
7572  2B72
7573  2B73
7574  2B74
7575  2B75
7576  2B76
7577  2B77
7578  2B78
7579  2B79
7580  2B7A
7581  2B7B
7582  2B7C
7583  2B7D
7584  2B7E
7585  2B7F
7586  2B80
7587  2B81
7588  2B82
7589  2B83
7590  2B84
7591  2B85
7592  2B86
7593  2B87
7594  2B88
7595  2B89
7596  2B8A
7597  2B8B
7598  2B8C
7599  2B8D
7600  2B8E
7601  2B8F
7602  2B90
7603  2B91
7604  2B92
7605  2B93
7606  2B94
7607  2B95
7608  2B96
7609  2B97
7610  2B98
7611  2B99
7612  2B9A
7613  2B9B
7614  2B9C
7615  2B9D
7616  2B9E
7617  2B9F
7618  2BA0
7619  2BA1
7620  2BA2
7621  2BA3
7622  2BA4
7623  2BA5
7624  2BA6
7625  2BA7
7626  2BA8
7627  2BA9
7628  2BAA
7629  2BAB
7630  2BAC
7631  2BAD
7632  2BAE
7633  2BAF
7634  2BB0
7635  2BB1
7636  2BB2
7637  2BB3
7638  2BB4
7639  2BB5
7640  2BB6
7641  2BB7
7642  2BB8
7643  2BB9
7644  2BBA
7645  2BBB
7646  2BBC
7647  2BBD
7648  2BBE
7649  2BBF
7650  2BC0
7651  2BC1
7652  2BC2
7653  2BC3
7654  2BC4
7655  2BC5
7656  2BC6
7657  2BC7
7658  2BC8
7659  2BC9
7660  2BCA
7661  2BCB
7662  2BCC
7663  2BCD
7664  2BCE
7665  2BCF
7666  2BD0
7667  2BD1
7668  2BD2
7669  2BD3
7670  2BD4
7671  2BD5
7672  2BD6
7673  2BD7
7674  2BD8
7675  2BD9
7676  2BDA
7677  2BDB
7678  2BDC
7679  2BDD
7680  2BDE
7681  2BDF
7682  2BE0
7683  2BE1
7684  2BE2
7685  2BE3
7686  2BE4
7687  2BE5
7688  2BE6
7689  2BE7
7690  2BE8
7691  2BE9
7692  2BEA
7693  2BEB
7694  2BEC
7695  2BED
7696  2BEE
7697  2BEF
7698  2BF0
7699  2BF1
7700  2BF2
7701  2BF3
7702  2BF4
7703  2BF5
7704  2BF6
7705  2BF7
7706  2BF8
7707  2BF9
7708  2BFA
7709  2BFB
7710  2BFC
7711  2BFD
7712  2BFE
7713  2BFF
7714  2C00
7715  2C01
7716  2C02
7717  2C03
7718  2C04
7719  2C05
7720  2C06
7721  2C07
7722  2C08
7723  2C09
7724  2C0A
7725  2C0B
7726  2C0C
7727  2C0D
7728  2C0E
7729  2C0F
7730  2C10
7731  2C11
7732  2C12
7733  2C13
7734  2C14
7735  2C15
7736  2C16
7737  2C17
7738  2C18
7739  2C19
7740  2C1A
7741  2C1B
7742  2C1C
7743  2C1D
7744  2C1E
7745  2C1F
7746  2C20
7747  2C21
7748  2C22
7749  2C23
7750  2C24
7751  2C25
7752  2C26
7753  2C27
7754  2C28
7755  2C29
7756  2C2A
7757  2C2B
7758  2C2C
7759  2C2D
7760  2C2E
7761  2C2F
7762  2C30
7763  2C31
7764  2C32
7765  2C33
7766  2C34
7767  2C35
7768  2C36
7769  2C37
7770  2C38
7771  2C39
7772  2C3A
7773  2C3B
7774  2C3C
7775  2C3D
7776  2C3E
7777  2C3F
7778  2C40
7779  2C41
7780  2C42
7781  2C43
7782  2C44
7783  2C45
7784  2C46
7785  2C47
7786  2C48
7787  2C49
7788  2C4A
7789  2C4B
7790  2C4C
7791  2C4D
7792  2C4E
7793  2C4F
7794  2C50
7795  2C51
7796  2C52
7797  2C53
7798  2C54
7799  2C55
7800  2C56
7801  2C57
7802  2C58
7803  2C59
7804  2C5A
7805  2C5B
7806  2C5C
7807  2C5D
7808  2C5E
7809  2C5F
7810  2C60
7811  2C61
7812  2C62
7813  2C63
7814  2C64
7815  2C65
7816  2C66
7817  2C67
7818  2C68
7819  2C69
7820  2C6A
7821  2C6B
7822  2C6C
7823  2C6D
7824  2C6E
7825  2C6F
7826  2C70
7827  2C71
7828  2C72
7829  2C73
7830  2C74
7831  2C75
7832  2C76
7833  2C77
7834  2C78
7835  2C79
7836  2C7A
7837  2C7B
7838  2C7C
7839  2C7D
7840  2C7E
7841  2C7F
7842  2C80
7843  2C81
7844  2C82
7845  2C83
7846  2C84
7847  2C85
7848  2C86
7849  2C87
7850  2C88
7851  2C89
7852  2C8A
7853  2C8B
7854  2C8C
7855  2C8D
7856  2C8E
7857  2C8F
7858  2C90
7859  2C91
7860  2C92
7861  2C93
7862  2C94
7863  2C95
7864  2C96
7865  2C97
7866  2C98
7867  2C99
7868  2C9A
7869  2C9B
7870  2C9C
7871  2C9D
7872  2C9E
7873  2C9F
7874  2CA0
7875  2CA1
7876  2CA2
7877  2CA3
7878  2CA4
7879  2CA5
7880  2CA6
7881  2CA7
7882  2CA8
7883  2CA9
7884  2CAA
7885  2CAB
7886  2CAC
7887  2CAD
7888  2CAE
7889  2CAF
7890  2CB0
7891  2CB1
7892  2CB2
7893  2CB3
7894  2CB4
7895  2CB5
7896  2CB6
7897  2CB7
7898  2CB8
7899  2CB9
7900  2CBA
7901  2CBB
7902  2CBC
7903  2CBD
7904  2CBE
7905  2CBF
7906  2CC0
7907  2CC1
7908  2CC2
7909  2CC3
7910  2CC4
7911  2CC5
7912  2CC6
7913  2CC7
7914  2CC8
7915  2CC9
7916  2CCA
7917  2CCB
7918  2CCC
7919  2CCD
7920  2CCE
7921  2CCF
7922  2CD0
7923  2CD1
7924  2CD2
7925  2CD3
7926  2CD4
7927  2CD5
7928  2CD6
7929  2CD7
7930  2CD8
7931  2CD9
7932  2CDA
7933  2CDB
7934  2CDC
7935  2CDD
7936  2CDE
7937  2CDF
7938  2CE0
7939  2CE1
7940  2CE2
7941  2CE3
7942  2CE4
7943  2CE5
7944  2CE6
7945  2CE7
7946  2CE8
7947  2CE9
7948  2CEA
7949  2CEB
7950  2CEC
7951  2CED
7952  2CEE
7953  2CEF
7954  2CF0
7955  2CF1
7956  2CF2
7957  2CF3
7958  2CF4
7959  2CF5
7960  2CF6
7961  2CF7
7962  2CF8
7963  2CF9
7964  2CFA
7965  2CFB
7966  2CFC
7967  2CFD
7968  2CFE
7969  2CFF
7970  2D00
7971  2D01
7972  2D02
7973  2D03
7974  2D04
7975  2D05
7976  2D06
7977  2D07
7978  2D08
7979  2D09
7980  2D0A
7981  2D0B
7982  2D0C
7983  2D0D
7984  2D0E
7985  2D0F
7986  2D10
7987  2D11
7988  2D12
7989  2D13
7990  2D14
7991  2D15
7992  2D16
7993  2D17
7994  2D18
7995  2D19
7996  2D1A
7997  2D1B
7998  2D1C
7999  2D1D
8000  2D1E
8001  2D1F
8002  2D20
8003  2D21
8004  2D22
8005  2D23
8006  2D24
8007  2D25
8008  2D26
8009  2D27
8010  2D28
8011  2D29
8012  2D2A
8013  2D2B
8014  2D2C
8015  2D2D
8016  2D2E
8017  2D2F
8018  2D30
8019  2D31
8020  2D32
8021  2D33
8022  2D34
8023  2D35
8024  2D36
8025  2D37
8026  2D38
8027  2D39
8028  2D3A
8029  2D3B
8030  2D3C
8031  2D3D
8032  2D3E
8033  2D3F
8034  2D40
8035  2D41
8036  2D42
8037  2D43
8038  2D44
8039  2D45
8040  2D46
8041  2D47
8042  2D48
8043  2D49
8044  2D4A
8045  2D4B
8046  2D4C
8047  2D4D
8048  2D4E
8049  2D4F
8050  2D50
8051  2D51
8052  2D52
8053  2D53
8054  2D54
8055  2D55
8056  2D56
8057  2D57
8058  2D58
8059  2D59
8060  2D5A
8061  2D5B
8062  2D5C
8063  2D5D
8064  2D5E
8065  2D5F
8066  2D60
8067  2D61
8068  2D62
8069  2D63
8070  2D64
8071  2D65
8072  2D66
8073  2D67
8074  2D68
8075  2D69
8076  2D6A
8077  2D6B
8078  2D6C
8079  2D6D
8080  2D6E
8081  2D6F
8082  2D70
8083  2D71
8084  2D72
8085  2D73
8086  2D74
8087  2D75
8088  2D76
8089  2D77
8090  2D78
8091  2D79
8092  2D7A
8093  2D7B
8094  2D7C
8095  2D7D
8096  2D7E
8097  2D7F
8098  2D80
8099  2D81
8100  2D82
8101  2D83
8102  2D84
8103  2D85
8104  2D86
8105  2D87
8106  2D88
8107  2D89
8108  2D8A
8109  2D8B
8110  2D8C
8111  2D8D
8112  2D8E
8113  2D8F
8114  2D90
8115  2D91
8116  2D92
8117  2D93
8118  2D94
8119  2D95
8120  2D96
8121  2D97
8122  2D98
8123  2D99
8124  2D9A
8125  2D9B
8126  2D9C
8127  2D9D
8128  2D9E
8129  2D9F
8130  2DA0
8131  2DA1
8132  2DA2
8133  2DA3
8134  2DA4
8135  2DA5
8136  2DA6
8137  2DA7
8138  2DA8
8139  2DA9
8140  2DAA
8141  2DAB
8142  2DAC
8143  2DAD
8144  2DAE
8145  2DAF
8146  2DB0
8147  2DB1
8148  2DB2
8149  2DB3
8150  2DB4
8151  2DB5
8152  2DB6
8153  2DB7
8154  2DB8
8155  2DB9
8156  2DBA
8157  2DBB
8158  2DBC
8159  2DBD
8160  2DBE
8161  2DBF
8162  2DC0
8163  2DC1
8164  2DC2
8165  2DC3
8166  2DC4
8167  2DC5
8168  2DC6
8169  2DC7
8170  2DC8
8171  2DC9
8172  2DCA
8173  2DCB
8174  2DCC
8175  2DCD
8176  2DCE
8177  2DCF
8178  2DD0
8179  2DD1
8180  2DD2
8181  2DD3
8182  2DD4
8183  2DD5
8184  2DD6
8185  2DD7
8186  2DD8
8187  2DD9
8188  2DDA
8189  2DDB
8190  2DDC
8191  2DDD
8192  2DDE
8193  2DDF
8194  2DE0
8195  2DE1
8196  2DE2
8197  2DE3
8198  2DE4
8199  2DE5
8200  2DE6
8201  2DE7
8202  2DE8
8203  2DE9
8204  2DEA
8205  2DEB
8206  2DEC
8207  2DED
8208  2DEE
8209  2DEF
8210  2DF0
8211  2DF1
8212  2DF2
8213  2DF3
8214  2DF4
8215  2DF5
8216  2DF6
8217  2DF7
8218  2DF8
8219  2DF9
8220  2DFA
8221  2DFB
8222  2DFC
8223  2DFD
8224  2DFE
8225  2DFF
8226  2E00
8227  2E01
8228  2E02
8229  2E03
8230  2E04
8231  2E05
8232  2E06
8233  2E07
8234  2E08
8235  2E09
8236  2E0A
8237  2E0B
8238  2E0C
8239  2E0D
8240  2E0E
8241  2E0F
8242  2E10
8243  2E11
8244  2E12
8245  2E13
8246  2E14
8247  2E15
8248  2E16
8249  2E17
8250  2E18
8251  2E19
8252  2E1A
8253  2E1B
8254  2E1C
8255  2E1D
8256  2E1E
8257  2E1F
8258  2E20
8259  2E21
8260  2E22
8261  2E23
8262  2E24
8263  2E25
8264  2E26
8265  2E27
8266  2E28
8267  2E29
8268  2E2A
8269  2E2B
8270  2E2C
8271  2E2D
8272  2E2E
8273  2E2F
8274  2E30
8275  2E31
8276  2E32
8277  2E33
8278  2E34
8279  2E35
8280  2E36
8281  2E37
8282  2E38
8283  2E39
8284  2E3A
8285  2E3B
8286  2E3C
8287  2E3D
8288  2E3E
8289  2E3F
8290  2E40
8291  2E41
8292  2E42
8293  2E43
8294  2E44
8295  2E45
8296  2E46
8297  2E47
8298  2E48
8299  2E49
8300  2E4A
8301  2E4B
8302  2E4C
8303  2E4D
8304  2E4E
8305  2E4F
8306  2E50
8307  2E51
8308  2E52
8309  2E53
8310  2E54
8311  2E55
8312  2E56
8313  2E57
8314  2E58
8315  2E59
8316  2E5A
8317  2E5B
8318  2E5C
8319  2E5D
8320  2E5E
8321  2E5F
8322  2E60
8323  2E61
8324  2E62
8325  2E63
8326  2E64
8327  2E65
8328  2E66
8329  2E67
8330  2E68
8331  2E69
8332  2E6A
8333  2E6B
8334  2E6C
8335  2E6D
8336  2E6E
8337  2E6F
8338  2E70
8339  2E71
8340  2E72
8341  2E73
8342  2E74
8343  2E75
8344  2E76
8345  2E77
8346  2E78
8347  2E79
8348  2E7A
8349  2E7B
8350  2E7C
8351  2E7D
8352  2E7E
8353  2E7F
8354  2E80
8355  2E81
8356  2E82
8357  2E83
8358  2E84
8359  2E85
8360  2E86
8361  2E87
8362  2E88
8363  2E89
8364  2E8A
8365  2E8B
8366  2E8C
8367  2E8D
8368  2E8E
8369  2E8F
8370  2E90
8371  2E91
8372  2E92
8373  2E93
8374  2E94
8375  2E95
8376  2E96
8377  2E97
8378  2E98
8379  2E99
8380  2E9A
8381  2E9B
8382  2E9C
8383  2E9D
8384  2E9E
8385  2E9F
8386  2EA0
8387  2EA1
8388  2EA2
8389  2EA3
8390  2EA4
8391  2EA5
8392  2EA6
8393  2EA7
8394  2EA8
8395  2EA9
8396  2EAA
8397  2EAB
8398  2EAC
8399  2EAD
8400  2EAE
8401  2EAF
8402  2EB0
8403  2EB1
8404  2EB2
8405  2EB3
8406  2EB4
8407  2EB5
8408  2EB6
8409  2EB7
8410  2EB8
8411  2EB9
8412  2EBA
8413  2EBB
8414  2EBC
8415  2EBD
8416  2EBE
8417  2EBF
8418  2EC0
8419  2EC1
8420  2EC2
8421  2EC3
8422  2EC4
8423  2EC5
8424  2EC6
8425  2EC7
8426  2EC8
8427  2EC9
8428  2ECA
8429  2ECB
8430  2ECC
8431  2ECD
8432  2ECE
8433  2ECF
8434  2ED0
8435  2ED1
8436  2ED2
8437  2ED3
8438  2ED4
8439  2ED5
8440  2ED6
8441  2ED7
8442  2ED8
8443  2ED9
8444  2EDA
8445  2EDB
8446  2EDC
8447  2EDD
8448  2EDE
8449  2EDF
8450  2EE0
8451  2EE1
8452  2EE2
8453  2EE3
8454  2EE4
8455  2EE5
8456  2EE6
8457  2EE7
8458  2EE8
8459  2EE9
8460  2EEA
8461  2EEB
8462  2EEC
8463  2EED
8464  2EEE
8465  2EEF
8466  2EF0
8467  2EF1
8468  2EF2
8469  2EF3
8470  2EF4
8471  2EF5
8472  2EF6
8473  2EF7
8474  2EF8
8475  2EF9
8476  2EFA
8477  2EFB
8478  2EFC
8479  2EFD
8480  2EFE
8481  2EFF
8482  2F00
8483  2F01
8484  2F02
8485  2F03
8486  2F04
8487  2F05
8488  2F06
8489  2F07
8490  2F08
8491  2F09
8492  2F0A
8493  2F0B
8494  2F0C
8495  2F0D
8496  2F0E
8497  2F0F
8498  2F10
8499  2F11
8500  2F12
8501  2F13
8502  2F14
8503  2F15
8504  2F16
8505  2F17
8506  2F18
8507  2F19
8508  2F1A
8509  2F1B
8510  2F1C
8511  2F1D
8512  2F1E
8513  2F1F
8514  2F20
8515  2F21
8516  2F22
8517  2F23
8518  2F24
8519  2F25
8520  2F26
8521  2F27
8522  2F28
8523  2F29
8524  2F2A
8525  2F2B
8526  2F2C
8527  2F2D
8528  2F2E
8529  2F2F
8530  2F30
8531  2F31
8532  2F32
8533  2F33
8534  2F34
8535  2F35
8536  2F36
8537  2F37
8538  2F38
8539  2F39
8540  2F3A
8541  2F3B
8542  2F3C
8543  2F3D
8544  2F3E
8545  2F3F
8546  2F40
8547  2F41
8548  2F42
8549  2F43
8550  2F44
8551  2F45
8552  2F46
8553  2F47
8554  2F48
8555  2F49
8556  2F4A
8557  2F4B
8558  2F4C
8559  2F4D
8560  2F4E
8561  2F4F
8562  2F50
8563  2F51
8564  2F52
8565  2F53
8566  2F54
8567  2F55
8568  2F56
8569  2F57
8570  2F58
8571  2F59
8572  2F5A
8573  2F5B
8574  2F5C
8575  2F5D
8576  2F5E
8577  2F5F
8578  2F60
8579  2F61
8580  2F62
8581  2F63
8582  2F64
8583  2F65
8584  2F66
8585  2F67
8586  2F68
8587  2F69
8588  2F6A
8589  2F6B
8590  2F6C
8591  2F6D
8592  2F6E
8593  2F6F
8594  2F70
8595  2F71
8596  2F72
8597  2F73
8598  2F74
8599  2F75
8600  2F76
8601  2F77
8602  2F78
8603  2F79
8604  2F7A
8605  2F7B
8606  2F7C
8607  2F7D
8608  2F7E
8609  2F7F
8610  2F80
8611  2F81
8612  2F82
8613  2F83
8614  2F84
8615  2F85
8616  2F86
8617  2F87
8618  2F88
8619  2F89
8620  2F8A
8621  2F8B
8622  2F8C
8623  2F8D
8624  2F8E
8625  2F8F
8626  2F90
8627  2F91
8628  2F92
8629  2F93
8630  2F94
8631  2F95
8632  2F96
8633  2F97
8634  2F98
8635  2F99
8636  2F9A
8637  2F9B
8638  2F9C
8639  2F9D
8640  2F9E
8641  2F9F
8642  2FA0
8643  2FA1
8644  2FA2
8645  2FA3
8646  2FA4
8647  2FA5
8648  2FA6
8649  2FA7
8650  2FA8
8651  2FA9
8652  2FAA
8653  2FAB
8654  2FAC
8655  2FAD
8656  2FAE
8657  2FAF
8658  2FB0
8659  2FB1
8660  2FB2
8661  2FB3
8662  2FB4
8663  2FB5
8664  2FB6
8665  2FB7
8666  2FB8
8667  2FB9
8668  2FBA
8669  2FBB
8670  2FBC
8671  2FBD
8672  2FBE
8673  2FBF
8674  2FC0
8675  2FC1
8676  2FC2
8677  2FC3
8678  2FC4
8679  2FC5
8680  2FC6
8681  2FC7
8682  2FC8
8683  2FC9
8684  2FCA
8685  2FCB
8686  2FCC
8687  2FCD
8688  2FCE
8689  2FCF
8690  2FD0
8691  2FD1
8692  2FD2
8693  2FD3
8694  2FD4
8695  2FD5
8696  2FD6
8697  2FD7
8698  2FD8
8699  2FD9
8700  2FDA
8701  2FDB
8702  2FDC
8703  2FDD
8704  2FDE
8705  2FDF
8706  2FE0
8707  2FE1
8708  2FE2
8709  2FE3
8710  2FE4
8711  2FE5
8712  2FE6
8713  2FE7
8714  2FE8
8715  2FE9
8716  2FEA
8717  2FEB
8718  2FEC
8719  2FED
8720  2FEE
8721  2FEF
8722  2FF0
8723  2FF1
8724  2FF2
8725  2FF3
8726  2FF4
8727  2FF5
8728  2FF6
8729  2FF7
8730  2FF8
8731  2FF9
8732  2FFA
8733  2FFB
8734  2FFC
8735  2FFD
8736  2FFE
8737  2FFF
8738  3000
8739  3001
8740  3002
8741  3003
8742  3004
8743  3005
8744  3006
8745  3007
8746  3008
8747  3009
8748  300A
8749  300B
8750  300C
8751  300D
8752  300E
8753  300F
8754  3010
8755  3011
8756  3012
8757  3013
8758  3014
8759  3015
8760  3016
8761  3017
8762  3018
8763  3019
8764  301A
8765  301B
8766  301C
8767  301D
8768  301E
8769  301F
8770  3020
8771  3021
8772  3022
8773  3023
8774  3024
8775  3025
8776  3026
8777  3027
8778  3028
8779  3029
8780  302A
8781  302B
8782  302C
8783  302D
8784  302E
8785  302F
8786  3030
8787  3031
8788  3032
8789  3033
8790  3034
8791  3035
8792  3036
8793  3037
8794  3038
8795  3039
8796  303A
8797  303B
8798  303C
8799  303D
8800  303E
8801  303F
8802  3040
8803  3041
8804  3042
8805  3043
8806  3044
8807  3045
8808  3046
8809  3047
8810  3048
8811  3049
8812  304A
8813  304B
8814  304C
8815  304D
8816  304E
8817  304F
8818  3050
8819  3051
8820  3052
8821  3053
8822  3054
8823  3055
8824  3056
8825  3057
8826  3058
8827  3059
8828  305A
8829  305B
8830  305C
8831  305D
8832  305E
8833  305F
8834  3060
8835  3061
8836  3062
8837  3063
8838  3064
8839  3065
8840  3066
8841  3067
8842  3068
8843  3069
8844  306A
8845  306B
8846  306C
8847  306D
8848  306E
8849  306F
8850  3070
8851  3071
8852  3072
8853  3073
8854  3074
8855  3075
8856  3076
8857  3077
8858  3078
8859  3079
8860  307A
8861  307B
8862  307C
8863  307D
8864  307E
8865  307F
8866  3080
8867  3081
8868  3082
8869  3083
8870  3084
8871  3085
8872  3086
8873  3087
8874  3088
8875  3089
8876  308A
8877  308B
8878  308C
8879  308D
8880  308E
8881  308F
8882  3090
8883  3091
8884  3092
8885  3093
8886  3094
8887  3095
8888  3096
8889  3097
8890  3098
8891  3099
8892  309A
8893  309B
8894  309C
8895  309D
8896  309E
8897  309F
8898  30A0
8899  30A1
8900  30A2
8901  30A3
8902  30A4
8903  30A5
8904  30A6
8905  30A7
8906  30A8
8907  30A9
8908  30AA
8909  30AB
8910  30AC
8911  30AD
8912  30AE
8913  30AF
8914  30B0
8915  30B1
8916  30B2
8917  30B3
8918  30B4
8919  30B5
8920  30B6
8921  30B7
8922  30B8
8923  30B9
8924  30BA
8925  30BB
8926  30BC
8927  30BD
8928  30BE
8929  30BF
8930  30C0
8931  30C1
8932  30C2
8933  30C3
8934  30C4
8935  30C5
8936  30C6
8937  30C7
8938  30C8
8939  30C9
8940  30CA
8941  30CB
8942  30CC
8943  30CD
8944  30CE
8945  30CF
8946  30D0
8947  30D1
8948  30D2
8949  30D3
8950  30D4
8951  30D5
8952  30D6
8953  30D7
8954  30D8
8955  30D9
8956  30DA
8957  30DB
8958  30DC
8959  30DD
8960  30DE
8961  30DF
8962  30E0
8963  30E1
8964  30E2
8965  30E3
8966  30E4
8967  30E5
8968  30E6
8969  30E7
8970  30E8
8971  30E9
8972  30EA
8973  30EB
8974  30EC
8975  30ED
8976  30EE
8977  30EF
8978  30F0
8979  30F1
8980  30F2
8981  30F3
8982  30F4
8983  30F5
8984  30F6
8985  30F7
8986  30F8
8987  30F9
8988  30FA
8989  30FB
8990  30FC
8991  30FD
8992  30FE
8993  30FF
8994  3100
8995  3101
8996  3102
8997  3103
8998  3104
8999  3105
9000  3106
9001  3107
9002  3108
9003  3109
9004  310A
9005  310B
9006  310C
9007  310D
9008  310E
9009  310F
9010  3110
9011  3111
9012  3112
9013  3113
9014  3114
9015  3115
9016  3116
9017  3117
9018  3118
9019  3119
9020  311A
9021  311B
9022  311C
9023  311D
9024  311E
9025  311F
9026  3120
9027  3121
9028  3122
9029  3123
9030  3124
9031  3125
9032  3126
9033  3127
9034  3128
9035  3129
9036  312A
9037  312B
9038  312C
9039  312D
9040  312E
9041  312F
9042  3130
9043  3131
9044  3132
9045  3133
9046  3134
9047  3135
9048  3136
9049  3137
9050  3138
9051  3139
9052  313A
9053  313B
9054  313C
9055  313D
9056  313E
9057  313F
9058  3140
9059  3141
9060  3142
9061  3143
9062  3144
9063  3145
9064  3146
9065  3147
9066  3148
9067  3149
9068  314A
9069  314B
9070  314C
9071  314D
9072  314E
9073  314F
9074  3150
9075  3151
9076  3152
9077  3153
9078  3154
9079  3155
9080  3156
9081  3157
9082  3158
9083  3159
9084  315A
9085  315B
9086  315C
9087  315D
9088  315E
9089  315F
9090  3160
9091  3161
9092  3162
9093  3163
9094  3164
9095  3165
9096  3166
9097  3167
9098  3168
9099  3169
9100  316A
9101  316B
9102  316C
9103  316D
9104  316E
9105  316F
9106  3170
9107  3171
9108  3172
9109  3173
9110  3174
9111  3175
9112  3176
9113  3177
9114  3178
9115  3179
9116  317A
9117  317B
9118  317C
9119  317D
9120  317E
9121  317F
9122  3180
9123  3181
9124  3182
9125  3183
9126  3184
9127  3185
9128  3186
9129  3187
9130  3188
9131  3189
9132  318A
9133  318B
9134  318C
9135  318D
9136  318E
9137  318F
9138  3190
9139  3191
9140  3192
9141  3193
9142  3194
9143  3195
9144  3196
9145  3197
9146  3198
9147  3199
9148  319A
9149  319B
9150  319C
9151  319D
9152  319E
9153  319F
9154  31A0
9155  31A1
9156  31A2
9157  31A3
9158  31A4
9159  31A5
9160  31A6
9161  31A7
9162  31A8
9163  31A9
9164  31AA
9165  31AB
9166  31AC
9167  31AD
9168  31AE
9169  31AF
9170  31B0
9171  31B1
9172  31B2
9173  31B3
9174  31B4
9175  31B5
9176  31B6
9177  31B7
9178  31B8
9179  31B9
9180  31BA
9181  31BB
9182  31BC
9183  31BD
9184  31BE
9185  31BF
9186  31C0
9187  31C1
9188  31C2
9189  31C3
9190  31C4
9191  31C5
9192  31C6
9193  31C7
9194  31C8
9195  31C9
9196  31CA
9197  31CB
9198  31CC
9199  31CD
9200  31CE
9201  31CF
9202  31D0
9203  31D1
9204  31D2
9205  31D3
9206  31D4
9207  31D5
9208  31D6
9209  31D7
9210  31D8
9211  31D9
9212  31DA
9213  31DB
9214  31DC
9215  31DD
9216  31DE
9217  31DF
9218  31E0
9219  31E1
9220  31E2
9221  31E3
9222  31E4
9223  31E5
9224  31E6
9225  31E7
9226  31E8
9227  31E9
9228  31EA
9229  31EB
9230  31EC
9231  31ED
9232  31EE
9233  31EF
9234  31F0
9235  31F1
9236  31F2
9237  31F3
9238  31F4
9239  31F5
9240  31F6
9241  31F7
9242  31F8
9243  31F9
9244  31FA
9245  31FB
9246  31FC
9247  31FD
9248  31FE
9249  31FF
9250  3200
9251  3201
9252  3202
9253  3203
9254  3204
9255  3205
9256  3206
9257  3207
9258  3208
9259  3209
9260  320A
9261  320B
9262  320C
9263  320D
9264  320E
9265  320F
9266  3210
9267  3211
9268  3212
9269  3213
9270  3214
9271  3215
9272  3216
9273  3217
9274  3218
9275  3219
9276  321A
9277  321B
9278  321C
9279  321D
9280  321E
9281  321F
9282  3220
9283  3221
9284  3222
9285  3223
9286  3224
9287  3225
9288  3226
9289  3227
9290  3228
9291  3229
9292  322A
9293  322B
9294  322C
9295  322D
9296  322E
9297  322F
9298  3230
9299  3231
9300  3232
9301  3233
9302  3234
9303  3235
9304  3236
9305  3237
9306  3238
9307  3239
9308  323A
9309  323B
9310  323C
9311  323D
9312  323E
9313  323F
9314  3240
9315  3241
9316  3242
9317  3243
9318  3244
9319  3245
9320  3246
9321  3247
9322  3248
9323  3249
9324  324A
9325  324B
9326  324C
9327  324D
9328  324E
9329  324F
9330  3250
9331  3251
9332  3252
9333  3253
9334  3254
9335  3255
9336  3256
9337  3257
9338  3258
9339  3259
9340  325A
9341  325B
9342  325C
9343  325D
9344  325E
9345  325F
9346  3260
9347  3261
9348  3262
9349  3263
9350  3264
9351  3265
9352  3266
9353  3267
9354  3268
9355  3269
9356  326A
9357  326B
9358  326C
9359  326D
9360  326E
9361  326F
9362  3270
9363  3271
9364  3272
9365  3273
9366  3274
9367  3275
9368  3276
9369  3277
9370  3278
9371  3279
9372  327A
9373  327B
9374  327C
9375  327D
9376  327E
9377  327F
9378  3280
9379  3281
9380  3282
9381  3283
9382  3284
9383  3285
9384  3286
9385  3287
9386  3288
9387  3289
9388  328A
9389  328B
9390  328C
9391  328D
9392  328E
9393  328F
9394  3290
9395  3291
9396  3292
9397  3293
9398  3294
9399  3295
9400  3296
9401  3297
9402  3298
9403  3299
9404  329A
9405  329B
9406  329C
9407  329D
9408  329E
9409  329F
9410  32A0
9411  32A1
9412  32A2
9413  32A3
9414  32A4
9415  32A5
9416  32A6
9417  32A7
9418  32A8
9419  32A9
9420  32AA
9421  32AB
9422  32AC
9423  32AD
9424  32AE
9425  32AF
9426  32B0
9427  32B1
9428  32B2
9429  32B3
9430  32B4
9431  32B5
9432  32B6
9433  32B7
9434  32B8
9435  32B9
9436  32BA
9437  32BB
9438  32BC
9439  32BD
9440  32BE
9441  32BF
9442  32C0
9443  32C1
9444  32C2
9445  32C3
9446  32C4
9447  32C5
9448  32C6
9449  32C7
9450  32C8
9451  32C9
9452  32CA
9453  32CB
9454  32CC
9455  32CD
9456  32CE
9457  32CF
9458  32D0
9459  32D1
9460  32D2
9461  32D3
9462  32D4
9463  32D5
9464  32D6
9465  32D7
9466  32D8
9467  32D9
9468  32DA
9469  32DB
9470  32DC
9471  32DD
9472  32DE
9473  32DF
9474  32E0
9475  32E1
9476  32E2
9477  32E3
9478  32E4
9479  32E5
9480  32E6
9481  32E7
9482  32E8
9483  32E9
9484  32EA
9485  32EB
9486  32EC
9487  32ED
9488  32EE
9489  32EF
9490  32F0
9491  32F1
9492  32F2
9493  32F3
9494  32F4
9495  32F5
9496  32F6
9497  32F7
9498  32F8
9499  32F9
9500  32FA
9501  32FB
9502  32FC
9503  32FD
9504  32FE
9505  32FF
9506  3300
9507  3301
9508  3302
9509  3303
9510  3304
9511  3305
9512  3306
9513  3307
9514  3308
9515  3309
9516  330A
9517  330B
9518  330C
9519  330D
9520  330E
9521  330F
9522  3310
9523  3311
9524  3312
9525  3313
9526  3314
9527  3315
9528  3316
9529  3317
9530  3318
9531  3319
9532  331A
9533  331B
9534  331C
9535  331D
9536  331E
9537  331F
9538  3320
9539  3321
9540  3322
9541  3323
9542  3324
9543  3325
9544  3326
9545  3327
9546  3328
9547  3329
9548  332A
9549  332B
9550  332C
9551  332D
9552  332E
9553  332F
9554  3330
9555  3331
9556  3332
9557  3333
9558  3334
9559  3335
9560  3336
9561  3337
9562  3338
9563  3339
9564  333A
9565  333B
9566  333C
9567  333D
9568  333E
9569  333F
9570  3340
9571  3341
9572  3342
9573  3343
9574  3344
9575  3345
9576  3346
9577  3347
9578  3348
9579  3349
9580  334A
9581  334B
9582  334C
9583  334D
9584  334E
9585  334F
9586  3350
9587  3351
9588  3352
9589  3353
9590  3354
9591  3355
9592  3356
9593  3357
9594  3358
9595  3359
9596  335A
9597  335B
9598  335C
9599  335D
9600  335E
9601  335F
9602  3360
9603  3361
9604  3362
9605  3363
9606  3364
9607  3365
9608  3366
9609  3367
9610  3368
9611  3369
9612  336A
9613  336B
9614  336C
9615  336D
9616  336E
9617  336F
9618  3370
9619  3371
9620  3372
9621  3373
9622  3374
9623  3375
9624  3376
9625  3377
9626  3378
9627  3379
9628  337A
9629  337B
9630  337C
9631  337D
9632  337E
9633  337F
9634  3380
9635  3381
9636  3382
9637  3383
9638  3384
9639  3385
9640  3386
9641  3387
9642  3388
9643  3389
9644  338A
9645  338B
9646  338C
9647  338D
9648  338E
9649  338F
9650  3390
9651  3391
9652  3392
9653  3393
9654  3394
9655  3395
9656  3396
9657  3397
9658  3398
9659  3399
9660  339A
9661  339B
9662  339C
9663  339D
9664  339E
9665  339F
9666  33A0
9667  33A1
9668  33A2
9669  33A3
9670  33A4
9671  33A5
9672  33A6
9673  33A7
9674  33A8
9675  33A9
9676  33AA
9677  33AB
9678  33AC
9679  33AD
9680  33AE
9681  33AF
9682  33B0
9683  33B1
9684  33B2
9685  33B3
9686  33B4
9687  33B5
9688  33B6
9689  33B7
9690  33B8
9691  33B9
9692  33BA
9693  33BB
9694  33BC
9695  33BD
9696  33BE
9697  33BF
9698  33C0
9699  33C1
9700  33C2
9701  33C3
9702  33C4
9703  33C5
9704  33C6
9705  33C7
9706  33C8
9707  33C9
9708  33CA
9709  33CB
9710  33CC
9711  33CD
9712  33CE
9713  33CF
9714  33D0
9715  33D1
9716  33D2
9717  33D3
9718  33D4
9719  33D5
9720  33D6
9721  33D7
9722  33D8
9723  33D9
9724  33DA
9725  33DB
9726  33DC
9727  33DD
9728  33DE
9729  33DF
9730  33E0
9731  33E1
9732  33E2
9733  33E3
9734  33E4
9735  33E5
9736  33E6
9737  33E7
9738  33E8
9739  33E9
9740  33EA
9741  33EB
9742  33EC
9743  33ED
9744  33EE
9745  33EF
9746  33F0
9747  33F1
9748  33F2
9749  33F3
9750  33F4
9751  33F5
9752  33F6
9753  33F7
9754  33F8
9755  33F9
9756  33FA
9757  33FB
9758  33FC
9759  33FD
9760  33FE
9761  33FF
9762  3400
9763  3401
9764  3402
9765  3403
9766  3404
9767  3405
9768  3406
9769  3407
9770  3408
9771  3409
9772  340A
9773  340B
9774  340C
9775  340D
9776  340E
9777  340F
9778  3410
9779  3411
9780  3412
9781  3413
9782  3414
9783  3415
9784  3416
9785  3417
9786  3418
9787  3419
9788  341A
9789  341B
9790  341C
9791  341D
9792  341E
9793  341F
9794  3420
9795  3421
9796  3422
9797  3423
9798  3424
9799  3425
9800  3426
9801  3427
9802  3428
9803  3429
9804  342A
9805  342B
9806  342C
9807  342D
9808  342E
9809  342F
9810  3430
9811  3431
9812  3432
9813  3433
9814  3434
9815  3435
9816  3436
9817  3437
9818  3438
9819  3439
9820  343A
9821  343B
9822  343C
9823  343D
9824  343E
9825  343F
9826  3440
9827  3441
9828  3442
9829  3443
9830  3444
9831  3445
9832  3446
9833  3447
9834  3448
9835  3449
9836  344A
9837  344B
9838  344C
9839  344D
9840  344E
9841  344F
9842  3450
9843  3451
9844  3452
9845  3453
9846  3454
9847  3455
9848  3456
9849  3457
9850  3458
9851  3459
9852  345A
9853  345B
9854  345C
9855  345D
9856  345E
9857  345F
9858  3460
9859  3461
9860  3462
9861  3463
9862  3464
9863  3465
9864  3466
9865  3467
9866  3468
9867  3469
9868  346A
9869  346B
9870  346C
9871  346D
9872  346E
9873  346F
9874  3470
9875  3471
9876  3472
9877  3473
9878  3474
9879  3475
9880  3476
9881  3477
9882  3478
9883  3479
9884  347A
9885  347B
9886  347C
9887  347D
9888  347E
9889  347F
9890  3480
9891  3481
9892  3482
9893  3483
9894  3484
9895  3485
9896  3486
9897  3487
9898  3488
9899  3489
9900  348A
9901  348B
9902  348C
9903  348D
9904  348E
9905  348F
9906  3490
9907  3491
9908  3492
9909  3493
9910  3494
9911  3495
9912  3496
9913  3497
9914  3498
9915  3499
9916  349A
9917  349B
9918  349C
9919  349D
9920  349E
9921  349F
9922  34A0
9923  34A1
9924  34A2
9925  34A3
9926  34A4
9927  34A5
9928  34A6
9929  34A7
9930  34A8
9931  34A9
9932  34AA
9933  34AB
9934  34AC
9935  34AD
9936  34AE
9937  34AF
9938  34B0
9939  34B1
9940  34B2
9941  34B3
9942  34B4
9943  34B5
9944  34B6
9945  34B7
9946  34B8
9947  34B9
9948  34BA
9949  34BB
9950  34BC
9951  34BD
9952  34BE
9953  34BF
9954  34C0
9955  34C1
9956  34C2
9957  34C3
9958  34C4
9959  34C5
9960  34C6
9961  34C7
9962  34C8
9963  34C9
9964  34CA
9965  34CB
9966  34CC
9967  34CD
9968  34CE
9969  34CF
9970  34D0
9971  34D1
9972  34D2
9973  34D3
9974  34D4
9975  34D5
9976  34D6
9977  34D7
9978  34D8
9979  34D9
9980  34DA
9981  34DB
9982  34DC
9983  34DD
9984  34DE
9985  34DF
9986  34E0
9987  34E1
9988  34E2
9989  34E3
9990  34E4
9991  34E5
9992  34E6
9993  34E7
9994  34E8
9995  34E9
9996  34EA
9997  34EB
9998  34EC
9999  34ED
10000  34EE
10001  34EF
10002  34F0
10003  34F1
10004  34F2
10005  34F3
10006  34F4
10007  34F5
10008  34F6
10009  34F7
10010  34F8
10011  34F9
10012  34FA
10013  34FB
10014  34FC
10015  34FD
10016  34FE
10017  34FF
10018  3500
10019  3501
10020  3502
10021  3503
10022  3504
10023  3505
10024  3506
10025  3507
10026  3508
10027  3509
10028  350A
10029  350B
10030  350C
10031  350D
10032  350E
10033  350F
10034  3510
10035  3511
10036  3512
10037  3513
10038  3514
10039  3515
10040  3516
10041  3517
10042  3518
10043  3519
10044  351A
10045  351B
10046  351C
10047  351D
10048  351E
10049  351F
10050  3520
10051  3521
10052  3522
10053  3523
10054  3524
10055  3525
10056  3526
10057  3527
10058  3528
10059  3529
10060  352A
10061  352B
10062  352C
10063  352D
10064  352E
10065  352F
10066  3530
10067  3531
10068  3532
10069  3533
10070  3534
10071  3535
10072  3536
10073  3537
10074  3538
10075  3539
10076  353A
10077  353B
10078  353C
10079  353D
10080  353E
10081  353F
10082  3540
10083  3541
10084  3542
10085  3543
10086  3544
10087  3545
10088  3546
10089  3547
10090  3548
10091  3549
10092  354A
10093  354B
10094  354C
10095  354D
10096  354E
10097  354F
10098  3550
10099  3551
10100  3552
10101  3553
10102  3554
10103  3555
10104  3556
10105  3557
10106  3558
10107  3559
10108  355A
10109  355B
10110  355C
10111  355D
10112  355E
10113  355F
10114  3560
10115  3561
10116  3562
10117  3563
10118  3564
10119  3565
10120  3566
10121  3567
10122  3568
10123  3569
10124  356A
10125  356B
10126  356C
10127  356D
10128  356E
10129  356F
10130  3570
10131  3571
10132  3572
10133  3573
10134  3574
10135  3575
10136  3576
10137  3577
10138  3578
10139  3579
10140  357A
10141  357B
10142  357C
10143  357D
10144  357E
10145  357F
10146  3580
10147  3581
10148  3582
10149  3583
10150  3584
10151  3585
10152  3586
10153  3587
10154  3588
10155  3589
10156  358A
10157  358B
10158  358C
10159  358D
10160  358E
10161  358F
10162  3590
10163  3591
10164  3592
10165  3593
10166  3594
10167  3595
10168  3596
10169  3597
10170  3598
10171  3599
10172  359A
10173  359B
10174  359C
10175  359D
10176  359E
10177  359F
10178  35A0
10179  35A1
10180  35A2
10181  35A3
10182  35A4
10183  35A5
10184  35A6
10185  35A7
10186  35A8
10187  35A9
10188  35AA
10189  35AB
10190  35AC
10191  35AD
10192  35AE
10193  35AF
10194  35B0
10195  35B1
10196  35B2
10197  35B3
10198  35B4
10199  35B5
10200  35B6
10201  35B7
10202  35B8
10203  35B9
10204  35BA
10205  35BB
10206  35BC
10207  35BD
10208  35BE
10209  35BF
10210  35C0
10211  35C1
10212  35C2
10213  35C3
10214  35C4
10215  35C5
10216  35C6
10217  35C7
10218  35C8
10219  35C9
10220  35CA
10221  35CB
10222  35CC
10223  35CD
10224  35CE
10225  35CF
10226  35D0
10227  35D1
10228  35D2
10229  35D3
10230  35D4
10231  35D5
10232  35D6
10233  35D7
10234  35D8
10235  35D9
10236  35DA
10237  35DB
10238  35DC
10239  35DD
10240  35DE
10241  35DF
10242  35E0
10243  35E1
10244  35E2
10245  35E3
10246  35E4
10247  35E5
10248  35E6
10249  35E7
10250  35E8
10251  35E9
10252  35EA
10253  35EB
10254  35EC
10255  35ED
10256  35EE
10257  35EF
10258  35F0
10259  35F1
10260  35F2
10261  35F3
10262  35F4
10263  35F5
10264  35F6
10265  35F7
10266  35F8
10267  35F9
10268  35FA
10269  35FB
10270  35FC
10271  35FD
10272  35FE
10273  35FF
10274  3600
10275  3601
10276  3602
10277  3603
10278  3604
10279  3605
10280  3606
10281  3607
10282  3608
10283  3609
10284  360A
10285  360B
10286  360C
10287  360D
10288  360E
10289  360F
10290  3610
10291  3611
10292  3612
10293  3613
10294  3614
10295  3615
10296  3616
10297  3617
10298  3618
10299  3619
10300  361A
10301  361B
10302  361C
10303  361D
10304  361E
10305  361F
10306  3620
10307  3621
10308  3622
10309  3623
10310  3624
10311  3625
10312  3626
10313  3627
10314  3628
10315  3629
10316  362A
10317  362B
10318  362C
10319  362D
10320  362E
10321  362F
10322  3630
10323  3631
10324  3632
10325  3633
10326  3634
10327  3635
10328  3636
10329  3637
10330  3638
10331  3639
10332  363A
10333  363B
10334  363C
10335  363D
10336  363E
10337  363F
10338  3640
10339  3641
10340  3642
10341  3643
10342  3644
10343  3645
10344  3646
10345  3647
10346  3648
10347  3649
10348  364A
10349  364B
10350  364C
10351  364D
10352  364E
10353  364F
10354  3650
10355  3651
10356  3652
10357  3653
10358  3654
10359  3655
10360  3656
10361  3657
10362  3658
10363  3659
10364  365A
10365  365B
10366  365C
10367  365D
10368  365E
10369  365F
10370  3660
10371  3661
10372  3662
10373  3663
10374  3664
10375  3665
10376  3666
10377  3667
10378  3668
10379  3669
10380  366A
10381  366B
10382  366C
10383  366D
10384  366E
10385  366F
10386  3670
10387  3671
10388  3672
10389  3673
10390  3674
10391  3675
10392  3676
10393  3677
10394  3678
10395  3679
10396  367A
10397  367B
10398  367C
10399  367D
10400  367E
10401  367F
10402  3680
10403  3681
10404  3682
10405  3683
10406  3684
10407  3685
10408  3686
10409  3687
10410  3688
10411  3689
10412  368A
10413  368B
10414  368C
10415  368D
10416  368E
10417  368F
10418  3690
10419  3691
10420  3692
10421  3693
10422  3694
10423  3695
10424  3696
10425  3697
10426  3698
10427  3699
10428  369A
10429  369B
10430  369C
10431  369D
10432  369E
10433  369F
10434  36A0
10435  36A1
10436  36A2
10437  36A3
10438  36A4
10439  36A5
10440  36A6
10441  36A7
10442  36A8
10443  36A9
10444  36AA
10445  36AB
10446  36AC
10447  36AD
10448  36AE
10449  36AF
10450  36B0
10451  36B1
10452  36B2
10453  36B3
10454  36B4
10455  36B5
10456  36B6
10457  36B7
10458  36B8
10459  36B9
10460  36BA
10461  36BB
10462  36BC
10463  36BD
10464  36BE
10465  36BF
10466  36C0
10467  36C1
10468  36C2
10469  36C3
10470  36C4
10471  36C5
10472  36C6
10473  36C7
10474  36C8
10475  36C9
10476  36CA
10477  36CB
10478  36CC
10479  36CD
10480  36CE
10481  36CF
10482  36D0
10483  36D1
10484  36D2
10485  36D3
10486  36D4
10487  36D5
10488  36D6
10489  36D7
10490  36D8
10491  36D9
10492  36DA
10493  36DB
10494  36DC
10495  36DD
10496  36DE
10497  36DF
10498  36E0
10499  36E1
10500  36E2
10501  36E3
10502  36E4
10503  36E5
10504  36E6
10505  36E7
10506  36E8
10507  36E9
10508  36EA
10509  36EB
10510  36EC
10511  36ED
10512  36EE
10513  36EF
10514  36F0
10515  36F1
10516  36F2
10517  36F3
10518  36F4
10519  36F5
10520  36F6
10521  36F7
10522  36F8
10523  36F9
10524  36FA
10525  36FB
10526  36FC
10527  36FD
10528  36FE
10529  36FF
10530  3700
10531  3701
10532  3702
10533  3703
10534  3704
10535  3705
10536  3706
10537  3707
10538  3708
10539  3709
10540  370A
10541  370B
10542  370C
10543  370D
10544  370E
10545  370F
10546  3710
10547  3711
10548  3712
10549  3713
10550  3714
10551  3715
10552  3716
10553  3717
10554  3718
10555  3719
10556  371A
10557  371B
10558  371C
10559  371D
10560  371E
10561  371F
10562  3720
10563  3721
10564  3722
10565  3723
10566  3724
10567  3725
10568  3726
10569  3727
10570  3728
10571  3729
10572  372A
10573  372B
10574  372C
10575  372D
10576  372E
10577  372F
10578  3730
10579  3731
10580  3732
10581  3733
10582  3734
10583  3735
10584  3736
10585  3737
10586  3738
10587  3739
10588  373A
10589  373B
10590  373C
10591  373D
10592  373E
10593  373F
10594  3740
10595  3741
10596  3742
10597  3743
10598  3744
10599  3745
10600  3746
10601  3747
10602  3748
10603  3749
10604  374A
10605  374B
10606  374C
10607  374D
10608  374E
10609  374F
10610  3750
10611  3751
10612  3752
10613  3753
10614  3754
10615  3755
10616  3756
10617  3757
10618  3758
10619  3759
10620  375A
10621  375B
10622  375C
10623  375D
10624  375E
10625  375F
10626  3760
10627  3761
10628  3762
10629  3763
10630  3764
10631  3765
10632  3766
10633  3767
10634  3768
10635  3769
10636  376A
10637  376B
10638  376C
10639  376D
10640  376E
10641  376F
10642  3770
10643  3771
10644  3772
10645  3773
10646  3774
10647  3775
10648  3776
10649  3777
10650  3778
10651  3779
10652  377A
10653  377B
10654  377C
10655  377D
10656  377E
10657  377F
10658  3780
10659  3781
10660  3782
10661  3783
10662  3784
10663  3785
10664  3786
10665  3787
10666  3788
10667  3789
10668  378A
10669  378B
10670  378C
10671  378D
10672  378E
10673  378F
10674  3790
10675  3791
10676  3792
10677  3793
10678  3794
10679  3795
10680  3796
10681  3797
10682  3798
10683  3799
10684  379A
10685  379B
10686  379C
10687  379D
10688  379E
10689  379F
10690  37A0
10691  37A1
10692  37A2
10693  37A3
10694  37A4
10695  37A5
10696  37A6
10697  37A7
10698  37A8
10699  37A9
10700  37AA
10701  37AB
10702  37AC
10703  37AD
10704  37AE
10705  37AF
10706  37B0
10707  37B1
10708  37B2
10709  37B3
10710  37B4
10711  37B5
10712  37B6
10713  37B7
10714  37B8
10715  37B9
10716  37BA
10717  37BB
10718  37BC
10719  37BD
10720  37BE
10721  37BF
10722  37C0
10723  37C1
10724  37C2
10725  37C3
10726  37C4
10727  37C5
10728  37C6
10729  37C7
10730  37C8
10731  37C9
10732  37CA
10733  37CB
10734  37CC
10735  37CD
10736  37CE
10737  37CF
10738  37D0
10739  37D1
10740  37D2
10741  37D3
10742  37D4
10743  37D5
10744  37D6
10745  37D7
10746  37D8
10747  37D9
10748  37DA
10749  37DB
10750  37DC
10751  37DD
10752  37DE
10753  37DF
10754  37E0
10755  37E1
10756  37E2
10757  37E3
10758  37E4
10759  37E5
10760  37E6
10761  37E7
10762  37E8
10763  37E9
10764  37EA
10765  37EB
10766  37EC
10767  37ED
10768  37EE
10769  37EF
10770  37F0
10771  37F1
10772  37F2
10773  37F3
10774  37F4
10775  37F5
10776  37F6
10777  37F7
10778  37F8
10779  37F9
10780  37FA
10781  37FB
10782  37FC
10783  37FD
10784  37FE
10785  37FF
10786  3800
10787  3801
10788  3802
10789  3803
10790  3804
10791  3805
10792  3806
10793  3807
10794  3808
10795  3809
10796  380A
10797  380B
10798  380C
10799  380D
10800  380E
10801  380F
10802  3810
10803  3811
10804  3812
10805  3813
10806  3814
10807  3815
10808  3816
10809  3817
10810  3818
10811  3819
10812  381A
10813  381B
10814  381C
10815  381D
10816  381E
10817  381F
10818  3820
10819  3821
10820  3822
10821  3823
10822  3824
10823  3825
10824  3826
10825  3827
10826  3828
10827  3829
10828  382A
10829  382B
10830  382C
10831  382D
10832  382E
10833  382F
10834  3830
10835  3831
10836  3832
10837  3833
10838  3834
10839  3835
10840  3836
10841  3837
10842  3838
10843  3839
10844  383A
10845  383B
10846  383C
10847  383D
10848  383E
10849  383F
10850  3840
10851  3841
10852  3842
10853  3843
10854  3844
10855  3845
10856  3846
10857  3847
10858  3848
10859  3849
10860  384A
10861  384B
10862  384C
10863  384D
10864  384E
10865  384F
10866  3850
10867  3851
10868  3852
10869  3853
10870  3854
10871  3855
10872  3856
10873  3857
10874  3858
10875  3859
10876  385A
10877  385B
10878  385C
10879  385D
10880  385E
10881  385F
10882  3860
10883  3861
10884  3862
10885  3863
10886  3864
10887  3865
10888  3866
10889  3867
10890  3868
10891  3869
10892  386A
10893  386B
10894  386C
10895  386D
10896  386E
10897  386F
10898  3870
10899  3871
10900  3872
10901  3873
10902  3874
10903  3875
10904  3876
10905  3877
10906  3878
10907  3879
10908  387A
10909  387B
10910  387C
10911  387D
10912  387E
10913  387F
10914  3880
10915  3881
10916  3882
10917  3883
10918  3884
10919  3885
10920  3886
10921  3887
10922  3888
10923  3889
10924  388A
10925  388B
10926  388C
10927  388D
10928  388E
10929  388F
10930  3890
10931  3891
10932  3892
10933  3893
10934  3894
10935  3895
10936  3896
10937  3897
10938  3898
10939  3899
10940  389A
10941  389B
10942  389C
10943  389D
10944  389E
10945  389F
10946  38A0
10947  38A1
10948  38A2
10949  38A3
10950  38A4
10951  38A5
10952  38A6
10953  38A7
10954  38A8
10955  38A9
10956  38AA
10957  38AB
10958  38AC
10959  38AD
10960  38AE
10961  38AF
10962  38B0
10963  38B1
10964  38B2
10965  38B3
10966  38B4
10967  38B5
10968  38B6
10969  38B7
10970  38B8
10971  38B9
10972  38BA
10973  38BB
10974  38BC
10975  38BD
10976  38BE
10977  38BF
10978  38C0
10979  38C1
10980  38C2
10981  38C3
10982  38C4
10983  38C5
10984  38C6
10985  38C7
10986  38C8
10987  38C9
10988  38CA
10989  38CB
10990  38CC
10991  38CD
10992  38CE
10993  38CF
10994  38D0
10995  38D1
10996  38D2
10997  38D3
10998  38D4
10999  38D5
11000  38D6
11001  38D7
11002  38D8
11003  38D9
11004  38DA
11005  38DB
11006  38DC
11007  38DD
11008  38DE
11009  38DF
11010  38E0
11011  38E1
11012  38E2
11013  38E3
11014  38E4
11015  38E5
11016  38E6
11017  38E7
11018  38E8
11019  38E9
11020  38EA
11021  38EB
11022  38EC
11023  38ED
11024  38EE
11025  38EF
11026  38F0
11027  38F1
11028  38F2
11029  38F3
11030  38F4
11031  38F5
11032  38F6
11033  38F7
11034  38F8
11035  38F9
11036  38FA
11037  38FB
11038  38FC
11039  38FD
11040  38FE
11041  38FF
11042  3900
11043  3901
11044  3902
11045  3903
11046  3904
11047  3905
11048  3906
11049  3907
11050  3908
11051  3909
11052  390A
11053  390B
11054  390C
11055  390D
11056  390E
11057  390F
11058  3910
11059  3911
11060  3912
11061  3913
11062  3914
11063  3915
11064  3916
11065  3917
11066  3918
11067  3919
11068  391A
11069  391B
11070  391C
11071  391D
11072  391E
11073  391F
11074  3920
11075  3921
11076  3922
11077  3923
11078  3924
11079  3925
11080  3926
11081  3927
11082  3928
11083  3929
11084  392A
11085  392B
11086  392C
11087  392D
11088  392E
11089  392F
11090  3930
11091  3931
11092  3932
11093  3933
11094  3934
11095  3935
11096  3936
11097  3937
11098  3938
11099  3939
11100  393A
11101  393B
11102  393C
11103  393D
11104  393E
11105  393F
11106  3940
11107  3941
11108  3942
11109  3943
11110  3944
11111  3945
11112  3946
11113  3947
11114  3948
11115  3949
11116  394A
11117  394B
11118  394C
11119  394D
11120  394E
11121  394F
11122  3950
11123  3951
11124  3952
11125  3953
11126  3954
11127  3955
11128  3956
11129  3957
11130  3958
11131  3959
11132  395A
11133  395B
11134  395C
11135  395D
11136  395E
11137  395F
11138  3960
11139  3961
11140  3962
11141  3963
11142  3964
11143  3965
11144  3966
11145  3967
11146  3968
11147  3969
11148  396A
11149  396B
11150  396C
11151  396D
11152  396E
11153  396F
11154  3970
11155  3971
11156  3972
11157  3973
11158  3974
11159  3975
11160  3976
11161  3977
11162  3978
11163  3979
11164  397A
11165  397B
11166  397C
11167  397D
11168  397E
11169  397F
11170  3980
11171  3981
11172  3982
11173  3983
11174  3984
11175  3985
11176  3986
11177  3987
11178  3988
11179  3989
11180  398A
11181  398B
11182  398C
11183  398D
11184  398E
11185  398F
11186  3990
11187  3991
11188  3992
11189  3993
11190  3994
11191  3995
11192  3996
11193  3997
11194  3998
11195  3999
11196  399A
11197  399B
11198  399C
11199  399D
11200  399E
11201  399F
11202  39A0
11203  39A1
11204  39A2
11205  39A3
11206  39A4
11207  39A5
11208  39A6
11209  39A7
11210  39A8
11211  39A9
11212  39AA
11213  39AB
11214  39AC
11215  39AD
11216  39AE
11217  39AF
11218  39B0
11219  39B1
11220  39B2
11221  39B3
11222  39B4
11223  39B5
11224  39B6
11225  39B7
11226  39B8
11227  39B9
11228  39BA
11229  39BB
11230  39BC
11231  39BD
11232  39BE
11233  39BF
11234  39C0
11235  39C1
11236  39C2
11237  39C3
11238  39C4
11239  39C5
11240  39C6
11241  39C7
11242  39C8
11243  39C9
11244  39CA
11245  39CB
11246  39CC
11247  39CD
11248  39CE
11249  39CF
11250  39D0
11251  39D1
11252  39D2
11253  39D3
11254  39D4
11255  39D5
11256  39D6
11257  39D7
11258  39D8
11259  39D9
11260  39DA
11261  39DB
11262  39DC
11263  39DD
11264  39DE
11265  39DF
11266  39E0
11267  39E1
11268  39E2
11269  39E3
11270  39E4
11271  39E5
11272  39E6
11273  39E7
11274  39E8
11275  39E9
11276  39EA
11277  39EB
11278  39EC
11279  39ED
11280  39EE
11281  39EF
11282  39F0
11283  39F1
11284  39F2
11285  39F3
11286  39F4
11287  39F5
11288  39F6
11289  39F7
11290  39F8
11291  39F9
11292  39FA
11293  39FB
11294  39FC
11295  39FD
11296  39FE
11297  39FF
11298  3A00
11299  3A01
11300  3A02
11301  3A03
11302  3A04
11303  3A05
11304  3A06
11305  3A07
11306  3A08
11307  3A09
11308  3A0A
11309  3A0B
11310  3A0C
11311  3A0D
11312  3A0E
11313  3A0F
11314  3A10
11315  3A11
11316  3A12
11317  3A13
11318  3A14
11319  3A15
11320  3A16
11321  3A17
11322  3A18
11323  3A19
11324  3A1A
11325  3A1B
11326  3A1C
11327  3A1D
11328  3A1E
11329  3A1F
11330  3A20
11331  3A21
11332  3A22
11333  3A23
11334  3A24
11335  3A25
11336  3A26
11337  3A27
11338  3A28
11339  3A29
11340  3A2A
11341  3A2B
11342  3A2C
11343  3A2D
11344  3A2E
11345  3A2F
11346  3A30
11347  3A31
11348  3A32
11349  3A33
11350  3A34
11351  3A35
11352  3A36
11353  3A37
11354  3A38
11355  3A39
11356  3A3A
11357  3A3B
11358  3A3C
11359  3A3D
11360  3A3E
11361  3A3F
11362  3A40
11363  3A41
11364  3A42
11365  3A43
11366  3A44
11367  3A45
11368  3A46
11369  3A47
11370  3A48
11371  3A49
11372  3A4A
11373  3A4B
11374  3A4C
11375  3A4D
11376  3A4E
11377  3A4F
11378  3A50
11379  3A51
11380  3A52
11381  3A53
11382  3A54
11383  3A55
11384  3A56
11385  3A57
11386  3A58
11387  3A59
11388  3A5A
11389  3A5B
11390  3A5C
11391  3A5D
11392  3A5E
11393  3A5F
11394  3A60
11395  3A61
11396  3A62
11397  3A63
11398  3A64
11399  3A65
11400  3A66
11401  3A67
11402  3A68
11403  3A69
11404  3A6A
11405  3A6B
11406  3A6C
11407  3A6D
11408  3A6E
11409  3A6F
11410  3A70
11411  3A71
11412  3A72
11413  3A73
11414  3A74
11415  3A75
11416  3A76
11417  3A77
11418  3A78
11419  3A79
11420  3A7A
11421  3A7B
11422  3A7C
11423  3A7D
11424  3A7E
11425  3A7F
11426  3A80
11427  3A81
11428  3A82
11429  3A83
11430  3A84
11431  3A85
11432  3A86
11433  3A87
11434  3A88
11435  3A89
11436  3A8A
11437  3A8B
11438  3A8C
11439  3A8D
11440  3A8E
11441  3A8F
11442  3A90
11443  3A91
11444  3A92
11445  3A93
11446  3A94
11447  3A95
11448  3A96
11449  3A97
11450  3A98
11451  3A99
11452  3A9A
11453  3A9B
11454  3A9C
11455  3A9D
11456  3A9E
11457  3A9F
11458  3AA0
11459  3AA1
11460  3AA2
11461  3AA3
11462  3AA4
11463  3AA5
11464  3AA6
11465  3AA7
11466  3AA8
11467  3AA9
11468  3AAA
11469  3AAB
11470  3AAC
11471  3AAD
11472  3AAE
11473  3AAF
11474  3AB0
11475  3AB1
11476  3AB2
11477  3AB3
11478  3AB4
11479  3AB5
11480  3AB6
11481  3AB7
11482  3AB8
11483  3AB9
11484  3ABA
11485  3ABB
11486  3ABC
11487  3ABD
11488  3ABE
11489  3ABF
11490  3AC0
11491  3AC1
11492  3AC2
11493  3AC3
11494  3AC4
11495  3AC5
11496  3AC6
11497  3AC7
11498  3AC8
11499  3AC9
11500  3ACA
11501  3ACB
11502  3ACC
11503  3ACD
11504  3ACE
11505  3ACF
11506  3AD0
11507  3AD1
11508  3AD2
11509  3AD3
11510  3AD4
11511  3AD5
11512  3AD6
11513  3AD7
11514  3AD8
11515  3AD9
11516  3ADA
11517  3ADB
11518  3ADC
11519  3ADD
11520  3ADE
11521  3ADF
11522  3AE0
11523  3AE1
11524  3AE2
11525  3AE3
11526  3AE4
11527  3AE5
11528  3AE6
11529  3AE7
11530  3AE8
11531  3AE9
11532  3AEA
11533  3AEB
11534  3AEC
11535  3AED
11536  3AEE
11537  3AEF
11538  3AF0
11539  3AF1
11540  3AF2
11541  3AF3
11542  3AF4
11543  3AF5
11544  3AF6
11545  3AF7
11546  3AF8
11547  3AF9
11548  3AFA
11549  3AFB
11550  3AFC
11551  3AFD
11552  3AFE
11553  3AFF
11554  3B00
11555  3B01
11556  3B02
11557  3B03
11558  3B04
11559  3B05
11560  3B06
11561  3B07
11562  3B08
11563  3B09
11564  3B0A
11565  3B0B
11566  3B0C
11567  3B0D
11568  3B0E
11569  3B0F
11570  3B10
11571  3B11
11572  3B12
11573  3B13
11574  3B14
11575  3B15
11576  3B16
11577  3B17
11578  3B18
11579  3B19
11580  3B1A
11581  3B1B
11582  3B1C
11583  3B1D
11584  3B1E
11585  3B1F
11586  3B20
11587  3B21
11588  3B22
11589  3B23
11590  3B24
11591  3B25
11592  3B26
11593  3B27
11594  3B28
11595  3B29
11596  3B2A
11597  3B2B
11598  3B2C
11599  3B2D
11600  3B2E
11601  3B2F
11602  3B30
11603  3B31
11604  3B32
11605  3B33
11606  3B34
11607  3B35
11608  3B36
11609  3B37
11610  3B38
11611  3B39
11612  3B3A
11613  3B3B
11614  3B3C
11615  3B3D
11616  3B3E
11617  3B3F
11618  3B40
11619  3B41
11620  3B42
11621  3B43
11622  3B44
11623  3B45
11624  3B46
11625  3B47
11626  3B48
11627  3B49
11628  3B4A
11629  3B4B
11630  3B4C
11631  3B4D
11632  3B4E
11633  3B4F
11634  3B50
11635  3B51
11636  3B52
11637  3B53
11638  3B54
11639  3B55
11640  3B56
11641  3B57
11642  3B58
11643  3B59
11644  3B5A
11645  3B5B
11646  3B5C
11647  3B5D
11648  3B5E
11649  3B5F
11650  3B60
11651  3B61
11652  3B62
11653  3B63
11654  3B64
11655  3B65
11656  3B66
11657  3B67
11658  3B68
11659  3B69
11660  3B6A
11661  3B6B
11662  3B6C
11663  3B6D
11664  3B6E
11665  3B6F
11666  3B70
11667  3B71
11668  3B72
11669  3B73
11670  3B74
11671  3B75
11672  3B76
11673  3B77
11674  3B78
11675  3B79
11676  3B7A
11677  3B7B
11678  3B7C
11679  3B7D
11680  3B7E
11681  3B7F
11682  3B80
11683  3B81
11684  3B82
11685  3B83
11686  3B84
11687  3B85
11688  3B86
11689  3B87
11690  3B88
11691  3B89
11692  3B8A
11693  3B8B
11694  3B8C
11695  3B8D
11696  3B8E
11697  3B8F
11698  3B90
11699  3B91
11700  3B92
11701  3B93
11702  3B94
11703  3B95
11704  3B96
11705  3B97
11706  3B98
11707  3B99
11708  3B9A
11709  3B9B
11710  3B9C
11711  3B9D
11712  3B9E
11713  3B9F
11714  3BA0
11715  3BA1
11716  3BA2
11717  3BA3
11718  3BA4
11719  3BA5
11720  3BA6
11721  3BA7
11722  3BA8
11723  3BA9
11724  3BAA
11725  3BAB
11726  3BAC
11727  3BAD
11728  3BAE
11729  3BAF
11730  3BB0
11731  3BB1
11732  3BB2
11733  3BB3
11734  3BB4
11735  3BB5
11736  3BB6
11737  3BB7
11738  3BB8
11739  3BB9
11740  3BBA
11741  3BBB
11742  3BBC
11743  3BBD
11744  3BBE
11745  3BBF
11746  3BC0
11747  3BC1
11748  3BC2
11749  3BC3
11750  3BC4
11751  3BC5
11752  3BC6
11753  3BC7
11754  3BC8
11755  3BC9
11756  3BCA
11757  3BCB
11758  3BCC
11759  3BCD
11760  3BCE
11761  3BCF
11762  3BD0
11763  3BD1
11764  3BD2
11765  3BD3
11766  3BD4
11767  3BD5
11768  3BD6
11769  3BD7
11770  3BD8
11771  3BD9
11772  3BDA
11773  3BDB
11774  3BDC
11775  3BDD
11776  3BDE
11777  3BDF
11778  3BE0
11779  3BE1
11780  3BE2
11781  3BE3
11782  3BE4
11783  3BE5
11784  3BE6
11785  3BE7
11786  3BE8
11787  3BE9
11788  3BEA
11789  3BEB
11790  3BEC
11791  3BED
11792  3BEE
11793  3BEF
11794  3BF0
11795  3BF1
11796  3BF2
11797  3BF3
11798  3BF4
11799  3BF5
11800  3BF6
11801  3BF7
11802  3BF8
11803  3BF9
11804  3BFA
11805  3BFB
11806  3BFC
11807  3BFD
11808  3BFE
11809  3BFF
11810  3C00
11811  3C01
11812  3C02
11813  3C03
11814  3C04
11815  3C05
11816  3C06
11817  3C07
11818  3C08
11819  3C09
11820  3C0A
11821  3C0B
11822  3C0C
11823  3C0D
11824  3C0E
11825  3C0F
11826  3C10
11827  3C11
11828  3C12
11829  3C13
11830  3C14
11831  3C15
11832  3C16
11833  3C17
11834  3C18
11835  3C19
11836  3C1A
11837  3C1B
11838  3C1C
11839  3C1D
11840  3C1E
11841  3C1F
11842  3C20
11843  3C21
11844  3C22
11845  3C23
11846  3C24
11847  3C25
11848  3C26
11849  3C27
11850  3C28
11851  3C29
11852  3C2A
11853  3C2B
11854  3C2C
11855  3C2D
11856  3C2E
11857  3C2F
11858  3C30
11859  3C31
11860  3C32
11861  3C33
11862  3C34
11863  3C35
11864  3C36
11865  3C37
11866  3C38
11867  3C39
11868  3C3A
11869  3C3B
11870  3C3C
11871  3C3D
11872  3C3E
11873  3C3F
11874  3C40
11875  3C41
11876  3C42
11877  3C43
11878  3C44
11879  3C45
11880  3C46
11881  3C47
11882  3C48
11883  3C49
11884  3C4A
11885  3C4B
11886  3C4C
11887  3C4D
11888  3C4E
11889  3C4F
11890  3C50
11891  3C51
11892  3C52
11893  3C53
11894  3C54
11895  3C55
11896  3C56
11897  3C57
11898  3C58
11899  3C59
11900  3C5A
11901  3C5B
11902  3C5C
11903  3C5D
11904  3C5E
11905  3C5F
11906  3C60
11907  3C61
11908  3C62
11909  3C63
11910  3C64
11911  3C65
11912  3C66
11913  3C67
11914  3C68
11915  3C69
11916  3C6A
11917  3C6B
11918  3C6C
11919  3C6D
11920  3C6E
11921  3C6F
11922  3C70
11923  3C71
11924  3C72
11925  3C73
11926  3C74
11927  3C75
11928  3C76
11929  3C77
11930  3C78
11931  3C79
11932  3C7A
11933  3C7B
11934  3C7C
11935  3C7D
11936  3C7E
11937  3C7F
11938  3C80
11939  3C81
11940  3C82
11941  3C83
11942  3C84
11943  3C85
11944  3C86
11945  3C87
11946  3C88
11947  3C89
11948  3C8A
11949  3C8B
11950  3C8C
11951  3C8D
11952  3C8E
11953  3C8F
11954  3C90
11955  3C91
11956  3C92
11957  3C93
11958  3C94
11959  3C95
11960  3C96
11961  3C97
11962  3C98
11963  3C99
11964  3C9A
11965  3C9B
11966  3C9C
11967  3C9D
11968  3C9E
11969  3C9F
11970  3CA0
11971  3CA1
11972  3CA2
11973  3CA3
11974  3CA4
11975  3CA5
11976  3CA6
11977  3CA7
11978  3CA8
11979  3CA9
11980  3CAA
11981  3CAB
11982  3CAC
11983  3CAD
11984  3CAE
11985  3CAF
11986  3CB0
11987  3CB1
11988  3CB2
11989  3CB3
11990  3CB4
11991  3CB5
11992  3CB6
11993  3CB7
11994  3CB8
11995  3CB9
11996  3CBA
11997  3CBB
11998  3CBC
11999  3CBD
12000  3CBE
12001  3CBF
12002  3CC0
12003  3CC1
12004  3CC2
12005  3CC3
12006  3CC4
12007  3CC5
12008  3CC6
12009  3CC7
12010  3CC8
12011  3CC9
12012  3CCA
12013  3CCB
12014  3CCC
12015  3CCD
12016  3CCE
12017  3CCF
12018  3CD0
12019  3CD1
12020  3CD2
12021  3CD3
12022  3CD4
12023  3CD5
12024  3CD6
12025  3CD7
12026  3CD8
12027  3CD9
12028  3CDA
12029  3CDB
12030  3CDC
12031  3CDD
12032  3CDE
12033  3CDF
12034  3CE0
12035  3CE1
12036  3CE2
12037  3CE3
12038  3CE4
12039  3CE5
12040  3CE6
12041  3CE7
12042  3CE8
12043  3CE9
12044  3CEA
12045  3CEB
12046  3CEC
12047  3CED
12048  3CEE
12049  3CEF
12050  3CF0
12051  3CF1
12052  3CF2
12053  3CF3
12054  3CF4
12055  3CF5
12056  3CF6
12057  3CF7
12058  3CF8
12059  3CF9
12060  3CFA
12061  3CFB
12062  3CFC
12063  3CFD
12064  3CFE
12065  3CFF
12066  3D00
12067  3D01
12068  3D02
12069  3D03
12070  3D04
12071  3D05
12072  3D06
12073  3D07
12074  3D08
12075  3D09
12076  3D0A
12077  3D0B
12078  3D0C
12079  3D0D
12080  3D0E
12081  3D0F
12082  3D10
12083  3D11
12084  3D12
12085  3D13
12086  3D14
12087  3D15
12088  3D16
12089  3D17
12090  3D18
12091  3D19
12092  3D1A
12093  3D1B
12094  3D1C
12095  3D1D
12096  3D1E
12097  3D1F
12098  3D20
12099  3D21
12100  3D22
12101  3D23
12102  3D24
12103  3D25
12104  3D26
12105  3D27
12106  3D28
12107  3D29
12108  3D2A
12109  3D2B
12110  3D2C
12111  3D2D
12112  3D2E
12113  3D2F
12114  3D30
12115  3D31
12116  3D32
12117  3D33
12118  3D34
12119  3D35
12120  3D36
12121  3D37
12122  3D38
12123  3D39
12124  3D3A
12125  3D3B
12126  3D3C
12127  3D3D
12128  3D3E
12129  3D3F
12130  3D40
12131  3D41
12132  3D42
12133  3D43
12134  3D44
12135  3D45
12136  3D46
12137  3D47
12138  3D48
12139  3D49
12140  3D4A
12141  3D4B
12142  3D4C
12143  3D4D
12144  3D4E
12145  3D4F
12146  3D50
12147  3D51
12148  3D52
12149  3D53
12150  3D54
12151  3D55
12152  3D56
12153  3D57
12154  3D58
12155  3D59
12156  3D5A
12157  3D5B
12158  3D5C
12159  3D5D
12160  3D5E
12161  3D5F
12162  3D60
12163  3D61
12164  3D62
12165  3D63
12166  3D64
12167  3D65
12168  3D66
12169  3D67
12170  3D68
12171  3D69
12172  3D6A
12173  3D6B
12174  3D6C
12175  3D6D
12176  3D6E
12177  3D6F
12178  3D70
12179  3D71
12180  3D72
12181  3D73
12182  3D74
12183  3D75
12184  3D76
12185  3D77
12186  3D78
12187  3D79
12188  3D7A
12189  3D7B
12190  3D7C
12191  3D7D
12192  3D7E
12193  3D7F
12194  3D80
12195  3D81
12196  3D82
12197  3D83
12198  3D84
12199  3D85
12200  3D86
12201  3D87
12202  3D88
12203  3D89
12204  3D8A
12205  3D8B
12206  3D8C
12207  3D8D
12208  3D8E
12209  3D8F
12210  3D90
12211  3D91
12212  3D92
12213  3D93
12214  3D94
12215  3D95
12216  3D96
12217  3D97
12218  3D98
12219  3D99
12220  3D9A
12221  3D9B
12222  3D9C
12223  3D9D
12224  3D9E
12225  3D9F
12226  3DA0
12227  3DA1
12228  3DA2
12229  3DA3
12230  3DA4
12231  3DA5
12232  3DA6
12233  3DA7
12234  3DA8
12235  3DA9
12236  3DAA
12237  3DAB
12238  3DAC
12239  3DAD
12240  3DAE
12241  3DAF
12242  3DB0
12243  3DB1
12244  3DB2
12245  3DB3
12246  3DB4
12247  3DB5
12248  3DB6
12249  3DB7
12250  3DB8
12251  3DB9
12252  3DBA
12253  3DBB
12254  3DBC
12255  3DBD
12256  3DBE
12257  3DBF
12258  3DC0
12259  3DC1
12260  3DC2
12261  3DC3
12262  3DC4
12263  3DC5
12264  3DC6
12265  3DC7
12266  3DC8
12267  3DC9
12268  3DCA
12269  3DCB
12270  3DCC
12271  3DCD
12272  3DCE
12273  3DCF
12274  3DD0
12275  3DD1
12276  3DD2
12277  3DD3
12278  3DD4
12279  3DD5
12280  3DD6
12281  3DD7
12282  3DD8
12283  3DD9
12284  3DDA
12285  3DDB
12286  3DDC
12287  3DDD
12288  3DDE
12289  3DDF
12290  3DE0
12291  3DE1
12292  3DE2
12293  3DE3
12294  3DE4
12295  3DE5
12296  3DE6
12297  3DE7
12298  3DE8
12299  3DE9
12300  3DEA
12301  3DEB
12302  3DEC
12303  3DED
12304  3DEE
12305  3DEF
12306  3DF0
12307  3DF1
12308  3DF2
12309  3DF3
12310  3DF4
12311  3DF5
12312  3DF6
12313  3DF7
12314  3DF8
12315  3DF9
12316  3DFA
12317  3DFB
12318  3DFC
12319  3DFD
12320  3DFE
12321  3DFF
12322  3E00
12323  3E01
12324  3E02
12325  3E03
12326  3E04
12327  3E05
12328  3E06
12329  3E07
12330  3E08
12331  3E09
12332  3E0A
12333  3E0B
12334  3E0C
12335  3E0D
12336  3E0E
12337  3E0F
12338  3E10
12339  3E11
12340  3E12
12341  3E13
12342  3E14
12343  3E15
12344  3E16
12345  3E17
12346  3E18
12347  3E19
12348  3E1A
12349  3E1B
12350  3E1C
12351  3E1D
12352  3E1E
12353  3E1F
12354  3E20
12355  3E21
12356  3E22
12357  3E23
12358  3E24
12359  3E25
12360  3E26
12361  3E27
12362  3E28
12363  3E29
12364  3E2A
12365  3E2B
12366  3E2C
12367  3E2D
12368  3E2E
12369  3E2F
12370  3E30
12371  3E31
12372  3E32
12373  3E33
12374  3E34
12375  3E35
12376  3E36
12377  3E37
12378  3E38
12379  3E39
12380  3E3A
12381  3E3B
12382  3E3C
12383  3E3D
12384  3E3E
12385  3E3F
12386  3E40
12387  3E41
12388  3E42
12389  3E43
12390  3E44
12391  3E45
12392  3E46
12393  3E47
12394  3E48
12395  3E49
12396  3E4A
12397  3E4B
12398  3E4C
12399  3E4D
12400  3E4E
12401  3E4F
12402  3E50
12403  3E51
12404  3E52
12405  3E53
12406  3E54
12407  3E55
12408  3E56
12409  3E57
12410  3E58
12411  3E59
12412  3E5A
12413  3E5B
12414  3E5C
12415  3E5D
12416  3E5E
12417  3E5F
12418  3E60
12419  3E61
12420  3E62
12421  3E63
12422  3E64
12423  3E65
12424  3E66
12425  3E67
12426  3E68
12427  3E69
12428  3E6A
12429  3E6B
12430  3E6C
12431  3E6D
12432  3E6E
12433  3E6F
12434  3E70
12435  3E71
12436  3E72
12437  3E73
12438  3E74
12439  3E75
12440  3E76
12441  3E77
12442  3E78
12443  3E79
12444  3E7A
12445  3E7B
12446  3E7C
12447  3E7D
12448  3E7E
12449  3E7F
12450  3E80
12451  3E81
12452  3E82
12453  3E83
12454  3E84
12455  3E85
12456  3E86
12457  3E87
12458  3E88
12459  3E89
12460  3E8A
12461  3E8B
12462  3E8C
12463  3E8D
12464  3E8E
12465  3E8F
12466  3E90
12467  3E91
12468  3E92
12469  3E93
12470  3E94
12471  3E95
12472  3E96
12473  3E97
12474  3E98
12475  3E99
12476  3E9A
12477  3E9B
12478  3E9C
12479  3E9D
12480  3E9E
12481  3E9F
12482  3EA0
12483  3EA1
12484  3EA2
12485  3EA3
12486  3EA4
12487  3EA5
12488  3EA6
12489  3EA7
12490  3EA8
12491  3EA9
12492  3EAA
12493  3EAB
12494  3EAC
12495  3EAD
12496  3EAE
12497  3EAF
12498  3EB0
12499  3EB1
12500  3EB2
12501  3EB3
12502  3EB4
12503  3EB5
12504  3EB6
12505  3EB7
12506  3EB8
12507  3EB9
12508  3EBA
12509  3EBB
12510  3EBC
12511  3EBD
12512  3EBE
12513  3EBF
12514  3EC0
12515  3EC1
12516  3EC2
12517  3EC3
12518  3EC4
12519  3EC5
12520  3EC6
12521  3EC7
12522  3EC8
12523  3EC9
12524  3ECA
12525  3ECB
12526  3ECC
12527  3ECD
12528  3ECE
12529  3ECF
12530  3ED0
12531  3ED1
12532  3ED2
12533  3ED3
12534  3ED4
12535  3ED5
12536  3ED6
12537  3ED7
12538  3ED8
12539  3ED9
12540  3EDA
12541  3EDB
12542  3EDC
12543  3EDD
12544  3EDE
12545  3EDF
12546  3EE0
12547  3EE1
12548  3EE2
12549  3EE3
12550  3EE4
12551  3EE5
12552  3EE6
12553  3EE7
12554  3EE8
12555  3EE9
12556  3EEA
12557  3EEB
12558  3EEC
12559  3EED
12560  3EEE
12561  3EEF
12562  3EF0
12563  3EF1
12564  3EF2
12565  3EF3
12566  3EF4
12567  3EF5
12568  3EF6
12569  3EF7
12570  3EF8
12571  3EF9
12572  3EFA
12573  3EFB
12574  3EFC
12575  3EFD
12576  3EFE
12577  3EFF
12578  3F00
12579  3F01
12580  3F02
12581  3F03
12582  3F04
12583  3F05
12584  3F06
12585  3F07
12586  3F08
12587  3F09
12588  3F0A
12589  3F0B
12590  3F0C
12591  3F0D
12592  3F0E
12593  3F0F
12594  3F10
12595  3F11
12596  3F12
12597  3F13
12598  3F14
12599  3F15
12600  3F16
12601  3F17
12602  3F18
12603  3F19
12604  3F1A
12605  3F1B
12606  3F1C
12607  3F1D
12608  3F1E
12609  3F1F
12610  3F20
12611  3F21
12612  3F22
12613  3F23
12614  3F24
12615  3F25
12616  3F26
12617  3F27
12618  3F28
12619  3F29
12620  3F2A
12621  3F2B
12622  3F2C
12623  3F2D
12624  3F2E
12625  3F2F
12626  3F30
12627  3F31
12628  3F32
12629  3F33
12630  3F34
12631  3F35
12632  3F36
12633  3F37
12634  3F38
12635  3F39
12636  3F3A
12637  3F3B
12638  3F3C
12639  3F3D
12640  3F3E
12641  3F3F
12642  3F40
12643  3F41
12644  3F42
12645  3F43
12646  3F44
12647  3F45
12648  3F46
12649  3F47
12650  3F48
12651  3F49
12652  3F4A
12653  3F4B
12654  3F4C
12655  3F4D
12656  3F4E
12657  3F4F
12658  3F50
12659  3F51
12660  3F52
12661  3F53
12662  3F54
12663  3F55
12664  3F56
12665  3F57
12666  3F58
12667  3F59
12668  3F5A
12669  3F5B
12670  3F5C
12671  3F5D
12672  3F5E
12673  3F5F
12674  3F60
12675  3F61
12676  3F62
12677  3F63
12678  3F64
12679  3F65
12680  3F66
12681  3F67
12682  3F68
12683  3F69
12684  3F6A
12685  3F6B
12686  3F6C
12687  3F6D
12688  3F6E
12689  3F6F
12690  3F70
12691  3F71
12692  3F72
12693  3F73
12694  3F74
12695  3F75
12696  3F76
12697  3F77
12698  3F78
12699  3F79
12700  3F7A
12701  3F7B
12702  3F7C
12703  3F7D
12704  3F7E
12705  3F7F
12706  3F80
12707  3F81
12708  3F82
12709  3F83
12710  3F84
12711  3F85
12712  3F86
12713  3F87
12714  3F88
12715  3F89
12716  3F8A
12717  3F8B
12718  3F8C
12719  3F8D
12720  3F8E
12721  3F8F
12722  3F90
12723  3F91
12724  3F92
12725  3F93
12726  3F94
12727  3F95
12728  3F96
12729  3F97
12730  3F98
12731  3F99
12732  3F9A
12733  3F9B
12734  3F9C
12735  3F9D
12736  3F9E
12737  3F9F
12738  3FA0
12739  3FA1
12740  3FA2
12741  3FA3
12742  3FA4
12743  3FA5
12744  3FA6
12745  3FA7
12746  3FA8
12747  3FA9
12748  3FAA
12749  3FAB
12750  3FAC
12751  3FAD
12752  3FAE
12753  3FAF
12754  3FB0
12755  3FB1
12756  3FB2
12757  3FB3
12758  3FB4
12759  3FB5
12760  3FB6
12761  3FB7
12762  3FB8
12763  3FB9
12764  3FBA
12765  3FBB
12766  3FBC
12767  3FBD
12768  3FBE
12769  3FBF
12770  3FC0
12771  3FC1
12772  3FC2
12773  3FC3
12774  3FC4
12775  3FC5
12776  3FC6
12777  3FC7
12778  3FC8
12779  3FC9
12780  3FCA
12781  3FCB
12782  3FCC
12783  3FCD
12784  3FCE
12785  3FCF
12786  3FD0
12787  3FD1
12788  3FD2
12789  3FD3
12790  3FD4
12791  3FD5
12792  3FD6
12793  3FD7
12794  3FD8
12795  3FD9
12796  3FDA
12797  3FDB
12798  3FDC
12799  3FDD
12800  3FDE
12801  3FDF
12802  3FE0
12803  3FE1
12804  3FE2
12805  3FE3
12806  3FE4
12807  3FE5
12808  3FE6
12809  3FE7
12810  3FE8
12811  3FE9
12812  3FEA
12813  3FEB
12814  3FEC
12815  3FED
12816  3FEE
12817  3FEF
12818  3FF0
12819  3FF1
12820  3FF2
12821  3FF3
12822  3FF4
12823  3FF5
12824  3FF6
12825  3FF7
12826  3FF8
12827  3FF9
12828  3FFA
12829  3FFB
12830  3FFC
12831  3FFD
12832  3FFE
12833  3FFF
12834  4000
12835  4001
12836  4002
12837  4003
12838  4004
12839  4005
12840  4006
12841  4007
12842  4008
12843  4009
12844  400A
12845  400B
12846  400C
12847  400D
12848  400E
12849  400F
12850  4010
12851  4011
12852  4012
12853  4013
12854  4014
12855  4015
12856  4016
12857  4017
12858  4018
12859  4019
12860  401A
12861  401B
12862  401C
12863  401D
12864  401E
12865  401F
12866  4020
12867  4021
12868  4022
12869  4023
12870  4024
12871  4025
12872  4026
12873  4027
12874  4028
12875  4029
12876  402A
12877  402B
12878  402C
12879  402D
12880  402E
12881  402F
12882  4030
12883  4031
12884  4032
12885  4033
12886  4034
12887  4035
12888  4036
12889  4037
12890  4038
12891  4039
12892  403A
12893  403B
12894  403C
12895  403D
12896  403E
12897  403F
12898  4040
12899  4041
12900  4042
12901  4043
12902  4044
12903  4045
12904  4046
12905  4047
12906  4048
12907  4049
12908  404A
12909  404B
12910  404C
12911  404D
12912  404E
12913  404F
12914  4050
12915  4051
12916  4052
12917  4053
12918  4054
12919  4055
12920  4056
12921  4057
12922  4058
12923  4059
12924  405A
12925  405B
12926  405C
12927  405D
12928  405E
12929  405F
12930  4060
12931  4061
12932  4062
12933  4063
12934  4064
12935  4065
12936  4066
12937  4067
12938  4068
12939  4069
12940  406A
12941  406B
12942  406C
12943  406D
12944  406E
12945  406F
12946  4070
12947  4071
12948  4072
12949  4073
12950  4074
12951  4075
12952  4076
12953  4077
12954  4078
12955  4079
12956  407A
12957  407B
12958  407C
12959  407D
12960  407E
12961  407F
12962  4080
12963  4081
12964  4082
12965  4083
12966  4084
12967  4085
12968  4086
12969  4087
12970  4088
12971  4089
12972  408A
12973  408B
12974  408C
12975  408D
12976  408E
12977  408F
12978  4090
12979  4091
12980  4092
12981  4093
12982  4094
12983  4095
12984  4096
12985  4097
12986  4098
12987  4099
12988  409A
12989  409B
12990  409C
12991  409D
12992  409E
12993  409F
12994  40A0
12995  40A1
12996  40A2
12997  40A3
12998  40A4
12999  40A5
13000  40A6
13001  40A7
13002  40A8
13003  40A9
13004  40AA
13005  40AB
13006  40AC
13007  40AD
13008  40AE
13009  40AF
13010  40B0
13011  40B1
13012  40B2
13013  40B3
13014  40B4
13015  40B5
13016  40B6
13017  40B7
13018  40B8
13019  40B9
13020  40BA
13021  40BB
13022  40BC
13023  40BD
13024  40BE
13025  40BF
13026  40C0
13027  40C1
13028  40C2
13029  40C3
13030  40C4
13031  40C5
13032  40C6
13033  40C7
13034  40C8
13035  40C9
13036  40CA
13037  40CB
13038  40CC
13039  40CD
13040  40CE
13041  40CF
13042  40D0
13043  40D1
13044  40D2
13045  40D3
13046  40D4
13047  40D5
13048  40D6
13049  40D7
13050  40D8
13051  40D9
13052  40DA
13053  40DB
13054  40DC
13055  40DD
13056  40DE
13057  40DF
13058  40E0
13059  40E1
13060  40E2
13061  40E3
13062  40E4
13063  40E5
13064  40E6
13065  40E7
13066  40E8
13067  40E9
13068  40EA
13069  40EB
13070  40EC
13071  40ED
13072  40EE
13073  40EF
13074  40F0
13075  40F1
13076  40F2
13077  40F3
13078  40F4
13079  40F5
13080  40F6
13081  40F7
13082  40F8
13083  40F9
13084  40FA
13085  40FB
13086  40FC
13087  40FD
13088  40FE
13089  40FF
13090  4100
13091  4101
13092  4102
13093  4103
13094  4104
13095  4105
13096  4106
13097  4107
13098  4108
13099  4109
13100  410A
13101  410B
13102  410C
13103  410D
13104  410E
13105  410F
13106  4110
13107  4111
13108  4112
13109  4113
13110  4114
13111  4115
13112  4116
13113  4117
13114  4118
13115  4119
13116  411A
13117  411B
13118  411C
13119  411D
13120  411E
13121  411F
13122  4120
13123  4121
13124  4122
13125  4123
13126  4124
13127  4125
13128  4126
13129  4127
13130  4128
13131  4129
13132  412A
13133  412B
13134  412C
13135  412D
13136  412E
13137  412F
13138  4130
13139  4131
13140  4132
13141  4133
13142  4134
13143  4135
13144  4136
13145  4137
13146  4138
13147  4139
13148  413A
13149  413B
13150  413C
13151  413D
13152  413E
13153  413F
13154  4140
13155  4141
13156  4142
13157  4143
13158  4144
13159  4145
13160  4146
13161  4147
13162  4148
13163  4149
13164  414A
13165  414B
13166  414C
13167  414D
13168  414E
13169  414F
13170  4150
13171  4151
13172  4152
13173  4153
13174  4154
13175  4155
13176  4156
13177  4157
13178  4158
13179  4159
13180  415A
13181  415B
13182  415C
13183  415D
13184  415E
13185  415F
13186  4160
13187  4161
13188  4162
13189  4163
13190  4164
13191  4165
13192  4166
13193  4167
13194  4168
13195  4169
13196  416A
13197  416B
13198  416C
13199  416D
13200  416E
13201  416F
13202  4170
13203  4171
13204  4172
13205  4173
13206  4174
13207  4175
13208  4176
13209  4177
13210  4178
13211  4179
13212  417A
13213  417B
13214  417C
13215  417D
13216  417E
13217  417F
13218  4180
13219  4181
13220  4182
13221  4183
13222  4184
13223  4185
13224  4186
13225  4187
13226  4188
13227  4189
13228  418A
13229  418B
13230  418C
13231  418D
13232  418E
13233  418F
13234  4190
13235  4191
13236  4192
13237  4193
13238  4194
13239  4195
13240  4196
13241  4197
13242  4198
13243  4199
13244  419A
13245  419B
13246  419C
13247  419D
13248  419E
13249  419F
13250  41A0
13251  41A1
13252  41A2
13253  41A3
13254  41A4
13255  41A5
13256  41A6
13257  41A7
13258  41A8
13259  41A9
13260  41AA
13261  41AB
13262  41AC
13263  41AD
13264  41AE
13265  41AF
13266  41B0
13267  41B1
13268  41B2
13269  41B3
13270  41B4
13271  41B5
13272  41B6
13273  41B7
13274  41B8
13275  41B9
13276  41BA
13277  41BB
13278  41BC
13279  41BD
13280  41BE
13281  41BF
13282  41C0
13283  41C1
13284  41C2
13285  41C3
13286  41C4
13287  41C5
13288  41C6
13289  41C7
13290  41C8
13291  41C9
13292  41CA
13293  41CB
13294  41CC
13295  41CD
13296  41CE
13297  41CF
13298  41D0
13299  41D1
13300  41D2
13301  41D3
13302  41D4
13303  41D5
13304  41D6
13305  41D7
13306  41D8
13307  41D9
13308  41DA
13309  41DB
13310  41DC
13311  41DD
13312  41DE
13313  41DF
13314  41E0
13315  41E1
13316  41E2
13317  41E3
13318  41E4
13319  41E5
13320  41E6
13321  41E7
13322  41E8
13323  41E9
13324  41EA
13325  41EB
13326  41EC
13327  41ED
13328  41EE
13329  41EF
13330  41F0
13331  41F1
13332  41F2
13333  41F3
13334  41F4
13335  41F5
13336  41F6
13337  41F7
13338  41F8
13339  41F9
13340  41FA
13341  41FB
13342  41FC
13343  41FD
13344  41FE
13345  41FF
13346  4200
13347  4201
13348  4202
13349  4203
13350  4204
13351  4205
13352  4206
13353  4207
13354  4208
13355  4209
13356  420A
13357  420B
13358  420C
13359  420D
13360  420E
13361  420F
13362  4210
13363  4211
13364  4212
13365  4213
13366  4214
13367  4215
13368  4216
13369  4217
13370  4218
13371  4219
13372  421A
13373  421B
13374  421C
13375  421D
13376  421E
13377  421F
13378  4220
13379  4221
13380  4222
13381  4223
13382  4224
13383  4225
13384  4226
13385  4227
13386  4228
13387  4229
13388  422A
13389  422B
13390  422C
13391  422D
13392  422E
13393  422F
13394  4230
13395  4231
13396  4232
13397  4233
13398  4234
13399  4235
13400  4236
13401  4237
13402  4238
13403  4239
13404  423A
13405  423B
13406  423C
13407  423D
13408  423E
13409  423F
13410  4240
13411  4241
13412  4242
13413  4243
13414  4244
13415  4245
13416  4246
13417  4247
13418  4248
13419  4249
13420  424A
13421  424B
13422  424C
13423  424D
13424  424E
13425  424F
13426  4250
13427  4251
13428  4252
13429  4253
13430  4254
13431  4255
13432  4256
13433  4257
13434  4258
13435  4259
13436  425A
13437  425B
13438  425C
13439  425D
13440  425E
13441  425F
13442  4260
13443  4261
13444  4262
13445  4263
13446  4264
13447  4265
13448  4266
13449  4267
13450  4268
13451  4269
13452  426A
13453  426B
13454  426C
13455  426D
13456  426E
13457  426F
13458  4270
13459  4271
13460  4272
13461  4273
13462  4274
13463  4275
13464  4276
13465  4277
13466  4278
13467  4279
13468  427A
13469  427B
13470  427C
13471  427D
13472  427E
13473  427F
13474  4280
13475  4281
13476  4282
13477  4283
13478  4284
13479  4285
13480  4286
13481  4287
13482  4288
13483  4289
13484  428A
13485  428B
13486  428C
13487  428D
13488  428E
13489  428F
13490  4290
13491  4291
13492  4292
13493  4293
13494  4294
13495  4295
13496  4296
13497  4297
13498  4298
13499  4299
13500  429A
13501  429B
13502  429C
13503  429D
13504  429E
13505  429F
13506  42A0
13507  42A1
13508  42A2
13509  42A3
13510  42A4
13511  42A5
13512  42A6
13513  42A7
13514  42A8
13515  42A9
13516  42AA
13517  42AB
13518  42AC
13519  42AD
13520  42AE
13521  42AF
13522  42B0
13523  42B1
13524  42B2
13525  42B3
13526  42B4
13527  42B5
13528  42B6
13529  42B7
13530  42B8
13531  42B9
13532  42BA
13533  42BB
13534  42BC
13535  42BD
13536  42BE
13537  42BF
13538  42C0
13539  42C1
13540  42C2
13541  42C3
13542  42C4
13543  42C5
13544  42C6
13545  42C7
13546  42C8
13547  42C9
13548  42CA
13549  42CB
13550  42CC
13551  42CD
13552  42CE
13553  42CF
13554  42D0
13555  42D1
13556  42D2
13557  42D3
13558  42D4
13559  42D5
13560  42D6
13561  42D7
13562  42D8
13563  42D9
13564  42DA
13565  42DB
13566  42DC
13567  42DD
13568  42DE
13569  42DF
13570  42E0
13571  42E1
13572  42E2
13573  42E3
13574  42E4
13575  42E5
13576  42E6
13577  42E7
13578  42E8
13579  42E9
13580  42EA
13581  42EB
13582  42EC
13583  42ED
13584  42EE
13585  42EF
13586  42F0
13587  42F1
13588  42F2
13589  42F3
13590  42F4
13591  42F5
13592  42F6
13593  42F7
13594  42F8
13595  42F9
13596  42FA
13597  42FB
13598  42FC
13599  42FD
13600  42FE
13601  42FF
13602  4300
13603  4301
13604  4302
13605  4303
13606  4304
13607  4305
13608  4306
13609  4307
13610  4308
13611  4309
13612  430A
13613  430B
13614  430C
13615  430D
13616  430E
13617  430F
13618  4310
13619  4311
13620  4312
13621  4313
13622  4314
13623  4315
13624  4316
13625  4317
13626  4318
13627  4319
13628  431A
13629  431B
13630  431C
13631  431D
13632  431E
13633  431F
13634  4320
13635  4321
13636  4322
13637  4323
13638  4324
13639  4325
13640  4326
13641  4327
13642  4328
13643  4329
13644  432A
13645  432B
13646  432C
13647  432D
13648  432E
13649  432F
13650  4330
13651  4331
13652  4332
13653  4333
13654  4334
13655  4335
13656  4336
13657  4337
13658  4338
13659  4339
13660  433A
13661  433B
13662  433C
13663  433D
13664  433E
13665  433F
13666  4340
13667  4341
13668  4342
13669  4343
13670  4344
13671  4345
13672  4346
13673  4347
13674  4348
13675  4349
13676  434A
13677  434B
13678  434C
13679  434D
13680  434E
13681  434F
13682  4350
13683  4351
13684  4352
13685  4353
13686  4354
13687  4355
13688  4356
13689  4357
13690  4358
13691  4359
13692  435A
13693  435B
13694  435C
13695  435D
13696  435E
13697  435F
13698  4360
13699  4361
13700  4362
13701  4363
13702  4364
13703  4365
13704  4366
13705  4367
13706  4368
13707  4369
13708  436A
13709  436B
13710  436C
13711  436D
13712  436E
13713  436F
13714  4370
13715  4371
13716  4372
13717  4373
13718  4374
13719  4375
13720  4376
13721  4377
13722  4378
13723  4379
13724  437A
13725  437B
13726  437C
13727  437D
13728  437E
13729  437F
13730  4380
13731  4381
13732  4382
13733  4383
13734  4384
13735  4385
13736  4386
13737  4387
13738  4388
13739  4389
13740  438A
13741  438B
13742  438C
13743  438D
13744  438E
13745  438F
13746  4390
13747  4391
13748  4392
13749  4393
13750  4394
13751  4395
13752  4396
13753  4397
13754  4398
13755  4399
13756  439A
13757  439B
13758  439C
13759  439D
13760  439E
13761  439F
13762  43A0
13763  43A1
13764  43A2
13765  43A3
13766  43A4
13767  43A5
13768  43A6
13769  43A7
13770  43A8
13771  43A9
13772  43AA
13773  43AB
13774  43AC
13775  43AD
13776  43AE
13777  43AF
13778  43B0
13779  43B1
13780  43B2
13781  43B3
13782  43B4
13783  43B5
13784  43B6
13785  43B7
13786  43B8
13787  43B9
13788  43BA
13789  43BB
13790  43BC
13791  43BD
13792  43BE
13793  43BF
13794  43C0
13795  43C1
13796  43C2
13797  43C3
13798  43C4
13799  43C5
13800  43C6
13801  43C7
13802  43C8
13803  43C9
13804  43CA
13805  43CB
13806  43CC
13807  43CD
13808  43CE
13809  43CF
13810  43D0
13811  43D1
13812  43D2
13813  43D3
13814  43D4
13815  43D5
13816  43D6
13817  43D7
13818  43D8
13819  43D9
13820  43DA
13821  43DB
13822  43DC
13823  43DD
13824  43DE
13825  43DF
13826  43E0
13827  43E1
13828  43E2
13829  43E3
13830  43E4
13831  43E5
13832  43E6
13833  43E7
13834  43E8
13835  43E9
13836  43EA
13837  43EB
13838  43EC
13839  43ED
13840  43EE
13841  43EF
13842  43F0
13843  43F1
13844  43F2
13845  43F3
13846  43F4
13847  43F5
13848  43F6
13849  43F7
13850  43F8
13851  43F9
13852  43FA
13853  43FB
13854  43FC
13855  43FD
13856  43FE
13857  43FF
13858  4400
13859  4401
13860  4402
13861  4403
13862  4404
13863  4405
13864  4406
13865  4407
13866  4408
13867  4409
13868  440A
13869  440B
13870  440C
13871  440D
13872  440E
13873  440F
13874  4410
13875  4411
13876  4412
13877  4413
13878  4414
13879  4415
13880  4416
13881  4417
13882  4418
13883  4419
13884  441A
13885  441B
13886  441C
13887  441D
13888  441E
13889  441F
13890  4420
13891  4421
13892  4422
13893  4423
13894  4424
13895  4425
13896  4426
13897  4427
13898  4428
13899  4429
13900  442A
13901  442B
13902  442C
13903  442D
13904  442E
13905  442F
13906  4430
13907  4431
13908  4432
13909  4433
13910  4434
13911  4435
13912  4436
13913  4437
13914  4438
13915  4439
13916  443A
13917  443B
13918  443C
13919  443D
13920  443E
13921  443F
13922  4440
13923  4441
13924  4442
13925  4443
13926  4444
13927  4445
13928  4446
13929  4447
13930  4448
13931  4449
13932  444A
13933  444B
13934  444C
13935  444D
13936  444E
13937  444F
13938  4450
13939  4451
13940  4452
13941  4453
13942  4454
13943  4455
13944  4456
13945  4457
13946  4458
13947  4459
13948  445A
13949  445B
13950  445C
13951  445D
13952  445E
13953  445F
13954  4460
13955  4461
13956  4462
13957  4463
13958  4464
13959  4465
13960  4466
13961  4467
13962  4468
13963  4469
13964  446A
13965  446B
13966  446C
13967  446D
13968  446E
13969  446F
13970  4470
13971  4471
13972  4472
13973  4473
13974  4474
13975  4475
13976  4476
13977  4477
13978  4478
13979  4479
13980  447A
13981  447B
13982  447C
13983  447D
13984  447E
13985  447F
13986  4480
13987  4481
13988  4482
13989  4483
13990  4484
13991  4485
13992  4486
13993  4487
13994  4488
13995  4489
13996  448A
13997  448B
13998  448C
13999  448D
14000  448E
14001  448F
14002  4490
14003  4491
14004  4492
14005  4493
14006  4494
14007  4495
14008  4496
14009  4497
14010  4498
14011  4499
14012  449A
14013  449B
14014  449C
14015  449D
14016  449E
14017  449F
14018  44A0
14019  44A1
14020  44A2
14021  44A3
14022  44A4
14023  44A5
14024  44A6
14025  44A7
14026  44A8
14027  44A9
14028  44AA
14029  44AB
14030  44AC
14031  44AD
14032  44AE
14033  44AF
14034  44B0
14035  44B1
14036  44B2
14037  44B3
14038  44B4
14039  44B5
14040  44B6
14041  44B7
14042  44B8
14043  44B9
14044  44BA
14045  44BB
14046  44BC
14047  44BD
14048  44BE
14049  44BF
14050  44C0
14051  44C1
14052  44C2
14053  44C3
14054  44C4
14055  44C5
14056  44C6
14057  44C7
14058  44C8
14059  44C9
14060  44CA
14061  44CB
14062  44CC
14063  44CD
14064  44CE
14065  44CF
14066  44D0
14067  44D1
14068  44D2
14069  44D3
14070  44D4
14071  44D5
14072  44D6
14073  44D7
14074  44D8
14075  44D9
14076  44DA
14077  44DB
14078  44DC
14079  44DD
14080  44DE
14081  44DF
14082  44E0
14083  44E1
14084  44E2
14085  44E3
14086  44E4
14087  44E5
14088  44E6
14089  44E7
14090  44E8
14091  44E9
14092  44EA
14093  44EB
14094  44EC
14095  44ED
14096  44EE
14097  44EF
14098  44F0
14099  44F1
14100  44F2
14101  44F3
14102  44F4
14103  44F5
14104  44F6
14105  44F7
14106  44F8
14107  44F9
14108  44FA
14109  44FB
14110  44FC
14111  44FD
14112  44FE
14113  44FF
14114  4500
14115  4501
14116  4502
14117  4503
14118  4504
14119  4505
14120  4506
14121  4507
14122  4508
14123  4509
14124  450A
14125  450B
14126  450C
14127  450D
14128  450E
14129  450F
14130  4510
14131  4511
14132  4512
14133  4513
14134  4514
14135  4515
14136  4516
14137  4517
14138  4518
14139  4519
14140  451A
14141  451B
14142  451C
14143  451D
14144  451E
14145  451F
14146  4520
14147  4521
14148  4522
14149  4523
14150  4524
14151  4525
14152  4526
14153  4527
14154  4528
14155  4529
14156  452A
14157  452B
14158  452C
14159  452D
14160  452E
14161  452F
14162  4530
14163  4531
14164  4532
14165  4533
14166  4534
14167  4535
14168  4536
14169  4537
14170  4538
14171  4539
14172  453A
14173  453B
14174  453C
14175  453D
14176  453E
14177  453F
14178  4540
14179  4541
14180  4542
14181  4543
14182  4544
14183  4545
14184  4546
14185  4547
14186  4548
14187  4549
14188  454A
14189  454B
14190  454C
14191  454D
14192  454E
14193  454F
14194  4550
14195  4551
14196  4552
14197  4553
14198  4554
14199  4555
14200  4556
14201  4557
14202  4558
14203  4559
14204  455A
14205  455B
14206  455C
14207  455D
14208  455E
14209  455F
14210  4560
14211  4561
14212  4562
14213  4563
14214  4564
14215  4565
14216  4566
14217  4567
14218  4568
14219  4569
14220  456A
14221  456B
14222  456C
14223  456D
14224  456E
14225  456F
14226  4570
14227  4571
14228  4572
14229  4573
14230  4574
14231  4575
14232  4576
14233  4577
14234  4578
14235  4579
14236  457A
14237  457B
14238  457C
14239  457D
14240  457E
14241  457F
14242  4580
14243  4581
14244  4582
14245  4583
14246  4584
14247  4585
14248  4586
14249  4587
14250  4588
14251  4589
14252  458A
14253  458B
14254  458C
14255  458D
14256  458E
14257  458F
14258  4590
14259  4591
14260  4592
14261  4593
14262  4594
14263  4595
14264  4596
14265  4597
14266  4598
14267  4599
14268  459A
14269  459B
14270  459C
14271  459D
14272  459E
14273  459F
14274  45A0
14275  45A1
14276  45A2
14277  45A3
14278  45A4
14279  45A5
14280  45A6
14281  45A7
14282  45A8
14283  45A9
14284  45AA
14285  45AB
14286  45AC
14287  45AD
14288  45AE
14289  45AF
14290  45B0
14291  45B1
14292  45B2
14293  45B3
14294  45B4
14295  45B5
14296  45B6
14297  45B7
14298  45B8
14299  45B9
14300  45BA
14301  45BB
14302  45BC
14303  45BD
14304  45BE
14305  45BF
14306  45C0
14307  45C1
14308  45C2
14309  45C3
14310  45C4
14311  45C5
14312  45C6
14313  45C7
14314  45C8
14315  45C9
14316  45CA
14317  45CB
14318  45CC
14319  45CD
14320  45CE
14321  45CF
14322  45D0
14323  45D1
14324  45D2
14325  45D3
14326  45D4
14327  45D5
14328  45D6
14329  45D7
14330  45D8
14331  45D9
14332  45DA
14333  45DB
14334  45DC
14335  45DD
14336  45DE
14337  45DF
14338  45E0
14339  45E1
14340  45E2
14341  45E3
14342  45E4
14343  45E5
14344  45E6
14345  45E7
14346  45E8
14347  45E9
14348  45EA
14349  45EB
14350  45EC
14351  45ED
14352  45EE
14353  45EF
14354  45F0
14355  45F1
14356  45F2
14357  45F3
14358  45F4
14359  45F5
14360  45F6
14361  45F7
14362  45F8
14363  45F9
14364  45FA
14365  45FB
14366  45FC
14367  45FD
14368  45FE
14369  45FF
14370  4600
14371  4601
14372  4602
14373  4603
14374  4604
14375  4605
14376  4606
14377  4607
14378  4608
14379  4609
14380  460A
14381  460B
14382  460C
14383  460D
14384  460E
14385  460F
14386  4610
14387  4611
14388  4612
14389  4613
14390  4614
14391  4615
14392  4616
14393  4617
14394  4618
14395  4619
14396  461A
14397  461B
14398  461C
14399  461D
14400  461E
14401  461F
14402  4620
14403  4621
14404  4622
14405  4623
14406  4624
14407  4625
14408  4626
14409  4627
14410  4628
14411  4629
14412  462A
14413  462B
14414  462C
14415  462D
14416  462E
14417  462F
14418  4630
14419  4631
14420  4632
14421  4633
14422  4634
14423  4635
14424  4636
14425  4637
14426  4638
14427  4639
14428  463A
14429  463B
14430  463C
14431  463D
14432  463E
14433  463F
14434  4640
14435  4641
14436  4642
14437  4643
14438  4644
14439  4645
14440  4646
14441  4647
14442  4648
14443  4649
14444  464A
14445  464B
14446  464C
14447  464D
14448  464E
14449  464F
14450  4650
14451  4651
14452  4652
14453  4653
14454  4654
14455  4655
14456  4656
14457  4657
14458  4658
14459  4659
14460  465A
14461  465B
14462  465C
14463  465D
14464  465E
14465  465F
14466  4660
14467  4661
14468  4662
14469  4663
14470  4664
14471  4665
14472  4666
14473  4667
14474  4668
14475  4669
14476  466A
14477  466B
14478  466C
14479  466D
14480  466E
14481  466F
14482  4670
14483  4671
14484  4672
14485  4673
14486  4674
14487  4675
14488  4676
14489  4677
14490  4678
14491  4679
14492  467A
14493  467B
14494  467C
14495  467D
14496  467E
14497  467F
14498  4680
14499  4681
14500  4682
14501  4683
14502  4684
14503  4685
14504  4686
14505  4687
14506  4688
14507  4689
14508  468A
14509  468B
14510  468C
14511  468D
14512  468E
14513  468F
14514  4690
14515  4691
14516  4692
14517  4693
14518  4694
14519  4695
14520  4696
14521  4697
14522  4698
14523  4699
14524  469A
14525  469B
14526  469C
14527  469D
14528  469E
14529  469F
14530  46A0
14531  46A1
14532  46A2
14533  46A3
14534  46A4
14535  46A5
14536  46A6
14537  46A7
14538  46A8
14539  46A9
14540  46AA
14541  46AB
14542  46AC
14543  46AD
14544  46AE
14545  46AF
14546  46B0
14547  46B1
14548  46B2
14549  46B3
14550  46B4
14551  46B5
14552  46B6
14553  46B7
14554  46B8
14555  46B9
14556  46BA
14557  46BB
14558  46BC
14559  46BD
14560  46BE
14561  46BF
14562  46C0
14563  46C1
14564  46C2
14565  46C3
14566  46C4
14567  46C5
14568  46C6
14569  46C7
14570  46C8
14571  46C9
14572  46CA
14573  46CB
14574  46CC
14575  46CD
14576  46CE
14577  46CF
14578  46D0
14579  46D1
14580  46D2
14581  46D3
14582  46D4
14583  46D5
14584  46D6
14585  46D7
14586  46D8
14587  46D9
14588  46DA
14589  46DB
14590  46DC
14591  46DD
14592  46DE
14593  46DF
14594  46E0
14595  46E1
14596  46E2
14597  46E3
14598  46E4
14599  46E5
14600  46E6
14601  46E7
14602  46E8
14603  46E9
14604  46EA
14605  46EB
14606  46EC
14607  46ED
14608  46EE
14609  46EF
14610  46F0
14611  46F1
14612  46F2
14613  46F3
14614  46F4
14615  46F5
14616  46F6
14617  46F7
14618  46F8
14619  46F9
14620  46FA
14621  46FB
14622  46FC
14623  46FD
14624  46FE
14625  46FF
14626  4700
14627  4701
14628  4702
14629  4703
14630  4704
14631  4705
14632  4706
14633  4707
14634  4708
14635  4709
14636  470A
14637  470B
14638  470C
14639  470D
14640  470E
14641  470F
14642  4710
14643  4711
14644  4712
14645  4713
14646  4714
14647  4715
14648  4716
14649  4717
14650  4718
14651  4719
14652  471A
14653  471B
14654  471C
14655  471D
14656  471E
14657  471F
14658  4720
14659  4721
14660  4722
14661  4723
14662  4724
14663  4725
14664  4726
14665  4727
14666  4728
14667  4729
14668  472A
14669  472B
14670  472C
14671  472D
014672  000539        
014673  000540  var hFonts[54] ;
014674  000541  var stringsCV[54] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
14675  2406
14676  2407
14677  2408
14678  2409
14679  240A
14680  240B
14681  240C
14682  240D
14683  240E
14684  240F
14685  2410
14686  2411
14687  2412
14688  2413
14689  2414
14690  2415
14691  2416
14692  2417
14693  2418
14694  2419
14695  241A
14696  241B
14697  241C
14698  241D
14699  241E
14700  241F
14701  2420
14702  2421
14703  2422
14704  2423
14705  2424
14706  2425
14707  2426
14708  2427
14709  2428
14710  2429
14711  242A
14712  242B
14713  242C
14714  242D
14715  242E
14716  242F
14717  2430
14718  2431
14719  2432
14720  2433
14721  2434
14722  2435
14723  2436
14724  2437
14725  2438
14726  2439
14727  243A
14728  243B
14729  243C
14730  243D
14731  243E
14732  243F
14733  2440
14734  2441
14735  2442
14736  2443
14737  2444
14738  2445
14739  2446
14740  2447
14741  2448
14742  2449
14743  244A
14744  244B
14745  244C
14746  244D
14747  244E
14748  244F
14749  2450
14750  2451
14751  2452
14752  2453
14753  2454
14754  2455
14755  2456
14756  2457
14757  2458
14758  2459
14759  245A
14760  245B
14761  245C
14762  245D
14763  245E
14764  245F
14765  2460
14766  2461
14767  2462
14768  2463
14769  2464
14770  2465
14771  2466
14772  2467
14773  2468
14774  2469
14775  246A
14776  246B
14777  246C
14778  246D
14779  246E
14780  246F
14781  2470
14782  2471
014783  000542  // Start P2.inc
014784  000543  var oObjects[MaxTotObjects+1] ;                 // address of objects
014785  000544  var CurrentForm ;
014786  000545  var TouchXpos, TouchYpos ;
014787  000546  var InputType, TouchState, CurInputData, pInputIndex ;
014788  000547  var comRX[40], cmd[CMDLenMAX] ;
014789  000548        
014790  000549  var InputCS, OutputCS ;
014791  000550        
014792  000551        
014793  000552        
014794  000553  func seroutCS(var op)
014795  000554      serout(op) ;
014796  000555      OutputCS ^= op ;
014797  000556  endfunc
014798  000557        
014799  000558  func nak0()
014800  000559      serout(NAK) ;
014801  000560      InputCS := 0 ;
014802  000561  endfunc
014803  000562        
014804  000563  func seroutOcs()
014805  000564      serout(OutputCS) ;
014806  000565      OutputCS := 0 ;
014807  000566  endfunc
014808  000567        
014809  000568  func SendReport(var id, var objt, var objn, var val)
014810  000569      seroutCS(id) ;
014811  000570      seroutCS(objt) ;
014812  000571      seroutCS(objn) ;
014813  000572      seroutCS(val >> 8) ; // first 8 bits
014814  000573      seroutCS(val) ;
014815  000574      seroutOcs() ;
014816  000575  endfunc
014817  000576        
014818  000577        
014819  000578  func ReadObject(var ObjectType, var ObjectIdx)
014820  000579      var j, k, Objects ;
014821  000580      Objects := *(oObjects+ObjectType) ;
014822  000581        
014823  000582      j := 2 + ObjectIdx * 2 + Objects ;
014824  000583       if (ObjectType == tForm)
014825  000584          k := CurrentForm ;
014826  000585      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
014827  000586          k := img_GetWord(hndl, *j, IMAGE_TAG2);
014828  000587      else if (ObjectType == tStrings)
014829  000588          k := stringsCV[ObjectIdx];
014830  000589          else
014831  000590          k := img_GetWord(hndl, *j, IMAGE_INDEX);
014832  000591          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
014833  000592                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
014834  000593      endif
014835  000594      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
014836  000595  endfunc
014837  000596        
014838  000597        
014839  000598  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
014840  000599      var i, j, k, Objects ;
014841  000600      ObjectType &= 0x3f ;
014842  000601      if (ObjectType == tForm)
014843  000602          ActivateForm(ObjectIdx) ;
014844  000603      else
014845  000604          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
014846  000605          i := *(Objects) ;
014847  000606          switch (ObjectType)
014848  000607              case tWinButton :
014849  000608                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
014850  000609                  break ;
014851  000610              case tUserButton :
014852  000611                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
014853  000612                  break ;
014854  000613              default : j := -1 ;
014855  000614          endswitch
014856  000615          if (j != -1)
014857  000616              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
014858  000617              NewVal := NewVal << 1 ;
014859  000618              if (OVF())      // button group index change
014860  000619                  if (*(j+InputData+Ofs_IPD_P1))
014861  000620                      k &= 1 ;    // mask off old group index for momentary
014862  000621                  else
014863  000622                      k &= 3 ;    // mask off old group index for toggle
014864  000623                  endif
014865  000624              else            // normal set
014866  000625                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
014867  000626                  k &= 0xfffc ;    // retain only group index for state set
014868  000627              endif
014869  000628              NewVal |= k ;
014870  000629          endif
014871  000630           if (ObjectType == tLeddigits)
014872  000631              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
014873  000632              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
014874  000633          else if (ObjectType == tStrings)
014875  000634              PrintStrings(ObjectIdx, NewVal, 0);
014876  000635          else
014877  000636              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
014878  000637              img_Show(hndl, i) ; // will only display if form is current
014879  000638          endif
014880  000639      endif
014881  000640  endfunc
014882  000641        
014883  000642  func TurnOffButtons(var group)
014884  000643      var j, k, l;
014885  000644      for (j := 0; j < nInputs; j++)
014886  000645          k := j*IPDatasize ;
014887  000646          if (*(InputData+k+Ofs_IPD_P2) == group)
014888  000647              l := -1 ;
014889  000648               if (*(InputData+k) == tWinButton)
014890  000649                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
014891  000650                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
014892  000651                  img_Show(hndl, l);      // only shows on current form
014893  000652              else if (*(InputData+k) == tUserButton)
014894  000653                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
014895  000654                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
014896  000655                  img_Show(hndl, l);      // only shows on current form
014897  000656              endif
014898  000657          endif
014899  000658      next
014900  000659  endfunc
014901  000660        
014902  000661        
014903  000662  // WARNING, this code will crash if newval exceeds maximum displayable number
014904  000663  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
014905  000664      var i, j, k, l, lb, newval ;
014906  000665      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
014907  000666      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
014908  000667      i := -1 ;
014909  000668      j := *(typeptr) ;
014910  000669      repeat
014911  000670          typeptr += 2 ;
014912  000671          i++ ;
014913  000672          until (*(typeptr) == imgidx);
014914  000673      j := setptr + i*10 ;
014915  000674        
014916  000675      imgidx++ ;
014917  000676      l := 1 ;
014918  000677      for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
014919  000678          l *= 10 ;
014920  000679      next
014921  000680      lb := *(j+Ofs_Digits_LeadingBlanks) ;
014922  000681      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
014923  000682          k := newval / l ;
014924  000683          newval -= k * l ;
014925  000684          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
014926  000685              if (k == 0)
014927  000686                  k := 10 ;
014928  000687              else
014929  000688                  lb := 0 ;
014930  000689              endif
014931  000690          endif
014932  000691          l /= 10 ;
014933  000692          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
014934  000693          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
014935  000694          img_Show(hndl, imgidx);
014936  000695      next
014937  000696  endfunc
014938  000697        
014939  000698        
014940  000699  func ActivateForm(var newform)
014941  000700      var i, j, *p ;
014942  000701        
014943  000702      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
014944  000703          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
014945  000704              if (img_GetWord(hndl, i, IMAGE_TAG))
014946  000705                  img_Disable(hndl,i) ;
014947  000706              endif
014948  000707          next
014949  000708      endif
014950  000709      CurrentForm := newform ;
014951  000710      // display newform image or clear to image color
014952  000711      if (FormBGcolors[CurrentForm] != ColorBGimage)
014953  000712          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
014954  000713          gfx_Cls() ;
014955  000714          DoGFXObjects() ;                                    // display GFX 'widgets'
014956  000715      endif
014957  000716        
014958  000717      // enable inputs
014959  000718      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
014960  000719          j := img_GetWord(hndl, i, IMAGE_TAG) ;
014961  000720          if (j)
014962  000721              j-- ;
014963  000722              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
014964  000723              //if (j != tKeyboard)
014965  000724              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
014966  000725                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
014967  000726              endif
014968  000727              img_Show(hndl,i) ; // show initialy, if required
014969  000728              if (j == tForm)
014970  000729                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
014971  000730              else if (j == tLeddigits)
014972  000731                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
014973  000732              endif
014974  000733          endif
014975  000734      next
014976  000735      for (i := 0; i < nStrings; i++)
014977  000736          if (stringsCV[i] != -1)
014978  000737              WriteObject(tStrings, i, stringsCV[i]) ;
014979  000738          endif
014980  000739      next
014981  000740        
014982  000741  endfunc
014983  000742        
014984  000743  func UpdateObjects(var newval)
014985  000744      var IPidx, otherOBJ ;
014986  000745      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
014987  000746        
014988  000747          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
014989  000748              img_Show(hndl, *(pInputIndex));      // only shows on current form
014990  000749          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
014991  000750              if (*(CurInputData+Ofs_IPD_P1))
014992  000751                  newval &= 1;
014993  000752              else
014994  000753                  newval &= 3;
014995  000754              endif
014996  000755              if (newval > 1) newval := 1;
014997  000756          endif
014998  000757          IPidx := *(CurInputData+TouchState) ;
014999  000758          while(IPidx != 0)
015000  000759              otherOBJ := IPidx + InputData;
015001  000760              if (*(otherOBJ) == OT_REPORT)
015002  000761          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
015003  000762              else if (*(otherOBJ) == OT_MAGIC)
015004  000763                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
015005  000764                  IPidx(newval) ;
015006  000765              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
015007  000766                  if (*(otherOBJ) == OT_ACTIVATE)
015008  000767                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
015009  000768                      InputType := tForm ;
015010  000769                  else if (*(otherOBJ) == OT_SETCONST)
015011  000770                      newval := *(otherOBJ+Ofs_IPD_P3) ;
015012  000771                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015013  000772                  else if (*(otherOBJ) == OT_SETANOTHER)
015014  000773                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015015  000774                  else if (*(otherOBJ) == OT_PREVFRAME)
015016  000775                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
015017  000776                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
015018  000777                      endif
015019  000778                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015020  000779                  else if (*(otherOBJ) == OT_NEXTFRAME)
015021  000780                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
015022  000781                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
015023  000782                      endif
015024  000783                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015025  000784                  else if (*(otherOBJ) == OT_PREVSTRING)
015026  000785                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
015027  000786                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
015028  000787                      endif
015029  000788                  else if (*(otherOBJ) == OT_NEXTSTRING)
015030  000789                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
015031  000790                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
015032  000791                      endif
015033  000792                  endif
015034  000793              endif
015035  000794              IPidx := *(otherOBJ+TouchState) ;
015036  000795          wend
015037  000796      endif
015038  000797  endfunc
015039  000798        
015040  000799  // End P2.inc
015041  000800  func DoGFXObjects()
015042  000801  endfunc
015043  000802        
015044  000803  // Start P3.inc
015045  000804  func main()
015046  000805      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
015047  000806        
015048  000807      putstr("Mounting...\n");
015049  000808      if (!(file_Mount()))
015050  000809          while(!(file_Mount()))
015051  000810              putstr("Drive not mounted...");
015052  000811              pause(200);
015053  000812              gfx_Cls();
015054  000813              pause(200);
015055  000814          wend
015056  000815      endif
015057  000816  //    gfx_MoveTo(0, 0);
015058  000817  //    print(mem_Heap()," ") ;
015059  000818  //    gfx_TransparentColour(0x0020);
015060  000819  //    gfx_Transparency(ON);
015061  000820        
015062  000821      gfx_ScreenMode(LANDSCAPE) ;
015063  000822        
015064  000823      // open image control
015065  000824      hndl := file_LoadImageControl("RepRap_T.dat", "RepRap_T.gci", 1);
015066  000825        
015067  000826      // init 'constants'
015068  000827  // End P3.inc
015069  000828        
015070  000829      oObjects[tDipSwitch] := oDipSwitchs ;
015071  000830      oObjects[tKnob] := oKnobs ;
015072  000831      oObjects[tRockerSwitch] := oRockerSwitchs ;
015073  000832      oObjects[tRotarySwitch] := oRotarySwitchs ;
015074  000833      oObjects[tGSlider] := oGSliders ;
015075  000834      oObjects[tTrackbar] := oTrackbars ;
015076  000835      oObjects[tWinButton] := oWinButtons ;
015077  000836      oObjects[tAngularmeter] := oAngularmeters ;
015078  000837      oObjects[tCoolgauge] := oCoolgauges ;
015079  000838      oObjects[tCustomdigits] := oCustomdigitss ;
015080  000839      oObjects[tForm] := oForms ;
015081  000840      oObjects[tGauge] := oGauges ;
015082  000841      oObjects[tImage] := oImages ;
015083  000842      oObjects[tKeyboard] := oKeyboards ;
015084  000843      oObjects[tLed] := oLeds ;
015085  000844      oObjects[tLeddigits] := oLeddigitss ;
015086  000845      oObjects[tMeter] := oMeters ;
015087  000846      oObjects[tStrings] := oStringss ;
015088  000847      oObjects[tThermometer] := oThermometers ;
015089  000848      oObjects[tUserled] := oUserleds ;
015090  000849      oObjects[tVideo] := oVideos ;
015091  000850      oObjects[tStaticText] := oStaticTexts ;
015092  000851      oObjects[tSounds] := oSoundss ;
015093  000852      oObjects[tTimer] := oTimers ;
015094  000853      oObjects[tSpectrum] := oSpectrums ;
015095  000854      oObjects[tTank] := oTanks ;
015096  000855      oObjects[tUserImages] := oUserImagess ;
015097  000856      oObjects[tPinOutput] := oPinOutputs ;
015098  000857      oObjects[tPinInput] := oPinInputs ;
015099  000858      oObjects[t4Dbutton] := o4Dbuttons ;
015100  000859      oObjects[tAniButton] := oAniButtons ;
015101  000860      oObjects[tColorPicker] := oColorPickers ;
015102  000861      oObjects[tUserButton] := oUserButtons ;
015103  000862      hFonts[0] := file_LoadImageControl("RepRap_T.d04", "RepRap_T.g04", 1)  ;
015104  000863      hFonts[1] := file_LoadImageControl("RepRap_T.d02", "RepRap_T.g02", 1)  ;
015105  000864      hFonts[2] := file_LoadImageControl("RepRap_T.d03", "RepRap_T.g03", 1)  ;
015106  000865      hFonts[3] := file_LoadImageControl("RepRap_T.d01", "RepRap_T.g01", 1)  ;
015107  000866      hFonts[4] := FONT3 ;
015108  000867      hFonts[5] := file_LoadImageControl("RepRap_T.d0@", "RepRap_T.g0@", 1)  ;
015109  000868      hFonts[6] := FONT3 ;
015110  000869      hFonts[10] := file_LoadImageControl("RepRap_T.d0B", "RepRap_T.g0B", 1)  ;
015111  000870      hFonts[11] := file_LoadImageControl("RepRap_T.d07", "RepRap_T.g07", 1)  ;
015112  000871      hFonts[12] := file_LoadImageControl("RepRap_T.d06", "RepRap_T.g06", 1)  ;
015113  000872      hFonts[16] := FONT3 ;
015114  000873      hFonts[17] := file_LoadImageControl("RepRap_T.d0C", "RepRap_T.g0C", 1)  ;
015115  000874      hFonts[31] := file_LoadImageControl("RepRap_T.d08", "RepRap_T.g08", 1)  ;
015116  000875      hFonts[37] := file_LoadImageControl("RepRap_T.d05", "RepRap_T.g05", 1)  ;
015117  000876      hFonts[50] := file_LoadImageControl("RepRap_T.d09", "RepRap_T.g09", 1)  ;
015118  000877      hFonts[51] := FONT3 ;
015119  000878      hFonts[52] := FONT3 ;
015120  000879      hFonts[7] := hFonts[37] ;
015121  000880      hFonts[8] := hFonts[37] ;
015122  000881      hFonts[9] := hFonts[0] ;
015123  000882      hFonts[29] := hFonts[11] ;
015124  000883      hFonts[32] := hFonts[31] ;
015125  000884      hFonts[34] := hFonts[0] ;
015126  000885      hFonts[36] := hFonts[0] ;
015127  000886      hFonts[38] := hFonts[37] ;
015128  000887      hFonts[39] := hFonts[37] ;
015129  000888      hFonts[40] := hFonts[0] ;
015130  000889      hFonts[41] := hFonts[0] ;
015131  000890      hFonts[42] := hFonts[0] ;
015132  000891      hFonts[43] := hFonts[37] ;
015133  000892      hFonts[44] := hFonts[37] ;
015134  000893      hFonts[45] := hFonts[37] ;
015135  000894      hFonts[53] := hFonts[50] ;
015136  000895  // Start P4.inc
015137  000896      hstrings := file_Open("RepRap_T.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
015138  000897      // init comms
015139  000898      com_Init(comRX,CMDLenMAX,0);
015140  000899      com_SetBaud(COM0,19886);
015141  000900      com_TXbuffer(comTX, 100, 0);
015142  000901      snd_BufSize(2) ;
015143  000902      // tag 'real' objects
015144  000903      for (i := 0; i <= MaxTotObjects; i++)
015145  000904          if (   (i != tSounds)
015146  000905              && (i != tTimer)
015147  000906              && (i != tPinOutput)
015148  000907              && (i != tPinInput) )
015149  000908              TouchXpos := oObjects[i] ;
015150  000909              TouchYpos := *(TouchXpos) ;
015151  000910              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
015152  000911                  oldn := *(TouchXpos+ImageTouched*2) ;
015153  000912                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
015154  000913                  if (oldn != -1)
015155  000914                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
015156  000915                      img_Disable(hndl, oldn) ;
015157  000916                  endif
015158  000917              next
015159  000918          endif
015160  000919      next
015161  000920        
015162  000921      // display initial form
015163  000922      CurrentForm := -1 ;
015164  000923      ActivateForm(0) ; // need to change this according to first actual form
015165  000924        
015166  000925  // End P4.inc
015167  000926  // Start P5.inc
015168  000927      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
015169  000928      oldn := -1 ;
015170  000929      repeat
015171  000930        
015172  000931          // check comms for command, how to NAK invalid command
015173  000932          if (com_Count() != 0)
015174  000933              i := serin() ;
015175  000934              InputCS ^= i ;               // update checksum
015176  000935              if (   (cmdi > 2)
015177  000936                  && (cmd[0] == WRITE_STRU) )
015178  000937                  j := (cmdi-1) >> 1 + 2 ;
015179  000938                  if (j == CMDLenMAX)    // max length exceeded
015180  000939                      nak0() ;
015181  000940                      cmdi := -1 ;
015182  000941                  else if (cmdi & 1)
015183  000942                      cmd[j] := i ;
015184  000943                      if (cmd[2] == 0)    // if string complete
015185  000944                          if (InputCS)
015186  000945                              nak0() ;
015187  000946                          else
015188  000947                              if (cmd[0] == WRITE_STRU)
015189  000948                              cmd[j] := 0 ;                     // terminate it
015190  000949                              PrintStrings(cmd[1], &cmd[3], 1) ;
015191  000950                              serout(ACK) ;
015192  000951                              else
015193  000952                              endif
015194  000953                          endif
015195  000954                          cmdi := -1 ;
015196  000955                      endif
015197  000956                  else
015198  000957                      cmd[j] := cmd[j] << 8 + i ;
015199  000958                      cmd[2]-- ;          // dec length
015200  000959                  endif
015201  000960                  cmdi++ ;
015202  000961              else // not unicode string
015203  000962                  cmd[cmdi++] := i ;
015204  000963                   if (cmd[0] == WRITE_STR)                  // Ansi String
015205  000964                      if (cmdi == CMDLenMAX)      // max length exceeded
015206  000965                          nak0() ;
015207  000966                          cmdi := 0 ;
015208  000967                      else if (cmdi > 2)
015209  000968                          if (cmd[2] == -1)
015210  000969                              if (InputCS)
015211  000970                                  nak0() ;
015212  000971                              else
015213  000972                                  if (cmd[0] == WRITE_STR)
015214  000973                                  cmd[cmdi-1] := 0 ;                     // terminate it
015215  000974                                  PrintStrings(cmd[1], &cmd[3], 1) ;
015216  000975                                  serout(ACK) ;
015217  000976                                  else
015218  000977                                  endif
015219  000978                              endif
015220  000979                              cmdi := 0 ;
015221  000980                          else
015222  000981                              cmd[2]-- ;          // dec length
015223  000982                          endif
015224  000983                      endif
015225  000984                  else if (   (cmd[0] == READ_OBJ)
015226  000985                           && (cmdi == 4)         )
015227  000986                      if (InputCS)
015228  000987                          nak0() ;
015229  000988                      else
015230  000989                          ReadObject(cmd[1], cmd[2]) ;
015231  000990                      endif
015232  000991                      cmdi := 0 ;
015233  000992                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
015234  000993                           && (cmdi == 6)          )
015235  000994                      if (InputCS)
015236  000995                          nak0() ;
015237  000996                      else
015238  000997                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
015239  000998                          serout(ACK) ;
015240  000999                      endif
015241  001000                      cmdi := 0 ;
015242  001001                  else if (   (cmd[0] == WRITE_CONTRAST)
015243  001002                           && (cmdi == 3)         )
015244  001003                      if (InputCS)
015245  001004                          nak0() ;
015246  001005                      else
015247  001006                          gfx_Contrast(cmd[1]) ;
015248  001007                          serout(ACK) ;
015249  001008                      endif
015250  001009                      cmdi := 0 ;
015251  001010                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
015252  001011                      nak0() ;
015253  001012                      cmdi := 0 ;
015254  001013                  endif
015255  001014              endif   // not unicode string
015256  001015          endif   // a character is available
015257  001016        
015258  001017        
015259  001018      // touch code processing
015260  001019        
015261  001020          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
015262  001021          ImageTouched := img_Touched(hndl,-1) ;
015263  001022          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
015264  001023              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
015265  001024                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
015266  001025              endif
015267  001026              if (TouchStatus != TOUCH_RELEASED)        // if not released
015268  001027                  if (oldn != -1)
015269  001028                      ImageTouched := oldn ;
015270  001029                  else
015271  001030                      if (oldn != ImageTouched)
015272  001031                  oldn := ImageTouched ;
015273  001032                          TouchStatus := TOUCH_PRESSED ;
015274  001033                      endif
015275  001034                  endif
015276  001035                  TouchXpos  := touch_Get(TOUCH_GETX);
015277  001036                  TouchYpos  := touch_Get(TOUCH_GETY);
015278  001037                  TouchState := Ofs_IPD_DOWN ;
015279  001038              else
015280  001039                  ImageTouched := oldn ;                     // simulate release of what we touched
015281  001040                  oldn := -1 ;                    // prevent double release
015282  001041                  TouchState := Ofs_IPD_RELEASE ;
015283  001042              endif
015284  001043              if (ImageTouched != -1)
015285  001044                          CurInputData := InputControls[ImageTouched] + InputData;
015286  001045                          InputType := *(CurInputData) ;
015287  001046                          i := InputType ;
015288  001047                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
015289  001048                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
015290  001049              endif
015291  001050          endif
015292  001051   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
015293  001052        
015294  001053          sys_EventsResume() ;
015295  001054      forever
015296  001055        
015297  001056  cDipswitch:
015298  001057        
015299  001058  cKnob:
015300  001059        
015301  001060  cRockerswitch:
015302  001061        
015303  001062  cRotaryswitch:
015304  001063        
015305  001064  cSlider:
015306  001065  cTrackbar:
015307  001066        
015308  001067  c4DButton:
015309  001068  cUserButton:
015310  001069      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
015311  001070      goto gbutton ;
015312  001071  cWinbutton:
015313  001072      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
015314  001073  gbutton:
015315  001074      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
015316  001075      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
015317  001076          if (TouchStatus == TOUCH_RELEASED)
015318  001077              i &= 0xfffe ;
015319  001078              TouchState == Ofs_IPD_DOWN ;
015320  001079          else
015321  001080              i |= 1 ;
015322  001081              TouchState == Ofs_IPD_RELEASE ;
015323  001082          endif
015324  001083      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
015325  001084          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
015326  001085              if ((i & 3) == 3)
015327  001086                  i &= 0xfffc ;
015328  001087              else
015329  001088                  i++ ;
015330  001089              endif
015331  001090          else
015332  001091              i |= 1 ;                                      // make down regardless of current state
015333  001092          endif
015334  001093      else                        // group action, up all other buttons on touch press, reports 0 for button down
015335  001094          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
015336  001095              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
015337  001096          endif
015338  001097          i := (i & 0xfffc) | 2 ;
015339  001098      endif
015340  001099        
015341  001100      UpdateObjects(i) ;
015342  001101  endsub ;
015343  001102        
015344  001103  cAniButton:
015345  001104        
015346  001105  cColorPicker:
015347  001106        
015348  001107  endfunc
015349  001108  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 764 file:RepRap_Touchv1.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 700 file:RepRap_Touchv1.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       12214  0x00002fb6 (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 90)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (not used)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  382  0x0000017e (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 147)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                302  0x0000012e (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         298  0x0000012a (mem) word (global)  (usage 27)
CurrentForm                          288  0x00000120 (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (not used)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (usage 6)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       11582  0x00002d3e (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 39)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (usage 15)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                        8981  0x00002315FormBGcolors                        8981  0x00002315 (mem) word[50] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                         107  0x0000006bFormEndIndex                         107  0x0000006b (mem) word[50] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[50] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[54] (global)  (usage 150)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             218  0x000000da (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm0                                 0  0x00000000 (const ??? 0)  (usage 3)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                               86  0x00000056 (const ??? 0)  (usage 3)
iForm11                               72  0x00000048 (const ??? 0)  (usage 3)
iForm12                               46  0x0000002e (const ??? 0)  (usage 3)
iForm13                              183  0x000000b7 (const ??? 0)  (usage 3)
iForm14                               47  0x0000002f (const ??? 0)  (usage 3)
iForm15                              187  0x000000bb (const ??? 0)  (usage 3)
iForm16                              144  0x00000090 (const ??? 0)  (usage 3)
iForm18                              147  0x00000093 (const ??? 0)  (usage 3)
iForm19                               51  0x00000033 (const ??? 0)  (usage 3)
iForm2                                 4  0x00000004 (const ??? 0)  (usage 3)
iForm20                               54  0x00000036 (const ??? 0)  (usage 3)
iForm21                               58  0x0000003a (const ??? 0)  (usage 3)
iForm22                              189  0x000000bd (const ??? 0)  (usage 3)
iForm23                               62  0x0000003e (const ??? 0)  (usage 3)
iForm24                               66  0x00000042 (const ??? 0)  (usage 3)
iForm25                              211  0x000000d3 (const ??? 0)  (usage 3)
iForm26                               70  0x00000046 (const ??? 0)  (usage 3)
iForm27                               74  0x0000004a (const ??? 0)  (usage 3)
iForm28                               96  0x00000060 (const ??? 0)  (usage 3)
iForm29                              100  0x00000064 (const ??? 0)  (usage 3)
iForm3                               179  0x000000b3 (const ??? 0)  (usage 3)
iForm30                              109  0x0000006d (const ??? 0)  (usage 3)
iForm31                              113  0x00000071 (const ??? 0)  (usage 3)
iForm32                              117  0x00000075 (const ??? 0)  (usage 3)
iForm33                              121  0x00000079 (const ??? 0)  (usage 3)
iForm34                              133  0x00000085 (const ??? 0)  (usage 3)
iForm35                              137  0x00000089 (const ??? 0)  (usage 3)
iForm36                              192  0x000000c0 (const ??? 0)  (usage 3)
iForm37                              194  0x000000c2 (const ??? 0)  (usage 3)
iForm38                              149  0x00000095 (const ??? 0)  (usage 3)
iForm39                              196  0x000000c4 (const ??? 0)  (usage 3)
iForm4                                 9  0x00000009 (const ??? 0)  (usage 3)
iForm40                              159  0x0000009f (const ??? 0)  (usage 3)
iForm41                              162  0x000000a2 (const ??? 0)  (usage 3)
iForm42                              199  0x000000c7 (const ??? 0)  (usage 3)
iForm43                              165  0x000000a5 (const ??? 0)  (usage 3)
iForm45                              202  0x000000ca (const ??? 0)  (usage 3)
iForm46                              205  0x000000cd (const ??? 0)  (usage 3)
iForm47                              208  0x000000d0 (const ??? 0)  (usage 3)
iForm48                              216  0x000000d8 (const ??? 0)  (usage 3)
iForm49                              221  0x000000dd (const ??? 0)  (usage 3)
iForm5                                14  0x0000000e (const ??? 0)  (usage 3)
iForm6                                17  0x00000011 (const ??? 0)  (usage 3)
iForm7                               141  0x0000008d (const ??? 0)  (usage 3)
iForm9                                42  0x0000002a (const ??? 0)  (usage 3)
iiLeddigits0                          31  0x0000001f (const ??? 0)  (not used)
iiLeddigits1                          33  0x00000021 (const ??? 0)  (not used)
iiLeddigits2                          35  0x00000023 (const ??? 0)  (not used)
iLeddigits0                           30  0x0000001e (const ??? 0)  (usage 3)
iLeddigits1                           32  0x00000020 (const ??? 0)  (usage 3)
iLeddigits2                           34  0x00000022 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        207  0x000000cfInputControls                        207  0x000000cf (mem) word[225] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
InputCS                              542  0x0000021e (mem) word (global)  (usage 21)
InputData                            657  0x00000291InputData                            657  0x00000291 (mem) word[3388] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 30)
InputType                            294  0x00000126 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                          67  0x00000043 (const ??? 0)  (usage 3)
iStatictext1                          36  0x00000024 (const ??? 0)  (usage 3)
iStatictext12                        177  0x000000b1 (const ??? 0)  (usage 3)
iStatictext13                        161  0x000000a1 (const ??? 0)  (usage 3)
iStatictext14                        210  0x000000d2 (const ??? 0)  (usage 3)
iStatictext2                          37  0x00000025 (const ??? 0)  (usage 3)
iStatictext4                          38  0x00000026 (const ??? 0)  (usage 3)
iStatictext6                         160  0x000000a0 (const ??? 0)  (usage 3)
iStatictext8                          60  0x0000003c (const ??? 0)  (usage 3)
iStrings0                           7433  0x00001d09iStrings0                           7433  0x00001d09 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings1                           7459  0x00001d23iStrings1                           7459  0x00001d23 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings10                          7693  0x00001e0diStrings10                          7693  0x00001e0d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings11                          7719  0x00001e27iStrings11                          7719  0x00001e27 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings12                          7745  0x00001e41iStrings12                          7745  0x00001e41 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings16                          7771  0x00001e5biStrings16                          7771  0x00001e5b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings17                          7797  0x00001e75iStrings17                          7797  0x00001e75 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings2                           7485  0x00001d3diStrings2                           7485  0x00001d3d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings29                          7823  0x00001e8fiStrings29                          7823  0x00001e8f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings3                           7511  0x00001d57iStrings3                           7511  0x00001d57 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings31                          7849  0x00001ea9iStrings31                          7849  0x00001ea9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings32                          7875  0x00001ec3iStrings32                          7875  0x00001ec3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings34                          7901  0x00001eddiStrings34                          7901  0x00001edd (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings36                          7927  0x00001ef7iStrings36                          7927  0x00001ef7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings37                          7953  0x00001f11iStrings37                          7953  0x00001f11 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings38                          7979  0x00001f2biStrings38                          7979  0x00001f2b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings39                          8005  0x00001f45iStrings39                          8005  0x00001f45 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings4                           7537  0x00001d71iStrings4                           7537  0x00001d71 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings40                          8031  0x00001f5fiStrings40                          8031  0x00001f5f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings41                          8057  0x00001f79iStrings41                          8057  0x00001f79 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings42                          8083  0x00001f93iStrings42                          8083  0x00001f93 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings43                          8109  0x00001fadiStrings43                          8109  0x00001fad (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings44                          8135  0x00001fc7iStrings44                          8135  0x00001fc7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings45                          8161  0x00001fe1iStrings45                          8161  0x00001fe1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings5                           7563  0x00001d8biStrings5                           7563  0x00001d8b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings50                          8187  0x00001ffbiStrings50                          8187  0x00001ffb (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings51                          8213  0x00002015iStrings51                          8213  0x00002015 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings52                          8239  0x0000202fiStrings52                          8239  0x0000202f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings53                          8265  0x00002049iStrings53                          8265  0x00002049 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings6                           7589  0x00001da5iStrings6                           7589  0x00001da5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings7                           7615  0x00001dbfiStrings7                           7615  0x00001dbf (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings8                           7641  0x00001dd9iStrings8                           7641  0x00001dd9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings9                           7667  0x00001df3iStrings9                           7667  0x00001df3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                        143  0x0000008f (const ??? 0)  (usage 3)
iUserbutton100                        83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton101                        84  0x00000054 (const ??? 0)  (usage 3)
iUserbutton102                       122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton103                       123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton104                       124  0x0000007c (const ??? 0)  (usage 3)
iUserbutton105                       125  0x0000007d (const ??? 0)  (usage 3)
iUserbutton106                       126  0x0000007e (const ??? 0)  (usage 3)
iUserbutton107                       127  0x0000007f (const ??? 0)  (usage 3)
iUserbutton108                       128  0x00000080 (const ??? 0)  (usage 3)
iUserbutton109                       129  0x00000081 (const ??? 0)  (usage 3)
iUserbutton11                         97  0x00000061 (const ??? 0)  (usage 3)
iUserbutton110                       130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton111                       131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton112                       134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton113                       135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton114                       136  0x00000088 (const ??? 0)  (usage 3)
iUserbutton115                       138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton116                       139  0x0000008b (const ??? 0)  (usage 3)
iUserbutton117                       140  0x0000008c (const ??? 0)  (usage 3)
iUserbutton118                        65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton119                       219  0x000000db (const ??? 0)  (usage 3)
iUserbutton12                         15  0x0000000f (const ??? 0)  (usage 3)
iUserbutton120                       152  0x00000098 (const ??? 0)  (usage 3)
iUserbutton121                       153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton122                       154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton123                       155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton124                       156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton125                       157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton126                       158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton127                       220  0x000000dc (const ??? 0)  (usage 3)
iUserbutton128                       222  0x000000de (const ??? 0)  (usage 3)
iUserbutton129                       223  0x000000df (const ??? 0)  (usage 3)
iUserbutton13                         16  0x00000010 (const ??? 0)  (usage 3)
iUserbutton130                       224  0x000000e0 (const ??? 0)  (usage 3)
iUserbutton131                       215  0x000000d7 (const ??? 0)  (usage 3)
iUserbutton14                          7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton151                       170  0x000000aa (const ??? 0)  (usage 3)
iUserbutton152                       171  0x000000ab (const ??? 0)  (usage 3)
iUserbutton153                       172  0x000000ac (const ??? 0)  (usage 3)
iUserbutton154                       173  0x000000ad (const ??? 0)  (usage 3)
iUserbutton155                       174  0x000000ae (const ??? 0)  (usage 3)
iUserbutton156                       175  0x000000af (const ??? 0)  (usage 3)
iUserbutton157                       176  0x000000b0 (const ??? 0)  (usage 3)
iUserbutton158                       146  0x00000092 (const ??? 0)  (usage 3)
iUserbutton159                        21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton16                         45  0x0000002d (const ??? 0)  (usage 3)
iUserbutton160                       178  0x000000b2 (const ??? 0)  (usage 3)
iUserbutton17                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton18                         43  0x0000002b (const ??? 0)  (usage 3)
iUserbutton19                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton2                          19  0x00000013 (const ??? 0)  (usage 3)
iUserbutton20                         85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton21                         75  0x0000004b (const ??? 0)  (usage 3)
iUserbutton22                         76  0x0000004c (const ??? 0)  (usage 3)
iUserbutton23                         87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton24                         88  0x00000058 (const ??? 0)  (usage 3)
iUserbutton25                         89  0x00000059 (const ??? 0)  (usage 3)
iUserbutton26                        132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton27                        180  0x000000b4 (const ??? 0)  (usage 3)
iUserbutton28                        181  0x000000b5 (const ??? 0)  (usage 3)
iUserbutton29                        182  0x000000b6 (const ??? 0)  (usage 3)
iUserbutton3                          29  0x0000001d (const ??? 0)  (usage 3)
iUserbutton30                        184  0x000000b8 (const ??? 0)  (usage 3)
iUserbutton31                        185  0x000000b9 (const ??? 0)  (usage 3)
iUserbutton32                         49  0x00000031 (const ??? 0)  (usage 3)
iUserbutton33                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton34                        166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton35                        186  0x000000ba (const ??? 0)  (usage 3)
iUserbutton36                        188  0x000000bc (const ??? 0)  (usage 3)
iUserbutton37                        193  0x000000c1 (const ??? 0)  (usage 3)
iUserbutton38                        195  0x000000c3 (const ??? 0)  (usage 3)
iUserbutton39                        190  0x000000be (const ??? 0)  (usage 3)
iUserbutton4                           5  0x00000005 (const ??? 0)  (usage 3)
iUserbutton40                        197  0x000000c5 (const ??? 0)  (usage 3)
iUserbutton41                        145  0x00000091 (const ??? 0)  (usage 3)
iUserbutton42                        200  0x000000c8 (const ??? 0)  (usage 3)
iUserbutton43                        212  0x000000d4 (const ??? 0)  (usage 3)
iUserbutton44                        203  0x000000cb (const ??? 0)  (usage 3)
iUserbutton45                        148  0x00000094 (const ??? 0)  (usage 3)
iUserbutton46                        206  0x000000ce (const ??? 0)  (usage 3)
iUserbutton47                        213  0x000000d5 (const ??? 0)  (usage 3)
iUserbutton48                        214  0x000000d6 (const ??? 0)  (usage 3)
iUserbutton49                        142  0x0000008e (const ??? 0)  (usage 3)
iUserbutton5                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton50                         20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton51                         77  0x0000004d (const ??? 0)  (usage 3)
iUserbutton52                         52  0x00000034 (const ??? 0)  (usage 3)
iUserbutton53                         59  0x0000003b (const ??? 0)  (usage 3)
iUserbutton54                        207  0x000000cf (const ??? 0)  (usage 3)
iUserbutton55                        198  0x000000c6 (const ??? 0)  (usage 3)
iUserbutton56                        201  0x000000c9 (const ??? 0)  (usage 3)
iUserbutton57                        204  0x000000cc (const ??? 0)  (usage 3)
iUserbutton58                        209  0x000000d1 (const ??? 0)  (usage 3)
iUserbutton59                        191  0x000000bf (const ??? 0)  (usage 3)
iUserbutton6                          10  0x0000000a (const ??? 0)  (usage 3)
iUserbutton60                        217  0x000000d9 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        218  0x000000da (const ??? 0)  (usage 3)
iUserbutton63                         39  0x00000027 (const ??? 0)  (usage 3)
iUserbutton65                        150  0x00000096 (const ??? 0)  (usage 3)
iUserbutton66                         63  0x0000003f (const ??? 0)  (usage 3)
iUserbutton67                        163  0x000000a3 (const ??? 0)  (usage 3)
iUserbutton68                         64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton69                         68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton7                          11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton70                        151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton72                         78  0x0000004e (const ??? 0)  (usage 3)
iUserbutton73                         90  0x0000005a (const ??? 0)  (usage 3)
iUserbutton74                        167  0x000000a7 (const ??? 0)  (usage 3)
iUserbutton75                         55  0x00000037 (const ??? 0)  (usage 3)
iUserbutton76                         56  0x00000038 (const ??? 0)  (usage 3)
iUserbutton77                         57  0x00000039 (const ??? 0)  (usage 3)
iUserbutton78                         91  0x0000005b (const ??? 0)  (usage 3)
iUserbutton79                         92  0x0000005c (const ??? 0)  (usage 3)
iUserbutton8                          12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton80                         93  0x0000005d (const ??? 0)  (usage 3)
iUserbutton81                         94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton82                         95  0x0000005f (const ??? 0)  (usage 3)
iUserbutton83                         98  0x00000062 (const ??? 0)  (usage 3)
iUserbutton84                        101  0x00000065 (const ??? 0)  (usage 3)
iUserbutton85                        102  0x00000066 (const ??? 0)  (usage 3)
iUserbutton86                        103  0x00000067 (const ??? 0)  (usage 3)
iUserbutton87                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton88                        105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton89                        106  0x0000006a (const ??? 0)  (usage 3)
iUserbutton9                          13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton90                        107  0x0000006b (const ??? 0)  (usage 3)
iUserbutton91                        108  0x0000006c (const ??? 0)  (usage 3)
iUserbutton92                         99  0x00000063 (const ??? 0)  (usage 3)
iUserbutton93                        111  0x0000006f (const ??? 0)  (usage 3)
iUserbutton94                        114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton95                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton96                         79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton97                         80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton98                         81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton99                         82  0x00000052 (const ??? 0)  (usage 3)
iUserimages1                          53  0x00000035 (const ??? 0)  (usage 3)
iUserimages10                         71  0x00000047 (const ??? 0)  (usage 3)
iUserimages11                        164  0x000000a4 (const ??? 0)  (usage 3)
iUserimages13                         61  0x0000003d (const ??? 0)  (usage 3)
iUserimages16                         69  0x00000045 (const ??? 0)  (usage 3)
iUserimages17                        168  0x000000a8 (const ??? 0)  (usage 3)
iUserimages18                        169  0x000000a9 (const ??? 0)  (usage 3)
iUserimages2                          73  0x00000049 (const ??? 0)  (usage 3)
iUserimages3                         110  0x0000006e (const ??? 0)  (usage 3)
iUserimages4                         115  0x00000073 (const ??? 0)  (usage 3)
iUserimages5                         119  0x00000077 (const ??? 0)  (usage 3)
iUserimages7                         112  0x00000070 (const ??? 0)  (usage 3)
iUserimages8                         116  0x00000074 (const ??? 0)  (usage 3)
iUserimages9                         120  0x00000078 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                           22  0x00000016 (const ??? 0)  (usage 3)
iWinbutton1                           23  0x00000017 (const ??? 0)  (usage 3)
iWinbutton2                           24  0x00000018 (const ??? 0)  (usage 3)
iWinbutton3                           25  0x00000019 (const ??? 0)  (usage 3)
iWinbutton4                           26  0x0000001a (const ??? 0)  (usage 3)
iWinbutton5                           40  0x00000028 (const ??? 0)  (usage 3)
iWinbutton6                           41  0x00000029 (const ??? 0)  (usage 3)
iWinbutton7                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton8                           28  0x0000001c (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 9081  0x00002379kKeyboardKeystrokes                 9081  0x00002379 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   12560  0x00003110 (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                                9647  0x000025af (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               13682  0x00003572 (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              308  0x00000134 (const dword)  (usage 3)
nObjects                             225  0x000000e1 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              54  0x00000036 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                          8645  0x000021c5o4Dbuttons                          8645  0x000021c5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAngularmeters                      8323  0x00002083oAngularmeters                      8323  0x00002083 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAniButtons                         8647  0x000021c7oAniButtons                         8647  0x000021c7 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       8649  0x000021c9oColorPickers                       8649  0x000021c9 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCoolgauges                         8325  0x00002085oCoolgauges                         8325  0x00002085 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCustomdigitss                      8327  0x00002087oCustomdigitss                      8327  0x00002087 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oDipSwitchs                         8291  0x00002063oDipSwitchs                         8291  0x00002063 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              8329  0x00002089oForms                              8329  0x00002089 (mem) word[51] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 15)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                             8431  0x000020efoGauges                             8431  0x000020ef (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGSliders                           8299  0x0000206boGSliders                           8299  0x0000206b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oImages                             8433  0x000020f1oImages                             8433  0x000020f1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKeyboards                          8435  0x000020f3oKeyboards                          8435  0x000020f3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKnobs                              8293  0x00002065oKnobs                              8293  0x00002065 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLedDigitsn                         9085  0x0000237doLedDigitsn                         9085  0x0000237d (mem) word[15] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
oLeddigitss                         8439  0x000020f7oLeddigitss                         8439  0x000020f7 (mem) word[4] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
oLeds                               8437  0x000020f5oLeds                               8437  0x000020f5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             8447  0x000020ffoMeters                             8447  0x000020ff (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             220  0x000000dc (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                          8643  0x000021c3oPinInputs                          8643  0x000021c3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oPinOutputs                         8979  0x00002313oPinOutputs                         8979  0x00002313 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      8295  0x00002067oRockerSwitchs                      8295  0x00002067 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oRotarySwitchs                      8297  0x00002069oRotarySwitchs                      8297  0x00002069 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oScopes                             8599  0x00002197oScopes                             8599  0x00002197 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
oSoundss                            8977  0x00002311oSoundss                            8977  0x00002311 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oSpectrums                          8597  0x00002195oSpectrums                          8597  0x00002195 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStaticTexts                        8565  0x00002175oStaticTexts                        8565  0x00002175 (mem) word[16] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStringss                           8449  0x00002101oStringss                           8449  0x00002101 (mem) word[55] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 90)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 393)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              8601  0x00002199oTanks                              8601  0x00002199 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oThermometers                       8559  0x0000216foThermometers                       8559  0x0000216f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTimers                             8975  0x0000230foTimers                             8975  0x0000230f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTrackbars                          8301  0x0000206doTrackbars                          8301  0x0000206d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserButtons                        8651  0x000021cboUserButtons                        8651  0x000021cb (mem) word[162] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
oUserImagess                        8603  0x0000219boUserImagess                        8603  0x0000219b (mem) word[20] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserleds                           8561  0x00002171oUserleds                           8561  0x00002171 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             544  0x00000220 (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                             8563  0x00002173oVideos                             8563  0x00002173 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                         8303  0x0000206foWinButtons                         8303  0x0000206f (mem) word[10] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          300  0x0000012c (mem) word (global)  (usage 18)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       13717  0x00003595 (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         13429  0x00003475 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                   9083  0x0000237brKeyboardRoutines                   9083  0x0000237b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         13615  0x0000352f (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           13698  0x00003582 (User func) args[1] r=0  (usage 15)
seroutOcs                          13665  0x00003561 (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           7  0x00000007 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      2560  0x00000a00 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                          5  0x00000005 (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         73  0x00000049 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         14  0x0000000e (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings13Size                          0  0x00000000 (const dword)  (not used)
Strings13StartH                        0  0x00000000 (const dword)  (not used)
Strings13StartL                        0  0x00000000 (const dword)  (not used)
Strings14Size                          0  0x00000000 (const dword)  (not used)
Strings14StartH                        0  0x00000000 (const dword)  (not used)
Strings14StartL                        0  0x00000000 (const dword)  (not used)
Strings15Size                          0  0x00000000 (const dword)  (not used)
Strings15StartH                        0  0x00000000 (const dword)  (not used)
Strings15StartL                        0  0x00000000 (const dword)  (not used)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings17Count                         0  0x00000000 (const dword)  (not used)
Strings17Size                          1  0x00000001 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings18Size                          0  0x00000000 (const dword)  (not used)
Strings18StartH                        0  0x00000000 (const dword)  (not used)
Strings18StartL                        0  0x00000000 (const dword)  (not used)
Strings19Size                          0  0x00000000 (const dword)  (not used)
Strings19StartH                        0  0x00000000 (const dword)  (not used)
Strings19StartL                        0  0x00000000 (const dword)  (not used)
Strings1Count                          1  0x00000001 (const dword)  (not used)
Strings1Size                          30  0x0000001e (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                       512  0x00000200 (const dword)  (usage 3)
Strings20Size                          0  0x00000000 (const dword)  (not used)
Strings20StartH                        0  0x00000000 (const dword)  (not used)
Strings20StartL                        0  0x00000000 (const dword)  (not used)
Strings21Size                          0  0x00000000 (const dword)  (not used)
Strings21StartH                        0  0x00000000 (const dword)  (not used)
Strings21StartL                        0  0x00000000 (const dword)  (not used)
Strings22Size                          0  0x00000000 (const dword)  (not used)
Strings22StartH                        0  0x00000000 (const dword)  (not used)
Strings22StartL                        0  0x00000000 (const dword)  (not used)
Strings23Size                          0  0x00000000 (const dword)  (not used)
Strings23StartH                        0  0x00000000 (const dword)  (not used)
Strings23StartL                        0  0x00000000 (const dword)  (not used)
Strings24Size                          0  0x00000000 (const dword)  (not used)
Strings24StartH                        0  0x00000000 (const dword)  (not used)
Strings24StartL                        0  0x00000000 (const dword)  (not used)
Strings25Size                          0  0x00000000 (const dword)  (not used)
Strings25StartH                        0  0x00000000 (const dword)  (not used)
Strings25StartL                        0  0x00000000 (const dword)  (not used)
Strings26Size                          0  0x00000000 (const dword)  (not used)
Strings26StartH                        0  0x00000000 (const dword)  (not used)
Strings26StartL                        0  0x00000000 (const dword)  (not used)
Strings27Size                          0  0x00000000 (const dword)  (not used)
Strings27StartH                        0  0x00000000 (const dword)  (not used)
Strings27StartL                        0  0x00000000 (const dword)  (not used)
Strings28Size                          0  0x00000000 (const dword)  (not used)
Strings28StartH                        0  0x00000000 (const dword)  (not used)
Strings28StartL                        0  0x00000000 (const dword)  (not used)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                         53  0x00000035 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      2048  0x00000800 (const dword)  (usage 3)
Strings30Size                          0  0x00000000 (const dword)  (not used)
Strings30StartH                        0  0x00000000 (const dword)  (not used)
Strings30StartL                        0  0x00000000 (const dword)  (not used)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          7  0x00000007 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                         19  0x00000013 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings33Size                          0  0x00000000 (const dword)  (not used)
Strings33StartH                        0  0x00000000 (const dword)  (not used)
Strings33StartL                        0  0x00000000 (const dword)  (not used)
Strings34Count                         0  0x00000000 (const dword)  (not used)
Strings34Size                          1  0x00000001 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     3584  0x00000e00 (const dword)  (usage 3)
Strings35Size                          0  0x00000000 (const dword)  (not used)
Strings35StartH                        0  0x00000000 (const dword)  (not used)
Strings35StartL                        0  0x00000000 (const dword)  (not used)
Strings36Count                         0  0x00000000 (const dword)  (not used)
Strings36Size                          1  0x00000001 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings37Count                         0  0x00000000 (const dword)  (not used)
Strings37Size                          1  0x00000001 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings38Count                         0  0x00000000 (const dword)  (not used)
Strings38Size                          1  0x00000001 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings3Count                          0  0x00000000 (const dword)  (not used)
Strings3Size                           1  0x00000001 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                         0  0x00000000 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                          7  0x00000007 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings41Count                         1  0x00000001 (const dword)  (not used)
Strings41Size                          7  0x00000007 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings42Count                         1  0x00000001 (const dword)  (not used)
Strings42Size                          7  0x00000007 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings46Size                          0  0x00000000 (const dword)  (not used)
Strings46StartH                        0  0x00000000 (const dword)  (not used)
Strings46StartL                        0  0x00000000 (const dword)  (not used)
Strings47Size                          0  0x00000000 (const dword)  (not used)
Strings47StartH                        0  0x00000000 (const dword)  (not used)
Strings47StartL                        0  0x00000000 (const dword)  (not used)
Strings48Size                          0  0x00000000 (const dword)  (not used)
Strings48StartH                        0  0x00000000 (const dword)  (not used)
Strings48StartL                        0  0x00000000 (const dword)  (not used)
Strings49Size                          0  0x00000000 (const dword)  (not used)
Strings49StartH                        0  0x00000000 (const dword)  (not used)
Strings49StartL                        0  0x00000000 (const dword)  (not used)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings50Count                         0  0x00000000 (const dword)  (not used)
Strings50Size                          1  0x00000001 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    14336  0x00003800 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    11776  0x00002e00 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings53Count                         1  0x00000001 (const dword)  (not used)
Strings53Size                         67  0x00000043 (const dword)  (usage 3)
Strings53StartH                        0  0x00000000 (const dword)  (usage 3)
Strings53StartL                    14848  0x00003a00 (const dword)  (usage 3)
Strings5Count                          0  0x00000000 (const dword)  (not used)
Strings5Size                           1  0x00000001 (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                     15360  0x00003c00 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          31  0x0000001f (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                      6656  0x00001a00 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                      7168  0x00001c00 (const dword)  (usage 3)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      3072  0x00000c00 (const dword)  (usage 3)
stringsCV                            110  0x0000006e (mem) word[54] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           296  0x00000128 (mem) word (global)  (usage 24)
TouchXpos                            290  0x00000122 (mem) word (global)  (usage 12)
TouchYpos                            292  0x00000124 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     12874  0x0000324a (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 435)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 45)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      11583  0x00002d3f (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS    2803  0x00000af3 (const ??? 0)  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 96)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        13074  0x00003312 (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
