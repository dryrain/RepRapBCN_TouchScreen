file F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS

file C:\Program Files\4D Labs\4D Workshop 4 IDE\include\uLCD-32PTU.fnc

000001  000001  #platform "uLCD-32PTU"
000002  000001  #platform "uLCD-32PTU"
000003  000008  */
000004  000009      #constant ULCD_32PT_GFX
000005  000009      #constant ULCD_32PT_GFX
000006  000010        
000007  000011      #IFNOT EXISTS PICASO_FUNCTIONS
file C:\Program Files\4D Labs\4D Workshop 4 IDE\include\PicasoFunctions.fnc

000008  000012          #inherit "PicasoFunctions.fnc"          // inherit the generic functions
000009  000012          #inherit "PicasoFunctions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for PicasoGFX2 platforms
000012  000003        
000013  000004  #constant PICASO_FUNCTIONS
000014  000004  #constant PICASO_FUNCTIONS
000015  000005        
000016  000006        
000017  000007  #CONST
000018  000017  #END
000019  000018        
000020  000019  #CONST
000021  000025  #END
000022  000026        
000023  000027        
000024  000028  #CONST
000025  000040  #END
000026  000041        
000027  000042        
000028  000043  #CONST
000029  000208  #END
000030  000209        
000031  000210        
000032  000211  // baud divisor rates for setbaud(n);
000033  000212  #CONST
000034  000234  #END
000035  000235        
000036  000236        
000037  000237        
000038  000238        
000039  000243  */
000040  000244        
000041  000245        
000042  000246  //==============================================//
000043  000247  // EVE bios functions                           //
000044  000248  //==============================================//
000045  000249                                                  //
000046  000250  func serin(), 1;                // read a byte from COM0
000047  000251  // Syntax: serin();
000048  000252  // Usage : char := serin();
000049  000253  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
000050  000254  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
000051  000255  //     : The default Baud Rate is 115,200 bits per second or 115,200 baud. The baud rate can be
000052  000256  //     : changed under program control by using the setbaud(...) or the com_SetBaud(...) function.
000053  000257  //     : Returns: -1 if no character is available
000054  000258  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
000055  000259  //     : Returns: positive value 0 to 255 for a valid character received
000056  000260        
000057  000261  func putch("char"), 0;                // write single char to current output device
000058  000262  // Syntax: putch("char");
000059  000263  // Usage : putch("A");
000060  000264  // Notes : Transmits a single byte from the Serial Port COM0. The transmission format is:
000061  000265  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
000062  000266  //     : The default Baud Rate is 115,200 bits per second or 115,200 baud. The baud rate can be
000063  000267  //     : changed under program control by using the setbaud(...) or the com_SetBaud(...) function.
000064  000268  //     : The arguments can be a variable, array element, expression or constant
000065  000269        
000066  000270  func serout("char"), 0;                // write a byte to COM0
000067  000271  // Syntax: serout1("char");
000068  000272  // Usage : serout1(ch);
000069  000273  // Notes : send character to COM1
000070  000274        
000071  000275  func setbaud("baudnum"), 0;            // set baud rate of COM0
000072  000276  // Syntax: setbaud(baud_number);
000073  000277  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
000074  000278  // *Notes : argument specifies the baud rate using pre-defined constant.
000075  000279  //       : The pre-defined constant is a value of 0-19 , and internally
000076  000280  //       : this is used as a table pointer to get the baud rate divisor
000077  000281  //       : value for one of the 20 selected baud rates, control is then
000078  000282  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
000079  000283  //       : The pre-defined constants equate to a value of 0-19.
000080  000284  //       : If a value other than 0-19 is used, a run time error (eror 25)
000081  000285  //       : will occur.
000082  000286        
000083  000287  func to("device"), 1;                // output device redirection
000084  000288  // Syntax: to(outstream);
000085  000289  // Usage : to(APPEND); putstr("TWO ");
000086  000290  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000087  000291  //     :
000088  000292  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000089  000293  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000090  000294  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000091  000295  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000092  000296  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000093  000297  //     : completed its action. The APPEND argument is used to send the printed output to the same
000094  000298  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000095  000299  //     : sequential data to a media stream.
000096  000300  //     :
000097  000301  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000098  000302  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000099  000303  //     :                            appended to user memory if previous redirection was to an array.
000100  000304  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000101  000305  //     : TEXT           0xFF08      Output is directed to the screen (default).
000102  000306  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000103  000307  //     : I2C            0xF820      Output is directed to the I2C port.
000104  000308  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000105  000309        
000106  000310        
000107  000311  func pause("milliseconds"), 0;            // blocking delay
000108  000312  // Syntax: pause(milliseconds);
000109  000313  // Usage : pause(1000);                //pause for 1 second
000110  000314  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000111  000315        
000112  000316  func putnum("arg1","arg2"), 1;            // print number to current output device
000113  000317  // Syntax: putnum(format, value);
000114  000318  // Usage : var := putnum(HEX, val);
000115  000319  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000116  000320  //     : Format: A constant that specifies the number format
000117  000321  //     : Value : The number to be printed
000118  000322  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000119  000323  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000120  000324  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000121  000325  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000122  000326  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000123  000327  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000124  000328  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000125  000329  //     :                                     BIN6     BIN6Z     BIN6ZB
000126  000330  //     :                                     BIN7     BIN7Z     BIN7ZB
000127  000331  //     :                                     BIN8     BIN8Z     BIN8ZB
000128  000332  //     :                                     BIN9     BIN9Z     BIN9ZB
000129  000333  //     :                                     BIN10     BIN10Z     BIN10ZB
000130  000334  //     :                                     BIN11     BIN11Z     BIN11ZB
000131  000335  //     :                                     BIN12     BIN12Z     BIN12ZB
000132  000336  //     :                                     BIN13     BIN13Z     BIN13ZB
000133  000337  //     :                                     BIN14     BIN14Z     BIN14ZB
000134  000338  //     :                                     BIN15     BIN15Z     BIN15ZB
000135  000339  //     :                                     BIN16     BIN16Z     BIN16ZB
000136  000340  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000137  000341  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000138  000342  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000139  000343  //     : | | | | V V V
000140  000344  //     : | | | | | | |
000141  000345  //     : | | | | | |
000142  000346  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000143  000347  //     : | | | | digit count |
000144  000348  //     : | | | | |___reserved (not used on GOLDELOX)
000145  000349  //     : | | | |
000146  000350  //     : | | | |
000147  000351  //     : | | | |
000148  000352  //     : | | | |
000149  000353  //     : | | | |
000150  000354  //     : | | | |______ 1 = leading zeros included
000151  000355  //     : | | | 0 = leading zeros suppressed
000152  000356  //     : | | |
000153  000357  //     : | | |
000154  000358  //     : | | |_______ 1 = leading zero blanking
000155  000359  //     : | |
000156  000360  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000157  000361  //     : |
000158  000362  //     : |______ 1 = space before unsigned number
000159  000363        
000160  000364        
000161  000365  func translate("arg1","arg2","arg3","arg4"), 1; // list translator (internal use only, not usable)
000162  000366        
000163  000367  func putstr("string"), 1;                       // print string to current output device
000164  000368  // Syntax: putstr(pointer);
000165  000369  // Usage : putstr("HELLO\n");
000166  000370  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000167  000371  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000168  000372  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000169  000373  //       : The output of putstr can be redirected to the communications port, the media, or memory
000170  000374  //       : using the to(...); function.
000171  000375  //       : A string constant is automatically terminated with a zero.
000172  000376  //       : A string in a data statement is not automatically terminated with a zero.
000173  000377  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000174  000378  //       : element packs 1 or 2 characters.
000175  000379        
000176  000380        
000177  000381  func strlen("varAddress"), 1;                   // return length of a var packed string in character units
000178  000382  // Syntax: strlen("varAddress);
000179  000383  // Usage : strlen("HELLO\n");
000180  000384  // Notes : gives the length of a string that is packed into regular var array
000181  000385  //       : Use str_Length(ptr)  for string pointer mode
000182  000386        
000183  000387        
000184  000388  //==============================================//
000185  000389  // Memory Access Function Prototypes            //
000186  000390  //==============================================//
000187  000391                                                  //
000188  000392  func peekW("address"), 1;                       // read a word from system memory
000189  000393  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000190  000394  // refer to address map of internal variables   //
000191  000395  //==============================================//
000192  000396  // Math Functions                               //
000193  000397  //==============================================//
000194  000398                                                  //
000195  000399  func ABS("value"), 1;                           // return a positive number
000196  000400  // Syntax: ABS(value);
000197  000401  // Usage : var := ABS(arg);
000198  000402  // Notes : Returns the absolute value of an argument
000199  000403        
000200  000404  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000201  000405  // Syntax: MIN(value1, value2);
000202  000406  // Usage : var := MIN(arg1, arg2);
000203  000407  // Notes : Returns the minimum of 2 arguments
000204  000408        
000205  000409  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000206  000410  // Syntax: MAX(value1, value2);
000207  000411  // Usage : var := MAX(arg1, arg2);
000208  000412  // Notes : Returns the maximum of 2 arguments
000209  000413        
000210  000414  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000211  000415  // Syntax: SWAP(&var1, &var2);
000212  000416  // Usage : SWAP(&var1, &var2);
000213  000417  // Notes : Swaps the contents of 2 variables or memory locations
000214  000418        
000215  000419  func SIN("angle"), 1;                           // return SIN of angle
000216  000420  // Syntax: SIN(angle);
000217  000421  // Usage : var := SIN(arg);
000218  000422  // Notes : Returns the sine in radians of an argument in degrees
000219  000423  //       : the returned value range is from 127 to -127. The real
000220  000424  //       : cosine values vary from 1.0 to -1.0 so appropriate
000221  000425  //       : scaling must be done in user code.
000222  000426        
000223  000427  func COS("angle"), 1;                           // return COS of angle
000224  000428  // Syntax: COS(angle);
000225  000429  // Usage : var := COS(arg);
000226  000430  // Notes : Returns the cosine in radians of an argument in degrees
000227  000431  //       : the returned value range is from 127 to -127. The real
000228  000432  //       : cosine values vary from 1.0 to -1.0 so appropriate
000229  000433  //       : scaling must be done in user code.
000230  000434        
000231  000435  func RAND(), 1;                                 // return a pseudo random number
000232  000436  // Syntax: RAND();
000233  000437  // Usage : var := RAND();
000234  000438  // Notes : Returns a random number between 0 and 0xFFFF.
000235  000439  //       : The random number generator must first be seeded
000236  000440  //       : by using the SEED(number) function.
000237  000441        
000238  000442  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000239  000443  // Syntax: SEED(number);
000240  000444  // Usage : SEED(arg);
000241  000445  // Notes : Seeds the random number generator.
000242  000446        
000243  000447  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000244  000448  // Syntax: OVF();
000245  000449  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000246  000450  //       : hiWord := OVF();
000247  000451  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000248  000452        
000249  000453  func SQRT("number"), 1;                         // return square root of a number
000250  000454  // Syntax: SQRT(number);
000251  000455  // Usage : SQRT(arg);
000252  000456  // Notes : Returns the integer square root of a number.
000253  000457  //------------------------------------------------------------------//
000254  000458  //          Text Related Function Prototypes
000255  000459  //------------------------------------------------------------------//
000256  000460        
000257  000461  func txt_MoveCursor("line", "column"), 0;
000258  000462  // Syntax: txt_SetCursor(line, column);
000259  000463  // Usage : txt_SetCursor(arg1, arg2);
000260  000464  // Notes : Moves the text Cursor to a new screen position set by
000261  000465  //       : line,column parameters.
000262  000466        
000263  000467  func txt_Set("mode", "value"), 0;
000264  000468  // Syntax: txt_Set(mode, value);
000265  000469  // Usage : txt_Set(arg1, arg2);
000266  000470  // Returns : Original value before the change
000267  000471  // Notes : Sets various text related parameters used by other functions
000268  000472  //       : This allows the features to be set programatically with a
000269  000473  //       : single function call.It is strongly recommended to use the
000270  000474  //       : pre-defined constants rather than the mode numbers.
000271  000475  //       : NB:- Although it is often required to be able to set text
000272  000476  //       : functions with a single function call for graphics engine
000273  000477  //       : related functions, there is a complete set of single parameter
000274  000478  //       : shortcut functions that have exactly the same function as
000275  000479  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000276  000480  //       :
000277  000481  //       : mode = TEXT_COLOUR (mode 0)
000278  000482  //       : txt_Set(TEXT_COLOUR, value);
000279  000483  //       : value = 0 to 0xFFFF, Black to White
000280  000484  //       : Sets the Text colour for the display
000281  000485  //       : Default = LIME.
000282  000486  //       :
000283  000487  //       : mode = TEXT_HIGHLIGHT (mode 1)
000284  000488  //       : txt_Set(TEXT_HIGHLIGHT, value);
000285  000489  //       : value = 0 to 0xFFFF, Black to White
000286  000490  //       : Sets the Text background colour for the display. Effective
000287  000491  //       : when text mode is Opaque.
000288  000492  //       : Default = BLACK.
000289  000493  //       :
000290  000494  //       : mode = FONT_ID (mode 2)
000291  000495  //       : txt_Set(FONT_ID, value);
000292  000496  //       : value = FONT1, FONT2 or FONT3 for internal fonts
000293  000497  //       : else this value is the name of a font included
000294  000498  //       : in a users program in a data statement.
000295  000499  //       : Default = FONT SIZE 3.
000296  000500  //       :
000297  000501  //       : mode = TEXT_WIDTH  (mode 3)
000298  000502  //       : txt_Set(TEXT_WIDTH, value);
000299  000503  //       : value = 1 to 16
000300  000504  //       : Sets the Text Width multiplier
000301  000505  //       : text will be printed magnified horizontally
000302  000506  //       : by this factor, Default = 1.
000303  000507  //       :
000304  000508  //       : mode = TEXT_HEIGHT  (mode 4)
000305  000509  //       : txt_Set(TEXT_HEIGHT, value);
000306  000510  //       : value = 1 to 16
000307  000511  //       : Sets the Text Height multiplier
000308  000512  //       : text will be printed magnified vertically
000309  000513  //       : by this factor, Default = 1.
000310  000514  //       :
000311  000515  //       : mode = TEXT_XGAP  (mode 5)
000312  000516  //       : txt_Set(TEXT_XGAP, value);
000313  000517  //       : value = 1 to 32
000314  000518  //       : Sets the horizontal gap between characters
000315  000519  //       : The gap is in pixel units, Default = 0
000316  000520  //       :
000317  000521  //       : mode = TEXT_YGAP  (mode 6)
000318  000522  //       : txt_Set(TEXT_YGAP, value);
000319  000523  //       : value = 1 to 32
000320  000524  //       : Sets the vertical gap below characters
000321  000525  //       : The gap is in pixel units, Default = 0
000322  000526  //       :
000323  000527  //       : mode = TEXT_PRINTDELAY  (mode 7) DEPRECATED
000324  000528  //       : txt_Set(TEXT_PRINTDELAY, value);
000325  000529  //       : value = 0 to 255
000326  000530  //       : Sets the delay time (in ms) during character
000327  000531  //       : printing to give a 'teletype' like effect.
000328  000532  //       : Often used to attract attention to a string
000329  000533  //       : being printed which can often be missed if
000330  000534  //       : just suddenly appearing or changing.
000331  000535  //       : Default = 0 ms.
000332  000536  //       :
000333  000537  //       : mode = TEXT_OPACITY (mode 8)
000334  000538  //       : txt_Set(TEXT_OPACITY, value);
000335  000539  //       : value = TRANSPARENT (0) = Text Trasparent
000336  000540  //       : value = OPAQUE (1) = Text Opaque
000337  000541  //       : Sets the Opacity/Transparency of the text
000338  000542  //       : Default = 0 or TRANSPARENT
000339  000543  //       :
000340  000544  //       : mode = TEXT_BOLD (mode 9)
000341  000545  //       : txt_Set(TEXT_BOLD, value);
000342  000546  //       : value = dont care
000343  000547  //       : Sets Bold Text mode for the next string or char
000344  000548  //       : The feature automatically resets after printing
000345  000549  //       : using putstr or print has completed
000346  000550  //       :
000347  000551  //       : mode = TEXT_ITALIC (mode 10)
000348  000552  //       : txt_Set(TEXT_ITALIC, value);
000349  000553  //       : value = dont care
000350  000554  //       : Sets Italic Text mode for the next string or char
000351  000555  //       : The feature automatically resets after printing
000352  000556  //       : using putstr or print has completed
000353  000557        
000354  000558  //       : mode = TEXT_INVERSE (mode 11)
000355  000559  //       : txt_Set(TEXT_INVERSE, value);
000356  000560  //       : value = dont care
000357  000561  //       : Sets Inverse Text mode for the next string or char
000358  000562  //       : The feature automatically resets after printing
000359  000563  //       : using putstr or print has completed
000360  000564  //       :
000361  000565  //       : mode = TEXT_UNDERLINED (mode 12)
000362  000566  //       : txt_Set(TEXT_UNDERLINED, value);
000363  000567  //       : value = dont care
000364  000568  //       : Sets Underlined Text mode for the next string or char
000365  000569  //       : The feature automatically resets after printing
000366  000570  //       : using putstr or print has completed
000367  000571  //       :
000368  000572  //       : mode = TEXT_ATTRIBUTES (mode 13)
000369  000573  //       : txt_Set(TEXT_ATTRIBUTES, value);
000370  000574  //       : value = bits are defined as:
000371  000575  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000372  000576  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000373  000577  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000374  000578  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000375  000579  //       : Allows a combination of text attributes to be defined together
000376  000580  //       : by 'or'ing the bits together.
000377  000581  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000378  000582  //       : The feature automatically resets after printing
000379  000583  //       : using putstr or print has completed.
000380  000584  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000381  000585  //       :
000382  000586  //       : mode = TEXT_WRAP (mode 14)
000383  000587  //       : txt_Set(TEXT_WRAP , value);
000384  000588  //       : Sets the position where text wrap will occur
000385  000589  //       : The feature automatically resets when screen
000386  000590  //       : mode is changed. If the value is set to 0,
000387  000591  //       : text wrap is turned off.
000388  000592  //       : of the current screen. Default value is 0
000389  000593  // Notes : The value is in pixel units.
000390  000594  //       :
000391  000595        
000392  000596  //       : txt_Set mode 15 reserved for future use
000393  000597  //       :
000394  000598        
000395  000599        
000396  000600        
000397  000601  //=====================================================//
000398  000602  // Single parameter short-cuts                         //
000399  000603  // for the txt_Set functions                           //
000400  000604  // These functions return the existing value before    //
000401  000605  // the change is made.                                 //
000402  000606  //=====================================================//
000403  000607  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000404  000608  func txt_BGcolour("colour"), 1;             // 1  text background colour
000405  000609  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000406  000610  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000407  000611  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000408  000612  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000409  000613  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000410  000614  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000411  000615  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000412  000616  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000413  000617  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000414  000618  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000415  000619  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000416  000620  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000417  000621  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000418  000622  func _1F(), 0;                              // 15 text (reserved DO NOT REMOVE)
000419  000623        
000420  000624        
000421  000625  //------------------------------------------------------------------//
000422  000626  //                 Hardware Function Prototypes
000423  000627  //------------------------------------------------------------------//
000424  000628        
000425  000629  // I/O Pin reference:-
000426  000630  //
000427  000631  //    IO1_PIN           is pin 2 of J1
000428  000632  //    IO2_PIN           is pin 1 of J1
000429  000633  //    IO3_PIN           is pin 3 of J1
000430  000634  //    IO4_PIN           is pin 5 of J1 (also used for BUS_RD)
000431  000635  //    IO5_PIN           is pin 9 of J2 (also used for BUS_WR)
000432  000636  //    BUS_RD_PIN        is pin 5 of J1 (alias IO4_PIN)
000433  000637  //    BUS_WR_PIN        is pin 9 of J2 (alias IO5_PIN)
000434  000638  //    BUS_0             is pin 27 of J1
000435  000639  //    BUS_1             is pin 25 of J1
000436  000640  //    BUS_2             is pin 23 of J1
000437  000641  //    BUS_3             is pin 21 of J1
000438  000642  //    BUS_4             is pin 19 of J1
000439  000643  //    BUS_5             is pin 17 of J1
000440  000644  //    BUS_6             is pin 13 of J2
000441  000645  //    BUS_7             is pin 11 of J2
000442  000646  //    BACKLITE          is backlite control pin
000443  000647  //    AUDIO_ENABLE      is amplifier chip control pin
000444  000648        
000445  000649  func pin_Set("mode", "pin"), 1;            // set pin to required mode
000446  000650  // Syntax: pin_Set(mode, pin);
000447  000651  // Usage : pin_Set(arg1, arg2);
000448  000652  // Notes : Sets the appropriate pins to Inputs or Outputs
000449  000653  //       : returns true if the pin number is legal (usually ignored)
000450  000654  //       :
000451  000655  //       : mode = 0 : Set Pin to Output
000452  000656  //       : pin_Set(0, pin);
000453  000657  //       : pin_Set(OUTPUT, pin);
000454  000658  //       : pin = 1  : set IO1_PIN to output (pin 2 J1)
000455  000659  //       : pin = 2  : set IO2_PIN to output (pin 1 J1)
000456  000660  //       : pin = 3  : set IO3_PIN to output (pin 3 J1)
000457  000661  //       : pin = 4  : set IO4_PIN to output (pin 5 J1, also used for BUS_RD)
000458  000662  //       : pin = 5  : set IO5_PIN to output (pin 9 J2, also used for BUS_WR)
000459  000663  //       : (pin 6,7 are BACKLITE and AMP control and are permanemtly outputs which can't be altered)
000460  000664  //       : pin = 8  : set BUS_0   to output (pin 27 of J1)
000461  000665  //       : pin = 9  : set BUS_1   to output (pin 25 of J1)
000462  000666  //       : pin = 10 : set BUS_2   to output (pin 23 of J1)
000463  000667  //       : pin = 11 : set BUS_3   to output (pin 21 of J1)
000464  000668  //       : pin = 12 : set BUS_4   to output (pin 19 of J1)
000465  000669  //       : pin = 13 : set BUS_5   to output (pin 17 of J1)
000466  000670  //       : pin = 14 : set BUS_6   to output (pin 13 of J2)
000467  000671  //       : pin = 15 : set BUS_7   to output (pin 11 of J2)
000468  000672  //       : Sets the desired pin to be used as an Output.
000469  000673  //       :
000470  000674  //       : mode = 1 : Set Pin to Input
000471  000675  //       : pin_Set(1, pin);
000472  000676  //       : pin_Set(INPUT, pin);
000473  000677  //       : pin = 1  : set IO1_PIN to input (pin 2 J1)
000474  000678  //       : pin = 2  : set IO2_PIN to input (pin 1 J1)
000475  000679  //       : pin = 3  : set IO3_PIN to input (pin 3 J1)
000476  000680  //       : pin = 4  : set IO4_PIN to input (pin 5 J1, also used for BUS_RD)
000477  000681  //       : pin = 5  : set IO5_PIN to input (pin 9 J2, also used for BUS_WR)
000478  000682  //       : (pin 6,7 are BACKLITE and AMP control and are permanemtly outputs which can't be altered)
000479  000683  //       : pin = 8  : set BUS_0   to input (pin 27 of J1)
000480  000684  //       : pin = 9  : set BUS_1   to input (pin 25 of J1)
000481  000685  //       : pin = 10 : set BUS_2   to input (pin 23 of J1)
000482  000686  //       : pin = 11 : set BUS_3   to input (pin 21 of J1)
000483  000687  //       : pin = 12 : set BUS_4   to input (pin 19 of J1)
000484  000688  //       : pin = 13 : set BUS_5   to input (pin 17 of J1)
000485  000689  //       : pin = 14 : set BUS_6   to input (pin 13 of J2)
000486  000690  //       : pin = 15 : set BUS_7   to input (pin 11 of J2)
000487  000691  //       : Sets the desired pin to be used as an Input.
000488  000692        
000489  000693  func pin_HI("pin"), 1;                    // set pin to logic '1'
000490  000694  // Syntax: pin_HI(pin);
000491  000695  // Usage : pin_HI(arg);
000492  000696  // Notes : Outputs a logic "High" (3.3V) on the appropriate
000493  000697  //       : pin that was previously selected as an Output.
000494  000698  //       : returns true if the pin number is legal (usually ignored)
000495  000699  //       :
000496  000700  //       : pin = 1  : set IO1_PIN to "High" level (pin 2 of J1)
000497  000701  //       : pin = 2  : set IO2_PIN to "High" level (pin 1 of J1)
000498  000702  //       : pin = 3  : set IO3_PIN to "High" level (pin 3 of J1)
000499  000703  //       : pin = 4  : set IO4_PIN to "High" level (pin 5 of J1, also used for BUS_RD)
000500  000704  //       : pin = 5  : set IO5_PIN to "High" level (pin 9 of J2, also used for BUS_WR)
000501  000705  //       : pin = 6  : set DCENB pin to "High" level (BACKLITE ON)
000502  000706  //       : pin = 7  : set AUDIO_ENABL pin to "High" level (AMP OFF)
000503  000707  //       : pin = 8  : set BUS_0   to "High" level (pin 27 of J1)
000504  000708  //       : pin = 9  : set BUS_1   to "High" level (pin 25 of J1)
000505  000709  //       : pin = 10 : set BUS_2   to "High" level (pin 23 of J1)
000506  000710  //       : pin = 11 : set BUS_3   to "High" level (pin 21 of J1)
000507  000711  //       : pin = 12 : set BUS_4   to "High" level (pin 19 of J1)
000508  000712  //       : pin = 13 : set BUS_5   to "High" level (pin 17 of J1)
000509  000713  //       : pin = 14 : set BUS_6   to "High" level (pin 13 of J2)
000510  000714  //       : pin = 15 : set BUS_7   to "High" level (pin 11 of J2)
000511  000715        
000512  000716  func pin_LO("pin"), 1;                    // set pin to logic '0'
000513  000717  // Syntax: pin_LO(pin);
000514  000718  // Usage : pin_LO(arg);
000515  000719  // Notes : Outputs a logic "Low" (0V) on the appropriate
000516  000720  //       : pin that was previously selected as an Output.
000517  000721  //       : returns true if the pin number is legal (usually ignored)
000518  000722  //       :
000519  000723  //       : pin = 1 : set IO1_PIN to "Low" level (pin 2 of J1)
000520  000724  //       : pin = 2 : set IO2_PIN to "Low" level (pin 1 of J1)
000521  000725  //       : pin = 3 : set IO3_PIN to "Low" level (pin 3 of J1)
000522  000726  //       : pin = 4 : set IO4_PIN to "Low" level (pin 5 of J1, also used for BUS_RD)
000523  000727  //       : pin = 5 : set IO5_PIN to "Low" level (pin 9 of J2, also used for BUS_WR)
000524  000728  //       : pin = 6 : set DCENB pin to "Low" level (BACKLITE)
000525  000729  //       : pin = 7 : set AUDIO_ENABL pin to "Low" level (AMP ON)
000526  000730  //       : pin = 8  : set BUS_0  to "Low" level (pin 27 of J1)
000527  000731  //       : pin = 9  : set BUS_1  to "Low" level (pin 25 of J1)
000528  000732  //       : pin = 10 : set BUS_2  to "Low" level (pin 23 of J1)
000529  000733  //       : pin = 11 : set BUS_3  to "Low" level (pin 21 of J1)
000530  000734  //       : pin = 12 : set BUS_4  to "Low" level (pin 19 of J1)
000531  000735  //       : pin = 13 : set BUS_5  to "Low" level (pin 17 of J1)
000532  000736  //       : pin = 14 : set BUS_6  to "Low" level (pin 13 of J2)
000533  000737  //       : pin = 15 : set BUS_7  to "Low" level (pin 11 of J2)
000534  000738        
000535  000739  func pin_Read("pin"), 1;                // read pin, logic or analogue
000536  000740  // Syntax: pin_Read(pin);
000537  000741  // Usage : arg1 := pin_Read(arg2);
000538  000742  // Notes : Reads the logic state of the appropriate
000539  000743  //       : pin that was previously selected as an Input.
000540  000744  //       :
000541  000745  //       : pin = 1  : Read the state of IO1_PIN (pin 2 of J1)
000542  000746  //       : pin = 2  : Read the state of IO2_PIN (pin 1 of J1)
000543  000747  //       : pin = 3  : Read the state of IO3_PIN (pin 3 of J1)
000544  000748  //       : pin = 4  : Read the state of IO4_PIN (pin 5 of J1, also used for BUS_RD)
000545  000749  //       : pin = 5  : Read the state of IO5_PIN (pin 9 of J2, also used for BUS_WR)
000546  000750  //       : pin = 6  : Read the state of DCENB pin to "Low" level (BACKLITE)
000547  000751  //       : pin = 7  : Read the state of AUDIO_ENABL pin to "Low" level (AMP ON)
000548  000752  //       : pin = 8  : Read the state of BUS_0   (pin 27 of J1)
000549  000753  //       : pin = 9  : Read the state of BUS_1   (pin 25 of J1)
000550  000754  //       : pin = 10 : Read the state of BUS_2   (pin 23 of J1)
000551  000755  //       : pin = 11 : Read the state of BUS_3   (pin 21 of J1)
000552  000756  //       : pin = 12 : Read the state of BUS_4   (pin 19 of J1)
000553  000757  //       : pin = 13 : Read the state of BUS_5   (pin 17 of J1)
000554  000758  //       : pin = 14 : Read the state of BUS_6   (pin 13 of J2)
000555  000759  //       : pin = 15 : Read the state of BUS_7   (pin 11 of J2)
000556  000760  //       : Returns a 0 (logic low) or 1 (logic high).
000557  000761        
000558  000762        
000559  000763  //------------------------------------------------------------------//
000560  000764  //                 P1 module BUS I/O control
000561  000765  //------------------------------------------------------------------//
000562  000766        
000563  000767  func bus_In(), 1;
000564  000768  // Syntax: bus_In();
000565  000769  // Usage : arg1 := bus_In();
000566  000770  // Notes : Read the 8bit wide bus into the lower 8 bits of arg1.
000567  000771  //       : The upper 8 bits of arg1 are set to 0.
000568  000772  //       : the BUS_RD and BUS_WR pins are not affected.
000569  000773  //       :
000570  000774  //       : BUS_0 is pin 27 of J1
000571  000775  //       : BUS_1 is pin 25 of J1
000572  000776  //       : BUS_2 is pin 23 of J1
000573  000777  //       : BUS_3 is pin 21 of J1
000574  000778  //       : BUS_4 is pin 19 of J1
000575  000779  //       : BUS_5 is pin 17 of J1
000576  000780  //       : BUS_6 is pin 13 of J2
000577  000781  //       : BUS_7 is pin 11 of J2
000578  000782        
000579  000783  func bus_Out("var"), 0;
000580  000784  // Syntax: bus_Out(var);
000581  000785  // Usage : bus_Out(arg1);
000582  000786  // Notes : The lower 8 bits of arg1 are placed on the 8bit wide bus.
000583  000787  //       : The upper 8 bits of arg1 are ignored.
000584  000788  //       : the BUS_RD and BUS_WR pins are not affected.
000585  000789  //       : NB:- any BUS pins that are set to inputs are not affected.
000586  000790  //       :
000587  000791  //       : BUS_0 is pin 27 of J1
000588  000792  //       : BUS_1 is pin 25 of J1
000589  000793  //       : BUS_2 is pin 23 of J1
000590  000794  //       : BUS_3 is pin 21 of J1
000591  000795  //       : BUS_4 is pin 19 of J1
000592  000796  //       : BUS_5 is pin 17 of J1
000593  000797  //       : BUS_6 is pin 13 of J2
000594  000798  //       : BUS_7 is pin 11 of J2
000595  000799        
000596  000800  func bus_Set("var"), 0;
000597  000801  // Syntax: bus_Set(var);
000598  000802  // Usage : bus_Set(arg1);
000599  000803  // Notes : The lower 8 bits of arg1 are placed in the BUS direction register.
000600  000804  //       : a '1' sets a pin to be an input, a '0' sets a pin to be output.
000601  000805  //       : The upper 8 bits of arg1 are ignored.
000602  000806  //       : the BUS_RD and BUS_WR pins are not affected.
000603  000807  //       :
000604  000808  //       : BUS_0 is pin 27 of J1
000605  000809  //       : BUS_1 is pin 25 of J1
000606  000810  //       : BUS_2 is pin 23 of J1
000607  000811  //       : BUS_3 is pin 21 of J1
000608  000812  //       : BUS_4 is pin 19 of J1
000609  000813  //       : BUS_5 is pin 17 of J1
000610  000814  //       : BUS_6 is pin 13 of J2
000611  000815  //       : BUS_7 is pin 11 of J2
000612  000816        
000613  000817  func bus_Write("var"), 0;
000614  000818  // Syntax: bus_Write(var);
000615  000819  // Usage : bus_Write(arg1);
000616  000820  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
000617  000821  //       : a settling delay of approx 50nsec, the BUS_WR pin is strobed
000618  000822  //       : LO for approx 50nsec then set back HI.
000619  000823  //       : The upper 8 bits of arg1 are ignored.
000620  000824  //       : NB:- the BUS_WR pin is automatically pre-set to an output to
000621  000825  //       : ensure BUS write integrity.
000622  000826  //       :
000623  000827  //       : BUS_0 is pin 27 of J1
000624  000828  //       : BUS_1 is pin 25 of J1
000625  000829  //       : BUS_2 is pin 23 of J1
000626  000830  //       : BUS_3 is pin 21 of J1
000627  000831  //       : BUS_4 is pin 19 of J1
000628  000832  //       : BUS_5 is pin 17 of J1
000629  000833  //       : BUS_6 is pin 13 of J2
000630  000834  //       : BUS_7 is pin 11 of J2
000631  000835        
000632  000836  func bus_Read(), 1;
000633  000837  // Syntax: bus_Read();
000634  000838  // Usage : arg1 := bus_Read();
000635  000839  // Notes : The BUS_RD pin set to LO, then, after a settling delay
000636  000840  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
000637  000841  //       : (the upper 8 bits being set to 0)
000638  000842  //       : the BUS_RD pin is then set back to a HI level.
000639  000843  //       : NB:- the BUS_RD pin is automatically pre-set to an output to
000640  000844  //       : ensure BUS write integrity.
000641  000845  //       :
000642  000846  //       : BUS_0 is pin 27 of J1
000643  000847  //       : BUS_1 is pin 25 of J1
000644  000848  //       : BUS_2 is pin 23 of J1
000645  000849  //       : BUS_3 is pin 21 of J1
000646  000850  //       : BUS_4 is pin 19 of J1
000647  000851  //       : BUS_5 is pin 17 of J1
000648  000852  //       : BUS_6 is pin 13 of J2
000649  000853  //       : BUS_7 is pin 11 of J2
000650  000854        
000651  000855        
000652  000856  //------------------------------------------------------------------//
000653  000857  //   Graphics Functions
000654  000858  //------------------------------------------------------------------//
000655  000859  func gfx_Set("mode", "value"), 0;            // set various graphics functions
000656  000860  // Syntax: gfx_Set(mode, value);
000657  000861  // Usage : gfx_Set(arg1, arg2);
000658  000862  // Notes : Sets various graphics parameters used by other functions
000659  000863  //       : This allows the features to be set programatically with a
000660  000864  //       : single function call.It is strongly recommended to use the
000661  000865  //       : pre-defined constants rather than the mode numbers.
000662  000866  //       : NB:- Although it is often required to be able to set graphics
000663  000867  //       : functions with a single function call for graphics engine
000664  000868  //       : related functions, there is a complete set of single parameter
000665  000869  //       : shortcut functions that have exactly the same function as
000666  000870  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
000667  000871  //       :
000668  000872  //       : mode = PEN_SIZE (mode 16)
000669  000873  //       : gfx_Set(PEN_SIZE, value);
000670  000874  //       : value = SOLID (value 0) rectangle and circle objects are solid
000671  000875  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
000672  000876  //       : Sets the mode of the Pen used by most graphics objects
000673  000877  //       :
000674  000878  //       : mode = BACKGROUND_COLOUR (mode 17)
000675  000879  //       : gfx_Set(BACKGROUND_COLOUR, value);
000676  000880  //       : value = 0 to 0xFFFF, Black to White
000677  000881  //       : Sets the Background colour of the screen
000678  000882  //       :
000679  000883  //       : mode = OBJECT_COLOUR (mode 18)
000680  000884  //       : gfx_Set(OBJECT_COLOUR, value);
000681  000885  //       : value = 0 to 0xFFFF, Black to White
000682  000886  //       : Sets the Object colour used in various functions
000683  000887  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
000684  000888  //       :
000685  000889  //       : mode = CLIPPING (mode 19)
000686  000890  //       : gfx_Set(CLIPPING, value);
000687  000891  //       : value = OFF (value 0) Clipping disabled
000688  000892  //       : value = ON (value 1) Clipping enabled
000689  000893  //       : Enables/Disables the Clipping feature
000690  000894  //       :
000691  000895  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
000692  000896  //       : gfx_Set(TRANSPARENT_COLOUR, value);
000693  000897  //       : value = 0 to 0xFFFF Black to White
000694  000898  //       : Sets Bitmap, Image or Animation Transparency Colour.
000695  000899  //       : NB not implemented
000696  000900  //       :
000697  000901  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
000698  000902  //       : gfx_Set(5, value);
000699  000903  //       : value = OFF (value 0) Transparency disabled
000700  000904  //       : value = ON (value 1) Transparency enabled
000701  000905  //       : Enables/Disables the Transparency feature
000702  000906  //       : NB not implemented
000703  000907  //       :
000704  000908  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
000705  000909  //       : gfx_Set(FRAME_DELAY, value);
000706  000910  //       : value = 0 to 65535 ms
000707  000911  //       : Sets the Video/Animation clip inter-frame delay. This setting will
000708  000912  //       : over-ride the embedded frame delay of the clip. After the event,
000709  000913  //       : the setting will auto disable and if further inter-frame delays need
000710  000914  //       : overriding the setting must be re-issued.
000711  000915  //       :
000712  000916  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
000713  000917  //       : gfx_Set(SCREEN_MODE, value);
000714  000918  //       : value = LANDSCAPE   (value 0)
000715  000919  //       : value = LANDSCAPE_R (value 1)
000716  000920  //       : value = PORTRAIT    (value 2)
000717  000921  //       : value = PORTRAIT_R  (value 3)
000718  000922  //       :
000719  000923  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
000720  000924  //       : gfx_Set(OUTLINE_COLOUR, value);
000721  000925  //       : value = 1 to 0xFFFF, if 0, featre is OFF
000722  000926  //       : Sets the filled Rectangle or Circle objects outline colour
000723  000927  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
000724  000928  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
000725  000929  //       :
000726  000930  //       : Only supports variable contrast for uOLED Modules
000727  000931  //       : mode = CONTRAST (mode 25) : Contrast
000728  000932  //       : gfx_Set(CONTRAST, value);
000729  000933  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
000730  000934  //       : when contrast=0, display is placed in low power mode.
000731  000935  //       : This function should be called with contrast=0 when
000732  000936  //       : powering down the module.
000733  000937  //       :
000734  000938  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
000735  000939  //       : gfx_Set(LINE_PATTERN, value);
000736  000940  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
000737  000941  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
000738  000942  //       : a value of 0 turns the feature off
000739  000943  //       :
000740  000944  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
000741  000945  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
000742  000946  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
000743  000947  //       : NB not implemented, default is COLOUR16
000744  000948  //       :
000745  000949  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
000746  000950  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
000747  000951  //       : sets the button and slider objects bevel width
000748  000952  //       :
000749  000953  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
000750  000954  //       : gfx_Set(BEVEL_SHADOW , 5);
000751  000955  //       : sets the button and slider objects darken and lighten depth for the bevel colour
000752  000956  //       :
000753  000957  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
000754  000958  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
000755  000959  //       : sets the origin of drawn objects to a position other than 0,0
000756  000960  //       :
000757  000961  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
000758  000962  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
000759  000963  //       : sets the origin of drawn objects to a position other than 0,0
000760  000964        
000761  000965        
000762  000966  func gfx_Cls(), 0;                    // clear the screen
000763  000967  // Syntax: gfx_Cls();
000764  000968  // Usage : gfx_Cls();
000765  000969  // Notes : Clears the screen with current background colour
000766  000970        
000767  000971  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
000768  000972  // Syntax: gfx_MoveTo(x, y);
000769  000973  // Usage : gfx_MoveTo(arg1, arg2);
000770  000974  // Notes : Moves the origin to a new x,y position
000771  000975        
000772  000976  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
000773  000977  // Syntax: gfx_MoveRel(x, y);
000774  000978  // Usage : gfx_MoveRel(arg1, arg2);
000775  000979  // Notes : Moves the origin to a new x,y position
000776  000980  //       : relative to the current origing
000777  000981        
000778  000982  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
000779  000983  // Syntax: gfx_LineTo(x1, y1);
000780  000984  // Usage : gfx_LineTo(arg1, arg2);
000781  000985  // Notes : Draws a Line from the origin x,y to x1,y1.
000782  000986  //       : The new origin is then set to x1, y1. Line colour needs
000783  000987  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
000784  000988        
000785  000989  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
000786  000990  // Syntax: gfx_LineRel(x1, y1);
000787  000991  // Usage : gfx_LineRel(arg1, arg2);
000788  000992  // Notes : Draws a Line from the origin x,y to x1,y1.
000789  000993  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
000790  000994  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
000791  000995        
000792  000996  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
000793  000997  // Syntax: gfx_Line(x1, x2, y2, colr);
000794  000998  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
000795  000999  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
000796  001000        
000797  001001  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
000798  001002  // Syntax: gfx_Line(x1, x2, y, colr);
000799  001003  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
000800  001004  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
000801  001005        
000802  001006  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
000803  001007  // Syntax: gfx_Line(y1, y2, x, colr);
000804  001008  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
000805  001009  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
000806  001010        
000807  001011  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
000808  001012  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
000809  001013  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
000810  001014  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
000811  001015  //       : bottom corner (x2,y2) on the screen.
000812  001016        
000813  001017  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
000814  001018  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
000815  001019  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
000816  001020  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
000817  001021  //       : bottom corner (x2,y2) on the screen.
000818  001022        
000819  001023  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
000820  001024  // Syntax: gfx_Circle(x, y, rad, colr);
000821  001025  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
000822  001026  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
000823  001027        
000824  001028  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
000825  001029  // Syntax: gfx_Circle(x, y, rad, colr);
000826  001030  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
000827  001031  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
000828  001032        
000829  001033  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
000830  001034  // Syntax: gfx_PutPixel(x, y, colr);
000831  001035  // Usage : gfx_PutPixel(arg1, arg2, arg3);
000832  001036  // Notes : Plots a coloured pixel on the screen at x,y location
000833  001037        
000834  001038  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
000835  001039  // Syntax: gfx_GetPixel(x, y);
000836  001040  // Usage : var := gfx_GetPixel(arg1, arg2);
000837  001041  // Notes : Reads and returns the colour value of a pixel at location x,y
000838  001042        
000839  001043  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
000840  001044  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
000841  001045  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
000842  001046  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
000843  001047  //       : Vertices must be specified in an anti-clockwise fashion
000844  001048        
000845  001049  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
000846  001050  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
000847  001051  // Usage : gfx_OrbitInit(&arg1, &arg2);
000848  001052  // Notes : Sets up the Orbit function parameters.
000849  001053  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
000850  001054  //       : variables that get updated after calling gfx_Orbit(,,) function.
000851  001055  //       : The coordiantaes are calculated relative to the origin
000852  001056  //       : obtained by using the gfx_MoveTo(x, y) function.
000853  001057        
000854  001058  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
000855  001059  // Syntax: gfx_Orbit(angle, distance);
000856  001060  // Usage : gfx_Orbit(arg1, arg2);
000857  001061  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
000858  001062  //       : only known parameters are the angle and the distance from the current origin.
000859  001063        
000860  001064  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
000861  001065  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
000862  001066  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
000863  001067  // Notes : This function is very similar to the Ploygon function
000864  001068  //       : with the exception of the 1st and the last vertices not joined.
000865  001069        
000866  001070  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
000867  001071  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
000868  001072  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
000869  001073  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
000870  001074  //       : Vertices must be minimum of 3 and can be specified in any fashion
000871  001075        
000872  001076  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
000873  001077  // Syntax: gfx_Dot();
000874  001078  // Usage : gfx_Dot();
000875  001079  // Notes : Places a coloured dot at the origin
000876  001080        
000877  001081        
000878  001082  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
000879  001083  // Syntax: gfx_Bullet();
000880  001084  // Usage : gfx_Bullet();
000881  001085  // Notes : Places a coloured circle at the origin
000882  001086  //       : filled or unfilled state is controlled by PenSize
000883  001087        
000884  001088  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
000885  001089  // Syntax: gfx_IncX();
000886  001090  // Usage : var := gfx_IncX();
000887  001091  // Notes : Increments the x coordinate of the origin
000888  001092        
000889  001093  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
000890  001094  // Syntax: gfx_IncY();
000891  001095  // Usage : var := gfx_IncY();
000892  001096  // Notes : Increments the y coordinate of the origin
000893  001097        
000894  001098  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
000895  001099  // Syntax: gfx_BoxTo(x1, y1);
000896  001100  // Usage : gfx_BoxTo(arg1, arg2);
000897  001101  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
000898  001102  //       : The new origin is then set to x1,y1. Rectangle colour needs
000899  001103  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
000900  001104  //       : and the PenSize setting determines if Box is solid or outline.
000901  001105        
000902  001106  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
000903  001107  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
000904  001108  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
000905  001109  // Notes : Specifies a clipping window region on the screen such that any objects
000906  001110  //       : and text placed onto the screen will be clipped and displayed only
000907  001111  //       : within that region. For the clipping window to take effect, "Clipping"
000908  001112  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
000909  001113        
000910  001114        
000911  001115  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
000912  001116  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
000913  001117  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
000914  001118  // *Notes:
000915  001119        
000916  001120  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
000917  001121  // Syntax: gfx_SetClipRegion();
000918  001122  // Usage : var := gfx_SetClipRegion();
000919  001123  // *Notes:
000920  001124        
000921  001125  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
000922  001126  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
000923  001127  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
000924  001128  // Notes : Plots a coloured Ellipse on the screen at centre x,y
000925  001129  //       : with xradius = xrad and yradius = yrad.
000926  001130  //       : if PenSize = 0 Ellipse is Solid
000927  001131  //       : if PenSize = 1 Ellipse is Outline
000928  001132        
000929  001133        
000930  001134  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
000931  001135  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
000932  001136  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
000933  001137  // Notes : Plots a coloured Ellipse on the screen at centre x,y
000934  001138  //       : with xradius = xrad and yradius = yrad.
000935  001139        
000936  001140  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 0;
000937  001141  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
000938  001142  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
000939  001143  // Notes : Draws a 3 dimensional Text Button at screen location defined by
000940  001144  //       : x,y arguments (top left corner). The size of the button depends on
000941  001145  //       : the font, width, height and length of the text.
000942  001146  //       : The button appearance will depend on the state parameter setting:
000943  001147  //       :         state = 0 : Button Pressed
000944  001148  //       :         state = 1 : Button Raised
000945  001149        
000946  001150  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
000947  001151  // Syntax: gfx_Panel("style", "x", "y", "width", "height", "colour"), 0;
000948  001152  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
000949  001153  // Notes : Draws a panel (groupbox) at screen location defined by
000950  001154  //       : x, y, width and height with colour "colour".
000951  001155  //       :         state = 0 : recessed
000952  001156  //       :         state = 1 : raised
000953  001157        
000954  001158  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
000955  001159  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
000956  001160  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
000957  001161  // Notes : Draws a 3 dimensional Slider Bar on the screen.
000958  001162  //       : Slider parameters are as follows:
000959  001163  //       :         mode = 0 : Slider recessed
000960  001164  //       :         mode = 1 : Slider raised
000961  001165  //       :         x1, y1 = top left corner
000962  001166  //       :         x2, y2 = bottom right corner
000963  001167  //       :         scale = n : sets the full scale range from 0 to n
000964  001168  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
000965  001169  //       : returns:-
000966  001170        
000967  001171        
000968  001172  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
000969  001173  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
000970  001174  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
000971  001175  // Notes : Copies an area of a screen from xs,ys of size given by width and height
000972  001176  //       : and pastes it to another location determined by xd, yd.
000973  001177        
000974  001178  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
000975  001179  // Syntax: gfx_RGBto565(red, green, blue);
000976  001180  // Usage : gfx_RGBto565(arg1, arg2, arg3);
000977  001181  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
000978  001182        
000979  001183  func gfx_332to565("COLOUR8BIT"), 1;
000980  001184  // Syntax: gfx_332to565(colour);
000981  001185  // Usage : gfx_332to565(arg);
000982  001186  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
000983  001187        
000984  001188  func gfx_Selection("index", "backcolor", "textcolor"), 0;
000985  001189  // Syntax: gfx_Selection("index", "backcolor", "textcolor"), 0;
000986  001190  // Usage : gfx_Selection(1, RED, YELLOW);
000987  001191  // Notes : Called prior to drawing a button, this function
000988  001192  //       : hilites the required text line on a multiline button.
000989  001193        
000990  001194  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
000991  001195  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
000992  001196  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
000993  001197  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
000994  001198  //       : Vertices must be specified in an anti-clockwise fashion
000995  001199        
000996  001200        
000997  001201  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
000998  001202  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
000999  001203  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001000  001204  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001001  001205  //       : Vertices must be minimum of 3 and can be specified in any fashion
001002  001206        
001003  001207        
001004  001208  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001005  001209  // Syntax: gfx_Offset(x, y);
001006  001210  // Usage : gfx_Offset(arg1, arg2);
001007  001211  // Notes : Set the screen offset
001008  001212        
001009  001213        
001010  001214        
001011  001215  func gfx_Get("mode"), 1;
001012  001216  // Syntax: gfx_Get(mode);
001013  001217  // Usage : arg1 := gfx_Get(arg);
001014  001218  // Notes : Returns various parameters to caller
001015  001219  //       :
001016  001220  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001017  001221  //       : var := gfx_Get(X_MAX);
001018  001222  //       : Returns the maximum horizontal value of the display
001019  001223  //       :
001020  001224  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001021  001225  //       : var := gfx_Get(Y_MAX);
001022  001226  //       : Returns the maximum vertical value of the display
001023  001227  //       :
001024  001228  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001025  001229  //       : var := gfx_Get(LEFT_POS);
001026  001230  //       : Returns the left location of the last drawn object
001027  001231  //       : such as a slider or button or an image/video
001028  001232  //       :
001029  001233  //       : mode = TOP_POS (mode 3) : Top location of Object
001030  001234  //       : var := gfx_Get(TOP_POS);
001031  001235  //       : Returns the top location of the last drawn object
001032  001236  //       : such as a slider or button or an image/video
001033  001237  //       :
001034  001238  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001035  001239  //       : var := gfx_Get(RIGHT_POS);
001036  001240  //       : Returns the right location of the last drawn object
001037  001241  //       : such as a slider or button or an image/video
001038  001242  //       :
001039  001243  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001040  001244  //       : var := gfx_Get(BOTTOM_POS );
001041  001245  //       : Returns the bottom location of the last drawn object
001042  001246  //       : such as a slider or button or an image/video
001043  001247  //       :
001044  001248        
001045  001249        
001046  001250  //==================================================//
001047  001251  // Single parameter short-cuts                      //
001048  001252  // for the gfx_Set functions                        //
001049  001253  // These functions return the existing value before //
001050  001254  // the change is made.                              //
001051  001255  //==================================================//
001052  001256  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001053  001257  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001054  001258  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001055  001259  func gfx_Clipping("mode"), 0;                       // 3  graphics clipping ON/OFF
001056  001260  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001057  001261  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001058  001262  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001059  001263  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001060  001264  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001061  001265  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001062  001266  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001063  001267  func gfx_ColourMode("mode"), 1;                     // 11 graphics colour mode COLOUR8 or COLOUR16 (default colour 16)
001064  001268  func gfx_BevelWidth("mode"), 1;                     // 12 graphics button bevel width
001065  001269  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001066  001270  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001067  001271  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001068  001272        
001069  001273        
001070  001274  //==================================================//
001071  001275  // uSD/FLASH Function Prototypes                    //
001072  001276  //==================================================//
001073  001277  func media_Video("x", "y"), 0;                      // display movie at position x y
001074  001278  // Syntax: media_Video(x, y);
001075  001279  // Usage : media_Video(arg1, arg2);
001076  001280  // Notes : Play a Video/Animation clip from the uSD card at screen location
001077  001281  //       : specified by x,y (top left corner). The location of the clip in the
001078  001282  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001079  001283        
001080  001284  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001081  001285  // Syntax: media_VideoFrame(Frame_number);
001082  001286  // Usage : arg1 := media_VideoFrame();
001083  001287  // Notes : After a pointer to a valid video has been set with media_SetSector,
001084  001288  //       : calling this function shows each fram sequentially, returning
001085  001289  //       : the number of frames remaining. The position of the image is
001086  001290  //     : at the current origin as set with gfx_MoveTo(...);
001087  001291        
001088  001292  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001089  001293  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001090  001294  // Usage : media_SetAdd(arg1, arg2);
001091  001295  // Notes : Set uSD internal Address pointer for bytewise access
001092  001296        
001093  001297  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001094  001298  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001095  001299  // Usage : media_SetSector(arg1, arg2);
001096  001300  // Notes : Set uSD internal Sector pointer for sector block access
001097  001301        
001098  001302  func media_RdSector("*destination"), 1;
001099  001303  // Syntax: media_RdSector(*destination);
001100  001304  // Usage : media_RdSector(rdblock);
001101  001305  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001102  001306  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001103  001307  //       : After the read the Sector pointer is automatically incremented by 1.
001104  001308  //       : Returns TRUE if uSD response was TRUE
001105  001309        
001106  001310  func media_WrSector("*source"), 1;
001107  001311  // Syntax: media_WrSector(*source);
001108  001312  // Usage : media_WrSector(wrblock);
001109  001313  // Notes : Writes 512 bytes (256 words) from a source memory block
001110  001314  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001111  001315  //       : pointer is automatically incremented by 1.
001112  001316  //       : Returns TRUE if uSD response was TRUE
001113  001317        
001114  001318  func media_ReadByte(), 1;                // read a byte at the current stream position
001115  001319  // Syntax: media_RdByte();
001116  001320  // Usage : var := media_RdByte();
001117  001321  // Notes : Reads and Returns a single byte of data from the
001118  001322  //       : uSD card pointed to by the internal Address pointer.
001119  001323  //       : After the read the Address pointer is automatically
001120  001324  //       : incremented by 1.
001121  001325        
001122  001326  func media_ReadWord(), 1;                // read a word at the current stream position
001123  001327  // Syntax: media_ReadWord();
001124  001328  // Usage : var := media_ReadWord();
001125  001329  // *Notes : Reads and Returns a single word of data from the
001126  001330  //       : uSD card pointed to by the internal Address pointer.
001127  001331  //       : After the read the Address pointer is automatically
001128  001332  //       : incremented by 2.
001129  001333        
001130  001334  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
001131  001335  // Syntax: media_WriteByte(arg1);
001132  001336  // Usage : var := media_WriteByte(arg1);
001133  001337  // *Notes : Writes and Returns xxxxx
001134  001338  //       : After the write the Address pointer is automatically
001135  001339  //       : incremented by 1.
001136  001340        
001137  001341  func media_WriteWord("word"), 1;            // write a word to the current stream position
001138  001342  // Syntax: media_WriteWord(arg1);
001139  001343  // Usage : var := media_WriteWord(arg1);
001140  001344  // *Notes : Writes and Returns xxxxx
001141  001345  //       : After the write the Address pointer is automatically
001142  001346  //       : incremented by 2.
001143  001347        
001144  001348  func media_Image("x", "y"), 0;            // display image at position x y
001145  001349  // Syntax: media_Image(x, y);
001146  001350  // Usage : media_Image(arg1, arg2);
001147  001351  // Notes : Display an image from the uSD card at screen location
001148  001352  //       : specified by x,y (top left corner). The location of the
001149  001353  //       : Image in the uSD card must be specified by
001150  001354  //       : media_setSector(Image_Sector_Add) function.
001151  001355        
001152  001356  func media_Flush(), 1;                    // after writing to media, flush the sector and write
001153  001357  // Syntax: media_Flush();
001154  001358  // Usage : var := media_Flush();
001155  001359  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
001156  001360  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
001157  001361        
001158  001362  func media_Init(), 1;                    // initialize uSD card
001159  001363  // Usage : media_Init();
001160  001364  // Notes : Initialise uSD CARD
001161  001365  //       : Response: 0 = No Card
001162  001366  //       :           1 = Card Initialised
001163  001367        
001164  001368        
001165  001369  //==============================================//
001166  001370  // Communications Function Prototypes           //
001167  001371  //==============================================//
001168  001372  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
001169  001373  // Syntax: com_Init(buffer, bufsize, qualifier);
001170  001374  // Usage1: com_Init(mybuf, 20, 0);
001171  001375  // Usage2: com_Init(mybuf, 20, ':');
001172  001376  // Notes : initialize a serial capture buffer for the comms input
001173  001377  //       : The program must declare a var array as a circular buffer.
001174  001378  //       : Usage1 declares a circular buffer which will continually
001175  001379  //       : buffer characters.
001176  001380  //       : Usage2 must receive ':' before any characters will
001177  001381  //       : accumulate in the buffer.
001178  001382        
001179  001383  func com_Reset(), 0;                 // reset the comms receiver
001180  001384  // Syntax: com_Reset();
001181  001385  // Usage : com_Reset();
001182  001386  // Notes : reset comms to default polled mode
001183  001387        
001184  001388  func com_Count(), 1;                // return count of characters in receive buffer
001185  001389  // Syntax: com_Count();
001186  001390  // Usage : arg := com_Count();
001187  001391  // Notes : return count of buffered characters in buffer attachment
001188  001392        
001189  001393  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
001190  001394  // Syntax: com_Full();
001191  001395  // Usage : if (com_Full() ,,,, go read buffer;
001192  001396  // Notes : return true if buffer full (not necessarily an error if
001193  001397  //       : buffer is sized to a packet size)
001194  001398        
001195  001399  func com_Error(), 1;                // return comms errors comms error occurred
001196  001400  // Syntax: com_Error();
001197  001401  // Usage : if (com_Error() ) ...... take recovery action;
001198  001402  // Notes : return non zero if any errors low level comms errors occured
001199  001403  // returns :
001200  001404  // bit0 = Receiver Overflow Error
001201  001405  // bit1 = Receiver Framing Error
001202  001406  // bit2 = Transmit Buffer Overflow
001203  001407        
001204  001408  func com_Sync(), 1;                // returns TRUE if qualifier has been received
001205  001409  // Syntax: com_Sync();
001206  001410  // Usage : com_Sync();
001207  001411  // return true if sync character has been received in com_Init("...") mode
001208  001412        
001209  001413        
001210  001414  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
001211  001415  // Syntax: com_TXbuffer("buf", "bufsize", "pin");
001212  001416  // Usage : com_TXbuffer(mybuf, 1024, IO1_PIN);    // set the TX buffer, usin IO1_PIN for turnaround
001213  001417  // Usage : com_TXbuffer(0, 0, 0);              // revert to non buffered service
001214  001418  // Notes : initialize a serial buffer for the COM0 output.
001215  001419  //       : The program must declare a var array as a circular buffer.
001216  001420  //       : When a TX buffer is declared for comms, the transmission
001217  001421  //       : of characters becomes non blocking. The only time
001218  001422  //       : blocking will occur is if the buffer has insufficient space
001219  001423  //       : to accept the next character, in which case the function
001220  001424  //       : will wait for buffer space to become available. If the
001221  001425  //       : TX buffer is no longer required, just set the buffer pointer
001222  001426  //       : to zero, the size in this case doesnt matter and is ignored.
001223  001427  //       : The function can resize or reallocated to another buffer at
001224  001428  //       : any time. The buffer is flushed before any changes are made.
001225  001429  //       : "pin" designates an IO pin to control a bi-directional 
001226  001430  //       : control device for half duplex mode. "pin" will go HI at the
001227  001431  //       : start of a transmission, and will return low after the final
001228  001432  //       : byte is transmitted. If not required, just set "pin" to zero.
001229  001433        
001230  001434        
001231  001435  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
001232  001436  // Syntax: com_TXcount();
001233  001437  // Usage : arg := com_Count();
001234  001438  // Notes : return count of characters remaining in COM0 transmit buffer
001235  001439  //       : that was previously allocated with com_TXbuffer(...);
001236  001440        
001237  001441        
001238  001442  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
001239  001443  // Syntax: com_TXemptyEvent(function);
001240  001444  // Usage : arg := com_TXemptyEvent();
001241  001445  // Notes : If a comms TX buffer that was previously allocated with
001242  001446  //       : com_TXbuffer(...);, this function can be used to set up
001243  001447  //       : a function to be called when the COM0 TX buffer is empty.
001244  001448  //       : This is useful for either reloading the TX buffer, setting
001245  001449  //       : or clearing a pin to change the direction of eg a RS485
001246  001450  //       : line driver, or any other form of traffic control.
001247  001451  //       : The event function must not have any parameters.
001248  001452  //       : To disable the event, simply call com_TXemptyEvent(0).
001249  001453  //       : com_TXbuffer(...); also resets any active event.
001250  001454  //       : com_TXemptyEvent returns any previous event function
001251  001455  //       : address, or zero if there was no previous function.
001252  001456        
001253  001457        
001254  001458  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
001255  001459  // Usage : arg := com_TXbufferHold(ON);  // hold the buffer while we fill it
001256  001460  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
001257  001461  // Notes : Expecting that a comms TX buffer that was previously allocated with
001258  001462  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
001259  001463  //       : the buffer being sent wile it is being loaded. Mormally, when
001260  001464  //       : using buffered comms, the transmit process will begin
001261  001465  //       : immediately. This is often undesirable for 2 reasons,
001262  001466  //       : 1] you may wish to build a packet then send it later
001263  001467  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
001264  001468  //       : as the FIFO buffer is constantly trying to empty while
001265  001469  //       : you are busy tring to fill it.
001266  001470  // return -1 if function is called illegally when TX comms is not buffered.
001267  001471  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
001268  001472  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
001269  001473        
001270  001474        
001271  001475  //=============================================================//
001272  001476  // Auxilliary Communications Function Prototypes
001273  001477  //=============================================================//
001274  001478  func com1_Init("buffer", "bufsize", "qualifier"), 0;
001275  001479  // Syntax: com_Init(buffer, bufsize, qualifier);
001276  001480  // Usage1: com_Init(mybuf, 20, 0);
001277  001481  // Usage2: com_Init(mybuf, 20, ':');
001278  001482  // Notes : initialize a serial capture buffer for the comms input
001279  001483  //       : The program must declare a var array as a circular buffer.
001280  001484  //       : Usage1 declares a circular buffer which will continually
001281  001485  //       : buffer characters.
001282  001486  //       : Usage2 must receive ':' before any characters will
001283  001487  //       : accumulate in the buffer.
001284  001488        
001285  001489  func com1_Reset(), 0;
001286  001490  // Syntax: com_Reset();
001287  001491  // Usage : com_Reset();
001288  001492  // Notes : reset comms receiver to default polled mode
001289  001493        
001290  001494  func com1_Count(), 1;
001291  001495  // Syntax: com_Count();
001292  001496  // Usage : arg := com_Count();
001293  001497  // Notes : return count of characters in receive buffer
001294  001498        
001295  001499  func com1_Full(), 1;
001296  001500  // Syntax: com_Full();
001297  001501  // Usage : if (com_Full() ,,,, go read buffer;
001298  001502  // Notes : return true if receive buffer full
001299  001503        
001300  001504  func com1_Error(), 1;
001301  001505  // Syntax: com_Error();
001302  001506  // Usage : if (com_Error() ) ...... take recovery action;
001303  001507  // Notes : return non zero if any level comms errors occured
001304  001508  // returns :
001305  001509  // bit0 = Receiver Overflow Error
001306  001510  // bit1 = Receiver Framing Error
001307  001511  // bit2 = Transmit Buffer Overflow
001308  001512        
001309  001513  func com1_Sync(), 1;
001310  001514  // Syntax: com_Sync();
001311  001515  // Usage : com_Sync();
001312  001516  // Notes : return true if sync character has been received in com_Init("...") mode
001313  001517        
001314  001518        
001315  001519  func com1_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
001316  001520  // Syntax: com1_TXbuffer("buf", "bufsize", "pin");
001317  001521  // Usage : com1_TXbuffer(mybuf, 1024, IO1_PIN);    // set the TX buffer, usin IO1_PIN for turnaround
001318  001522  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
001319  001523  // Notes : initialize a serial buffer for the COM1 output.
001320  001524  //       : The program must declare a var array as a circular buffer.
001321  001525  //       : When a TX buffer is declared for comms, the transmission
001322  001526  //       : of characters becomes non blocking. The only time
001323  001527  //       : blocking will occur is if the buffer has insufficient space
001324  001528  //       : to accept the next character, in which case the function
001325  001529  //       : will wait for buffer space to become available. If the
001326  001530  //       : TX buffer is no longer required, just set the buffer pointer
001327  001531  //       : to zero, the size in this case doesnt matter and is ignored.
001328  001532  //       : The function can resize or reallocated to another buffer at
001329  001533  //       : any time. The buffer is flushed before any changes are made.
001330  001534  //       : "pin" designates an IO pin to control a bi-directional 
001331  001535  //       : control device for half duplex mode. "pin" will go HI at the
001332  001536  //       : start of a transmission, and will return low after the final
001333  001537  //       : byte is transmitted. If not required, just set "pin" to zero.
001334  001538        
001335  001539        
001336  001540  func com1_TXcount(), 1;                // return count of characters in COM1 TX buffer
001337  001541  // Syntax: com1_TXcount();
001338  001542  // Usage : arg := com1_Count();
001339  001543  // Notes : return count of characters remaining in COM1 transmit buffer
001340  001544  //       : that was previously allocated with com1_TXbuffer(...);
001341  001545        
001342  001546        
001343  001547  func com1_TXemptyEvent("function"), 1;  // sets a function to be called when COM1 TX buffer empty
001344  001548  // Syntax: com1_TXemptyEvent(function);
001345  001549  // Usage : arg := com1_TXemptyEvent();
001346  001550  // Notes : If a comms TX buffer that was previously allocated with
001347  001551  //       : com1_TXbuffer(...);, this function can be used to set up
001348  001552  //       : a function to be called when the COM1 TX buffer is empty.
001349  001553  //       : This is useful for either reloading the TX buffer, setting
001350  001554  //       : or clearing a pin to change the direction of eg a RS485
001351  001555  //       : line driver, or any other form of traffic control.
001352  001556  //       : The event function must not have any parameters.
001353  001557  //       : To disable the event, simply call com1_TXemptyEvent(0).
001354  001558  //       : com1_TXbuffer(...); also resets any active event.
001355  001559  //       : com1_TXemptyEvent returns any previous event function
001356  001560  //       : address, or zero if there was no previous function.
001357  001561        
001358  001562        
001359  001563  func com1_TXbufferHold("state"), 1; // hold or release a com1_TXbuffer
001360  001564  // Usage : arg := com1_TXbufferHold(ON);  // hold the buffer while we fill it
001361  001565  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
001362  001566  // Notes : Expecting that a comms TX buffer that was previously allocated with
001363  001567  //       : com1_TXbuffer(...);, com1_TXbufferHold(ON) can be used to stop
001364  001568  //       : the buffer being sent wile it is being loaded. Mormally, when
001365  001569  //       : using buffered comms, the transmit process will begin
001366  001570  //       : immediately. This is often undesirable for 2 reasons,
001367  001571  //       : 1] you may wish to build a packet then send it later
001368  001572  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
001369  001573  //       : as the FIFO buffer is constantly trying to empty while
001370  001574  //       : you are busy tring to fill it.
001371  001575  // return -1 if function is called illegally when TX comms is not buffered.
001372  001576  // return buffer count when called with argument of 1, eg com1_TXbufferHold(ON)
001373  001577  // return 0 when argument is zero, eg com1_TXbufferHold(OFF)
001374  001578        
001375  001579  func serin1(), 1;
001376  001580  // Syntax: serin1();
001377  001581  // Usage : char := serin1();
001378  001582  // Notes : return the next available character from COM1
001379  001583        
001380  001584  func serout1("char"), 0;
001381  001585  // Syntax: serout1("char");
001382  001586  // Usage : serout1(ch);
001383  001587  // Notes : send character to COM1
001384  001588        
001385  001589  func com_SetBaud("comport","baudrate/10"), 1;
001386  001590  // Syntax: com_SetBaud("comport","baudrate/10");
001387  001591  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
001388  001592  // Notes : sets to any viable baud rate from 160 to 655350
001389  001593  // return true if baud rate was acceptable
001390  001594        
001391  001595        
001392  001596        
001393  001597  //==============================================//
001394  001598  // Display Access                               //
001395  001599  //==============================================//
001396  001600  func disp_Init(), 0;                            // initialize display with required tables
001397  001601  // Syntax: disp_Init();
001398  001602  // Usage : disp_Init();
001399  001603  // Notes : Initialises or reinitialises the display.
001400  001604  //       : Normally used after restoration of peripheral power
001401  001605  //       : and after DeepSleep.
001402  001606        
001403  001607  func disp_SetReg("register", "data"), 0;
001404  001608  // Syntax: display_SetReg(register, data);
001405  001609  // Usage : display_SetReg(arg1, arg2);
001406  001610  // Notes : Sets uLCD specific display driver registers. Refer
001407  001611  //       : to appropriate display driver data sheet.
001408  001612        
001409  001613  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
001410  001614  // Syntax: disp_setGRAM(x1, y1, x2, y2);
001411  001615  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
001412  001616  // Notes : Prepares the GRAM area for user access.
001413  001617  //       : Data can now be written with disp_GRAM.
001414  001618  //       : GRAM will be set accordingly for the correct screen mode.
001415  001619  //       : the LO word of the 32 bit pixel count is returned. This is
001416  001620  //       : usually all that is needed unlse GRAM area exceeds 256^2
001417  001621  //       : A copy of the 32bit value can be found in
001418  001622  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
001419  001623        
001420  001624  func disp_WrGRAM("colour"), 0;
001421  001625  // Syntax: display_WrGRAM(colour);
001422  001626  // Usage : display_WrGRAM(arg);
001423  001627  // Notes : Data can be written to the GRAM consecutively using
001424  001628  //       : this function once the GRAM access window has been setup.
001425  001629        
001426  001630  func disp_WriteControl("value"), 0;             // write a control byte to the display
001427  001631  func disp_WriteWord("value"), 0;                // write a word to the display
001428  001632        
001429  001633        
001430  001634  func disp_ReadWord(), 1;                        // read a word from the display
001431  001635  // Syntax: disp_ReadWord();
001432  001636  // Usage : x:=disp_ReadWord();
001433  001637  // Notes : Read a word from the controller
001434  001638  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
001435  001639  //       : print(disp_ReadWord());        // print ID
001436  001640  //       : (Many displays are write only)
001437  001641        
001438  001642                                                  //
001439  001643  //==============================================//
001440  001644  // unadorned SPI functions                      //
001441  001645  //==============================================//
001442  001646  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
001443  001647  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
001444  001648  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
001445  001649  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
001446  001650                                                  //
001447  001651  //==============================================//
001448  001652  // flash device specific functions              //
001449  001653  //==============================================//
001450  001654  func flash_SIG(), 1;                            // read Jedecsignature from SPI Flash device
001451  001655  func flash_ID(), 1;                             // read ID code from FLASH device
001452  001656  func flash_BulkErase(), 0;                      // erase the entire FLASH device
001453  001657  func flash_BlockErase("block"), 1;              // erase the required 64k flash block
001454  001658                                                  //
001455  001659                                                  //
001456  001660  //==============================================//
001457  001661  // string and character size function           //
001458  001662  //==============================================//
001459  001663  func charwidth("char"), 1;                      // return width of a character in pixel units
001460  001664  func charheight("char"), 1;                     // return height of a character in pixel units
001461  001665  func strwidth("pointer"), 1;                    // return width of a string in pixel units
001462  001666  func strheight(), 1;                            // return height of a string in pixel units
001463  001667        
001464  001668        
001465  001669  //------------------------------------------------------------------//
001466  001670  //        I2C Function Prototypes
001467  001671  //------------------------------------------------------------------//
001468  001672  func I2C_Open("speed"), 0;
001469  001673  // Syntax: I2C_Open(speed),
001470  001674  // Usage : I2C_Open(I2C_MED);
001471  001675  // Notes : configures the I2C module
001472  001676  //       : speed can be I2C_SLOW, I2C_MED, I2C_FAST (100khz, 400khz, 1mhz)
001473  001677        
001474  001678  func I2C_Close(), 0;
001475  001679  // Syntax: I2C_Close();
001476  001680  // Usage : I2C_Close();
001477  001681  // Notes : disables the I2C1 module.
001478  001682        
001479  001683  func I2C_Start(), 1;
001480  001684  // Syntax: I2C_Start();
001481  001685  // Usage : I2C_Start();
001482  001686  // Notes : generates a Start condition.
001483  001687  //       : returns true if successful (usually ignored)
001484  001688        
001485  001689  func I2C_Stop(), 1;
001486  001690  // Syntax: I2C_Stop();
001487  001691  // Usage : I2C_Stop();
001488  001692  // Notes : generates a Stop condition.
001489  001693  //       : returns true if successful (usually ignored)
001490  001694        
001491  001695  func I2C_Restart(), 1;
001492  001696  // Syntax: I2C_Restart();
001493  001697  // Usage : I2C_Restart();
001494  001698  // Notes : generates a Restart condition.
001495  001699  //       : returns true if successful (usually ignored)
001496  001700        
001497  001701  func I2C_Read(), 1;
001498  001702  // Syntax: I2C_Read();
001499  001703  // Usage : ch := I2C_Read();
001500  001704  // Notes : reads a single byte from the I2C Bus.
001501  001705        
001502  001706  func I2C_Write("byte"), 1;
001503  001707  // Syntax: I2C_Write(byte);
001504  001708  // Usage : r := I2C_Write(ch);
001505  001709  // Notes : is used to write a byte to the I2C bus.
001506  001710  //       : Returns 0 if failed, 1 if no ack, 2 if ack
001507  001711        
001508  001712  func I2C_Ack(), 0;
001509  001713  // Syntax: I2C_Ack();
001510  001714  // Usage : I2C_Ack();
001511  001715  // Notes : generates the acknowledge condition.
001512  001716        
001513  001717  func I2C_Nack(), 0;
001514  001718  // Syntax: I2C_Nack();
001515  001719  // Usage : I2C_Nack();
001516  001720  // Notes : generates the negative acknowledge condition.
001517  001721        
001518  001722  func I2C_AckStatus(), 0;
001519  001723  // Syntax: I2C_AckStatus();
001520  001724  // Usage : r := I2C_AckStatus();
001521  001725  // Notes : returns the ACK status from the device.
001522  001726        
001523  001727  func I2C_AckPoll("control"), 1;
001524  001728  // Syntax: I2C_AckPoll();
001525  001729  // Usage : r := I2C_AckPoll(0xA0);
001526  001730  // Notes : waits for a device to return from ACK polling.
001527  001731        
001528  001732  func I2C_Idle(), 0;
001529  001733  // Syntax: I2C_Idle();
001530  001734  // Usage : I2C_Idle();
001531  001735  // Notes : waits until the I2C Bus is Inactive.
001532  001736        
001533  001737  func I2C_Gets("buffer", "size"), 1;
001534  001738  // Syntax: I2C_Gets("buffer", "size");
001535  001739  // Usage : r := I2C_Gets(mybuf, 16);
001536  001740  // Notes : only reads up to "size" characters into "buffer"
001537  001741  //       : Reads up to asciiz terminator including terminator
001538  001742        
001539  001743  func I2C_Getn("buffer", "size"), 1;
001540  001744  // Syntax: I2C_Gets("buffer", "size");
001541  001745  // Usage : r := I2C_Gets(mybuf, 16);
001542  001746  // Notes : reads "size" bytes into "buffer"
001543  001747  //       :
001544  001748        
001545  001749  func I2C_Puts("buffer"), 1;
001546  001750  // Syntax: I2C_Puts("buffer");
001547  001751  // Usage : r := I2C_Puts(mybuf);
001548  001752  // Notes : writes an asciiz string to the I2C device
001549  001753  //       : returns count of characters written
001550  001754        
001551  001755  func I2C_Putn("buffer", "count"), 1;
001552  001756  // Syntax: I2C_Putn("buffer","count");
001553  001757  // Usage : r := I2C_Puts(mybuf,10);
001554  001758  // Notes : writes up to "size" bytes to the I2C device
001555  001759  //       : returns number of bytes written
001556  001760        
001557  001761        
001558  001762  //------------------------------------------------------------------//
001559  001763  //        Image Control Function Prototypes
001560  001764  //------------------------------------------------------------------//
001561  001765  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
001562  001766  // Syntax: img_SetPosition(handle, index, xpos, ypos);
001563  001767  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
001564  001768  // Notes : set the position where the image will be displayed
001565  001769  //       : returns true if index was ok and function was successful.
001566  001770  //       : you may turn off an image so when img_Refresh is called,
001567  001771  //       : the image will not be shown
001568  001772        
001569  001773  func img_Enable("handle", "index"), 1;
001570  001774  // Syntax: img_Enable(handle, index);
001571  001775  // Usage : r := img_Enable(hImageList, imagenum);
001572  001776  // Notes : enable image in a image list
001573  001777  //       : returns true if index was ok and function was successful.
001574  001778  //       : this is the default state so when img_Refresh is called,
001575  001779  //       : all the images in the list will be shown
001576  001780  //       : if index is set to -1, all of the images are enabled
001577  001781        
001578  001782  func img_Disable("handle", "index"), 1;
001579  001783  // Syntax: img_Disable(handle, index);
001580  001784  // Usage : r := img_Disable(hImageList, imagenum);
001581  001785  // Notes : disable image in a image list
001582  001786  //       : returns true if index was ok and function was successful.
001583  001787  //       : you must turn off an image so when img_Refresh is called,
001584  001788  //       : the image will not be shown.
001585  001789  //       : if index is set to -1, all of the images are disabled
001586  001790        
001587  001791        
001588  001792  func img_Darken("handle", "index"), 1;
001589  001793  // Syntax: img_Darken(handle, index);
001590  001794  // Usage : r := img_Darken(hImageList, imagenum);
001591  001795  // Notes : darken image in a image list
001592  001796  //       : returns true if index was ok and function was successful.
001593  001797  //       : if index is set to -1, all of the images are darkened
001594  001798  //       : NB:- this feature will only work for the next refresh, then
001595  001799  //       : the image reverts back to normal when displayed again.
001596  001800        
001597  001801        
001598  001802  func img_Lighten("handle", "index"), 1;
001599  001803  // Syntax: img_Lighten(handle, index);
001600  001804  // Usage : r := img_Lighten(hImageList, imagenum);
001601  001805  // Notes : lighten image in a image list
001602  001806  //       : returns true if index was ok and function was successful.
001603  001807  //       : if index is set to -1, all of the images are lightened
001604  001808  //       : NB:- this feature will only work for the next refresh, then
001605  001809  //       : the image reverts back to normal when displayed again.
001606  001810        
001607  001811  func img_SetWord("handle", "index", "offset", "word"), 1;
001608  001812  // Syntax: img_SetWord(handle, index, offset, word);
001609  001813  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
001610  001814  // Notes : set specified word (0-7) in a image entry
001611  001815  //       : returns TRUE if successful, return value usually ignored.
001612  001816        
001613  001817  func img_GetWord("handle", "index", "offset"), 1;
001614  001818  // Syntax: myvar := img_GetWord("handle", "index", "offset");
001615  001819  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
001616  001820  // Notes : returns specified word (0-14) from an image entry
001617  001821  //       : refer to image control entry offsets.
001618  001822        
001619  001823  func img_Show("handle", "index"), 1;
001620  001824  // Syntax: img_Show(handle, index);
001621  001825  // Usage : display image entry (regardless of enable/disable)
001622  001826  //       : returns TRUE if successful, return value usually ignored.
001623  001827        
001624  001828  func img_SetAttributes("handle", "index","value"), 1;
001625  001829  // Syntax: img_SetAttributes("handle", "index","offset");
001626  001830  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
001627  001831  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
001628  001832  //       : of an image control entry. "value" refers to various bits in
001629  001833  //       : the image control entry (see image attribute flags).
001630  001834  //       : A '1' bit in the "value" field SETS the respective bit
001631  001835  //       : in the IMAGE_FLAGS field of the image control entry.
001632  001836  //       : returns TRUE if successful, return value usually ignored.
001633  001837        
001634  001838  func img_ClearAttributes("handle", "index","value"), 1;
001635  001839  // Syntax: img_ClearAttributes("handle", "index","offset");
001636  001840  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
001637  001841  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
001638  001842  //       : of an image control entry. "value" refers to various bits in
001639  001843  //       : the image control entry (see image attribute flags)
001640  001844  //       : a '1' bit in the "value" field CLEARS the respective bit
001641  001845  //       : in the IMAGE_FLAGS field of the image control entry.
001642  001846  //       : returns TRUE if successful, return value usually ignored.
001643  001847        
001644  001848  func img_Touched("handle", "index"), 1;
001645  001849  // Syntax: r := img_Touched(handle, index);
001646  001850  // Usage : img_Touched(hndl, 17);
001647  001851  //       : returns -1 if image not touched, or returns index
001648  001852  // Notes : if index is passed as -1, function tests all images,
001649  001853  //       : and returns -1 if image not touched, or returns index.
001650  001854        
001651  001855        
001652  001856        
001653  001857        
001654  001858  //------------------------------------------------------------------//
001655  001859  //        Timer Function Prototypes
001656  001860  //------------------------------------------------------------------//
001657  001861  func sys_T(), 1;
001658  001862  // Syntax: sys_T();
001659  001863  // Usage : t := sys_T();
001660  001864  // Notes : return the current value of the rolling system timer (1msec) LO word
001661  001865        
001662  001866  func sys_T_HI(), 1;
001663  001867  // Syntax: sys_T_HI();
001664  001868  // Usage : t := sys_T_HI();
001665  001869  // Notes : return the current value of the rolling system timer (1msec) HI word
001666  001870        
001667  001871  func sys_SetTimer("timernum","value"), 0;
001668  001872  // Syntax: sys_SetTimer("timernum", "value");
001669  001873  // Usage : sys_SetTimer(TIMER5, 10000);
001670  001874  // Notes : set a countdown on the selected timer, or 'top up' if required.
001671  001875  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
001672  001876  //       : Maximum timeout period is 65.535 seconds
001673  001877  //       : A timer can be read with the sys_GetTimer("timernum") function
001674  001878        
001675  001879  func sys_GetTimer("timernum"), 1;
001676  001880  // Syntax: t := sys_GetTimer("timernum");
001677  001881  // Usage : t := sys_GetTimer(TIMER3);
001678  001882  // Notes : returns 0 if timer has expired, or the current countdown value.
001679  001883  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
001680  001884  //       : Maximum timeout period is 65.535 seconds
001681  001885  //       : A timer must be set with the sys_SetTimer("timernum","value") function
001682  001886        
001683  001887  func sys_SetTimerEvent("timernum","function"), 1;
001684  001888  // Syntax: sys_SetTimerFunction("timernum", "function");
001685  001889  // Usage : sys_SetTimer(TIMER5, myfunc);
001686  001890  // Notes : set a function to be called for selected timer.
001687  001891  //       : When the timer reaches zero, the function is called.
001688  001892  //       : The called function must not have any parameters
001689  001893  //       : sys_SetTimerEvent returns any previous event function
001690  001894  //       : address, or zero if there was no previous function.
001691  001895        
001692  001896  func sys_EventQueue(), 1;
001693  001897  // Syntax: sys_EventQueue();
001694  001898  // Usage : tasks := sys_EventQueue();
001695  001899  // Notes : returns the max number of events that were pending
001696  001900  //       : in the timer queue since the last call to this function.
001697  001901  //       : This can be used to assess timer event overhead burden,
001698  001902  //       : especially after or during a sys_EventsPostpone action.
001699  001903        
001700  001904  func sys_EventsPostpone(), 0;
001701  001905  // Syntax: sys_EventPostpone();
001702  001906  // Usage : sys_EventPostpone();   // postpone the event queue
001703  001907  // Notes : postpone any events until the sys_EventResume function is executed
001704  001908  //       : The timer event queue will continue to queue events, but no action
001705  001909  //       : will take place untill a sys_EventResume function is encountered.
001706  001910  //       : The queue will continue to receive up to 32 events before discarding
001707  001911  //       : any further events. This function is required to allow a sequence of
001708  001912  //       : instructions or functions to occur that would otherwise be corrupted
001709  001913  //       : by an event occuring during the sequence of instructions or functions.
001710  001914  //       : A good example of this is when you set a position to print, if there
001711  001915  //       : was no way of locking the current sequence, an event may occur which
001712  001916  //       : does a similar thing, and a contention would occur - printing to
001713  001917  //       : the wrong position. This function should be used wisely, if any action
001714  001918  //       : that is required would take considerable time, it is better to disable
001715  001919  //       : any conflicting event functions with a bypass flag, then restart the
001716  001920  //       : conflicting event by re-issuing a timer value.
001717  001921        
001718  001922  func sys_EventsResume(), 0;
001719  001923  // Syntax: sys_EventsResume();
001720  001924  // Usage : sys_EventsResume();   // resume the event queue
001721  001925  // Notes : resume any postponed events. The queue will try to execute any timer
001722  001926  //       : events that were incurred during the postponed period.
001723  001927        
001724  001928        
001725  001929  func sys_Sleep("units"), 1;
001726  001930  // Syntax: t := sys_Sleep("units");
001727  001931  // Usage : t := sys_Sleep(10);
001728  001932  // Notes : sets the display into low power mode for a period of time.
001729  001933  //       : Touching the touch screen will also wake from sleep.
001730  001934  //       : Returns remaining sleep units.
001731  001935        
001732  001936  func iterator("offset"), 0;
001733  001937  // Syntax: t :=  iterator("offset");
001734  001938  // Usage : t :=  iterator(10);
001735  001939  // Notes : set the iterator size for ++/--
001736  001940  //       : The next postinc,postdec,preinc of predec will alter
001737  001941  //       : by the specified value.
001738  001942  //       : The offset will return to 1 after the next operation.
001739  001943        
001740  001944        
001741  001945        
001742  001946        
001743  001947  //------------------------------------------------------------------//
001744  001948  //         Touch Screen Function Prototypes
001745  001949  //------------------------------------------------------------------//
001746  001950        
001747  001951  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
001748  001952  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
001749  001953  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
001750  001954  // Notes : Specifies a new touch detect region on the screen
001751  001955  //       : such that only touch activity in that region will
001752  001956  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
001753  001957        
001754  001958  func touch_Set("mode"), 0;
001755  001959  // Syntax: touch_Set(mode);
001756  001960  // Usage : touch_Set(arg);
001757  001961  // Notes : Sets various Touch Screen related parameters
001758  001962  //       :
001759  001963  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
001760  001964  //       : touch_Set(TOUCH_ENABLE);
001761  001965  //       : Enables and initialises Touch Screen hardware
001762  001966  //       :
001763  001967  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
001764  001968  //       : touch_Set(TOUCH_DISABLE );
001765  001969  //       : Disables the Touch Screen
001766  001970  //       : Note: Touch Screen runs in the background and disabling
001767  001971  //       : it when not in use will free up extra resources
001768  001972  //       : such as 4DVM CPU cycles.
001769  001973  //       :
001770  001974  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
001771  001975  //       : touch_Set(TOUCH_REGIONDEFAULT);
001772  001976  //       : This will reset the current active region to default
001773  001977  //       : to the full screen without the application having to
001774  001978  //       : set a new active region for the full screen.
001775  001979  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
001776  001980  //       : that requre to be interfaced with an external pointing
001777  001981  //       : device, values that are poked into TOUCH_DRIVE will be
001778  001982  //       : read with the touch_Get() function)
001779  001983        
001780  001984        
001781  001985  func touch_Get("mode"), 1;
001782  001986  // Syntax: touch_Get(mode);
001783  001987  // Usage : arg1 := touch_Get(arg);
001784  001988  // Notes : Returns various Touch Screen parameters to caller
001785  001989  //       :
001786  001990  //       : mode = TOUCH_STATUS  (mode 0)
001787  001991  //       : var := touch_Get(TOUCH_STATUS);
001788  001992  //       : Returns the various states of the touch screen
001789  001993  //       : 0 = NOTOUCH
001790  001994  //       : 1 = TOUCH_PRESSED
001791  001995  //       : 2 = TOUCH_RELEASED
001792  001996  //       : 3 = TOUCH_MOVING
001793  001997  //       :
001794  001998  //       : mode = TOUCH_GETX   (mode 1)
001795  001999  //       : var := touch_Get(TOUCH_GETX);
001796  002000  //       : Returns the X coordinates of the touch
001797  002001  //       :
001798  002002  //       : mode = TOUCH_GETY   (mode 2)
001799  002003  //       : var := touch_Get(TOUCH_GETY);
001800  002004  //       : Returns the Y coordinates of the touch
001801  002005        
001802  002006  //------------------------------------------------------------------//
001803  002007  //        CTYPE Function Prototypes
001804  002008  //------------------------------------------------------------------//
001805  002009        
001806  002010  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
001807  002011  // Syntax: isdigit("char");
001808  002012  // Usage : Var := isdigit(ch);
001809  002013  // Notes : char specifies the ascii character for the test
001810  002014  //     : 0 : char is not an ascii digit.
001811  002015  //     : 1 : char is an ascii digit..
001812  002016  //     : Valid range is "0123456789"
001813  002017        
001814  002018  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
001815  002019  // Syntax: isxdigit("char");
001816  002020  // Usage : Var := isxdigit(ch);
001817  002021  // Notes : char specifies the ascii character for the test
001818  002022  //     : 0 : char is not an ascii hexadecimal digit.
001819  002023  //     : 1 : char is an ascii hexadecimal digit..
001820  002024  //     : Valid range is "0123456789ABCDEF"
001821  002025        
001822  002026  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
001823  002027  // Syntax: isupper("char");
001824  002028  // Usage : Var := isupper(ch);
001825  002029  // Notes : char specifies the ascii character for the test
001826  002030  //     : 0 : char is not an ascii upper-case letter.
001827  002031  //     : 1 : char is an ascii upper-case letter.
001828  002032  //     : Valid range is "ABCD....WXYZ"
001829  002033        
001830  002034  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
001831  002035  // Syntax: islower("char");
001832  002036  // Usage : Var := islower(ch);
001833  002037  // Notes : char specifies the ascii character for the test
001834  002038  //     : 0 : char is not an ascii lower-case letter.
001835  002039  //     : 1 : char is an ascii lower-case letter.
001836  002040  //     : Valid range is "abcd....wxyz"
001837  002041        
001838  002042  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
001839  002043  // Syntax: isalpha("char");
001840  002044  // Usage : Var := isalpha(ch);
001841  002045  // Notes : char specifies the ascii character for the test
001842  002046  //     : 0 : char is not an ascii lower or upper case letter.
001843  002047  //     : 1 : char is an ascii lower or upper case letter.
001844  002048  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
001845  002049        
001846  002050  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
001847  002051  // Syntax: isalnum("char");
001848  002052  // Usage : Var := isalnum(ch);
001849  002053  // Notes : char specifies the ascii character for the test
001850  002054  //     : 0 : char is not an ascii alphanumeric character.
001851  002055  //     : 1 : char is an ascii alphanumeric character.
001852  002056  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
001853  002057        
001854  002058  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
001855  002059  // Syntax: isprint("char");
001856  002060  // Usage : Var := isprint(ch);
001857  002061  // Notes : char specifies the ascii character for the test
001858  002062  //     : 0 : char is not a printable ascii character.
001859  002063  //     : 1 : char is a printable ascii character.
001860  002064  //     : Valid range is "0x20...0x7F"
001861  002065        
001862  002066  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
001863  002067  // Syntax: isspace("char");
001864  002068  // Usage : Var := isspace(ch);
001865  002069  // Notes : char specifies the ascii character for the test
001866  002070  //     : 0 : char is not a space type character.
001867  002071  //     : 1 : char is a space type character.
001868  002072  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
001869  002073        
001870  002074  //unformatted
001871  002075  func iswhite("char"), 1;    //
001872  002076  // Syntax: iswhite("char");
001873  002077  // Usage : Var := iswhite(ch);
001874  002078  // Notes : char specifies the ascii character for the test
001875  002079  //     : 0 : char is not a space or tab character.
001876  002080  //     : 1 : char is not a space or tab character.
001877  002081  //     : Valid range is space or tab
001878  002082        
001879  002083  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
001880  002084  // Syntax: toupper("char");
001881  002085  // Usage : Var := toupper(ch);
001882  002086  // Notes : char specifies the ascii character for the test
001883  002087  //     : "ABCD....XYZ" : if character is a lower case letter.
001884  002088  //     : char : if character is not a lower case letter.
001885  002089  //     : Valid range is "abcd....wxyz"
001886  002090        
001887  002091  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
001888  002092  // Syntax: tolower("char");
001889  002093  // Usage : Var := tolower(ch);
001890  002094  // Notes : char specifies the ascii character for the test
001891  002095  //     : "abcd....xyz" : if character is an upper case letter.
001892  002096  //     : char : if character is not an upper case letter.
001893  002097  //     : Valid range is "ABCD....WXYZ"
001894  002098        
001895  002099  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
001896  002100  // Syntax: LObyte(var);
001897  002101  // Usage : myVar := LObyte(myvar2);
001898  002102  // Notes : var specifies the user variable
001899  002103  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
001900  002104        
001901  002105  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
001902  002106  // Syntax: HIbyte(var);
001903  002107  // Usage : myVar := HIbyte(myvar2);
001904  002108  // Notes : var specifies the user variable
001905  002109  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
001906  002110        
001907  002111        
001908  002112  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
001909  002113  // Syntax: ByteSwap(var);
001910  002114  // Usage : myVar := ByteSwap(myvar2);
001911  002115  // Notes : var specifies the user variable
001912  002116  //     : Returns the endian swapped value of a 16 bit variable
001913  002117        
001914  002118        
001915  002119  //------------------------------------------------------------------//
001916  002120  //        Memory Allocation Function Prototypes
001917  002121  //------------------------------------------------------------------//
001918  002122        
001919  002123  func mem_Alloc("size"), 1;
001920  002124  // Syntax: mem_Alloc(bytesize);
001921  002125  // Usage : myvar := mem_Alloc(100);
001922  002126  // Notes : Allocate a block of memory to pointer myvar
001923  002127  //       : The allocated memory contains garbage but is a fast allocation.
001924  002128  //       : The block must later be released with mem_Free();
001925  002129  //       : returns 0 if function fails
001926  002130        
001927  002131  func mem_AllocV("size"), 1;
001928  002132  // Syntax: mem_AllocV(bytesize);
001929  002133  // Usage : myvar := mem_AllocV(100);
001930  002134  // Notes : Allocate a block of memory to pointer myvar
001931  002135  //       : The block of memory is filled with signature values
001932  002136  //       : the block starts with A5,5A then fills with incrementing
001933  002137  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
001934  002138  //       : This can be helpful when debugging
001935  002139  //       : The block must later be released with mem_Free();
001936  002140  //       : returns 0 if function fails
001937  002141        
001938  002142  func mem_AllocZ("size"), 1;
001939  002143  // Syntax: mem_AllocZ(bytesize);
001940  002144  // Usage : myvar := mem_AllocC(100);
001941  002145  // Notes : Allocate a zeroed block of memory to pointer myvar
001942  002146  //       : The block of memory is filled with zeroes
001943  002147  //       : The block must later be released with mem_Free();
001944  002148  //       : returns 0 if function fails
001945  002149        
001946  002150  func mem_Realloc("ptr", "size"), 1;
001947  002151  // Syntax: myvar := mem_Realloc("ptr", "size");
001948  002152  // Usage : myvar := mem_Realloc(ptr, size);
001949  002153  // Notes : The function may move the memory block to a new location,
001950  002154  //       : in which case the new location is returned.
001951  002155  //       : The content of the memory block is preserved up to the lesser
001952  002156  //       : of the new and old sizes, even if the block is moved.
001953  002157  //       : If the new size is larger, the value of the newly allocated
001954  002158  //       : portion is indeterminate. In case that ptr is NULL,
001955  002159  //       : the function behaves exactly as mem_Alloc, assigning a new block
001956  002160  //       : of size bytes and returning a pointer to the beginning of it.
001957  002161  //       : In case that the size is 0, the memory previously allocated in
001958  002162  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
001959  002163  //       : pointer is returned.
001960  002164        
001961  002165  func mem_Free("allocation"), 1;
001962  002166  // Syntax: myvar := mem_Free(allocation);
001963  002167  // Usage : myvar := mem_Free(myvar);
001964  002168  // Notes : De-allocate a block of memory previously created with
001965  002169  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
001966  002170  //       : returns 0 if function fails
001967  002171        
001968  002172  func mem_Heap(), 1;
001969  002173  // Syntax: myvar := mem_Heap();
001970  002174  // Usage : myvar := mem_Heap();
001971  002175  // Notes : returns bytecount available in heap
001972  002176  //       :
001973  002177        
001974  002178  func mem_Set("ptr","char","size"), 1;
001975  002179  // Syntax: mem_Set(ptr,char,bytesize);
001976  002180  // Usage : mem_Set(p, 'A', 100);
001977  002181  // Notes : fill a block of memory with a byte value
001978  002182  //       : returns ptr
001979  002183        
001980  002184  func mem_Copy("src", "dest", "bytecount"), 1;
001981  002185  // Syntax: myvar := mem_Copy(src, dest, bytesize);
001982  002186  // Usage : myvar := mem_Copy(p1, p2, 100);
001983  002187  // Notes : copy a word aligned block of memory from src to dest
001984  002188  //       : Note that count is a byte count, this facilitates
001985  002189  //       : copying word aligned byte arrays when using word
001986  002190  //       : aliggned packed strings.
001987  002191  //       : returns src
001988  002192        
001989  002193  func mem_Compare("ptr1","ptr2","count"), 1;
001990  002194  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
001991  002195  // Usage : myvar := mem_Compare(p1, p2, 100);
001992  002196  // Notes : compare blocks of memory at src, dest
001993  002197  //       : returns 0 if we have a match
001994  002198        
001995  002199  //------------------------------------------------------------------//
001996  002200  //        FAT16 Function Prototypes
001997  002201  //------------------------------------------------------------------//
001998  002202        
001999  002203  func file_Error(), 1;
002000  002204  // Syntax: myvar := file_Error();
002001  002205  // Usage : e := file_Error();
002002  002206  // Notes : return the most recent file error.
002003  002207  //       :
002004  002208        
002005  002209  func file_Count("filename"), 1;
002006  002210  // Syntax: count := file_Count("filename");
002007  002211  // Usage : count := file_Count("*.4dg");
002008  002212  // Notes : returns number of files found that match the criteria
002009  002213        
002010  002214  func file_Dir("filename"), 1;
002011  002215  // Syntax: count := file_Dir("filename");
002012  002216  // Usage : count := file_Dir("*.4dg");
002013  002217  // Notes : streams a string of filenames that agree with the search key
002014  002218  //       : returns number of files found that match the criteria
002015  002219        
002016  002220  func file_FindFirst("fname"), 1;
002017  002221  // Syntax: res := file_FindFirst("fname");
002018  002222  // Usage : if (file_FindFirst("*.4xe") ....
002019  002223  // Notes : returns true if at least 1 file exists
002020  002224  //       : that satisfies the file argument.
002021  002225  //       : Wildcards are usually used so if
002022  002226  //       : file_FindFirst returns true, further
002023  002227  //       : tests can be made using file_FindNext();
002024  002228  //       : to find all the files that match the
002025  002229  //       : wildcard class. Note that the stream behaviour
002026  002230  //       : is the same as file_Dir.
002027  002231  //       :
002028  002232        
002029  002233  func file_FindNext(), 1;
002030  002234  // Syntax: res := file_FindNext();
002031  002235  // Usage : while ((file_FindNext()) ....
002032  002236  // Notes : returns true if more file exists
002033  002237  //       : that satisfies the file argument
002034  002238  //       : that was given for  file_FindFirst.
002035  002239  //       : Wildcards must be used for
002036  002240  //       : file_FindFirst, else this function will
002037  002241  //       : always return zero as the only occurence
002038  002242  //       : will have already been found.
002039  002243  //       : Note that the stream behaviour
002040  002244  //       : is the same as file_Dir.
002041  002245  //       :
002042  002246        
002043  002247  func file_Exists("fname"), 1;
002044  002248  // Syntax: res := file_Exists("fname"),
002045  002249  // Usage : if(file_Exists("myfile") ....
002046  002250  // Notes : returns true if file exists
002047  002251  //       :
002048  002252        
002049  002253  func file_Open("fname", "mode"), 1;
002050  002254  // Syntax: handle := file_Open("fname","mode"),
002051  002255  // Usage : handle := file_Open("myfile.txt", 'r');
002052  002256  // Notes : returns handle if file exists
002053  002257  //       :
002054  002258        
002055  002259  func file_Close("handle"), 1;
002056  002260  // Syntax: res := file_Close("handle");
002057  002261  // Usage : res := file_Close(hnd1);
002058  002262  // Notes : returns true if file closed ok
002059  002263  //       :
002060  002264        
002061  002265  func file_Read("*dest", "size", "handle"), 1;
002062  002266  // Syntax: res := file_Read("*dest", "size", "handle"),
002063  002267  // Usage : res := file_Read(memblock,20,hnd1);
002064  002268  // Notes : returns number of characters read
002065  002269  //       : if "dest" is zero, data is read direct to GRAM window
002066  002270  //       :
002067  002271        
002068  002272        
002069  002273  func file_Seek("handle", "HiWord", "LoWord"), 1;
002070  002274  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
002071  002275  // Usage : res := file_Seek(hSource, 0, 0x1234);
002072  002276  // Notes : set file position to 0x00001234 (byte position 4660)
002073  002277  //       : for the file handle so subsequent data may be read
002074  002278  //       : from that position onwards with file_GetC(...),
002075  002279  //       : file_GetW(...) or file_GetS(...), or an image
002076  002280  //       : can be displayed with file_Image(...)
002077  002281  // Notes : returns true if ok, usually ignored
002078  002282        
002079  002283  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
002080  002284  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
002081  002285  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
002082  002286  // Notes : set file seek position to 123000
002083  002287  //       : for the file handle so subsequent data may be read
002084  002288  //       : from that record position onwards with file_GetC(...),
002085  002289  //       : file_GetW(...) or file_GetS(...), or an image
002086  002290  //       : can be displayed with file_Image(...)
002087  002291  // Notes : returns true if ok, usually ignored
002088  002292        
002089  002293  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
002090  002294  // Syntax: file_Tell("handle", &HiWord, &LoWord);
002091  002295  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
002092  002296  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
002093  002297  //       : returns true if function succeeded
002094  002298        
002095  002299  func file_Write("*source", "size", "handle"), 1;
002096  002300  // Syntax: res := fwrite("*source", "size", "handle"),
002097  002301  // Usage : res := fwrite(memblock, 20, hnd1);
002098  002302  // Notes : returns number of bytes written
002099  002303  //       :
002100  002304        
002101  002305  func file_Size("handle", "&HiWord", "&LoWord"), 1;
002102  002306  // Syntax: file_Size("handle", &HiWord, &LoWord);
002103  002307  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
002104  002308  // Notes : Reads the 32 bit file size and stores it into 2 variables.
002105  002309  //       : returns true if function succeeded
002106  002310        
002107  002311  func file_Image("x", "y", "handle"), 1;
002108  002312  // Syntax: file_Image(x, y, handle);
002109  002313  // Usage : file_Image(10, 10, hnd1);
002110  002314  // Notes : Display an image from a file at the current file position.
002111  002315  //       : The image is displayed at x,y (with respect to top left corner).
002112  002316  //       : If there is more than 1 image in the file, it can be
002113  002317  //       : accessed with file_Seek(...)
002114  002318        
002115  002319  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
002116  002320  // Syntax: file_ScreenCapture(x, y, w, h, handle);
002117  002321  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
002118  002322  // Notes : Save a image from screen to file at the current file position.
002119  002323  //       : The image can later be displayed with file_Image(...);
002120  002324  //       : The file may be opened in append mode to accumulate multiple
002121  002325  //       : images. Later, the images can be accessed with file_Seek(...);
002122  002326  //       : Note that the image will be sector aligned.
002123  002327  //       : All image headers must start on a sector boundary.
002124  002328  //       : The image is saved from x, y (with respect to top left corner)
002125  002329  //       : and the capture area is determined by "width" and "height".
002126  002330  //       : returns 0 if function succeeded
002127  002331        
002128  002332  func file_PutC("char","handle"), 1;
002129  002333  // Syntax: file_PutC("char", "handle");
002130  002334  // Usage : file_PutC('x', hndl);
002131  002335  // Notes : returns true if function succeeded
002132  002336        
002133  002337  func file_GetC("handle"), 1;
002134  002338  // Syntax: file_GetC("handle");
002135  002339  // Usage : mychar := fgetC("handle");
002136  002340  // Notes : returns next char from file
002137  002341        
002138  002342  func file_PutW("word","handle"), 1;
002139  002343  // Syntax: file_PutW("word","handle");
002140  002344  // Usage : file_PutW(0x1234, hndl);
002141  002345  // Notes : returns true if function succeeded
002142  002346        
002143  002347  func file_GetW("handle"), 1;
002144  002348  // Syntax: file_GetW("handle");
002145  002349  // Usage : myword := fgetW("handle");
002146  002350  // Notes : returns next word in file
002147  002351        
002148  002352  func file_PutS("*source", "handle"), 1;
002149  002353  // Syntax: res := file_Puts("*source", "handle"),
002150  002354  // Usage : res := file_Puts(mystring, hnd1);
002151  002355  // Notes : returns number of characters written
002152  002356  //       :
002153  002357        
002154  002358  func file_GetS("*string", "size", "handle"), 1;
002155  002359  // Syntax: res := file_Gets("*string", "size", "handle");
002156  002360  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
002157  002361  // Notes : get a string from a file
002158  002362  //       : returns pointer to string or null if failed.
002159  002363  //       : file_GetS(...) automatically appends a null-terminator to the data read.
002160  002364  //       : NB:- only reads up to "size-1" characters into "string"
002161  002365  //       : file_GetS(...) will stop reading when any of the following conditions are true:
002162  002366  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
002163  002367  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
002164  002368  //       : C] It reaches the end of file
002165  002369  //       : D] A read error occurs.
002166  002370        
002167  002371        
002168  002372  func file_Erase("fname"), 1;
002169  002373  // Syntax: res := file_Erase("fname");
002170  002374  // Usage : res := file_Erase("myfile.txt");
002171  002375  // Notes : returns true if successful
002172  002376  //       :
002173  002377        
002174  002378  func file_Rewind("handle"), 1;
002175  002379  // Syntax: res := file_Rewind("handle");
002176  002380  // Usage : res := file_Rewind(hnd1);
002177  002381  // Notes : returns true if file rewound ok (usually ignored)
002178  002382  //       : resets the file pointer the the beginning of the open file.
002179  002383        
002180  002384  func file_LoadFunction("fname.4xe"), 1;
002181  002385  // Syntax: res := file_LoadFunction("fname.4fn");
002182  002386  // Usage : myfunc := file_LoadFunction(myfuncname);
002183  002387  // Notes : Load a function or program from disk and
002184  002388  //       : return a function pointer to the allocation.
002185  002389  //       : The function can then be invoked just like any other
002186  002390  //       : function would be called via a function pointer.
002187  002391  //       : Parameters may be passed to it in a conventional way.
002188  002392  //       : The function may be discarded at any time when no
002189  002393  //       : longer required, thus freeing its memory resources.
002190  002394  //       : The loaded function can be discarded with mem_Free(..)
002191  002395  //       : eg:
002192  002396  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
002193  002397  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
002194  002398  //       : then elsewhere in your program:-
002195  002399  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
002196  002400  //       : if(res == QUIT_APPLICATION) goto exitApp;
002197  002401  //       : Later in your program, when popupWindow is no longer
002198  002402  //       : required for the application:-
002199  002403  //       : res := mem_Free(popupWindow);
002200  002404  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
002201  002405  //       : The callers stack is shared by the loaded function,
002202  002406  //       : however any global variables in the loaded function
002203  002407  //       : are private to that function.
002204  002408  //
002205  002409        
002206  002410  func file_Run("fname.4xe", "arglistptr"), 1;
002207  002411  // Syntax: res := file_Run("fname.4xe","arglistptr");
002208  002412  // Usage : res := file_Run(fname, argptr);
002209  002413  // Notes : current program releases any allocated memory but
002210  002414  //       : retains the stack and global memory.
002211  002415  //       : If arglistptr is 0, no arguments are passed, else
002212  002416  //       : arglist points to an array, the first element being
002213  002417  //       : the number of elements in the array.
002214  002418  //       : func 'main' in the called program accepts
002215  002419  //       : the arguments, if any. THe arguments can only
002216  002420  //       : be passed by value, no pointers or references can be
002217  002421  //       : used as all memory is cleared before the file
002218  002422  //       : is loaded. Refer to file_Exec and file_LoadFunction
002219  002423  //       : for functions that can pass by reference.
002220  002424        
002221  002425  func file_Exec("fname.4xe", "arglistptr"), 1;
002222  002426  // Syntax: res := file_Exec("fname.4xe","arglistptr");
002223  002427  // Usage : res := file_Exec("fname.4xe","arglistptr");
002224  002428  // Notes : returns like a function, current program
002225  002429  //       : calling program is kept active and control returns to it.
002226  002430  //       : If arglistptr is 0, no arguments are passed, else
002227  002431  //       : arglist points to an array, the first element being
002228  002432  //       : the number of elements in the array.
002229  002433  //       : func 'main' in the called program accepts the arguments.
002230  002434  //       : This function is similar to file_LoadFunction(...), however,
002231  002435  //       : the function argument list is passed by pointer, and
002232  002436  //       : the memory consumed by the function is released as
002233  002437  //       : soon as the function completes.
002234  002438        
002235  002439  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
002236  002440  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
002237  002441  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
002238  002442  // Notes : Reads a control file to create an image list.
002239  002443  //       : Returns NULL if function fails.
002240  002444  //       : Returns a handle (pointer to the memory allocation) to the
002241  002445  //       : image control list that has been created.
002242  002446  //       : "fname1" is the control list filename "*.dat"
002243  002447  //       : "fname2" is the image filename "*.gci"
002244  002448        
002245  002449  // Notes : This function Calculates the size of a chunk of memory required for
002246  002450  //       : a image list and populates it from the image control file ("*.dat")
002247  002451  //       : therefore, when imagelist is no longer required, you must de-allocate
002248  002452  //       : the image list memory by using eg:- mem_Free(hImagelist);
002249  002453  //       : to restore the heap.
002250  002454  //       :
002251  002455  //       : mode 0:- it is assumed that there is a graphics file with the
002252  002456  //       : file extension "fname2.gci". In this case, the images have been stored
002253  002457  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
002254  002458  //       : "fname1.dat" file are saved in the image control so that the image control
002255  002459  //       : can open the file (*.gci) and us file_Seek to get to the position of the
002256  002460  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
002257  002461  //       : mode 0 builds the image control quickly as it only scans the *.dat file
002258  002462  //       : for the file offsets and save them in the relevant entries in the image control.
002259  002463  //       : The penalty is that images take longer to find when displayed due to file_Seek
002260  002464  //       : overheads.
002261  002465  //
002262  002466  //       : mode 1:- it is assumed that there is a graphics file with the
002263  002467  //       : file extension "fname2.gci". In this case, the images have been stored
002264  002468  //       : in a FAT16 file concurrently, and the offset of the images are saved
002265  002469  //       : in the image control so that image file (*.gci) can be mapped to directly.
002266  002470  //       : The absolute cluster/sector is mapped so file seek does not need to be called
002267  002471  //       : internally. This means that there is no seek time penalty, however, the
002268  002472  //       : image list takes a lot longer to build, as all the seeking is done at control
002269  002473  //       : build time.
002270  002474        
002271  002475  //       : mode 2:- the graphics file with the is placed in a partitioned area
002272  002476  //       : In this case, the images have been stored in a in a known raw area of the FAT16
002273  002477  //       : disk, and the absolute address of the images are saved in the DAT file
002274  002478  //       : This is the fastest operation of the image control as there is no seeking
002275  002479  //       : or other disk activity taking place.
002276  002480        
002277  002481  func file_Mount(), 1;
002278  002482  // Syntax: r := file_Mount();
002279  002483  // Usage : r := file_Mount();
002280  002484  // Notes : Create a control block for FAT16 and mount the File System
002281  002485        
002282  002486  func file_Unmount(), 0;
002283  002487  // Syntax: file_Unmount();
002284  002488  // Usage : file_Unmount();
002285  002489  // Notes : release any control block and buffers for FAT16
002286  002490  //       : and unmount the File System
002287  002491        
002288  002492  func file_PlayWAV("fname1"), 1;
002289  002493  // Syntax: file_PlayWAV("fname1");
002290  002494  // Usage : file_PlayWAV("ding.wav");
002291  002495  // Notes : Play a wave file with filename "fname1"
002292  002496  //       : This function automatically grabs a chunk
002293  002497  //       : of memory for a file buffer, and a wave
002294  002498  //       : buffer. The minimum memory requirement is
002295  002499  //       : about 580 bytes for the disk io service and
002296  002500  //       : a minimum wave buffer size of 1024. The siz
002297  002501  //       : of the wave buffer allocation
002298  002502  //       : can be increased by the snd_BufSize function.
002299  002503  //       : The default size 1024 bytes.
002300  002504  //       : NB the memory is only required during the
002301  002505  //       : duration of play, and is automatically
002302  002506  //       : released while not in use.
002303  002507  //       : See the Sound Class services for other associated controls.
002304  002508  //       : If there are no errors, returns number of blocks to play (1 to 32767)
002305  002509  //       : If errors occured, the folling is returned
002306  002510  //       : -7  : Insufficient memory available for WAV buffer and file
002307  002511  //       : -6  : cant play this rate
002308  002512  //       : -5  : no data chunk found in first rsector
002309  002513  //       : -4  : no format data
002310  002514  //       : -3  : no wave chunk signature
002311  002515  //       : -2  : bad wave file format
002312  002516  //       : -1  : file not found
002313  002517        
002314  002518        
002315  002519        
002316  002520  //------------------------------------------------------------------//
002317  002521  //        Sound Class Services
002318  002522  //------------------------------------------------------------------//
002319  002523        
002320  002524  func snd_Volume("var"), 0;
002321  002525  // Syntax: snd_Volume("var");
002322  002526  // Usage : snd_Volume(30);
002323  002527  // Notes : set sound playback volume.  Var must
002324  002528  //       : be in the range from 8 (min volume)
002325  002529  //       : to 127 (max volume). If var is less
002326  002530  //       : than 8 volume is set to 8, and if
002327  002531  //       : var > 127 it is set to 127.
002328  002532        
002329  002533  func snd_Pitch("pitch"), 1;
002330  002534  // func snd_Pitch("freq"), 1;
002331  002535  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
002332  002536  // Notes : sets the samples playback rate to a different frequency
002333  002537  //       : The minimum value is 4khz
002334  002538  //       : Setting the pitch to zero restores the original sample rate
002335  002539  //       : Return value is the samples original sample rate.
002336  002540        
002337  002541  func snd_BufSize("var"), 0;
002338  002542  // Syntax: snd_BufSize("var");
002339  002543  // Usage : snd_BufSize(2);
002340  002544  // Notes : specify the a memory chunk size for the wavefile buffer.
002341  002545  //       : default size 1024 bytes.
002342  002546  //       : 0 = 1024 bytes (default)
002343  002547  //       : 1 = 2048 bytes
002344  002548  //       : 2 = 4096 bytes
002345  002549  //       : 3 = 8192 bytes
002346  002550        
002347  002551  func snd_Stop(), 0;
002348  002552  // Syntax: snd_Stop();
002349  002553  // Usage : snd_Stop();
002350  002554  // Notes : stop any sound that is playing, releasing
002351  002555  //       : buffers and closes any open wav file.
002352  002556        
002353  002557  func snd_Pause(), 0;
002354  002558  // Syntax: snd_Pause();
002355  002559  // Usage : snd_Pause();
002356  002560  // Notes : pauses any sound that is playing, does nothing
002357  002561  //       : until sound is resumed with snd_Continue().
002358  002562  //       : The sample cam be terminated with snd_Stop.
002359  002563  //       : buffers and closes any open wav file.
002360  002564        
002361  002565  func snd_Continue(), 0;
002362  002566  // Syntax: snd_Continue();
002363  002567  // Usage : snd_Continue();
002364  002568  // Notes : resume any sound that is paused by snd_Pause.
002365  002569        
002366  002570  func snd_Playing(), 1;
002367  002571  // Syntax: snd_Playing();
002368  002572  // Usage : r := snd_Playing();
002369  002573  // Notes : returns 0 if sound has finished playing,
002370  002574  //       : else return number of 512 byte blocks to go.
002371  002575        
002372  002576        
002373  002577        
002374  002578  //------------------------------------------------------------------//
002375  002579  //        String Class Services
002376  002580  //------------------------------------------------------------------//
002377  002581        
002378  002582  func str_Ptr("&var"), 1;
002379  002583  // Syntax: str_Ptr(&var);
002380  002584  // Usage : p := str_Ptr(&var);
002381  002585  // Notes : return a byte pointer to a word region
002382  002586        
002383  002587  func str_GetD("&ptr", "&var"), 1;
002384  002588  // Syntax: str_GetD(&ptr, &var);
002385  002589  // Usage : ok := str_GetD(&ptr, &var);
002386  002590  // Notes : convert number in a string to DWORD ( myvar[2] )
002387  002591  //       : returns true if function succeeds, advancing ptr
002388  002592        
002389  002593  func str_GetW("&ptr", "&var"), 1;
002390  002594  // Syntax: str_GetW(&ptr, &var);
002391  002595  // Usage : ok := str_GetW(&ptr, &var);
002392  002596  // Notes : convert number in a string to WORD ( myvar )
002393  002597  //       : returns true if function succeeds, advancing ptr
002394  002598        
002395  002599  func str_GetHexW("&ptr", "&var"), 1;
002396  002600  // Syntax: str_GetHexW(&ptr, &var);
002397  002601  // Usage : ok := str_GetHexW(&ptr, &var);
002398  002602  // Notes : convert HEX number in a string to WORD ( myvar )
002399  002603  //       : returns true if function succeeds, advancing ptr
002400  002604        
002401  002605  func str_GetC("&ptr", "&var"), 1;
002402  002606  // Syntax: str_GetC(&ptr, &var);
002403  002607  // Usage : ok := str_GetC(&ptr, &var);
002404  002608  // Notes : get a valid ascii char in a string to WORD ( myvar )
002405  002609  //       : returns true if function succeeds, advancing ptr
002406  002610        
002407  002611  func str_GetByte("ptr"), 1;
002408  002612  // Syntax: str_GetByte(ptr);
002409  002613  // Usage : myvar := str_GetByte(ptr);
002410  002614  // Notes : get a byte to myvar
002411  002615  //       : returns value
002412  002616        
002413  002617  func str_GetWord("ptr"), 1;
002414  002618  // Syntax: GetWord(ptr);
002415  002619  // Usage : GetWord(ptr);
002416  002620  // Notes : get a word to myvar
002417  002621  //       : returns value
002418  002622        
002419  002623  func str_PutByte("ptr","val"), 0;
002420  002624  // Syntax: str_PutByte(ptr);
002421  002625  // Usage : myvar := str_PutByte(ptr);
002422  002626  // Notes : put a byte at ptr
002423  002627  //       : returns value
002424  002628        
002425  002629  func str_PutWord("ptr","val"), 0;
002426  002630  // Syntax: str_PutWord("ptr","val");
002427  002631  // Usage : str_PutWord(p,100);
002428  002632  // Notes : put word 100 at current pointer location
002429  002633  //       : returns value
002430  002634        
002431  002635  func str_Match("&ptr", "*str"), 1;
002432  002636  // Syntax: str_Match(&ptr, *str);
002433  002637  // Usage : r := str_Match(&p, "hello");
002434  002638  // Notes : Case sensitive match
002435  002639  //       : returns true if function succeded, andvancing pointer to position past
002436  002640  //       : the matched item. Note that any whitespace characters are skipped
002437  002641  //       : in the source string prior to the test.
002438  002642        
002439  002643  func str_MatchI("&ptr", "*str"), 1;
002440  002644  // Syntax: str_MatchI(&ptr, *str);
002441  002645  // Usage : r := str_MatchI(&p, "hello");
002442  002646  // Notes : Case insensitive match
002443  002647  //       : returns true if function succeded, andvancing pointer to position past
002444  002648  //       : the matched item. Note that any whitespace characters are skipped
002445  002649  //       : in the source string prior to the test.
002446  002650        
002447  002651  func str_Find("&ptr", "*str"), 1;
002448  002652  // Syntax: str_Find(&ptr, *str);
002449  002653  // Usage : n := str_Find(&p, "hello");
002450  002654  // Notes : given the address of a pointer to a source string as the
002451  002655  //       : first argument, and a pointer to a test string as the second
002452  002656  //       : argument, attempt to find the position of the matching string
002453  002657  //       : in the source string. The test is performed with case sensitivity.
002454  002658  //       : return 0 if not found, else returns the address of the first
002455  002659  //       : character of the match. NB:- The source pointer is not altered.
002456  002660        
002457  002661  func str_FindI("&ptr", "*str"), 1;
002458  002662  // Syntax: str_Find(&ptr, *str);
002459  002663  // Usage : n := str_Find(&p, "hello");
002460  002664  // Notes : given the address of a pointer to a source string as the
002461  002665  //       : first argument, and a pointer to a test string as the second
002462  002666  //       : argument, attempt to find the position of the matching string
002463  002667  //       : in the source string. The test is performed with no case
002464  002668  //       : sensitivity, eg upper and lower case chars are accepted.
002465  002669  //       : return 0 if not found, else returns the address of the first
002466  002670  //       : character of the match. NB:- The source pointer is not altered.
002467  002671        
002468  002672  func str_Length("ptr"), 1;
002469  002673  // Syntax: str_Length(ptr);
002470  002674  // Usage : len := str_Ptr(mystring);
002471  002675  // Notes : return the length of a byte aligned string excluding terminator
002472  002676        
002473  002677  func str_Printf("&ptr", "*format"), 1;
002474  002678  // Syntax: str_Printf("&ptr", "*format");
002475  002679  // Usage : r := str_Printf(&p, "hello");
002476  002680  // Notes : refer to documentation
002477  002681  //       :
002478  002682        
002479  002683  func str_Cat("dest","src"), 1;
002480  002684  // Syntax: str_Append("&dest","&src");
002481  002685  // Usage : str_Append(&buf,"Hello");
002482  002686  // Notes : Appends a copy of the source string to the destination string.
002483  002687  //       : The terminating null character in destination is overwritten by
002484  002688  //       : the first character of source, and a new null-character is appended
002485  002689  //       : at the end of the new string formed by the concatenation of both in destination.
002486  002690  //       : returns destination.
002487  002691        
002488  002692  func str_CatN("dest","src","count"), 1;
002489  002693  // Syntax: str_Append("&dest","&src","count");
002490  002694  // Usage : str_Append(&buf,"Monday",3);
002491  002695  // Notes : Appends a copy of the source string to the destination string.
002492  002696  //       : The number of characters copied is limited by "count".
002493  002697  //       : The terminating null character in destination is overwritten by
002494  002698  //       : the first character of source, and a new null-character is appended
002495  002699  //       : at the end of the new string formed by the concatenation of both in destination.
002496  002700  //       : returns destination.
002497  002701        
002498  002702        
002499  002703  func sys_StoreTouchCalibration(), 1;
002500  002704  // Syntax: sys_StoreTouchCalibration();
002501  002705  // Usage : r := sys_StoreTouchCalibration();
002502  002706  // Notes : Store the touch calibration values in non-volatile memory.
002503  002707  //       : Returns true if the values have been accepted and stored,
002504  002708  //       : else returns false if write could not be performed, or
002505  002709  //       : touch calibration values are improbable.
002506  002710  //       : The values that are stored are obtained from:-
002507  002711  //     : TOUCH_XMINCAL             78  // touch calibration value
002508  002712  //     : TOUCH_YMINCAL             79  // touch calibration value
002509  002713  //       : TOUCH_XMAXCAL             80  // touch calibration value
002510  002714  //       : TOUCH_YMAXCAL             81  // touch calibration value
002511  002715  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
002512  002716  //       : This function is not supported on uVGA, Capicitive touch
002513  002717  //       : and 4.3" resistive touch modules.
002514  002718        
002515  002719        
002516  002720  func unicode_page("charbeg","charend","charoffset"), 1;
002517  002721  // Syntax: unicode_page("charbeg","charend","charoffset");
002518  002722  // Usage : eg:  F_Traditional_0x20_0xFF
002519  002723  // Notes : After selecting a unicode image control with txt_FontID,
002520  002724  //       : this function is called to set the required font within the
002521  002725  //       : unicode set. The file "Unicode.inc" contains wrappers for
002522  002726  //       : this function, and it is not normally called directly.
002523  002727  //       : Returns count of characters in the set.
002524  002728  //       : Refer to "Unicode.inc" for further information.
002525  002729        
002526  002730        
002527  002731  func EVE_SP(), 1;
002528  002732  // Syntax: EVE_SP();
002529  002733  // Usage : eg:  print(EVE_SP());
002530  002734  // Notes : Used for debugging to assess the current stack level,
002531  002735  //       : mainly for checking stack leaks
002532  002736        
002533  002737  func EVE_SSIZE(), 1;
002534  002738  // Syntax: EVE_SSIZE();
002535  002739  // Usage : eg:  print(EVE_SSIZE());
002536  002740  // Notes : Used to get the stack size,
002537  002741  //       : mainly for debugging purposes
002538  002742        
002539  002743        
002540  002744  // uVGAII extended functions
002541  002745  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
002542  002746  // Syntax: disp_Sync(line);
002543  002747  // Usage : disp_Sync(480);
002544  002748  // Notes : Waits till the hardware gets to a certain line.
002545  002749  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
002546  002750  //       : Some experimentation may be needed to find an optimum line for disp_Sync
002547  002751  //       : depending on the graphics operation. The higher the value, the slower
002548  002752  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
002549  002753  //       : within the vertical retrace period) where it will just 'hang up' stopping the
002550  002754  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
002551  002755  //       : be slowest (as its actually right at the end of the blanking period) and 508
002552  002756  //       : will cause a hangup situation as it is above the highes scanline value.
002553  002757  //       : Currently, this function is only supported on displays with SSD1963 driver.
002554  002758        
002555  002759        
002556  002760  // New functions added to PmmC v2.8
002557  002761  //================================================================
002558  002762  func CY(), 1;
002559  002763  // Syntax: CY();
002560  002764  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
002561  002765  //       : print(myvar," "CY(),"\n");           // carry = 1
002562  002766  // Notes : This function returns the carry status of an
002563  002767  // unsigned overflow from any 16 or 32bit additions or sutractions.
002564  002768  //================================================================
002565  002769        
002566  002770        
002567  002771  //================================================================
002568  002772  func str_ByteMove("src", "dest", "count"), 1;
002569  002773  // func str_ByteMove("src", "dest", "count"), 1;
002570  002774  // Syntax   : str_ByteMove(src, dest, bytecount);
002571  002775  // Input    : STR *source points to byte aligned source.
002572  002776  //          : STR *dest   points to byte aligned destination.
002573  002777  //          : VAR count   number of bytes to transfer.
002574  002778  // Usage    : nextpos := str_ByteMove(s, d, 100);
002575  002779  // Notes    : copy bytes from "src" to "dest", stopping only
002576  002780  //          : when "count" is exhausted.
002577  002781  //          : No terminator is appended, it is purely a
002578  002782  //          : byte copy, and any zeroes encountered will
002579  002783  //          : also be copied.
002580  002784  // Returns  : returns a pointer to the end of the destination
002581  002785  //          : (which is "dest" + "count")
002582  002786  //================================================================
002583  002787        
002584  002788        
002585  002789  //================================================================
002586  002790  func str_Copy("dest", "src"), 1;
002587  002791  // Syntax   : str_Copy(dest, src);
002588  002792  // Input    : STR *dest   points to byte aligned destination.
002589  002793  //          : STR *source points to byte aligned source.
002590  002794  // Usage    : nextplace := str_Copy(d, s);
002591  002795  // Notes    : copy a string from "src" to "dest", stopping only
002592  002796  //          : when the end of source string "src" is encountered
002593  002797  //          : (0x00 terminator).
002594  002798  //          : The terminator is always appended, even if "src" is
002595  002799  //          : an empty string.
002596  002800  // Returns  : returns a pointer to the 0x00 string terminator at
002597  002801  //          : end of "dest" (which is "dest" + str_Length(src); )
002598  002802  //================================================================
002599  002803        
002600  002804  //================================================================
002601  002805  func str_CopyN("dest", "src", "count"), 1;
002602  002806  // Syntax   : str_CopyN(dest, src, bytecount);
002603  002807  // Input    : STR *dest   points to byte aligned destination.
002604  002808  //          : STR *source points to byte aligned source.
002605  002809  //          : VAR count   max number of chars to copy.
002606  002810  // Usage    : nextplace := str_CopyN(d, s, 100);
002607  002811  // Notes    : copy a string from "src" to "dest", stopping only
002608  002812  //          : when "count" is exhausted, or end of source
002609  002813  //          : string "str" is encountered (0x00 string terminator).
002610  002814  //          : The terminator is always appended, even if
002611  002815  //          : "count" is zero, or "src" is a null string.
002612  002816  // Returns  : returns a pointer to the 0x00 string terminator
002613  002817  //          : (which is "dest" + whatever was copied)
002614  002818  //================================================================
002615  002819        
002616  002820  //================================================================
002617  002821  func umul_1616("&res32", "val1", "val2"), 1;
002618  002822  // Syntax   : umul_1616(&res32, varA, varB);
002619  002823  // Input    : DWORD *result   points to 32bit result register.
002620  002824  //          : VAR   val1  16bit register or constant
002621  002825  //          : VAR   val2  16bit register or constant
002622  002826  // Usage    : var res32[2];
002623  002827  //          : umul_1616(&res32, myvar, 50000);
002624  002828  // Notes    : performs an unsigned multiply of 2 x 16bit values
002625  002829  //          : placing the 32bit result in a 2 word array.
002626  002830  // Returns  : the pointer to the 32bit result.
002627  002831  //          : carry and overflow are not affected.
002628  002832  //================================================================
002629  002833        
002630  002834  //================================================================
002631  002835  func uadd_3232("&res32", "&val1", "&val2"), 1;
002632  002836  // Syntax   : cmp_3232(&res32, &varA, &varB);
002633  002837  // Input    : DWORD *res32 points to optional result (or zero for compare)
002634  002838  //          : DWORD *val1 points to 32bit augend
002635  002839  //          : DWORD *val2 points to 32bit addend
002636  002840  // Usage    : var res32[2];
002637  002841  //          : res := cmp_3232(res32, val1, val2);
002638  002842  // Notes    : performs an unsigned addition of 2 x 32bit values
002639  002843  //          : placing the 32bit result in a 2 word array.
002640  002844  // Returns  : returns 1 on 32bit unsigned overflow (carry).
002641  002845  //          ; carry flag is also set on 32bit unsigned overflow
002642  002846  //          ; and can be read with the CY() function.
002643  002847  //================================================================
002644  002848        
002645  002849  //================================================================
002646  002850  func usub_3232("&res32", "&val1", "&val2"), 1;
002647  002851  // Syntax   : cmp_3232(&res32, &varA, &varB);
002648  002852  // Input    : DWORD *res32 points to optional result (or zero for compare)
002649  002853  //          : DWORD *val1 points to first 32bit minuend
002650  002854  //          : DWORD *val2 points to 32bit subtrahend
002651  002855  // Usage    : var res32[2];
002652  002856  //          : res := cmp_3232(res32, val1, val2);
002653  002857  // Notes    : performs an unsigned subtraction of 2 x 32bit values
002654  002858  //          : placing the 32bit result in a 2 word array.
002655  002859  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
002656  002860  //          ; carry flag is also set on 32bit unsigned underflow
002657  002861  //          ; and can be read with the CY() function.
002658  002862  //================================================================
002659  002863        
002660  002864  //================================================================
002661  002865  func ucmp_3232("&val1", "&val2"), 1;
002662  002866  // Syntax   : cmp_3232(&varA, &varB);
002663  002867  // Input    : DWORD *val1 points to 32bit minuend
002664  002868  //          : DWORD *val2 points to 32bit sutrahend
002665  002869  // Usage    : res := cmp_3232(val1, val2);
002666  002870  // Notes    : performs an unsigned comparison of 2 x 32bit values.
002667  002871  //          : The result of the subtraction is returned.
002668  002872  // Returns  : 0  if equal
002669  002873  //          : 1  if val1 > val2
002670  002874  //          : -1 if val1 < val2
002671  002875  //          : This function does not affect the carry flag.
002672  002876  //================================================================
002673  002877        
002674  002878  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v3.8
002675  002879  // Syntax: disp_Disconnect();                  New in v3.8
002676  002880  // Usage : disp_Disconnect();
002677  002881  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
002678  002882  //       : its lowest possible power consumption. Use after disabling peripheral power
002679  002883  //       : to ensure the minimal power usage by the display.
002680  002884  //       : disp_Init() should be used to reinitialise the display.
002681  002885        
002682  002886  func reserved(), 0;                            
002683  002887        
002684  002888  func sys_DeepSleep("units"), 1;
002685  002889  // Syntax: t := sys_DeepSleep("units");       New in v3.8
002686  002890  // Usage : t := sys_DeepSleep(10);
002687  002891  // Notes : sets the display and processor into lowest power mode for a period of time.
002688  002892  //       : When returning from DeepSleep the display should be reinitialised
002689  002893  //       : with disp_Init().
002690  002894  //       : Touching the touch screen will also wake from sleep.
002691  002895  //       : Returns remaining sleep units.
002692  002896        
002693  002897  //------------------------------------------------------------------//
002694  002898  // CONSTANTS
002695  002899  //------------------------------------------------------------------//
002696  002900        
002697  002901  // generic constants
002698  002902  #CONST
002699  002911  #END
002700  002912        
002701  002913  //------------------------------------------------------------------------------
002702  002914  // Pin related constants
002703  002915  //------------------------------------------------------------------------------
002704  002916  #CONST
002705  002934  #END
002706  002935        
002707  002936  //------------------------------------------------------------------------------
002708  002937  //gfx_Set() related constants
002709  002938  //------------------------------------------------------------------------------
002710  002939  #CONST
002711  002956  #END
002712  002957        
002713  002958        
002714  002959  //gfx_Get() related constants
002715  002960  #CONST
002716  002969  #END
002717  002970        
002718  002971        
002719  002972        
002720  002973        
002721  002974  #CONST
002722  002987  #END
002723  002988        
002724  002989        
002725  002990  #CONST
002726  003013  #END
002727  003014        
002728  003015  //------------------------------------------------------------------------------
002729  003016  //txt_Set() related constants
002730  003017  //------------------------------------------------------------------------------
002731  003018  #CONST
002732  003037  #END
002733  003038        
002734  003039        
002735  003040        
002736  003041  //------------------------------------------------------------------------------
002737  003042  //txt_Set() related arguments
002738  003043  // NB:- FONT4 must be inherited if required,
002739  003044  // eg #inherit "FONT4.fnt"
002740  003045  //------------------------------------------------------------------------------
002741  003046  #CONST
002742  003058  #END
002743  003059        
002744  003060        
002745  003061        
002746  003062  //touch_Set() related constants
002747  003063  #CONST
002748  003067  #END
002749  003068        
002750  003069  //touch_Get() related constants
002751  003070  #CONST
002752  003078  #END
002753  003079        
002754  003080  // image control offset related constants
002755  003081  #CONST
002756  003088  #END
002757  003089        
002758  003090  // image attribute flags
002759  003091  // for img_SetAttributes(...) and img_ClearAttributes(...)
002760  003092  #CONST
002761  003106  #END
002762  003107        
002763  003108        
002764  003109  #constant ALL 0xFFFF // argument for img_xxx functions to update all images
002765  003109  #constant ALL 0xFFFF // argument for img_xxx functions to update all images
002766  003110        
002767  003111  // image control entry offsets
002768  003112  #CONST
002769  003127  #END
002770  003128        
002771  003129  #CONST
002772  003147  #END
002773  003148        
002774  003149        
002775  003150        
002776  003151        
002777  003152  #CONST
002778  003172  #END
002779  003173        
002780  003174        
002781  003175        
002782  003176  // timer control  related constants
002783  003177  #CONST
002784  003186  #END
002785  003187        
002786  003188  // I2C timing related constants
002787  003189  #CONST
002788  003193  #END
002789  003194        
002790  003195        
002791  003196  // spi_Init(...)  mode arguments
002792  003197  #CONST
002793  003207  #END
002794  003208        
002795  003209  //------------------------------------------------------------------------------
002796  003210  // system WORD variables accesible with peekW and pokeW or pointer access
002797  003211  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
002798  003212  // can also be accessed with peekW and pokeW
002799  003213  //------------------------------------------------------------------------------
002800  003214        
002801  003215  #CONST
002802  003309  #END
002803  003310        
002804  003311  //------------------------------------------------------------------------------
002805  003312  // FILEIO Error Code Constants
002806  003313  //------------------------------------------------------------------------------
002807  003314  #CONST
002808  003340  #END
002809  003341        
002810  003342  //==================================================================================================
002811  003343        
002812  003344        
002813  003345        
002814  000013      #ENDIF
002815  000014        
002816  000015        
002817  000016      #CONST
002818  000072      #END
002819  000073        
002820  000074        
002821  000075  //===========================================================================================
002822  000076        
002823  000077        
002824  000002        
002825  000003  // generated 20/01/2015 12:54:54
002826  000004        
002827  000005  #MODE RUNFLASH
002828  000006        
file C:\Program Files\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

002829  000007  #inherit "4DGL_16bitColours.fnc"
002830  000007  #inherit "4DGL_16bitColours.fnc"
002831  000004  */
002832  000005        
002833  000006        
002834  000007        
002835  000008  #CONST
002836  000149  #END
002837  000150        
002838  000008        
file C:\Program Files\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

002839  000009  #inherit "VisualConst.inc"
002840  000009  #inherit "VisualConst.inc"
002841  000001  // Line Patterns
002842  000002  #constant  LPCOARSE    0xF0F0
002843  000002  #constant  LPCOARSE    0xF0F0
002844  000003  #constant  LPMEDIUM    0x3333
002845  000003  #constant  LPMEDIUM    0x3333
002846  000004  #constant  LPFINE      0xAAAA
002847  000004  #constant  LPFINE      0xAAAA
002848  000005  #constant  LPDASHDOT   0x03CF
002849  000005  #constant  LPDASHDOT   0x03CF
002850  000006  #constant  LPDASHDOTDOT 0x0333
002851  000006  #constant  LPDASHDOTDOT 0x0333
002852  000007  #constant  LPSOLID     0x0000
002853  000007  #constant  LPSOLID     0x0000
002854  000010        
002855  000011        
file F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1Const.inc

002856  000012  #inherit "RepRap_Touchv1Const.inc"
002857  000012  #inherit "RepRap_Touchv1Const.inc"
002858  000001  // File generated 20/01/2015 12:54:33
002859  000002  // Warning! This is a generated file, any manual changes will be
002860  000003  // lost during the next generation.
002861  000004        
002862  000005  #constant  Strings0Count    1
002863  000005  #constant  Strings0Count    1
002864  000006  #constant  Strings0Size     28
002865  000006  #constant  Strings0Size     28
002866  000007  #constant  Strings1Count    0
002867  000007  #constant  Strings1Count    0
002868  000008  #constant  Strings1Size     1
002869  000008  #constant  Strings1Size     1
002870  000009  #constant  Strings3Count    1
002871  000009  #constant  Strings3Count    1
002872  000010  #constant  Strings3Size     18
002873  000010  #constant  Strings3Size     18
002874  000011  #constant  Strings13Count    1
002875  000011  #constant  Strings13Count    1
002876  000012  #constant  Strings13Size     25
002877  000012  #constant  Strings13Size     25
002878  000013  #constant  Strings9Count    1
002879  000013  #constant  Strings9Count    1
002880  000014  #constant  Strings9Size     25
002881  000014  #constant  Strings9Size     25
002882  000015  #constant  Strings20Count    1
002883  000015  #constant  Strings20Count    1
002884  000016  #constant  Strings20Size     25
002885  000016  #constant  Strings20Size     25
002886  000017  #constant  Strings4Count    1
002887  000017  #constant  Strings4Count    1
002888  000018  #constant  Strings4Size     25
002889  000018  #constant  Strings4Size     25
002890  000019  #constant  Strings6Count    1
002891  000019  #constant  Strings6Count    1
002892  000020  #constant  Strings6Size     26
002893  000020  #constant  Strings6Size     26
002894  000021  #constant  Strings2Count    0
002895  000021  #constant  Strings2Count    0
002896  000022  #constant  Strings2Size     1
002897  000022  #constant  Strings2Size     1
002898  000023  #constant  Strings7Count    0
002899  000023  #constant  Strings7Count    0
002900  000024  #constant  Strings7Size     1
002901  000024  #constant  Strings7Size     1
002902  000025  #constant  Strings8Count    1
002903  000025  #constant  Strings8Count    1
002904  000026  #constant  Strings8Size     25
002905  000026  #constant  Strings8Size     25
002906  000027  #constant  Strings10Count    0
002907  000027  #constant  Strings10Count    0
002908  000028  #constant  Strings10Size     1
002909  000028  #constant  Strings10Size     1
002910  000029  #constant  Strings11Count    1
002911  000029  #constant  Strings11Count    1
002912  000030  #constant  Strings11Size     25
002913  000030  #constant  Strings11Size     25
002914  000031  #constant  Strings12Count    1
002915  000031  #constant  Strings12Count    1
002916  000032  #constant  Strings12Size     19
002917  000032  #constant  Strings12Size     19
002918  000033  #constant  Strings14Count    1
002919  000033  #constant  Strings14Count    1
002920  000034  #constant  Strings14Size     23
002921  000034  #constant  Strings14Size     23
002922  000035  #constant  Strings16Count    1
002923  000035  #constant  Strings16Count    1
002924  000036  #constant  Strings16Size     31
002925  000036  #constant  Strings16Size     31
002926  000037  #constant  Strings15Count    1
002927  000037  #constant  Strings15Count    1
002928  000038  #constant  Strings15Size     24
002929  000038  #constant  Strings15Size     24
002930  000039  #constant  Strings17Count    1
002931  000039  #constant  Strings17Count    1
002932  000040  #constant  Strings17Size     33
002933  000040  #constant  Strings17Size     33
002934  000041  #constant  Strings18Count    1
002935  000041  #constant  Strings18Count    1
002936  000042  #constant  Strings18Size     32
002937  000042  #constant  Strings18Size     32
002938  000043  #constant  Strings19Count    1
002939  000043  #constant  Strings19Count    1
002940  000044  #constant  Strings19Size     29
002941  000044  #constant  Strings19Size     29
002942  000045  #constant  Strings21Count    1
002943  000045  #constant  Strings21Count    1
002944  000046  #constant  Strings21Size     30
002945  000046  #constant  Strings21Size     30
002946  000047  #constant  Strings22Count    1
002947  000047  #constant  Strings22Count    1
002948  000048  #constant  Strings22Size     20
002949  000048  #constant  Strings22Size     20
002950  000049  #constant  Strings23Count    1
002951  000049  #constant  Strings23Count    1
002952  000050  #constant  Strings23Size     15
002953  000050  #constant  Strings23Size     15
002954  000051  #constant  Strings24Count    1
002955  000051  #constant  Strings24Count    1
002956  000052  #constant  Strings24Size     26
002957  000052  #constant  Strings24Size     26
002958  000053  #constant  Strings25Count    1
002959  000053  #constant  Strings25Count    1
002960  000054  #constant  Strings25Size     10
002961  000054  #constant  Strings25Size     10
002962  000055  #constant  Strings26Count    1
002963  000055  #constant  Strings26Count    1
002964  000056  #constant  Strings26Size     10
002965  000056  #constant  Strings26Size     10
002966  000057  #constant  Strings27Count    1
002967  000057  #constant  Strings27Count    1
002968  000058  #constant  Strings27Size     11
002969  000058  #constant  Strings27Size     11
002970  000059  // object indexes into ImageControl
002971  000060  #CONST
002972  000208  #END
002973  000209        
002974  000210  #constant  Strings5Size     0
002975  000210  #constant  Strings5Size     0
002976  000211  #constant  Strings5StartH   0
002977  000211  #constant  Strings5StartH   0
002978  000212  #constant  Strings5StartL   0
002979  000212  #constant  Strings5StartL   0
002980  000213  #constant  Strings0StartH   0x0
002981  000213  #constant  Strings0StartH   0x0
002982  000214  #constant  Strings0StartL   0x0
002983  000214  #constant  Strings0StartL   0x0
002984  000215  #constant  Strings1StartH   0x0
002985  000215  #constant  Strings1StartH   0x0
002986  000216  #constant  Strings1StartL   0x200
002987  000216  #constant  Strings1StartL   0x200
002988  000217  #constant  Strings3StartH   0x0
002989  000217  #constant  Strings3StartH   0x0
002990  000218  #constant  Strings3StartL   0x400
002991  000218  #constant  Strings3StartL   0x400
002992  000219  #constant  Strings13StartH   0x0
002993  000219  #constant  Strings13StartH   0x0
002994  000220  #constant  Strings13StartL   0x600
002995  000220  #constant  Strings13StartL   0x600
002996  000221  #constant  Strings9StartH   0x0
002997  000221  #constant  Strings9StartH   0x0
002998  000222  #constant  Strings9StartL   0x800
002999  000222  #constant  Strings9StartL   0x800
003000  000223  #constant  Strings20StartH   0x0
003001  000223  #constant  Strings20StartH   0x0
003002  000224  #constant  Strings20StartL   0xA00
003003  000224  #constant  Strings20StartL   0xA00
003004  000225  #constant  Strings4StartH   0x0
003005  000225  #constant  Strings4StartH   0x0
003006  000226  #constant  Strings4StartL   0xC00
003007  000226  #constant  Strings4StartL   0xC00
003008  000227  #constant  Strings6StartH   0x0
003009  000227  #constant  Strings6StartH   0x0
003010  000228  #constant  Strings6StartL   0xE00
003011  000228  #constant  Strings6StartL   0xE00
003012  000229  #constant  Strings2StartH   0x0
003013  000229  #constant  Strings2StartH   0x0
003014  000230  #constant  Strings2StartL   0x1000
003015  000230  #constant  Strings2StartL   0x1000
003016  000231  #constant  Strings7StartH   0x0
003017  000231  #constant  Strings7StartH   0x0
003018  000232  #constant  Strings7StartL   0x1200
003019  000232  #constant  Strings7StartL   0x1200
003020  000233  #constant  Strings8StartH   0x0
003021  000233  #constant  Strings8StartH   0x0
003022  000234  #constant  Strings8StartL   0x1400
003023  000234  #constant  Strings8StartL   0x1400
003024  000235  #constant  Strings10StartH   0x0
003025  000235  #constant  Strings10StartH   0x0
003026  000236  #constant  Strings10StartL   0x1600
003027  000236  #constant  Strings10StartL   0x1600
003028  000237  #constant  Strings11StartH   0x0
003029  000237  #constant  Strings11StartH   0x0
003030  000238  #constant  Strings11StartL   0x1800
003031  000238  #constant  Strings11StartL   0x1800
003032  000239  #constant  Strings12StartH   0x0
003033  000239  #constant  Strings12StartH   0x0
003034  000240  #constant  Strings12StartL   0x1A00
003035  000240  #constant  Strings12StartL   0x1A00
003036  000241  #constant  Strings14StartH   0x0
003037  000241  #constant  Strings14StartH   0x0
003038  000242  #constant  Strings14StartL   0x1C00
003039  000242  #constant  Strings14StartL   0x1C00
003040  000243  #constant  Strings16StartH   0x0
003041  000243  #constant  Strings16StartH   0x0
003042  000244  #constant  Strings16StartL   0x1E00
003043  000244  #constant  Strings16StartL   0x1E00
003044  000245  #constant  Strings15StartH   0x0
003045  000245  #constant  Strings15StartH   0x0
003046  000246  #constant  Strings15StartL   0x2000
003047  000246  #constant  Strings15StartL   0x2000
003048  000247  #constant  Strings17StartH   0x0
003049  000247  #constant  Strings17StartH   0x0
003050  000248  #constant  Strings17StartL   0x2200
003051  000248  #constant  Strings17StartL   0x2200
003052  000249  #constant  Strings18StartH   0x0
003053  000249  #constant  Strings18StartH   0x0
003054  000250  #constant  Strings18StartL   0x2400
003055  000250  #constant  Strings18StartL   0x2400
003056  000251  #constant  Strings19StartH   0x0
003057  000251  #constant  Strings19StartH   0x0
003058  000252  #constant  Strings19StartL   0x2600
003059  000252  #constant  Strings19StartL   0x2600
003060  000253  #constant  Strings21StartH   0x0
003061  000253  #constant  Strings21StartH   0x0
003062  000254  #constant  Strings21StartL   0x2800
003063  000254  #constant  Strings21StartL   0x2800
003064  000255  #constant  Strings22StartH   0x0
003065  000255  #constant  Strings22StartH   0x0
003066  000256  #constant  Strings22StartL   0x2A00
003067  000256  #constant  Strings22StartL   0x2A00
003068  000257  #constant  Strings23StartH   0x0
003069  000257  #constant  Strings23StartH   0x0
003070  000258  #constant  Strings23StartL   0x2C00
003071  000258  #constant  Strings23StartL   0x2C00
003072  000259  #constant  Strings24StartH   0x0
003073  000259  #constant  Strings24StartH   0x0
003074  000260  #constant  Strings24StartL   0x2E00
003075  000260  #constant  Strings24StartL   0x2E00
003076  000261  #constant  Strings25StartH   0x0
003077  000261  #constant  Strings25StartH   0x0
003078  000262  #constant  Strings25StartL   0x3000
003079  000262  #constant  Strings25StartL   0x3000
003080  000263  #constant  Strings26StartH   0x0
003081  000263  #constant  Strings26StartH   0x0
003082  000264  #constant  Strings26StartL   0x3200
003083  000264  #constant  Strings26StartL   0x3200
003084  000265  #constant  Strings27StartH   0x0
003085  000265  #constant  Strings27StartH   0x0
003086  000266  #constant  Strings27StartL   0x3400
003087  000266  #constant  Strings27StartL   0x3400
003088  000267  #IFNOT EXISTS NOGLOBALS
003089  000268  var disk, hndl ;
003090  000269  #ENDIF
003091  000013        
file C:\Program Files\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

003092  000014  #inherit "CLPrintStrings.inc"
003093  000014  #inherit "CLPrintStrings.inc"
003094  000001  func PrintStrings(var ID, var *msgid, var String)
003095  000002      var StringID, i, ch, offs32[2], res32[2];
003096  000003      StringID := oStringss[1+ID] ;
003097  000004      if (String)
003098  000005          stringsCV[ID] := -1 ;
003099  000006      else
003100  000007          stringsCV[ID] := msgid ;
003101  000008      endif
003102  000009      if ((StringID == -1) || (*(StringID + STForm) != curform)) return ;
003103  000010      txt_FontID(hFonts[ID]) ;
003104  000011      txt_Attributes(*(StringID + STFontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
003105  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
003106  000013        
003107  000014      if (*(StringID + STTransparent))
003108  000015          gfx_RectangleFilled(*(StringID + STx1), *(StringID + STy1), *(StringID + STx2), *(StringID + STy2), *(StringID + STBGColor));
003109  000016      else if (formBGcol[curform] != BGIMAGE)
003110  000017          gfx_RectangleFilled(*(StringID + STx1), *(StringID + STy1), *(StringID + STx2), *(StringID + STy2), formBGcol[curform]);
003111  000018      else
003112  000019          gfx_ClipWindow(*(StringID + STx1), *(StringID + STy1), *(StringID + STx2), *(StringID + STy2)) ;
003113  000020          gfx_Clipping(ON) ;
003114  000021          img_Show(hndl,formstidx[curform]) ;
003115  000022          gfx_Clipping(OFF) ;
003116  000023        
003117  000024      endif
003118  000025        
003119  000026      txt_FGcolour(*(StringID + STFGColor)) ;
003120  000027      txt_BGcolour(*(StringID + STBGColor)) ;
003121  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
003122  000029        
003123  000030      gfx_MoveTo(*(StringID + STx1) , *(StringID + STy1)) ;
003124  000031        
003125  000032      if (String)
003126  000033          i := 0 ;
003127  000034          ch := msgid[i++] ;
003128  000035          while (ch != 0)
003129  000036              putch(ch) ;
003130  000037              ch := msgid[i++] ;
003131  000038          wend
003132  000039      else
003133  000040          umul_1616(offs32, *(StringID + STSize), msgid);
003134  000041          res32[1] := *(StringID + STStartH) ;
003135  000042          res32[0] := *(StringID + STStartL) ;
003136  000043          uadd_3232(res32,res32,offs32) ;
003137  000044          file_Seek(hstrings, res32[1], res32[0]);
003138  000045          repeat
003139  000046              if (*(StringID + STAnsi))
003140  000047                  ch := file_GetC(hstrings) ;
003141  000048              else
003142  000049                  ch := file_GetW(hstrings) ;
003143  000050              endif
003144  000051              putch(ch) ;
003145  000052          until (ch == 0) ;
003146  000053      endif
003147  000054        
003148  000055  endfunc
003149  000056        
003150  000015        
003151  000016  #constant IPDatasize 22
003152  000016  #constant IPDatasize 22
003153  000017        
003154  000018  #CONST
003155  000020  #END
003156  000021        
003157  000022  #CONST
003158  000122  #END
003159  000123        
003160  000367  #END
3161  1422
3162  1423
3163  1424
3164  1425
3165  1426
3166  1427
3167  1428
3168  1429
3169  142A
3170  142B
3171  142C
3172  142D
3173  142E
3174  142F
3175  1430
3176  1431
3177  1432
3178  1433
3179  1434
3180  1435
3181  1436
3182  1437
3183  1438
3184  1439
3185  143A
3186  143B
3187  143C
3188  143D
3189  143E
3190  143F
3191  1440
3192  1441
3193  1442
3194  1443
3195  1444
3196  1445
3197  1446
3198  1447
3199  1448
3200  1449
3201  144A
3202  144B
3203  144C
3204  144D
3205  144E
3206  144F
3207  1450
3208  1451
3209  1452
3210  1453
3211  1454
3212  1455
3213  1456
3214  1457
3215  1458
3216  1459
3217  145A
3218  145B
3219  145C
3220  145D
3221  145E
3222  145F
3223  1460
3224  1461
3225  1462
3226  1463
3227  1464
3228  1465
3229  1466
3230  1467
3231  1468
3232  1469
3233  146A
3234  146B
3235  146C
3236  146D
3237  146E
3238  146F
3239  1470
3240  1471
3241  1472
3242  1473
3243  1474
3244  1475
3245  1476
3246  1477
3247  1478
3248  1479
3249  147A
3250  147B
3251  147C
3252  147D
3253  147E
3254  147F
3255  1480
3256  1481
3257  1482
3258  1483
3259  1484
3260  1485
3261  1486
3262  1487
3263  1488
3264  1489
3265  148A
3266  148B
3267  148C
3268  148D
3269  148E
3270  148F
3271  1490
3272  1491
3273  1492
3274  1493
3275  1494
3276  1495
3277  1496
3278  1497
3279  1498
3280  1499
3281  149A
3282  149B
3283  149C
3284  149D
3285  149E
3286  149F
3287  14A0
3288  14A1
3289  14A2
3290  14A3
3291  14A4
3292  14A5
3293  14A6
3294  14A7
3295  14A8
3296  14A9
3297  14AA
3298  14AB
3299  14AC
3300  14AD
3301  14AE
3302  14AF
3303  14B0
3304  14B1
3305  14B2
3306  14B3
3307  14B4
3308  14B5
3309  14B6
3310  14B7
3311  14B8
3312  14B9
3313  14BA
3314  14BB
3315  14BC
3316  14BD
3317  14BE
3318  14BF
3319  14C0
3320  14C1
3321  14C2
3322  14C3
3323  14C4
3324  14C5
3325  14C6
3326  14C7
3327  14C8
3328  14C9
3329  14CA
3330  14CB
3331  14CC
3332  14CD
3333  14CE
3334  14CF
3335  14D0
3336  14D1
3337  14D2
3338  14D3
3339  14D4
3340  14D5
3341  14D6
3342  14D7
3343  14D8
3344  14D9
3345  14DA
3346  14DB
3347  14DC
3348  14DD
3349  14DE
3350  14DF
3351  14E0
3352  14E1
3353  14E2
3354  14E3
3355  14E4
3356  14E5
3357  14E6
3358  14E7
3359  14E8
3360  14E9
3361  14EA
3362  14EB
3363  14EC
3364  14ED
3365  14EE
3366  14EF
3367  14F0
3368  14F1
3369  14F2
3370  14F3
3371  14F4
3372  14F5
3373  14F6
3374  14F7
3375  14F8
3376  14F9
3377  14FA
3378  14FB
3379  14FC
3380  14FD
3381  14FE
3382  14FF
3383  1500
3384  1501
3385  1502
3386  1503
3387  1504
3388  1505
3389  1506
3390  1507
3391  1508
3392  1509
3393  150A
3394  150B
3395  150C
3396  150D
3397  150E
3398  150F
3399  1510
3400  1511
3401  1512
3402  1513
3403  1514
3404  1515
3405  1516
3406  1517
3407  1518
3408  1519
3409  151A
3410  151B
3411  151C
3412  151D
3413  151E
3414  151F
3415  1520
3416  1521
3417  1522
3418  1523
3419  1524
3420  1525
3421  1526
3422  1527
3423  1528
3424  1529
3425  152A
3426  152B
3427  152C
3428  152D
3429  152E
3430  152F
3431  1530
3432  1531
3433  1532
3434  1533
3435  1534
3436  1535
3437  1536
3438  1537
3439  1538
3440  1539
3441  153A
3442  153B
3443  153C
3444  153D
3445  153E
3446  153F
3447  1540
3448  1541
3449  1542
3450  1543
3451  1544
3452  1545
3453  1546
3454  1547
3455  1548
3456  1549
3457  154A
3458  154B
3459  154C
3460  154D
3461  154E
3462  154F
3463  1550
3464  1551
3465  1552
3466  1553
3467  1554
3468  1555
3469  1556
3470  1557
3471  1558
3472  1559
3473  155A
3474  155B
3475  155C
3476  155D
3477  155E
3478  155F
3479  1560
3480  1561
3481  1562
3482  1563
3483  1564
3484  1565
3485  1566
3486  1567
3487  1568
3488  1569
3489  156A
3490  156B
3491  156C
3492  156D
3493  156E
3494  156F
3495  1570
3496  1571
3497  1572
3498  1573
3499  1574
3500  1575
3501  1576
3502  1577
3503  1578
3504  1579
3505  157A
3506  157B
3507  157C
3508  157D
3509  157E
3510  157F
3511  1580
3512  1581
3513  1582
3514  1583
3515  1584
3516  1585
3517  1586
3518  1587
3519  1588
3520  1589
3521  158A
3522  158B
3523  158C
3524  158D
3525  158E
3526  158F
3527  1590
3528  1591
3529  1592
3530  1593
3531  1594
3532  1595
3533  1596
3534  1597
3535  1598
3536  1599
3537  159A
3538  159B
3539  159C
3540  159D
3541  159E
3542  159F
3543  15A0
3544  15A1
3545  15A2
3546  15A3
3547  15A4
3548  15A5
3549  15A6
3550  15A7
3551  15A8
3552  15A9
3553  15AA
3554  15AB
3555  15AC
3556  15AD
3557  15AE
3558  15AF
3559  15B0
3560  15B1
3561  15B2
3562  15B3
3563  15B4
3564  15B5
3565  15B6
3566  15B7
3567  15B8
3568  15B9
3569  15BA
3570  15BB
3571  15BC
3572  15BD
3573  15BE
3574  15BF
3575  15C0
3576  15C1
3577  15C2
3578  15C3
3579  15C4
3580  15C5
3581  15C6
3582  15C7
3583  15C8
3584  15C9
3585  15CA
3586  15CB
3587  15CC
3588  15CD
3589  15CE
3590  15CF
3591  15D0
3592  15D1
3593  15D2
3594  15D3
3595  15D4
3596  15D5
3597  15D6
3598  15D7
3599  15D8
3600  15D9
3601  15DA
3602  15DB
3603  15DC
3604  15DD
3605  15DE
3606  15DF
3607  15E0
3608  15E1
3609  15E2
3610  15E3
3611  15E4
3612  15E5
3613  15E6
3614  15E7
3615  15E8
3616  15E9
3617  15EA
3618  15EB
3619  15EC
3620  15ED
3621  15EE
3622  15EF
3623  15F0
3624  15F1
3625  15F2
3626  15F3
3627  15F4
3628  15F5
3629  15F6
3630  15F7
3631  15F8
3632  15F9
3633  15FA
3634  15FB
3635  15FC
3636  15FD
3637  15FE
3638  15FF
3639  1600
3640  1601
3641  1602
3642  1603
3643  1604
3644  1605
3645  1606
3646  1607
3647  1608
3648  1609
3649  160A
3650  160B
3651  160C
3652  160D
3653  160E
3654  160F
3655  1610
3656  1611
3657  1612
3658  1613
3659  1614
3660  1615
3661  1616
3662  1617
3663  1618
3664  1619
3665  161A
3666  161B
3667  161C
3668  161D
3669  161E
3670  161F
3671  1620
3672  1621
3673  1622
3674  1623
3675  1624
3676  1625
3677  1626
3678  1627
3679  1628
3680  1629
3681  162A
3682  162B
3683  162C
3684  162D
3685  162E
3686  162F
3687  1630
3688  1631
3689  1632
3690  1633
3691  1634
3692  1635
3693  1636
3694  1637
3695  1638
3696  1639
3697  163A
3698  163B
3699  163C
3700  163D
3701  163E
3702  163F
3703  1640
3704  1641
3705  1642
3706  1643
3707  1644
3708  1645
3709  1646
3710  1647
3711  1648
3712  1649
3713  164A
3714  164B
3715  164C
3716  164D
3717  164E
3718  164F
3719  1650
3720  1651
3721  1652
3722  1653
3723  1654
3724  1655
3725  1656
3726  1657
3727  1658
3728  1659
3729  165A
3730  165B
3731  165C
3732  165D
3733  165E
3734  165F
3735  1660
3736  1661
3737  1662
3738  1663
3739  1664
3740  1665
3741  1666
3742  1667
3743  1668
3744  1669
3745  166A
3746  166B
3747  166C
3748  166D
3749  166E
3750  166F
3751  1670
3752  1671
3753  1672
3754  1673
3755  1674
3756  1675
3757  1676
3758  1677
3759  1678
3760  1679
3761  167A
3762  167B
3763  167C
3764  167D
3765  167E
3766  167F
3767  1680
3768  1681
3769  1682
3770  1683
3771  1684
3772  1685
3773  1686
3774  1687
3775  1688
3776  1689
3777  168A
3778  168B
3779  168C
3780  168D
3781  168E
3782  168F
3783  1690
3784  1691
3785  1692
3786  1693
3787  1694
3788  1695
3789  1696
3790  1697
3791  1698
3792  1699
3793  169A
3794  169B
3795  169C
3796  169D
3797  169E
3798  169F
3799  16A0
3800  16A1
3801  16A2
3802  16A3
3803  16A4
3804  16A5
3805  16A6
3806  16A7
3807  16A8
3808  16A9
3809  16AA
3810  16AB
3811  16AC
3812  16AD
3813  16AE
3814  16AF
3815  16B0
3816  16B1
3817  16B2
3818  16B3
3819  16B4
3820  16B5
3821  16B6
3822  16B7
3823  16B8
3824  16B9
3825  16BA
3826  16BB
3827  16BC
3828  16BD
3829  16BE
3830  16BF
3831  16C0
3832  16C1
3833  16C2
3834  16C3
3835  16C4
3836  16C5
3837  16C6
3838  16C7
3839  16C8
3840  16C9
3841  16CA
3842  16CB
3843  16CC
3844  16CD
3845  16CE
3846  16CF
3847  16D0
3848  16D1
3849  16D2
3850  16D3
3851  16D4
3852  16D5
3853  16D6
3854  16D7
3855  16D8
3856  16D9
3857  16DA
3858  16DB
3859  16DC
3860  16DD
3861  16DE
3862  16DF
3863  16E0
3864  16E1
3865  16E2
3866  16E3
3867  16E4
3868  16E5
3869  16E6
3870  16E7
3871  16E8
3872  16E9
3873  16EA
3874  16EB
3875  16EC
3876  16ED
3877  16EE
3878  16EF
3879  16F0
3880  16F1
3881  16F2
3882  16F3
3883  16F4
3884  16F5
3885  16F6
3886  16F7
3887  16F8
3888  16F9
3889  16FA
3890  16FB
3891  16FC
3892  16FD
3893  16FE
3894  16FF
3895  1700
3896  1701
3897  1702
3898  1703
3899  1704
3900  1705
3901  1706
3902  1707
3903  1708
3904  1709
3905  170A
3906  170B
3907  170C
3908  170D
3909  170E
3910  170F
3911  1710
3912  1711
3913  1712
3914  1713
3915  1714
3916  1715
3917  1716
3918  1717
3919  1718
3920  1719
3921  171A
3922  171B
3923  171C
3924  171D
3925  171E
3926  171F
3927  1720
3928  1721
3929  1722
3930  1723
3931  1724
3932  1725
3933  1726
3934  1727
3935  1728
3936  1729
3937  172A
3938  172B
3939  172C
3940  172D
3941  172E
3942  172F
3943  1730
3944  1731
3945  1732
3946  1733
3947  1734
3948  1735
3949  1736
3950  1737
3951  1738
3952  1739
3953  173A
3954  173B
3955  173C
3956  173D
3957  173E
3958  173F
3959  1740
3960  1741
3961  1742
3962  1743
3963  1744
3964  1745
3965  1746
3966  1747
3967  1748
3968  1749
3969  174A
3970  174B
3971  174C
3972  174D
3973  174E
3974  174F
3975  1750
3976  1751
3977  1752
3978  1753
3979  1754
3980  1755
3981  1756
3982  1757
3983  1758
3984  1759
3985  175A
3986  175B
3987  175C
3988  175D
3989  175E
3990  175F
3991  1760
3992  1761
3993  1762
3994  1763
3995  1764
3996  1765
3997  1766
3998  1767
3999  1768
4000  1769
4001  176A
4002  176B
4003  176C
4004  176D
4005  176E
4006  176F
4007  1770
4008  1771
4009  1772
4010  1773
4011  1774
4012  1775
4013  1776
4014  1777
4015  1778
4016  1779
4017  177A
4018  177B
4019  177C
4020  177D
4021  177E
4022  177F
4023  1780
4024  1781
4025  1782
4026  1783
4027  1784
4028  1785
4029  1786
4030  1787
4031  1788
4032  1789
4033  178A
4034  178B
4035  178C
4036  178D
4037  178E
4038  178F
4039  1790
4040  1791
4041  1792
4042  1793
4043  1794
4044  1795
4045  1796
4046  1797
4047  1798
4048  1799
4049  179A
4050  179B
4051  179C
4052  179D
4053  179E
4054  179F
4055  17A0
4056  17A1
4057  17A2
4058  17A3
4059  17A4
4060  17A5
4061  17A6
4062  17A7
4063  17A8
4064  17A9
4065  17AA
4066  17AB
4067  17AC
4068  17AD
4069  17AE
4070  17AF
4071  17B0
4072  17B1
4073  17B2
4074  17B3
4075  17B4
4076  17B5
4077  17B6
4078  17B7
4079  17B8
4080  17B9
4081  17BA
4082  17BB
4083  17BC
4084  17BD
4085  17BE
4086  17BF
4087  17C0
4088  17C1
4089  17C2
4090  17C3
4091  17C4
4092  17C5
4093  17C6
4094  17C7
4095  17C8
4096  17C9
4097  17CA
4098  17CB
4099  17CC
4100  17CD
4101  17CE
4102  17CF
4103  17D0
4104  17D1
4105  17D2
4106  17D3
4107  17D4
4108  17D5
4109  17D6
4110  17D7
4111  17D8
4112  17D9
4113  17DA
4114  17DB
4115  17DC
4116  17DD
4117  17DE
4118  17DF
4119  17E0
4120  17E1
4121  17E2
4122  17E3
4123  17E4
4124  17E5
4125  17E6
4126  17E7
4127  17E8
4128  17E9
4129  17EA
4130  17EB
4131  17EC
4132  17ED
4133  17EE
4134  17EF
4135  17F0
4136  17F1
4137  17F2
4138  17F3
4139  17F4
4140  17F5
4141  17F6
4142  17F7
4143  17F8
4144  17F9
4145  17FA
4146  17FB
4147  17FC
4148  17FD
4149  17FE
4150  17FF
4151  1800
4152  1801
4153  1802
4154  1803
4155  1804
4156  1805
4157  1806
4158  1807
4159  1808
4160  1809
4161  180A
4162  180B
4163  180C
4164  180D
4165  180E
4166  180F
4167  1810
4168  1811
4169  1812
4170  1813
4171  1814
4172  1815
4173  1816
4174  1817
4175  1818
4176  1819
4177  181A
4178  181B
4179  181C
4180  181D
4181  181E
4182  181F
4183  1820
4184  1821
4185  1822
4186  1823
4187  1824
4188  1825
4189  1826
4190  1827
4191  1828
4192  1829
4193  182A
4194  182B
4195  182C
4196  182D
4197  182E
4198  182F
4199  1830
4200  1831
4201  1832
4202  1833
4203  1834
4204  1835
4205  1836
4206  1837
4207  1838
4208  1839
4209  183A
4210  183B
4211  183C
4212  183D
4213  183E
4214  183F
4215  1840
4216  1841
4217  1842
4218  1843
4219  1844
4220  1845
4221  1846
4222  1847
4223  1848
4224  1849
4225  184A
4226  184B
4227  184C
4228  184D
4229  184E
4230  184F
4231  1850
4232  1851
4233  1852
4234  1853
4235  1854
4236  1855
4237  1856
4238  1857
4239  1858
4240  1859
4241  185A
4242  185B
4243  185C
4244  185D
4245  185E
4246  185F
4247  1860
4248  1861
4249  1862
4250  1863
4251  1864
4252  1865
4253  1866
4254  1867
4255  1868
4256  1869
4257  186A
4258  186B
4259  186C
4260  186D
4261  186E
4262  186F
4263  1870
4264  1871
4265  1872
4266  1873
4267  1874
4268  1875
4269  1876
4270  1877
4271  1878
4272  1879
4273  187A
4274  187B
4275  187C
4276  187D
4277  187E
4278  187F
4279  1880
4280  1881
4281  1882
4282  1883
4283  1884
4284  1885
4285  1886
4286  1887
4287  1888
4288  1889
4289  188A
4290  188B
4291  188C
4292  188D
4293  188E
4294  188F
4295  1890
4296  1891
4297  1892
4298  1893
4299  1894
4300  1895
4301  1896
4302  1897
4303  1898
4304  1899
4305  189A
4306  189B
4307  189C
4308  189D
4309  189E
4310  189F
4311  18A0
4312  18A1
4313  18A2
4314  18A3
4315  18A4
4316  18A5
4317  18A6
4318  18A7
4319  18A8
4320  18A9
4321  18AA
4322  18AB
4323  18AC
4324  18AD
4325  18AE
4326  18AF
4327  18B0
4328  18B1
4329  18B2
4330  18B3
4331  18B4
4332  18B5
4333  18B6
4334  18B7
4335  18B8
4336  18B9
4337  18BA
4338  18BB
4339  18BC
4340  18BD
4341  18BE
4342  18BF
4343  18C0
4344  18C1
4345  18C2
4346  18C3
4347  18C4
4348  18C5
4349  18C6
4350  18C7
4351  18C8
4352  18C9
4353  18CA
4354  18CB
4355  18CC
4356  18CD
4357  18CE
4358  18CF
4359  18D0
4360  18D1
4361  18D2
4362  18D3
4363  18D4
4364  18D5
4365  18D6
4366  18D7
4367  18D8
4368  18D9
4369  18DA
4370  18DB
4371  18DC
4372  18DD
4373  18DE
4374  18DF
4375  18E0
4376  18E1
4377  18E2
4378  18E3
4379  18E4
4380  18E5
4381  18E6
4382  18E7
4383  18E8
4384  18E9
4385  18EA
4386  18EB
4387  18EC
4388  18ED
4389  18EE
4390  18EF
4391  18F0
4392  18F1
4393  18F2
4394  18F3
4395  18F4
4396  18F5
4397  18F6
4398  18F7
4399  18F8
4400  18F9
4401  18FA
4402  18FB
4403  18FC
4404  18FD
4405  18FE
4406  18FF
4407  1900
4408  1901
4409  1902
4410  1903
4411  1904
4412  1905
4413  1906
4414  1907
4415  1908
4416  1909
4417  190A
4418  190B
4419  190C
4420  190D
4421  190E
4422  190F
4423  1910
4424  1911
4425  1912
4426  1913
4427  1914
4428  1915
4429  1916
4430  1917
4431  1918
4432  1919
4433  191A
4434  191B
4435  191C
4436  191D
4437  191E
4438  191F
4439  1920
4440  1921
4441  1922
4442  1923
4443  1924
4444  1925
4445  1926
4446  1927
4447  1928
4448  1929
4449  192A
4450  192B
4451  192C
4452  192D
4453  192E
4454  192F
4455  1930
4456  1931
4457  1932
4458  1933
4459  1934
4460  1935
4461  1936
4462  1937
4463  1938
4464  1939
4465  193A
4466  193B
4467  193C
4468  193D
4469  193E
4470  193F
4471  1940
4472  1941
4473  1942
4474  1943
4475  1944
4476  1945
4477  1946
4478  1947
4479  1948
4480  1949
4481  194A
4482  194B
4483  194C
4484  194D
4485  194E
4486  194F
4487  1950
4488  1951
4489  1952
4490  1953
4491  1954
4492  1955
4493  1956
4494  1957
4495  1958
4496  1959
4497  195A
4498  195B
4499  195C
4500  195D
4501  195E
4502  195F
4503  1960
4504  1961
4505  1962
4506  1963
4507  1964
4508  1965
4509  1966
4510  1967
4511  1968
4512  1969
4513  196A
4514  196B
4515  196C
4516  196D
4517  196E
4518  196F
4519  1970
4520  1971
4521  1972
4522  1973
4523  1974
4524  1975
4525  1976
4526  1977
4527  1978
4528  1979
4529  197A
4530  197B
4531  197C
4532  197D
4533  197E
4534  197F
4535  1980
4536  1981
4537  1982
4538  1983
4539  1984
4540  1985
4541  1986
4542  1987
4543  1988
4544  1989
4545  198A
4546  198B
4547  198C
4548  198D
4549  198E
4550  198F
4551  1990
4552  1991
4553  1992
4554  1993
4555  1994
4556  1995
4557  1996
4558  1997
4559  1998
4560  1999
4561  199A
4562  199B
4563  199C
4564  199D
4565  199E
4566  199F
4567  19A0
4568  19A1
4569  19A2
4570  19A3
4571  19A4
4572  19A5
4573  19A6
4574  19A7
4575  19A8
4576  19A9
4577  19AA
4578  19AB
4579  19AC
4580  19AD
4581  19AE
4582  19AF
4583  19B0
4584  19B1
4585  19B2
4586  19B3
4587  19B4
4588  19B5
4589  19B6
4590  19B7
4591  19B8
4592  19B9
4593  19BA
4594  19BB
4595  19BC
4596  19BD
4597  19BE
4598  19BF
4599  19C0
4600  19C1
4601  19C2
4602  19C3
4603  19C4
4604  19C5
4605  19C6
4606  19C7
4607  19C8
4608  19C9
4609  19CA
4610  19CB
4611  19CC
4612  19CD
4613  19CE
4614  19CF
4615  19D0
4616  19D1
4617  19D2
4618  19D3
4619  19D4
4620  19D5
4621  19D6
4622  19D7
4623  19D8
4624  19D9
4625  19DA
4626  19DB
4627  19DC
4628  19DD
4629  19DE
4630  19DF
4631  19E0
4632  19E1
4633  19E2
4634  19E3
4635  19E4
4636  19E5
4637  19E6
4638  19E7
4639  19E8
4640  19E9
4641  19EA
4642  19EB
4643  19EC
4644  19ED
4645  19EE
4646  19EF
4647  19F0
4648  19F1
4649  19F2
4650  19F3
4651  19F4
4652  19F5
4653  19F6
4654  19F7
4655  19F8
4656  19F9
4657  19FA
4658  19FB
4659  19FC
4660  19FD
4661  19FE
4662  19FF
4663  1A00
4664  1A01
4665  1A02
4666  1A03
4667  1A04
4668  1A05
4669  1A06
4670  1A07
4671  1A08
4672  1A09
4673  1A0A
4674  1A0B
4675  1A0C
4676  1A0D
4677  1A0E
4678  1A0F
4679  1A10
4680  1A11
4681  1A12
4682  1A13
4683  1A14
4684  1A15
4685  1A16
4686  1A17
4687  1A18
4688  1A19
4689  1A1A
4690  1A1B
4691  1A1C
4692  1A1D
4693  1A1E
4694  1A1F
4695  1A20
4696  1A21
4697  1A22
4698  1A23
4699  1A24
4700  1A25
4701  1A26
4702  1A27
4703  1A28
4704  1A29
4705  1A2A
4706  1A2B
4707  1A2C
4708  1A2D
4709  1A2E
4710  1A2F
4711  1A30
4712  1A31
4713  1A32
4714  1A33
4715  1A34
4716  1A35
4717  1A36
4718  1A37
4719  1A38
4720  1A39
4721  1A3A
4722  1A3B
4723  1A3C
4724  1A3D
4725  1A3E
4726  1A3F
4727  1A40
4728  1A41
4729  1A42
4730  1A43
4731  1A44
4732  1A45
4733  1A46
4734  1A47
4735  1A48
4736  1A49
4737  1A4A
4738  1A4B
4739  1A4C
4740  1A4D
4741  1A4E
4742  1A4F
4743  1A50
4744  1A51
4745  1A52
4746  1A53
4747  1A54
4748  1A55
4749  1A56
4750  1A57
4751  1A58
4752  1A59
4753  1A5A
4754  1A5B
4755  1A5C
4756  1A5D
4757  1A5E
4758  1A5F
4759  1A60
4760  1A61
4761  1A62
4762  1A63
4763  1A64
4764  1A65
4765  1A66
4766  1A67
4767  1A68
4768  1A69
4769  1A6A
4770  1A6B
4771  1A6C
4772  1A6D
4773  1A6E
4774  1A6F
4775  1A70
4776  1A71
4777  1A72
4778  1A73
4779  1A74
4780  1A75
4781  1A76
4782  1A77
4783  1A78
4784  1A79
4785  1A7A
4786  1A7B
4787  1A7C
4788  1A7D
4789  1A7E
4790  1A7F
4791  1A80
4792  1A81
4793  1A82
4794  1A83
4795  1A84
4796  1A85
4797  1A86
4798  1A87
4799  1A88
4800  1A89
4801  1A8A
4802  1A8B
4803  1A8C
4804  1A8D
4805  1A8E
4806  1A8F
4807  1A90
4808  1A91
4809  1A92
4810  1A93
4811  1A94
4812  1A95
4813  1A96
4814  1A97
4815  1A98
4816  1A99
4817  1A9A
4818  1A9B
4819  1A9C
4820  1A9D
4821  1A9E
4822  1A9F
4823  1AA0
4824  1AA1
4825  1AA2
4826  1AA3
4827  1AA4
4828  1AA5
4829  1AA6
4830  1AA7
4831  1AA8
4832  1AA9
4833  1AAA
4834  1AAB
4835  1AAC
4836  1AAD
4837  1AAE
4838  1AAF
4839  1AB0
4840  1AB1
4841  1AB2
4842  1AB3
4843  1AB4
4844  1AB5
4845  1AB6
4846  1AB7
4847  1AB8
4848  1AB9
4849  1ABA
4850  1ABB
4851  1ABC
4852  1ABD
4853  1ABE
4854  1ABF
4855  1AC0
4856  1AC1
4857  1AC2
4858  1AC3
4859  1AC4
4860  1AC5
4861  1AC6
4862  1AC7
4863  1AC8
4864  1AC9
4865  1ACA
4866  1ACB
4867  1ACC
4868  1ACD
4869  1ACE
4870  1ACF
4871  1AD0
4872  1AD1
4873  1AD2
4874  1AD3
4875  1AD4
4876  1AD5
4877  1AD6
4878  1AD7
4879  1AD8
4880  1AD9
4881  1ADA
4882  1ADB
4883  1ADC
4884  1ADD
4885  1ADE
4886  1ADF
4887  1AE0
4888  1AE1
4889  1AE2
4890  1AE3
4891  1AE4
4892  1AE5
4893  1AE6
4894  1AE7
4895  1AE8
4896  1AE9
4897  1AEA
4898  1AEB
4899  1AEC
4900  1AED
4901  1AEE
4902  1AEF
4903  1AF0
4904  1AF1
4905  1AF2
4906  1AF3
4907  1AF4
4908  1AF5
4909  1AF6
4910  1AF7
4911  1AF8
4912  1AF9
4913  1AFA
4914  1AFB
4915  1AFC
4916  1AFD
4917  1AFE
4918  1AFF
4919  1B00
4920  1B01
4921  1B02
4922  1B03
4923  1B04
4924  1B05
4925  1B06
4926  1B07
4927  1B08
4928  1B09
4929  1B0A
4930  1B0B
4931  1B0C
4932  1B0D
4933  1B0E
4934  1B0F
4935  1B10
4936  1B11
4937  1B12
4938  1B13
4939  1B14
4940  1B15
4941  1B16
4942  1B17
4943  1B18
4944  1B19
4945  1B1A
4946  1B1B
4947  1B1C
4948  1B1D
4949  1B1E
4950  1B1F
4951  1B20
4952  1B21
4953  1B22
4954  1B23
4955  1B24
4956  1B25
4957  1B26
4958  1B27
4959  1B28
4960  1B29
4961  1B2A
4962  1B2B
4963  1B2C
4964  1B2D
4965  1B2E
4966  1B2F
4967  1B30
4968  1B31
4969  1B32
4970  1B33
4971  1B34
4972  1B35
4973  1B36
4974  1B37
4975  1B38
4976  1B39
4977  1B3A
4978  1B3B
4979  1B3C
4980  1B3D
4981  1B3E
4982  1B3F
4983  1B40
4984  1B41
4985  1B42
4986  1B43
4987  1B44
4988  1B45
4989  1B46
4990  1B47
4991  1B48
4992  1B49
4993  1B4A
4994  1B4B
4995  1B4C
4996  1B4D
4997  1B4E
4998  1B4F
4999  1B50
5000  1B51
5001  1B52
5002  1B53
5003  1B54
5004  1B55
5005  1B56
5006  1B57
5007  1B58
5008  1B59
5009  1B5A
5010  1B5B
5011  1B5C
5012  1B5D
5013  1B5E
5014  1B5F
5015  1B60
5016  1B61
5017  1B62
5018  1B63
5019  1B64
5020  1B65
5021  1B66
5022  1B67
5023  1B68
5024  1B69
5025  1B6A
5026  1B6B
5027  1B6C
5028  1B6D
5029  1B6E
5030  1B6F
5031  1B70
5032  1B71
5033  1B72
5034  1B73
5035  1B74
5036  1B75
5037  1B76
5038  1B77
5039  1B78
5040  1B79
5041  1B7A
5042  1B7B
5043  1B7C
5044  1B7D
5045  1B7E
5046  1B7F
5047  1B80
5048  1B81
5049  1B82
5050  1B83
5051  1B84
5052  1B85
5053  1B86
5054  1B87
5055  1B88
5056  1B89
5057  1B8A
5058  1B8B
5059  1B8C
5060  1B8D
5061  1B8E
5062  1B8F
5063  1B90
5064  1B91
5065  1B92
5066  1B93
5067  1B94
5068  1B95
5069  1B96
5070  1B97
5071  1B98
5072  1B99
5073  1B9A
5074  1B9B
5075  1B9C
5076  1B9D
5077  1B9E
5078  1B9F
5079  1BA0
5080  1BA1
5081  1BA2
5082  1BA3
5083  1BA4
5084  1BA5
5085  1BA6
5086  1BA7
5087  1BA8
5088  1BA9
5089  1BAA
5090  1BAB
5091  1BAC
5092  1BAD
5093  1BAE
5094  1BAF
5095  1BB0
5096  1BB1
5097  1BB2
5098  1BB3
5099  1BB4
5100  1BB5
5101  1BB6
5102  1BB7
5103  1BB8
5104  1BB9
5105  1BBA
5106  1BBB
5107  1BBC
5108  1BBD
5109  1BBE
5110  1BBF
5111  1BC0
5112  1BC1
5113  1BC2
5114  1BC3
5115  1BC4
5116  1BC5
5117  1BC6
5118  1BC7
5119  1BC8
5120  1BC9
5121  1BCA
5122  1BCB
5123  1BCC
5124  1BCD
5125  1BCE
5126  1BCF
5127  1BD0
5128  1BD1
5129  1BD2
5130  1BD3
5131  1BD4
5132  1BD5
5133  1BD6
5134  1BD7
5135  1BD8
5136  1BD9
5137  1BDA
5138  1BDB
5139  1BDC
5140  1BDD
5141  1BDE
5142  1BDF
5143  1BE0
5144  1BE1
5145  1BE2
5146  1BE3
5147  1BE4
5148  1BE5
5149  1BE6
5150  1BE7
5151  1BE8
5152  1BE9
5153  1BEA
5154  1BEB
5155  1BEC
5156  1BED
5157  1BEE
5158  1BEF
5159  1BF0
5160  1BF1
5161  1BF2
5162  1BF3
5163  1BF4
5164  1BF5
5165  1BF6
5166  1BF7
5167  1BF8
5168  1BF9
5169  1BFA
5170  1BFB
5171  1BFC
5172  1BFD
5173  1BFE
5174  1BFF
5175  1C00
5176  1C01
5177  1C02
5178  1C03
5179  1C04
5180  1C05
5181  1C06
5182  1C07
5183  1C08
5184  1C09
5185  1C0A
5186  1C0B
5187  1C0C
5188  1C0D
5189  1C0E
5190  1C0F
5191  1C10
5192  1C11
5193  1C12
5194  1C13
5195  1C14
5196  1C15
5197  1C16
5198  1C17
5199  1C18
5200  1C19
5201  1C1A
5202  1C1B
5203  1C1C
5204  1C1D
5205  1C1E
5206  1C1F
5207  1C20
5208  1C21
5209  1C22
5210  1C23
5211  1C24
5212  1C25
5213  1C26
5214  1C27
5215  1C28
5216  1C29
5217  1C2A
5218  1C2B
5219  1C2C
5220  1C2D
5221  1C2E
5222  1C2F
5223  1C30
5224  1C31
5225  1C32
5226  1C33
5227  1C34
5228  1C35
5229  1C36
5230  1C37
5231  1C38
5232  1C39
5233  1C3A
5234  1C3B
5235  1C3C
5236  1C3D
5237  1C3E
5238  1C3F
5239  1C40
5240  1C41
5241  1C42
5242  1C43
5243  1C44
5244  1C45
5245  1C46
5246  1C47
5247  1C48
5248  1C49
5249  1C4A
5250  1C4B
5251  1C4C
5252  1C4D
5253  1C4E
5254  1C4F
5255  1C50
5256  1C51
5257  1C52
5258  1C53
5259  1C54
5260  1C55
5261  1C56
5262  1C57
5263  1C58
5264  1C59
5265  1C5A
5266  1C5B
5267  1C5C
5268  1C5D
5269  1C5E
5270  1C5F
5271  1C60
5272  1C61
5273  1C62
5274  1C63
5275  1C64
5276  1C65
5277  1C66
5278  1C67
5279  1C68
5280  1C69
5281  1C6A
5282  1C6B
5283  1C6C
5284  1C6D
5285  1C6E
5286  1C6F
5287  1C70
5288  1C71
5289  1C72
5290  1C73
5291  1C74
5292  1C75
5293  1C76
5294  1C77
5295  1C78
5296  1C79
5297  1C7A
5298  1C7B
5299  1C7C
5300  1C7D
5301  1C7E
5302  1C7F
5303  1C80
5304  1C81
5305  1C82
5306  1C83
5307  1C84
5308  1C85
5309  1C86
5310  1C87
5311  1C88
5312  1C89
5313  1C8A
5314  1C8B
5315  1C8C
5316  1C8D
5317  1C8E
5318  1C8F
5319  1C90
5320  1C91
5321  1C92
5322  1C93
5323  1C94
5324  1C95
5325  1C96
5326  1C97
5327  1C98
5328  1C99
5329  1C9A
5330  1C9B
5331  1C9C
5332  1C9D
5333  1C9E
5334  1C9F
5335  1CA0
5336  1CA1
5337  1CA2
5338  1CA3
5339  1CA4
5340  1CA5
5341  1CA6
5342  1CA7
5343  1CA8
5344  1CA9
5345  1CAA
5346  1CAB
5347  1CAC
5348  1CAD
5349  1CAE
5350  1CAF
5351  1CB0
5352  1CB1
5353  1CB2
5354  1CB3
5355  1CB4
5356  1CB5
5357  1CB6
5358  1CB7
5359  1CB8
5360  1CB9
5361  1CBA
5362  1CBB
5363  1CBC
5364  1CBD
5365  1CBE
5366  1CBF
5367  1CC0
5368  1CC1
5369  1CC2
5370  1CC3
5371  1CC4
5372  1CC5
5373  1CC6
5374  1CC7
5375  1CC8
5376  1CC9
5377  1CCA
5378  1CCB
5379  1CCC
5380  1CCD
5381  1CCE
5382  1CCF
5383  1CD0
5384  1CD1
5385  1CD2
5386  1CD3
5387  1CD4
5388  1CD5
5389  1CD6
5390  1CD7
5391  1CD8
5392  1CD9
5393  1CDA
5394  1CDB
5395  1CDC
5396  1CDD
5397  1CDE
5398  1CDF
5399  1CE0
5400  1CE1
5401  1CE2
5402  1CE3
5403  1CE4
5404  1CE5
5405  1CE6
5406  1CE7
5407  1CE8
5408  1CE9
5409  1CEA
5410  1CEB
5411  1CEC
5412  1CED
5413  1CEE
5414  1CEF
5415  1CF0
5416  1CF1
5417  1CF2
5418  1CF3
5419  1CF4
5420  1CF5
5421  1CF6
5422  1CF7
5423  1CF8
5424  1CF9
5425  1CFA
5426  1CFB
5427  1CFC
5428  1CFD
5429  1CFE
5430  1CFF
5431  1D00
5432  1D01
5433  1D02
5434  1D03
5435  1D04
5436  1D05
5437  1D06
5438  1D07
5439  1D08
5440  1D09
5441  1D0A
5442  1D0B
5443  1D0C
5444  1D0D
5445  1D0E
5446  1D0F
5447  1D10
5448  1D11
5449  1D12
5450  1D13
5451  1D14
5452  1D15
5453  1D16
5454  1D17
5455  1D18
5456  1D19
5457  1D1A
5458  1D1B
5459  1D1C
5460  1D1D
5461  1D1E
5462  1D1F
5463  1D20
5464  1D21
5465  1D22
5466  1D23
5467  1D24
5468  1D25
5469  1D26
5470  1D27
5471  1D28
5472  1D29
5473  1D2A
5474  1D2B
5475  1D2C
5476  1D2D
5477  1D2E
5478  1D2F
5479  1D30
5480  1D31
5481  1D32
5482  1D33
5483  1D34
5484  1D35
5485  1D36
5486  1D37
5487  1D38
5488  1D39
5489  1D3A
5490  1D3B
5491  1D3C
5492  1D3D
5493  1D3E
5494  1D3F
5495  1D40
5496  1D41
5497  1D42
5498  1D43
5499  1D44
5500  1D45
5501  1D46
5502  1D47
5503  1D48
5504  1D49
5505  1D4A
5506  1D4B
5507  1D4C
5508  1D4D
5509  1D4E
5510  1D4F
5511  1D50
5512  1D51
5513  1D52
5514  1D53
5515  1D54
5516  1D55
5517  1D56
5518  1D57
5519  1D58
5520  1D59
5521  1D5A
5522  1D5B
5523  1D5C
5524  1D5D
5525  1D5E
5526  1D5F
5527  1D60
5528  1D61
5529  1D62
5530  1D63
5531  1D64
5532  1D65
5533  1D66
5534  1D67
5535  1D68
5536  1D69
5537  1D6A
5538  1D6B
5539  1D6C
5540  1D6D
5541  1D6E
5542  1D6F
5543  1D70
5544  1D71
5545  1D72
5546  1D73
5547  1D74
5548  1D75
5549  1D76
5550  1D77
5551  1D78
5552  1D79
5553  1D7A
5554  1D7B
5555  1D7C
5556  1D7D
5557  1D7E
5558  1D7F
5559  1D80
5560  1D81
5561  1D82
5562  1D83
5563  1D84
5564  1D85
5565  1D86
5566  1D87
5567  1D88
5568  1D89
5569  1D8A
5570  1D8B
5571  1D8C
5572  1D8D
5573  1D8E
5574  1D8F
5575  1D90
5576  1D91
5577  1D92
5578  1D93
5579  1D94
5580  1D95
5581  1D96
5582  1D97
5583  1D98
5584  1D99
5585  1D9A
5586  1D9B
5587  1D9C
5588  1D9D
5589  1D9E
5590  1D9F
5591  1DA0
5592  1DA1
5593  1DA2
5594  1DA3
5595  1DA4
5596  1DA5
5597  1DA6
5598  1DA7
5599  1DA8
5600  1DA9
5601  1DAA
5602  1DAB
5603  1DAC
5604  1DAD
5605  1DAE
5606  1DAF
5607  1DB0
5608  1DB1
5609  1DB2
5610  1DB3
5611  1DB4
5612  1DB5
5613  1DB6
5614  1DB7
5615  1DB8
5616  1DB9
5617  1DBA
5618  1DBB
5619  1DBC
5620  1DBD
5621  1DBE
5622  1DBF
5623  1DC0
5624  1DC1
5625  1DC2
5626  1DC3
5627  1DC4
5628  1DC5
5629  1DC6
5630  1DC7
5631  1DC8
5632  1DC9
5633  1DCA
5634  1DCB
5635  1DCC
5636  1DCD
5637  1DCE
5638  1DCF
5639  1DD0
5640  1DD1
5641  1DD2
5642  1DD3
5643  1DD4
5644  1DD5
5645  1DD6
5646  1DD7
5647  1DD8
5648  1DD9
5649  1DDA
5650  1DDB
5651  1DDC
5652  1DDD
5653  1DDE
5654  1DDF
5655  1DE0
5656  1DE1
5657  1DE2
5658  1DE3
5659  1DE4
5660  1DE5
5661  1DE6
5662  1DE7
5663  1DE8
5664  1DE9
5665  1DEA
5666  1DEB
5667  1DEC
5668  1DED
5669  1DEE
5670  1DEF
5671  1DF0
5672  1DF1
5673  1DF2
5674  1DF3
5675  1DF4
5676  1DF5
5677  1DF6
5678  1DF7
5679  1DF8
5680  1DF9
5681  1DFA
5682  1DFB
5683  1DFC
5684  1DFD
5685  1DFE
5686  1DFF
5687  1E00
5688  1E01
5689  1E02
5690  1E03
5691  1E04
5692  1E05
5693  1E06
5694  1E07
5695  1E08
5696  1E09
5697  1E0A
5698  1E0B
5699  1E0C
5700  1E0D
5701  1E0E
5702  1E0F
5703  1E10
5704  1E11
5705  1E12
5706  1E13
5707  1E14
5708  1E15
5709  1E16
5710  1E17
5711  1E18
5712  1E19
5713  1E1A
5714  1E1B
5715  1E1C
5716  1E1D
5717  1E1E
5718  1E1F
5719  1E20
5720  1E21
5721  1E22
5722  1E23
5723  1E24
5724  1E25
5725  1E26
5726  1E27
5727  1E28
5728  1E29
5729  1E2A
5730  1E2B
5731  1E2C
5732  1E2D
5733  1E2E
5734  1E2F
5735  1E30
5736  1E31
5737  1E32
5738  1E33
5739  1E34
5740  1E35
5741  1E36
5742  1E37
5743  1E38
5744  1E39
5745  1E3A
5746  1E3B
5747  1E3C
5748  1E3D
5749  1E3E
5750  1E3F
5751  1E40
5752  1E41
5753  1E42
5754  1E43
5755  1E44
5756  1E45
5757  1E46
5758  1E47
5759  1E48
5760  1E49
5761  1E4A
5762  1E4B
5763  1E4C
5764  1E4D
5765  1E4E
5766  1E4F
5767  1E50
5768  1E51
5769  1E52
5770  1E53
5771  1E54
5772  1E55
5773  1E56
5774  1E57
5775  1E58
5776  1E59
5777  1E5A
5778  1E5B
5779  1E5C
5780  1E5D
5781  1E5E
5782  1E5F
5783  1E60
5784  1E61
5785  1E62
5786  1E63
5787  1E64
5788  1E65
5789  1E66
5790  1E67
5791  1E68
5792  1E69
5793  1E6A
5794  1E6B
5795  1E6C
5796  1E6D
5797  1E6E
5798  1E6F
5799  1E70
5800  1E71
5801  1E72
5802  1E73
5803  1E74
5804  1E75
5805  1E76
5806  1E77
5807  1E78
5808  1E79
5809  1E7A
5810  1E7B
5811  1E7C
5812  1E7D
5813  1E7E
5814  1E7F
5815  1E80
5816  1E81
5817  1E82
5818  1E83
5819  1E84
5820  1E85
5821  1E86
5822  1E87
5823  1E88
5824  1E89
5825  1E8A
5826  1E8B
5827  1E8C
5828  1E8D
5829  1E8E
5830  1E8F
5831  1E90
5832  1E91
5833  1E92
5834  1E93
5835  1E94
5836  1E95
5837  1E96
5838  1E97
5839  1E98
5840  1E99
5841  1E9A
5842  1E9B
5843  1E9C
5844  1E9D
5845  1E9E
5846  1E9F
5847  1EA0
5848  1EA1
5849  1EA2
5850  1EA3
5851  1EA4
5852  1EA5
5853  1EA6
5854  1EA7
5855  1EA8
5856  1EA9
5857  1EAA
5858  1EAB
5859  1EAC
5860  1EAD
5861  1EAE
5862  1EAF
5863  1EB0
5864  1EB1
5865  1EB2
5866  1EB3
5867  1EB4
5868  1EB5
5869  1EB6
5870  1EB7
5871  1EB8
5872  1EB9
5873  1EBA
5874  1EBB
5875  1EBC
5876  1EBD
5877  1EBE
5878  1EBF
5879  1EC0
5880  1EC1
5881  1EC2
5882  1EC3
5883  1EC4
5884  1EC5
5885  1EC6
5886  1EC7
5887  1EC8
5888  1EC9
5889  1ECA
5890  1ECB
5891  1ECC
5892  1ECD
5893  1ECE
5894  1ECF
5895  1ED0
5896  1ED1
5897  1ED2
5898  1ED3
5899  1ED4
5900  1ED5
5901  1ED6
5902  1ED7
5903  1ED8
5904  1ED9
5905  1EDA
5906  1EDB
5907  1EDC
5908  1EDD
5909  1EDE
5910  1EDF
5911  1EE0
5912  1EE1
5913  1EE2
5914  1EE3
5915  1EE4
5916  1EE5
5917  1EE6
5918  1EE7
5919  1EE8
5920  1EE9
5921  1EEA
5922  1EEB
5923  1EEC
5924  1EED
5925  1EEE
5926  1EEF
5927  1EF0
5928  1EF1
5929  1EF2
5930  1EF3
5931  1EF4
5932  1EF5
5933  1EF6
5934  1EF7
5935  1EF8
5936  1EF9
5937  1EFA
5938  1EFB
5939  1EFC
5940  1EFD
5941  1EFE
5942  1EFF
5943  1F00
5944  1F01
5945  1F02
5946  1F03
5947  1F04
5948  1F05
5949  1F06
5950  1F07
5951  1F08
5952  1F09
5953  1F0A
5954  1F0B
5955  1F0C
5956  1F0D
5957  1F0E
5958  1F0F
5959  1F10
5960  1F11
5961  1F12
5962  1F13
5963  1F14
5964  1F15
5965  1F16
5966  1F17
5967  1F18
5968  1F19
5969  1F1A
5970  1F1B
5971  1F1C
5972  1F1D
5973  1F1E
5974  1F1F
5975  1F20
5976  1F21
5977  1F22
5978  1F23
5979  1F24
5980  1F25
5981  1F26
5982  1F27
5983  1F28
5984  1F29
5985  1F2A
5986  1F2B
5987  1F2C
5988  1F2D
5989  1F2E
5990  1F2F
5991  1F30
5992  1F31
5993  1F32
5994  1F33
5995  1F34
5996  1F35
5997  1F36
5998  1F37
5999  1F38
6000  1F39
6001  1F3A
6002  1F3B
6003  1F3C
6004  1F3D
6005  1F3E
6006  1F3F
6007  1F40
6008  1F41
6009  1F42
6010  1F43
6011  1F44
6012  1F45
6013  1F46
6014  1F47
6015  1F48
6016  1F49
6017  1F4A
6018  1F4B
6019  1F4C
6020  1F4D
6021  1F4E
6022  1F4F
6023  1F50
6024  1F51
6025  1F52
6026  1F53
6027  1F54
6028  1F55
6029  1F56
6030  1F57
6031  1F58
6032  1F59
6033  1F5A
6034  1F5B
6035  1F5C
6036  1F5D
6037  1F5E
6038  1F5F
6039  1F60
6040  1F61
6041  1F62
6042  1F63
6043  1F64
6044  1F65
6045  1F66
6046  1F67
6047  1F68
6048  1F69
6049  1F6A
6050  1F6B
6051  1F6C
6052  1F6D
6053  1F6E
6054  1F6F
6055  1F70
6056  1F71
6057  1F72
6058  1F73
6059  1F74
6060  1F75
6061  1F76
6062  1F77
6063  1F78
6064  1F79
6065  1F7A
6066  1F7B
6067  1F7C
6068  1F7D
6069  1F7E
6070  1F7F
6071  1F80
6072  1F81
6073  1F82
6074  1F83
6075  1F84
6076  1F85
6077  1F86
6078  1F87
6079  1F88
6080  1F89
6081  1F8A
6082  1F8B
6083  1F8C
6084  1F8D
6085  1F8E
6086  1F8F
6087  1F90
6088  1F91
6089  1F92
6090  1F93
6091  1F94
6092  1F95
6093  1F96
6094  1F97
6095  1F98
6096  1F99
6097  1F9A
6098  1F9B
6099  1F9C
6100  1F9D
6101  1F9E
6102  1F9F
6103  1FA0
6104  1FA1
6105  1FA2
6106  1FA3
6107  1FA4
6108  1FA5
6109  1FA6
6110  1FA7
6111  1FA8
6112  1FA9
6113  1FAA
6114  1FAB
6115  1FAC
6116  1FAD
6117  1FAE
6118  1FAF
6119  1FB0
6120  1FB1
6121  1FB2
6122  1FB3
6123  1FB4
6124  1FB5
6125  1FB6
6126  1FB7
6127  1FB8
6128  1FB9
6129  1FBA
6130  1FBB
6131  1FBC
6132  1FBD
6133  1FBE
6134  1FBF
6135  1FC0
6136  1FC1
6137  1FC2
6138  1FC3
6139  1FC4
6140  1FC5
6141  1FC6
6142  1FC7
6143  1FC8
6144  1FC9
6145  1FCA
6146  1FCB
6147  1FCC
6148  1FCD
6149  1FCE
6150  1FCF
6151  1FD0
6152  1FD1
6153  1FD2
6154  1FD3
6155  1FD4
6156  1FD5
6157  1FD6
6158  1FD7
6159  1FD8
6160  1FD9
6161  1FDA
6162  1FDB
6163  1FDC
6164  1FDD
6165  1FDE
6166  1FDF
6167  1FE0
6168  1FE1
6169  1FE2
6170  1FE3
6171  1FE4
6172  1FE5
6173  1FE6
6174  1FE7
6175  1FE8
6176  1FE9
6177  1FEA
6178  1FEB
6179  1FEC
6180  1FED
6181  1FEE
6182  1FEF
6183  1FF0
6184  1FF1
6185  1FF2
6186  1FF3
6187  1FF4
6188  1FF5
6189  1FF6
6190  1FF7
6191  1FF8
6192  1FF9
6193  1FFA
6194  1FFB
6195  1FFC
6196  1FFD
6197  1FFE
6198  1FFF
6199  2000
6200  2001
6201  2002
6202  2003
6203  2004
6204  2005
6205  2006
6206  2007
6207  2008
6208  2009
6209  200A
6210  200B
6211  200C
6212  200D
6213  200E
6214  200F
6215  2010
6216  2011
6217  2012
6218  2013
6219  2014
6220  2015
6221  2016
6222  2017
6223  2018
6224  2019
6225  201A
6226  201B
6227  201C
6228  201D
6229  201E
6230  201F
6231  2020
6232  2021
6233  2022
6234  2023
6235  2024
6236  2025
6237  2026
6238  2027
6239  2028
6240  2029
6241  202A
6242  202B
6243  202C
6244  202D
6245  202E
6246  202F
6247  2030
6248  2031
6249  2032
6250  2033
6251  2034
6252  2035
6253  2036
6254  2037
6255  2038
6256  2039
6257  203A
6258  203B
6259  203C
6260  203D
6261  203E
6262  203F
6263  2040
6264  2041
6265  2042
6266  2043
6267  2044
6268  2045
6269  2046
6270  2047
6271  2048
6272  2049
6273  204A
6274  204B
6275  204C
6276  204D
6277  204E
6278  204F
6279  2050
6280  2051
6281  2052
6282  2053
6283  2054
6284  2055
6285  2056
6286  2057
6287  2058
6288  2059
6289  205A
6290  205B
6291  205C
6292  205D
6293  205E
6294  205F
6295  2060
6296  2061
6297  2062
6298  2063
6299  2064
6300  2065
6301  2066
6302  2067
6303  2068
6304  2069
6305  206A
6306  206B
6307  206C
6308  206D
6309  206E
6310  206F
6311  2070
6312  2071
6313  2072
6314  2073
6315  2074
6316  2075
6317  2076
6318  2077
6319  2078
6320  2079
6321  207A
6322  207B
6323  207C
6324  207D
6325  207E
6326  207F
6327  2080
6328  2081
6329  2082
6330  2083
6331  2084
6332  2085
6333  2086
6334  2087
6335  2088
6336  2089
6337  208A
6338  208B
6339  208C
6340  208D
6341  208E
6342  208F
6343  2090
6344  2091
6345  2092
6346  2093
6347  2094
6348  2095
6349  2096
6350  2097
6351  2098
6352  2099
6353  209A
6354  209B
6355  209C
6356  209D
6357  209E
6358  209F
6359  20A0
6360  20A1
6361  20A2
6362  20A3
6363  20A4
6364  20A5
6365  20A6
6366  20A7
6367  20A8
6368  20A9
6369  20AA
6370  20AB
6371  20AC
6372  20AD
6373  20AE
6374  20AF
6375  20B0
6376  20B1
6377  20B2
6378  20B3
6379  20B4
6380  20B5
6381  20B6
6382  20B7
6383  20B8
6384  20B9
6385  20BA
6386  20BB
6387  20BC
6388  20BD
6389  20BE
6390  20BF
6391  20C0
6392  20C1
6393  20C2
6394  20C3
6395  20C4
6396  20C5
6397  20C6
6398  20C7
6399  20C8
6400  20C9
6401  20CA
6402  20CB
6403  20CC
6404  20CD
6405  20CE
6406  20CF
6407  20D0
6408  20D1
6409  20D2
6410  20D3
6411  20D4
6412  20D5
6413  20D6
6414  20D7
6415  20D8
6416  20D9
6417  20DA
6418  20DB
6419  20DC
6420  20DD
6421  20DE
6422  20DF
6423  20E0
6424  20E1
6425  20E2
6426  20E3
6427  20E4
6428  20E5
6429  20E6
6430  20E7
6431  20E8
6432  20E9
6433  20EA
6434  20EB
6435  20EC
6436  20ED
6437  20EE
6438  20EF
6439  20F0
6440  20F1
6441  20F2
6442  20F3
6443  20F4
6444  20F5
6445  20F6
6446  20F7
6447  20F8
6448  20F9
6449  20FA
6450  20FB
6451  20FC
6452  20FD
6453  20FE
6454  20FF
6455  2100
6456  2101
6457  2102
6458  2103
6459  2104
6460  2105
6461  2106
6462  2107
6463  2108
6464  2109
6465  210A
6466  210B
6467  210C
6468  210D
6469  210E
6470  210F
6471  2110
6472  2111
6473  2112
6474  2113
6475  2114
6476  2115
6477  2116
6478  2117
6479  2118
6480  2119
6481  211A
6482  211B
6483  211C
6484  211D
6485  211E
6486  211F
6487  2120
6488  2121
6489  2122
6490  2123
6491  2124
6492  2125
6493  2126
6494  2127
6495  2128
6496  2129
6497  212A
6498  212B
6499  212C
6500  212D
6501  212E
6502  212F
6503  2130
6504  2131
6505  2132
6506  2133
6507  2134
6508  2135
6509  2136
6510  2137
6511  2138
6512  2139
6513  213A
6514  213B
6515  213C
6516  213D
6517  213E
6518  213F
6519  2140
6520  2141
6521  2142
6522  2143
6523  2144
6524  2145
6525  2146
6526  2147
6527  2148
6528  2149
6529  214A
6530  214B
6531  214C
6532  214D
6533  214E
6534  214F
6535  2150
6536  2151
6537  2152
6538  2153
6539  2154
6540  2155
6541  2156
6542  2157
6543  2158
6544  2159
6545  215A
6546  215B
6547  215C
6548  215D
6549  215E
6550  215F
6551  2160
6552  2161
6553  2162
6554  2163
6555  2164
6556  2165
6557  2166
6558  2167
6559  2168
6560  2169
6561  216A
6562  216B
6563  216C
6564  216D
6565  216E
6566  216F
6567  2170
6568  2171
6569  2172
6570  2173
6571  2174
6572  2175
6573  2176
6574  2177
6575  2178
6576  2179
6577  217A
6578  217B
6579  217C
6580  217D
6581  217E
6582  217F
6583  2180
6584  2181
6585  2182
6586  2183
6587  2184
6588  2185
6589  2186
6590  2187
6591  2188
6592  2189
6593  218A
6594  218B
6595  218C
6596  218D
6597  218E
6598  218F
6599  2190
6600  2191
6601  2192
6602  2193
6603  2194
6604  2195
6605  2196
6606  2197
6607  2198
6608  2199
6609  219A
6610  219B
6611  219C
6612  219D
6613  219E
6614  219F
6615  21A0
6616  21A1
6617  21A2
6618  21A3
6619  21A4
6620  21A5
6621  21A6
6622  21A7
6623  21A8
6624  21A9
6625  21AA
6626  21AB
6627  21AC
6628  21AD
6629  21AE
6630  21AF
6631  21B0
6632  21B1
6633  21B2
6634  21B3
6635  21B4
6636  21B5
6637  21B6
6638  21B7
6639  21B8
6640  21B9
6641  21BA
6642  21BB
6643  21BC
6644  21BD
6645  21BE
6646  21BF
6647  21C0
6648  21C1
6649  21C2
6650  21C3
6651  21C4
6652  21C5
6653  21C6
6654  21C7
6655  21C8
6656  21C9
6657  21CA
6658  21CB
6659  21CC
6660  21CD
6661  21CE
6662  21CF
6663  21D0
6664  21D1
6665  21D2
6666  21D3
6667  21D4
6668  21D5
6669  21D6
6670  21D7
6671  21D8
6672  21D9
6673  21DA
6674  21DB
6675  21DC
6676  21DD
6677  21DE
6678  21DF
6679  21E0
6680  21E1
6681  21E2
6682  21E3
6683  21E4
6684  21E5
6685  21E6
6686  21E7
6687  21E8
6688  21E9
6689  21EA
6690  21EB
6691  21EC
6692  21ED
6693  21EE
6694  21EF
6695  21F0
6696  21F1
6697  21F2
6698  21F3
6699  21F4
6700  21F5
6701  21F6
6702  21F7
6703  21F8
6704  21F9
6705  21FA
6706  21FB
6707  21FC
6708  21FD
6709  21FE
6710  21FF
6711  2200
6712  2201
6713  2202
6714  2203
6715  2204
6716  2205
6717  2206
6718  2207
6719  2208
6720  2209
6721  220A
6722  220B
6723  220C
6724  220D
6725  220E
6726  220F
6727  2210
6728  2211
6729  2212
6730  2213
6731  2214
6732  2215
6733  2216
6734  2217
6735  2218
6736  2219
6737  221A
6738  221B
6739  221C
6740  221D
6741  221E
6742  221F
6743  2220
6744  2221
6745  2222
6746  2223
6747  2224
6748  2225
6749  2226
6750  2227
6751  2228
6752  2229
6753  222A
6754  222B
6755  222C
6756  222D
6757  222E
6758  222F
6759  2230
6760  2231
6761  2232
6762  2233
6763  2234
6764  2235
6765  2236
6766  2237
6767  2238
6768  2239
6769  223A
6770  223B
6771  223C
6772  223D
6773  223E
6774  223F
6775  2240
6776  2241
6777  2242
6778  2243
6779  2244
6780  2245
6781  2246
6782  2247
6783  2248
6784  2249
6785  224A
6786  224B
6787  224C
6788  224D
6789  224E
6790  224F
6791  2250
6792  2251
6793  2252
6794  2253
6795  2254
6796  2255
6797  2256
6798  2257
6799  2258
6800  2259
6801  225A
6802  225B
6803  225C
6804  225D
6805  225E
6806  225F
6807  2260
6808  2261
6809  2262
6810  2263
6811  2264
6812  2265
6813  2266
6814  2267
6815  2268
6816  2269
6817  226A
6818  226B
6819  226C
6820  226D
6821  226E
6822  226F
6823  2270
6824  2271
6825  2272
6826  2273
6827  2274
6828  2275
6829  2276
6830  2277
6831  2278
6832  2279
6833  227A
6834  227B
6835  227C
6836  227D
6837  227E
6838  227F
6839  2280
6840  2281
6841  2282
6842  2283
6843  2284
6844  2285
6845  2286
6846  2287
6847  2288
6848  2289
6849  228A
6850  228B
6851  228C
6852  228D
6853  228E
6854  228F
6855  2290
6856  2291
6857  2292
6858  2293
6859  2294
6860  2295
6861  2296
6862  2297
6863  2298
6864  2299
6865  229A
6866  229B
6867  229C
6868  229D
6869  229E
6870  229F
6871  22A0
6872  22A1
6873  22A2
6874  22A3
6875  22A4
6876  22A5
6877  22A6
6878  22A7
6879  22A8
6880  22A9
6881  22AA
6882  22AB
6883  22AC
6884  22AD
6885  22AE
6886  22AF
6887  22B0
6888  22B1
6889  22B2
6890  22B3
6891  22B4
6892  22B5
6893  22B6
6894  22B7
6895  22B8
6896  22B9
6897  22BA
6898  22BB
6899  22BC
6900  22BD
6901  22BE
6902  22BF
6903  22C0
6904  22C1
6905  22C2
6906  22C3
6907  22C4
6908  22C5
6909  22C6
6910  22C7
6911  22C8
6912  22C9
6913  22CA
6914  22CB
6915  22CC
6916  22CD
6917  22CE
6918  22CF
6919  22D0
6920  22D1
6921  22D2
6922  22D3
6923  22D4
6924  22D5
6925  22D6
6926  22D7
6927  22D8
6928  22D9
6929  22DA
6930  22DB
6931  22DC
6932  22DD
6933  22DE
6934  22DF
6935  22E0
6936  22E1
6937  22E2
6938  22E3
6939  22E4
6940  22E5
6941  22E6
6942  22E7
6943  22E8
6944  22E9
6945  22EA
6946  22EB
6947  22EC
6948  22ED
6949  22EE
6950  22EF
6951  22F0
6952  22F1
6953  22F2
6954  22F3
6955  22F4
6956  22F5
6957  22F6
6958  22F7
6959  22F8
6960  22F9
6961  22FA
6962  22FB
6963  22FC
6964  22FD
6965  22FE
6966  22FF
6967  2300
6968  2301
6969  2302
6970  2303
6971  2304
6972  2305
6973  2306
6974  2307
6975  2308
6976  2309
6977  230A
6978  230B
6979  230C
6980  230D
6981  230E
6982  230F
6983  2310
6984  2311
6985  2312
6986  2313
6987  2314
6988  2315
6989  2316
6990  2317
6991  2318
6992  2319
6993  231A
6994  231B
6995  231C
6996  231D
6997  231E
6998  231F
6999  2320
7000  2321
7001  2322
7002  2323
7003  2324
7004  2325
7005  2326
7006  2327
7007  2328
7008  2329
7009  232A
7010  232B
7011  232C
7012  232D
7013  232E
7014  232F
7015  2330
7016  2331
7017  2332
7018  2333
7019  2334
7020  2335
7021  2336
7022  2337
7023  2338
7024  2339
7025  233A
7026  233B
7027  233C
7028  233D
7029  233E
7030  233F
7031  2340
7032  2341
7033  2342
7034  2343
7035  2344
7036  2345
7037  2346
7038  2347
7039  2348
7040  2349
7041  234A
7042  234B
7043  234C
7044  234D
7045  234E
7046  234F
7047  2350
7048  2351
7049  2352
7050  2353
7051  2354
7052  2355
7053  2356
7054  2357
7055  2358
7056  2359
7057  235A
7058  235B
7059  235C
7060  235D
7061  235E
7062  235F
7063  2360
7064  2361
7065  2362
7066  2363
7067  2364
7068  2365
7069  2366
7070  2367
7071  2368
7072  2369
7073  236A
7074  236B
7075  236C
7076  236D
7077  236E
7078  236F
7079  2370
7080  2371
7081  2372
7082  2373
7083  2374
7084  2375
7085  2376
7086  2377
7087  2378
7088  2379
7089  237A
7090  237B
7091  237C
7092  237D
7093  237E
7094  237F
7095  2380
7096  2381
7097  2382
7098  2383
7099  2384
7100  2385
7101  2386
7102  2387
7103  2388
7104  2389
7105  238A
7106  238B
7107  238C
7108  238D
7109  238E
7110  238F
7111  2390
7112  2391
7113  2392
7114  2393
7115  2394
7116  2395
7117  2396
7118  2397
7119  2398
7120  2399
7121  239A
7122  239B
7123  239C
7124  239D
7125  239E
7126  239F
7127  23A0
7128  23A1
7129  23A2
7130  23A3
7131  23A4
7132  23A5
7133  23A6
7134  23A7
7135  23A8
7136  23A9
7137  23AA
7138  23AB
7139  23AC
7140  23AD
7141  23AE
7142  23AF
7143  23B0
7144  23B1
7145  23B2
7146  23B3
7147  23B4
7148  23B5
7149  23B6
7150  23B7
7151  23B8
7152  23B9
7153  23BA
7154  23BB
7155  23BC
7156  23BD
7157  23BE
7158  23BF
7159  23C0
7160  23C1
7161  23C2
7162  23C3
7163  23C4
7164  23C5
7165  23C6
7166  23C7
7167  23C8
7168  23C9
7169  23CA
7170  23CB
7171  23CC
7172  23CD
7173  23CE
7174  23CF
7175  23D0
7176  23D1
7177  23D2
7178  23D3
7179  23D4
7180  23D5
7181  23D6
7182  23D7
7183  23D8
7184  23D9
7185  23DA
7186  23DB
7187  23DC
7188  23DD
7189  23DE
7190  23DF
7191  23E0
7192  23E1
7193  23E2
7194  23E3
7195  23E4
7196  23E5
7197  23E6
7198  23E7
7199  23E8
7200  23E9
7201  23EA
7202  23EB
7203  23EC
7204  23ED
7205  23EE
7206  23EF
7207  23F0
7208  23F1
7209  23F2
7210  23F3
7211  23F4
7212  23F5
7213  23F6
7214  23F7
7215  23F8
7216  23F9
7217  23FA
7218  23FB
7219  23FC
7220  23FD
7221  23FE
7222  23FF
7223  2400
7224  2401
7225  2402
7226  2403
7227  2404
7228  2405
7229  2406
7230  2407
7231  2408
7232  2409
7233  240A
7234  240B
7235  240C
7236  240D
7237  240E
7238  240F
7239  2410
7240  2411
7241  2412
7242  2413
7243  2414
7244  2415
7245  2416
7246  2417
7247  2418
7248  2419
7249  241A
7250  241B
7251  241C
7252  241D
7253  241E
7254  241F
7255  2420
7256  2421
7257  2422
7258  2423
7259  2424
7260  2425
7261  2426
7262  2427
7263  2428
7264  2429
7265  242A
7266  242B
7267  242C
7268  242D
7269  242E
7270  242F
7271  2430
7272  2431
7273  2432
7274  2433
7275  2434
7276  2435
7277  2436
7278  2437
7279  2438
7280  2439
7281  243A
7282  243B
7283  243C
7284  243D
7285  243E
7286  243F
7287  2440
7288  2441
7289  2442
7290  2443
7291  2444
7292  2445
7293  2446
7294  2447
7295  2448
7296  2449
7297  244A
7298  244B
7299  244C
7300  244D
7301  244E
7302  244F
7303  2450
7304  2451
7305  2452
7306  2453
7307  2454
7308  2455
7309  2456
7310  2457
7311  2458
7312  2459
7313  245A
7314  245B
7315  245C
7316  245D
7317  245E
7318  245F
7319  2460
7320  2461
7321  2462
7322  2463
7323  2464
7324  2465
7325  2466
7326  2467
7327  2468
7328  2469
7329  246A
7330  246B
7331  246C
7332  246D
7333  246E
7334  246F
7335  2470
7336  2471
7337  2472
7338  2473
7339  2474
7340  2475
7341  2476
7342  2477
7343  2478
7344  2479
7345  247A
7346  247B
7347  247C
7348  247D
7349  247E
7350  247F
7351  2480
7352  2481
7353  2482
7354  2483
7355  2484
7356  2485
7357  2486
7358  2487
7359  2488
7360  2489
7361  248A
7362  248B
7363  248C
7364  248D
7365  248E
7366  248F
7367  2490
7368  2491
7369  2492
7370  2493
7371  2494
7372  2495
7373  2496
7374  2497
7375  2498
7376  2499
7377  249A
7378  249B
7379  249C
7380  249D
7381  249E
7382  249F
7383  24A0
7384  24A1
7385  24A2
7386  24A3
7387  24A4
7388  24A5
7389  24A6
7390  24A7
7391  24A8
7392  24A9
7393  24AA
7394  24AB
7395  24AC
7396  24AD
7397  24AE
7398  24AF
7399  24B0
7400  24B1
7401  24B2
7402  24B3
7403  24B4
7404  24B5
7405  24B6
7406  24B7
7407  24B8
7408  24B9
7409  24BA
7410  24BB
7411  24BC
7412  24BD
7413  24BE
7414  24BF
7415  24C0
7416  24C1
7417  24C2
7418  24C3
7419  24C4
7420  24C5
7421  24C6
7422  24C7
7423  24C8
7424  24C9
7425  24CA
7426  24CB
7427  24CC
7428  24CD
7429  24CE
7430  24CF
7431  24D0
7432  24D1
7433  24D2
7434  24D3
7435  24D4
7436  24D5
7437  24D6
7438  24D7
7439  24D8
7440  24D9
7441  24DA
7442  24DB
7443  24DC
7444  24DD
7445  24DE
7446  24DF
7447  24E0
7448  24E1
7449  24E2
7450  24E3
7451  24E4
7452  24E5
7453  24E6
7454  24E7
7455  24E8
7456  24E9
7457  24EA
7458  24EB
7459  24EC
7460  24ED
7461  24EE
7462  24EF
7463  24F0
7464  24F1
7465  24F2
7466  24F3
7467  24F4
7468  24F5
7469  24F6
7470  24F7
7471  24F8
7472  24F9
7473  24FA
7474  24FB
7475  24FC
7476  24FD
7477  24FE
7478  24FF
7479  2500
7480  2501
7481  2502
7482  2503
7483  2504
7484  2505
7485  2506
7486  2507
7487  2508
7488  2509
7489  250A
7490  250B
7491  250C
7492  250D
7493  250E
7494  250F
7495  2510
7496  2511
7497  2512
7498  2513
7499  2514
7500  2515
7501  2516
7502  2517
7503  2518
7504  2519
7505  251A
7506  251B
7507  251C
7508  251D
7509  251E
7510  251F
7511  2520
7512  2521
7513  2522
7514  2523
7515  2524
7516  2525
7517  2526
7518  2527
7519  2528
7520  2529
7521  252A
7522  252B
7523  252C
7524  252D
7525  252E
7526  252F
7527  2530
7528  2531
7529  2532
7530  2533
7531  2534
7532  2535
7533  2536
7534  2537
7535  2538
7536  2539
7537  253A
7538  253B
7539  253C
7540  253D
7541  253E
7542  253F
7543  2540
7544  2541
7545  2542
7546  2543
7547  2544
7548  2545
7549  2546
7550  2547
7551  2548
7552  2549
7553  254A
7554  254B
7555  254C
7556  254D
7557  254E
7558  254F
7559  2550
7560  2551
7561  2552
7562  2553
7563  2554
7564  2555
7565  2556
7566  2557
7567  2558
7568  2559
7569  255A
7570  255B
7571  255C
7572  255D
7573  255E
7574  255F
7575  2560
7576  2561
7577  2562
7578  2563
7579  2564
7580  2565
7581  2566
7582  2567
7583  2568
7584  2569
7585  256A
7586  256B
7587  256C
7588  256D
7589  256E
7590  256F
7591  2570
7592  2571
7593  2572
7594  2573
7595  2574
7596  2575
7597  2576
7598  2577
7599  2578
7600  2579
7601  257A
7602  257B
7603  257C
7604  257D
7605  257E
7606  257F
7607  2580
7608  2581
7609  2582
7610  2583
7611  2584
7612  2585
7613  2586
7614  2587
7615  2588
7616  2589
7617  258A
7618  258B
7619  258C
7620  258D
7621  258E
7622  258F
7623  2590
7624  2591
7625  2592
7626  2593
7627  2594
7628  2595
7629  2596
7630  2597
7631  2598
7632  2599
7633  259A
7634  259B
7635  259C
7636  259D
7637  259E
7638  259F
7639  25A0
7640  25A1
7641  25A2
7642  25A3
7643  25A4
7644  25A5
7645  25A6
7646  25A7
7647  25A8
7648  25A9
7649  25AA
7650  25AB
7651  25AC
7652  25AD
7653  25AE
7654  25AF
7655  25B0
7656  25B1
7657  25B2
7658  25B3
7659  25B4
7660  25B5
7661  25B6
7662  25B7
7663  25B8
7664  25B9
7665  25BA
7666  25BB
7667  25BC
7668  25BD
7669  25BE
7670  25BF
7671  25C0
7672  25C1
7673  25C2
7674  25C3
7675  25C4
7676  25C5
7677  25C6
7678  25C7
7679  25C8
7680  25C9
7681  25CA
7682  25CB
7683  25CC
7684  25CD
7685  25CE
7686  25CF
7687  25D0
7688  25D1
7689  25D2
7690  25D3
7691  25D4
7692  25D5
7693  25D6
7694  25D7
7695  25D8
7696  25D9
7697  25DA
7698  25DB
7699  25DC
7700  25DD
7701  25DE
7702  25DF
7703  25E0
7704  25E1
7705  25E2
7706  25E3
7707  25E4
7708  25E5
7709  25E6
7710  25E7
7711  25E8
7712  25E9
7713  25EA
7714  25EB
7715  25EC
7716  25ED
7717  25EE
7718  25EF
7719  25F0
7720  25F1
7721  25F2
7722  25F3
7723  25F4
7724  25F5
7725  25F6
7726  25F7
7727  25F8
7728  25F9
7729  25FA
7730  25FB
7731  25FC
7732  25FD
7733  25FE
7734  25FF
7735  2600
7736  2601
7737  2602
7738  2603
7739  2604
7740  2605
7741  2606
7742  2607
7743  2608
7744  2609
7745  260A
7746  260B
7747  260C
7748  260D
7749  260E
7750  260F
7751  2610
7752  2611
7753  2612
7754  2613
7755  2614
7756  2615
7757  2616
7758  2617
7759  2618
7760  2619
7761  261A
7762  261B
7763  261C
7764  261D
7765  261E
7766  261F
7767  2620
7768  2621
7769  2622
7770  2623
7771  2624
7772  2625
7773  2626
7774  2627
7775  2628
7776  2629
7777  262A
7778  262B
7779  262C
7780  262D
7781  262E
7782  262F
7783  2630
7784  2631
7785  2632
7786  2633
7787  2634
7788  2635
7789  2636
7790  2637
7791  2638
7792  2639
7793  263A
7794  263B
7795  263C
7796  263D
7797  263E
7798  263F
7799  2640
7800  2641
7801  2642
7802  2643
7803  2644
7804  2645
7805  2646
7806  2647
7807  2648
7808  2649
7809  264A
7810  264B
7811  264C
7812  264D
7813  264E
7814  264F
7815  2650
7816  2651
7817  2652
7818  2653
7819  2654
7820  2655
7821  2656
7822  2657
7823  2658
7824  2659
7825  265A
7826  265B
7827  265C
7828  265D
7829  265E
7830  265F
7831  2660
7832  2661
7833  2662
7834  2663
7835  2664
7836  2665
7837  2666
7838  2667
7839  2668
7840  2669
7841  266A
7842  266B
7843  266C
7844  266D
7845  266E
7846  266F
7847  2670
7848  2671
7849  2672
7850  2673
7851  2674
7852  2675
7853  2676
7854  2677
7855  2678
7856  2679
7857  267A
7858  267B
7859  267C
7860  267D
7861  267E
7862  267F
7863  2680
7864  2681
7865  2682
7866  2683
7867  2684
7868  2685
7869  2686
7870  2687
7871  2688
7872  2689
7873  268A
7874  268B
7875  268C
7876  268D
7877  268E
7878  268F
7879  2690
7880  2691
7881  2692
7882  2693
7883  2694
7884  2695
7885  2696
7886  2697
7887  2698
7888  2699
7889  269A
7890  269B
7891  269C
7892  269D
7893  269E
7894  269F
7895  26A0
7896  26A1
7897  26A2
7898  26A3
7899  26A4
7900  26A5
7901  26A6
7902  26A7
7903  26A8
7904  26A9
7905  26AA
7906  26AB
7907  26AC
7908  26AD
7909  26AE
7910  26AF
7911  26B0
7912  26B1
7913  26B2
7914  26B3
7915  26B4
7916  26B5
7917  26B6
7918  26B7
7919  26B8
7920  26B9
7921  26BA
7922  26BB
7923  26BC
7924  26BD
7925  26BE
7926  26BF
7927  26C0
7928  26C1
7929  26C2
7930  26C3
7931  26C4
7932  26C5
7933  26C6
7934  26C7
7935  26C8
7936  26C9
7937  26CA
7938  26CB
7939  26CC
7940  26CD
7941  26CE
7942  26CF
7943  26D0
7944  26D1
7945  26D2
7946  26D3
7947  26D4
7948  26D5
7949  26D6
7950  26D7
7951  26D8
7952  26D9
7953  26DA
7954  26DB
7955  26DC
7956  26DD
7957  26DE
7958  26DF
7959  26E0
7960  26E1
7961  26E2
7962  26E3
7963  26E4
7964  26E5
7965  26E6
7966  26E7
7967  26E8
7968  26E9
7969  26EA
7970  26EB
7971  26EC
7972  26ED
7973  26EE
7974  26EF
7975  26F0
7976  26F1
7977  26F2
7978  26F3
7979  26F4
7980  26F5
7981  26F6
7982  26F7
7983  26F8
7984  26F9
7985  26FA
7986  26FB
7987  26FC
7988  26FD
7989  26FE
7990  26FF
7991  2700
7992  2701
7993  2702
7994  2703
7995  2704
7996  2705
7997  2706
7998  2707
7999  2708
8000  2709
8001  270A
8002  270B
8003  270C
8004  270D
8005  270E
8006  270F
8007  2710
8008  2711
8009  2712
8010  2713
8011  2714
8012  2715
8013  2716
8014  2717
8015  2718
8016  2719
8017  271A
8018  271B
8019  271C
8020  271D
8021  271E
8022  271F
8023  2720
8024  2721
8025  2722
8026  2723
8027  2724
8028  2725
8029  2726
8030  2727
8031  2728
8032  2729
8033  272A
8034  272B
8035  272C
8036  272D
8037  272E
8038  272F
8039  2730
8040  2731
8041  2732
8042  2733
8043  2734
8044  2735
8045  2736
8046  2737
8047  2738
8048  2739
8049  273A
8050  273B
8051  273C
8052  273D
8053  273E
8054  273F
8055  2740
8056  2741
8057  2742
8058  2743
8059  2744
8060  2745
8061  2746
8062  2747
8063  2748
8064  2749
8065  274A
8066  274B
8067  274C
8068  274D
8069  274E
8070  274F
8071  2750
8072  2751
8073  2752
8074  2753
8075  2754
8076  2755
8077  2756
8078  2757
8079  2758
8080  2759
8081  275A
8082  275B
8083  275C
8084  275D
8085  275E
8086  275F
8087  2760
8088  2761
8089  2762
8090  2763
8091  2764
8092  2765
8093  2766
8094  2767
8095  2768
8096  2769
8097  276A
8098  276B
8099  276C
8100  276D
8101  276E
8102  276F
8103  2770
8104  2771
8105  2772
8106  2773
8107  2774
8108  2775
8109  2776
8110  2777
8111  2778
8112  2779
8113  277A
8114  277B
8115  277C
8116  277D
8117  277E
8118  277F
8119  2780
8120  2781
8121  2782
8122  2783
8123  2784
8124  2785
8125  2786
8126  2787
8127  2788
8128  2789
8129  278A
8130  278B
8131  278C
8132  278D
8133  278E
8134  278F
8135  2790
8136  2791
8137  2792
8138  2793
8139  2794
8140  2795
8141  2796
8142  2797
8143  2798
8144  2799
8145  279A
8146  279B
8147  279C
8148  279D
8149  279E
8150  279F
8151  27A0
8152  27A1
8153  27A2
8154  27A3
8155  27A4
8156  27A5
8157  27A6
8158  27A7
8159  27A8
8160  27A9
8161  27AA
8162  27AB
8163  27AC
8164  27AD
8165  27AE
8166  27AF
8167  27B0
8168  27B1
8169  27B2
8170  27B3
8171  27B4
8172  27B5
8173  27B6
8174  27B7
8175  27B8
8176  27B9
8177  27BA
8178  27BB
8179  27BC
8180  27BD
8181  27BE
8182  27BF
8183  27C0
8184  27C1
8185  27C2
8186  27C3
8187  27C4
8188  27C5
8189  27C6
8190  27C7
8191  27C8
8192  27C9
8193  27CA
8194  27CB
8195  27CC
8196  27CD
8197  27CE
8198  27CF
8199  27D0
8200  27D1
8201  27D2
8202  27D3
8203  27D4
8204  27D5
8205  27D6
8206  27D7
8207  27D8
8208  27D9
8209  27DA
8210  27DB
8211  27DC
8212  27DD
8213  27DE
8214  27DF
8215  27E0
8216  27E1
8217  27E2
8218  27E3
8219  27E4
8220  27E5
8221  27E6
8222  27E7
8223  27E8
8224  27E9
8225  27EA
8226  27EB
8227  27EC
8228  27ED
8229  27EE
8230  27EF
8231  27F0
8232  27F1
8233  27F2
8234  27F3
8235  27F4
8236  27F5
8237  27F6
8238  27F7
8239  27F8
8240  27F9
8241  27FA
8242  27FB
8243  27FC
8244  27FD
8245  27FE
8246  27FF
8247  2800
8248  2801
8249  2802
8250  2803
8251  2804
8252  2805
8253  2806
8254  2807
8255  2808
8256  2809
8257  280A
8258  280B
8259  280C
8260  280D
8261  280E
8262  280F
8263  2810
8264  2811
8265  2812
8266  2813
8267  2814
8268  2815
8269  2816
8270  2817
8271  2818
8272  2819
8273  281A
8274  281B
8275  281C
8276  281D
8277  281E
8278  281F
8279  2820
8280  2821
8281  2822
8282  2823
8283  2824
8284  2825
8285  2826
8286  2827
8287  2828
8288  2829
8289  282A
8290  282B
8291  282C
8292  282D
8293  282E
8294  282F
8295  2830
8296  2831
8297  2832
8298  2833
8299  2834
8300  2835
8301  2836
8302  2837
8303  2838
8304  2839
8305  283A
8306  283B
8307  283C
8308  283D
008309  000368        
008310  000369  var hFonts[28] ;
008311  000370  var stringsCV[28] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
8312  145A
8313  145B
8314  145C
8315  145D
8316  145E
8317  145F
8318  1460
8319  1461
8320  1462
8321  1463
8322  1464
8323  1465
8324  1466
8325  1467
8326  1468
8327  1469
8328  146A
8329  146B
8330  146C
8331  146D
8332  146E
8333  146F
8334  1470
8335  1471
8336  1472
8337  1473
8338  1474
8339  1475
8340  1476
8341  1477
8342  1478
8343  1479
8344  147A
8345  147B
8346  147C
8347  147D
8348  147E
8349  147F
8350  1480
8351  1481
8352  1482
8353  1483
8354  1484
8355  1485
8356  1486
8357  1487
8358  1488
8359  1489
8360  148A
8361  148B
8362  148C
8363  148D
8364  148E
8365  148F
8366  1490
8367  1491
008368  000371  // Start P2.inc
008369  000372  var oObjects[MaxTotObjects+1] ;                 // address of objects
008370  000373  var curform ;
008371  000374  var x, y ;
008372  000375  var inputtype, TState, input, object ;
008373  000376  var comRX[40], cmd[CMDLenMAX] ;
008374  000377        
008375  000378  var cs, Ocs ;
008376  000379        
008377  000380  func seroutCS(var op)
008378  000381      serout(op) ;
008379  000382      Ocs ^= op ;
008380  000383  endfunc
008381  000384        
008382  000385  func seroutOcs()
008383  000386      serout(Ocs) ;
008384  000387      Ocs := 0 ;
008385  000388  endfunc
008386  000389        
008387  000390        
008388  000391  func ReadObject(var ObjectType, var ObjectIdx)
008389  000392      var j, k, Objects ;
008390  000393      Objects := *(oObjects+ObjectType) ;
008391  000394        
008392  000395      seroutCS(REPORT_OBJ) ;
008393  000396      seroutCS(ObjectType) ;
008394  000397      seroutCS(ObjectIdx) ;
008395  000398      j := 2 + ObjectIdx * 2 + Objects ;
008396  000399       if (ObjectType == tForm)
008397  000400          k := curform ;
008398  000401      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
008399  000402          k := img_GetWord(hndl, *j, IMAGE_TAG2);
008400  000403      else if (ObjectType == tStrings)
008401  000404          k := stringsCV[ObjectIdx];
008402  000405          else
008403  000406          k := img_GetWord(hndl, *j, IMAGE_INDEX);
008404  000407          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot 
008405  000408                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
008406  000409      endif
008407  000410      seroutCS(k >> 8) ; // first 8 bits
008408  000411      seroutCS(k) ;
008409  000412      seroutOcs() ;
008410  000413  endfunc
008411  000414        
008412  000415        
008413  000416  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
008414  000417      var i, j, k, Objects ;
008415  000418      ObjectType &= 0x3f ;
008416  000419      if (ObjectType == tForm)
008417  000420          ActivateForm(ObjectIdx) ;
008418  000421      else
008419  000422          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
008420  000423          i := *(Objects) ;
008421  000424          switch (ObjectType)
008422  000425              case tWinButton :
008423  000426                  j := IPControls[oWinButtons[ObjectIdx+1]] ;
008424  000427                  break ;
008425  000428              case tUserButton :
008426  000429                  j := IPControls[oUserButtons[ObjectIdx+1]] ;
008427  000430                  break ;
008428  000431              default : j := -1 ;
008429  000432          endswitch
008430  000433          if (j != -1) 
008431  000434              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
008432  000435              NewVal := NewVal << 1 ;  
008433  000436              if (OVF())      // button group index change
008434  000437                  if (*(j+IPData+IPD_P1))   
008435  000438                      k &= 1 ;    // mask off old group index for momentary
008436  000439                  else
008437  000440                      k &= 3 ;    // mask off old group index for toggle
008438  000441                  endif
008439  000442              else            // normal set
008440  000443                  if (*(j+IPData+IPD_P2) != -1) TurnOffButtons(*(j+IPData+IPD_P2)) ;
008441  000444                  k &= 0xfffc ;    // retain only group index for state set
008442  000445              endif
008443  000446              NewVal |= k ;
008444  000447          endif
008445  000448           if (ObjectType == tLeddigits)
008446  000449              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
008447  000450              ledDigitsDisplay(i, oLeddigitss, OPDataL) ;
008448  000451          else if (ObjectType == tStrings)
008449  000452              PrintStrings(ObjectIdx, NewVal, 0);
008450  000453          else
008451  000454              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
008452  000455              img_Show(hndl, i) ; // will only display if form is current
008453  000456          endif
008454  000457      endif
008455  000458  endfunc
008456  000459        
008457  000460  func TurnOffButtons(var group)
008458  000461      var j, k, l;
008459  000462      for (j := 0; j < nInputs; j++)
008460  000463          k := j*IPDatasize ;
008461  000464          if (*(IPData+k+IPD_P2) == group)
008462  000465              l := -1 ;
008463  000466               if (*(IPData+k) == tWinButton)
008464  000467                  l := oWinButtons[*(IPData+k+IPD_OBJVidx)/2] ;
008465  000468                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
008466  000469                  img_Show(hndl, l);      // only shows on current form
008467  000470              else if (*(IPData+k) == tUserButton)
008468  000471                  l := oUserButtons[*(IPData+k+IPD_OBJVidx)/2] ;
008469  000472                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
008470  000473                  img_Show(hndl, l);      // only shows on current form
008471  000474              endif
008472  000475          endif
008473  000476      next
008474  000477  endfunc
008475  000478        
008476  000479        
008477  000480  // WARNING, this code will crash if newval exceeds maximum displayable number
008478  000481  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
008479  000482      var i, j, k, l, lb, newval ;
008480  000483      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
008481  000484      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
008482  000485      i := -1 ;
008483  000486      j := *(typeptr) ;
008484  000487      repeat
008485  000488          typeptr += 2 ;
008486  000489          i++ ;
008487  000490          until (*(typeptr) == imgidx);
008488  000491      j := setptr + i*10 ;
008489  000492        
008490  000493      imgidx++ ;
008491  000494      l := 1 ;
008492  000495      for (i := 1; i < *(j+iDigits); i++)
008493  000496          l *= 10 ;
008494  000497      next
008495  000498      lb := *(j+iLeadingBlanks) ;
008496  000499      for (i := 0; i < *(j+iDigits); i++)
008497  000500          k := newval / l ;
008498  000501          newval -= k * l ;
008499  000502          if ( lb && (i < *(j+iDigits) - *(j+iMinDigits)) )
008500  000503              if (k == 0)
008501  000504                  k := 10 ;
008502  000505              else
008503  000506                  lb := 0 ;
008504  000507              endif
008505  000508          endif
008506  000509          l /= 10 ;
008507  000510          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
008508  000511          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+ileft)+i* *(j+iWidthDigit)) ;
008509  000512          img_Show(hndl, imgidx);
008510  000513      next
008511  000514  endfunc
008512  000515        
008513  000516        
008514  000517  func ActivateForm(var newform)
008515  000518      var i, j, *p ;
008516  000519      if (curform != -1) // deactivate old form, by disabling all inputs
008517  000520          for (i := formstidx[curform]; i <= formenidx[curform]; i++)
008518  000521              if (img_GetWord(hndl, i, IMAGE_TAG))
008519  000522                  img_Disable(hndl,i) ;
008520  000523              endif
008521  000524          next
008522  000525      endif
008523  000526      curform := newform ;
008524  000527      // display newform image or clear to image color
008525  000528      if (formBGcol[curform] != BGIMAGE)
008526  000529          gfx_Set(BACKGROUND_COLOUR,formBGcol[curform]);
008527  000530          gfx_Cls() ;
008528  000531          DoGFXObjects() ;                                    // display GFX 'widgets'
008529  000532      endif
008530  000533        
008531  000534      // enable inputs
008532  000535      for (i := formstidx[curform]; i < formenidx[curform]; i++)
008533  000536          j := img_GetWord(hndl, i, IMAGE_TAG) ;
008534  000537          if (j)
008535  000538              j-- ;
008536  000539              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
008537  000540              //if (j != tKeyboard)
008538  000541              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
008539  000542                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
008540  000543              endif
008541  000544              img_Show(hndl,i) ; // show initialy, if required
008542  000545              if (j == tForm)
008543  000546                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
008544  000547              else if (j == tLeddigits)
008545  000548                  ledDigitsDisplay(i, oLeddigitss, OPDataL) ;
008546  000549              endif
008547  000550          endif
008548  000551      next
008549  000552      for (i := 0; i < oStringss[0]; i++)
008550  000553          if (stringsCV[i] != -1)
008551  000554              WriteObject(tStrings, i, stringsCV[i]) ;
008552  000555          endif
008553  000556      next
008554  000557  endfunc
008555  000558        
008556  000559  func UpdateObjects(var newval)
008557  000560      var IPidx, otherOBJ ;
008558  000561      if ( ( img_GetWord(hndl, *(object), IMAGE_INDEX) != newval) || (TState == IPD_RELEASE) ) // only bother if values changed, or release
008559  000562        
008560  000563          img_SetWord(hndl, *(object), IMAGE_INDEX, newval);
008561  000564  // temp for **User??       if ((inputtype != tUserButton) || (!*(input+IPD_P1)))
008562  000565              img_Show(hndl, *(object));      // only shows on current form
008563  000566  //        endif
008564  000567          if ((inputtype == t4Dbutton) || (inputtype == tUserButton) || (inputtype == tWinButton)) 
008565  000568              if (*(input+IPD_P1))
008566  000569                  newval &= 1;
008567  000570              else
008568  000571                  newval &= 3;
008569  000572              endif
008570  000573              if (newval > 1) newval := 1;
008571  000574          endif
008572  000575          IPidx := *(input+TState) ;
008573  000576          while(IPidx != 0)
008574  000577              otherOBJ := IPidx + IPData;
008575  000578              if (*(otherOBJ) == OT_REPORT)
008576  000579                  seroutCS(REPORT_EVENT) ;
008577  000580                  seroutCS(inputtype) ;
008578  000581                  seroutCS(*(otherOBJ+IPD_OBJVidx)) ;
008579  000582                  seroutCS(newval >> 8) ;
008580  000583                  seroutCS(newval) ;
008581  000584                  seroutOcs() ;
008582  000585              else if (TState == *(otherOBJ+IPD_P4))
008583  000586                  if (*(otherOBJ) == OT_ACTIVATE)
008584  000587                      ActivateForm(*(otherOBJ+IPD_P2) ) ;
008585  000588                      inputtype := tForm ;
008586  000589                  else if (*(otherOBJ) == OT_SETCONST)
008587  000590                      newval := *(otherOBJ+IPD_P3) ;
008588  000591                      WriteObject(*(otherOBJ+IPD_P1), *(otherOBJ+IPD_P2), newval) ;
008589  000592                  else if (*(otherOBJ) == OT_SETANOTHER)
008590  000593                      WriteObject(*(otherOBJ+IPD_P1), *(otherOBJ+IPD_P2), newval) ;
008591  000594                  else if (*(otherOBJ) == OT_PREVFRAME)
008592  000595                      if (img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX))
008593  000596                          WriteObject(*(otherOBJ+IPD_P5),*(otherOBJ+IPD_P2),img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX)-1) ;
008594  000597                      endif
008595  000598                      newval := img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX) ;
008596  000599                  else if (*(otherOBJ) == OT_NEXTFRAME)
008597  000600                      if (img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX) < *(otherOBJ+IPD_P3)) 
008598  000601                          WriteObject(*(otherOBJ+IPD_P5),*(otherOBJ+IPD_P2),img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX)+1) ;
008599  000602                      endif
008600  000603                      newval := img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX) ;
008601  000604                  else if (*(otherOBJ) == OT_PREVSTRING)
008602  000605                      if (stringsCV[*(otherOBJ+IPD_P2)])
008603  000606                          WriteObject(tStrings,*(otherOBJ+IPD_P2),stringsCV[*(otherOBJ+IPD_P2)]-1) ;
008604  000607                      endif
008605  000608                  else if (*(otherOBJ) == OT_NEXTSTRING)
008606  000609                      if (stringsCV[*(otherOBJ+IPD_P2)] < *(otherOBJ+IPD_P3)) // fix IPD_P2 not filled in yet
008607  000610                          WriteObject(tStrings,*(otherOBJ+IPD_P2),stringsCV[*(otherOBJ+IPD_P2)]+1) ;
008608  000611                      endif
008609  000612                  endif
008610  000613              endif
008611  000614              IPidx := *(otherOBJ+TState) ;
008612  000615          wend
008613  000616      endif
008614  000617  endfunc
008615  000618        
008616  000619  // End P2.inc
008617  000620  func DoGFXObjects()
008618  000621      switch (curform)
008619  000622          case 2:
008620  000623              gfx_Panel(PANEL_RAISED, 80, 44, 162, 135, WHEAT) ;
008621  000624          break ;
008622  000625      endswitch
008623  000626  endfunc
008624  000627        
008625  000628  // Start P3.inc
008626  000629  func main()
008627  000630      var comTX[50], cmdi, i, j, n, state, oldn ;
008628  000631      putstr("Mounting...\n");
008629  000632      if (!(disk:=file_Mount()))
008630  000633          while(!(disk :=file_Mount()))
008631  000634              putstr("Drive not mounted...");
008632  000635              pause(200);
008633  000636              gfx_Cls();
008634  000637              pause(200);
008635  000638          wend
008636  000639      endif
008637  000640  //    gfx_MoveTo(0, 0);
008638  000641  //    print(mem_Heap()," ") ;
008639  000642  //    gfx_TransparentColour(0x0020);
008640  000643  //    gfx_Transparency(ON);
008641  000644        
008642  000645      gfx_ScreenMode(LANDSCAPE_R) ;
008643  000646        
008644  000647      // open image control
008645  000648      hndl := file_LoadImageControl("REPRAP~1.dat", "REPRAP~1.gci", 1);
008646  000649        
008647  000650      // init 'constants'
008648  000651  // End P3.inc
008649  000652        
008650  000653      oObjects[tDipSwitch] := oDipSwitchs ;
008651  000654      oObjects[tKnob] := oKnobs ;
008652  000655      oObjects[tRockerSwitch] := oRockerSwitchs ;
008653  000656      oObjects[tRotarySwitch] := oRotarySwitchs ;
008654  000657      oObjects[tGSlider] := oGSliders ;
008655  000658      oObjects[tTrackbar] := oTrackbars ;
008656  000659      oObjects[tWinButton] := oWinButtons ;
008657  000660      oObjects[tAngularmeter] := oAngularmeters ;
008658  000661      oObjects[tCoolgauge] := oCoolgauges ;
008659  000662      oObjects[tCustomdigits] := oCustomdigitss ;
008660  000663      oObjects[tForm] := oForms ;
008661  000664      oObjects[tGauge] := oGauges ;
008662  000665      oObjects[tImage] := oImages ;
008663  000666      oObjects[tKeyboard] := oKeyboards ;
008664  000667      oObjects[tLed] := oLeds ;
008665  000668      oObjects[tLeddigits] := oLeddigitss ;
008666  000669      oObjects[tMeter] := oMeters ;
008667  000670      oObjects[tStrings] := oStringss ;
008668  000671      oObjects[tThermometer] := oThermometers ;
008669  000672      oObjects[tUserled] := oUserleds ;
008670  000673      oObjects[tVideo] := oVideos ;
008671  000674      oObjects[tStaticText] := oStaticTexts ;
008672  000675      oObjects[tSounds] := oSoundss ;
008673  000676      oObjects[tTimer] := oTimers ;
008674  000677      oObjects[tSpectrum] := oSpectrums ;
008675  000678      oObjects[tTank] := oTanks ;
008676  000679      oObjects[tUserImages] := oUserImagess ;
008677  000680      oObjects[tPinOutput] := oPinOutputs ;
008678  000681      oObjects[tPinInput] := oPinInputs ;
008679  000682      oObjects[t4Dbutton] := o4Dbuttons ;
008680  000683      oObjects[tAniButton] := oAniButtons ;
008681  000684      oObjects[tColorPicker] := oColorPickers ;
008682  000685      oObjects[tUserButton] := oUserButtons ;
008683  000686      hFonts[0] := FONT3 ;
008684  000687      hFonts[1] := FONT3 ;
008685  000688      hFonts[2] := FONT3 ;
008686  000689      hFonts[3] := FONT3 ;
008687  000690      hFonts[4] := FONT3 ;
008688  000691      hFonts[6] := FONT3 ;
008689  000692      hFonts[7] := FONT3 ;
008690  000693      hFonts[8] := FONT3 ;
008691  000694      hFonts[9] := FONT3 ;
008692  000695      hFonts[10] := FONT3 ;
008693  000696      hFonts[11] := FONT3 ;
008694  000697      hFonts[12] := FONT3 ;
008695  000698      hFonts[13] := FONT3 ;
008696  000699      hFonts[14] := FONT3 ;
008697  000700      hFonts[15] := FONT3 ;
008698  000701      hFonts[16] := FONT3 ;
008699  000702      hFonts[17] := FONT3 ;
008700  000703      hFonts[18] := FONT3 ;
008701  000704      hFonts[19] := FONT3 ;
008702  000705      hFonts[20] := FONT3 ;
008703  000706      hFonts[21] := FONT3 ;
008704  000707      hFonts[22] := FONT3 ;
008705  000708      hFonts[23] := FONT3 ;
008706  000709      hFonts[24] := FONT3 ;
008707  000710      hFonts[25] := file_LoadImageControl("REPRAP~1.da1", "REPRAP~1.gc1", 1)  ;
008708  000711      hFonts[26] := hFonts[25] ;
008709  000712      hFonts[27] := hFonts[25] ;
008710  000713  // Start P4.inc
008711  000714      hstrings := file_Open("REPRAP~1.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
008712  000715      // init comms
008713  000716      com_Init(comRX,CMDLenMAX,0);
008714  000717      com_SetBaud(COM0,20000);
008715  000718      com_TXbuffer(comTX, 100, 0);
008716  000719      snd_BufSize(2) ;
008717  000720      // tag 'real' objects
008718  000721      for (i := 0; i <= MaxTotObjects; i++)
008719  000722          if (   (i != tSounds)
008720  000723              && (i != tTimer)
008721  000724              && (i != tPinOutput)
008722  000725              && (i != tPinInput) )
008723  000726              x := oObjects[i] ;
008724  000727              y := *(x) ;
008725  000728              for (n := 1; n <= y; n++)
008726  000729                  oldn := *(x+n*2) ;
008727  000730                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
008728  000731                  if (oldn != -1)
008729  000732                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
008730  000733                      img_Disable(hndl, oldn) ;
008731  000734                  endif
008732  000735              next
008733  000736          endif
008734  000737      next
008735  000738        
008736  000739      // display initial form
008737  000740      curform := -1 ;
008738  000741      ActivateForm(0) ; // need to change this according to first actual form
008739  000742  // End P4.inc
008740  000743  // Start P5.inc
008741  000744      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
008742  000745      oldn := -1 ;
008743  000746      repeat
008744  000747          // check comms for command, how to NAK invalid command
008745  000748          if (com_Count() != 0)
008746  000749              i := serin() ;
008747  000750              cs ^= i ;               // update checksum
008748  000751              if (   (cmdi > 2)
008749  000752                  && (cmd[0] == WRITE_STRU) )
008750  000753                  j := (cmdi-1) >> 1 + 2 ;
008751  000754                  if (j == CMDLenMAX)    // max length exceeded
008752  000755                      serout(NAK) ;
008753  000756                      cs := 0 ;
008754  000757                      cmdi := -1 ;
008755  000758                  else if (cmdi & 1)
008756  000759                      cmd[j] := i ;
008757  000760                      if (cmd[2] == 0)    // if string complete
008758  000761                          if (cs)
008759  000762                              serout(NAK) ;
008760  000763                              cs := 0 ;
008761  000764                          else
008762  000765                              cmd[j] := 0 ;                     // terminate it
008763  000766                              PrintStrings(cmd[1], &cmd[3], 1) ;
008764  000767                              serout(ACK) ;
008765  000768                          endif
008766  000769                          cmdi := -1 ;
008767  000770                      endif
008768  000771                  else
008769  000772                      cmd[j] := cmd[j] << 8 + i ;
008770  000773                      cmd[2]-- ;          // dec length
008771  000774                  endif
008772  000775                  cmdi++ ;
008773  000776              else // not unicode string
008774  000777                  cmd[cmdi++] := i ;
008775  000778                   if (cmd[0] == WRITE_STR)        // ansi string
008776  000779                      if (cmdi == CMDLenMAX)      // max length exceeded
008777  000780                          serout(NAK) ;
008778  000781                          cs := 0 ;
008779  000782                          cmdi := 0 ;
008780  000783                      else if (cmdi > 2)
008781  000784                          if (cmd[2] == -1)
008782  000785                              if (cs)
008783  000786                                  serout(NAK) ;
008784  000787                                  cs := 0 ;
008785  000788                              else
008786  000789                                  cmd[cmdi-1] := 0 ;                     // terminate it
008787  000790                                  PrintStrings(cmd[1], &cmd[3], 1) ;
008788  000791                                  serout(ACK) ;
008789  000792                              endif
008790  000793                              cmdi := 0 ;
008791  000794                          else
008792  000795                              cmd[2]-- ;          // dec length
008793  000796                          endif
008794  000797                      endif
008795  000798                  else if (   (cmd[0] == READ_OBJ)
008796  000799                           && (cmdi == 4)         )
008797  000800                      if (cs)
008798  000801                          serout(NAK) ;
008799  000802                          cs := 0 ;
008800  000803                      else
008801  000804                          ReadObject(cmd[1], cmd[2]) ;
008802  000805                      endif
008803  000806                      cmdi := 0 ;
008804  000807                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
008805  000808                           && (cmdi == 6)          )
008806  000809                      if (cs)
008807  000810                          serout(NAK) ;
008808  000811                          cs := 0 ;
008809  000812                      else
008810  000813                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
008811  000814                          serout(ACK) ;
008812  000815                      endif
008813  000816                      cmdi := 0 ;
008814  000817                  else if (   (cmd[0] == WRITE_CONTRAST)
008815  000818                           && (cmdi == 3)         )
008816  000819                      if (cs)
008817  000820                          serout(NAK) ;
008818  000821                          cs := 0 ;
008819  000822                      else
008820  000823                          gfx_Contrast(cmd[1]) ;
008821  000824                          serout(ACK) ;
008822  000825                      endif
008823  000826                      cmdi := 0 ;
008824  000827                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
008825  000828                      serout(NAK) ;
008826  000829                      cs := 0 ;
008827  000830                      cmdi := 0 ;
008828  000831                  endif
008829  000832              endif   // not unicode string
008830  000833          endif   // a character is available
008831  000834        
008832  000835        
008833  000836      // touch code processing
008834  000837        
008835  000838          state := touch_Get(TOUCH_STATUS);               // get touchscreen status
008836  000839          n := img_Touched(hndl,-1) ;
008837  000840          if ((state == TOUCH_PRESSED) || (state == TOUCH_RELEASED) || (state == TOUCH_MOVING))
008838  000841              if ((state != TOUCH_RELEASED) && (n != oldn) && (oldn != -1)) 
008839  000842                  state := TOUCH_RELEASED ;       // simulate release if we move off object
008840  000843              endif
008841  000844              if (state != TOUCH_RELEASED)        // if not released
008842  000845                  if (oldn != -1) 
008843  000846                      n := oldn ;
008844  000847                  else 
008845  000848                      oldn := n ;
008846  000849                      state := TOUCH_PRESSED ;
008847  000850                  endif
008848  000851                  x  := touch_Get(TOUCH_GETX);
008849  000852                  y  := touch_Get(TOUCH_GETY);
008850  000853                  TState := IPD_DOWN ;
008851  000854              else
008852  000855                  n := oldn ;                     // simulate release of what we touched
008853  000856                  oldn := -1 ;                    // prevent double release
008854  000857                  TState := IPD_RELEASE ;
008855  000858              endif
008856  000859              if (n != -1)
008857  000860                          input := IPControls[n] + IPData;
008858  000861                          inputtype := *(input) ;
008859  000862                          i := inputtype ;
008860  000863                          if (inputtype >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
008861  000864                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
008862  000865              endif
008863  000866          endif
008864  000867   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
008865  000868        
008866  000869          sys_EventsResume() ;
008867  000870      forever
008868  000871        
008869  000872  cDipswitch:
008870  000873        
008871  000874  cKnob:
008872  000875        
008873  000876  cRockerswitch:
008874  000877        
008875  000878  cRotaryswitch:
008876  000879        
008877  000880  cSlider:
008878  000881  cTrackbar:
008879  000882        
008880  000883  c4DButton:
008881  000884  cUserButton:
008882  000885      object := oUserButtons + *(input+IPD_OBJVidx) ;
008883  000886      goto gbutton ;
008884  000887  cWinbutton:
008885  000888      object := oWinButtons + *(input+IPD_OBJVidx) ;
008886  000889  gbutton:
008887  000890      i := img_GetWord(hndl, *(object), IMAGE_INDEX) ; // current state
008888  000891      if (*(input+IPD_P1))                                 // momentary, reports 0, but should report 1
008889  000892          if (state == TOUCH_RELEASED)
008890  000893              i &= 0xfffe ;
008891  000894              TState == IPD_DOWN ;
008892  000895          else
008893  000896              i |= 1 ;
008894  000897              TState == IPD_RELEASE ;
008895  000898          endif
008896  000899      else if (*(input+IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
008897  000900          if (state == TOUCH_RELEASED)                     // only truly change on release
008898  000901              if ((i & 3) == 3)
008899  000902                  i &= 0xfffc ;
008900  000903              else
008901  000904                  i++ ;
008902  000905              endif
008903  000906          else
008904  000907              i |= 1 ;                                      // make down regardless of current state
008905  000908          endif
008906  000909      else                        // group action, up all other buttons on touch press, reports 0 for button down
008907  000910          if (state == TOUCH_PRESSED)                     // only truly change on release
008908  000911              TurnOffButtons(*(input+IPD_P2)) ;
008909  000912          endif
008910  000913          i := (i & 0xfffc) | 2 ;
008911  000914      endif
008912  000915        
008913  000916      UpdateObjects(i) ;
008914  000917  endsub ;
008915  000918        
008916  000919  cAniButton:
008917  000920        
008918  000921  cColorPicker:
008919  000922        
008920  000923  endfunc
008921  000924  // End P5.inc
Notice: local var 'p' in func 'ActivateForm' is never used (line 518 file:RepRap_Touchv1.4DGenieS)


Symbol Table:
name                 decimal    hex
_1F                                  -40  0xffffffd8 (PmmC func) args[0] r=0  (not used)
__MAXMEM                           14400  0x00003840 (const dword)  (usage 1)
__MAXPROG                          14400  0x00003840 (const dword)  (usage 1)
__PLATFORM                             1  0x00000001 (const dword)  (not used)
ABS                                  -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                        7855  0x00001eaf (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ANITIMERS                              0  0x00000000 (const dword)  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                           7  0x00000007 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BACKLITE                               6  0x00000006 (const dword)  (not used)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BGIMAGE                               32  0x00000020 (const dword)  (usage 6)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 75)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (usage 6)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
BUS_0                                  8  0x00000008 (const dword)  (not used)
BUS_1                                  9  0x00000009 (const dword)  (not used)
BUS_2                                 10  0x0000000a (const dword)  (not used)
BUS_3                                 11  0x0000000b (const dword)  (not used)
BUS_4                                 12  0x0000000c (const dword)  (not used)
BUS_5                                 13  0x0000000d (const dword)  (not used)
BUS_6                                 14  0x0000000e (const dword)  (not used)
BUS_7                                 15  0x0000000f (const dword)  (not used)
bus_In                               -45  0xffffffd3 (PmmC func) args[0] r=1  (not used)
bus_Out                              -46  0xffffffd2 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                             -49  0xffffffcf (PmmC func) args[0] r=1  (not used)
bus_Set                              -47  0xffffffd1 (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             5  0x00000005 (const dword)  (not used)
bus_Write                            -48  0xffffffd0 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                            -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                          -159  0xffffff61 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                           -158  0xffffff62 (PmmC func) args[1] r=1  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
CKMODE_0                               0  0x00000000 (const dword)  (not used)
CKMODE_1                               1  0x00000001 (const dword)  (not used)
CKMODE_2                               2  0x00000002 (const dword)  (not used)
CKMODE_3                               3  0x00000003 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  280  0x00000118 (mem) word[80] (global)  (usage 78)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COLOUR_MODE                           27  0x0000001b (const dword)  (not used)
COLUMN_ADDRESS_END1                    5  0x00000005 (const dword)  (not used)
COLUMN_ADDRESS_END2                    4  0x00000004 (const dword)  (not used)
COLUMN_ADDRESS_START1                  3  0x00000003 (const dword)  (not used)
COLUMN_ADDRESS_START2                  2  0x00000002 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63496  0x0000f808 (const dword)  (not used)
com1_Count                          -132  0xffffff7c (PmmC func) args[0] r=1  (not used)
com1_Error                          -134  0xffffff7a (PmmC func) args[0] r=1  (not used)
com1_Full                           -133  0xffffff7b (PmmC func) args[0] r=1  (not used)
com1_Init                           -130  0xffffff7e (PmmC func) args[3] r=0  (not used)
com1_Reset                          -131  0xffffff7d (PmmC func) args[0] r=0  (not used)
com1_Sync                           -135  0xffffff79 (PmmC func) args[0] r=1  (not used)
com1_TXbuffer                       -136  0xffffff78 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -139  0xffffff75 (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -137  0xffffff77 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -138  0xffffff76 (PmmC func) args[1] r=1  (not used)
com_Count                           -122  0xffffff86 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -124  0xffffff84 (PmmC func) args[0] r=1  (not used)
com_Full                            -123  0xffffff85 (PmmC func) args[0] r=1  (not used)
com_Init                            -120  0xffffff88 (PmmC func) args[3] r=0  (usage 3)
com_Reset                           -121  0xffffff87 (PmmC func) args[0] r=0  (not used)
com_SetBaud                         -142  0xffffff72 (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -125  0xffffff83 (PmmC func) args[0] r=1  (not used)
com_TXbuffer                        -126  0xffffff82 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -129  0xffffff7f (PmmC func) args[1] r=1  (not used)
com_TXcount                         -127  0xffffff81 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -128  0xffffff80 (PmmC func) args[1] r=1  (not used)
comRX                                200  0x000000c8 (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -18  0xffffffee (PmmC func) args[1] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cs                                   440  0x000001b8 (mem) word (global)  (usage 42)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
curform                              186  0x000000ba (mem) word (global)  (usage 45)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                  -285  0xfffffee3 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
CYCLE_CONTROL_1                       58  0x0000003a (const dword)  (not used)
CYCLE_CONTROL_2                       59  0x0000003b (const dword)  (not used)
CYCLE_CONTROL_3                       60  0x0000003c (const dword)  (not used)
CYCLE_CONTROL_4                       61  0x0000003d (const dword)  (not used)
CYCLE_CONTROL_5                       62  0x0000003e (const dword)  (not used)
CYCLE_CONTROL_6                       64  0x00000040 (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (usage 6)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (not used)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
disk                                   0  0x00000000 (mem) word (global)  (usage 6)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_Disconnect                     -293  0xfffffedb (PmmC func) args[0] r=0  (not used)
disp_Init                           -143  0xffffff71 (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -149  0xffffff6b (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -145  0xffffff6f (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -144  0xffffff70 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -284  0xfffffee4 (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -147  0xffffff6d (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -148  0xffffff6c (PmmC func) args[1] r=0  (not used)
DISPLAY_CONTROL_1                     38  0x00000026 (const dword)  (not used)
DISPLAY_CONTROL_10                    54  0x00000036 (const dword)  (not used)
DISPLAY_CONTROL_14                    65  0x00000041 (const dword)  (not used)
DISPLAY_CONTROL_2                     39  0x00000027 (const dword)  (not used)
DISPLAY_CONTROL_3                     40  0x00000028 (const dword)  (not used)
DISPLAY_CONTROL_4                     41  0x00000029 (const dword)  (not used)
DISPLAY_CONTROL_5                     42  0x0000002a (const dword)  (not used)
DISPLAY_CONTROL_6                     44  0x0000002c (const dword)  (not used)
DISPLAY_CONTROL_7                     45  0x0000002d (const dword)  (not used)
DISPLAY_CONTROL_8                    144  0x00000090 (const dword)  (not used)
DISPLAY_CONTROL_9                     53  0x00000035 (const dword)  (not used)
DISPLAY_MODE_CONTROL                   1  0x00000001 (const dword)  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                        7165  0x00001bfd (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                              -282  0xfffffee6 (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                           -283  0xfffffee5 (PmmC func) args[0] r=1  (not used)
F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS    2710  0x00000a96 (const ??? 0)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -232  0xffffff18 (PmmC func) args[1] r=1  (not used)
file_Count                          -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -247  0xffffff09 (PmmC func) args[1] r=1  (not used)
file_Error                          -225  0xffffff1f (PmmC func) args[0] r=1  (not used)
file_Exec                           -251  0xffffff05 (PmmC func) args[2] r=1  (not used)
file_Exists                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
file_FindNext                       -229  0xffffff1b (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -242  0xffffff0e (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -246  0xffffff0a (PmmC func) args[3] r=1  (not used)
file_GetW                           -244  0xffffff0c (PmmC func) args[1] r=1  (usage 3)
file_Image                          -239  0xffffff11 (PmmC func) args[3] r=1  (not used)
file_Index                          -235  0xffffff15 (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -249  0xffffff07 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -252  0xffffff04 (PmmC func) args[3] r=1  (usage 6)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -253  0xffffff03 (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -231  0xffffff19 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -255  0xffffff01 (PmmC func) args[1] r=1  (not used)
file_PutC                           -241  0xffffff0f (PmmC func) args[2] r=1  (not used)
file_PutS                           -245  0xffffff0b (PmmC func) args[2] r=1  (not used)
file_PutW                           -243  0xffffff0d (PmmC func) args[2] r=1  (not used)
file_Read                           -233  0xffffff17 (PmmC func) args[3] r=1  (not used)
file_Rewind                         -248  0xffffff08 (PmmC func) args[1] r=1  (not used)
file_Run                            -250  0xffffff06 (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -240  0xffffff10 (PmmC func) args[5] r=1  (not used)
file_Seek                           -234  0xffffff16 (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_Size                           -238  0xffffff12 (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -236  0xffffff14 (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -254  0xffffff02 (PmmC func) args[0] r=0  (not used)
file_Write                          -237  0xffffff13 (PmmC func) args[3] r=1  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_BlockErase                    -157  0xffffff63 (PmmC func) args[1] r=1  (not used)
flash_BulkErase                     -156  0xffffff64 (PmmC func) args[0] r=0  (not used)
flash_ID                            -155  0xffffff65 (PmmC func) args[0] r=1  (not used)
flash_SIG                           -154  0xffffff66 (PmmC func) args[0] r=1  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
FONT1                                  0  0x00000000 (const dword)  (not used)
FONT2                                  1  0x00000001 (const dword)  (not used)
FONT3                                  2  0x00000002 (const dword)  (usage 72)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
formBGcol                           4887  0x00001317formBGcol                           4887  0x00001317 (mem) word[23] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 8)
formBGcol                         UNRESOLVED  (usage 4)
formenidx                             53  0x00000035formenidx                             53  0x00000035 (mem) word[23] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
formstidx                              7  0x00000007formstidx                              7  0x00000007 (mem) word[23] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
formstidx                         UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
GAMMA_CONTROL_1                       70  0x00000046 (const dword)  (not used)
GAMMA_CONTROL_10                      79  0x0000004f (const dword)  (not used)
GAMMA_CONTROL_11                      80  0x00000050 (const dword)  (not used)
GAMMA_CONTROL_12                      81  0x00000051 (const dword)  (not used)
GAMMA_CONTROL_2                       71  0x00000047 (const dword)  (not used)
GAMMA_CONTROL_3                       72  0x00000048 (const dword)  (not used)
GAMMA_CONTROL_4                       73  0x00000049 (const dword)  (not used)
GAMMA_CONTROL_5                       74  0x0000004a (const dword)  (not used)
GAMMA_CONTROL_6                       75  0x0000004b (const dword)  (not used)
GAMMA_CONTROL_7                       76  0x0000004c (const dword)  (not used)
GAMMA_CONTROL_8                       77  0x0000004d (const dword)  (not used)
GAMMA_CONTROL_9                       78  0x0000004e (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                         -85  0xffffffab (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -104  0xffffff98 (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -103  0xffffff99 (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                         -92  0xffffffa4 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                            -74  0xffffffb6 (PmmC func) args[2] r=0  (not used)
gfx_Bullet                           -71  0xffffffb9 (PmmC func) args[1] r=0  (not used)
gfx_Button                           -80  0xffffffb0 (PmmC func) args[9] r=0  (not used)
GFX_BUTTON_BACKGROUND                 64  0x00000040 (const dword)  (not used)
GFX_BUTTON_FOREGROUND                 63  0x0000003f (const dword)  (not used)
GFX_BUTTON_MODE                       65  0x00000041 (const dword)  (not used)
gfx_ChangeColour                     -76  0xffffffb4 (PmmC func) args[2] r=0  (not used)
gfx_Circle                           -61  0xffffffc3 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                     -62  0xffffffc2 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                         -94  0xffffffa2 (PmmC func) args[1] r=0  (usage 6)
gfx_ClipWindow                       -75  0xffffffb5 (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                              -51  0xffffffcd (PmmC func) args[0] r=0  (usage 6)
gfx_ColourMode                      -102  0xffffff9a (PmmC func) args[1] r=1  (not used)
gfx_Contrast                        -100  0xffffff9c (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                              -70  0xffffffba (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                          -78  0xffffffb2 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                    -79  0xffffffb1 (PmmC func) args[5] r=0  (not used)
gfx_FrameDelay                       -97  0xffffff9f (PmmC func) args[1] r=1  (not used)
gfx_Get                              -90  0xffffffa6 (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                         -64  0xffffffc0 (PmmC func) args[2] r=1  (not used)
GFX_HILIGHT_BACKGROUND                61  0x0000003d (const dword)  (not used)
GFX_HILIGHT_FOREGROUND                62  0x0000003e (const dword)  (not used)
GFX_HILITE_LINE                       58  0x0000003a (const dword)  (not used)
gfx_Hline                            -57  0xffffffc7 (PmmC func) args[4] r=1  (not used)
gfx_IncX                             -72  0xffffffb8 (PmmC func) args[0] r=1  (not used)
gfx_IncY                             -73  0xffffffb7 (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_SELECTION                    60  0x0000003c (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
GFX_LEFT_GUTTER_WIDTH                 68  0x00000044 (const dword)  (not used)
gfx_Line                             -56  0xffffffc8 (PmmC func) args[5] r=0  (not used)
GFX_LINE_COUNT                        59  0x0000003b (const dword)  (not used)
gfx_LinePattern                     -101  0xffffff9b (PmmC func) args[1] r=1  (not used)
gfx_LineRel                          -55  0xffffffc9 (PmmC func) args[2] r=0  (not used)
gfx_LineTo                           -54  0xffffffca (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                          -53  0xffffffcb (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                           -52  0xffffffcc (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                     -93  0xffffffa3 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                            -67  0xffffffbd (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                        -66  0xffffffbe (PmmC func) args[2] r=0  (not used)
gfx_Origin                           -89  0xffffffa7 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                    -99  0xffffff9d (PmmC func) args[1] r=1  (not used)
gfx_Panel                            -81  0xffffffaf (PmmC func) args[6] r=0  (usage 3)
gfx_PenSize                          -91  0xffffffa5 (PmmC func) args[1] r=1  (not used)
GFX_PIXEL_SHIFT                       70  0x00000046 (const dword)  (not used)
gfx_Polygon                          -69  0xffffffbb (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                    -88  0xffffffa8 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                         -68  0xffffffbc (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                         -63  0xffffffc1 (PmmC func) args[3] r=0  (not used)
GFX_RECT_X1                           71  0x00000047 (const dword)  (not used)
GFX_RECT_X2                           73  0x00000049 (const dword)  (not used)
GFX_RECT_Y1                           72  0x00000048 (const dword)  (not used)
GFX_RECT_Y2                           74  0x0000004a (const dword)  (not used)
gfx_Rectangle                        -59  0xffffffc5 (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                  -60  0xffffffc4 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                         -84  0xffffffac (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
GFX_RIGHT_GUTTER_WIDTH                69  0x00000045 (const dword)  (not used)
gfx_ScreenCopyPaste                  -83  0xffffffad (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                       -98  0xffffff9e (PmmC func) args[1] r=1  (usage 3)
gfx_Selection                        -86  0xffffffaa (PmmC func) args[3] r=0  (not used)
gfx_Set                              -50  0xffffffce (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                    -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
gfx_Slider                           -82  0xffffffae (PmmC func) args[8] r=1  (not used)
GFX_STATUSBAR_HEIGHT                  67  0x00000043 (const dword)  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOOLBAR_HEIGHT                    66  0x00000042 (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                     -96  0xffffffa0 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour                -95  0xffffffa1 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                         -65  0xffffffbf (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                   -87  0xffffffa9 (PmmC func) args[7] r=0  (not used)
gfx_Vline                            -58  0xffffffc6 (PmmC func) args[4] r=1  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -105  0xffffff97 (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -106  0xffffff96 (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 4  0x00000004 (mem) word[28] (global)  (usage 90)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                              -214  0xffffff2a (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   2  0x00000002 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             116  0x00000074 (mem) word (global)  (usage 12)
I2C                                63520  0x0000f820 (const dword)  (not used)
I2C_Ack                             -169  0xffffff57 (PmmC func) args[0] r=0  (not used)
I2C_AckPoll                         -172  0xffffff54 (PmmC func) args[1] r=1  (not used)
I2C_AckStatus                       -171  0xffffff55 (PmmC func) args[0] r=0  (not used)
I2C_Close                           -163  0xffffff5d (PmmC func) args[0] r=0  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_Getn                            -175  0xffffff51 (PmmC func) args[2] r=1  (not used)
I2C_Gets                            -174  0xffffff52 (PmmC func) args[2] r=1  (not used)
I2C_Idle                            -173  0xffffff53 (PmmC func) args[0] r=0  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_Nack                            -170  0xffffff56 (PmmC func) args[0] r=0  (not used)
I2C_Open                            -162  0xffffff5e (PmmC func) args[1] r=0  (not used)
I2C_Putn                            -177  0xffffff4f (PmmC func) args[2] r=1  (not used)
I2C_Puts                            -176  0xffffff50 (PmmC func) args[1] r=1  (not used)
I2C_Read                            -167  0xffffff59 (PmmC func) args[0] r=1  (not used)
I2C_Restart                         -166  0xffffff5a (PmmC func) args[0] r=1  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I2C_Start                           -164  0xffffff5c (PmmC func) args[0] r=1  (not used)
I2C_Stop                            -165  0xffffff5b (PmmC func) args[0] r=1  (not used)
I2C_Write                           -168  0xffffff58 (PmmC func) args[1] r=1  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iDigits                                2  0x00000002 (const dword)  (usage 9)
iiLeddigits0                          36  0x00000024 (const ??? 0)  (not used)
iiLeddigits1                          38  0x00000026 (const ??? 0)  (not used)
iiLeddigits10                         68  0x00000044 (const ??? 0)  (not used)
iiLeddigits11                         74  0x0000004a (const ??? 0)  (not used)
iiLeddigits12                         76  0x0000004c (const ??? 0)  (not used)
iiLeddigits13                         86  0x00000056 (const ??? 0)  (not used)
iiLeddigits14                         89  0x00000059 (const ??? 0)  (not used)
iiLeddigits15                         92  0x0000005c (const ??? 0)  (not used)
iiLeddigits16                         95  0x0000005f (const ??? 0)  (not used)
iiLeddigits17                         97  0x00000061 (const ??? 0)  (not used)
iiLeddigits18                        107  0x0000006b (const ??? 0)  (not used)
iiLeddigits19                        119  0x00000077 (const ??? 0)  (not used)
iiLeddigits2                          40  0x00000028 (const ??? 0)  (not used)
iiLeddigits20                        127  0x0000007f (const ??? 0)  (not used)
iiLeddigits21                        133  0x00000085 (const ??? 0)  (not used)
iiLeddigits3                          58  0x0000003a (const ??? 0)  (not used)
iiLeddigits4                          49  0x00000031 (const ??? 0)  (not used)
iiLeddigits5                          51  0x00000033 (const ??? 0)  (not used)
iiLeddigits6                          60  0x0000003c (const ??? 0)  (not used)
iiLeddigits7                          62  0x0000003e (const ??? 0)  (not used)
iiLeddigits8                          64  0x00000040 (const ??? 0)  (not used)
iiLeddigits9                          66  0x00000042 (const ??? 0)  (not used)
iImage0                                0  0x00000000 (const ??? 0)  (usage 3)
iImage1                               16  0x00000010 (const ??? 0)  (usage 3)
iLeadingBlanks                         8  0x00000008 (const dword)  (usage 3)
iLeddigits0                           35  0x00000023 (const ??? 0)  (usage 3)
iLeddigits1                           37  0x00000025 (const ??? 0)  (usage 3)
iLeddigits10                          67  0x00000043 (const ??? 0)  (usage 3)
iLeddigits11                          73  0x00000049 (const ??? 0)  (usage 3)
iLeddigits12                          75  0x0000004b (const ??? 0)  (usage 3)
iLeddigits13                          85  0x00000055 (const ??? 0)  (usage 3)
iLeddigits14                          88  0x00000058 (const ??? 0)  (usage 3)
iLeddigits15                          91  0x0000005b (const ??? 0)  (usage 3)
iLeddigits16                          94  0x0000005e (const ??? 0)  (usage 3)
iLeddigits17                          96  0x00000060 (const ??? 0)  (usage 3)
iLeddigits18                         106  0x0000006a (const ??? 0)  (usage 3)
iLeddigits19                         118  0x00000076 (const ??? 0)  (usage 3)
iLeddigits2                           39  0x00000027 (const ??? 0)  (usage 3)
iLeddigits20                         126  0x0000007e (const ??? 0)  (usage 3)
iLeddigits21                         132  0x00000084 (const ??? 0)  (usage 3)
iLeddigits3                           57  0x00000039 (const ??? 0)  (usage 3)
iLeddigits4                           48  0x00000030 (const ??? 0)  (usage 3)
iLeddigits5                           50  0x00000032 (const ??? 0)  (usage 3)
iLeddigits6                           59  0x0000003b (const ??? 0)  (usage 3)
iLeddigits7                           61  0x0000003d (const ??? 0)  (usage 3)
iLeddigits8                           63  0x0000003f (const ??? 0)  (usage 3)
iLeddigits9                           65  0x00000041 (const ??? 0)  (usage 3)
ileft                                  0  0x00000000 (const dword)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -187  0xffffff45 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -181  0xffffff4b (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -180  0xffffff4c (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -179  0xffffff4d (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -184  0xffffff48 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -182  0xffffff4a (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SetAttributes                   -186  0xffffff46 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -178  0xffffff4e (PmmC func) args[4] r=1  (not used)
img_SetWord                         -183  0xffffff49 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -185  0xffffff47 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -188  0xffffff44 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
iMinDigits                             4  0x00000004 (const dword)  (usage 3)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
input                                196  0x000000c4 (mem) word (global)  (usage 27)
INPUT                                  1  0x00000001 (const dword)  (not used)
inputtype                            192  0x000000c0 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IO1_PIN                                1  0x00000001 (const dword)  (not used)
IO2_PIN                                2  0x00000002 (const dword)  (not used)
IO3_PIN                                3  0x00000003 (const dword)  (not used)
IO4_PIN                                4  0x00000004 (const dword)  (not used)
IO5_PIN                                5  0x00000005 (const dword)  (not used)
IPControls                            99  0x00000063IPControls                            99  0x00000063 (mem) word[147] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
IPD_DOWN                              16  0x00000010 (const dword)  (usage 6)
IPD_OBJVidx                           20  0x00000014 (const dword)  (usage 15)
IPD_P1                                 2  0x00000002 (const dword)  (usage 15)
IPD_P2                                 4  0x00000004 (const dword)  (usage 48)
IPD_P3                                 6  0x00000006 (const dword)  (usage 9)
IPD_P4                                 8  0x00000008 (const dword)  (usage 3)
IPD_P5                                10  0x0000000a (const dword)  (usage 6)
IPD_P6                                12  0x0000000c (const dword)  (usage 18)
IPD_P7                                14  0x0000000e (const dword)  (not used)
IPD_RELEASE                           18  0x00000012 (const dword)  (usage 9)
IPData                               393  0x00000189IPData                               393  0x00000189 (mem) word[1683] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 30)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                             -207  0xffffff31 (PmmC func) args[1] r=1  (not used)
isalpha                             -206  0xffffff32 (PmmC func) args[1] r=1  (not used)
isdigit                             -202  0xffffff36 (PmmC func) args[1] r=1  (not used)
islower                             -205  0xffffff33 (PmmC func) args[1] r=1  (not used)
isprint                             -208  0xffffff30 (PmmC func) args[1] r=1  (not used)
isspace                             -209  0xffffff2f (PmmC func) args[1] r=1  (not used)
iStatictext1                          41  0x00000029 (const ??? 0)  (usage 3)
iStatictext10                         69  0x00000045 (const ??? 0)  (usage 3)
iStatictext11                         70  0x00000046 (const ??? 0)  (usage 3)
iStatictext12                         71  0x00000047 (const ??? 0)  (usage 3)
iStatictext13                         72  0x00000048 (const ??? 0)  (usage 3)
iStatictext14                         77  0x0000004d (const ??? 0)  (usage 3)
iStatictext15                         84  0x00000054 (const ??? 0)  (usage 3)
iStatictext16                         87  0x00000057 (const ??? 0)  (usage 3)
iStatictext17                         90  0x0000005a (const ??? 0)  (usage 3)
iStatictext18                         93  0x0000005d (const ??? 0)  (usage 3)
iStatictext19                         98  0x00000062 (const ??? 0)  (usage 3)
iStatictext2                          42  0x0000002a (const ??? 0)  (usage 3)
iStatictext20                        111  0x0000006f (const ??? 0)  (usage 3)
iStatictext21                        120  0x00000078 (const ??? 0)  (usage 3)
iStatictext22                        128  0x00000080 (const ??? 0)  (usage 3)
iStatictext23                        137  0x00000089 (const ??? 0)  (usage 3)
iStatictext3                           1  0x00000001 (const ??? 0)  (usage 3)
iStatictext4                          43  0x0000002b (const ??? 0)  (usage 3)
iStatictext5                          54  0x00000036 (const ??? 0)  (usage 3)
iStatictext6                          47  0x0000002f (const ??? 0)  (usage 3)
iStatictext7                          52  0x00000034 (const ??? 0)  (usage 3)
iStatictext8                          55  0x00000037 (const ??? 0)  (usage 3)
iStatictext9                          56  0x00000038 (const ??? 0)  (usage 3)
iStrings0                           3759  0x00000eafiStrings0                           3759  0x00000eaf (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings1                           3785  0x00000ec9iStrings1                           3785  0x00000ec9 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings10                          3993  0x00000f99iStrings10                          3993  0x00000f99 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings11                          4019  0x00000fb3iStrings11                          4019  0x00000fb3 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings12                          4045  0x00000fcdiStrings12                          4045  0x00000fcd (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings13                          4071  0x00000fe7iStrings13                          4071  0x00000fe7 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings14                          4097  0x00001001iStrings14                          4097  0x00001001 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings15                          4123  0x0000101biStrings15                          4123  0x0000101b (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings16                          4149  0x00001035iStrings16                          4149  0x00001035 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings17                          4175  0x0000104fiStrings17                          4175  0x0000104f (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings18                          4201  0x00001069iStrings18                          4201  0x00001069 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings19                          4227  0x00001083iStrings19                          4227  0x00001083 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings2                           3811  0x00000ee3iStrings2                           3811  0x00000ee3 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings20                          4253  0x0000109diStrings20                          4253  0x0000109d (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings21                          4279  0x000010b7iStrings21                          4279  0x000010b7 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings22                          4305  0x000010d1iStrings22                          4305  0x000010d1 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings23                          4331  0x000010ebiStrings23                          4331  0x000010eb (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings24                          4357  0x00001105iStrings24                          4357  0x00001105 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings25                          4383  0x0000111fiStrings25                          4383  0x0000111f (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings26                          4409  0x00001139iStrings26                          4409  0x00001139 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings27                          4435  0x00001153iStrings27                          4435  0x00001153 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings3                           3837  0x00000efdiStrings3                           3837  0x00000efd (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings4                           3863  0x00000f17iStrings4                           3863  0x00000f17 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings6                           3889  0x00000f31iStrings6                           3889  0x00000f31 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings7                           3915  0x00000f4biStrings7                           3915  0x00000f4b (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings8                           3941  0x00000f65iStrings8                           3941  0x00000f65 (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings9                           3967  0x00000f7fiStrings9                           3967  0x00000f7f (mem) word[13] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
isupper                             -204  0xffffff34 (PmmC func) args[1] r=1  (not used)
iswhite                             -210  0xffffff2e (PmmC func) args[1] r=1  (not used)
isxdigit                            -203  0xffffff35 (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -198  0xffffff3a (PmmC func) args[1] r=0  (not used)
iUserbutton0                          19  0x00000013 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                         14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton11                         15  0x0000000f (const ??? 0)  (usage 3)
iUserbutton12                         17  0x00000011 (const ??? 0)  (usage 3)
iUserbutton13                         18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton14                          6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton16                         53  0x00000035 (const ??? 0)  (usage 3)
iUserbutton17                         24  0x00000018 (const ??? 0)  (usage 3)
iUserbutton18                         45  0x0000002d (const ??? 0)  (usage 3)
iUserbutton19                         46  0x0000002e (const ??? 0)  (usage 3)
iUserbutton2                          20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton20                         81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton21                         82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton22                         83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton23                         78  0x0000004e (const ??? 0)  (usage 3)
iUserbutton24                         79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton25                         80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton26                        100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton27                        101  0x00000065 (const ??? 0)  (usage 3)
iUserbutton28                        102  0x00000066 (const ??? 0)  (usage 3)
iUserbutton29                        103  0x00000067 (const ??? 0)  (usage 3)
iUserbutton3                          34  0x00000022 (const ??? 0)  (usage 3)
iUserbutton30                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton31                        105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton32                        108  0x0000006c (const ??? 0)  (usage 3)
iUserbutton33                        109  0x0000006d (const ??? 0)  (usage 3)
iUserbutton34                        110  0x0000006e (const ??? 0)  (usage 3)
iUserbutton35                        112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton36                        113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton37                        114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton38                        117  0x00000075 (const ??? 0)  (usage 3)
iUserbutton39                        115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton4                           4  0x00000004 (const ??? 0)  (usage 3)
iUserbutton40                        116  0x00000074 (const ??? 0)  (usage 3)
iUserbutton41                        121  0x00000079 (const ??? 0)  (usage 3)
iUserbutton42                        122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton43                        123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton44                        129  0x00000081 (const ??? 0)  (usage 3)
iUserbutton45                        134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton46                        124  0x0000007c (const ??? 0)  (usage 3)
iUserbutton47                        130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton48                        125  0x0000007d (const ??? 0)  (usage 3)
iUserbutton49                        131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton5                           5  0x00000005 (const ??? 0)  (usage 3)
iUserbutton50                         21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton51                        138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton52                        136  0x00000088 (const ??? 0)  (usage 3)
iUserbutton53                        139  0x0000008b (const ??? 0)  (usage 3)
iUserbutton54                         22  0x00000016 (const ??? 0)  (usage 3)
iUserbutton55                        141  0x0000008d (const ??? 0)  (usage 3)
iUserbutton56                        142  0x0000008e (const ??? 0)  (usage 3)
iUserbutton57                        143  0x0000008f (const ??? 0)  (usage 3)
iUserbutton58                        144  0x00000090 (const ??? 0)  (usage 3)
iUserbutton59                        145  0x00000091 (const ??? 0)  (usage 3)
iUserbutton6                          10  0x0000000a (const ??? 0)  (usage 3)
iUserbutton60                        146  0x00000092 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                         23  0x00000017 (const ??? 0)  (usage 3)
iUserbutton63                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton64                         25  0x00000019 (const ??? 0)  (usage 3)
iUserbutton65                         26  0x0000001a (const ??? 0)  (usage 3)
iUserbutton7                          11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton8                          12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton9                          13  0x0000000d (const ??? 0)  (usage 3)
iUserimages0                           7  0x00000007 (const ??? 0)  (usage 3)
iUserimages1                         135  0x00000087 (const ??? 0)  (usage 3)
iUserimages2                         140  0x0000008c (const ??? 0)  (usage 3)
iVideo0                                9  0x00000009 (const ??? 0)  (usage 3)
iVideo1                               99  0x00000063 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWidthDigit                            6  0x00000006 (const dword)  (usage 3)
iWinbutton0                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton1                           28  0x0000001c (const ??? 0)  (usage 3)
iWinbutton2                           29  0x0000001d (const ??? 0)  (usage 3)
iWinbutton3                           30  0x0000001e (const ??? 0)  (usage 3)
iWinbutton4                           31  0x0000001f (const ??? 0)  (usage 3)
iWinbutton7                           32  0x00000020 (const ??? 0)  (usage 3)
iWinbutton8                           33  0x00000021 (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 4933  0x00001345kKeyboardKeystrokes                 4933  0x00001345 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (not used)
LANDSCAPE_R                            1  0x00000001 (const dword)  (usage 3)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                    8207  0x0000200f (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                              -213  0xffffff2b (PmmC func) args[1] r=1  (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                                5353  0x000014e9 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -15  0xfffffff1 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
MEDIA_ADDRESS_MW                      92  0x0000005c (const dword)  (not used)
MEDIA_ADDRESS_UW                      93  0x0000005d (const dword)  (not used)
media_Flush                         -118  0xffffff8a (PmmC func) args[0] r=1  (not used)
media_Image                         -117  0xffffff8b (PmmC func) args[2] r=0  (not used)
media_Init                          -119  0xffffff89 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -111  0xffffff91 (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -113  0xffffff8f (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -114  0xffffff8e (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                      124  0x0000007c (const dword)  (not used)
MEDIA_SECTOR_LO                      123  0x0000007b (const dword)  (not used)
media_SetAdd                        -109  0xffffff93 (PmmC func) args[2] r=0  (not used)
media_SetSector                     -110  0xffffff92 (PmmC func) args[2] r=0  (not used)
media_Video                         -107  0xffffff95 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -108  0xffffff94 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -115  0xffffff8d (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
media_WrSector                      -112  0xffffff90 (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -217  0xffffff27 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -218  0xffffff26 (PmmC func) args[1] r=1  (not used)
mem_Compare                         -224  0xffffff20 (PmmC func) args[3] r=1  (not used)
mem_Copy                            -223  0xffffff21 (PmmC func) args[3] r=1  (not used)
mem_Free                            -220  0xffffff24 (PmmC func) args[1] r=1  (not used)
mem_Heap                            -221  0xffffff23 (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -219  0xffffff25 (PmmC func) args[2] r=1  (not used)
mem_Set                             -222  0xffffff22 (PmmC func) args[3] r=1  (not used)
MEMORY_ACCESS_CONTROL                 22  0x00000016 (const dword)  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -14  0xfffffff2 (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 24)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              153  0x00000099 (const dword)  (usage 3)
nObjects                             147  0x00000093 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
o4Dbuttons                          4741  0x00001285o4Dbuttons                          4741  0x00001285 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAngularmeters                      4493  0x0000118doAngularmeters                      4493  0x0000118d (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAniButtons                         4743  0x00001287oAniButtons                         4743  0x00001287 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
object                               198  0x000000c6 (mem) word (global)  (usage 18)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       4745  0x00001289oColorPickers                       4745  0x00001289 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCoolgauges                         4495  0x0000118foCoolgauges                         4495  0x0000118f (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
Ocs                                  442  0x000001ba (mem) word (global)  (usage 9)
oCustomdigitss                      4497  0x00001191oCustomdigitss                      4497  0x00001191 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oDipSwitchs                         4461  0x0000116doDipSwitchs                         4461  0x0000116d (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              4499  0x00001193oForms                              4499  0x00001193 (mem) word[24] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGauges                             4547  0x000011c3oGauges                             4547  0x000011c3 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGSliders                           4469  0x00001175oGSliders                           4469  0x00001175 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oImages                             4549  0x000011c5oImages                             4549  0x000011c5 (mem) word[3] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKeyboards                          4555  0x000011cboKeyboards                          4555  0x000011cb (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKnobs                              4463  0x0000116foKnobs                              4463  0x0000116f (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLeddigitss                         4559  0x000011cfoLeddigitss                         4559  0x000011cf (mem) word[23] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
oLeds                               4557  0x000011cdoLeds                               4557  0x000011cd (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             4605  0x000011fdoMeters                             4605  0x000011fd (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             118  0x00000076 (mem) word[34] (global)  (usage 108)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
OPDataL                             4935  0x00001347OPDataL                             4935  0x00001347 (mem) word[110] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
oPinInputs                          4739  0x00001283oPinInputs                          4739  0x00001283 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oPinOutputs                         4885  0x00001315oPinOutputs                         4885  0x00001315 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      4465  0x00001171oRockerSwitchs                      4465  0x00001171 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oRotarySwitchs                      4467  0x00001173oRotarySwitchs                      4467  0x00001173 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OSC_CONTROL_1                         25  0x00000019 (const dword)  (not used)
OSC_CONTROL_3                        147  0x00000093 (const dword)  (not used)
oScopes                             4727  0x00001277oScopes                             4727  0x00001277 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
oSoundss                            4883  0x00001313oSoundss                            4883  0x00001313 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oSpectrums                          4725  0x00001275oSpectrums                          4725  0x00001275 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStaticTexts                        4675  0x00001243oStaticTexts                        4675  0x00001243 (mem) word[25] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStringss                           4607  0x000011ffoStringss                           4607  0x000011ff (mem) word[29] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 96)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 150)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              4729  0x00001279oTanks                              4729  0x00001279 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oThermometers                       4665  0x00001239oThermometers                       4665  0x00001239 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTimers                             4881  0x00001311oTimers                             4881  0x00001311 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTrackbars                          4471  0x00001177oTrackbars                          4471  0x00001177 (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserButtons                        4747  0x0000128boUserButtons                        4747  0x0000128b (mem) word[67] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
oUserImagess                        4731  0x0000127boUserImagess                        4731  0x0000127b (mem) word[4] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserleds                           4667  0x0000123boUserleds                           4667  0x0000123b (mem) word[1] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OUTPUT                                 0  0x00000000 (const dword)  (not used)
OVF                                  -21  0xffffffeb (PmmC func) args[0] r=1  (usage 3)
oVideos                             4669  0x0000123doVideos                             4669  0x0000123d (mem) word[3] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oWinButtons                         4473  0x00001179oWinButtons                         4473  0x00001179 (mem) word[10] (member of F:\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (usage 3)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PICASO                                 1  0x00000001 (const dword)  (usage 3)
PICASO_FUNCTIONS                       0  0x00000000 (const ??? 0)  (not used)
pin_HI                               -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
pin_LO                               -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
pin_Read                             -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
pin_Set                              -41  0xffffffd7 (PmmC func) args[2] r=1  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -12  0xfffffff4 (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
POWER_CONTROL_1                       27  0x0000001b (const dword)  (not used)
POWER_CONTROL_2                       28  0x0000001c (const dword)  (not used)
POWER_CONTROL_3                       29  0x0000001d (const dword)  (not used)
POWER_CONTROL_4                       30  0x0000001e (const dword)  (not used)
POWER_CONTROL_5                       31  0x0000001f (const dword)  (not used)
POWER_CONTROL_6                       32  0x00000020 (const dword)  (not used)
PrintStrings                        9329  0x00002471 (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
RAND                                 -19  0xffffffed (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
READ_WRITE_DATA                       34  0x00000022 (const dword)  (not used)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                          9075  0x00002373 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
reserved                            -294  0xfffffeda (PmmC func) args[0] r=0  (not used)
RGBINT_CONTROL_1                      56  0x00000038 (const dword)  (not used)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROW_ADDRESS_END1                       9  0x00000009 (const dword)  (not used)
ROW_ADDRESS_END2                       8  0x00000008 (const dword)  (not used)
ROW_ADDRESS_START1                     7  0x00000007 (const dword)  (not used)
ROW_ADDRESS_START2                     6  0x00000006 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (usage 3)
RXMODE_0                               0  0x00000000 (const dword)  (not used)
RXMODE_1                               1  0x00000001 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -20  0xffffffec (PmmC func) args[1] r=0  (not used)
SELECT                                 3  0x00000003 (const dword)  (not used)
SELECT_MULTIPLE                        4  0x00000004 (const dword)  (not used)
serin                                 -1  0xffffffff (PmmC func) args[0] r=1  (usage 3)
serin1                              -140  0xffffff74 (PmmC func) args[0] r=1  (not used)
serout                                -3  0xfffffffd (PmmC func) args[1] r=0  (usage 42)
serout1                             -141  0xffffff73 (PmmC func) args[1] r=0  (not used)
seroutCS                            9311  0x0000245f (User func) args[1] r=0  (usage 30)
seroutOcs                           9296  0x00002450 (User func) args[0] r=0  (usage 6)
setbaud                               -4  0xfffffffc (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -17  0xffffffef (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -258  0xfffffefe (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -261  0xfffffefb (PmmC func) args[0] r=0  (not used)
snd_Pause                           -260  0xfffffefc (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -257  0xfffffeff (PmmC func) args[1] r=1  (not used)
snd_Playing                         -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
snd_Stop                            -259  0xfffffefd (PmmC func) args[0] r=0  (not used)
snd_Volume                          -256  0xffffff00 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
spi_Disable                         -153  0xffffff67 (PmmC func) args[0] r=0  (not used)
SPI_FAST                               0  0x00000000 (const dword)  (not used)
spi_Init                            -150  0xffffff6a (PmmC func) args[3] r=0  (not used)
SPI_MED                                1  0x00000001 (const dword)  (not used)
spi_Read                            -151  0xffffff69 (PmmC func) args[0] r=1  (not used)
SPI_SLOW                               2  0x00000002 (const dword)  (not used)
spi_Write                           -152  0xffffff68 (PmmC func) args[1] r=0  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -22  0xffffffea (PmmC func) args[1] r=1  (not used)
STAnsi                                22  0x00000016 (const dword)  (usage 3)
STBGColor                             16  0x00000010 (const dword)  (usage 6)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STFGColor                             14  0x0000000e (const dword)  (usage 3)
STFontAttribs                         18  0x00000012 (const dword)  (usage 3)
STForm                                24  0x00000018 (const dword)  (usage 3)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
str_Cat                             -278  0xfffffeea (PmmC func) args[2] r=1  (not used)
str_CatN                            -279  0xfffffee9 (PmmC func) args[3] r=1  (not used)
str_Copy                            -287  0xfffffee1 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -288  0xfffffee0 (PmmC func) args[3] r=1  (not used)
str_Find                            -274  0xfffffeee (PmmC func) args[2] r=1  (not used)
str_FindI                           -275  0xfffffeed (PmmC func) args[2] r=1  (not used)
str_GetByte                         -268  0xfffffef4 (PmmC func) args[1] r=1  (not used)
str_GetC                            -267  0xfffffef5 (PmmC func) args[2] r=1  (not used)
str_GetD                            -264  0xfffffef8 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -266  0xfffffef6 (PmmC func) args[2] r=1  (not used)
str_GetW                            -265  0xfffffef7 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -269  0xfffffef3 (PmmC func) args[1] r=1  (not used)
str_Length                          -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
str_Match                           -272  0xfffffef0 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -273  0xfffffeef (PmmC func) args[2] r=1  (not used)
str_Printf                          -277  0xfffffeeb (PmmC func) args[2] r=1  (not used)
str_Ptr                             -263  0xfffffef9 (PmmC func) args[1] r=1  (not used)
str_PutByte                         -270  0xfffffef2 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -271  0xfffffef1 (PmmC func) args[2] r=0  (not used)
strheight                           -161  0xffffff5f (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                          28  0x0000001c (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                         0  0x00000000 (const dword)  (usage 3)
Strings10Count                         0  0x00000000 (const dword)  (not used)
Strings10Size                          1  0x00000001 (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         25  0x00000019 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         19  0x00000013 (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     6656  0x00001a00 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                         25  0x00000019 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                     1536  0x00000600 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                         23  0x00000017 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                         24  0x00000018 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings16Count                         1  0x00000001 (const dword)  (not used)
Strings16Size                         31  0x0000001f (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings17Count                         1  0x00000001 (const dword)  (not used)
Strings17Size                         33  0x00000021 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings18Count                         1  0x00000001 (const dword)  (not used)
Strings18Size                         32  0x00000020 (const dword)  (usage 3)
Strings18StartH                        0  0x00000000 (const dword)  (usage 3)
Strings18StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                         29  0x0000001d (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings1Count                          0  0x00000000 (const dword)  (not used)
Strings1Size                           1  0x00000001 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                       512  0x00000200 (const dword)  (usage 3)
Strings20Count                         1  0x00000001 (const dword)  (not used)
Strings20Size                         25  0x00000019 (const dword)  (usage 3)
Strings20StartH                        0  0x00000000 (const dword)  (usage 3)
Strings20StartL                     2560  0x00000a00 (const dword)  (usage 3)
Strings21Count                         1  0x00000001 (const dword)  (not used)
Strings21Size                         30  0x0000001e (const dword)  (usage 3)
Strings21StartH                        0  0x00000000 (const dword)  (usage 3)
Strings21StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings22Count                         1  0x00000001 (const dword)  (not used)
Strings22Size                         20  0x00000014 (const dword)  (usage 3)
Strings22StartH                        0  0x00000000 (const dword)  (usage 3)
Strings22StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings23Count                         1  0x00000001 (const dword)  (not used)
Strings23Size                         15  0x0000000f (const dword)  (usage 3)
Strings23StartH                        0  0x00000000 (const dword)  (usage 3)
Strings23StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings24Count                         1  0x00000001 (const dword)  (not used)
Strings24Size                         26  0x0000001a (const dword)  (usage 3)
Strings24StartH                        0  0x00000000 (const dword)  (usage 3)
Strings24StartL                    11776  0x00002e00 (const dword)  (usage 3)
Strings25Count                         1  0x00000001 (const dword)  (not used)
Strings25Size                         10  0x0000000a (const dword)  (usage 3)
Strings25StartH                        0  0x00000000 (const dword)  (usage 3)
Strings25StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings26Count                         1  0x00000001 (const dword)  (not used)
Strings26Size                         10  0x0000000a (const dword)  (usage 3)
Strings26StartH                        0  0x00000000 (const dword)  (usage 3)
Strings26StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings27Count                         1  0x00000001 (const dword)  (not used)
Strings27Size                         11  0x0000000b (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      4096  0x00001000 (const dword)  (usage 3)
Strings3Count                          1  0x00000001 (const dword)  (not used)
Strings3Size                          18  0x00000012 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      3072  0x00000c00 (const dword)  (usage 3)
Strings5Size                           0  0x00000000 (const dword)  (not used)
Strings5StartH                         0  0x00000000 (const dword)  (not used)
Strings5StartL                         0  0x00000000 (const dword)  (not used)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          26  0x0000001a (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      3584  0x00000e00 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                      4608  0x00001200 (const dword)  (usage 3)
Strings8Count                          1  0x00000001 (const dword)  (not used)
Strings8Size                          25  0x00000019 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                      5120  0x00001400 (const dword)  (usage 3)
Strings9Count                          1  0x00000001 (const dword)  (not used)
Strings9Size                          25  0x00000019 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      2048  0x00000800 (const dword)  (usage 3)
stringsCV                             60  0x0000003c (mem) word[28] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                            -160  0xffffff60 (PmmC func) args[1] r=1  (not used)
STSize                                 4  0x00000004 (const dword)  (usage 3)
STStartH                               0  0x00000000 (const dword)  (usage 3)
STStartL                               2  0x00000002 (const dword)  (usage 3)
STTransparent                         20  0x00000014 (const dword)  (usage 3)
STx1                                   6  0x00000006 (const dword)  (usage 12)
STx2                                  10  0x0000000a (const dword)  (usage 9)
STy1                                   8  0x00000008 (const dword)  (usage 12)
STy2                                  12  0x0000000c (const dword)  (usage 9)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -295  0xfffffed9 (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -194  0xffffff3e (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -195  0xffffff3d (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -196  0xffffff3c (PmmC func) args[0] r=0  (usage 3)
sys_GetTimer                        -192  0xffffff40 (PmmC func) args[1] r=1  (not used)
sys_SetTimer                        -191  0xffffff41 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -193  0xffffff3f (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -280  0xfffffee8 (PmmC func) args[0] r=1  (not used)
sys_T                               -189  0xffffff43 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -190  0xffffff42 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -5  0xfffffffb (PmmC func) args[1] r=1  (not used)
tolower                             -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -199  0xffffff39 (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -201  0xffffff37 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -200  0xffffff38 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
toupper                             -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
translate                             -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
TState                               194  0x000000c2 (mem) word (global)  (usage 24)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                      8521  0x00002149 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 213)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 39)
txt_Attributes                       -38  0xffffffda (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -34  0xffffffde (PmmC func) args[1] r=1  (not used)
txt_Delay                            -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -25  0xffffffe7 (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontID                           -27  0xffffffe5 (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
txt_Italic                           -35  0xffffffdd (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -23  0xffffffe9 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -33  0xffffffdf (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -24  0xffffffe8 (PmmC func) args[2] r=0  (not used)
txt_Underline                        -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
txt_Width                            -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -31  0xffffffe1 (PmmC func) args[1] r=1  (not used)
uadd_3232                           -290  0xfffffede (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                           -292  0xfffffedc (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
ULCD_32PT_GFX                          0  0x00000000 (const ??? 0)  (not used)
umul_1616                           -289  0xfffffedf (PmmC func) args[3] r=1  (usage 3)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                        -281  0xfffffee7 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                       7218  0x00001c32 (User func) args[1] r=0  (usage 3)
USER_INITIALIZED_DISPLAY              32  0x00000020 (const dword)  (not used)
usub_3232                           -291  0xfffffedd (PmmC func) args[3] r=1  (not used)
VCOM_CONTROL_1                        67  0x00000043 (const dword)  (not used)
VCOM_CONTROL_2                        68  0x00000044 (const dword)  (not used)
VCOM_CONTROL_3                        69  0x00000045 (const dword)  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (usage 3)
WHITE                              65535  0x0000ffff (const dword)  (usage 75)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 3)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 3)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                         8720  0x00002210 (User func) args[3] r=0  (usage 24)
x                                    188  0x000000bc (mem) word (global)  (usage 12)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
y                                    190  0x000000be (mem) word (global)  (usage 9)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
