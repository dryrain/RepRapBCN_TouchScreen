file I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318        
003998  004319  //------------------------------------------------------------------------------
003999  004320  // FILEIO Error Code Constants
004000  004321  //------------------------------------------------------------------------------
004001  004322  #CONST
004002  004348  #END
004003  004349        
004004  004350  //------------------------------------------------------------------------------
004005  004351  // DISK struct offsets
004006  004352  //------------------------------------------------------------------------------
004007  004353  #CONST
004008  004370  #END
004009  004371        
004010  004372  //------------------------------------------------------------------------------
004011  004373  // FILE struct offsets
004012  004374  //------------------------------------------------------------------------------
004013  004375  #CONST
004014  004394  #END
004015  004395        
004016  004396        
004017  004397  //------------------------------------------------------------------//
004018  004398  //        Sound Class Services
004019  004399  //------------------------------------------------------------------//
004020  004400        
004021  004401  func snd_Volume("var"), 0;
004022  004402  // Syntax: snd_Volume("var");
004023  004403  // Usage : snd_Volume(30);
004024  004404  // Notes : set sound playback volume.  Var must
004025  004405  //       : be in the range from 8 (min volume)
004026  004406  //       : to 127 (max volume). If var is less
004027  004407  //       : than 8 volume is set to 8, and if
004028  004408  //       : var > 127 it is set to 127.
004029  004409        
004030  004410  func snd_Pitch("pitch"), 1;
004031  004411  // func snd_Pitch("freq"), 1;
004032  004412  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004033  004413  // Notes : sets the samples playback rate to a different frequency
004034  004414  //       : The minimum value is 4khz
004035  004415  //       : Setting the pitch to zero restores the original sample rate
004036  004416  //       : Return value is the samples original sample rate.
004037  004417        
004038  004418  func snd_BufSize("var"), 0;
004039  004419  // Syntax: snd_BufSize("var");
004040  004420  // Usage : snd_BufSize(2);
004041  004421  // Notes : specify the a memory chunk size for the wavefile buffer.
004042  004422  //       : default size 1024 bytes.
004043  004423  //       : 0 = 1024 bytes (default)
004044  004424  //       : 1 = 2048 bytes
004045  004425  //       : 2 = 4096 bytes
004046  004426  //       : 3 = 8192 bytes
004047  004427        
004048  004428  func snd_Stop(), 0;
004049  004429  // Syntax: snd_Stop();
004050  004430  // Usage : snd_Stop();
004051  004431  // Notes : stop any sound that is playing, releasing
004052  004432  //       : buffers and closes any open wav file.
004053  004433        
004054  004434  func snd_Pause(), 0;
004055  004435  // Syntax: snd_Pause();
004056  004436  // Usage : snd_Pause();
004057  004437  // Notes : pauses any sound that is playing, does nothing
004058  004438  //       : until sound is resumed with snd_Continue().
004059  004439  //       : The sample cam be terminated with snd_Stop.
004060  004440  //       : buffers and closes any open wav file.
004061  004441        
004062  004442  func snd_Continue(), 0;
004063  004443  // Syntax: snd_Continue();
004064  004444  // Usage : snd_Continue();
004065  004445  // Notes : resume any sound that is paused by snd_Pause.
004066  004446        
004067  004447  func snd_Playing(), 1;
004068  004448  // Syntax: snd_Playing();
004069  004449  // Usage : r := snd_Playing();
004070  004450  // Notes : returns 0 if sound has finished playing,
004071  004451  //       : else return number of 512 byte blocks to go.
004072  004452        
004073  004453  func snd_Freq("Freq", "Duration"), 1;
004074  004454  // Syntax: snd_Freq("Freq", "Duration");
004075  004455  // Usage : r := snd_Freq(1000, 2000);
004076  004456  // Notes : Returns 0 if note cannot be played because a wav file is playing
004077  004457  //       : else return True.
004078  004458  //       : Minimum Freq is 20
004079  004459  //       : This will produce a pure Square wave and is designed for driving
004080  004460  //       : Piezo transducers which require this sort of drive. It can also be
004081  004461  //       : used to drive the amp on displays with audio.
004082  004462        
004083  004463        
004084  004464  func __reserved60(), 0; // do not remove
004085  004465  func __reserved61(), 0; // do not remove
004086  004466  func __reserved62(), 0; // do not remove
004087  004467        
004088  004468  //=========================================================================================================
004089  004469  // String functions
004090  004470  //=========================================================================================================
004091  004471        
004092  004472  func str_Ptr("&var"), 1;
004093  004473  // Syntax: str_Ptr(&var);
004094  004474  // Usage : p := str_Ptr(&var);
004095  004475  // Notes : return a byte pointer to a word region
004096  004476        
004097  004477  func str_GetD("&ptr", "&var"), 1;
004098  004478  // Syntax: str_GetD(&ptr, &var);
004099  004479  // Usage : ok := str_GetD(&ptr, &var);
004100  004480  // Notes : convert number in a string to DWORD ( myvar[2] )
004101  004481  //       : returns true if function succeeds, advancing ptr
004102  004482        
004103  004483  func str_GetW("&ptr", "&var"), 1;
004104  004484  // Syntax: str_GetW(&ptr, &var);
004105  004485  // Usage : ok := str_GetW(&ptr, &var);
004106  004486  // Notes : convert number in a string to WORD ( myvar )
004107  004487  //       : returns true if function succeeds, advancing ptr
004108  004488        
004109  004489  func str_GetHexW("&ptr", "&var"), 1;
004110  004490  // Syntax: str_GetHexW(&ptr, &var);
004111  004491  // Usage : ok := str_GetHexW(&ptr, &var);
004112  004492  // Notes : convert HEX number in a string to WORD ( myvar )
004113  004493  //       : returns true if function succeeds, advancing ptr
004114  004494        
004115  004495  func str_GetC("&ptr", "&var"), 1;
004116  004496  // Syntax: str_GetC(&ptr, &var);
004117  004497  // Usage : ok := str_GetC(&ptr, &var);
004118  004498  // Notes : get a valid ascii char in a string to WORD ( myvar )
004119  004499  //       : returns true if function succeeds, advancing ptr
004120  004500        
004121  004501  func str_GetByte("ptr"), 1;
004122  004502  // Syntax: str_GetByte(ptr);
004123  004503  // Usage : myvar := str_GetByte(ptr);
004124  004504  // Notes : get a byte to myvar
004125  004505  //       : returns value
004126  004506        
004127  004507  func str_GetWord("ptr"), 1;
004128  004508  // Syntax: GetWord(ptr);
004129  004509  // Usage : GetWord(ptr);
004130  004510  // Notes : get a word to myvar
004131  004511  //       : returns value
004132  004512        
004133  004513  func str_PutByte("ptr","val"), 0;
004134  004514  // Syntax: str_PutByte(ptr);
004135  004515  // Usage : myvar := str_PutByte(ptr);
004136  004516  // Notes : put a byte at ptr
004137  004517  //       : returns value
004138  004518        
004139  004519  func str_PutWord("ptr","val"), 0;
004140  004520  // Syntax: str_PutWord("ptr","val");
004141  004521  // Usage : str_PutWord(p,100);
004142  004522  // Notes : put word 100 at current pointer location
004143  004523  //       : returns value
004144  004524        
004145  004525  func str_Match("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Match(&ptr, *str);
004147  004527  // Usage : r := str_Match(&p, "hello");
004148  004528  // Notes : Case sensitive match
004149  004529  //       : returns true if function succeded, andvancing pointer to position past
004150  004530  //       : the matched item. Note that any whitespace characters are skipped
004151  004531  //       : in the source string prior to the test.
004152  004532        
004153  004533  func str_MatchI("&ptr", "*str"), 1;
004154  004534  // Syntax: str_MatchI(&ptr, *str);
004155  004535  // Usage : r := str_MatchI(&p, "hello");
004156  004536  // Notes : Case insensitive match
004157  004537  //       : returns true if function succeded, andvancing pointer to position past
004158  004538  //       : the matched item. Note that any whitespace characters are skipped
004159  004539  //       : in the source string prior to the test.
004160  004540        
004161  004541  func str_Find("&ptr", "*str"), 1;
004162  004542  // Syntax: str_Find(&ptr, *str);
004163  004543  // Usage : n := str_Find(&p, "hello");
004164  004544  // Notes : given the address of a pointer to a source string as the
004165  004545  //       : first argument, and a pointer to a test string as the second
004166  004546  //       : argument, attempt to find the position of the matching string
004167  004547  //       : in the source string. The test is performed with case sensitivity.
004168  004548  //       : return 0 if not found, else returns the address of the first
004169  004549  //       : character of the match. NB:- The source pointer is not altered.
004170  004550        
004171  004551  func str_FindI("&ptr", "*str"), 1;
004172  004552  // Syntax: str_Find(&ptr, *str);
004173  004553  // Usage : n := str_Find(&p, "hello");
004174  004554  // Notes : given the address of a pointer to a source string as the
004175  004555  //       : first argument, and a pointer to a test string as the second
004176  004556  //       : argument, attempt to find the position of the matching string
004177  004557  //       : in the source string. The test is performed with no case
004178  004558  //       : sensitivity, eg upper and lower case chars are accepted.
004179  004559  //       : return 0 if not found, else returns the address of the first
004180  004560  //       : character of the match. NB:- The source pointer is not altered.
004181  004561        
004182  004562  func str_Length("ptr"), 1;
004183  004563  // Syntax: str_Length(ptr);
004184  004564  // Usage : len := str_Ptr(mystring);
004185  004565  // Notes : return the length of a byte aligned string excluding terminator
004186  004566        
004187  004567  func str_Printf("&ptr", "*format"), 1;
004188  004568  // Syntax: str_Printf("&ptr", "*format");
004189  004569  // Usage : r := str_Printf(&p, "hello");
004190  004570  // Notes : refer to documentation
004191  004571  //       :
004192  004572        
004193  004573  func str_Cat("dest","src"), 1;
004194  004574  // Syntax: str_Append("&dest","&src");
004195  004575  // Usage : str_Append(&buf,"Hello");
004196  004576  // Notes : Appends a copy of the source string to the destination string.
004197  004577  //       : The terminating null character in destination is overwritten by
004198  004578  //       : the first character of source, and a new null-character is appended
004199  004579  //       : at the end of the new string formed by the concatenation of both in destination.
004200  004580  //       : returns destination.
004201  004581        
004202  004582  func str_CatN("dest","src","count"), 1;
004203  004583  // Syntax: str_Append("&dest","&src","count");
004204  004584  // Usage : str_Append(&buf,"Monday",3);
004205  004585  // Notes : Appends a copy of the source string to the destination string.
004206  004586  //       : The number of characters copied is limited by "count".
004207  004587  //       : The terminating null character in destination is overwritten by
004208  004588  //       : the first character of source, and a new null-character is appended
004209  004589  //       : at the end of the new string formed by the concatenation of both in destination.
004210  004590  //       : returns destination.
004211  004591        
004212  004592        
004213  004593  func str_ByteMove("src", "dest", "count"), 1;
004214  004594  // Syntax   : str_ByteMove(src, dest, bytecount);
004215  004595  // Input    : STR *source points to byte aligned source.
004216  004596  //          : STR *dest   points to byte aligned destination.
004217  004597  //          : VAR count   number of bytes to transfer.
004218  004598  // Usage    : nextpos := str_ByteMove(s, d, 100);
004219  004599  // Notes    : copy bytes from "src" to "dest", stopping only
004220  004600  //          : when "count" is exhausted.
004221  004601  //          : No terminator is appended, it is purely a
004222  004602  //          : byte copy, and any zeroes encountered will
004223  004603  //          : also be copied.
004224  004604  // Returns  : returns a pointer to the end of the destination
004225  004605  //          : (which is "dest" + "count")
004226  004606        
004227  004607        
004228  004608  func str_Copy("dest", "src"), 1;
004229  004609  // Syntax   : str_Copy(dest, src);
004230  004610  // Input    : STR *dest   points to byte aligned destination.
004231  004611  //          : STR *source points to byte aligned source.
004232  004612  // Usage    : nextplace := str_Copy(d, s);
004233  004613  // Notes    : copy a string from "src" to "dest", stopping only
004234  004614  //          : when the end of source string "src" is encountered
004235  004615  //          : (0x00 terminator).
004236  004616  //          : The terminator is always appended, even if "src" is
004237  004617  //          : an empty string.
004238  004618  // Returns  : returns a pointer to the 0x00 string terminator at
004239  004619  //          : end of "dest" (which is "dest" + str_Length(src); )
004240  004620        
004241  004621        
004242  004622  func str_CopyN("dest", "src", "count"), 1;
004243  004623  // Syntax   : str_CopyN(dest, src, bytecount);
004244  004624  // Input    : STR *dest   points to byte aligned destination.
004245  004625  //          : STR *source points to byte aligned source.
004246  004626  //          : VAR count   max number of chars to copy.
004247  004627  // Usage    : nextplace := str_CopyN(d, s, 100);
004248  004628  // Notes    : copy a string from "src" to "dest", stopping only
004249  004629  //          : when "count" is exhausted, or end of source
004250  004630  //          : string "str" is encountered (0x00 string terminator).
004251  004631  //          : The terminator is always appended, even if
004252  004632  //          : "count" is zero, or "src" is a null string.
004253  004633  // Returns  : returns a pointer to the 0x00 string terminator
004254  004634  //          : (which is "dest" + whatever was copied)
004255  004635        
004256  004636        
004257  004637  func __reserved63(), 0; // do not remove
004258  004638  func __reserved64(), 0; // do not remove
004259  004639  func __reserved65(), 0; // do not remove
004260  004640  func __reserved66(), 0; // do not remove
004261  004641        
004262  004642  //=========================================================================================================
004263  004643  // FLASH memory functions
004264  004644  //=========================================================================================================
004265  004645  func flash_GetByte("bank", "ptr"), 1;
004266  004646  // Syntax   : flash_GetByte(bank, ptr);
004267  004647  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004268  004648  // Notes    : Reads a single byte from any flash location.
004269  004649  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004270  004650  //          : which is the header signature for a valid program.
004271  004651  // Returns  : the byte value from the location
004272  004652        
004273  004653        
004274  004654  func flash_GetWord("bank", "ptr"), 1;
004275  004655  // Syntax   : flash_GetWord(bank, ptr);
004276  004656  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004277  004657  // Notes    : Reads a single word from any flash location.
004278  004658  //          : The pointer is byte aligned.
004279  004659  //          : If the bank is read protected, only the first word can be read
004280  004660  //          : which is the header signature for a valid program (0xAA55).
004281  004661  // Returns  : the byte value from the location
004282  004662        
004283  004663        
004284  004664  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004285  004665  // Syntax   : flash_Copy(bank, ptr);
004286  004666  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004287  004667  // Notes    : Copies bytes from any flash locations to a user buffer.
004288  004668  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004289  004669  //          : If the bank is read protected, 0 bytes will be read
004290  004670  //          : which is the header signature for a valid program (0xAA55).
004291  004671  // Returns  : the count of bytes transferred.
004292  004672        
004293  004673        
004294  004674  func flash_Run("bank"), 1;
004295  004675  // Syntax    : flash_Run(bankx);
004296  004676  // Usage     : res := flash_Run(FLASHBANK_5);
004297  004677  // Notes     : Restarts the processor, running code from the required
004298  004678  //           : flash bank. bank may be a variable, or one of the
004299  004679  //           : pre-defined constants:-
004300  004680  //           :    FLASHBANK_0                 //0x00
004301  004681  //           :    FLASHBANK_1                 //0x01
004302  004682  //           :    FLASHBANK_2                 //0x02
004303  004683  //           :    FLASHBANK_3                 //0x03
004304  004684  //           :    FLASHBANK_4                 //0x04
004305  004685  //           :    FLASHBANK_5                 //0x05
004306  004686  // returns    : This function should net return as it restarts
004307  004687  //        : the processor and jumps to the required bank,
004308  004688  //        : If it does return, -1 indicates incorrect/invalid
004309  004689  //        : bank number, and -2 indicates no valid program
004310  004690  //        : in the selected bank.
004311  004691        
004312  004692  func flash_Bank(), 1;
004313  004693  // Syntax   : flash_Bank();
004314  004694  // Usage    : myvar := flash_Bank();
004315  004695  // Notes    : Identifies which flash bank the code is running from.
004316  004696  // Returns  : The FLASH bank that code is currently running from, 0-5.
004317  004697        
004318  004698        
004319  004699  func flash_EraseBank("bank", "confirmation"), 1;
004320  004700  // Syntax   : flash_EraseBank(bank, confirmation);
004321  004701  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004322  004702  // Notes    : This function should be used with extreme caution.
004323  004703  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004324  004704  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004325  004705  //          : a protected bank will not be erased, and function will return with 0
004326  004706  //          : If the destination bank is the same as the execution bank, the processor will reset
004327  004707  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004328  004708  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004329  004709  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004330  004710  // Returns  : returns true if the function succeeded
004331  004711  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004332  004712        
004333  004713  func flash_LoadFile("bank", "filename"), 1;
004334  004714  // Syntax   : flash_LoadFile(bank, ptr);
004335  004715  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004336  004716  // Notes    : Copies a file from uSD to the required flashbank.
004337  004717  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004338  004718  // Returns  : returns true if the function succeeded.
004339  004719        
004340  004720        
004341  004721  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004342  004722  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004343  004723  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004344  004724  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004345  004725  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004346  004726  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004347  004727  // Returns  : returns true if the function succeeded.
004348  004728        
004349  004729        
004350  004730  func flash_putstr("bank", "ptr"), 1;
004351  004731  // Syntax   : flash_putstr(bank, ptr);
004352  004732  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004353  004733  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004354  004734  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004355  004735  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004356  004736        
004357  004737  func flash_Blit16("bank", "offset", "count"), 1;
004358  004738  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004359  004739  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004360  004740  // Notes    : Blit an image to a GRAM window from FLASH storage.
004361  004741  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004362  004742  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004363  004743        
004364  004744  func flash_Blit8("bank", "offset", "count"), 1;
004365  004745  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004366  004746  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004367  004747  // Notes    : Blit an image to a GRAM window from FLASH storage.
004368  004748  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004369  004749  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004370  004750        
004371  004751  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004372  004752  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004373  004753  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004374  004754  // Notes    : Blit an image to a GRAM window from FLASH storage.
004375  004755  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004376  004756  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004377  004757        
004378  004758  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004379  004759  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004380  004760  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004381  004761  // Notes    : Blit an image to a GRAM window from FLASH storage.
004382  004762  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004383  004763  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004384  004764        
004385  004765  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004386  004766  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004387  004767  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004388  004768  // Notes    : Blit an image to a GRAM window from FLASH storage.
004389  004769  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004390  004770  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004391  004771        
004392  004772  func flash_Exec("bank", "arglistptr"), 1;
004393  004773  // Syntax: res := flash_Exec("bank","arglistptr");
004394  004774  // Usage : res := flash_Exec("bank","arglistptr");
004395  004775  // Notes : returns like a function, current program
004396  004776  //       : calling program is kept active and control returns to it.
004397  004777  //       : If arglistptr is 0, no arguments are passed, else
004398  004778  //       : arglist points to an array, the first element being
004399  004779  //       : the number of elements in the array.
004400  004780  //       : func 'main' in the called bank accepts the arguments.
004401  004781  // WARNING Not currently implemented!
004402  004782        
004403  004783        
004404  004784  func __reserved68(), 0; // do not remove
004405  004785  func __reserved69(), 0; // do not remove
004406  004786  func __reserved70(), 0; // do not remove
004407  004787        
004408  004788  //=========================================================================================================
004409  004789  // I/O and hardware functions
004410  004790  //=========================================================================================================
004411  004791        
004412  004792        
004413  004793        
004414  004794        
004415  004795  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004416  004796  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004417  004797  // Syntax: pin_Pulseout(pin, value);
004418  004798  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004419  004799  // Notes : only available on PA0 to PA9
004420  004800  //       : Invert the state of an output for "value" milliseconds.
004421  004801  //       : pulseout is non blocking, that is, code execution may continue while
004422  004802  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004423  004803  //       : If not already an output, pin is automatically made a push/pull output,
004424  004804  //       : and the last state of its output latch will determine pulse polarity.
004425  004805  //       : It's its open drain state is not altered if the pin was already an output.
004426  004806  //       : If pulseout is called while pulseout is still active, the pulse timer
004427  004807  //       : will simply be updated with the new "value" and the pulse will continue
004428  004808  //       : with the extended value.
004429  004809  //       : returns true if the pin number is legal (usually ignored)
004430  004810        
004431  004811        
004432  004812  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004433  004813  // Syntax: pin_Counter(pin, mode, userfunc);
004434  004814  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004435  004815  // Notes : only available on PA4 to PA9
004436  004816  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004437  004817  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004438  004818  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004439  004819  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004440  004820  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004441  004821  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004442  004822  //       : The pin may be configured as an input or output, the function behaves the same.
004443  004823  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004444  004824  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004445  004825  //       : "mode" has the following effect:-
004446  004826  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004447  004827  //       : mode COUNT_RISE(1) = increment on every rising edge
004448  004828  //       : mode COUNT_FALL(2) = increment on every falling edge
004449  004829  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004450  004830        
004451  004831  //------------------------------------------------------------------//
004452  004832  // pin counter mode constants                                       //
004453  004833  //------------------------------------------------------------------//
004454  004834  #CONST
004455  004839  #END
004456  004840        
004457  004841  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004458  004842  // Syntax: Qencoder1(pinA, pinB, mode);
004459  004843  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004460  004844  // Notes : not available on pins PA14 and PA15
004461  004845  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004462  004846  //       : or written to at any time with peekW and pokeW using the following constants:-
004463  004847  //       : It is necessary to configure the pins first, depending on your requirements, eg
004464  004848  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004465  004849  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004466  004850  //       : Returns true if the pin numbers are legal (usually ignored)
004467  004851  //    QEN1_COUNTER_LO
004468  004852  //    QEN1_COUNTER_HI
004469  004853  //    QEN1_DELTA This is reset to 0 when read
004470  004854        
004471  004855  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004472  004856  // Syntax: Qencoder2(pinA, pinB, mode);
004473  004857  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004474  004858  // Notes : not available on pins PA14 and PA15
004475  004859  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004476  004860  //       : or written to at any time with peekW and pokeW using the following constants:-
004477  004861  //       : It is necessary to configure the pins first, depending on your requirements, eg
004478  004862  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004479  004863  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004480  004864  //       : Returns true if the pin numbers are legal (usually ignored)
004481  004865  //    QEN2_COUNTER_LO
004482  004866  //    QEN2_COUNTER_HI
004483  004867  //    QEN2_DELTA This is reset to 0 when read
004484  004868        
004485  004869        
004486  004870  func Qencoder1Reset(), 0;
004487  004871  // Syntax: Qencoder1Reset();
004488  004872  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004489  004873  // Notes :
004490  004874  //    QEN1_COUNTER_LO is reset to zero
004491  004875  //    QEN1_COUNTER_HI is reset to zero
004492  004876  //    QEN1_DELTA is reset to zero
004493  004877        
004494  004878  func Qencoder2Reset(), 0;
004495  004879  // Syntax: Qencoder2Reset();
004496  004880  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004497  004881  // Notes :
004498  004882  //    QEN2_COUNTER_LO is reset to zero
004499  004883  //    QEN2_COUNTER_HI is reset to zero
004500  004884  //    QEN2_DELTA is reset to zero
004501  004885        
004502  004886        
004503  004887  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004504  004888  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004505  004889  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004506  004890  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004507  004891  //       : Invert the state of an output at a "freq" freuency "count" times.
004508  004892  //       : PulseoutCount is non blocking, that is, code execution may continue while
004509  004893  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004510  004894  //       : If not already an output, pin is automatically made a push/pull output,
004511  004895  //       : and the last state of its output latch will determine pulse polarity.
004512  004896  //       : It's its open drain state is not altered if the pin was already an output.
004513  004897  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004514  004898  //       : will simply have the new "value" added to it.
004515  004899  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004516  004900  //       : returns true if the pin number is legal (usually ignored)
004517  004901        
004518  004902  func __reserved72(), 0; // do not remove
004519  004903        
004520  004904  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004521  004905  // Syntax: pwm_Init(pin, value);
004522  004906  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004523  004907  // Notes : only available on PA4 to PA9
004524  004908  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004525  004909  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004526  004910  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004527  004911  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004528  004912  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004529  004913  //       :                    : Repetition rate ~50hz or 20ms
004530  004914  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004531  004915  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004532  004916  //       : pwm_Init is non blocking and the pwm continues until turn off
004533  004917  //       : Returns true if the pin number is legal (usually ignored)
004534  004918        
004535  004919  //------------------------------------------------------------------------------
004536  004920  // PWM Constants
004537  004921  //------------------------------------------------------------------------------
004538  004922  #CONST
004539  004927  #END
004540  004928        
004541  004929  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004542  004930  // Syntax   : OW_Reset(PA0);
004543  004931  // Usage    : OW_Reset(PA0);
004544  004932  // Notes    : Only available on PA0 to PA13
004545  004933  //          : Resets  ONEWIRE device
004546  004934  //          : Returns the status, 0 = ACK.
004547  004935  //          :
004548  004936        
004549  004937  func OW_Read("pin"), 1;                              // read data from 1wire bus
004550  004938  // Syntax   : OW_Read(PA0);
004551  004939  // Usage    : arg1 := OW_Read(PA0);
004552  004940  // Notes    : Only available on PA0 to PA13
004553  004941  //          : Reads value of the ONEWIRE pin
004554  004942  //          : that was previously selected for ONEWIRE comms.
004555  004943  //          :
004556  004944  //          : pin = 0 : the next byte from the ONEWIRE bus
004557  004945        
004558  004946  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004559  004947  // Syntax   : OW_Read9(PA0);
004560  004948  // Usage    : OW_Read9(PA0);
004561  004949  // Notes    : Only available on PA0 to PA13
004562  004950  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004563  004951  //          : that was previously selected for ONEWIRE comms.
004564  004952  //          :
004565  004953  //          : read the 9 bits from the ONEWIRE bus
004566  004954        
004567  004955  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004568  004956  // Syntax   : OW_Write(PA0, arg);
004569  004957  // Usage    : OW_Write(PA0, arg);
004570  004958  // Notes    : Only available on PA0 to PA13
004571  004959  //          : Sends ONEWIRE data on the appropriate
004572  004960  //          : pin that was previously  selected as ONEWIRE comms.
004573  004961  //          :
004574  004962  //          : write arg to the ONEWIRE bus
004575  004963        
004576  004964  func __reserved77(), 0; // do not remove
004577  004965  func __reserved78(), 0; // do not remove
004578  004966        
004579  004967  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004580  004968  // Syntax: sys_GetDateVar(&year, &month, &day);
004581  004969  // Usage : sys_GetDateVar(&year, &month, &day);
004582  004970  // Notes : Retrieves the date values into variables
004583  004971        
004584  004972  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004585  004973  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004974  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004587  004975  // Notes : Retrieves the time values into variables
004588  004976        
004589  004977  func sys_PmmC(), 0;
004590  004978  // Syntax: sys_PmmC();
004591  004979  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004592  004980  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004593  004981  //       : Can be captured to a buffer using the to( function
004594  004982  //       : Returns nothing.
004595  004983        
004596  004984  func sys_Driver(), 0;
004597  004985  // Syntax: sys_Driver();
004598  004986  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004599  004987  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004600  004988  //       : Can be captured to a buffer using the to( function
004601  004989  //       : Returns nothing.
004602  004990        
004603  004991  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004604  004992  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004605  004993  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004606  004994  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004607  004995  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004608  004996  //       : elements in each buffer. This will need to be greater than "width" for negative
004609  004997  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004610  004998  //       : pass 0 as the address for any unused traces
004611  004999  //       : X position is incremented each point by "xstep" pixels.
004612  005000  //       : Y values are derived from a Y buffer "newy" (signed values).
004613  005001  //       : 2 buffers need to be supplied, "newy" contains new
004614  005002  //       : points to be drawn, "oldy" contains most recent set
004615  005003  //       : of points to be un-drawn. After the waveform is drawn,
004616  005004  //       : "newy" buffer is automatically copied to "oldy" buffer.
004617  005005        
004618  005006        
004619  005007  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004620  005008  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004621  005009  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004622  005010  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004623  005011  //       : and calls "COMPLETEfunction" when done.
004624  005012  //       : "rate" is samples in 100 of samples per second
004625  005013  //       : Any unused IOx pins should have their buffer addresses set to 0
004626  005014  //       : For performance reasons samples are taken in chunks of 32, thus if you
004627  005015  //       : request 33 samples there will be a delay of 31 samples before
004628  005016  //       : "COMPLETEfunction" is called
004629  005017  //       : If Touch is enabled this function should be called no more than once per
004630  005018  //       : millisecond, otherwise touch behaviour could be eratic.
004631  005019        
004632  005020        
004633  005021  func sys_ErrorMessage("msgnum"), 1;
004634  005022        
004635  005023  //==============================//
004636  005024  // NeoPixel specific functions  //
004637  005025  //==============================//
004638  005026        
004639  005027  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004640  005028  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004641  005029  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004642  005030  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004643  005031  //       : data        : Address of data to be sent
004644  005032  //       : size        : number of colour 'sets' to follow
004645  005033  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004646  005034  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004647  005035  //       : Repeat      : Number of times to repeat the colours between first and last
004648  005036  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004649  005037  //       : Returns true if the pin number is legal (usually ignored)
004650  005038  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004651  005039  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004652  005040        
004653  005041  // NeoPixel related constants
004654  005042  #CONST
004655  005046  #END
004656  005047        
004657  005048  func __reserved85(), 0; // do not remove
004658  005049  func __reserved86(), 0; // do not remove
004659  005050        
004660  005051  //==============================================//
004661  005052  // spi flash device specific functions          //
004662  005053  //==============================================//
004663  005054        
004664  005055  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004665  005056  // Syntax   : spiflash_SIG("spi#","enablepin");
004666  005057  // Usage    : var := spiflash_SIG(SPI1, PA0);
004667  005058  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004668  005059  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004669  005060  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004670  005061  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004671  005062  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004672  005063  //          : byte is ignored.
004673  005064        
004674  005065  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004675  005066  // Syntax   : spiflash_ID("spi#","enablepin");
004676  005067  // Usage    : var := spiflash_ID(SPI1, PA0);
004677  005068  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004678  005069  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004679  005070  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004680  005071  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004681  005072  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004682  005073  //          : contains capacity. Refer to the device data sheet for further information.
004683  005074        
004684  005075  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004685  005076  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004686  005077  // Usage    : spiflash_BulkErase(SPI1, PA0);
004687  005078  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004688  005079  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004689  005080  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004690  005081  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004691  005082  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004692  005083  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004693  005084        
004694  005085  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004695  005086  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004696  005087  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004697  005088  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004698  005089  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004699  005090  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004700  005091  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004701  005092  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004702  005093  //          : blockAddress The address of the 64k FLASH block to be erased.
004703  005094  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004704  005095  //          : can take up to 3 milliseconds.
004705  005096        
004706  005097  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004707  005098  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004708  005099  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004709  005100  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004710  005101        
004711  005102  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004712  005103  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004713  005104  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004714  005105  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004715  005106  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004716  005107  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004717  005108  //       : returns number of characters read
004718  005109  //       : if "dest" is zero, data is read direct to GRAM window
004719  005110  //       :
004720  005111        
004721  005112  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004722  005113  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004723  005114  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004724  005115  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004725  005116  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004726  005117  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004727  005118  //       : returns number of bytes written
004728  005119  //       :
004729  005120        
004730  005121  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004731  005122  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004732  005123  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004733  005124  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004734  005125  //       : The image is displayed at x,y (with respect to top left corner).
004735  005126        
004736  005127  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004737  005128  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004738  005129  // Usage : spiflash_PutC('x', SPI1, PA0);
004739  005130  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004740  005131  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004741  005132  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004742  005133        
004743  005134  func spiflash_GetC("spi#", "enablepin"), 1;
004744  005135  // Syntax: spiflash_GetC("spi#", "enablepin");
004745  005136  // Usage : mychar := fgetC(SPI1, PA0);
004746  005137  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004747  005138  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004748  005139  //       : by subsequent reads or writes.
004749  005140  //       : returns next char from file
004750  005141        
004751  005142  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004752  005143  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004753  005144  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004754  005145  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004755  005146  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004756  005147  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004757  005148        
004758  005149  func spiflash_GetW("spi#", "enablepin"), 1;
004759  005150  // Syntax: spiflash_GetW("spi#", "enablepin");
004760  005151  // Usage : myword := fgetW(SPI1, PA0);
004761  005152  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004762  005153  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004763  005154  //       : by subsequent reads or writes.
004764  005155  // Notes : returns next word in file
004765  005156        
004766  005157  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004767  005158  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004768  005159  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004769  005160  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004770  005161  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004771  005162  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004772  005163  //       : returns number of characters written
004773  005164  //       :
004774  005165        
004775  005166  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004776  005167  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004777  005168  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004778  005169  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004779  005170  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004780  005171  //       : by subsequent reads or writes.
004781  005172  //       : returns pointer to string or null if failed.
004782  005173  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004783  005174  //       : NB:- only reads up to "size-1" characters into "string"
004784  005175  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004785  005176  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004786  005177  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004787  005178  //       : C] It reaches the end of file
004788  005179  //       : D] A read error occurs.
004789  005180        
004790  005181  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004791  005182  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004792  005183  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004793  005184  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004794  005185  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004795  005186  //       : return a function pointer to the allocation.
004796  005187  //       : The function can then be invoked just like any other
004797  005188  //       : function would be called via a function pointer.
004798  005189  //       : Parameters may be passed to it in a conventional way.
004799  005190  //       : The function may be discarded at any time when no
004800  005191  //       : longer required, thus freeing its memory resources.
004801  005192  //       : The loaded function can be discarded with mem_Free(..)
004802  005193  //       : eg:
004803  005194  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004804  005195  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004805  005196  //       : then elsewhere in your program:-
004806  005197  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004807  005198  //       : if(res == QUIT_APPLICATION) goto exitApp;
004808  005199  //       : Later in your program, when popupWindow is no longer
004809  005200  //       : required for the application:-
004810  005201  //       : res := mem_Free(popupWindow);
004811  005202  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004812  005203  //       : The callers stack is shared by the loaded function,
004813  005204  //       : however any global variables in the loaded function
004814  005205  //       : are private to that function.
004815  005206  //
004816  005207        
004817  005208  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004818  005209  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004819  005210  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004820  005211  // Notes : current program releases any allocated memory but
004821  005212  //       : retains the stack and global memory.
004822  005213  //       : If arglistptr is 0, no arguments are passed, else
004823  005214  //       : arglist points to an array, the first element being
004824  005215  //       : the number of elements in the array.
004825  005216  //       : func 'main' in the called program accepts
004826  005217  //       : the arguments, if any. The arguments can only
004827  005218  //       : be passed by value, no pointers or references can be
004828  005219  //       : used as all memory is cleared before the file
004829  005220  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004830  005221  //       : for functions that can pass by reference.
004831  005222        
004832  005223  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004833  005224  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004834  005225  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004835  005226  // Notes : returns like a function, current program
004836  005227  //       : calling program is kept active and control returns to it.
004837  005228  //       : If arglistptr is 0, no arguments are passed, else
004838  005229  //       : arglist points to an array, the first element being
004839  005230  //       : the number of elements in the array.
004840  005231  //       : func 'main' in the called program accepts the arguments.
004841  005232  //       : This function is similar to spiflash_LoadFunction(...), however,
004842  005233  //       : the function argument list is passed by pointer, and
004843  005234  //       : the memory consumed by the function is released as
004844  005235  //       : soon as the function completes.
004845  005236        
004846  005237  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004847  005238  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004848  005239  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004849  005240  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004850  005241  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004851  005242  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004852  005243  //       : Returns NULL if function fails.
004853  005244  //       : Returns a handle (pointer to the memory allocation) to the
004854  005245  //       : image control list that has been created.
004855  005246        
004856  005247  // Notes : This function Calculates the size of a chunk of memory required for
004857  005248  //       : a image list and populates it from the image control file ("*.dat")
004858  005249  //       : therefore, when imagelist is no longer required, you must de-allocate
004859  005250  //       : the image list memory by using eg:- mem_Free(hImagelist);
004860  005251  //       : to restore the heap.
004861  005252  //       :
004862  005253        
004863  005254  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004864  005255  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004865  005256  // Usage : spiflash_PlayWAV(SPI1, PA0);
004866  005257  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004867  005258  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004868  005259  //       : or writes.
004869  005260  //       : This function automatically grabs a chunk
004870  005261  //       : of memory for a file buffer, and a wave
004871  005262  //       : buffer. The minimum memory requirement is
004872  005263  //       : about 580 bytes for the disk io service and
004873  005264  //       : a minimum wave buffer size of 1024. The size
004874  005265  //       : of the wave buffer allocation
004875  005266  //       : can be increased by the snd_BufSize function.
004876  005267  //       : The default size 1024 bytes.
004877  005268  //       : NB the memory is only required during the
004878  005269  //       : duration of play, and is automatically
004879  005270  //       : released while not in use.
004880  005271  //       : See the Sound Class services for other associated controls.
004881  005272  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004882  005273  //       : If errors occured, the folling is returned
004883  005274  //       : -7  : Insufficient memory available for WAV buffer and file
004884  005275  //       : -6  : cant play this rate
004885  005276  //       : -5  : no data chunk found in first rsector
004886  005277  //       : -4  : no format data
004887  005278  //       : -3  : no wave chunk signature
004888  005279  //       : -2  : bad wave file format
004889  005280  //       : -1  : file not found
004890  005281        
004891  005282  //==============================================//
004892  005283  // more com functions                           //
004893  005284  //==============================================//
004894  005285        
004895  005286  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004896  005287  // Syntax   : com1_TXblock("buf", "bufsize");
004897  005288  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004898  005289  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004899  005290  //          : if a transmit buffer is active and space is available this function will return almost
004900  005291  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004901  005292        
004902  005293  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004903  005294  // Syntax   : com1_RXblock("buf", "bufsize");
004904  005295  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004905  005296  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004906  005297  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004907  005298  //          : immediately otherwise it will block until until the required bytes are received.
004908  005299        
004909  005300  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004910  005301  // Syntax   : com_TXblock("buf", "bufsize");
004911  005302  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004912  005303  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004913  005304  //          : if a transmit buffer is active and space is available this function will return almost
004914  005305  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004915  005306        
004916  005307  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004917  005308  // Syntax   : com_RXblock("buf", "bufsize");
004918  005309  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004919  005310  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004920  005311  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004921  005312  //          : immediately otherwise it will block until until the required bytes are received.
004922  005313        
004923  005314  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004924  005315  // Syntax   : com_TXblock("buf", "bufsize");
004925  005316  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004926  005317  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004927  005318  //          : if a transmit buffer is active and space is available this function will return almost
004928  005319  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004929  005320        
004930  005321  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004931  005322  // Syntax   : com_RXblock("buf", "bufsize");
004932  005323  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004933  005324  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004934  005325  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004935  005326  //          : immediately otherwise it will block until until the required bytes are received.
004936  005327        
004937  005328  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004938  005329  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004939  005330  // Usage : disp_BlitPixelsFromCOM1();
004940  005331  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004941  005332  //       : display from the specified com port.
004942  005333        
004943  005334  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004944  005335  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004945  005336  // Usage : disp_BlitPixelsFromCOM2();
004946  005337  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004947  005338  //       : display from the specified com port.
004948  005339        
004949  005340  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004950  005341  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004951  005342  // Usage : disp_BlitPixelsFromCOM3();
004952  005343  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004953  005344  //       : display from the specified com port.
004954  005345        
004955  005346        
004956  005347  //==============================================//
004957  005348  // crc generation functions                     //
004958  005349  //==============================================//
004959  005350        
004960  005351  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004961  005352  // *Notes   : (if you calculate all of the incoming data
004962  005353  //          : INCLUDING the CRC, the result should be 0x00
004963  005354  //          : This is equivalent to simple addition of all bytes
004964  005355  //          : and returning the negated sum an 8 bit value.
004965  005356  //          : For the standard test string "123456789",
004966  005357  //          : crc_CSUM_8 will return 0x0023.
004967  005358        
004968  005359        
004969  005360  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004970  005361  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004971  005362  //          : (if you calculate all of the incoming data
004972  005363  //          : INCLUDING the CRC, the result should be 0x0000
004973  005364  //          : For the standard test string "123456789",
004974  005365  //          : crc_16 will return 0xBB3D.
004975  005366        
004976  005367        
004977  005368  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004978  005369  // *Notes   : (if you calculate all of the incoming data
004979  005370  //          : INCLUDING the CRC, the result should be 0x0000
004980  005371  //          : For the standard test string "123456789",
004981  005372  //          : crc_MODBUS will return 0x4B37.
004982  005373        
004983  005374        
004984  005375  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004985  005376  // *Notes   : (if you calculate all of the incoming data
004986  005377  //          : INCLUDING the CRC, the result should be 0x0000
004987  005378  //          : For the standard test string "123456789",
004988  005379  //          : crc_CCITT will return the following:-
004989  005380  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004990  005381  //          : seed = 0xFFFF, result = 0x29B1
004991  005382  //          : seed = 0x1D0F, result = 0xE5CC
004992  005383        
004993  005384        
004994  005385  //------------------------------------------------------------------//
004995  005386  // CONSTANTS
004996  005387  //------------------------------------------------------------------//
004997  005388        
004998  005389  #CONST
004999  005393  #END
005000  005394        
005001  005395  // timebase constants for timebase_init
005002  005396  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005003  005397  #CONST
005004  005408  #END
005005  005409        
005006  005410        
005007  005411  // generic constants
005008  005412  #CONST
005009  005420  #END
005010  005421        
005011  005422        
005012  005423        
005013  005424  //gfx_Get() related constants
005014  005425  #CONST
005015  005434  #END
005016  005435        
005017  005436        
005018  005437        
005019  005438        
005020  005439  #CONST
005021  005452  #END
005022  005453        
005023  005454        
005024  005455  #CONST
005025  005480  #END
005026  005481        
005027  005482        
005028  005483        
005029  005484        
005030  005485  // timer control  related constants
005031  005486  #CONST
005032  005495  #END
005033  005496        
005034  005497        
005035  005498        
005036  005499  //------------------------------------------------------------------------------
005037  005500  // system WORD variables accesible with peekW and pokeW or pointer access
005038  005501  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005039  005502  // can also be accessed with peekW and pokeW
005040  005503  //------------------------------------------------------------------------------
005041  005504        
005042  005505  #CONST
005043  005600  #END
005044  005601        
005045  005602  #CONST
005046  005767  #END
005047  005768        
005048  005769        
005049  005770        
005050  005771  //==================================================================================================
005051  005772        
005052  005773        
005053  005774        
005054  000013      #ENDIF
005055  000014        
005056  000015        
005057  000016  //===========================================================================================
005058  000017        
005059  000018        
005060  000002        
005061  000003  // generated 17/07/2015 9:00:26
005062  000004        
005063  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005064  000006  #inherit "4DGL_16bitColours.fnc"
005065  000006  #inherit "4DGL_16bitColours.fnc"
005066  000004  */
005067  000005        
005068  000006        
005069  000007        
005070  000008  #CONST
005071  000149  #END
005072  000150        
005073  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005074  000008  #inherit "VisualConst.inc"
005075  000008  #inherit "VisualConst.inc"
005076  000001  // Line Patterns
005077  000002  #constant  LPCOARSE    0xF0F0
005078  000002  #constant  LPCOARSE    0xF0F0
005079  000003  #constant  LPMEDIUM    0x3333
005080  000003  #constant  LPMEDIUM    0x3333
005081  000004  #constant  LPFINE      0xAAAA
005082  000004  #constant  LPFINE      0xAAAA
005083  000005  #constant  LPDASHDOT   0x03CF
005084  000005  #constant  LPDASHDOT   0x03CF
005085  000006  #constant  LPDASHDOTDOT 0x0333
005086  000006  #constant  LPDASHDOTDOT 0x0333
005087  000007  #constant  LPSOLID     0x0000
005088  000007  #constant  LPSOLID     0x0000
005089  000009        
005090  000010        
file I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1Const.inc

005091  000011  #inherit "RepRap_Touchv1Const.inc"
005092  000011  #inherit "RepRap_Touchv1Const.inc"
005093  000001  // File generated 17/07/2015 9:00:00
005094  000002  // Warning! This is a generated file, any manual changes will be
005095  000003  // lost during the next generation.
005096  000004        
005097  000005  #constant  Strings1Count    1
005098  000005  #constant  Strings1Count    1
005099  000006  #constant  Strings1Size     20
005100  000006  #constant  Strings1Size     20
005101  000007  #constant  Strings3Count    1
005102  000007  #constant  Strings3Count    1
005103  000008  #constant  Strings3Size     18
005104  000008  #constant  Strings3Size     18
005105  000009  #constant  Strings20Count    1
005106  000009  #constant  Strings20Count    1
005107  000010  #constant  Strings20Size     35
005108  000010  #constant  Strings20Size     35
005109  000011  #constant  Strings4Count    1
005110  000011  #constant  Strings4Count    1
005111  000012  #constant  Strings4Size     25
005112  000012  #constant  Strings4Size     25
005113  000013  #constant  Strings6Count    1
005114  000013  #constant  Strings6Count    1
005115  000014  #constant  Strings6Size     31
005116  000014  #constant  Strings6Size     31
005117  000015  #constant  Strings2Count    0
005118  000015  #constant  Strings2Count    0
005119  000016  #constant  Strings2Size     1
005120  000016  #constant  Strings2Size     1
005121  000017  #constant  Strings0Count    1
005122  000017  #constant  Strings0Count    1
005123  000018  #constant  Strings0Size     7
005124  000018  #constant  Strings0Size     7
005125  000019  #constant  Strings9Count    0
005126  000019  #constant  Strings9Count    0
005127  000020  #constant  Strings9Size     1
005128  000020  #constant  Strings9Size     1
005129  000021  #constant  Strings34Count    0
005130  000021  #constant  Strings34Count    0
005131  000022  #constant  Strings34Size     1
005132  000022  #constant  Strings34Size     1
005133  000023  #constant  Strings36Count    0
005134  000023  #constant  Strings36Count    0
005135  000024  #constant  Strings36Size     1
005136  000024  #constant  Strings36Size     1
005137  000025  #constant  Strings37Count    0
005138  000025  #constant  Strings37Count    0
005139  000026  #constant  Strings37Size     1
005140  000026  #constant  Strings37Size     1
005141  000027  #constant  Strings12Count    1
005142  000027  #constant  Strings12Count    1
005143  000028  #constant  Strings12Size     15
005144  000028  #constant  Strings12Size     15
005145  000029  #constant  Strings14Count    1
005146  000029  #constant  Strings14Count    1
005147  000030  #constant  Strings14Size     23
005148  000030  #constant  Strings14Size     23
005149  000031  #constant  Strings16Count    0
005150  000031  #constant  Strings16Count    0
005151  000032  #constant  Strings16Size     1
005152  000032  #constant  Strings16Size     1
005153  000033  #constant  Strings15Count    1
005154  000033  #constant  Strings15Count    1
005155  000034  #constant  Strings15Size     24
005156  000034  #constant  Strings15Size     24
005157  000035  #constant  Strings21Count    1
005158  000035  #constant  Strings21Count    1
005159  000036  #constant  Strings21Size     35
005160  000036  #constant  Strings21Size     35
005161  000037  #constant  Strings11Count    1
005162  000037  #constant  Strings11Count    1
005163  000038  #constant  Strings11Size     33
005164  000038  #constant  Strings11Size     33
005165  000039  #constant  Strings22Count    1
005166  000039  #constant  Strings22Count    1
005167  000040  #constant  Strings22Size     20
005168  000040  #constant  Strings22Size     20
005169  000041  #constant  Strings23Count    1
005170  000041  #constant  Strings23Count    1
005171  000042  #constant  Strings23Size     17
005172  000042  #constant  Strings23Size     17
005173  000043  #constant  Strings24Count    1
005174  000043  #constant  Strings24Count    1
005175  000044  #constant  Strings24Size     26
005176  000044  #constant  Strings24Size     26
005177  000045  #constant  Strings25Count    1
005178  000045  #constant  Strings25Count    1
005179  000046  #constant  Strings25Size     10
005180  000046  #constant  Strings25Size     10
005181  000047  #constant  Strings26Count    1
005182  000047  #constant  Strings26Count    1
005183  000048  #constant  Strings26Size     10
005184  000048  #constant  Strings26Size     10
005185  000049  #constant  Strings27Count    1
005186  000049  #constant  Strings27Count    1
005187  000050  #constant  Strings27Size     11
005188  000050  #constant  Strings27Size     11
005189  000051  #constant  Strings5Count    1
005190  000051  #constant  Strings5Count    1
005191  000052  #constant  Strings5Size     37
005192  000052  #constant  Strings5Size     37
005193  000053  #constant  Strings28Count    1
005194  000053  #constant  Strings28Count    1
005195  000054  #constant  Strings28Size     40
005196  000054  #constant  Strings28Size     40
005197  000055  #constant  Strings35Count    1
005198  000055  #constant  Strings35Count    1
005199  000056  #constant  Strings35Size     36
005200  000056  #constant  Strings35Size     36
005201  000057  #constant  Strings33Count    1
005202  000057  #constant  Strings33Count    1
005203  000058  #constant  Strings33Size     33
005204  000058  #constant  Strings33Size     33
005205  000059  #constant  Strings10Count    1
005206  000059  #constant  Strings10Count    1
005207  000060  #constant  Strings10Size     15
005208  000060  #constant  Strings10Size     15
005209  000061  #constant  Strings7Count    0
005210  000061  #constant  Strings7Count    0
005211  000062  #constant  Strings7Size     1
005212  000062  #constant  Strings7Size     1
005213  000063  #constant  Strings8Count    0
005214  000063  #constant  Strings8Count    0
005215  000064  #constant  Strings8Size     1
005216  000064  #constant  Strings8Size     1
005217  000065  #constant  Strings38Count    0
005218  000065  #constant  Strings38Count    0
005219  000066  #constant  Strings38Size     1
005220  000066  #constant  Strings38Size     1
005221  000067  #constant  Strings39Count    0
005222  000067  #constant  Strings39Count    0
005223  000068  #constant  Strings39Size     1
005224  000068  #constant  Strings39Size     1
005225  000069  #constant  Strings40Count    1
005226  000069  #constant  Strings40Count    1
005227  000070  #constant  Strings40Size     7
005228  000070  #constant  Strings40Size     7
005229  000071  #constant  Strings41Count    1
005230  000071  #constant  Strings41Count    1
005231  000072  #constant  Strings41Size     7
005232  000072  #constant  Strings41Size     7
005233  000073  #constant  Strings42Count    1
005234  000073  #constant  Strings42Count    1
005235  000074  #constant  Strings42Size     7
005236  000074  #constant  Strings42Size     7
005237  000075  #constant  Strings43Count    0
005238  000075  #constant  Strings43Count    0
005239  000076  #constant  Strings43Size     1
005240  000076  #constant  Strings43Size     1
005241  000077  #constant  Strings44Count    0
005242  000077  #constant  Strings44Count    0
005243  000078  #constant  Strings44Size     1
005244  000078  #constant  Strings44Size     1
005245  000079  #constant  Strings45Count    0
005246  000079  #constant  Strings45Count    0
005247  000080  #constant  Strings45Size     1
005248  000080  #constant  Strings45Size     1
005249  000081  #constant  Strings51Count    0
005250  000081  #constant  Strings51Count    0
005251  000082  #constant  Strings51Size     1
005252  000082  #constant  Strings51Size     1
005253  000083  #constant  Strings52Count    0
005254  000083  #constant  Strings52Count    0
005255  000084  #constant  Strings52Size     1
005256  000084  #constant  Strings52Size     1
005257  000085  #constant  Strings17Count    1
005258  000085  #constant  Strings17Count    1
005259  000086  #constant  Strings17Size     65
005260  000086  #constant  Strings17Size     65
005261  000087  #constant  Strings18Count    1
005262  000087  #constant  Strings18Count    1
005263  000088  #constant  Strings18Size     42
005264  000088  #constant  Strings18Size     42
005265  000089  #constant  Strings19Count    1
005266  000089  #constant  Strings19Count    1
005267  000090  #constant  Strings19Size     45
005268  000090  #constant  Strings19Size     45
005269  000091  #constant  Strings29Count    1
005270  000091  #constant  Strings29Count    1
005271  000092  #constant  Strings29Size     65
005272  000092  #constant  Strings29Size     65
005273  000093  #constant  Strings30Count    1
005274  000093  #constant  Strings30Count    1
005275  000094  #constant  Strings30Size     45
005276  000094  #constant  Strings30Size     45
005277  000095  #constant  Strings31Count    1
005278  000095  #constant  Strings31Count    1
005279  000096  #constant  Strings31Size     7
005280  000096  #constant  Strings31Size     7
005281  000097  #constant  Strings32Count    1
005282  000097  #constant  Strings32Count    1
005283  000098  #constant  Strings32Size     19
005284  000098  #constant  Strings32Size     19
005285  000099  #constant  Strings49Count    1
005286  000099  #constant  Strings49Count    1
005287  000100  #constant  Strings49Size     17
005288  000100  #constant  Strings49Size     17
005289  000101  #constant  Strings50Count    1
005290  000101  #constant  Strings50Count    1
005291  000102  #constant  Strings50Size     20
005292  000102  #constant  Strings50Size     20
005293  000103  #constant  Strings13Count    1
005294  000103  #constant  Strings13Count    1
005295  000104  #constant  Strings13Size     3
005296  000104  #constant  Strings13Size     3
005297  000105  #constant  Strings46Count    0
005298  000105  #constant  Strings46Count    0
005299  000106  #constant  Strings46Size     1
005300  000106  #constant  Strings46Size     1
005301  000107  #constant  Strings47Count    1
005302  000107  #constant  Strings47Count    1
005303  000108  #constant  Strings47Size     3
005304  000108  #constant  Strings47Size     3
005305  000109  #constant  Strings48Count    0
005306  000109  #constant  Strings48Count    0
005307  000110  #constant  Strings48Size     1
005308  000110  #constant  Strings48Size     1
005309  000111  #constant  Strings53Count    1
005310  000111  #constant  Strings53Count    1
005311  000112  #constant  Strings53Size     142
005312  000112  #constant  Strings53Size     142
005313  000113  // object indexes into ImageControl
005314  000114  #CONST
005315  000346  #END
005316  000347        
005317  000348  #constant  Strings1StartH   0x0
005318  000348  #constant  Strings1StartH   0x0
005319  000349  #constant  Strings1StartL   0x0
005320  000349  #constant  Strings1StartL   0x0
005321  000350  #constant  Strings3StartH   0x0
005322  000350  #constant  Strings3StartH   0x0
005323  000351  #constant  Strings3StartL   0x200
005324  000351  #constant  Strings3StartL   0x200
005325  000352  #constant  Strings20StartH   0x0
005326  000352  #constant  Strings20StartH   0x0
005327  000353  #constant  Strings20StartL   0x400
005328  000353  #constant  Strings20StartL   0x400
005329  000354  #constant  Strings4StartH   0x0
005330  000354  #constant  Strings4StartH   0x0
005331  000355  #constant  Strings4StartL   0x600
005332  000355  #constant  Strings4StartL   0x600
005333  000356  #constant  Strings6StartH   0x0
005334  000356  #constant  Strings6StartH   0x0
005335  000357  #constant  Strings6StartL   0x800
005336  000357  #constant  Strings6StartL   0x800
005337  000358  #constant  Strings2StartH   0x0
005338  000358  #constant  Strings2StartH   0x0
005339  000359  #constant  Strings2StartL   0xA00
005340  000359  #constant  Strings2StartL   0xA00
005341  000360  #constant  Strings0StartH   0x0
005342  000360  #constant  Strings0StartH   0x0
005343  000361  #constant  Strings0StartL   0xC00
005344  000361  #constant  Strings0StartL   0xC00
005345  000362  #constant  Strings9StartH   0x0
005346  000362  #constant  Strings9StartH   0x0
005347  000363  #constant  Strings9StartL   0xE00
005348  000363  #constant  Strings9StartL   0xE00
005349  000364  #constant  Strings34StartH   0x0
005350  000364  #constant  Strings34StartH   0x0
005351  000365  #constant  Strings34StartL   0x1000
005352  000365  #constant  Strings34StartL   0x1000
005353  000366  #constant  Strings36StartH   0x0
005354  000366  #constant  Strings36StartH   0x0
005355  000367  #constant  Strings36StartL   0x1200
005356  000367  #constant  Strings36StartL   0x1200
005357  000368  #constant  Strings37StartH   0x0
005358  000368  #constant  Strings37StartH   0x0
005359  000369  #constant  Strings37StartL   0x1400
005360  000369  #constant  Strings37StartL   0x1400
005361  000370  #constant  Strings12StartH   0x0
005362  000370  #constant  Strings12StartH   0x0
005363  000371  #constant  Strings12StartL   0x1600
005364  000371  #constant  Strings12StartL   0x1600
005365  000372  #constant  Strings14StartH   0x0
005366  000372  #constant  Strings14StartH   0x0
005367  000373  #constant  Strings14StartL   0x1800
005368  000373  #constant  Strings14StartL   0x1800
005369  000374  #constant  Strings16StartH   0x0
005370  000374  #constant  Strings16StartH   0x0
005371  000375  #constant  Strings16StartL   0x1A00
005372  000375  #constant  Strings16StartL   0x1A00
005373  000376  #constant  Strings15StartH   0x0
005374  000376  #constant  Strings15StartH   0x0
005375  000377  #constant  Strings15StartL   0x1C00
005376  000377  #constant  Strings15StartL   0x1C00
005377  000378  #constant  Strings21StartH   0x0
005378  000378  #constant  Strings21StartH   0x0
005379  000379  #constant  Strings21StartL   0x1E00
005380  000379  #constant  Strings21StartL   0x1E00
005381  000380  #constant  Strings11StartH   0x0
005382  000380  #constant  Strings11StartH   0x0
005383  000381  #constant  Strings11StartL   0x2000
005384  000381  #constant  Strings11StartL   0x2000
005385  000382  #constant  Strings22StartH   0x0
005386  000382  #constant  Strings22StartH   0x0
005387  000383  #constant  Strings22StartL   0x2200
005388  000383  #constant  Strings22StartL   0x2200
005389  000384  #constant  Strings23StartH   0x0
005390  000384  #constant  Strings23StartH   0x0
005391  000385  #constant  Strings23StartL   0x2400
005392  000385  #constant  Strings23StartL   0x2400
005393  000386  #constant  Strings24StartH   0x0
005394  000386  #constant  Strings24StartH   0x0
005395  000387  #constant  Strings24StartL   0x2600
005396  000387  #constant  Strings24StartL   0x2600
005397  000388  #constant  Strings25StartH   0x0
005398  000388  #constant  Strings25StartH   0x0
005399  000389  #constant  Strings25StartL   0x2800
005400  000389  #constant  Strings25StartL   0x2800
005401  000390  #constant  Strings26StartH   0x0
005402  000390  #constant  Strings26StartH   0x0
005403  000391  #constant  Strings26StartL   0x2A00
005404  000391  #constant  Strings26StartL   0x2A00
005405  000392  #constant  Strings27StartH   0x0
005406  000392  #constant  Strings27StartH   0x0
005407  000393  #constant  Strings27StartL   0x2C00
005408  000393  #constant  Strings27StartL   0x2C00
005409  000394  #constant  Strings5StartH   0x0
005410  000394  #constant  Strings5StartH   0x0
005411  000395  #constant  Strings5StartL   0x2E00
005412  000395  #constant  Strings5StartL   0x2E00
005413  000396  #constant  Strings28StartH   0x0
005414  000396  #constant  Strings28StartH   0x0
005415  000397  #constant  Strings28StartL   0x3000
005416  000397  #constant  Strings28StartL   0x3000
005417  000398  #constant  Strings35StartH   0x0
005418  000398  #constant  Strings35StartH   0x0
005419  000399  #constant  Strings35StartL   0x3200
005420  000399  #constant  Strings35StartL   0x3200
005421  000400  #constant  Strings33StartH   0x0
005422  000400  #constant  Strings33StartH   0x0
005423  000401  #constant  Strings33StartL   0x3400
005424  000401  #constant  Strings33StartL   0x3400
005425  000402  #constant  Strings10StartH   0x0
005426  000402  #constant  Strings10StartH   0x0
005427  000403  #constant  Strings10StartL   0x3600
005428  000403  #constant  Strings10StartL   0x3600
005429  000404  #constant  Strings7StartH   0x0
005430  000404  #constant  Strings7StartH   0x0
005431  000405  #constant  Strings7StartL   0x3800
005432  000405  #constant  Strings7StartL   0x3800
005433  000406  #constant  Strings8StartH   0x0
005434  000406  #constant  Strings8StartH   0x0
005435  000407  #constant  Strings8StartL   0x3A00
005436  000407  #constant  Strings8StartL   0x3A00
005437  000408  #constant  Strings38StartH   0x0
005438  000408  #constant  Strings38StartH   0x0
005439  000409  #constant  Strings38StartL   0x3C00
005440  000409  #constant  Strings38StartL   0x3C00
005441  000410  #constant  Strings39StartH   0x0
005442  000410  #constant  Strings39StartH   0x0
005443  000411  #constant  Strings39StartL   0x3E00
005444  000411  #constant  Strings39StartL   0x3E00
005445  000412  #constant  Strings40StartH   0x0
005446  000412  #constant  Strings40StartH   0x0
005447  000413  #constant  Strings40StartL   0x4000
005448  000413  #constant  Strings40StartL   0x4000
005449  000414  #constant  Strings41StartH   0x0
005450  000414  #constant  Strings41StartH   0x0
005451  000415  #constant  Strings41StartL   0x4200
005452  000415  #constant  Strings41StartL   0x4200
005453  000416  #constant  Strings42StartH   0x0
005454  000416  #constant  Strings42StartH   0x0
005455  000417  #constant  Strings42StartL   0x4400
005456  000417  #constant  Strings42StartL   0x4400
005457  000418  #constant  Strings43StartH   0x0
005458  000418  #constant  Strings43StartH   0x0
005459  000419  #constant  Strings43StartL   0x4600
005460  000419  #constant  Strings43StartL   0x4600
005461  000420  #constant  Strings44StartH   0x0
005462  000420  #constant  Strings44StartH   0x0
005463  000421  #constant  Strings44StartL   0x4800
005464  000421  #constant  Strings44StartL   0x4800
005465  000422  #constant  Strings45StartH   0x0
005466  000422  #constant  Strings45StartH   0x0
005467  000423  #constant  Strings45StartL   0x4A00
005468  000423  #constant  Strings45StartL   0x4A00
005469  000424  #constant  Strings51StartH   0x0
005470  000424  #constant  Strings51StartH   0x0
005471  000425  #constant  Strings51StartL   0x4C00
005472  000425  #constant  Strings51StartL   0x4C00
005473  000426  #constant  Strings52StartH   0x0
005474  000426  #constant  Strings52StartH   0x0
005475  000427  #constant  Strings52StartL   0x4E00
005476  000427  #constant  Strings52StartL   0x4E00
005477  000428  #constant  Strings17StartH   0x0
005478  000428  #constant  Strings17StartH   0x0
005479  000429  #constant  Strings17StartL   0x5000
005480  000429  #constant  Strings17StartL   0x5000
005481  000430  #constant  Strings18StartH   0x0
005482  000430  #constant  Strings18StartH   0x0
005483  000431  #constant  Strings18StartL   0x5200
005484  000431  #constant  Strings18StartL   0x5200
005485  000432  #constant  Strings19StartH   0x0
005486  000432  #constant  Strings19StartH   0x0
005487  000433  #constant  Strings19StartL   0x5400
005488  000433  #constant  Strings19StartL   0x5400
005489  000434  #constant  Strings29StartH   0x0
005490  000434  #constant  Strings29StartH   0x0
005491  000435  #constant  Strings29StartL   0x5600
005492  000435  #constant  Strings29StartL   0x5600
005493  000436  #constant  Strings30StartH   0x0
005494  000436  #constant  Strings30StartH   0x0
005495  000437  #constant  Strings30StartL   0x5800
005496  000437  #constant  Strings30StartL   0x5800
005497  000438  #constant  Strings31StartH   0x0
005498  000438  #constant  Strings31StartH   0x0
005499  000439  #constant  Strings31StartL   0x5A00
005500  000439  #constant  Strings31StartL   0x5A00
005501  000440  #constant  Strings32StartH   0x0
005502  000440  #constant  Strings32StartH   0x0
005503  000441  #constant  Strings32StartL   0x5C00
005504  000441  #constant  Strings32StartL   0x5C00
005505  000442  #constant  Strings49StartH   0x0
005506  000442  #constant  Strings49StartH   0x0
005507  000443  #constant  Strings49StartL   0x5E00
005508  000443  #constant  Strings49StartL   0x5E00
005509  000444  #constant  Strings50StartH   0x0
005510  000444  #constant  Strings50StartH   0x0
005511  000445  #constant  Strings50StartL   0x6000
005512  000445  #constant  Strings50StartL   0x6000
005513  000446  #constant  Strings13StartH   0x0
005514  000446  #constant  Strings13StartH   0x0
005515  000447  #constant  Strings13StartL   0x6200
005516  000447  #constant  Strings13StartL   0x6200
005517  000448  #constant  Strings46StartH   0x0
005518  000448  #constant  Strings46StartH   0x0
005519  000449  #constant  Strings46StartL   0x6400
005520  000449  #constant  Strings46StartL   0x6400
005521  000450  #constant  Strings47StartH   0x0
005522  000450  #constant  Strings47StartH   0x0
005523  000451  #constant  Strings47StartL   0x6600
005524  000451  #constant  Strings47StartL   0x6600
005525  000452  #constant  Strings48StartH   0x0
005526  000452  #constant  Strings48StartH   0x0
005527  000453  #constant  Strings48StartL   0x6800
005528  000453  #constant  Strings48StartL   0x6800
005529  000454  #constant  Strings53StartH   0x0
005530  000454  #constant  Strings53StartH   0x0
005531  000455  #constant  Strings53StartL   0x6A00
005532  000455  #constant  Strings53StartL   0x6A00
005533  000456  #IFNOT EXISTS NOGLOBALS
005534  000457  var hndl ;
005535  000458  #ENDIF
005536  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005537  000013  #inherit "CLPrintStrings.inc"
005538  000013  #inherit "CLPrintStrings.inc"
005539  000001  func PrintStrings(var ID, var *msgid, var String)
005540  000002      var StringID, i, ch, offs32[2], res32[2];
005541  000003      StringID := oStringss[1+ID] ;
005542  000004      if (String)
005543  000005          stringsCV[ID] := -1 ;
005544  000006      else
005545  000007          stringsCV[ID] := msgid ;
005546  000008      endif
005547  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005548  000010      txt_FontID(hFonts[ID]) ;
005549  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005550  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005551  000013        
005552  000014      if (*(StringID + Ofs_String_Transparent))
005553  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005554  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005555  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005556  000018      else
005557  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005558  000020          gfx_Clipping(ON) ;
005559  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005560  000022          gfx_Clipping(OFF) ;
005561  000023        
005562  000024      endif
005563  000025        
005564  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005565  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005566  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005567  000029        
005568  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005569  000031        
005570  000032      if (String)
005571  000033          i := 0 ;
005572  000034          ch := msgid[i++] ;
005573  000035          while (ch != 0)
005574  000036              putch(ch) ;
005575  000037              ch := msgid[i++] ;
005576  000038          wend
005577  000039      else
005578  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005579  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005580  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005581  000043          uadd_3232(res32,res32,offs32) ;
005582  000044          file_Seek(hstrings, res32[1], res32[0]);
005583  000045          repeat
005584  000046              if (*(StringID + Ofs_String_Ansi))
005585  000047                  ch := file_GetC(hstrings) ;
005586  000048              else
005587  000049                  ch := file_GetW(hstrings) ;
005588  000050              endif
005589  000051              putch(ch) ;
005590  000052          until (ch == 0) ;
005591  000053      endif
005592  000054        
005593  000055  endfunc
005594  000056        
005595  000014        
005596  000015  #constant IPDatasize 22
005597  000015  #constant IPDatasize 22
005598  000016        
005599  000017  #CONST
005600  000021  #END
005601  000022        
005602  000023  #CONST
005603  000130  #END
005604  000131        
005605  000556  #END
5606  2706
5607  2707
5608  2708
5609  2709
5610  270A
5611  270B
5612  270C
5613  270D
5614  270E
5615  270F
5616  2710
5617  2711
5618  2712
5619  2713
5620  2714
5621  2715
5622  2716
5623  2717
5624  2718
5625  2719
5626  271A
5627  271B
5628  271C
5629  271D
5630  271E
5631  271F
5632  2720
5633  2721
5634  2722
5635  2723
5636  2724
5637  2725
5638  2726
5639  2727
5640  2728
5641  2729
5642  272A
5643  272B
5644  272C
5645  272D
5646  272E
5647  272F
5648  2730
5649  2731
5650  2732
5651  2733
5652  2734
5653  2735
5654  2736
5655  2737
5656  2738
5657  2739
5658  273A
5659  273B
5660  273C
5661  273D
5662  273E
5663  273F
5664  2740
5665  2741
5666  2742
5667  2743
5668  2744
5669  2745
5670  2746
5671  2747
5672  2748
5673  2749
5674  274A
5675  274B
5676  274C
5677  274D
5678  274E
5679  274F
5680  2750
5681  2751
5682  2752
5683  2753
5684  2754
5685  2755
5686  2756
5687  2757
5688  2758
5689  2759
5690  275A
5691  275B
5692  275C
5693  275D
5694  275E
5695  275F
5696  2760
5697  2761
5698  2762
5699  2763
5700  2764
5701  2765
5702  2766
5703  2767
5704  2768
5705  2769
5706  276A
5707  276B
5708  276C
5709  276D
5710  276E
5711  276F
5712  2770
5713  2771
5714  2772
5715  2773
5716  2774
5717  2775
5718  2776
5719  2777
5720  2778
5721  2779
5722  277A
5723  277B
5724  277C
5725  277D
5726  277E
5727  277F
5728  2780
5729  2781
5730  2782
5731  2783
5732  2784
5733  2785
5734  2786
5735  2787
5736  2788
5737  2789
5738  278A
5739  278B
5740  278C
5741  278D
5742  278E
5743  278F
5744  2790
5745  2791
5746  2792
5747  2793
5748  2794
5749  2795
5750  2796
5751  2797
5752  2798
5753  2799
5754  279A
5755  279B
5756  279C
5757  279D
5758  279E
5759  279F
5760  27A0
5761  27A1
5762  27A2
5763  27A3
5764  27A4
5765  27A5
5766  27A6
5767  27A7
5768  27A8
5769  27A9
5770  27AA
5771  27AB
5772  27AC
5773  27AD
5774  27AE
5775  27AF
5776  27B0
5777  27B1
5778  27B2
5779  27B3
5780  27B4
5781  27B5
5782  27B6
5783  27B7
5784  27B8
5785  27B9
5786  27BA
5787  27BB
5788  27BC
5789  27BD
5790  27BE
5791  27BF
5792  27C0
5793  27C1
5794  27C2
5795  27C3
5796  27C4
5797  27C5
5798  27C6
5799  27C7
5800  27C8
5801  27C9
5802  27CA
5803  27CB
5804  27CC
5805  27CD
5806  27CE
5807  27CF
5808  27D0
5809  27D1
5810  27D2
5811  27D3
5812  27D4
5813  27D5
5814  27D6
5815  27D7
5816  27D8
5817  27D9
5818  27DA
5819  27DB
5820  27DC
5821  27DD
5822  27DE
5823  27DF
5824  27E0
5825  27E1
5826  27E2
5827  27E3
5828  27E4
5829  27E5
5830  27E6
5831  27E7
5832  27E8
5833  27E9
5834  27EA
5835  27EB
5836  27EC
5837  27ED
5838  27EE
5839  27EF
5840  27F0
5841  27F1
5842  27F2
5843  27F3
5844  27F4
5845  27F5
5846  27F6
5847  27F7
5848  27F8
5849  27F9
5850  27FA
5851  27FB
5852  27FC
5853  27FD
5854  27FE
5855  27FF
5856  2800
5857  2801
5858  2802
5859  2803
5860  2804
5861  2805
5862  2806
5863  2807
5864  2808
5865  2809
5866  280A
5867  280B
5868  280C
5869  280D
5870  280E
5871  280F
5872  2810
5873  2811
5874  2812
5875  2813
5876  2814
5877  2815
5878  2816
5879  2817
5880  2818
5881  2819
5882  281A
5883  281B
5884  281C
5885  281D
5886  281E
5887  281F
5888  2820
5889  2821
5890  2822
5891  2823
5892  2824
5893  2825
5894  2826
5895  2827
5896  2828
5897  2829
5898  282A
5899  282B
5900  282C
5901  282D
5902  282E
5903  282F
5904  2830
5905  2831
5906  2832
5907  2833
5908  2834
5909  2835
5910  2836
5911  2837
5912  2838
5913  2839
5914  283A
5915  283B
5916  283C
5917  283D
5918  283E
5919  283F
5920  2840
5921  2841
5922  2842
5923  2843
5924  2844
5925  2845
5926  2846
5927  2847
5928  2848
5929  2849
5930  284A
5931  284B
5932  284C
5933  284D
5934  284E
5935  284F
5936  2850
5937  2851
5938  2852
5939  2853
5940  2854
5941  2855
5942  2856
5943  2857
5944  2858
5945  2859
5946  285A
5947  285B
5948  285C
5949  285D
5950  285E
5951  285F
5952  2860
5953  2861
5954  2862
5955  2863
5956  2864
5957  2865
5958  2866
5959  2867
5960  2868
5961  2869
5962  286A
5963  286B
5964  286C
5965  286D
5966  286E
5967  286F
5968  2870
5969  2871
5970  2872
5971  2873
5972  2874
5973  2875
5974  2876
5975  2877
5976  2878
5977  2879
5978  287A
5979  287B
5980  287C
5981  287D
5982  287E
5983  287F
5984  2880
5985  2881
5986  2882
5987  2883
5988  2884
5989  2885
5990  2886
5991  2887
5992  2888
5993  2889
5994  288A
5995  288B
5996  288C
5997  288D
5998  288E
5999  288F
6000  2890
6001  2891
6002  2892
6003  2893
6004  2894
6005  2895
6006  2896
6007  2897
6008  2898
6009  2899
6010  289A
6011  289B
6012  289C
6013  289D
6014  289E
6015  289F
6016  28A0
6017  28A1
6018  28A2
6019  28A3
6020  28A4
6021  28A5
6022  28A6
6023  28A7
6024  28A8
6025  28A9
6026  28AA
6027  28AB
6028  28AC
6029  28AD
6030  28AE
6031  28AF
6032  28B0
6033  28B1
6034  28B2
6035  28B3
6036  28B4
6037  28B5
6038  28B6
6039  28B7
6040  28B8
6041  28B9
6042  28BA
6043  28BB
6044  28BC
6045  28BD
6046  28BE
6047  28BF
6048  28C0
6049  28C1
6050  28C2
6051  28C3
6052  28C4
6053  28C5
6054  28C6
6055  28C7
6056  28C8
6057  28C9
6058  28CA
6059  28CB
6060  28CC
6061  28CD
6062  28CE
6063  28CF
6064  28D0
6065  28D1
6066  28D2
6067  28D3
6068  28D4
6069  28D5
6070  28D6
6071  28D7
6072  28D8
6073  28D9
6074  28DA
6075  28DB
6076  28DC
6077  28DD
6078  28DE
6079  28DF
6080  28E0
6081  28E1
6082  28E2
6083  28E3
6084  28E4
6085  28E5
6086  28E6
6087  28E7
6088  28E8
6089  28E9
6090  28EA
6091  28EB
6092  28EC
6093  28ED
6094  28EE
6095  28EF
6096  28F0
6097  28F1
6098  28F2
6099  28F3
6100  28F4
6101  28F5
6102  28F6
6103  28F7
6104  28F8
6105  28F9
6106  28FA
6107  28FB
6108  28FC
6109  28FD
6110  28FE
6111  28FF
6112  2900
6113  2901
6114  2902
6115  2903
6116  2904
6117  2905
6118  2906
6119  2907
6120  2908
6121  2909
6122  290A
6123  290B
6124  290C
6125  290D
6126  290E
6127  290F
6128  2910
6129  2911
6130  2912
6131  2913
6132  2914
6133  2915
6134  2916
6135  2917
6136  2918
6137  2919
6138  291A
6139  291B
6140  291C
6141  291D
6142  291E
6143  291F
6144  2920
6145  2921
6146  2922
6147  2923
6148  2924
6149  2925
6150  2926
6151  2927
6152  2928
6153  2929
6154  292A
6155  292B
6156  292C
6157  292D
6158  292E
6159  292F
6160  2930
6161  2931
6162  2932
6163  2933
6164  2934
6165  2935
6166  2936
6167  2937
6168  2938
6169  2939
6170  293A
6171  293B
6172  293C
6173  293D
6174  293E
6175  293F
6176  2940
6177  2941
6178  2942
6179  2943
6180  2944
6181  2945
6182  2946
6183  2947
6184  2948
6185  2949
6186  294A
6187  294B
6188  294C
6189  294D
6190  294E
6191  294F
6192  2950
6193  2951
6194  2952
6195  2953
6196  2954
6197  2955
6198  2956
6199  2957
6200  2958
6201  2959
6202  295A
6203  295B
6204  295C
6205  295D
6206  295E
6207  295F
6208  2960
6209  2961
6210  2962
6211  2963
6212  2964
6213  2965
6214  2966
6215  2967
6216  2968
6217  2969
6218  296A
6219  296B
6220  296C
6221  296D
6222  296E
6223  296F
6224  2970
6225  2971
6226  2972
6227  2973
6228  2974
6229  2975
6230  2976
6231  2977
6232  2978
6233  2979
6234  297A
6235  297B
6236  297C
6237  297D
6238  297E
6239  297F
6240  2980
6241  2981
6242  2982
6243  2983
6244  2984
6245  2985
6246  2986
6247  2987
6248  2988
6249  2989
6250  298A
6251  298B
6252  298C
6253  298D
6254  298E
6255  298F
6256  2990
6257  2991
6258  2992
6259  2993
6260  2994
6261  2995
6262  2996
6263  2997
6264  2998
6265  2999
6266  299A
6267  299B
6268  299C
6269  299D
6270  299E
6271  299F
6272  29A0
6273  29A1
6274  29A2
6275  29A3
6276  29A4
6277  29A5
6278  29A6
6279  29A7
6280  29A8
6281  29A9
6282  29AA
6283  29AB
6284  29AC
6285  29AD
6286  29AE
6287  29AF
6288  29B0
6289  29B1
6290  29B2
6291  29B3
6292  29B4
6293  29B5
6294  29B6
6295  29B7
6296  29B8
6297  29B9
6298  29BA
6299  29BB
6300  29BC
6301  29BD
6302  29BE
6303  29BF
6304  29C0
6305  29C1
6306  29C2
6307  29C3
6308  29C4
6309  29C5
6310  29C6
6311  29C7
6312  29C8
6313  29C9
6314  29CA
6315  29CB
6316  29CC
6317  29CD
6318  29CE
6319  29CF
6320  29D0
6321  29D1
6322  29D2
6323  29D3
6324  29D4
6325  29D5
6326  29D6
6327  29D7
6328  29D8
6329  29D9
6330  29DA
6331  29DB
6332  29DC
6333  29DD
6334  29DE
6335  29DF
6336  29E0
6337  29E1
6338  29E2
6339  29E3
6340  29E4
6341  29E5
6342  29E6
6343  29E7
6344  29E8
6345  29E9
6346  29EA
6347  29EB
6348  29EC
6349  29ED
6350  29EE
6351  29EF
6352  29F0
6353  29F1
6354  29F2
6355  29F3
6356  29F4
6357  29F5
6358  29F6
6359  29F7
6360  29F8
6361  29F9
6362  29FA
6363  29FB
6364  29FC
6365  29FD
6366  29FE
6367  29FF
6368  2A00
6369  2A01
6370  2A02
6371  2A03
6372  2A04
6373  2A05
6374  2A06
6375  2A07
6376  2A08
6377  2A09
6378  2A0A
6379  2A0B
6380  2A0C
6381  2A0D
6382  2A0E
6383  2A0F
6384  2A10
6385  2A11
6386  2A12
6387  2A13
6388  2A14
6389  2A15
6390  2A16
6391  2A17
6392  2A18
6393  2A19
6394  2A1A
6395  2A1B
6396  2A1C
6397  2A1D
6398  2A1E
6399  2A1F
6400  2A20
6401  2A21
6402  2A22
6403  2A23
6404  2A24
6405  2A25
6406  2A26
6407  2A27
6408  2A28
6409  2A29
6410  2A2A
6411  2A2B
6412  2A2C
6413  2A2D
6414  2A2E
6415  2A2F
6416  2A30
6417  2A31
6418  2A32
6419  2A33
6420  2A34
6421  2A35
6422  2A36
6423  2A37
6424  2A38
6425  2A39
6426  2A3A
6427  2A3B
6428  2A3C
6429  2A3D
6430  2A3E
6431  2A3F
6432  2A40
6433  2A41
6434  2A42
6435  2A43
6436  2A44
6437  2A45
6438  2A46
6439  2A47
6440  2A48
6441  2A49
6442  2A4A
6443  2A4B
6444  2A4C
6445  2A4D
6446  2A4E
6447  2A4F
6448  2A50
6449  2A51
6450  2A52
6451  2A53
6452  2A54
6453  2A55
6454  2A56
6455  2A57
6456  2A58
6457  2A59
6458  2A5A
6459  2A5B
6460  2A5C
6461  2A5D
6462  2A5E
6463  2A5F
6464  2A60
6465  2A61
6466  2A62
6467  2A63
6468  2A64
6469  2A65
6470  2A66
6471  2A67
6472  2A68
6473  2A69
6474  2A6A
6475  2A6B
6476  2A6C
6477  2A6D
6478  2A6E
6479  2A6F
6480  2A70
6481  2A71
6482  2A72
6483  2A73
6484  2A74
6485  2A75
6486  2A76
6487  2A77
6488  2A78
6489  2A79
6490  2A7A
6491  2A7B
6492  2A7C
6493  2A7D
6494  2A7E
6495  2A7F
6496  2A80
6497  2A81
6498  2A82
6499  2A83
6500  2A84
6501  2A85
6502  2A86
6503  2A87
6504  2A88
6505  2A89
6506  2A8A
6507  2A8B
6508  2A8C
6509  2A8D
6510  2A8E
6511  2A8F
6512  2A90
6513  2A91
6514  2A92
6515  2A93
6516  2A94
6517  2A95
6518  2A96
6519  2A97
6520  2A98
6521  2A99
6522  2A9A
6523  2A9B
6524  2A9C
6525  2A9D
6526  2A9E
6527  2A9F
6528  2AA0
6529  2AA1
6530  2AA2
6531  2AA3
6532  2AA4
6533  2AA5
6534  2AA6
6535  2AA7
6536  2AA8
6537  2AA9
6538  2AAA
6539  2AAB
6540  2AAC
6541  2AAD
6542  2AAE
6543  2AAF
6544  2AB0
6545  2AB1
6546  2AB2
6547  2AB3
6548  2AB4
6549  2AB5
6550  2AB6
6551  2AB7
6552  2AB8
6553  2AB9
6554  2ABA
6555  2ABB
6556  2ABC
6557  2ABD
6558  2ABE
6559  2ABF
6560  2AC0
6561  2AC1
6562  2AC2
6563  2AC3
6564  2AC4
6565  2AC5
6566  2AC6
6567  2AC7
6568  2AC8
6569  2AC9
6570  2ACA
6571  2ACB
6572  2ACC
6573  2ACD
6574  2ACE
6575  2ACF
6576  2AD0
6577  2AD1
6578  2AD2
6579  2AD3
6580  2AD4
6581  2AD5
6582  2AD6
6583  2AD7
6584  2AD8
6585  2AD9
6586  2ADA
6587  2ADB
6588  2ADC
6589  2ADD
6590  2ADE
6591  2ADF
6592  2AE0
6593  2AE1
6594  2AE2
6595  2AE3
6596  2AE4
6597  2AE5
6598  2AE6
6599  2AE7
6600  2AE8
6601  2AE9
6602  2AEA
6603  2AEB
6604  2AEC
6605  2AED
6606  2AEE
6607  2AEF
6608  2AF0
6609  2AF1
6610  2AF2
6611  2AF3
6612  2AF4
6613  2AF5
6614  2AF6
6615  2AF7
6616  2AF8
6617  2AF9
6618  2AFA
6619  2AFB
6620  2AFC
6621  2AFD
6622  2AFE
6623  2AFF
6624  2B00
6625  2B01
6626  2B02
6627  2B03
6628  2B04
6629  2B05
6630  2B06
6631  2B07
6632  2B08
6633  2B09
6634  2B0A
6635  2B0B
6636  2B0C
6637  2B0D
6638  2B0E
6639  2B0F
6640  2B10
6641  2B11
6642  2B12
6643  2B13
6644  2B14
6645  2B15
6646  2B16
6647  2B17
6648  2B18
6649  2B19
6650  2B1A
6651  2B1B
6652  2B1C
6653  2B1D
6654  2B1E
6655  2B1F
6656  2B20
6657  2B21
6658  2B22
6659  2B23
6660  2B24
6661  2B25
6662  2B26
6663  2B27
6664  2B28
6665  2B29
6666  2B2A
6667  2B2B
6668  2B2C
6669  2B2D
6670  2B2E
6671  2B2F
6672  2B30
6673  2B31
6674  2B32
6675  2B33
6676  2B34
6677  2B35
6678  2B36
6679  2B37
6680  2B38
6681  2B39
6682  2B3A
6683  2B3B
6684  2B3C
6685  2B3D
6686  2B3E
6687  2B3F
6688  2B40
6689  2B41
6690  2B42
6691  2B43
6692  2B44
6693  2B45
6694  2B46
6695  2B47
6696  2B48
6697  2B49
6698  2B4A
6699  2B4B
6700  2B4C
6701  2B4D
6702  2B4E
6703  2B4F
6704  2B50
6705  2B51
6706  2B52
6707  2B53
6708  2B54
6709  2B55
6710  2B56
6711  2B57
6712  2B58
6713  2B59
6714  2B5A
6715  2B5B
6716  2B5C
6717  2B5D
6718  2B5E
6719  2B5F
6720  2B60
6721  2B61
6722  2B62
6723  2B63
6724  2B64
6725  2B65
6726  2B66
6727  2B67
6728  2B68
6729  2B69
6730  2B6A
6731  2B6B
6732  2B6C
6733  2B6D
6734  2B6E
6735  2B6F
6736  2B70
6737  2B71
6738  2B72
6739  2B73
6740  2B74
6741  2B75
6742  2B76
6743  2B77
6744  2B78
6745  2B79
6746  2B7A
6747  2B7B
6748  2B7C
6749  2B7D
6750  2B7E
6751  2B7F
6752  2B80
6753  2B81
6754  2B82
6755  2B83
6756  2B84
6757  2B85
6758  2B86
6759  2B87
6760  2B88
6761  2B89
6762  2B8A
6763  2B8B
6764  2B8C
6765  2B8D
6766  2B8E
6767  2B8F
6768  2B90
6769  2B91
6770  2B92
6771  2B93
6772  2B94
6773  2B95
6774  2B96
6775  2B97
6776  2B98
6777  2B99
6778  2B9A
6779  2B9B
6780  2B9C
6781  2B9D
6782  2B9E
6783  2B9F
6784  2BA0
6785  2BA1
6786  2BA2
6787  2BA3
6788  2BA4
6789  2BA5
6790  2BA6
6791  2BA7
6792  2BA8
6793  2BA9
6794  2BAA
6795  2BAB
6796  2BAC
6797  2BAD
6798  2BAE
6799  2BAF
6800  2BB0
6801  2BB1
6802  2BB2
6803  2BB3
6804  2BB4
6805  2BB5
6806  2BB6
6807  2BB7
6808  2BB8
6809  2BB9
6810  2BBA
6811  2BBB
6812  2BBC
6813  2BBD
6814  2BBE
6815  2BBF
6816  2BC0
6817  2BC1
6818  2BC2
6819  2BC3
6820  2BC4
6821  2BC5
6822  2BC6
6823  2BC7
6824  2BC8
6825  2BC9
6826  2BCA
6827  2BCB
6828  2BCC
6829  2BCD
6830  2BCE
6831  2BCF
6832  2BD0
6833  2BD1
6834  2BD2
6835  2BD3
6836  2BD4
6837  2BD5
6838  2BD6
6839  2BD7
6840  2BD8
6841  2BD9
6842  2BDA
6843  2BDB
6844  2BDC
6845  2BDD
6846  2BDE
6847  2BDF
6848  2BE0
6849  2BE1
6850  2BE2
6851  2BE3
6852  2BE4
6853  2BE5
6854  2BE6
6855  2BE7
6856  2BE8
6857  2BE9
6858  2BEA
6859  2BEB
6860  2BEC
6861  2BED
6862  2BEE
6863  2BEF
6864  2BF0
6865  2BF1
6866  2BF2
6867  2BF3
6868  2BF4
6869  2BF5
6870  2BF6
6871  2BF7
6872  2BF8
6873  2BF9
6874  2BFA
6875  2BFB
6876  2BFC
6877  2BFD
6878  2BFE
6879  2BFF
6880  2C00
6881  2C01
6882  2C02
6883  2C03
6884  2C04
6885  2C05
6886  2C06
6887  2C07
6888  2C08
6889  2C09
6890  2C0A
6891  2C0B
6892  2C0C
6893  2C0D
6894  2C0E
6895  2C0F
6896  2C10
6897  2C11
6898  2C12
6899  2C13
6900  2C14
6901  2C15
6902  2C16
6903  2C17
6904  2C18
6905  2C19
6906  2C1A
6907  2C1B
6908  2C1C
6909  2C1D
6910  2C1E
6911  2C1F
6912  2C20
6913  2C21
6914  2C22
6915  2C23
6916  2C24
6917  2C25
6918  2C26
6919  2C27
6920  2C28
6921  2C29
6922  2C2A
6923  2C2B
6924  2C2C
6925  2C2D
6926  2C2E
6927  2C2F
6928  2C30
6929  2C31
6930  2C32
6931  2C33
6932  2C34
6933  2C35
6934  2C36
6935  2C37
6936  2C38
6937  2C39
6938  2C3A
6939  2C3B
6940  2C3C
6941  2C3D
6942  2C3E
6943  2C3F
6944  2C40
6945  2C41
6946  2C42
6947  2C43
6948  2C44
6949  2C45
6950  2C46
6951  2C47
6952  2C48
6953  2C49
6954  2C4A
6955  2C4B
6956  2C4C
6957  2C4D
6958  2C4E
6959  2C4F
6960  2C50
6961  2C51
6962  2C52
6963  2C53
6964  2C54
6965  2C55
6966  2C56
6967  2C57
6968  2C58
6969  2C59
6970  2C5A
6971  2C5B
6972  2C5C
6973  2C5D
6974  2C5E
6975  2C5F
6976  2C60
6977  2C61
6978  2C62
6979  2C63
6980  2C64
6981  2C65
6982  2C66
6983  2C67
6984  2C68
6985  2C69
6986  2C6A
6987  2C6B
6988  2C6C
6989  2C6D
6990  2C6E
6991  2C6F
6992  2C70
6993  2C71
6994  2C72
6995  2C73
6996  2C74
6997  2C75
6998  2C76
6999  2C77
7000  2C78
7001  2C79
7002  2C7A
7003  2C7B
7004  2C7C
7005  2C7D
7006  2C7E
7007  2C7F
7008  2C80
7009  2C81
7010  2C82
7011  2C83
7012  2C84
7013  2C85
7014  2C86
7015  2C87
7016  2C88
7017  2C89
7018  2C8A
7019  2C8B
7020  2C8C
7021  2C8D
7022  2C8E
7023  2C8F
7024  2C90
7025  2C91
7026  2C92
7027  2C93
7028  2C94
7029  2C95
7030  2C96
7031  2C97
7032  2C98
7033  2C99
7034  2C9A
7035  2C9B
7036  2C9C
7037  2C9D
7038  2C9E
7039  2C9F
7040  2CA0
7041  2CA1
7042  2CA2
7043  2CA3
7044  2CA4
7045  2CA5
7046  2CA6
7047  2CA7
7048  2CA8
7049  2CA9
7050  2CAA
7051  2CAB
7052  2CAC
7053  2CAD
7054  2CAE
7055  2CAF
7056  2CB0
7057  2CB1
7058  2CB2
7059  2CB3
7060  2CB4
7061  2CB5
7062  2CB6
7063  2CB7
7064  2CB8
7065  2CB9
7066  2CBA
7067  2CBB
7068  2CBC
7069  2CBD
7070  2CBE
7071  2CBF
7072  2CC0
7073  2CC1
7074  2CC2
7075  2CC3
7076  2CC4
7077  2CC5
7078  2CC6
7079  2CC7
7080  2CC8
7081  2CC9
7082  2CCA
7083  2CCB
7084  2CCC
7085  2CCD
7086  2CCE
7087  2CCF
7088  2CD0
7089  2CD1
7090  2CD2
7091  2CD3
7092  2CD4
7093  2CD5
7094  2CD6
7095  2CD7
7096  2CD8
7097  2CD9
7098  2CDA
7099  2CDB
7100  2CDC
7101  2CDD
7102  2CDE
7103  2CDF
7104  2CE0
7105  2CE1
7106  2CE2
7107  2CE3
7108  2CE4
7109  2CE5
7110  2CE6
7111  2CE7
7112  2CE8
7113  2CE9
7114  2CEA
7115  2CEB
7116  2CEC
7117  2CED
7118  2CEE
7119  2CEF
7120  2CF0
7121  2CF1
7122  2CF2
7123  2CF3
7124  2CF4
7125  2CF5
7126  2CF6
7127  2CF7
7128  2CF8
7129  2CF9
7130  2CFA
7131  2CFB
7132  2CFC
7133  2CFD
7134  2CFE
7135  2CFF
7136  2D00
7137  2D01
7138  2D02
7139  2D03
7140  2D04
7141  2D05
7142  2D06
7143  2D07
7144  2D08
7145  2D09
7146  2D0A
7147  2D0B
7148  2D0C
7149  2D0D
7150  2D0E
7151  2D0F
7152  2D10
7153  2D11
7154  2D12
7155  2D13
7156  2D14
7157  2D15
7158  2D16
7159  2D17
7160  2D18
7161  2D19
7162  2D1A
7163  2D1B
7164  2D1C
7165  2D1D
7166  2D1E
7167  2D1F
7168  2D20
7169  2D21
7170  2D22
7171  2D23
7172  2D24
7173  2D25
7174  2D26
7175  2D27
7176  2D28
7177  2D29
7178  2D2A
7179  2D2B
7180  2D2C
7181  2D2D
7182  2D2E
7183  2D2F
7184  2D30
7185  2D31
7186  2D32
7187  2D33
7188  2D34
7189  2D35
7190  2D36
7191  2D37
7192  2D38
7193  2D39
7194  2D3A
7195  2D3B
7196  2D3C
7197  2D3D
7198  2D3E
7199  2D3F
7200  2D40
7201  2D41
7202  2D42
7203  2D43
7204  2D44
7205  2D45
7206  2D46
7207  2D47
7208  2D48
7209  2D49
7210  2D4A
7211  2D4B
7212  2D4C
7213  2D4D
7214  2D4E
7215  2D4F
7216  2D50
7217  2D51
7218  2D52
7219  2D53
7220  2D54
7221  2D55
7222  2D56
7223  2D57
7224  2D58
7225  2D59
7226  2D5A
7227  2D5B
7228  2D5C
7229  2D5D
7230  2D5E
7231  2D5F
7232  2D60
7233  2D61
7234  2D62
7235  2D63
7236  2D64
7237  2D65
7238  2D66
7239  2D67
7240  2D68
7241  2D69
7242  2D6A
7243  2D6B
7244  2D6C
7245  2D6D
7246  2D6E
7247  2D6F
7248  2D70
7249  2D71
7250  2D72
7251  2D73
7252  2D74
7253  2D75
7254  2D76
7255  2D77
7256  2D78
7257  2D79
7258  2D7A
7259  2D7B
7260  2D7C
7261  2D7D
7262  2D7E
7263  2D7F
7264  2D80
7265  2D81
7266  2D82
7267  2D83
7268  2D84
7269  2D85
7270  2D86
7271  2D87
7272  2D88
7273  2D89
7274  2D8A
7275  2D8B
7276  2D8C
7277  2D8D
7278  2D8E
7279  2D8F
7280  2D90
7281  2D91
7282  2D92
7283  2D93
7284  2D94
7285  2D95
7286  2D96
7287  2D97
7288  2D98
7289  2D99
7290  2D9A
7291  2D9B
7292  2D9C
7293  2D9D
7294  2D9E
7295  2D9F
7296  2DA0
7297  2DA1
7298  2DA2
7299  2DA3
7300  2DA4
7301  2DA5
7302  2DA6
7303  2DA7
7304  2DA8
7305  2DA9
7306  2DAA
7307  2DAB
7308  2DAC
7309  2DAD
7310  2DAE
7311  2DAF
7312  2DB0
7313  2DB1
7314  2DB2
7315  2DB3
7316  2DB4
7317  2DB5
7318  2DB6
7319  2DB7
7320  2DB8
7321  2DB9
7322  2DBA
7323  2DBB
7324  2DBC
7325  2DBD
7326  2DBE
7327  2DBF
7328  2DC0
7329  2DC1
7330  2DC2
7331  2DC3
7332  2DC4
7333  2DC5
7334  2DC6
7335  2DC7
7336  2DC8
7337  2DC9
7338  2DCA
7339  2DCB
7340  2DCC
7341  2DCD
7342  2DCE
7343  2DCF
7344  2DD0
7345  2DD1
7346  2DD2
7347  2DD3
7348  2DD4
7349  2DD5
7350  2DD6
7351  2DD7
7352  2DD8
7353  2DD9
7354  2DDA
7355  2DDB
7356  2DDC
7357  2DDD
7358  2DDE
7359  2DDF
7360  2DE0
7361  2DE1
7362  2DE2
7363  2DE3
7364  2DE4
7365  2DE5
7366  2DE6
7367  2DE7
7368  2DE8
7369  2DE9
7370  2DEA
7371  2DEB
7372  2DEC
7373  2DED
7374  2DEE
7375  2DEF
7376  2DF0
7377  2DF1
7378  2DF2
7379  2DF3
7380  2DF4
7381  2DF5
7382  2DF6
7383  2DF7
7384  2DF8
7385  2DF9
7386  2DFA
7387  2DFB
7388  2DFC
7389  2DFD
7390  2DFE
7391  2DFF
7392  2E00
7393  2E01
7394  2E02
7395  2E03
7396  2E04
7397  2E05
7398  2E06
7399  2E07
7400  2E08
7401  2E09
7402  2E0A
7403  2E0B
7404  2E0C
7405  2E0D
7406  2E0E
7407  2E0F
7408  2E10
7409  2E11
7410  2E12
7411  2E13
7412  2E14
7413  2E15
7414  2E16
7415  2E17
7416  2E18
7417  2E19
7418  2E1A
7419  2E1B
7420  2E1C
7421  2E1D
7422  2E1E
7423  2E1F
7424  2E20
7425  2E21
7426  2E22
7427  2E23
7428  2E24
7429  2E25
7430  2E26
7431  2E27
7432  2E28
7433  2E29
7434  2E2A
7435  2E2B
7436  2E2C
7437  2E2D
7438  2E2E
7439  2E2F
7440  2E30
7441  2E31
7442  2E32
7443  2E33
7444  2E34
7445  2E35
7446  2E36
7447  2E37
7448  2E38
7449  2E39
7450  2E3A
7451  2E3B
7452  2E3C
7453  2E3D
7454  2E3E
7455  2E3F
7456  2E40
7457  2E41
7458  2E42
7459  2E43
7460  2E44
7461  2E45
7462  2E46
7463  2E47
7464  2E48
7465  2E49
7466  2E4A
7467  2E4B
7468  2E4C
7469  2E4D
7470  2E4E
7471  2E4F
7472  2E50
7473  2E51
7474  2E52
7475  2E53
7476  2E54
7477  2E55
7478  2E56
7479  2E57
7480  2E58
7481  2E59
7482  2E5A
7483  2E5B
7484  2E5C
7485  2E5D
7486  2E5E
7487  2E5F
7488  2E60
7489  2E61
7490  2E62
7491  2E63
7492  2E64
7493  2E65
7494  2E66
7495  2E67
7496  2E68
7497  2E69
7498  2E6A
7499  2E6B
7500  2E6C
7501  2E6D
7502  2E6E
7503  2E6F
7504  2E70
7505  2E71
7506  2E72
7507  2E73
7508  2E74
7509  2E75
7510  2E76
7511  2E77
7512  2E78
7513  2E79
7514  2E7A
7515  2E7B
7516  2E7C
7517  2E7D
7518  2E7E
7519  2E7F
7520  2E80
7521  2E81
7522  2E82
7523  2E83
7524  2E84
7525  2E85
7526  2E86
7527  2E87
7528  2E88
7529  2E89
7530  2E8A
7531  2E8B
7532  2E8C
7533  2E8D
7534  2E8E
7535  2E8F
7536  2E90
7537  2E91
7538  2E92
7539  2E93
7540  2E94
7541  2E95
7542  2E96
7543  2E97
7544  2E98
7545  2E99
7546  2E9A
7547  2E9B
7548  2E9C
7549  2E9D
7550  2E9E
7551  2E9F
7552  2EA0
7553  2EA1
7554  2EA2
7555  2EA3
7556  2EA4
7557  2EA5
7558  2EA6
7559  2EA7
7560  2EA8
7561  2EA9
7562  2EAA
7563  2EAB
7564  2EAC
7565  2EAD
7566  2EAE
7567  2EAF
7568  2EB0
7569  2EB1
7570  2EB2
7571  2EB3
7572  2EB4
7573  2EB5
7574  2EB6
7575  2EB7
7576  2EB8
7577  2EB9
7578  2EBA
7579  2EBB
7580  2EBC
7581  2EBD
7582  2EBE
7583  2EBF
7584  2EC0
7585  2EC1
7586  2EC2
7587  2EC3
7588  2EC4
7589  2EC5
7590  2EC6
7591  2EC7
7592  2EC8
7593  2EC9
7594  2ECA
7595  2ECB
7596  2ECC
7597  2ECD
7598  2ECE
7599  2ECF
7600  2ED0
7601  2ED1
7602  2ED2
7603  2ED3
7604  2ED4
7605  2ED5
7606  2ED6
7607  2ED7
7608  2ED8
7609  2ED9
7610  2EDA
7611  2EDB
7612  2EDC
7613  2EDD
7614  2EDE
7615  2EDF
7616  2EE0
7617  2EE1
7618  2EE2
7619  2EE3
7620  2EE4
7621  2EE5
7622  2EE6
7623  2EE7
7624  2EE8
7625  2EE9
7626  2EEA
7627  2EEB
7628  2EEC
7629  2EED
7630  2EEE
7631  2EEF
7632  2EF0
7633  2EF1
7634  2EF2
7635  2EF3
7636  2EF4
7637  2EF5
7638  2EF6
7639  2EF7
7640  2EF8
7641  2EF9
7642  2EFA
7643  2EFB
7644  2EFC
7645  2EFD
7646  2EFE
7647  2EFF
7648  2F00
7649  2F01
7650  2F02
7651  2F03
7652  2F04
7653  2F05
7654  2F06
7655  2F07
7656  2F08
7657  2F09
7658  2F0A
7659  2F0B
7660  2F0C
7661  2F0D
7662  2F0E
7663  2F0F
7664  2F10
7665  2F11
7666  2F12
7667  2F13
7668  2F14
7669  2F15
7670  2F16
7671  2F17
7672  2F18
7673  2F19
7674  2F1A
7675  2F1B
7676  2F1C
7677  2F1D
7678  2F1E
7679  2F1F
7680  2F20
7681  2F21
7682  2F22
7683  2F23
7684  2F24
7685  2F25
7686  2F26
7687  2F27
7688  2F28
7689  2F29
7690  2F2A
7691  2F2B
7692  2F2C
7693  2F2D
7694  2F2E
7695  2F2F
7696  2F30
7697  2F31
7698  2F32
7699  2F33
7700  2F34
7701  2F35
7702  2F36
7703  2F37
7704  2F38
7705  2F39
7706  2F3A
7707  2F3B
7708  2F3C
7709  2F3D
7710  2F3E
7711  2F3F
7712  2F40
7713  2F41
7714  2F42
7715  2F43
7716  2F44
7717  2F45
7718  2F46
7719  2F47
7720  2F48
7721  2F49
7722  2F4A
7723  2F4B
7724  2F4C
7725  2F4D
7726  2F4E
7727  2F4F
7728  2F50
7729  2F51
7730  2F52
7731  2F53
7732  2F54
7733  2F55
7734  2F56
7735  2F57
7736  2F58
7737  2F59
7738  2F5A
7739  2F5B
7740  2F5C
7741  2F5D
7742  2F5E
7743  2F5F
7744  2F60
7745  2F61
7746  2F62
7747  2F63
7748  2F64
7749  2F65
7750  2F66
7751  2F67
7752  2F68
7753  2F69
7754  2F6A
7755  2F6B
7756  2F6C
7757  2F6D
7758  2F6E
7759  2F6F
7760  2F70
7761  2F71
7762  2F72
7763  2F73
7764  2F74
7765  2F75
7766  2F76
7767  2F77
7768  2F78
7769  2F79
7770  2F7A
7771  2F7B
7772  2F7C
7773  2F7D
7774  2F7E
7775  2F7F
7776  2F80
7777  2F81
7778  2F82
7779  2F83
7780  2F84
7781  2F85
7782  2F86
7783  2F87
7784  2F88
7785  2F89
7786  2F8A
7787  2F8B
7788  2F8C
7789  2F8D
7790  2F8E
7791  2F8F
7792  2F90
7793  2F91
7794  2F92
7795  2F93
7796  2F94
7797  2F95
7798  2F96
7799  2F97
7800  2F98
7801  2F99
7802  2F9A
7803  2F9B
7804  2F9C
7805  2F9D
7806  2F9E
7807  2F9F
7808  2FA0
7809  2FA1
7810  2FA2
7811  2FA3
7812  2FA4
7813  2FA5
7814  2FA6
7815  2FA7
7816  2FA8
7817  2FA9
7818  2FAA
7819  2FAB
7820  2FAC
7821  2FAD
7822  2FAE
7823  2FAF
7824  2FB0
7825  2FB1
7826  2FB2
7827  2FB3
7828  2FB4
7829  2FB5
7830  2FB6
7831  2FB7
7832  2FB8
7833  2FB9
7834  2FBA
7835  2FBB
7836  2FBC
7837  2FBD
7838  2FBE
7839  2FBF
7840  2FC0
7841  2FC1
7842  2FC2
7843  2FC3
7844  2FC4
7845  2FC5
7846  2FC6
7847  2FC7
7848  2FC8
7849  2FC9
7850  2FCA
7851  2FCB
7852  2FCC
7853  2FCD
7854  2FCE
7855  2FCF
7856  2FD0
7857  2FD1
7858  2FD2
7859  2FD3
7860  2FD4
7861  2FD5
7862  2FD6
7863  2FD7
7864  2FD8
7865  2FD9
7866  2FDA
7867  2FDB
7868  2FDC
7869  2FDD
7870  2FDE
7871  2FDF
7872  2FE0
7873  2FE1
7874  2FE2
7875  2FE3
7876  2FE4
7877  2FE5
7878  2FE6
7879  2FE7
7880  2FE8
7881  2FE9
7882  2FEA
7883  2FEB
7884  2FEC
7885  2FED
7886  2FEE
7887  2FEF
7888  2FF0
7889  2FF1
7890  2FF2
7891  2FF3
7892  2FF4
7893  2FF5
7894  2FF6
7895  2FF7
7896  2FF8
7897  2FF9
7898  2FFA
7899  2FFB
7900  2FFC
7901  2FFD
7902  2FFE
7903  2FFF
7904  3000
7905  3001
7906  3002
7907  3003
7908  3004
7909  3005
7910  3006
7911  3007
7912  3008
7913  3009
7914  300A
7915  300B
7916  300C
7917  300D
7918  300E
7919  300F
7920  3010
7921  3011
7922  3012
7923  3013
7924  3014
7925  3015
7926  3016
7927  3017
7928  3018
7929  3019
7930  301A
7931  301B
7932  301C
7933  301D
7934  301E
7935  301F
7936  3020
7937  3021
7938  3022
7939  3023
7940  3024
7941  3025
7942  3026
7943  3027
7944  3028
7945  3029
7946  302A
7947  302B
7948  302C
7949  302D
7950  302E
7951  302F
7952  3030
7953  3031
7954  3032
7955  3033
7956  3034
7957  3035
7958  3036
7959  3037
7960  3038
7961  3039
7962  303A
7963  303B
7964  303C
7965  303D
7966  303E
7967  303F
7968  3040
7969  3041
7970  3042
7971  3043
7972  3044
7973  3045
7974  3046
7975  3047
7976  3048
7977  3049
7978  304A
7979  304B
7980  304C
7981  304D
7982  304E
7983  304F
7984  3050
7985  3051
7986  3052
7987  3053
7988  3054
7989  3055
7990  3056
7991  3057
7992  3058
7993  3059
7994  305A
7995  305B
7996  305C
7997  305D
7998  305E
7999  305F
8000  3060
8001  3061
8002  3062
8003  3063
8004  3064
8005  3065
8006  3066
8007  3067
8008  3068
8009  3069
8010  306A
8011  306B
8012  306C
8013  306D
8014  306E
8015  306F
8016  3070
8017  3071
8018  3072
8019  3073
8020  3074
8021  3075
8022  3076
8023  3077
8024  3078
8025  3079
8026  307A
8027  307B
8028  307C
8029  307D
8030  307E
8031  307F
8032  3080
8033  3081
8034  3082
8035  3083
8036  3084
8037  3085
8038  3086
8039  3087
8040  3088
8041  3089
8042  308A
8043  308B
8044  308C
8045  308D
8046  308E
8047  308F
8048  3090
8049  3091
8050  3092
8051  3093
8052  3094
8053  3095
8054  3096
8055  3097
8056  3098
8057  3099
8058  309A
8059  309B
8060  309C
8061  309D
8062  309E
8063  309F
8064  30A0
8065  30A1
8066  30A2
8067  30A3
8068  30A4
8069  30A5
8070  30A6
8071  30A7
8072  30A8
8073  30A9
8074  30AA
8075  30AB
8076  30AC
8077  30AD
8078  30AE
8079  30AF
8080  30B0
8081  30B1
8082  30B2
8083  30B3
8084  30B4
8085  30B5
8086  30B6
8087  30B7
8088  30B8
8089  30B9
8090  30BA
8091  30BB
8092  30BC
8093  30BD
8094  30BE
8095  30BF
8096  30C0
8097  30C1
8098  30C2
8099  30C3
8100  30C4
8101  30C5
8102  30C6
8103  30C7
8104  30C8
8105  30C9
8106  30CA
8107  30CB
8108  30CC
8109  30CD
8110  30CE
8111  30CF
8112  30D0
8113  30D1
8114  30D2
8115  30D3
8116  30D4
8117  30D5
8118  30D6
8119  30D7
8120  30D8
8121  30D9
8122  30DA
8123  30DB
8124  30DC
8125  30DD
8126  30DE
8127  30DF
8128  30E0
8129  30E1
8130  30E2
8131  30E3
8132  30E4
8133  30E5
8134  30E6
8135  30E7
8136  30E8
8137  30E9
8138  30EA
8139  30EB
8140  30EC
8141  30ED
8142  30EE
8143  30EF
8144  30F0
8145  30F1
8146  30F2
8147  30F3
8148  30F4
8149  30F5
8150  30F6
8151  30F7
8152  30F8
8153  30F9
8154  30FA
8155  30FB
8156  30FC
8157  30FD
8158  30FE
8159  30FF
8160  3100
8161  3101
8162  3102
8163  3103
8164  3104
8165  3105
8166  3106
8167  3107
8168  3108
8169  3109
8170  310A
8171  310B
8172  310C
8173  310D
8174  310E
8175  310F
8176  3110
8177  3111
8178  3112
8179  3113
8180  3114
8181  3115
8182  3116
8183  3117
8184  3118
8185  3119
8186  311A
8187  311B
8188  311C
8189  311D
8190  311E
8191  311F
8192  3120
8193  3121
8194  3122
8195  3123
8196  3124
8197  3125
8198  3126
8199  3127
8200  3128
8201  3129
8202  312A
8203  312B
8204  312C
8205  312D
8206  312E
8207  312F
8208  3130
8209  3131
8210  3132
8211  3133
8212  3134
8213  3135
8214  3136
8215  3137
8216  3138
8217  3139
8218  313A
8219  313B
8220  313C
8221  313D
8222  313E
8223  313F
8224  3140
8225  3141
8226  3142
8227  3143
8228  3144
8229  3145
8230  3146
8231  3147
8232  3148
8233  3149
8234  314A
8235  314B
8236  314C
8237  314D
8238  314E
8239  314F
8240  3150
8241  3151
8242  3152
8243  3153
8244  3154
8245  3155
8246  3156
8247  3157
8248  3158
8249  3159
8250  315A
8251  315B
8252  315C
8253  315D
8254  315E
8255  315F
8256  3160
8257  3161
8258  3162
8259  3163
8260  3164
8261  3165
8262  3166
8263  3167
8264  3168
8265  3169
8266  316A
8267  316B
8268  316C
8269  316D
8270  316E
8271  316F
8272  3170
8273  3171
8274  3172
8275  3173
8276  3174
8277  3175
8278  3176
8279  3177
8280  3178
8281  3179
8282  317A
8283  317B
8284  317C
8285  317D
8286  317E
8287  317F
8288  3180
8289  3181
8290  3182
8291  3183
8292  3184
8293  3185
8294  3186
8295  3187
8296  3188
8297  3189
8298  318A
8299  318B
8300  318C
8301  318D
8302  318E
8303  318F
8304  3190
8305  3191
8306  3192
8307  3193
8308  3194
8309  3195
8310  3196
8311  3197
8312  3198
8313  3199
8314  319A
8315  319B
8316  319C
8317  319D
8318  319E
8319  319F
8320  31A0
8321  31A1
8322  31A2
8323  31A3
8324  31A4
8325  31A5
8326  31A6
8327  31A7
8328  31A8
8329  31A9
8330  31AA
8331  31AB
8332  31AC
8333  31AD
8334  31AE
8335  31AF
8336  31B0
8337  31B1
8338  31B2
8339  31B3
8340  31B4
8341  31B5
8342  31B6
8343  31B7
8344  31B8
8345  31B9
8346  31BA
8347  31BB
8348  31BC
8349  31BD
8350  31BE
8351  31BF
8352  31C0
8353  31C1
8354  31C2
8355  31C3
8356  31C4
8357  31C5
8358  31C6
8359  31C7
8360  31C8
8361  31C9
8362  31CA
8363  31CB
8364  31CC
8365  31CD
8366  31CE
8367  31CF
8368  31D0
8369  31D1
8370  31D2
8371  31D3
8372  31D4
8373  31D5
8374  31D6
8375  31D7
8376  31D8
8377  31D9
8378  31DA
8379  31DB
8380  31DC
8381  31DD
8382  31DE
8383  31DF
8384  31E0
8385  31E1
8386  31E2
8387  31E3
8388  31E4
8389  31E5
8390  31E6
8391  31E7
8392  31E8
8393  31E9
8394  31EA
8395  31EB
8396  31EC
8397  31ED
8398  31EE
8399  31EF
8400  31F0
8401  31F1
8402  31F2
8403  31F3
8404  31F4
8405  31F5
8406  31F6
8407  31F7
8408  31F8
8409  31F9
8410  31FA
8411  31FB
8412  31FC
8413  31FD
8414  31FE
8415  31FF
8416  3200
8417  3201
8418  3202
8419  3203
8420  3204
8421  3205
8422  3206
8423  3207
8424  3208
8425  3209
8426  320A
8427  320B
8428  320C
8429  320D
8430  320E
8431  320F
8432  3210
8433  3211
8434  3212
8435  3213
8436  3214
8437  3215
8438  3216
8439  3217
8440  3218
8441  3219
8442  321A
8443  321B
8444  321C
8445  321D
8446  321E
8447  321F
8448  3220
8449  3221
8450  3222
8451  3223
8452  3224
8453  3225
8454  3226
8455  3227
8456  3228
8457  3229
8458  322A
8459  322B
8460  322C
8461  322D
8462  322E
8463  322F
8464  3230
8465  3231
8466  3232
8467  3233
8468  3234
8469  3235
8470  3236
8471  3237
8472  3238
8473  3239
8474  323A
8475  323B
8476  323C
8477  323D
8478  323E
8479  323F
8480  3240
8481  3241
8482  3242
8483  3243
8484  3244
8485  3245
8486  3246
8487  3247
8488  3248
8489  3249
8490  324A
8491  324B
8492  324C
8493  324D
8494  324E
8495  324F
8496  3250
8497  3251
8498  3252
8499  3253
8500  3254
8501  3255
8502  3256
8503  3257
8504  3258
8505  3259
8506  325A
8507  325B
8508  325C
8509  325D
8510  325E
8511  325F
8512  3260
8513  3261
8514  3262
8515  3263
8516  3264
8517  3265
8518  3266
8519  3267
8520  3268
8521  3269
8522  326A
8523  326B
8524  326C
8525  326D
8526  326E
8527  326F
8528  3270
8529  3271
8530  3272
8531  3273
8532  3274
8533  3275
8534  3276
8535  3277
8536  3278
8537  3279
8538  327A
8539  327B
8540  327C
8541  327D
8542  327E
8543  327F
8544  3280
8545  3281
8546  3282
8547  3283
8548  3284
8549  3285
8550  3286
8551  3287
8552  3288
8553  3289
8554  328A
8555  328B
8556  328C
8557  328D
8558  328E
8559  328F
8560  3290
8561  3291
8562  3292
8563  3293
8564  3294
8565  3295
8566  3296
8567  3297
8568  3298
8569  3299
8570  329A
8571  329B
8572  329C
8573  329D
8574  329E
8575  329F
8576  32A0
8577  32A1
8578  32A2
8579  32A3
8580  32A4
8581  32A5
8582  32A6
8583  32A7
8584  32A8
8585  32A9
8586  32AA
8587  32AB
8588  32AC
8589  32AD
8590  32AE
8591  32AF
8592  32B0
8593  32B1
8594  32B2
8595  32B3
8596  32B4
8597  32B5
8598  32B6
8599  32B7
8600  32B8
8601  32B9
8602  32BA
8603  32BB
8604  32BC
8605  32BD
8606  32BE
8607  32BF
8608  32C0
8609  32C1
8610  32C2
8611  32C3
8612  32C4
8613  32C5
8614  32C6
8615  32C7
8616  32C8
8617  32C9
8618  32CA
8619  32CB
8620  32CC
8621  32CD
8622  32CE
8623  32CF
8624  32D0
8625  32D1
8626  32D2
8627  32D3
8628  32D4
8629  32D5
8630  32D6
8631  32D7
8632  32D8
8633  32D9
8634  32DA
8635  32DB
8636  32DC
8637  32DD
8638  32DE
8639  32DF
8640  32E0
8641  32E1
8642  32E2
8643  32E3
8644  32E4
8645  32E5
8646  32E6
8647  32E7
8648  32E8
8649  32E9
8650  32EA
8651  32EB
8652  32EC
8653  32ED
8654  32EE
8655  32EF
8656  32F0
8657  32F1
8658  32F2
8659  32F3
8660  32F4
8661  32F5
8662  32F6
8663  32F7
8664  32F8
8665  32F9
8666  32FA
8667  32FB
8668  32FC
8669  32FD
8670  32FE
8671  32FF
8672  3300
8673  3301
8674  3302
8675  3303
8676  3304
8677  3305
8678  3306
8679  3307
8680  3308
8681  3309
8682  330A
8683  330B
8684  330C
8685  330D
8686  330E
8687  330F
8688  3310
8689  3311
8690  3312
8691  3313
8692  3314
8693  3315
8694  3316
8695  3317
8696  3318
8697  3319
8698  331A
8699  331B
8700  331C
8701  331D
8702  331E
8703  331F
8704  3320
8705  3321
8706  3322
8707  3323
8708  3324
8709  3325
8710  3326
8711  3327
8712  3328
8713  3329
8714  332A
8715  332B
8716  332C
8717  332D
8718  332E
8719  332F
8720  3330
8721  3331
8722  3332
8723  3333
8724  3334
8725  3335
8726  3336
8727  3337
8728  3338
8729  3339
8730  333A
8731  333B
8732  333C
8733  333D
8734  333E
8735  333F
8736  3340
8737  3341
8738  3342
8739  3343
8740  3344
8741  3345
8742  3346
8743  3347
8744  3348
8745  3349
8746  334A
8747  334B
8748  334C
8749  334D
8750  334E
8751  334F
8752  3350
8753  3351
8754  3352
8755  3353
8756  3354
8757  3355
8758  3356
8759  3357
8760  3358
8761  3359
8762  335A
8763  335B
8764  335C
8765  335D
8766  335E
8767  335F
8768  3360
8769  3361
8770  3362
8771  3363
8772  3364
8773  3365
8774  3366
8775  3367
8776  3368
8777  3369
8778  336A
8779  336B
8780  336C
8781  336D
8782  336E
8783  336F
8784  3370
8785  3371
8786  3372
8787  3373
8788  3374
8789  3375
8790  3376
8791  3377
8792  3378
8793  3379
8794  337A
8795  337B
8796  337C
8797  337D
8798  337E
8799  337F
8800  3380
8801  3381
8802  3382
8803  3383
8804  3384
8805  3385
8806  3386
8807  3387
8808  3388
8809  3389
8810  338A
8811  338B
8812  338C
8813  338D
8814  338E
8815  338F
8816  3390
8817  3391
8818  3392
8819  3393
8820  3394
8821  3395
8822  3396
8823  3397
8824  3398
8825  3399
8826  339A
8827  339B
8828  339C
8829  339D
8830  339E
8831  339F
8832  33A0
8833  33A1
8834  33A2
8835  33A3
8836  33A4
8837  33A5
8838  33A6
8839  33A7
8840  33A8
8841  33A9
8842  33AA
8843  33AB
8844  33AC
8845  33AD
8846  33AE
8847  33AF
8848  33B0
8849  33B1
8850  33B2
8851  33B3
8852  33B4
8853  33B5
8854  33B6
8855  33B7
8856  33B8
8857  33B9
8858  33BA
8859  33BB
8860  33BC
8861  33BD
8862  33BE
8863  33BF
8864  33C0
8865  33C1
8866  33C2
8867  33C3
8868  33C4
8869  33C5
8870  33C6
8871  33C7
8872  33C8
8873  33C9
8874  33CA
8875  33CB
8876  33CC
8877  33CD
8878  33CE
8879  33CF
8880  33D0
8881  33D1
8882  33D2
8883  33D3
8884  33D4
8885  33D5
8886  33D6
8887  33D7
8888  33D8
8889  33D9
8890  33DA
8891  33DB
8892  33DC
8893  33DD
8894  33DE
8895  33DF
8896  33E0
8897  33E1
8898  33E2
8899  33E3
8900  33E4
8901  33E5
8902  33E6
8903  33E7
8904  33E8
8905  33E9
8906  33EA
8907  33EB
8908  33EC
8909  33ED
8910  33EE
8911  33EF
8912  33F0
8913  33F1
8914  33F2
8915  33F3
8916  33F4
8917  33F5
8918  33F6
8919  33F7
8920  33F8
8921  33F9
8922  33FA
8923  33FB
8924  33FC
8925  33FD
8926  33FE
8927  33FF
8928  3400
8929  3401
8930  3402
8931  3403
8932  3404
8933  3405
8934  3406
8935  3407
8936  3408
8937  3409
8938  340A
8939  340B
8940  340C
8941  340D
8942  340E
8943  340F
8944  3410
8945  3411
8946  3412
8947  3413
8948  3414
8949  3415
8950  3416
8951  3417
8952  3418
8953  3419
8954  341A
8955  341B
8956  341C
8957  341D
8958  341E
8959  341F
8960  3420
8961  3421
8962  3422
8963  3423
8964  3424
8965  3425
8966  3426
8967  3427
8968  3428
8969  3429
8970  342A
8971  342B
8972  342C
8973  342D
8974  342E
8975  342F
8976  3430
8977  3431
8978  3432
8979  3433
8980  3434
8981  3435
8982  3436
8983  3437
8984  3438
8985  3439
8986  343A
8987  343B
8988  343C
8989  343D
8990  343E
8991  343F
8992  3440
8993  3441
8994  3442
8995  3443
8996  3444
8997  3445
8998  3446
8999  3447
9000  3448
9001  3449
9002  344A
9003  344B
9004  344C
9005  344D
9006  344E
9007  344F
9008  3450
9009  3451
9010  3452
9011  3453
9012  3454
9013  3455
9014  3456
9015  3457
9016  3458
9017  3459
9018  345A
9019  345B
9020  345C
9021  345D
9022  345E
9023  345F
9024  3460
9025  3461
9026  3462
9027  3463
9028  3464
9029  3465
9030  3466
9031  3467
9032  3468
9033  3469
9034  346A
9035  346B
9036  346C
9037  346D
9038  346E
9039  346F
9040  3470
9041  3471
9042  3472
9043  3473
9044  3474
9045  3475
9046  3476
9047  3477
9048  3478
9049  3479
9050  347A
9051  347B
9052  347C
9053  347D
9054  347E
9055  347F
9056  3480
9057  3481
9058  3482
9059  3483
9060  3484
9061  3485
9062  3486
9063  3487
9064  3488
9065  3489
9066  348A
9067  348B
9068  348C
9069  348D
9070  348E
9071  348F
9072  3490
9073  3491
9074  3492
9075  3493
9076  3494
9077  3495
9078  3496
9079  3497
9080  3498
9081  3499
9082  349A
9083  349B
9084  349C
9085  349D
9086  349E
9087  349F
9088  34A0
9089  34A1
9090  34A2
9091  34A3
9092  34A4
9093  34A5
9094  34A6
9095  34A7
9096  34A8
9097  34A9
9098  34AA
9099  34AB
9100  34AC
9101  34AD
9102  34AE
9103  34AF
9104  34B0
9105  34B1
9106  34B2
9107  34B3
9108  34B4
9109  34B5
9110  34B6
9111  34B7
9112  34B8
9113  34B9
9114  34BA
9115  34BB
9116  34BC
9117  34BD
9118  34BE
9119  34BF
9120  34C0
9121  34C1
9122  34C2
9123  34C3
9124  34C4
9125  34C5
9126  34C6
9127  34C7
9128  34C8
9129  34C9
9130  34CA
9131  34CB
9132  34CC
9133  34CD
9134  34CE
9135  34CF
9136  34D0
9137  34D1
9138  34D2
9139  34D3
9140  34D4
9141  34D5
9142  34D6
9143  34D7
9144  34D8
9145  34D9
9146  34DA
9147  34DB
9148  34DC
9149  34DD
9150  34DE
9151  34DF
9152  34E0
9153  34E1
9154  34E2
9155  34E3
9156  34E4
9157  34E5
9158  34E6
9159  34E7
9160  34E8
9161  34E9
9162  34EA
9163  34EB
9164  34EC
9165  34ED
9166  34EE
9167  34EF
9168  34F0
9169  34F1
9170  34F2
9171  34F3
9172  34F4
9173  34F5
9174  34F6
9175  34F7
9176  34F8
9177  34F9
9178  34FA
9179  34FB
9180  34FC
9181  34FD
9182  34FE
9183  34FF
9184  3500
9185  3501
9186  3502
9187  3503
9188  3504
9189  3505
9190  3506
9191  3507
9192  3508
9193  3509
9194  350A
9195  350B
9196  350C
9197  350D
9198  350E
9199  350F
9200  3510
9201  3511
9202  3512
9203  3513
9204  3514
9205  3515
9206  3516
9207  3517
9208  3518
9209  3519
9210  351A
9211  351B
9212  351C
9213  351D
9214  351E
9215  351F
9216  3520
9217  3521
9218  3522
9219  3523
9220  3524
9221  3525
9222  3526
9223  3527
9224  3528
9225  3529
9226  352A
9227  352B
9228  352C
9229  352D
9230  352E
9231  352F
9232  3530
9233  3531
9234  3532
9235  3533
9236  3534
9237  3535
9238  3536
9239  3537
9240  3538
9241  3539
9242  353A
9243  353B
9244  353C
9245  353D
9246  353E
9247  353F
9248  3540
9249  3541
9250  3542
9251  3543
9252  3544
9253  3545
9254  3546
9255  3547
9256  3548
9257  3549
9258  354A
9259  354B
9260  354C
9261  354D
9262  354E
9263  354F
9264  3550
9265  3551
9266  3552
9267  3553
9268  3554
9269  3555
9270  3556
9271  3557
9272  3558
9273  3559
9274  355A
9275  355B
9276  355C
9277  355D
9278  355E
9279  355F
9280  3560
9281  3561
9282  3562
9283  3563
9284  3564
9285  3565
9286  3566
9287  3567
9288  3568
9289  3569
9290  356A
9291  356B
9292  356C
9293  356D
9294  356E
9295  356F
9296  3570
9297  3571
9298  3572
9299  3573
9300  3574
9301  3575
9302  3576
9303  3577
9304  3578
9305  3579
9306  357A
9307  357B
9308  357C
9309  357D
9310  357E
9311  357F
9312  3580
9313  3581
9314  3582
9315  3583
9316  3584
9317  3585
9318  3586
9319  3587
9320  3588
9321  3589
9322  358A
9323  358B
9324  358C
9325  358D
9326  358E
9327  358F
9328  3590
9329  3591
9330  3592
9331  3593
9332  3594
9333  3595
9334  3596
9335  3597
9336  3598
9337  3599
9338  359A
9339  359B
9340  359C
9341  359D
9342  359E
9343  359F
9344  35A0
9345  35A1
9346  35A2
9347  35A3
9348  35A4
9349  35A5
9350  35A6
9351  35A7
9352  35A8
9353  35A9
9354  35AA
9355  35AB
9356  35AC
9357  35AD
9358  35AE
9359  35AF
9360  35B0
9361  35B1
9362  35B2
9363  35B3
9364  35B4
9365  35B5
9366  35B6
9367  35B7
9368  35B8
9369  35B9
9370  35BA
9371  35BB
9372  35BC
9373  35BD
9374  35BE
9375  35BF
9376  35C0
9377  35C1
9378  35C2
9379  35C3
9380  35C4
9381  35C5
9382  35C6
9383  35C7
9384  35C8
9385  35C9
9386  35CA
9387  35CB
9388  35CC
9389  35CD
9390  35CE
9391  35CF
9392  35D0
9393  35D1
9394  35D2
9395  35D3
9396  35D4
9397  35D5
9398  35D6
9399  35D7
9400  35D8
9401  35D9
9402  35DA
9403  35DB
9404  35DC
9405  35DD
9406  35DE
9407  35DF
9408  35E0
9409  35E1
9410  35E2
9411  35E3
9412  35E4
9413  35E5
9414  35E6
9415  35E7
9416  35E8
9417  35E9
9418  35EA
9419  35EB
9420  35EC
9421  35ED
9422  35EE
9423  35EF
9424  35F0
9425  35F1
9426  35F2
9427  35F3
9428  35F4
9429  35F5
9430  35F6
9431  35F7
9432  35F8
9433  35F9
9434  35FA
9435  35FB
9436  35FC
9437  35FD
9438  35FE
9439  35FF
9440  3600
9441  3601
9442  3602
9443  3603
9444  3604
9445  3605
9446  3606
9447  3607
9448  3608
9449  3609
9450  360A
9451  360B
9452  360C
9453  360D
9454  360E
9455  360F
9456  3610
9457  3611
9458  3612
9459  3613
9460  3614
9461  3615
9462  3616
9463  3617
9464  3618
9465  3619
9466  361A
9467  361B
9468  361C
9469  361D
9470  361E
9471  361F
9472  3620
9473  3621
9474  3622
9475  3623
9476  3624
9477  3625
9478  3626
9479  3627
9480  3628
9481  3629
9482  362A
9483  362B
9484  362C
9485  362D
9486  362E
9487  362F
9488  3630
9489  3631
9490  3632
9491  3633
9492  3634
9493  3635
9494  3636
9495  3637
9496  3638
9497  3639
9498  363A
9499  363B
9500  363C
9501  363D
9502  363E
9503  363F
9504  3640
9505  3641
9506  3642
9507  3643
9508  3644
9509  3645
9510  3646
9511  3647
9512  3648
9513  3649
9514  364A
9515  364B
9516  364C
9517  364D
9518  364E
9519  364F
9520  3650
9521  3651
9522  3652
9523  3653
9524  3654
9525  3655
9526  3656
9527  3657
9528  3658
9529  3659
9530  365A
9531  365B
9532  365C
9533  365D
9534  365E
9535  365F
9536  3660
9537  3661
9538  3662
9539  3663
9540  3664
9541  3665
9542  3666
9543  3667
9544  3668
9545  3669
9546  366A
9547  366B
9548  366C
9549  366D
9550  366E
9551  366F
9552  3670
9553  3671
9554  3672
9555  3673
9556  3674
9557  3675
9558  3676
9559  3677
9560  3678
9561  3679
9562  367A
9563  367B
9564  367C
9565  367D
9566  367E
9567  367F
9568  3680
9569  3681
9570  3682
9571  3683
9572  3684
9573  3685
9574  3686
9575  3687
9576  3688
9577  3689
9578  368A
9579  368B
9580  368C
9581  368D
9582  368E
9583  368F
9584  3690
9585  3691
9586  3692
9587  3693
9588  3694
9589  3695
9590  3696
9591  3697
9592  3698
9593  3699
9594  369A
9595  369B
9596  369C
9597  369D
9598  369E
9599  369F
9600  36A0
9601  36A1
9602  36A2
9603  36A3
9604  36A4
9605  36A5
9606  36A6
9607  36A7
9608  36A8
9609  36A9
9610  36AA
9611  36AB
9612  36AC
9613  36AD
9614  36AE
9615  36AF
9616  36B0
9617  36B1
9618  36B2
9619  36B3
9620  36B4
9621  36B5
9622  36B6
9623  36B7
9624  36B8
9625  36B9
9626  36BA
9627  36BB
9628  36BC
9629  36BD
9630  36BE
9631  36BF
9632  36C0
9633  36C1
9634  36C2
9635  36C3
9636  36C4
9637  36C5
9638  36C6
9639  36C7
9640  36C8
9641  36C9
9642  36CA
9643  36CB
9644  36CC
9645  36CD
9646  36CE
9647  36CF
9648  36D0
9649  36D1
9650  36D2
9651  36D3
9652  36D4
9653  36D5
9654  36D6
9655  36D7
9656  36D8
9657  36D9
9658  36DA
9659  36DB
9660  36DC
9661  36DD
9662  36DE
9663  36DF
9664  36E0
9665  36E1
9666  36E2
9667  36E3
9668  36E4
9669  36E5
9670  36E6
9671  36E7
9672  36E8
9673  36E9
9674  36EA
9675  36EB
9676  36EC
9677  36ED
9678  36EE
9679  36EF
9680  36F0
9681  36F1
9682  36F2
9683  36F3
9684  36F4
9685  36F5
9686  36F6
9687  36F7
9688  36F8
9689  36F9
9690  36FA
9691  36FB
9692  36FC
9693  36FD
9694  36FE
9695  36FF
9696  3700
9697  3701
9698  3702
9699  3703
9700  3704
9701  3705
9702  3706
9703  3707
9704  3708
9705  3709
9706  370A
9707  370B
9708  370C
9709  370D
9710  370E
9711  370F
9712  3710
9713  3711
9714  3712
9715  3713
9716  3714
9717  3715
9718  3716
9719  3717
9720  3718
9721  3719
9722  371A
9723  371B
9724  371C
9725  371D
9726  371E
9727  371F
9728  3720
9729  3721
9730  3722
9731  3723
9732  3724
9733  3725
9734  3726
9735  3727
9736  3728
9737  3729
9738  372A
9739  372B
9740  372C
9741  372D
9742  372E
9743  372F
9744  3730
9745  3731
9746  3732
9747  3733
9748  3734
9749  3735
9750  3736
9751  3737
9752  3738
9753  3739
9754  373A
9755  373B
9756  373C
9757  373D
9758  373E
9759  373F
9760  3740
9761  3741
9762  3742
9763  3743
9764  3744
9765  3745
9766  3746
9767  3747
9768  3748
9769  3749
9770  374A
9771  374B
9772  374C
9773  374D
9774  374E
9775  374F
9776  3750
9777  3751
9778  3752
9779  3753
9780  3754
9781  3755
9782  3756
9783  3757
9784  3758
9785  3759
9786  375A
9787  375B
9788  375C
9789  375D
9790  375E
9791  375F
9792  3760
9793  3761
9794  3762
9795  3763
9796  3764
9797  3765
9798  3766
9799  3767
9800  3768
9801  3769
9802  376A
9803  376B
9804  376C
9805  376D
9806  376E
9807  376F
9808  3770
9809  3771
9810  3772
9811  3773
9812  3774
9813  3775
9814  3776
9815  3777
9816  3778
9817  3779
9818  377A
9819  377B
9820  377C
9821  377D
9822  377E
9823  377F
9824  3780
9825  3781
9826  3782
9827  3783
9828  3784
9829  3785
9830  3786
9831  3787
9832  3788
9833  3789
9834  378A
9835  378B
9836  378C
9837  378D
9838  378E
9839  378F
9840  3790
9841  3791
9842  3792
9843  3793
9844  3794
9845  3795
9846  3796
9847  3797
9848  3798
9849  3799
9850  379A
9851  379B
9852  379C
9853  379D
9854  379E
9855  379F
9856  37A0
9857  37A1
9858  37A2
9859  37A3
9860  37A4
9861  37A5
9862  37A6
9863  37A7
9864  37A8
9865  37A9
9866  37AA
9867  37AB
9868  37AC
9869  37AD
9870  37AE
9871  37AF
9872  37B0
9873  37B1
9874  37B2
9875  37B3
9876  37B4
9877  37B5
9878  37B6
9879  37B7
9880  37B8
9881  37B9
9882  37BA
9883  37BB
9884  37BC
9885  37BD
9886  37BE
9887  37BF
9888  37C0
9889  37C1
9890  37C2
9891  37C3
9892  37C4
9893  37C5
9894  37C6
9895  37C7
9896  37C8
9897  37C9
9898  37CA
9899  37CB
9900  37CC
9901  37CD
9902  37CE
9903  37CF
9904  37D0
9905  37D1
9906  37D2
9907  37D3
9908  37D4
9909  37D5
9910  37D6
9911  37D7
9912  37D8
9913  37D9
9914  37DA
9915  37DB
9916  37DC
9917  37DD
9918  37DE
9919  37DF
9920  37E0
9921  37E1
9922  37E2
9923  37E3
9924  37E4
9925  37E5
9926  37E6
9927  37E7
9928  37E8
9929  37E9
9930  37EA
9931  37EB
9932  37EC
9933  37ED
9934  37EE
9935  37EF
9936  37F0
9937  37F1
9938  37F2
9939  37F3
9940  37F4
9941  37F5
9942  37F6
9943  37F7
9944  37F8
9945  37F9
9946  37FA
9947  37FB
9948  37FC
9949  37FD
9950  37FE
9951  37FF
9952  3800
9953  3801
9954  3802
9955  3803
9956  3804
9957  3805
9958  3806
9959  3807
9960  3808
9961  3809
9962  380A
9963  380B
9964  380C
9965  380D
9966  380E
9967  380F
9968  3810
9969  3811
9970  3812
9971  3813
9972  3814
9973  3815
9974  3816
9975  3817
9976  3818
9977  3819
9978  381A
9979  381B
9980  381C
9981  381D
9982  381E
9983  381F
9984  3820
9985  3821
9986  3822
9987  3823
9988  3824
9989  3825
9990  3826
9991  3827
9992  3828
9993  3829
9994  382A
9995  382B
9996  382C
9997  382D
9998  382E
9999  382F
10000  3830
10001  3831
10002  3832
10003  3833
10004  3834
10005  3835
10006  3836
10007  3837
10008  3838
10009  3839
10010  383A
10011  383B
10012  383C
10013  383D
10014  383E
10015  383F
10016  3840
10017  3841
10018  3842
10019  3843
10020  3844
10021  3845
10022  3846
10023  3847
10024  3848
10025  3849
10026  384A
10027  384B
10028  384C
10029  384D
10030  384E
10031  384F
10032  3850
10033  3851
10034  3852
10035  3853
10036  3854
10037  3855
10038  3856
10039  3857
10040  3858
10041  3859
10042  385A
10043  385B
10044  385C
10045  385D
10046  385E
10047  385F
10048  3860
10049  3861
10050  3862
10051  3863
10052  3864
10053  3865
10054  3866
10055  3867
10056  3868
10057  3869
10058  386A
10059  386B
10060  386C
10061  386D
10062  386E
10063  386F
10064  3870
10065  3871
10066  3872
10067  3873
10068  3874
10069  3875
10070  3876
10071  3877
10072  3878
10073  3879
10074  387A
10075  387B
10076  387C
10077  387D
10078  387E
10079  387F
10080  3880
10081  3881
10082  3882
10083  3883
10084  3884
10085  3885
10086  3886
10087  3887
10088  3888
10089  3889
10090  388A
10091  388B
10092  388C
10093  388D
10094  388E
10095  388F
10096  3890
10097  3891
10098  3892
10099  3893
10100  3894
10101  3895
10102  3896
10103  3897
10104  3898
10105  3899
10106  389A
10107  389B
10108  389C
10109  389D
10110  389E
10111  389F
10112  38A0
10113  38A1
10114  38A2
10115  38A3
10116  38A4
10117  38A5
10118  38A6
10119  38A7
10120  38A8
10121  38A9
10122  38AA
10123  38AB
10124  38AC
10125  38AD
10126  38AE
10127  38AF
10128  38B0
10129  38B1
10130  38B2
10131  38B3
10132  38B4
10133  38B5
10134  38B6
10135  38B7
10136  38B8
10137  38B9
10138  38BA
10139  38BB
10140  38BC
10141  38BD
10142  38BE
10143  38BF
10144  38C0
10145  38C1
10146  38C2
10147  38C3
10148  38C4
10149  38C5
10150  38C6
10151  38C7
10152  38C8
10153  38C9
10154  38CA
10155  38CB
10156  38CC
10157  38CD
10158  38CE
10159  38CF
10160  38D0
10161  38D1
10162  38D2
10163  38D3
10164  38D4
10165  38D5
10166  38D6
10167  38D7
10168  38D8
10169  38D9
10170  38DA
10171  38DB
10172  38DC
10173  38DD
10174  38DE
10175  38DF
10176  38E0
10177  38E1
10178  38E2
10179  38E3
10180  38E4
10181  38E5
10182  38E6
10183  38E7
10184  38E8
10185  38E9
10186  38EA
10187  38EB
10188  38EC
10189  38ED
10190  38EE
10191  38EF
10192  38F0
10193  38F1
10194  38F2
10195  38F3
10196  38F4
10197  38F5
10198  38F6
10199  38F7
10200  38F8
10201  38F9
10202  38FA
10203  38FB
10204  38FC
10205  38FD
10206  38FE
10207  38FF
10208  3900
10209  3901
10210  3902
10211  3903
10212  3904
10213  3905
10214  3906
10215  3907
10216  3908
10217  3909
10218  390A
10219  390B
10220  390C
10221  390D
10222  390E
10223  390F
10224  3910
10225  3911
10226  3912
10227  3913
10228  3914
10229  3915
10230  3916
10231  3917
10232  3918
10233  3919
10234  391A
10235  391B
10236  391C
10237  391D
10238  391E
10239  391F
10240  3920
10241  3921
10242  3922
10243  3923
10244  3924
10245  3925
10246  3926
10247  3927
10248  3928
10249  3929
10250  392A
10251  392B
10252  392C
10253  392D
10254  392E
10255  392F
10256  3930
10257  3931
10258  3932
10259  3933
10260  3934
10261  3935
10262  3936
10263  3937
10264  3938
10265  3939
10266  393A
10267  393B
10268  393C
10269  393D
10270  393E
10271  393F
10272  3940
10273  3941
10274  3942
10275  3943
10276  3944
10277  3945
10278  3946
10279  3947
10280  3948
10281  3949
10282  394A
10283  394B
10284  394C
10285  394D
10286  394E
10287  394F
10288  3950
10289  3951
10290  3952
10291  3953
10292  3954
10293  3955
10294  3956
10295  3957
10296  3958
10297  3959
10298  395A
10299  395B
10300  395C
10301  395D
10302  395E
10303  395F
10304  3960
10305  3961
10306  3962
10307  3963
10308  3964
10309  3965
10310  3966
10311  3967
10312  3968
10313  3969
10314  396A
10315  396B
10316  396C
10317  396D
10318  396E
10319  396F
10320  3970
10321  3971
10322  3972
10323  3973
10324  3974
10325  3975
10326  3976
10327  3977
10328  3978
10329  3979
10330  397A
10331  397B
10332  397C
10333  397D
10334  397E
10335  397F
10336  3980
10337  3981
10338  3982
10339  3983
10340  3984
10341  3985
10342  3986
10343  3987
10344  3988
10345  3989
10346  398A
10347  398B
10348  398C
10349  398D
10350  398E
10351  398F
10352  3990
10353  3991
10354  3992
10355  3993
10356  3994
10357  3995
10358  3996
10359  3997
10360  3998
10361  3999
10362  399A
10363  399B
10364  399C
10365  399D
10366  399E
10367  399F
10368  39A0
10369  39A1
10370  39A2
10371  39A3
10372  39A4
10373  39A5
10374  39A6
10375  39A7
10376  39A8
10377  39A9
10378  39AA
10379  39AB
10380  39AC
10381  39AD
10382  39AE
10383  39AF
10384  39B0
10385  39B1
10386  39B2
10387  39B3
10388  39B4
10389  39B5
10390  39B6
10391  39B7
10392  39B8
10393  39B9
10394  39BA
10395  39BB
10396  39BC
10397  39BD
10398  39BE
10399  39BF
10400  39C0
10401  39C1
10402  39C2
10403  39C3
10404  39C4
10405  39C5
10406  39C6
10407  39C7
10408  39C8
10409  39C9
10410  39CA
10411  39CB
10412  39CC
10413  39CD
10414  39CE
10415  39CF
10416  39D0
10417  39D1
10418  39D2
10419  39D3
10420  39D4
10421  39D5
10422  39D6
10423  39D7
10424  39D8
10425  39D9
10426  39DA
10427  39DB
10428  39DC
10429  39DD
10430  39DE
10431  39DF
10432  39E0
10433  39E1
10434  39E2
10435  39E3
10436  39E4
10437  39E5
10438  39E6
10439  39E7
10440  39E8
10441  39E9
10442  39EA
10443  39EB
10444  39EC
10445  39ED
10446  39EE
10447  39EF
10448  39F0
10449  39F1
10450  39F2
10451  39F3
10452  39F4
10453  39F5
10454  39F6
10455  39F7
10456  39F8
10457  39F9
10458  39FA
10459  39FB
10460  39FC
10461  39FD
10462  39FE
10463  39FF
10464  3A00
10465  3A01
10466  3A02
10467  3A03
10468  3A04
10469  3A05
10470  3A06
10471  3A07
10472  3A08
10473  3A09
10474  3A0A
10475  3A0B
10476  3A0C
10477  3A0D
10478  3A0E
10479  3A0F
10480  3A10
10481  3A11
10482  3A12
10483  3A13
10484  3A14
10485  3A15
10486  3A16
10487  3A17
10488  3A18
10489  3A19
10490  3A1A
10491  3A1B
10492  3A1C
10493  3A1D
10494  3A1E
10495  3A1F
10496  3A20
10497  3A21
10498  3A22
10499  3A23
10500  3A24
10501  3A25
10502  3A26
10503  3A27
10504  3A28
10505  3A29
10506  3A2A
10507  3A2B
10508  3A2C
10509  3A2D
10510  3A2E
10511  3A2F
10512  3A30
10513  3A31
10514  3A32
10515  3A33
10516  3A34
10517  3A35
10518  3A36
10519  3A37
10520  3A38
10521  3A39
10522  3A3A
10523  3A3B
10524  3A3C
10525  3A3D
10526  3A3E
10527  3A3F
10528  3A40
10529  3A41
10530  3A42
10531  3A43
10532  3A44
10533  3A45
10534  3A46
10535  3A47
10536  3A48
10537  3A49
10538  3A4A
10539  3A4B
10540  3A4C
10541  3A4D
10542  3A4E
10543  3A4F
10544  3A50
10545  3A51
10546  3A52
10547  3A53
10548  3A54
10549  3A55
10550  3A56
10551  3A57
10552  3A58
10553  3A59
10554  3A5A
10555  3A5B
10556  3A5C
10557  3A5D
10558  3A5E
10559  3A5F
10560  3A60
10561  3A61
10562  3A62
10563  3A63
10564  3A64
10565  3A65
10566  3A66
10567  3A67
10568  3A68
10569  3A69
10570  3A6A
10571  3A6B
10572  3A6C
10573  3A6D
10574  3A6E
10575  3A6F
10576  3A70
10577  3A71
10578  3A72
10579  3A73
10580  3A74
10581  3A75
10582  3A76
10583  3A77
10584  3A78
10585  3A79
10586  3A7A
10587  3A7B
10588  3A7C
10589  3A7D
10590  3A7E
10591  3A7F
10592  3A80
10593  3A81
10594  3A82
10595  3A83
10596  3A84
10597  3A85
10598  3A86
10599  3A87
10600  3A88
10601  3A89
10602  3A8A
10603  3A8B
10604  3A8C
10605  3A8D
10606  3A8E
10607  3A8F
10608  3A90
10609  3A91
10610  3A92
10611  3A93
10612  3A94
10613  3A95
10614  3A96
10615  3A97
10616  3A98
10617  3A99
10618  3A9A
10619  3A9B
10620  3A9C
10621  3A9D
10622  3A9E
10623  3A9F
10624  3AA0
10625  3AA1
10626  3AA2
10627  3AA3
10628  3AA4
10629  3AA5
10630  3AA6
10631  3AA7
10632  3AA8
10633  3AA9
10634  3AAA
10635  3AAB
10636  3AAC
10637  3AAD
10638  3AAE
10639  3AAF
10640  3AB0
10641  3AB1
10642  3AB2
10643  3AB3
10644  3AB4
10645  3AB5
10646  3AB6
10647  3AB7
10648  3AB8
10649  3AB9
10650  3ABA
10651  3ABB
10652  3ABC
10653  3ABD
10654  3ABE
10655  3ABF
10656  3AC0
10657  3AC1
10658  3AC2
10659  3AC3
10660  3AC4
10661  3AC5
10662  3AC6
10663  3AC7
10664  3AC8
10665  3AC9
10666  3ACA
10667  3ACB
10668  3ACC
10669  3ACD
10670  3ACE
10671  3ACF
10672  3AD0
10673  3AD1
10674  3AD2
10675  3AD3
10676  3AD4
10677  3AD5
10678  3AD6
10679  3AD7
10680  3AD8
10681  3AD9
10682  3ADA
10683  3ADB
10684  3ADC
10685  3ADD
10686  3ADE
10687  3ADF
10688  3AE0
10689  3AE1
10690  3AE2
10691  3AE3
10692  3AE4
10693  3AE5
10694  3AE6
10695  3AE7
10696  3AE8
10697  3AE9
10698  3AEA
10699  3AEB
10700  3AEC
10701  3AED
10702  3AEE
10703  3AEF
10704  3AF0
10705  3AF1
10706  3AF2
10707  3AF3
10708  3AF4
10709  3AF5
10710  3AF6
10711  3AF7
10712  3AF8
10713  3AF9
10714  3AFA
10715  3AFB
10716  3AFC
10717  3AFD
10718  3AFE
10719  3AFF
10720  3B00
10721  3B01
10722  3B02
10723  3B03
10724  3B04
10725  3B05
10726  3B06
10727  3B07
10728  3B08
10729  3B09
10730  3B0A
10731  3B0B
10732  3B0C
10733  3B0D
10734  3B0E
10735  3B0F
10736  3B10
10737  3B11
10738  3B12
10739  3B13
10740  3B14
10741  3B15
10742  3B16
10743  3B17
10744  3B18
10745  3B19
10746  3B1A
10747  3B1B
10748  3B1C
10749  3B1D
10750  3B1E
10751  3B1F
10752  3B20
10753  3B21
10754  3B22
10755  3B23
10756  3B24
10757  3B25
10758  3B26
10759  3B27
10760  3B28
10761  3B29
10762  3B2A
10763  3B2B
10764  3B2C
10765  3B2D
10766  3B2E
10767  3B2F
10768  3B30
10769  3B31
10770  3B32
10771  3B33
10772  3B34
10773  3B35
10774  3B36
10775  3B37
10776  3B38
10777  3B39
10778  3B3A
10779  3B3B
10780  3B3C
10781  3B3D
10782  3B3E
10783  3B3F
10784  3B40
10785  3B41
10786  3B42
10787  3B43
10788  3B44
10789  3B45
10790  3B46
10791  3B47
10792  3B48
10793  3B49
10794  3B4A
10795  3B4B
10796  3B4C
10797  3B4D
10798  3B4E
10799  3B4F
10800  3B50
10801  3B51
10802  3B52
10803  3B53
10804  3B54
10805  3B55
10806  3B56
10807  3B57
10808  3B58
10809  3B59
10810  3B5A
10811  3B5B
10812  3B5C
10813  3B5D
10814  3B5E
10815  3B5F
10816  3B60
10817  3B61
10818  3B62
10819  3B63
10820  3B64
10821  3B65
10822  3B66
10823  3B67
10824  3B68
10825  3B69
10826  3B6A
10827  3B6B
10828  3B6C
10829  3B6D
10830  3B6E
10831  3B6F
10832  3B70
10833  3B71
10834  3B72
10835  3B73
10836  3B74
10837  3B75
10838  3B76
10839  3B77
10840  3B78
10841  3B79
10842  3B7A
10843  3B7B
10844  3B7C
10845  3B7D
10846  3B7E
10847  3B7F
10848  3B80
10849  3B81
10850  3B82
10851  3B83
10852  3B84
10853  3B85
10854  3B86
10855  3B87
10856  3B88
10857  3B89
10858  3B8A
10859  3B8B
10860  3B8C
10861  3B8D
10862  3B8E
10863  3B8F
10864  3B90
10865  3B91
10866  3B92
10867  3B93
10868  3B94
10869  3B95
10870  3B96
10871  3B97
10872  3B98
10873  3B99
10874  3B9A
10875  3B9B
10876  3B9C
10877  3B9D
10878  3B9E
10879  3B9F
10880  3BA0
10881  3BA1
10882  3BA2
10883  3BA3
10884  3BA4
10885  3BA5
10886  3BA6
10887  3BA7
10888  3BA8
10889  3BA9
10890  3BAA
10891  3BAB
10892  3BAC
10893  3BAD
10894  3BAE
10895  3BAF
10896  3BB0
10897  3BB1
10898  3BB2
10899  3BB3
10900  3BB4
10901  3BB5
10902  3BB6
10903  3BB7
10904  3BB8
10905  3BB9
10906  3BBA
10907  3BBB
10908  3BBC
10909  3BBD
10910  3BBE
10911  3BBF
10912  3BC0
10913  3BC1
10914  3BC2
10915  3BC3
10916  3BC4
10917  3BC5
10918  3BC6
10919  3BC7
10920  3BC8
10921  3BC9
10922  3BCA
10923  3BCB
10924  3BCC
10925  3BCD
10926  3BCE
10927  3BCF
10928  3BD0
10929  3BD1
10930  3BD2
10931  3BD3
10932  3BD4
10933  3BD5
10934  3BD6
10935  3BD7
10936  3BD8
10937  3BD9
10938  3BDA
10939  3BDB
10940  3BDC
10941  3BDD
10942  3BDE
10943  3BDF
10944  3BE0
10945  3BE1
10946  3BE2
10947  3BE3
10948  3BE4
10949  3BE5
10950  3BE6
10951  3BE7
10952  3BE8
10953  3BE9
10954  3BEA
10955  3BEB
10956  3BEC
10957  3BED
10958  3BEE
10959  3BEF
10960  3BF0
10961  3BF1
10962  3BF2
10963  3BF3
10964  3BF4
10965  3BF5
10966  3BF6
10967  3BF7
10968  3BF8
10969  3BF9
10970  3BFA
10971  3BFB
10972  3BFC
10973  3BFD
10974  3BFE
10975  3BFF
10976  3C00
10977  3C01
10978  3C02
10979  3C03
10980  3C04
10981  3C05
10982  3C06
10983  3C07
10984  3C08
10985  3C09
10986  3C0A
10987  3C0B
10988  3C0C
10989  3C0D
10990  3C0E
10991  3C0F
10992  3C10
10993  3C11
10994  3C12
10995  3C13
10996  3C14
10997  3C15
10998  3C16
10999  3C17
11000  3C18
11001  3C19
11002  3C1A
11003  3C1B
11004  3C1C
11005  3C1D
11006  3C1E
11007  3C1F
11008  3C20
11009  3C21
11010  3C22
11011  3C23
11012  3C24
11013  3C25
11014  3C26
11015  3C27
11016  3C28
11017  3C29
11018  3C2A
11019  3C2B
11020  3C2C
11021  3C2D
11022  3C2E
11023  3C2F
11024  3C30
11025  3C31
11026  3C32
11027  3C33
11028  3C34
11029  3C35
11030  3C36
11031  3C37
11032  3C38
11033  3C39
11034  3C3A
11035  3C3B
11036  3C3C
11037  3C3D
11038  3C3E
11039  3C3F
11040  3C40
11041  3C41
11042  3C42
11043  3C43
11044  3C44
11045  3C45
11046  3C46
11047  3C47
11048  3C48
11049  3C49
11050  3C4A
11051  3C4B
11052  3C4C
11053  3C4D
11054  3C4E
11055  3C4F
11056  3C50
11057  3C51
11058  3C52
11059  3C53
11060  3C54
11061  3C55
11062  3C56
11063  3C57
11064  3C58
11065  3C59
11066  3C5A
11067  3C5B
11068  3C5C
11069  3C5D
11070  3C5E
11071  3C5F
11072  3C60
11073  3C61
11074  3C62
11075  3C63
11076  3C64
11077  3C65
11078  3C66
11079  3C67
11080  3C68
11081  3C69
11082  3C6A
11083  3C6B
11084  3C6C
11085  3C6D
11086  3C6E
11087  3C6F
11088  3C70
11089  3C71
11090  3C72
11091  3C73
11092  3C74
11093  3C75
11094  3C76
11095  3C77
11096  3C78
11097  3C79
11098  3C7A
11099  3C7B
11100  3C7C
11101  3C7D
11102  3C7E
11103  3C7F
11104  3C80
11105  3C81
11106  3C82
11107  3C83
11108  3C84
11109  3C85
11110  3C86
11111  3C87
11112  3C88
11113  3C89
11114  3C8A
11115  3C8B
11116  3C8C
11117  3C8D
11118  3C8E
11119  3C8F
11120  3C90
11121  3C91
11122  3C92
11123  3C93
11124  3C94
11125  3C95
11126  3C96
11127  3C97
11128  3C98
11129  3C99
11130  3C9A
11131  3C9B
11132  3C9C
11133  3C9D
11134  3C9E
11135  3C9F
11136  3CA0
11137  3CA1
11138  3CA2
11139  3CA3
11140  3CA4
11141  3CA5
11142  3CA6
11143  3CA7
11144  3CA8
11145  3CA9
11146  3CAA
11147  3CAB
11148  3CAC
11149  3CAD
11150  3CAE
11151  3CAF
11152  3CB0
11153  3CB1
11154  3CB2
11155  3CB3
11156  3CB4
11157  3CB5
11158  3CB6
11159  3CB7
11160  3CB8
11161  3CB9
11162  3CBA
11163  3CBB
11164  3CBC
11165  3CBD
11166  3CBE
11167  3CBF
11168  3CC0
11169  3CC1
11170  3CC2
11171  3CC3
11172  3CC4
11173  3CC5
11174  3CC6
11175  3CC7
11176  3CC8
11177  3CC9
11178  3CCA
11179  3CCB
11180  3CCC
11181  3CCD
11182  3CCE
11183  3CCF
11184  3CD0
11185  3CD1
11186  3CD2
11187  3CD3
11188  3CD4
11189  3CD5
11190  3CD6
11191  3CD7
11192  3CD8
11193  3CD9
11194  3CDA
11195  3CDB
11196  3CDC
11197  3CDD
11198  3CDE
11199  3CDF
11200  3CE0
11201  3CE1
11202  3CE2
11203  3CE3
11204  3CE4
11205  3CE5
11206  3CE6
11207  3CE7
11208  3CE8
11209  3CE9
11210  3CEA
11211  3CEB
11212  3CEC
11213  3CED
11214  3CEE
11215  3CEF
11216  3CF0
11217  3CF1
11218  3CF2
11219  3CF3
11220  3CF4
11221  3CF5
11222  3CF6
11223  3CF7
11224  3CF8
11225  3CF9
11226  3CFA
11227  3CFB
11228  3CFC
11229  3CFD
11230  3CFE
11231  3CFF
11232  3D00
11233  3D01
11234  3D02
11235  3D03
11236  3D04
11237  3D05
11238  3D06
11239  3D07
11240  3D08
11241  3D09
11242  3D0A
11243  3D0B
11244  3D0C
11245  3D0D
11246  3D0E
11247  3D0F
11248  3D10
11249  3D11
11250  3D12
11251  3D13
11252  3D14
11253  3D15
11254  3D16
11255  3D17
11256  3D18
11257  3D19
11258  3D1A
11259  3D1B
11260  3D1C
11261  3D1D
11262  3D1E
11263  3D1F
11264  3D20
11265  3D21
11266  3D22
11267  3D23
11268  3D24
11269  3D25
11270  3D26
11271  3D27
11272  3D28
11273  3D29
11274  3D2A
11275  3D2B
11276  3D2C
11277  3D2D
11278  3D2E
11279  3D2F
11280  3D30
11281  3D31
11282  3D32
11283  3D33
11284  3D34
11285  3D35
11286  3D36
11287  3D37
11288  3D38
11289  3D39
11290  3D3A
11291  3D3B
11292  3D3C
11293  3D3D
11294  3D3E
11295  3D3F
11296  3D40
11297  3D41
11298  3D42
11299  3D43
11300  3D44
11301  3D45
11302  3D46
11303  3D47
11304  3D48
11305  3D49
11306  3D4A
11307  3D4B
11308  3D4C
11309  3D4D
11310  3D4E
11311  3D4F
11312  3D50
11313  3D51
11314  3D52
11315  3D53
11316  3D54
11317  3D55
11318  3D56
11319  3D57
11320  3D58
11321  3D59
11322  3D5A
11323  3D5B
11324  3D5C
11325  3D5D
11326  3D5E
11327  3D5F
11328  3D60
11329  3D61
11330  3D62
11331  3D63
11332  3D64
11333  3D65
11334  3D66
11335  3D67
11336  3D68
11337  3D69
11338  3D6A
11339  3D6B
11340  3D6C
11341  3D6D
11342  3D6E
11343  3D6F
11344  3D70
11345  3D71
11346  3D72
11347  3D73
11348  3D74
11349  3D75
11350  3D76
11351  3D77
11352  3D78
11353  3D79
11354  3D7A
11355  3D7B
11356  3D7C
11357  3D7D
11358  3D7E
11359  3D7F
11360  3D80
11361  3D81
11362  3D82
11363  3D83
11364  3D84
11365  3D85
11366  3D86
11367  3D87
11368  3D88
11369  3D89
11370  3D8A
11371  3D8B
11372  3D8C
11373  3D8D
11374  3D8E
11375  3D8F
11376  3D90
11377  3D91
11378  3D92
11379  3D93
11380  3D94
11381  3D95
11382  3D96
11383  3D97
11384  3D98
11385  3D99
11386  3D9A
11387  3D9B
11388  3D9C
11389  3D9D
11390  3D9E
11391  3D9F
11392  3DA0
11393  3DA1
11394  3DA2
11395  3DA3
11396  3DA4
11397  3DA5
11398  3DA6
11399  3DA7
11400  3DA8
11401  3DA9
11402  3DAA
11403  3DAB
11404  3DAC
11405  3DAD
11406  3DAE
11407  3DAF
11408  3DB0
11409  3DB1
11410  3DB2
11411  3DB3
11412  3DB4
11413  3DB5
11414  3DB6
11415  3DB7
11416  3DB8
11417  3DB9
11418  3DBA
11419  3DBB
11420  3DBC
11421  3DBD
11422  3DBE
11423  3DBF
11424  3DC0
11425  3DC1
11426  3DC2
11427  3DC3
11428  3DC4
11429  3DC5
11430  3DC6
11431  3DC7
11432  3DC8
11433  3DC9
11434  3DCA
11435  3DCB
11436  3DCC
11437  3DCD
11438  3DCE
11439  3DCF
11440  3DD0
11441  3DD1
11442  3DD2
11443  3DD3
11444  3DD4
11445  3DD5
11446  3DD6
11447  3DD7
11448  3DD8
11449  3DD9
11450  3DDA
11451  3DDB
11452  3DDC
11453  3DDD
11454  3DDE
11455  3DDF
11456  3DE0
11457  3DE1
11458  3DE2
11459  3DE3
11460  3DE4
11461  3DE5
11462  3DE6
11463  3DE7
11464  3DE8
11465  3DE9
11466  3DEA
11467  3DEB
11468  3DEC
11469  3DED
11470  3DEE
11471  3DEF
11472  3DF0
11473  3DF1
11474  3DF2
11475  3DF3
11476  3DF4
11477  3DF5
11478  3DF6
11479  3DF7
11480  3DF8
11481  3DF9
11482  3DFA
11483  3DFB
11484  3DFC
11485  3DFD
11486  3DFE
11487  3DFF
11488  3E00
11489  3E01
11490  3E02
11491  3E03
11492  3E04
11493  3E05
11494  3E06
11495  3E07
11496  3E08
11497  3E09
11498  3E0A
11499  3E0B
11500  3E0C
11501  3E0D
11502  3E0E
11503  3E0F
11504  3E10
11505  3E11
11506  3E12
11507  3E13
11508  3E14
11509  3E15
11510  3E16
11511  3E17
11512  3E18
11513  3E19
11514  3E1A
11515  3E1B
11516  3E1C
11517  3E1D
11518  3E1E
11519  3E1F
11520  3E20
11521  3E21
11522  3E22
11523  3E23
11524  3E24
11525  3E25
11526  3E26
11527  3E27
11528  3E28
11529  3E29
11530  3E2A
11531  3E2B
11532  3E2C
11533  3E2D
11534  3E2E
11535  3E2F
11536  3E30
11537  3E31
11538  3E32
11539  3E33
11540  3E34
11541  3E35
11542  3E36
11543  3E37
11544  3E38
11545  3E39
11546  3E3A
11547  3E3B
11548  3E3C
11549  3E3D
11550  3E3E
11551  3E3F
11552  3E40
11553  3E41
11554  3E42
11555  3E43
11556  3E44
11557  3E45
11558  3E46
11559  3E47
11560  3E48
11561  3E49
11562  3E4A
11563  3E4B
11564  3E4C
11565  3E4D
11566  3E4E
11567  3E4F
11568  3E50
11569  3E51
11570  3E52
11571  3E53
11572  3E54
11573  3E55
11574  3E56
11575  3E57
11576  3E58
11577  3E59
11578  3E5A
11579  3E5B
11580  3E5C
11581  3E5D
11582  3E5E
11583  3E5F
11584  3E60
11585  3E61
11586  3E62
11587  3E63
11588  3E64
11589  3E65
11590  3E66
11591  3E67
11592  3E68
11593  3E69
11594  3E6A
11595  3E6B
11596  3E6C
11597  3E6D
11598  3E6E
11599  3E6F
11600  3E70
11601  3E71
11602  3E72
11603  3E73
11604  3E74
11605  3E75
11606  3E76
11607  3E77
11608  3E78
11609  3E79
11610  3E7A
11611  3E7B
11612  3E7C
11613  3E7D
11614  3E7E
11615  3E7F
11616  3E80
11617  3E81
11618  3E82
11619  3E83
11620  3E84
11621  3E85
11622  3E86
11623  3E87
11624  3E88
11625  3E89
11626  3E8A
11627  3E8B
11628  3E8C
11629  3E8D
11630  3E8E
11631  3E8F
11632  3E90
11633  3E91
11634  3E92
11635  3E93
11636  3E94
11637  3E95
11638  3E96
11639  3E97
11640  3E98
11641  3E99
11642  3E9A
11643  3E9B
11644  3E9C
11645  3E9D
11646  3E9E
11647  3E9F
11648  3EA0
11649  3EA1
11650  3EA2
11651  3EA3
11652  3EA4
11653  3EA5
11654  3EA6
11655  3EA7
11656  3EA8
11657  3EA9
11658  3EAA
11659  3EAB
11660  3EAC
11661  3EAD
11662  3EAE
11663  3EAF
11664  3EB0
11665  3EB1
11666  3EB2
11667  3EB3
11668  3EB4
11669  3EB5
11670  3EB6
11671  3EB7
11672  3EB8
11673  3EB9
11674  3EBA
11675  3EBB
11676  3EBC
11677  3EBD
11678  3EBE
11679  3EBF
11680  3EC0
11681  3EC1
11682  3EC2
11683  3EC3
11684  3EC4
11685  3EC5
11686  3EC6
11687  3EC7
11688  3EC8
11689  3EC9
11690  3ECA
11691  3ECB
11692  3ECC
11693  3ECD
11694  3ECE
11695  3ECF
11696  3ED0
11697  3ED1
11698  3ED2
11699  3ED3
11700  3ED4
11701  3ED5
11702  3ED6
11703  3ED7
11704  3ED8
11705  3ED9
11706  3EDA
11707  3EDB
11708  3EDC
11709  3EDD
11710  3EDE
11711  3EDF
11712  3EE0
11713  3EE1
11714  3EE2
11715  3EE3
11716  3EE4
11717  3EE5
11718  3EE6
11719  3EE7
11720  3EE8
11721  3EE9
11722  3EEA
11723  3EEB
11724  3EEC
11725  3EED
11726  3EEE
11727  3EEF
11728  3EF0
11729  3EF1
11730  3EF2
11731  3EF3
11732  3EF4
11733  3EF5
11734  3EF6
11735  3EF7
11736  3EF8
11737  3EF9
11738  3EFA
11739  3EFB
11740  3EFC
11741  3EFD
11742  3EFE
11743  3EFF
11744  3F00
11745  3F01
11746  3F02
11747  3F03
11748  3F04
11749  3F05
11750  3F06
11751  3F07
11752  3F08
11753  3F09
11754  3F0A
11755  3F0B
11756  3F0C
11757  3F0D
11758  3F0E
11759  3F0F
11760  3F10
11761  3F11
11762  3F12
11763  3F13
11764  3F14
11765  3F15
11766  3F16
11767  3F17
11768  3F18
11769  3F19
11770  3F1A
11771  3F1B
11772  3F1C
11773  3F1D
11774  3F1E
11775  3F1F
11776  3F20
11777  3F21
11778  3F22
11779  3F23
11780  3F24
11781  3F25
11782  3F26
11783  3F27
11784  3F28
11785  3F29
11786  3F2A
11787  3F2B
11788  3F2C
11789  3F2D
11790  3F2E
11791  3F2F
11792  3F30
11793  3F31
11794  3F32
11795  3F33
11796  3F34
11797  3F35
11798  3F36
11799  3F37
11800  3F38
11801  3F39
11802  3F3A
11803  3F3B
11804  3F3C
11805  3F3D
11806  3F3E
11807  3F3F
11808  3F40
11809  3F41
11810  3F42
11811  3F43
11812  3F44
11813  3F45
11814  3F46
11815  3F47
11816  3F48
11817  3F49
11818  3F4A
11819  3F4B
11820  3F4C
11821  3F4D
11822  3F4E
11823  3F4F
11824  3F50
11825  3F51
11826  3F52
11827  3F53
11828  3F54
11829  3F55
11830  3F56
11831  3F57
11832  3F58
11833  3F59
11834  3F5A
11835  3F5B
11836  3F5C
11837  3F5D
11838  3F5E
11839  3F5F
11840  3F60
11841  3F61
11842  3F62
11843  3F63
11844  3F64
11845  3F65
11846  3F66
11847  3F67
11848  3F68
11849  3F69
11850  3F6A
11851  3F6B
11852  3F6C
11853  3F6D
11854  3F6E
11855  3F6F
11856  3F70
11857  3F71
11858  3F72
11859  3F73
11860  3F74
11861  3F75
11862  3F76
11863  3F77
11864  3F78
11865  3F79
11866  3F7A
11867  3F7B
11868  3F7C
11869  3F7D
11870  3F7E
11871  3F7F
11872  3F80
11873  3F81
11874  3F82
11875  3F83
11876  3F84
11877  3F85
11878  3F86
11879  3F87
11880  3F88
11881  3F89
11882  3F8A
11883  3F8B
11884  3F8C
11885  3F8D
11886  3F8E
11887  3F8F
11888  3F90
11889  3F91
11890  3F92
11891  3F93
11892  3F94
11893  3F95
11894  3F96
11895  3F97
11896  3F98
11897  3F99
11898  3F9A
11899  3F9B
11900  3F9C
11901  3F9D
11902  3F9E
11903  3F9F
11904  3FA0
11905  3FA1
11906  3FA2
11907  3FA3
11908  3FA4
11909  3FA5
11910  3FA6
11911  3FA7
11912  3FA8
11913  3FA9
11914  3FAA
11915  3FAB
11916  3FAC
11917  3FAD
11918  3FAE
11919  3FAF
11920  3FB0
11921  3FB1
11922  3FB2
11923  3FB3
11924  3FB4
11925  3FB5
11926  3FB6
11927  3FB7
11928  3FB8
11929  3FB9
11930  3FBA
11931  3FBB
11932  3FBC
11933  3FBD
11934  3FBE
11935  3FBF
11936  3FC0
11937  3FC1
11938  3FC2
11939  3FC3
11940  3FC4
11941  3FC5
11942  3FC6
11943  3FC7
11944  3FC8
11945  3FC9
11946  3FCA
11947  3FCB
11948  3FCC
11949  3FCD
11950  3FCE
11951  3FCF
11952  3FD0
11953  3FD1
11954  3FD2
11955  3FD3
11956  3FD4
11957  3FD5
11958  3FD6
11959  3FD7
11960  3FD8
11961  3FD9
11962  3FDA
11963  3FDB
11964  3FDC
11965  3FDD
11966  3FDE
11967  3FDF
11968  3FE0
11969  3FE1
11970  3FE2
11971  3FE3
11972  3FE4
11973  3FE5
11974  3FE6
11975  3FE7
11976  3FE8
11977  3FE9
11978  3FEA
11979  3FEB
11980  3FEC
11981  3FED
11982  3FEE
11983  3FEF
11984  3FF0
11985  3FF1
11986  3FF2
11987  3FF3
11988  3FF4
11989  3FF5
11990  3FF6
11991  3FF7
11992  3FF8
11993  3FF9
11994  3FFA
11995  3FFB
11996  3FFC
11997  3FFD
11998  3FFE
11999  3FFF
12000  4000
12001  4001
12002  4002
12003  4003
12004  4004
12005  4005
12006  4006
12007  4007
12008  4008
12009  4009
12010  400A
12011  400B
12012  400C
12013  400D
12014  400E
12015  400F
12016  4010
12017  4011
12018  4012
12019  4013
12020  4014
12021  4015
12022  4016
12023  4017
12024  4018
12025  4019
12026  401A
12027  401B
12028  401C
12029  401D
12030  401E
12031  401F
12032  4020
12033  4021
12034  4022
12035  4023
12036  4024
12037  4025
12038  4026
12039  4027
12040  4028
12041  4029
12042  402A
12043  402B
12044  402C
12045  402D
12046  402E
12047  402F
12048  4030
12049  4031
12050  4032
12051  4033
12052  4034
12053  4035
12054  4036
12055  4037
12056  4038
12057  4039
12058  403A
12059  403B
12060  403C
12061  403D
12062  403E
12063  403F
12064  4040
12065  4041
12066  4042
12067  4043
12068  4044
12069  4045
12070  4046
12071  4047
12072  4048
12073  4049
12074  404A
12075  404B
12076  404C
12077  404D
12078  404E
12079  404F
12080  4050
12081  4051
12082  4052
12083  4053
12084  4054
12085  4055
12086  4056
12087  4057
12088  4058
12089  4059
12090  405A
12091  405B
12092  405C
12093  405D
12094  405E
12095  405F
12096  4060
12097  4061
12098  4062
12099  4063
12100  4064
12101  4065
12102  4066
12103  4067
12104  4068
12105  4069
12106  406A
12107  406B
12108  406C
12109  406D
12110  406E
12111  406F
12112  4070
12113  4071
12114  4072
12115  4073
12116  4074
12117  4075
12118  4076
12119  4077
12120  4078
12121  4079
12122  407A
12123  407B
12124  407C
12125  407D
12126  407E
12127  407F
12128  4080
12129  4081
12130  4082
12131  4083
12132  4084
12133  4085
12134  4086
12135  4087
12136  4088
12137  4089
12138  408A
12139  408B
12140  408C
12141  408D
12142  408E
12143  408F
12144  4090
12145  4091
12146  4092
12147  4093
12148  4094
12149  4095
12150  4096
12151  4097
12152  4098
12153  4099
12154  409A
12155  409B
12156  409C
12157  409D
12158  409E
12159  409F
12160  40A0
12161  40A1
12162  40A2
12163  40A3
12164  40A4
12165  40A5
12166  40A6
12167  40A7
12168  40A8
12169  40A9
12170  40AA
12171  40AB
12172  40AC
12173  40AD
12174  40AE
12175  40AF
12176  40B0
12177  40B1
12178  40B2
12179  40B3
12180  40B4
12181  40B5
12182  40B6
12183  40B7
12184  40B8
12185  40B9
12186  40BA
12187  40BB
12188  40BC
12189  40BD
12190  40BE
12191  40BF
12192  40C0
12193  40C1
12194  40C2
12195  40C3
12196  40C4
12197  40C5
12198  40C6
12199  40C7
12200  40C8
12201  40C9
12202  40CA
12203  40CB
12204  40CC
12205  40CD
12206  40CE
12207  40CF
12208  40D0
12209  40D1
12210  40D2
12211  40D3
12212  40D4
12213  40D5
12214  40D6
12215  40D7
12216  40D8
12217  40D9
12218  40DA
12219  40DB
12220  40DC
12221  40DD
12222  40DE
12223  40DF
12224  40E0
12225  40E1
12226  40E2
12227  40E3
12228  40E4
12229  40E5
12230  40E6
12231  40E7
12232  40E8
12233  40E9
12234  40EA
12235  40EB
12236  40EC
12237  40ED
12238  40EE
12239  40EF
12240  40F0
12241  40F1
12242  40F2
12243  40F3
12244  40F4
12245  40F5
12246  40F6
12247  40F7
12248  40F8
12249  40F9
12250  40FA
12251  40FB
12252  40FC
12253  40FD
12254  40FE
12255  40FF
12256  4100
12257  4101
12258  4102
12259  4103
12260  4104
12261  4105
12262  4106
12263  4107
12264  4108
12265  4109
12266  410A
12267  410B
12268  410C
12269  410D
12270  410E
12271  410F
12272  4110
12273  4111
12274  4112
12275  4113
12276  4114
12277  4115
12278  4116
12279  4117
12280  4118
12281  4119
12282  411A
12283  411B
12284  411C
12285  411D
12286  411E
12287  411F
12288  4120
12289  4121
12290  4122
12291  4123
12292  4124
12293  4125
12294  4126
12295  4127
12296  4128
12297  4129
12298  412A
12299  412B
12300  412C
12301  412D
12302  412E
12303  412F
12304  4130
12305  4131
12306  4132
12307  4133
12308  4134
12309  4135
12310  4136
12311  4137
12312  4138
12313  4139
12314  413A
12315  413B
12316  413C
12317  413D
12318  413E
12319  413F
12320  4140
12321  4141
12322  4142
12323  4143
12324  4144
12325  4145
12326  4146
12327  4147
12328  4148
12329  4149
12330  414A
12331  414B
12332  414C
12333  414D
12334  414E
12335  414F
12336  4150
12337  4151
12338  4152
12339  4153
12340  4154
12341  4155
12342  4156
12343  4157
12344  4158
12345  4159
12346  415A
12347  415B
12348  415C
12349  415D
12350  415E
12351  415F
12352  4160
12353  4161
12354  4162
12355  4163
12356  4164
12357  4165
12358  4166
12359  4167
12360  4168
12361  4169
12362  416A
12363  416B
12364  416C
12365  416D
12366  416E
12367  416F
12368  4170
12369  4171
12370  4172
12371  4173
12372  4174
12373  4175
12374  4176
12375  4177
12376  4178
12377  4179
12378  417A
12379  417B
12380  417C
12381  417D
12382  417E
12383  417F
12384  4180
12385  4181
12386  4182
12387  4183
12388  4184
12389  4185
12390  4186
12391  4187
12392  4188
12393  4189
12394  418A
12395  418B
12396  418C
12397  418D
12398  418E
12399  418F
12400  4190
12401  4191
12402  4192
12403  4193
12404  4194
12405  4195
12406  4196
12407  4197
12408  4198
12409  4199
12410  419A
12411  419B
12412  419C
12413  419D
12414  419E
12415  419F
12416  41A0
12417  41A1
12418  41A2
12419  41A3
12420  41A4
12421  41A5
12422  41A6
12423  41A7
12424  41A8
12425  41A9
12426  41AA
12427  41AB
12428  41AC
12429  41AD
12430  41AE
12431  41AF
12432  41B0
12433  41B1
12434  41B2
12435  41B3
12436  41B4
12437  41B5
12438  41B6
12439  41B7
12440  41B8
12441  41B9
12442  41BA
12443  41BB
12444  41BC
12445  41BD
12446  41BE
12447  41BF
12448  41C0
12449  41C1
12450  41C2
12451  41C3
12452  41C4
12453  41C5
12454  41C6
12455  41C7
12456  41C8
12457  41C9
12458  41CA
12459  41CB
12460  41CC
12461  41CD
12462  41CE
12463  41CF
12464  41D0
12465  41D1
12466  41D2
12467  41D3
12468  41D4
12469  41D5
12470  41D6
12471  41D7
12472  41D8
12473  41D9
12474  41DA
12475  41DB
12476  41DC
12477  41DD
12478  41DE
12479  41DF
12480  41E0
12481  41E1
12482  41E2
12483  41E3
12484  41E4
12485  41E5
12486  41E6
12487  41E7
12488  41E8
12489  41E9
12490  41EA
12491  41EB
12492  41EC
12493  41ED
12494  41EE
12495  41EF
12496  41F0
12497  41F1
12498  41F2
12499  41F3
12500  41F4
12501  41F5
12502  41F6
12503  41F7
12504  41F8
12505  41F9
12506  41FA
12507  41FB
12508  41FC
12509  41FD
12510  41FE
12511  41FF
12512  4200
12513  4201
12514  4202
12515  4203
12516  4204
12517  4205
12518  4206
12519  4207
12520  4208
12521  4209
12522  420A
12523  420B
12524  420C
12525  420D
12526  420E
12527  420F
12528  4210
12529  4211
12530  4212
12531  4213
12532  4214
12533  4215
12534  4216
12535  4217
12536  4218
12537  4219
12538  421A
12539  421B
12540  421C
12541  421D
12542  421E
12543  421F
12544  4220
12545  4221
12546  4222
12547  4223
12548  4224
12549  4225
12550  4226
12551  4227
12552  4228
12553  4229
12554  422A
12555  422B
12556  422C
12557  422D
12558  422E
12559  422F
12560  4230
12561  4231
12562  4232
12563  4233
12564  4234
12565  4235
12566  4236
12567  4237
12568  4238
12569  4239
12570  423A
12571  423B
12572  423C
12573  423D
12574  423E
12575  423F
12576  4240
12577  4241
12578  4242
12579  4243
12580  4244
12581  4245
12582  4246
12583  4247
12584  4248
12585  4249
12586  424A
12587  424B
12588  424C
12589  424D
12590  424E
12591  424F
12592  4250
12593  4251
12594  4252
12595  4253
12596  4254
12597  4255
12598  4256
12599  4257
12600  4258
12601  4259
12602  425A
12603  425B
12604  425C
12605  425D
12606  425E
12607  425F
12608  4260
12609  4261
12610  4262
12611  4263
12612  4264
12613  4265
12614  4266
12615  4267
12616  4268
12617  4269
12618  426A
12619  426B
12620  426C
12621  426D
12622  426E
12623  426F
12624  4270
12625  4271
12626  4272
12627  4273
12628  4274
12629  4275
12630  4276
12631  4277
12632  4278
12633  4279
12634  427A
12635  427B
12636  427C
12637  427D
12638  427E
12639  427F
12640  4280
12641  4281
12642  4282
12643  4283
12644  4284
12645  4285
12646  4286
12647  4287
12648  4288
12649  4289
12650  428A
12651  428B
12652  428C
12653  428D
12654  428E
12655  428F
12656  4290
12657  4291
12658  4292
12659  4293
12660  4294
12661  4295
12662  4296
12663  4297
12664  4298
12665  4299
12666  429A
12667  429B
12668  429C
12669  429D
12670  429E
12671  429F
12672  42A0
12673  42A1
12674  42A2
12675  42A3
12676  42A4
12677  42A5
12678  42A6
12679  42A7
12680  42A8
12681  42A9
12682  42AA
12683  42AB
12684  42AC
12685  42AD
12686  42AE
12687  42AF
12688  42B0
12689  42B1
12690  42B2
12691  42B3
12692  42B4
12693  42B5
12694  42B6
12695  42B7
12696  42B8
12697  42B9
12698  42BA
12699  42BB
12700  42BC
12701  42BD
12702  42BE
12703  42BF
12704  42C0
12705  42C1
12706  42C2
12707  42C3
12708  42C4
12709  42C5
12710  42C6
12711  42C7
12712  42C8
12713  42C9
12714  42CA
12715  42CB
12716  42CC
12717  42CD
12718  42CE
12719  42CF
12720  42D0
12721  42D1
12722  42D2
12723  42D3
12724  42D4
12725  42D5
12726  42D6
12727  42D7
12728  42D8
12729  42D9
12730  42DA
12731  42DB
12732  42DC
12733  42DD
12734  42DE
12735  42DF
12736  42E0
12737  42E1
12738  42E2
12739  42E3
12740  42E4
12741  42E5
12742  42E6
12743  42E7
12744  42E8
12745  42E9
12746  42EA
12747  42EB
12748  42EC
12749  42ED
12750  42EE
12751  42EF
12752  42F0
12753  42F1
12754  42F2
12755  42F3
12756  42F4
12757  42F5
12758  42F6
12759  42F7
12760  42F8
12761  42F9
12762  42FA
12763  42FB
12764  42FC
12765  42FD
12766  42FE
12767  42FF
12768  4300
12769  4301
12770  4302
12771  4303
12772  4304
12773  4305
12774  4306
12775  4307
12776  4308
12777  4309
12778  430A
12779  430B
12780  430C
12781  430D
12782  430E
12783  430F
12784  4310
12785  4311
12786  4312
12787  4313
12788  4314
12789  4315
12790  4316
12791  4317
12792  4318
12793  4319
12794  431A
12795  431B
12796  431C
12797  431D
12798  431E
12799  431F
12800  4320
12801  4321
12802  4322
12803  4323
12804  4324
12805  4325
12806  4326
12807  4327
12808  4328
12809  4329
12810  432A
12811  432B
12812  432C
12813  432D
12814  432E
12815  432F
12816  4330
12817  4331
12818  4332
12819  4333
12820  4334
12821  4335
12822  4336
12823  4337
12824  4338
12825  4339
12826  433A
12827  433B
12828  433C
12829  433D
12830  433E
12831  433F
12832  4340
12833  4341
12834  4342
12835  4343
12836  4344
12837  4345
12838  4346
12839  4347
12840  4348
12841  4349
12842  434A
12843  434B
12844  434C
12845  434D
12846  434E
12847  434F
12848  4350
12849  4351
12850  4352
12851  4353
12852  4354
12853  4355
12854  4356
12855  4357
12856  4358
12857  4359
12858  435A
12859  435B
12860  435C
12861  435D
12862  435E
12863  435F
12864  4360
12865  4361
12866  4362
12867  4363
12868  4364
12869  4365
12870  4366
12871  4367
12872  4368
12873  4369
12874  436A
12875  436B
12876  436C
12877  436D
12878  436E
12879  436F
12880  4370
12881  4371
12882  4372
12883  4373
12884  4374
12885  4375
12886  4376
12887  4377
12888  4378
12889  4379
12890  437A
12891  437B
12892  437C
12893  437D
12894  437E
12895  437F
12896  4380
12897  4381
12898  4382
12899  4383
12900  4384
12901  4385
12902  4386
12903  4387
12904  4388
12905  4389
12906  438A
12907  438B
12908  438C
12909  438D
12910  438E
12911  438F
12912  4390
12913  4391
12914  4392
12915  4393
12916  4394
12917  4395
12918  4396
12919  4397
12920  4398
12921  4399
12922  439A
12923  439B
12924  439C
12925  439D
12926  439E
12927  439F
12928  43A0
12929  43A1
12930  43A2
12931  43A3
12932  43A4
12933  43A5
12934  43A6
12935  43A7
12936  43A8
12937  43A9
12938  43AA
12939  43AB
12940  43AC
12941  43AD
12942  43AE
12943  43AF
12944  43B0
12945  43B1
12946  43B2
12947  43B3
12948  43B4
12949  43B5
12950  43B6
12951  43B7
12952  43B8
12953  43B9
12954  43BA
12955  43BB
12956  43BC
12957  43BD
12958  43BE
12959  43BF
12960  43C0
12961  43C1
12962  43C2
12963  43C3
12964  43C4
12965  43C5
12966  43C6
12967  43C7
12968  43C8
12969  43C9
12970  43CA
12971  43CB
12972  43CC
12973  43CD
12974  43CE
12975  43CF
12976  43D0
12977  43D1
12978  43D2
12979  43D3
12980  43D4
12981  43D5
12982  43D6
12983  43D7
12984  43D8
12985  43D9
12986  43DA
12987  43DB
12988  43DC
12989  43DD
12990  43DE
12991  43DF
12992  43E0
12993  43E1
12994  43E2
12995  43E3
12996  43E4
12997  43E5
12998  43E6
12999  43E7
13000  43E8
13001  43E9
13002  43EA
13003  43EB
13004  43EC
13005  43ED
13006  43EE
13007  43EF
13008  43F0
13009  43F1
13010  43F2
13011  43F3
13012  43F4
13013  43F5
13014  43F6
13015  43F7
13016  43F8
13017  43F9
13018  43FA
13019  43FB
13020  43FC
13021  43FD
13022  43FE
13023  43FF
13024  4400
13025  4401
13026  4402
13027  4403
13028  4404
13029  4405
13030  4406
13031  4407
13032  4408
13033  4409
13034  440A
13035  440B
13036  440C
13037  440D
13038  440E
13039  440F
13040  4410
13041  4411
13042  4412
13043  4413
13044  4414
13045  4415
13046  4416
13047  4417
13048  4418
13049  4419
13050  441A
13051  441B
13052  441C
13053  441D
13054  441E
13055  441F
13056  4420
13057  4421
13058  4422
13059  4423
13060  4424
13061  4425
13062  4426
13063  4427
13064  4428
13065  4429
13066  442A
13067  442B
13068  442C
13069  442D
13070  442E
13071  442F
13072  4430
13073  4431
13074  4432
13075  4433
13076  4434
13077  4435
13078  4436
13079  4437
13080  4438
13081  4439
13082  443A
13083  443B
13084  443C
13085  443D
13086  443E
13087  443F
13088  4440
13089  4441
13090  4442
13091  4443
13092  4444
13093  4445
13094  4446
13095  4447
13096  4448
13097  4449
13098  444A
13099  444B
13100  444C
13101  444D
13102  444E
13103  444F
13104  4450
13105  4451
13106  4452
13107  4453
13108  4454
13109  4455
13110  4456
13111  4457
13112  4458
13113  4459
13114  445A
13115  445B
13116  445C
13117  445D
13118  445E
13119  445F
13120  4460
13121  4461
13122  4462
13123  4463
13124  4464
13125  4465
13126  4466
13127  4467
13128  4468
13129  4469
13130  446A
13131  446B
13132  446C
13133  446D
13134  446E
13135  446F
13136  4470
13137  4471
13138  4472
13139  4473
13140  4474
13141  4475
13142  4476
13143  4477
13144  4478
13145  4479
13146  447A
13147  447B
13148  447C
13149  447D
13150  447E
13151  447F
13152  4480
13153  4481
13154  4482
13155  4483
13156  4484
13157  4485
13158  4486
13159  4487
13160  4488
13161  4489
13162  448A
13163  448B
13164  448C
13165  448D
13166  448E
13167  448F
13168  4490
13169  4491
13170  4492
13171  4493
13172  4494
13173  4495
13174  4496
13175  4497
13176  4498
13177  4499
13178  449A
13179  449B
13180  449C
13181  449D
13182  449E
13183  449F
13184  44A0
13185  44A1
13186  44A2
13187  44A3
13188  44A4
13189  44A5
13190  44A6
13191  44A7
13192  44A8
13193  44A9
13194  44AA
13195  44AB
13196  44AC
13197  44AD
13198  44AE
13199  44AF
13200  44B0
13201  44B1
13202  44B2
13203  44B3
13204  44B4
13205  44B5
13206  44B6
13207  44B7
13208  44B8
13209  44B9
13210  44BA
13211  44BB
13212  44BC
13213  44BD
13214  44BE
13215  44BF
13216  44C0
13217  44C1
13218  44C2
13219  44C3
13220  44C4
13221  44C5
13222  44C6
13223  44C7
13224  44C8
13225  44C9
13226  44CA
13227  44CB
13228  44CC
13229  44CD
13230  44CE
13231  44CF
13232  44D0
13233  44D1
13234  44D2
13235  44D3
13236  44D4
13237  44D5
13238  44D6
13239  44D7
13240  44D8
13241  44D9
13242  44DA
13243  44DB
13244  44DC
13245  44DD
13246  44DE
13247  44DF
13248  44E0
13249  44E1
13250  44E2
13251  44E3
13252  44E4
13253  44E5
13254  44E6
13255  44E7
13256  44E8
13257  44E9
13258  44EA
13259  44EB
13260  44EC
13261  44ED
13262  44EE
13263  44EF
13264  44F0
13265  44F1
13266  44F2
13267  44F3
13268  44F4
13269  44F5
13270  44F6
13271  44F7
13272  44F8
13273  44F9
13274  44FA
13275  44FB
13276  44FC
13277  44FD
13278  44FE
13279  44FF
13280  4500
13281  4501
13282  4502
13283  4503
13284  4504
13285  4505
13286  4506
13287  4507
13288  4508
13289  4509
13290  450A
13291  450B
13292  450C
13293  450D
13294  450E
13295  450F
13296  4510
13297  4511
13298  4512
13299  4513
13300  4514
13301  4515
13302  4516
13303  4517
13304  4518
13305  4519
13306  451A
13307  451B
13308  451C
13309  451D
13310  451E
13311  451F
13312  4520
13313  4521
13314  4522
13315  4523
13316  4524
13317  4525
13318  4526
13319  4527
13320  4528
13321  4529
13322  452A
13323  452B
13324  452C
13325  452D
13326  452E
13327  452F
13328  4530
13329  4531
13330  4532
13331  4533
13332  4534
13333  4535
13334  4536
13335  4537
13336  4538
13337  4539
13338  453A
13339  453B
13340  453C
13341  453D
13342  453E
13343  453F
13344  4540
13345  4541
13346  4542
13347  4543
13348  4544
13349  4545
13350  4546
13351  4547
13352  4548
13353  4549
13354  454A
13355  454B
13356  454C
13357  454D
13358  454E
13359  454F
13360  4550
13361  4551
13362  4552
13363  4553
13364  4554
13365  4555
13366  4556
13367  4557
13368  4558
13369  4559
13370  455A
13371  455B
13372  455C
13373  455D
13374  455E
13375  455F
13376  4560
13377  4561
13378  4562
13379  4563
13380  4564
13381  4565
13382  4566
13383  4567
13384  4568
13385  4569
13386  456A
13387  456B
13388  456C
13389  456D
13390  456E
13391  456F
13392  4570
13393  4571
13394  4572
13395  4573
13396  4574
13397  4575
13398  4576
13399  4577
13400  4578
13401  4579
13402  457A
13403  457B
13404  457C
13405  457D
13406  457E
13407  457F
13408  4580
13409  4581
13410  4582
13411  4583
13412  4584
13413  4585
13414  4586
13415  4587
13416  4588
13417  4589
13418  458A
13419  458B
13420  458C
13421  458D
13422  458E
13423  458F
13424  4590
13425  4591
13426  4592
13427  4593
13428  4594
13429  4595
13430  4596
13431  4597
13432  4598
13433  4599
13434  459A
13435  459B
13436  459C
13437  459D
13438  459E
13439  459F
13440  45A0
13441  45A1
13442  45A2
13443  45A3
13444  45A4
13445  45A5
13446  45A6
13447  45A7
13448  45A8
13449  45A9
13450  45AA
13451  45AB
13452  45AC
13453  45AD
13454  45AE
13455  45AF
13456  45B0
13457  45B1
13458  45B2
13459  45B3
13460  45B4
13461  45B5
13462  45B6
13463  45B7
13464  45B8
13465  45B9
13466  45BA
13467  45BB
13468  45BC
13469  45BD
13470  45BE
13471  45BF
13472  45C0
13473  45C1
13474  45C2
13475  45C3
13476  45C4
13477  45C5
13478  45C6
13479  45C7
13480  45C8
13481  45C9
13482  45CA
13483  45CB
13484  45CC
13485  45CD
13486  45CE
13487  45CF
13488  45D0
13489  45D1
13490  45D2
13491  45D3
13492  45D4
13493  45D5
13494  45D6
13495  45D7
13496  45D8
13497  45D9
13498  45DA
13499  45DB
13500  45DC
13501  45DD
13502  45DE
13503  45DF
13504  45E0
13505  45E1
13506  45E2
13507  45E3
13508  45E4
13509  45E5
13510  45E6
13511  45E7
13512  45E8
13513  45E9
13514  45EA
13515  45EB
13516  45EC
13517  45ED
13518  45EE
13519  45EF
13520  45F0
13521  45F1
13522  45F2
13523  45F3
13524  45F4
13525  45F5
13526  45F6
13527  45F7
13528  45F8
13529  45F9
13530  45FA
13531  45FB
13532  45FC
13533  45FD
13534  45FE
13535  45FF
13536  4600
13537  4601
13538  4602
13539  4603
13540  4604
13541  4605
13542  4606
13543  4607
13544  4608
13545  4609
13546  460A
13547  460B
13548  460C
13549  460D
13550  460E
13551  460F
13552  4610
13553  4611
13554  4612
13555  4613
13556  4614
13557  4615
13558  4616
13559  4617
13560  4618
13561  4619
13562  461A
13563  461B
13564  461C
13565  461D
13566  461E
13567  461F
13568  4620
13569  4621
13570  4622
13571  4623
13572  4624
13573  4625
13574  4626
13575  4627
13576  4628
13577  4629
13578  462A
13579  462B
13580  462C
13581  462D
13582  462E
13583  462F
13584  4630
13585  4631
13586  4632
13587  4633
13588  4634
13589  4635
13590  4636
13591  4637
13592  4638
13593  4639
13594  463A
13595  463B
13596  463C
13597  463D
13598  463E
13599  463F
13600  4640
13601  4641
13602  4642
13603  4643
13604  4644
13605  4645
13606  4646
13607  4647
13608  4648
13609  4649
13610  464A
13611  464B
13612  464C
13613  464D
13614  464E
13615  464F
13616  4650
13617  4651
13618  4652
13619  4653
13620  4654
13621  4655
13622  4656
13623  4657
13624  4658
13625  4659
13626  465A
13627  465B
13628  465C
13629  465D
13630  465E
13631  465F
13632  4660
13633  4661
13634  4662
13635  4663
13636  4664
13637  4665
13638  4666
13639  4667
13640  4668
13641  4669
13642  466A
13643  466B
13644  466C
13645  466D
13646  466E
13647  466F
13648  4670
13649  4671
13650  4672
13651  4673
13652  4674
13653  4675
13654  4676
13655  4677
13656  4678
13657  4679
13658  467A
13659  467B
13660  467C
13661  467D
13662  467E
13663  467F
13664  4680
13665  4681
13666  4682
13667  4683
13668  4684
13669  4685
13670  4686
13671  4687
13672  4688
13673  4689
13674  468A
13675  468B
13676  468C
13677  468D
13678  468E
13679  468F
13680  4690
13681  4691
13682  4692
13683  4693
13684  4694
13685  4695
13686  4696
13687  4697
13688  4698
13689  4699
13690  469A
13691  469B
13692  469C
13693  469D
13694  469E
13695  469F
13696  46A0
13697  46A1
13698  46A2
13699  46A3
13700  46A4
13701  46A5
13702  46A6
13703  46A7
13704  46A8
13705  46A9
13706  46AA
13707  46AB
13708  46AC
13709  46AD
13710  46AE
13711  46AF
13712  46B0
13713  46B1
13714  46B2
13715  46B3
13716  46B4
13717  46B5
13718  46B6
13719  46B7
13720  46B8
13721  46B9
13722  46BA
13723  46BB
13724  46BC
13725  46BD
13726  46BE
13727  46BF
13728  46C0
13729  46C1
13730  46C2
13731  46C3
13732  46C4
13733  46C5
13734  46C6
13735  46C7
13736  46C8
13737  46C9
13738  46CA
13739  46CB
13740  46CC
13741  46CD
13742  46CE
13743  46CF
13744  46D0
13745  46D1
13746  46D2
13747  46D3
13748  46D4
13749  46D5
13750  46D6
13751  46D7
13752  46D8
13753  46D9
13754  46DA
13755  46DB
13756  46DC
13757  46DD
13758  46DE
13759  46DF
13760  46E0
13761  46E1
13762  46E2
13763  46E3
13764  46E4
13765  46E5
13766  46E6
13767  46E7
13768  46E8
13769  46E9
13770  46EA
13771  46EB
13772  46EC
13773  46ED
13774  46EE
13775  46EF
13776  46F0
13777  46F1
13778  46F2
13779  46F3
13780  46F4
13781  46F5
13782  46F6
13783  46F7
13784  46F8
13785  46F9
13786  46FA
13787  46FB
13788  46FC
13789  46FD
13790  46FE
13791  46FF
13792  4700
13793  4701
13794  4702
13795  4703
13796  4704
13797  4705
13798  4706
13799  4707
13800  4708
13801  4709
13802  470A
13803  470B
13804  470C
13805  470D
13806  470E
13807  470F
13808  4710
13809  4711
13810  4712
13811  4713
13812  4714
13813  4715
13814  4716
13815  4717
13816  4718
13817  4719
13818  471A
13819  471B
13820  471C
13821  471D
13822  471E
13823  471F
13824  4720
13825  4721
13826  4722
13827  4723
13828  4724
13829  4725
13830  4726
13831  4727
13832  4728
13833  4729
13834  472A
13835  472B
13836  472C
13837  472D
13838  472E
13839  472F
13840  4730
13841  4731
13842  4732
13843  4733
13844  4734
13845  4735
13846  4736
13847  4737
13848  4738
13849  4739
13850  473A
13851  473B
13852  473C
13853  473D
13854  473E
13855  473F
13856  4740
13857  4741
13858  4742
13859  4743
13860  4744
13861  4745
13862  4746
13863  4747
13864  4748
13865  4749
13866  474A
13867  474B
13868  474C
13869  474D
13870  474E
13871  474F
13872  4750
13873  4751
13874  4752
13875  4753
13876  4754
13877  4755
13878  4756
13879  4757
13880  4758
13881  4759
13882  475A
13883  475B
13884  475C
13885  475D
13886  475E
13887  475F
13888  4760
13889  4761
13890  4762
13891  4763
13892  4764
13893  4765
13894  4766
13895  4767
13896  4768
13897  4769
13898  476A
13899  476B
13900  476C
13901  476D
13902  476E
13903  476F
13904  4770
13905  4771
13906  4772
13907  4773
13908  4774
13909  4775
13910  4776
13911  4777
13912  4778
13913  4779
13914  477A
13915  477B
13916  477C
13917  477D
13918  477E
13919  477F
13920  4780
13921  4781
13922  4782
13923  4783
13924  4784
13925  4785
13926  4786
13927  4787
13928  4788
13929  4789
13930  478A
13931  478B
13932  478C
13933  478D
13934  478E
13935  478F
13936  4790
13937  4791
13938  4792
13939  4793
13940  4794
13941  4795
13942  4796
13943  4797
13944  4798
13945  4799
13946  479A
13947  479B
13948  479C
13949  479D
13950  479E
13951  479F
13952  47A0
13953  47A1
13954  47A2
13955  47A3
13956  47A4
13957  47A5
13958  47A6
13959  47A7
13960  47A8
13961  47A9
13962  47AA
13963  47AB
13964  47AC
13965  47AD
13966  47AE
13967  47AF
13968  47B0
13969  47B1
13970  47B2
13971  47B3
13972  47B4
13973  47B5
13974  47B6
13975  47B7
13976  47B8
13977  47B9
13978  47BA
13979  47BB
13980  47BC
13981  47BD
13982  47BE
13983  47BF
13984  47C0
13985  47C1
13986  47C2
13987  47C3
13988  47C4
13989  47C5
13990  47C6
13991  47C7
13992  47C8
13993  47C9
13994  47CA
13995  47CB
13996  47CC
13997  47CD
13998  47CE
13999  47CF
14000  47D0
14001  47D1
14002  47D2
14003  47D3
14004  47D4
14005  47D5
14006  47D6
14007  47D7
14008  47D8
14009  47D9
14010  47DA
14011  47DB
14012  47DC
14013  47DD
14014  47DE
14015  47DF
14016  47E0
14017  47E1
14018  47E2
14019  47E3
14020  47E4
14021  47E5
14022  47E6
14023  47E7
14024  47E8
14025  47E9
14026  47EA
14027  47EB
14028  47EC
14029  47ED
14030  47EE
14031  47EF
14032  47F0
14033  47F1
14034  47F2
14035  47F3
14036  47F4
14037  47F5
14038  47F6
14039  47F7
14040  47F8
14041  47F9
14042  47FA
14043  47FB
14044  47FC
14045  47FD
14046  47FE
14047  47FF
14048  4800
14049  4801
14050  4802
14051  4803
14052  4804
14053  4805
14054  4806
14055  4807
14056  4808
14057  4809
14058  480A
14059  480B
14060  480C
14061  480D
14062  480E
14063  480F
14064  4810
14065  4811
14066  4812
14067  4813
14068  4814
14069  4815
14070  4816
14071  4817
14072  4818
14073  4819
14074  481A
14075  481B
14076  481C
14077  481D
14078  481E
14079  481F
14080  4820
14081  4821
14082  4822
14083  4823
14084  4824
14085  4825
14086  4826
14087  4827
14088  4828
14089  4829
14090  482A
14091  482B
14092  482C
14093  482D
14094  482E
14095  482F
14096  4830
14097  4831
14098  4832
14099  4833
14100  4834
14101  4835
14102  4836
14103  4837
14104  4838
14105  4839
14106  483A
14107  483B
14108  483C
14109  483D
14110  483E
14111  483F
14112  4840
14113  4841
14114  4842
14115  4843
14116  4844
14117  4845
14118  4846
14119  4847
14120  4848
14121  4849
14122  484A
14123  484B
14124  484C
14125  484D
14126  484E
14127  484F
14128  4850
14129  4851
14130  4852
14131  4853
14132  4854
14133  4855
14134  4856
14135  4857
14136  4858
14137  4859
14138  485A
14139  485B
14140  485C
14141  485D
14142  485E
14143  485F
14144  4860
14145  4861
14146  4862
14147  4863
14148  4864
14149  4865
14150  4866
14151  4867
14152  4868
14153  4869
14154  486A
14155  486B
14156  486C
14157  486D
14158  486E
14159  486F
14160  4870
14161  4871
14162  4872
14163  4873
14164  4874
14165  4875
14166  4876
14167  4877
14168  4878
14169  4879
14170  487A
14171  487B
14172  487C
14173  487D
14174  487E
14175  487F
14176  4880
14177  4881
14178  4882
14179  4883
14180  4884
14181  4885
14182  4886
14183  4887
14184  4888
14185  4889
14186  488A
14187  488B
14188  488C
14189  488D
14190  488E
14191  488F
14192  4890
14193  4891
14194  4892
14195  4893
14196  4894
14197  4895
14198  4896
14199  4897
14200  4898
14201  4899
14202  489A
14203  489B
14204  489C
14205  489D
14206  489E
14207  489F
14208  48A0
14209  48A1
14210  48A2
14211  48A3
14212  48A4
14213  48A5
14214  48A6
14215  48A7
14216  48A8
14217  48A9
14218  48AA
14219  48AB
14220  48AC
14221  48AD
14222  48AE
14223  48AF
14224  48B0
14225  48B1
14226  48B2
14227  48B3
14228  48B4
14229  48B5
14230  48B6
14231  48B7
14232  48B8
14233  48B9
14234  48BA
14235  48BB
14236  48BC
14237  48BD
14238  48BE
14239  48BF
14240  48C0
14241  48C1
14242  48C2
14243  48C3
14244  48C4
14245  48C5
14246  48C6
14247  48C7
14248  48C8
14249  48C9
14250  48CA
14251  48CB
14252  48CC
14253  48CD
14254  48CE
14255  48CF
14256  48D0
14257  48D1
14258  48D2
14259  48D3
14260  48D4
14261  48D5
14262  48D6
14263  48D7
14264  48D8
14265  48D9
14266  48DA
14267  48DB
14268  48DC
14269  48DD
14270  48DE
14271  48DF
14272  48E0
14273  48E1
14274  48E2
14275  48E3
14276  48E4
14277  48E5
14278  48E6
14279  48E7
14280  48E8
14281  48E9
14282  48EA
14283  48EB
14284  48EC
14285  48ED
14286  48EE
14287  48EF
14288  48F0
14289  48F1
14290  48F2
14291  48F3
14292  48F4
14293  48F5
14294  48F6
14295  48F7
14296  48F8
14297  48F9
14298  48FA
14299  48FB
14300  48FC
14301  48FD
14302  48FE
14303  48FF
14304  4900
14305  4901
14306  4902
14307  4903
14308  4904
14309  4905
14310  4906
14311  4907
14312  4908
14313  4909
14314  490A
14315  490B
14316  490C
14317  490D
14318  490E
14319  490F
14320  4910
14321  4911
14322  4912
14323  4913
14324  4914
14325  4915
14326  4916
14327  4917
14328  4918
14329  4919
14330  491A
14331  491B
14332  491C
14333  491D
14334  491E
14335  491F
14336  4920
14337  4921
14338  4922
14339  4923
14340  4924
14341  4925
14342  4926
14343  4927
14344  4928
14345  4929
14346  492A
14347  492B
14348  492C
14349  492D
14350  492E
14351  492F
14352  4930
14353  4931
14354  4932
14355  4933
14356  4934
14357  4935
14358  4936
14359  4937
14360  4938
14361  4939
14362  493A
14363  493B
14364  493C
14365  493D
14366  493E
14367  493F
14368  4940
14369  4941
14370  4942
14371  4943
14372  4944
14373  4945
14374  4946
14375  4947
14376  4948
14377  4949
14378  494A
14379  494B
14380  494C
14381  494D
14382  494E
14383  494F
14384  4950
14385  4951
14386  4952
14387  4953
14388  4954
14389  4955
14390  4956
14391  4957
14392  4958
14393  4959
14394  495A
14395  495B
14396  495C
14397  495D
14398  495E
14399  495F
14400  4960
14401  4961
14402  4962
14403  4963
14404  4964
14405  4965
14406  4966
14407  4967
14408  4968
14409  4969
14410  496A
14411  496B
14412  496C
14413  496D
14414  496E
14415  496F
14416  4970
14417  4971
14418  4972
14419  4973
14420  4974
14421  4975
14422  4976
14423  4977
14424  4978
14425  4979
14426  497A
14427  497B
14428  497C
14429  497D
14430  497E
14431  497F
14432  4980
14433  4981
14434  4982
14435  4983
14436  4984
14437  4985
14438  4986
14439  4987
14440  4988
14441  4989
14442  498A
14443  498B
14444  498C
14445  498D
14446  498E
14447  498F
14448  4990
14449  4991
14450  4992
14451  4993
14452  4994
14453  4995
14454  4996
14455  4997
14456  4998
14457  4999
14458  499A
14459  499B
14460  499C
14461  499D
14462  499E
14463  499F
14464  49A0
14465  49A1
14466  49A2
14467  49A3
14468  49A4
14469  49A5
14470  49A6
14471  49A7
14472  49A8
14473  49A9
14474  49AA
14475  49AB
14476  49AC
14477  49AD
14478  49AE
14479  49AF
14480  49B0
14481  49B1
14482  49B2
14483  49B3
14484  49B4
14485  49B5
14486  49B6
14487  49B7
14488  49B8
14489  49B9
14490  49BA
14491  49BB
14492  49BC
14493  49BD
14494  49BE
14495  49BF
14496  49C0
14497  49C1
14498  49C2
14499  49C3
14500  49C4
14501  49C5
14502  49C6
14503  49C7
14504  49C8
14505  49C9
14506  49CA
14507  49CB
14508  49CC
14509  49CD
14510  49CE
14511  49CF
14512  49D0
14513  49D1
14514  49D2
14515  49D3
14516  49D4
14517  49D5
14518  49D6
14519  49D7
14520  49D8
14521  49D9
14522  49DA
14523  49DB
14524  49DC
14525  49DD
14526  49DE
14527  49DF
14528  49E0
14529  49E1
14530  49E2
14531  49E3
14532  49E4
14533  49E5
14534  49E6
14535  49E7
14536  49E8
14537  49E9
14538  49EA
14539  49EB
14540  49EC
14541  49ED
14542  49EE
14543  49EF
14544  49F0
14545  49F1
14546  49F2
14547  49F3
14548  49F4
14549  49F5
14550  49F6
14551  49F7
14552  49F8
14553  49F9
14554  49FA
14555  49FB
14556  49FC
14557  49FD
14558  49FE
14559  49FF
14560  4A00
14561  4A01
14562  4A02
14563  4A03
14564  4A04
14565  4A05
14566  4A06
14567  4A07
14568  4A08
14569  4A09
14570  4A0A
14571  4A0B
14572  4A0C
14573  4A0D
14574  4A0E
14575  4A0F
14576  4A10
14577  4A11
14578  4A12
14579  4A13
14580  4A14
14581  4A15
14582  4A16
14583  4A17
14584  4A18
14585  4A19
14586  4A1A
14587  4A1B
14588  4A1C
14589  4A1D
14590  4A1E
14591  4A1F
14592  4A20
14593  4A21
14594  4A22
14595  4A23
14596  4A24
14597  4A25
14598  4A26
14599  4A27
14600  4A28
14601  4A29
14602  4A2A
14603  4A2B
14604  4A2C
14605  4A2D
14606  4A2E
14607  4A2F
14608  4A30
14609  4A31
14610  4A32
14611  4A33
14612  4A34
14613  4A35
14614  4A36
14615  4A37
14616  4A38
14617  4A39
14618  4A3A
14619  4A3B
14620  4A3C
14621  4A3D
14622  4A3E
14623  4A3F
14624  4A40
14625  4A41
14626  4A42
14627  4A43
14628  4A44
14629  4A45
14630  4A46
14631  4A47
14632  4A48
14633  4A49
14634  4A4A
14635  4A4B
14636  4A4C
14637  4A4D
14638  4A4E
14639  4A4F
14640  4A50
14641  4A51
14642  4A52
14643  4A53
14644  4A54
14645  4A55
14646  4A56
14647  4A57
14648  4A58
14649  4A59
14650  4A5A
14651  4A5B
14652  4A5C
14653  4A5D
14654  4A5E
14655  4A5F
14656  4A60
14657  4A61
14658  4A62
14659  4A63
14660  4A64
14661  4A65
14662  4A66
14663  4A67
14664  4A68
14665  4A69
14666  4A6A
14667  4A6B
14668  4A6C
14669  4A6D
14670  4A6E
14671  4A6F
14672  4A70
14673  4A71
14674  4A72
14675  4A73
14676  4A74
14677  4A75
14678  4A76
14679  4A77
14680  4A78
14681  4A79
14682  4A7A
14683  4A7B
14684  4A7C
14685  4A7D
14686  4A7E
14687  4A7F
14688  4A80
14689  4A81
14690  4A82
14691  4A83
14692  4A84
14693  4A85
14694  4A86
14695  4A87
14696  4A88
14697  4A89
14698  4A8A
14699  4A8B
14700  4A8C
14701  4A8D
14702  4A8E
14703  4A8F
14704  4A90
14705  4A91
14706  4A92
14707  4A93
14708  4A94
14709  4A95
14710  4A96
14711  4A97
14712  4A98
14713  4A99
14714  4A9A
14715  4A9B
14716  4A9C
14717  4A9D
14718  4A9E
14719  4A9F
14720  4AA0
14721  4AA1
14722  4AA2
14723  4AA3
14724  4AA4
14725  4AA5
14726  4AA6
14727  4AA7
14728  4AA8
14729  4AA9
14730  4AAA
14731  4AAB
14732  4AAC
14733  4AAD
14734  4AAE
14735  4AAF
14736  4AB0
14737  4AB1
14738  4AB2
14739  4AB3
14740  4AB4
14741  4AB5
14742  4AB6
14743  4AB7
14744  4AB8
14745  4AB9
14746  4ABA
14747  4ABB
14748  4ABC
14749  4ABD
14750  4ABE
14751  4ABF
14752  4AC0
14753  4AC1
14754  4AC2
14755  4AC3
14756  4AC4
14757  4AC5
14758  4AC6
14759  4AC7
14760  4AC8
14761  4AC9
14762  4ACA
14763  4ACB
14764  4ACC
14765  4ACD
14766  4ACE
14767  4ACF
14768  4AD0
14769  4AD1
14770  4AD2
14771  4AD3
14772  4AD4
14773  4AD5
14774  4AD6
14775  4AD7
14776  4AD8
14777  4AD9
14778  4ADA
14779  4ADB
14780  4ADC
14781  4ADD
14782  4ADE
14783  4ADF
14784  4AE0
14785  4AE1
14786  4AE2
14787  4AE3
14788  4AE4
14789  4AE5
14790  4AE6
14791  4AE7
14792  4AE8
14793  4AE9
14794  4AEA
14795  4AEB
14796  4AEC
14797  4AED
14798  4AEE
14799  4AEF
14800  4AF0
14801  4AF1
14802  4AF2
14803  4AF3
14804  4AF4
14805  4AF5
14806  4AF6
14807  4AF7
14808  4AF8
14809  4AF9
14810  4AFA
14811  4AFB
14812  4AFC
14813  4AFD
14814  4AFE
14815  4AFF
14816  4B00
14817  4B01
14818  4B02
14819  4B03
14820  4B04
14821  4B05
14822  4B06
14823  4B07
14824  4B08
14825  4B09
14826  4B0A
14827  4B0B
14828  4B0C
14829  4B0D
14830  4B0E
14831  4B0F
14832  4B10
14833  4B11
14834  4B12
14835  4B13
14836  4B14
14837  4B15
14838  4B16
14839  4B17
14840  4B18
14841  4B19
14842  4B1A
14843  4B1B
14844  4B1C
14845  4B1D
14846  4B1E
14847  4B1F
14848  4B20
14849  4B21
14850  4B22
14851  4B23
14852  4B24
14853  4B25
14854  4B26
14855  4B27
14856  4B28
14857  4B29
14858  4B2A
14859  4B2B
14860  4B2C
14861  4B2D
14862  4B2E
14863  4B2F
14864  4B30
14865  4B31
14866  4B32
14867  4B33
14868  4B34
14869  4B35
14870  4B36
14871  4B37
14872  4B38
14873  4B39
14874  4B3A
14875  4B3B
14876  4B3C
14877  4B3D
14878  4B3E
14879  4B3F
14880  4B40
14881  4B41
14882  4B42
14883  4B43
14884  4B44
14885  4B45
14886  4B46
14887  4B47
14888  4B48
14889  4B49
14890  4B4A
14891  4B4B
14892  4B4C
14893  4B4D
14894  4B4E
14895  4B4F
14896  4B50
14897  4B51
14898  4B52
14899  4B53
14900  4B54
14901  4B55
14902  4B56
14903  4B57
14904  4B58
14905  4B59
14906  4B5A
14907  4B5B
14908  4B5C
14909  4B5D
14910  4B5E
14911  4B5F
14912  4B60
14913  4B61
14914  4B62
14915  4B63
14916  4B64
14917  4B65
14918  4B66
14919  4B67
14920  4B68
14921  4B69
14922  4B6A
14923  4B6B
14924  4B6C
14925  4B6D
14926  4B6E
14927  4B6F
14928  4B70
14929  4B71
14930  4B72
14931  4B73
14932  4B74
14933  4B75
14934  4B76
14935  4B77
14936  4B78
14937  4B79
14938  4B7A
14939  4B7B
14940  4B7C
14941  4B7D
14942  4B7E
14943  4B7F
14944  4B80
14945  4B81
14946  4B82
14947  4B83
14948  4B84
14949  4B85
14950  4B86
14951  4B87
14952  4B88
14953  4B89
14954  4B8A
14955  4B8B
14956  4B8C
14957  4B8D
14958  4B8E
14959  4B8F
14960  4B90
14961  4B91
14962  4B92
14963  4B93
14964  4B94
14965  4B95
14966  4B96
14967  4B97
14968  4B98
14969  4B99
14970  4B9A
14971  4B9B
14972  4B9C
14973  4B9D
14974  4B9E
14975  4B9F
14976  4BA0
14977  4BA1
14978  4BA2
14979  4BA3
14980  4BA4
14981  4BA5
14982  4BA6
14983  4BA7
14984  4BA8
14985  4BA9
14986  4BAA
14987  4BAB
14988  4BAC
14989  4BAD
14990  4BAE
14991  4BAF
14992  4BB0
14993  4BB1
14994  4BB2
14995  4BB3
14996  4BB4
14997  4BB5
14998  4BB6
14999  4BB7
15000  4BB8
15001  4BB9
15002  4BBA
15003  4BBB
15004  4BBC
15005  4BBD
15006  4BBE
15007  4BBF
15008  4BC0
15009  4BC1
15010  4BC2
15011  4BC3
15012  4BC4
15013  4BC5
15014  4BC6
15015  4BC7
15016  4BC8
15017  4BC9
15018  4BCA
15019  4BCB
15020  4BCC
15021  4BCD
15022  4BCE
15023  4BCF
15024  4BD0
15025  4BD1
15026  4BD2
15027  4BD3
15028  4BD4
15029  4BD5
15030  4BD6
15031  4BD7
15032  4BD8
15033  4BD9
15034  4BDA
15035  4BDB
15036  4BDC
15037  4BDD
15038  4BDE
15039  4BDF
15040  4BE0
15041  4BE1
15042  4BE2
15043  4BE3
15044  4BE4
15045  4BE5
15046  4BE6
15047  4BE7
15048  4BE8
15049  4BE9
15050  4BEA
15051  4BEB
15052  4BEC
15053  4BED
15054  4BEE
15055  4BEF
15056  4BF0
15057  4BF1
15058  4BF2
15059  4BF3
15060  4BF4
15061  4BF5
15062  4BF6
15063  4BF7
15064  4BF8
15065  4BF9
15066  4BFA
15067  4BFB
15068  4BFC
15069  4BFD
15070  4BFE
15071  4BFF
15072  4C00
15073  4C01
15074  4C02
15075  4C03
15076  4C04
15077  4C05
15078  4C06
15079  4C07
15080  4C08
15081  4C09
15082  4C0A
15083  4C0B
15084  4C0C
15085  4C0D
15086  4C0E
15087  4C0F
15088  4C10
15089  4C11
15090  4C12
15091  4C13
15092  4C14
15093  4C15
15094  4C16
15095  4C17
15096  4C18
15097  4C19
15098  4C1A
15099  4C1B
15100  4C1C
15101  4C1D
15102  4C1E
15103  4C1F
15104  4C20
15105  4C21
15106  4C22
15107  4C23
15108  4C24
15109  4C25
15110  4C26
15111  4C27
15112  4C28
15113  4C29
15114  4C2A
15115  4C2B
15116  4C2C
15117  4C2D
15118  4C2E
15119  4C2F
15120  4C30
15121  4C31
15122  4C32
15123  4C33
15124  4C34
15125  4C35
15126  4C36
15127  4C37
15128  4C38
15129  4C39
15130  4C3A
15131  4C3B
15132  4C3C
15133  4C3D
15134  4C3E
15135  4C3F
15136  4C40
15137  4C41
15138  4C42
15139  4C43
15140  4C44
15141  4C45
15142  4C46
15143  4C47
15144  4C48
15145  4C49
15146  4C4A
15147  4C4B
15148  4C4C
15149  4C4D
15150  4C4E
15151  4C4F
15152  4C50
15153  4C51
15154  4C52
15155  4C53
15156  4C54
15157  4C55
15158  4C56
15159  4C57
15160  4C58
15161  4C59
15162  4C5A
15163  4C5B
15164  4C5C
15165  4C5D
15166  4C5E
15167  4C5F
15168  4C60
15169  4C61
15170  4C62
15171  4C63
15172  4C64
15173  4C65
15174  4C66
15175  4C67
15176  4C68
15177  4C69
15178  4C6A
15179  4C6B
15180  4C6C
15181  4C6D
15182  4C6E
15183  4C6F
15184  4C70
15185  4C71
15186  4C72
15187  4C73
15188  4C74
15189  4C75
15190  4C76
15191  4C77
15192  4C78
15193  4C79
15194  4C7A
15195  4C7B
15196  4C7C
15197  4C7D
15198  4C7E
15199  4C7F
15200  4C80
15201  4C81
15202  4C82
15203  4C83
15204  4C84
15205  4C85
15206  4C86
15207  4C87
15208  4C88
15209  4C89
15210  4C8A
15211  4C8B
15212  4C8C
15213  4C8D
15214  4C8E
15215  4C8F
15216  4C90
15217  4C91
15218  4C92
15219  4C93
15220  4C94
15221  4C95
15222  4C96
15223  4C97
15224  4C98
15225  4C99
15226  4C9A
15227  4C9B
15228  4C9C
15229  4C9D
15230  4C9E
15231  4C9F
15232  4CA0
15233  4CA1
15234  4CA2
15235  4CA3
15236  4CA4
15237  4CA5
15238  4CA6
15239  4CA7
15240  4CA8
15241  4CA9
15242  4CAA
15243  4CAB
15244  4CAC
15245  4CAD
15246  4CAE
15247  4CAF
15248  4CB0
15249  4CB1
15250  4CB2
15251  4CB3
15252  4CB4
15253  4CB5
15254  4CB6
15255  4CB7
15256  4CB8
15257  4CB9
15258  4CBA
15259  4CBB
15260  4CBC
15261  4CBD
15262  4CBE
15263  4CBF
15264  4CC0
15265  4CC1
15266  4CC2
15267  4CC3
15268  4CC4
15269  4CC5
15270  4CC6
15271  4CC7
15272  4CC8
15273  4CC9
15274  4CCA
15275  4CCB
15276  4CCC
15277  4CCD
15278  4CCE
15279  4CCF
15280  4CD0
15281  4CD1
15282  4CD2
15283  4CD3
15284  4CD4
15285  4CD5
15286  4CD6
15287  4CD7
15288  4CD8
15289  4CD9
15290  4CDA
15291  4CDB
15292  4CDC
15293  4CDD
15294  4CDE
15295  4CDF
15296  4CE0
15297  4CE1
15298  4CE2
15299  4CE3
15300  4CE4
15301  4CE5
15302  4CE6
15303  4CE7
15304  4CE8
15305  4CE9
15306  4CEA
15307  4CEB
15308  4CEC
15309  4CED
15310  4CEE
15311  4CEF
15312  4CF0
15313  4CF1
15314  4CF2
15315  4CF3
15316  4CF4
15317  4CF5
15318  4CF6
15319  4CF7
15320  4CF8
15321  4CF9
15322  4CFA
15323  4CFB
15324  4CFC
15325  4CFD
15326  4CFE
15327  4CFF
15328  4D00
15329  4D01
15330  4D02
15331  4D03
15332  4D04
15333  4D05
15334  4D06
15335  4D07
15336  4D08
15337  4D09
15338  4D0A
15339  4D0B
15340  4D0C
15341  4D0D
15342  4D0E
15343  4D0F
15344  4D10
15345  4D11
15346  4D12
15347  4D13
15348  4D14
15349  4D15
15350  4D16
15351  4D17
15352  4D18
15353  4D19
15354  4D1A
15355  4D1B
15356  4D1C
15357  4D1D
15358  4D1E
15359  4D1F
15360  4D20
15361  4D21
15362  4D22
15363  4D23
15364  4D24
15365  4D25
15366  4D26
15367  4D27
15368  4D28
15369  4D29
15370  4D2A
15371  4D2B
15372  4D2C
15373  4D2D
15374  4D2E
15375  4D2F
15376  4D30
15377  4D31
15378  4D32
15379  4D33
15380  4D34
15381  4D35
15382  4D36
15383  4D37
15384  4D38
15385  4D39
15386  4D3A
15387  4D3B
15388  4D3C
15389  4D3D
15390  4D3E
15391  4D3F
15392  4D40
15393  4D41
15394  4D42
15395  4D43
15396  4D44
15397  4D45
15398  4D46
15399  4D47
15400  4D48
15401  4D49
15402  4D4A
15403  4D4B
15404  4D4C
15405  4D4D
15406  4D4E
15407  4D4F
15408  4D50
15409  4D51
15410  4D52
15411  4D53
15412  4D54
15413  4D55
15414  4D56
15415  4D57
15416  4D58
15417  4D59
15418  4D5A
15419  4D5B
15420  4D5C
15421  4D5D
15422  4D5E
15423  4D5F
15424  4D60
15425  4D61
15426  4D62
15427  4D63
15428  4D64
15429  4D65
15430  4D66
15431  4D67
15432  4D68
15433  4D69
15434  4D6A
15435  4D6B
15436  4D6C
15437  4D6D
15438  4D6E
15439  4D6F
15440  4D70
15441  4D71
15442  4D72
15443  4D73
15444  4D74
15445  4D75
15446  4D76
15447  4D77
15448  4D78
15449  4D79
15450  4D7A
15451  4D7B
15452  4D7C
15453  4D7D
15454  4D7E
15455  4D7F
15456  4D80
15457  4D81
15458  4D82
15459  4D83
15460  4D84
15461  4D85
15462  4D86
15463  4D87
15464  4D88
15465  4D89
15466  4D8A
15467  4D8B
15468  4D8C
15469  4D8D
15470  4D8E
15471  4D8F
15472  4D90
15473  4D91
15474  4D92
15475  4D93
15476  4D94
15477  4D95
15478  4D96
15479  4D97
15480  4D98
15481  4D99
15482  4D9A
15483  4D9B
15484  4D9C
15485  4D9D
15486  4D9E
15487  4D9F
15488  4DA0
15489  4DA1
15490  4DA2
15491  4DA3
15492  4DA4
15493  4DA5
15494  4DA6
15495  4DA7
15496  4DA8
15497  4DA9
15498  4DAA
15499  4DAB
15500  4DAC
15501  4DAD
15502  4DAE
15503  4DAF
15504  4DB0
15505  4DB1
15506  4DB2
15507  4DB3
15508  4DB4
15509  4DB5
15510  4DB6
15511  4DB7
15512  4DB8
15513  4DB9
15514  4DBA
15515  4DBB
15516  4DBC
15517  4DBD
15518  4DBE
15519  4DBF
15520  4DC0
15521  4DC1
15522  4DC2
15523  4DC3
15524  4DC4
15525  4DC5
15526  4DC6
15527  4DC7
15528  4DC8
15529  4DC9
15530  4DCA
15531  4DCB
15532  4DCC
15533  4DCD
15534  4DCE
15535  4DCF
15536  4DD0
15537  4DD1
15538  4DD2
15539  4DD3
15540  4DD4
15541  4DD5
15542  4DD6
15543  4DD7
15544  4DD8
15545  4DD9
15546  4DDA
15547  4DDB
15548  4DDC
15549  4DDD
15550  4DDE
15551  4DDF
15552  4DE0
15553  4DE1
15554  4DE2
15555  4DE3
15556  4DE4
15557  4DE5
15558  4DE6
15559  4DE7
15560  4DE8
15561  4DE9
15562  4DEA
15563  4DEB
15564  4DEC
15565  4DED
15566  4DEE
15567  4DEF
15568  4DF0
15569  4DF1
15570  4DF2
15571  4DF3
15572  4DF4
15573  4DF5
15574  4DF6
15575  4DF7
15576  4DF8
15577  4DF9
15578  4DFA
15579  4DFB
15580  4DFC
15581  4DFD
15582  4DFE
15583  4DFF
15584  4E00
15585  4E01
15586  4E02
15587  4E03
15588  4E04
15589  4E05
015590  000557        
015591  000558  var hFonts[54] ;
015592  000559  var stringsCV[54] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
15593  2772
15594  2773
15595  2774
15596  2775
15597  2776
15598  2777
15599  2778
15600  2779
15601  277A
15602  277B
15603  277C
15604  277D
15605  277E
15606  277F
15607  2780
15608  2781
15609  2782
15610  2783
15611  2784
15612  2785
15613  2786
15614  2787
15615  2788
15616  2789
15617  278A
15618  278B
15619  278C
15620  278D
15621  278E
15622  278F
15623  2790
15624  2791
15625  2792
15626  2793
15627  2794
15628  2795
15629  2796
15630  2797
15631  2798
15632  2799
15633  279A
15634  279B
15635  279C
15636  279D
15637  279E
15638  279F
15639  27A0
15640  27A1
15641  27A2
15642  27A3
15643  27A4
15644  27A5
15645  27A6
15646  27A7
15647  27A8
15648  27A9
15649  27AA
15650  27AB
15651  27AC
15652  27AD
15653  27AE
15654  27AF
15655  27B0
15656  27B1
15657  27B2
15658  27B3
15659  27B4
15660  27B5
15661  27B6
15662  27B7
15663  27B8
15664  27B9
15665  27BA
15666  27BB
15667  27BC
15668  27BD
15669  27BE
15670  27BF
15671  27C0
15672  27C1
15673  27C2
15674  27C3
15675  27C4
15676  27C5
15677  27C6
15678  27C7
15679  27C8
15680  27C9
15681  27CA
15682  27CB
15683  27CC
15684  27CD
15685  27CE
15686  27CF
15687  27D0
15688  27D1
15689  27D2
15690  27D3
15691  27D4
15692  27D5
15693  27D6
15694  27D7
15695  27D8
15696  27D9
15697  27DA
15698  27DB
15699  27DC
15700  27DD
015701  000560  // Start P2.inc
015702  000561  var oObjects[MaxTotObjects+1] ;                 // address of objects
015703  000562  var CurrentForm ;
015704  000563  var TouchXpos, TouchYpos ;
015705  000564  var InputType, TouchState, CurInputData, pInputIndex ;
015706  000565  var comRX[40], cmd[CMDLenMAX] ;
015707  000566        
015708  000567  var InputCS, OutputCS ;
015709  000568        
015710  000569        
015711  000570        
015712  000571  func seroutCS(var op)
015713  000572      serout(op) ;
015714  000573      OutputCS ^= op ;
015715  000574  endfunc
015716  000575        
015717  000576  func nak0()
015718  000577      serout(NAK) ;
015719  000578      InputCS := 0 ;
015720  000579  endfunc
015721  000580        
015722  000581  func seroutOcs()
015723  000582      serout(OutputCS) ;
015724  000583      OutputCS := 0 ;
015725  000584  endfunc
015726  000585        
015727  000586  func SendReport(var id, var objt, var objn, var val)
015728  000587      seroutCS(id) ;
015729  000588      seroutCS(objt) ;
015730  000589      seroutCS(objn) ;
015731  000590      seroutCS(val >> 8) ; // first 8 bits
015732  000591      seroutCS(val) ;
015733  000592      seroutOcs() ;
015734  000593  endfunc
015735  000594        
015736  000595        
015737  000596  func ReadObject(var ObjectType, var ObjectIdx)
015738  000597      var j, k, Objects ;
015739  000598      Objects := *(oObjects+ObjectType) ;
015740  000599        
015741  000600      j := 2 + ObjectIdx * 2 + Objects ;
015742  000601       if (ObjectType == tForm)
015743  000602          k := CurrentForm ;
015744  000603      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
015745  000604          k := img_GetWord(hndl, *j, IMAGE_TAG2);
015746  000605      else if (ObjectType == tStrings)
015747  000606          k := stringsCV[ObjectIdx];
015748  000607          else
015749  000608          k := img_GetWord(hndl, *j, IMAGE_INDEX);
015750  000609          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
015751  000610                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
015752  000611      endif
015753  000612      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
015754  000613  endfunc
015755  000614        
015756  000615        
015757  000616  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
015758  000617      var i, j, k, Objects ;
015759  000618      ObjectType &= 0x3f ;
015760  000619      if (ObjectType == tForm)
015761  000620          ActivateForm(ObjectIdx) ;
015762  000621      else
015763  000622          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
015764  000623          i := *(Objects) ;
015765  000624          switch (ObjectType)
015766  000625              case tWinButton :
015767  000626                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
015768  000627                  break ;
015769  000628              case tUserButton :
015770  000629                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
015771  000630                  break ;
015772  000631              default : j := -1 ;
015773  000632          endswitch
015774  000633          if (j != -1)
015775  000634              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
015776  000635              NewVal := NewVal << 1 ;
015777  000636              if (OVF())      // button group index change
015778  000637                  if (*(j+InputData+Ofs_IPD_P1))
015779  000638                      k &= 1 ;    // mask off old group index for momentary
015780  000639                  else
015781  000640                      k &= 3 ;    // mask off old group index for toggle
015782  000641                  endif
015783  000642              else            // normal set
015784  000643                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
015785  000644                  k &= 0xfffc ;    // retain only group index for state set
015786  000645              endif
015787  000646              NewVal |= k ;
015788  000647          endif
015789  000648           if (ObjectType == tLeddigits)
015790  000649              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
015791  000650              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015792  000651          else if (ObjectType == tStrings)
015793  000652              PrintStrings(ObjectIdx, NewVal, 0);
015794  000653          else
015795  000654              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
015796  000655              img_Show(hndl, i) ; // will only display if form is current
015797  000656          endif
015798  000657      endif
015799  000658  endfunc
015800  000659        
015801  000660  func TurnOffButtons(var group)
015802  000661      var j, k, l;
015803  000662      for (j := 0; j < nInputs; j++)
015804  000663          k := j*IPDatasize ;
015805  000664          if (*(InputData+k+Ofs_IPD_P2) == group)
015806  000665              l := -1 ;
015807  000666               if (*(InputData+k) == tWinButton)
015808  000667                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015809  000668                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
015810  000669                  img_Show(hndl, l);      // only shows on current form
015811  000670              else if (*(InputData+k) == tUserButton)
015812  000671                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015813  000672                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
015814  000673                  img_Show(hndl, l);      // only shows on current form
015815  000674              endif
015816  000675          endif
015817  000676      next
015818  000677  endfunc
015819  000678        
015820  000679        
015821  000680  // WARNING, this code will crash if newval exceeds maximum displayable number
015822  000681  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
015823  000682      var i, j, k, l, lb, newval ;
015824  000683      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
015825  000684      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
015826  000685      i := -1 ;
015827  000686      j := *(typeptr) ;
015828  000687      repeat
015829  000688          typeptr += 2 ;
015830  000689          i++ ;
015831  000690          until (*(typeptr) == imgidx);
015832  000691      j := setptr + i*10 ;
015833  000692        
015834  000693      imgidx++ ;
015835  000694      l := 1 ;
015836  000695      for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
015837  000696          l *= 10 ;
015838  000697      next
015839  000698      lb := *(j+Ofs_Digits_LeadingBlanks) ;
015840  000699      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
015841  000700          k := newval / l ;
015842  000701          newval -= k * l ;
015843  000702          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
015844  000703              if (k == 0)
015845  000704                  k := 10 ;
015846  000705              else
015847  000706                  lb := 0 ;
015848  000707              endif
015849  000708          endif
015850  000709          l /= 10 ;
015851  000710          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
015852  000711          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
015853  000712          img_Show(hndl, imgidx);
015854  000713      next
015855  000714  endfunc
015856  000715        
015857  000716        
015858  000717  func ActivateForm(var newform)
015859  000718      var i, j, *p ;
015860  000719        
015861  000720      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
015862  000721          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
015863  000722              if (img_GetWord(hndl, i, IMAGE_TAG))
015864  000723                  img_Disable(hndl,i) ;
015865  000724              endif
015866  000725          next
015867  000726      endif
015868  000727      CurrentForm := newform ;
015869  000728      // display newform image or clear to image color
015870  000729      if (FormBGcolors[CurrentForm] != ColorBGimage)
015871  000730          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
015872  000731          gfx_Cls() ;
015873  000732          DoGFXObjects() ;                                    // display GFX 'widgets'
015874  000733      endif
015875  000734        
015876  000735      // enable inputs
015877  000736      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
015878  000737          j := img_GetWord(hndl, i, IMAGE_TAG) ;
015879  000738          if (j)
015880  000739              j-- ;
015881  000740              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
015882  000741              //if (j != tKeyboard)
015883  000742              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
015884  000743                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
015885  000744              endif
015886  000745              img_Show(hndl,i) ; // show initialy, if required
015887  000746              if (j == tForm)
015888  000747                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
015889  000748              else if (j == tLeddigits)
015890  000749                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015891  000750              endif
015892  000751          endif
015893  000752      next
015894  000753      for (i := 0; i < nStrings; i++)
015895  000754          if (stringsCV[i] != -1)
015896  000755              WriteObject(tStrings, i, stringsCV[i]) ;
015897  000756          endif
015898  000757      next
015899  000758        
015900  000759  endfunc
015901  000760        
015902  000761  func UpdateObjects(var newval)
015903  000762      var IPidx, otherOBJ ;
015904  000763      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
015905  000764        
015906  000765          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
015907  000766              img_Show(hndl, *(pInputIndex));      // only shows on current form
015908  000767          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
015909  000768              if (*(CurInputData+Ofs_IPD_P1))
015910  000769                  newval &= 1;
015911  000770              else
015912  000771                  newval &= 3;
015913  000772              endif
015914  000773              if (newval > 1) newval := 1;
015915  000774          endif
015916  000775          IPidx := *(CurInputData+TouchState) ;
015917  000776          while(IPidx != 0)
015918  000777              otherOBJ := IPidx + InputData;
015919  000778              if (*(otherOBJ) == OT_REPORT)
015920  000779          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
015921  000780              else if (*(otherOBJ) == OT_MAGIC)
015922  000781                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
015923  000782                  IPidx(newval) ;
015924  000783              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
015925  000784                  if (*(otherOBJ) == OT_ACTIVATE)
015926  000785                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
015927  000786                      InputType := tForm ;
015928  000787                  else if (*(otherOBJ) == OT_SETCONST)
015929  000788                      newval := *(otherOBJ+Ofs_IPD_P3) ;
015930  000789                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015931  000790                  else if (*(otherOBJ) == OT_SETANOTHER)
015932  000791                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015933  000792                  else if (*(otherOBJ) == OT_PREVFRAME)
015934  000793                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
015935  000794                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
015936  000795                      endif
015937  000796                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015938  000797                  else if (*(otherOBJ) == OT_NEXTFRAME)
015939  000798                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
015940  000799                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
015941  000800                      endif
015942  000801                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015943  000802                  else if (*(otherOBJ) == OT_PREVSTRING)
015944  000803                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
015945  000804                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
015946  000805                      endif
015947  000806                  else if (*(otherOBJ) == OT_NEXTSTRING)
015948  000807                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
015949  000808                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
015950  000809                      endif
015951  000810                  endif
015952  000811              endif
015953  000812              IPidx := *(otherOBJ+TouchState) ;
015954  000813          wend
015955  000814      endif
015956  000815  endfunc
015957  000816        
015958  000817  // End P2.inc
015959  000818  func DoGFXObjects()
015960  000819  endfunc
015961  000820        
015962  000821  // Start P3.inc
015963  000822  func main()
015964  000823      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
015965  000824        
015966  000825      putstr("Mounting...\n");
015967  000826      if (!(file_Mount()))
015968  000827          while(!(file_Mount()))
015969  000828              putstr("Drive not mounted...");
015970  000829              pause(200);
015971  000830              gfx_Cls();
015972  000831              pause(200);
015973  000832          wend
015974  000833      endif
015975  000834  //    gfx_MoveTo(0, 0);
015976  000835  //    print(mem_Heap()," ") ;
015977  000836  //    gfx_TransparentColour(0x0020);
015978  000837  //    gfx_Transparency(ON);
015979  000838        
015980  000839      gfx_ScreenMode(LANDSCAPE) ;
015981  000840        
015982  000841      // open image control
015983  000842      hndl := file_LoadImageControl("RepRap_T.dat", "RepRap_T.gci", 1);
015984  000843        
015985  000844      // init 'constants'
015986  000845  // End P3.inc
015987  000846        
015988  000847      oObjects[tDipSwitch] := oDipSwitchs ;
015989  000848      oObjects[tKnob] := oKnobs ;
015990  000849      oObjects[tRockerSwitch] := oRockerSwitchs ;
015991  000850      oObjects[tRotarySwitch] := oRotarySwitchs ;
015992  000851      oObjects[tGSlider] := oGSliders ;
015993  000852      oObjects[tTrackbar] := oTrackbars ;
015994  000853      oObjects[tWinButton] := oWinButtons ;
015995  000854      oObjects[tAngularmeter] := oAngularmeters ;
015996  000855      oObjects[tCoolgauge] := oCoolgauges ;
015997  000856      oObjects[tCustomdigits] := oCustomdigitss ;
015998  000857      oObjects[tForm] := oForms ;
015999  000858      oObjects[tGauge] := oGauges ;
016000  000859      oObjects[tImage] := oImages ;
016001  000860      oObjects[tKeyboard] := oKeyboards ;
016002  000861      oObjects[tLed] := oLeds ;
016003  000862      oObjects[tLeddigits] := oLeddigitss ;
016004  000863      oObjects[tMeter] := oMeters ;
016005  000864      oObjects[tStrings] := oStringss ;
016006  000865      oObjects[tThermometer] := oThermometers ;
016007  000866      oObjects[tUserled] := oUserleds ;
016008  000867      oObjects[tVideo] := oVideos ;
016009  000868      oObjects[tStaticText] := oStaticTexts ;
016010  000869      oObjects[tSounds] := oSoundss ;
016011  000870      oObjects[tTimer] := oTimers ;
016012  000871      oObjects[tSpectrum] := oSpectrums ;
016013  000872      oObjects[tTank] := oTanks ;
016014  000873      oObjects[tUserImages] := oUserImagess ;
016015  000874      oObjects[tPinOutput] := oPinOutputs ;
016016  000875      oObjects[tPinInput] := oPinInputs ;
016017  000876      oObjects[t4Dbutton] := o4Dbuttons ;
016018  000877      oObjects[tAniButton] := oAniButtons ;
016019  000878      oObjects[tColorPicker] := oColorPickers ;
016020  000879      oObjects[tUserButton] := oUserButtons ;
016021  000880      hFonts[0] := file_LoadImageControl("RepRap_T.d03", "RepRap_T.g03", 1)  ;
016022  000881      hFonts[1] := file_LoadImageControl("RepRap_T.d01", "RepRap_T.g01", 1)  ;
016023  000882      hFonts[2] := file_LoadImageControl("RepRap_T.d02", "RepRap_T.g02", 1)  ;
016024  000883      hFonts[3] := FONT3 ;
016025  000884      hFonts[4] := FONT3 ;
016026  000885      hFonts[5] := FONT3 ;
016027  000886      hFonts[6] := FONT3 ;
016028  000887      hFonts[11] := file_LoadImageControl("RepRap_T.d05", "RepRap_T.g05", 1)  ;
016029  000888      hFonts[12] := FONT3 ;
016030  000889      hFonts[13] := file_LoadImageControl("RepRap_T.d09", "RepRap_T.g09", 1)  ;
016031  000890      hFonts[14] := FONT3 ;
016032  000891      hFonts[15] := FONT3 ;
016033  000892      hFonts[16] := FONT3 ;
016034  000893      hFonts[20] := FONT3 ;
016035  000894      hFonts[21] := FONT3 ;
016036  000895      hFonts[22] := FONT3 ;
016037  000896      hFonts[23] := FONT3 ;
016038  000897      hFonts[24] := FONT3 ;
016039  000898      hFonts[28] := FONT3 ;
016040  000899      hFonts[31] := file_LoadImageControl("RepRap_T.d07", "RepRap_T.g07", 1)  ;
016041  000900      hFonts[33] := file_LoadImageControl("RepRap_T.d06", "RepRap_T.g06", 1)  ;
016042  000901      hFonts[35] := FONT3 ;
016043  000902      hFonts[37] := file_LoadImageControl("RepRap_T.d04", "RepRap_T.g04", 1)  ;
016044  000903      hFonts[49] := file_LoadImageControl("RepRap_T.d08", "RepRap_T.g08", 1)  ;
016045  000904      hFonts[51] := FONT3 ;
016046  000905      hFonts[52] := FONT3 ;
016047  000906      hFonts[53] := file_LoadImageControl("RepRap_T.d0@", "RepRap_T.g0@", 1)  ;
016048  000907      hFonts[7] := hFonts[37] ;
016049  000908      hFonts[8] := hFonts[37] ;
016050  000909      hFonts[9] := hFonts[0] ;
016051  000910      hFonts[10] := hFonts[11] ;
016052  000911      hFonts[17] := hFonts[11] ;
016053  000912      hFonts[18] := hFonts[11] ;
016054  000913      hFonts[19] := hFonts[11] ;
016055  000914      hFonts[25] := hFonts[11] ;
016056  000915      hFonts[26] := hFonts[11] ;
016057  000916      hFonts[27] := hFonts[11] ;
016058  000917      hFonts[29] := hFonts[11] ;
016059  000918      hFonts[30] := hFonts[11] ;
016060  000919      hFonts[32] := hFonts[31] ;
016061  000920      hFonts[34] := hFonts[0] ;
016062  000921      hFonts[36] := hFonts[0] ;
016063  000922      hFonts[38] := hFonts[37] ;
016064  000923      hFonts[39] := hFonts[37] ;
016065  000924      hFonts[40] := hFonts[0] ;
016066  000925      hFonts[41] := hFonts[0] ;
016067  000926      hFonts[42] := hFonts[0] ;
016068  000927      hFonts[43] := hFonts[37] ;
016069  000928      hFonts[44] := hFonts[37] ;
016070  000929      hFonts[45] := hFonts[37] ;
016071  000930      hFonts[46] := hFonts[13] ;
016072  000931      hFonts[47] := hFonts[13] ;
016073  000932      hFonts[48] := hFonts[13] ;
016074  000933      hFonts[50] := hFonts[49] ;
016075  000934  // Start P4.inc
016076  000935      hstrings := file_Open("RepRap_T.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
016077  000936      // init comms
016078  000937      com_Init(comRX,CMDLenMAX,0);
016079  000938      com_SetBaud(COM0,19886);
016080  000939      com_TXbuffer(comTX, 100, 0);
016081  000940      snd_BufSize(2) ;
016082  000941      // tag 'real' objects
016083  000942      for (i := 0; i <= MaxTotObjects; i++)
016084  000943          if (   (i != tSounds)
016085  000944              && (i != tTimer)
016086  000945              && (i != tPinOutput)
016087  000946              && (i != tPinInput) )
016088  000947              TouchXpos := oObjects[i] ;
016089  000948              TouchYpos := *(TouchXpos) ;
016090  000949              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
016091  000950                  oldn := *(TouchXpos+ImageTouched*2) ;
016092  000951                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
016093  000952                  if (oldn != -1)
016094  000953                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
016095  000954                      img_Disable(hndl, oldn) ;
016096  000955                  endif
016097  000956              next
016098  000957          endif
016099  000958      next
016100  000959        
016101  000960      // display initial form
016102  000961      CurrentForm := -1 ;
016103  000962      ActivateForm(0) ; // need to change this according to first actual form
016104  000963        
016105  000964  // End P4.inc
016106  000965  // Start P5.inc
016107  000966      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
016108  000967      oldn := -1 ;
016109  000968      repeat
016110  000969        
016111  000970          // check comms for command, how to NAK invalid command
016112  000971          if (com_Count() != 0)
016113  000972              i := serin() ;
016114  000973              InputCS ^= i ;               // update checksum
016115  000974              if (   (cmdi > 2)
016116  000975                  && (cmd[0] == WRITE_STRU) )
016117  000976                  j := (cmdi-1) >> 1 + 2 ;
016118  000977                  if (j == CMDLenMAX)    // max length exceeded
016119  000978                      nak0() ;
016120  000979                      cmdi := -1 ;
016121  000980                  else if (cmdi & 1)
016122  000981                      cmd[j] := i ;
016123  000982                      if (cmd[2] == 0)    // if string complete
016124  000983                          if (InputCS)
016125  000984                              nak0() ;
016126  000985                          else
016127  000986                              if (cmd[0] == WRITE_STRU)
016128  000987                              cmd[j] := 0 ;                     // terminate it
016129  000988                              PrintStrings(cmd[1], &cmd[3], 1) ;
016130  000989                              serout(ACK) ;
016131  000990                              else
016132  000991                              endif
016133  000992                          endif
016134  000993                          cmdi := -1 ;
016135  000994                      endif
016136  000995                  else
016137  000996                      cmd[j] := cmd[j] << 8 + i ;
016138  000997                      cmd[2]-- ;          // dec length
016139  000998                  endif
016140  000999                  cmdi++ ;
016141  001000              else // not unicode string
016142  001001                  cmd[cmdi++] := i ;
016143  001002                   if (cmd[0] == WRITE_STR)                  // Ansi String
016144  001003                      if (cmdi == CMDLenMAX)      // max length exceeded
016145  001004                          nak0() ;
016146  001005                          cmdi := 0 ;
016147  001006                      else if (cmdi > 2)
016148  001007                          if (cmd[2] == -1)
016149  001008                              if (InputCS)
016150  001009                                  nak0() ;
016151  001010                              else
016152  001011                                  if (cmd[0] == WRITE_STR)
016153  001012                                  cmd[cmdi-1] := 0 ;                     // terminate it
016154  001013                                  PrintStrings(cmd[1], &cmd[3], 1) ;
016155  001014                                  serout(ACK) ;
016156  001015                                  else
016157  001016                                  endif
016158  001017                              endif
016159  001018                              cmdi := 0 ;
016160  001019                          else
016161  001020                              cmd[2]-- ;          // dec length
016162  001021                          endif
016163  001022                      endif
016164  001023                  else if (   (cmd[0] == READ_OBJ)
016165  001024                           && (cmdi == 4)         )
016166  001025                      if (InputCS)
016167  001026                          nak0() ;
016168  001027                      else
016169  001028                          ReadObject(cmd[1], cmd[2]) ;
016170  001029                      endif
016171  001030                      cmdi := 0 ;
016172  001031                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
016173  001032                           && (cmdi == 6)          )
016174  001033                      if (InputCS)
016175  001034                          nak0() ;
016176  001035                      else
016177  001036                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
016178  001037                          serout(ACK) ;
016179  001038                      endif
016180  001039                      cmdi := 0 ;
016181  001040                  else if (   (cmd[0] == WRITE_CONTRAST)
016182  001041                           && (cmdi == 3)         )
016183  001042                      if (InputCS)
016184  001043                          nak0() ;
016185  001044                      else
016186  001045                          gfx_Contrast(cmd[1]) ;
016187  001046                          serout(ACK) ;
016188  001047                      endif
016189  001048                      cmdi := 0 ;
016190  001049                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
016191  001050                      nak0() ;
016192  001051                      cmdi := 0 ;
016193  001052                  endif
016194  001053              endif   // not unicode string
016195  001054          endif   // a character is available
016196  001055        
016197  001056        
016198  001057      // touch code processing
016199  001058        
016200  001059          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
016201  001060          ImageTouched := img_Touched(hndl,-1) ;
016202  001061          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
016203  001062              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
016204  001063                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
016205  001064              endif
016206  001065              if (TouchStatus != TOUCH_RELEASED)        // if not released
016207  001066                  if (oldn != -1)
016208  001067                      ImageTouched := oldn ;
016209  001068                  else
016210  001069                      if (oldn != ImageTouched)
016211  001070                  oldn := ImageTouched ;
016212  001071                          TouchStatus := TOUCH_PRESSED ;
016213  001072                      endif
016214  001073                  endif
016215  001074                  TouchXpos  := touch_Get(TOUCH_GETX);
016216  001075                  TouchYpos  := touch_Get(TOUCH_GETY);
016217  001076                  TouchState := Ofs_IPD_DOWN ;
016218  001077              else
016219  001078                  ImageTouched := oldn ;                     // simulate release of what we touched
016220  001079                  oldn := -1 ;                    // prevent double release
016221  001080                  TouchState := Ofs_IPD_RELEASE ;
016222  001081              endif
016223  001082              if (ImageTouched != -1)
016224  001083                          CurInputData := InputControls[ImageTouched] + InputData;
016225  001084                          InputType := *(CurInputData) ;
016226  001085                          i := InputType ;
016227  001086                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
016228  001087                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
016229  001088              endif
016230  001089          endif
016231  001090   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
016232  001091        
016233  001092          sys_EventsResume() ;
016234  001093      forever
016235  001094        
016236  001095  cDipswitch:
016237  001096        
016238  001097  cKnob:
016239  001098        
016240  001099  cRockerswitch:
016241  001100        
016242  001101  cRotaryswitch:
016243  001102        
016244  001103  cSlider:
016245  001104  cTrackbar:
016246  001105        
016247  001106  c4DButton:
016248  001107  cUserButton:
016249  001108      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
016250  001109      goto gbutton ;
016251  001110  cWinbutton:
016252  001111      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
016253  001112  gbutton:
016254  001113      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
016255  001114      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
016256  001115          if (TouchStatus == TOUCH_RELEASED)
016257  001116              i &= 0xfffe ;
016258  001117              TouchState == Ofs_IPD_DOWN ;
016259  001118          else
016260  001119              i |= 1 ;
016261  001120              TouchState == Ofs_IPD_RELEASE ;
016262  001121          endif
016263  001122      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
016264  001123          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
016265  001124              if ((i & 3) == 3)
016266  001125                  i &= 0xfffc ;
016267  001126              else
016268  001127                  i++ ;
016269  001128              endif
016270  001129          else
016271  001130              i |= 1 ;                                      // make down regardless of current state
016272  001131          endif
016273  001132      else                        // group action, up all other buttons on touch press, reports 0 for button down
016274  001133          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
016275  001134              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
016276  001135          endif
016277  001136          i := (i & 0xfffc) | 2 ;
016278  001137      endif
016279  001138        
016280  001139      UpdateObjects(i) ;
016281  001140  endsub ;
016282  001141        
016283  001142  cAniButton:
016284  001143        
016285  001144  cColorPicker:
016286  001145        
016287  001146  endfunc
016288  001147  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 782 file:RepRap_Touchv1.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 718 file:RepRap_Touchv1.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       13142  0x00003356 (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 141)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (usage 3)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  382  0x0000017e (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 108)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                302  0x0000012e (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         298  0x0000012a (mem) word (global)  (usage 27)
CurrentForm                          288  0x00000120 (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (usage 3)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (usage 18)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       12510  0x000030de (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 33)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (usage 51)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                        9871  0x0000268fFormBGcolors                        9871  0x0000268f (mem) word[43] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                          93  0x0000005dFormEndIndex                          93  0x0000005d (mem) word[43] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[43] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[54] (global)  (usage 246)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             218  0x000000da (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS    2803  0x00000af3 (const ??? 0)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm0                                 0  0x00000000 (const ??? 0)  (usage 3)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                              112  0x00000070 (const ??? 0)  (usage 3)
iForm11                               99  0x00000063 (const ??? 0)  (usage 3)
iForm12                               49  0x00000031 (const ??? 0)  (usage 3)
iForm14                               56  0x00000038 (const ??? 0)  (usage 3)
iForm16                              178  0x000000b2 (const ??? 0)  (usage 3)
iForm17                              182  0x000000b6 (const ??? 0)  (usage 3)
iForm18                              185  0x000000b9 (const ??? 0)  (usage 3)
iForm19                               68  0x00000044 (const ??? 0)  (usage 3)
iForm2                                 4  0x00000004 (const ??? 0)  (usage 3)
iForm20                               72  0x00000048 (const ??? 0)  (usage 3)
iForm21                               78  0x0000004e (const ??? 0)  (usage 3)
iForm23                               86  0x00000056 (const ??? 0)  (usage 3)
iForm24                               92  0x0000005c (const ??? 0)  (usage 3)
iForm25                              188  0x000000bc (const ??? 0)  (usage 3)
iForm26                               95  0x0000005f (const ??? 0)  (usage 3)
iForm27                              100  0x00000064 (const ??? 0)  (usage 3)
iForm28                              122  0x0000007a (const ??? 0)  (usage 3)
iForm29                              127  0x0000007f (const ??? 0)  (usage 3)
iForm30                              136  0x00000088 (const ??? 0)  (usage 3)
iForm31                              140  0x0000008c (const ??? 0)  (usage 3)
iForm32                              144  0x00000090 (const ??? 0)  (usage 3)
iForm33                              148  0x00000094 (const ??? 0)  (usage 3)
iForm34                              160  0x000000a0 (const ??? 0)  (usage 3)
iForm35                              167  0x000000a7 (const ??? 0)  (usage 3)
iForm38                              192  0x000000c0 (const ??? 0)  (usage 3)
iForm4                                10  0x0000000a (const ??? 0)  (usage 3)
iForm40                              203  0x000000cb (const ??? 0)  (usage 3)
iForm41                              228  0x000000e4 (const ??? 0)  (usage 3)
iForm5                                16  0x00000010 (const ??? 0)  (usage 3)
iForm6                                19  0x00000013 (const ??? 0)  (usage 3)
iForm7                               174  0x000000ae (const ??? 0)  (usage 3)
iForm9                                45  0x0000002d (const ??? 0)  (usage 3)
iiLeddigits0                          34  0x00000022 (const ??? 0)  (not used)
iiLeddigits1                          36  0x00000024 (const ??? 0)  (not used)
iiLeddigits2                          38  0x00000026 (const ??? 0)  (not used)
iImage0                              179  0x000000b3 (const ??? 0)  (usage 3)
iLeddigits0                           33  0x00000021 (const ??? 0)  (usage 3)
iLeddigits1                           35  0x00000023 (const ??? 0)  (usage 3)
iLeddigits2                           37  0x00000025 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        179  0x000000b3InputControls                        179  0x000000b3 (mem) word[230] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
InputCS                              542  0x0000021e (mem) word (global)  (usage 21)
InputData                            639  0x0000027fInputData                            639  0x0000027f (mem) word[3586] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 30)
InputType                            294  0x00000126 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                          93  0x0000005d (const ??? 0)  (usage 3)
iStatictext1                          39  0x00000027 (const ??? 0)  (usage 3)
iStatictext10                         60  0x0000003c (const ??? 0)  (usage 3)
iStatictext11                         76  0x0000004c (const ??? 0)  (usage 3)
iStatictext12                         77  0x0000004d (const ??? 0)  (usage 3)
iStatictext13                         90  0x0000005a (const ??? 0)  (usage 3)
iStatictext14                         91  0x0000005b (const ??? 0)  (usage 3)
iStatictext15                        101  0x00000065 (const ??? 0)  (usage 3)
iStatictext16                         23  0x00000017 (const ??? 0)  (usage 3)
iStatictext17                         24  0x00000018 (const ??? 0)  (usage 3)
iStatictext2                          40  0x00000028 (const ??? 0)  (usage 3)
iStatictext3                         149  0x00000095 (const ??? 0)  (usage 3)
iStatictext4                          41  0x00000029 (const ??? 0)  (usage 3)
iStatictext5                         161  0x000000a1 (const ??? 0)  (usage 3)
iStatictext6                         165  0x000000a5 (const ??? 0)  (usage 3)
iStatictext7                         168  0x000000a8 (const ??? 0)  (usage 3)
iStatictext8                         169  0x000000a9 (const ??? 0)  (usage 3)
iStatictext9                          61  0x0000003d (const ??? 0)  (usage 3)
iStrings0                           7811  0x00001e83iStrings0                           7811  0x00001e83 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings1                           7837  0x00001e9diStrings1                           7837  0x00001e9d (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings10                          8071  0x00001f87iStrings10                          8071  0x00001f87 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings11                          8097  0x00001fa1iStrings11                          8097  0x00001fa1 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings12                          8123  0x00001fbbiStrings12                          8123  0x00001fbb (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings13                          8149  0x00001fd5iStrings13                          8149  0x00001fd5 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings14                          8175  0x00001fefiStrings14                          8175  0x00001fef (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings15                          8201  0x00002009iStrings15                          8201  0x00002009 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings16                          8227  0x00002023iStrings16                          8227  0x00002023 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings17                          8253  0x0000203diStrings17                          8253  0x0000203d (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings18                          8279  0x00002057iStrings18                          8279  0x00002057 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings19                          8305  0x00002071iStrings19                          8305  0x00002071 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings2                           7863  0x00001eb7iStrings2                           7863  0x00001eb7 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings20                          8331  0x0000208biStrings20                          8331  0x0000208b (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings21                          8357  0x000020a5iStrings21                          8357  0x000020a5 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings22                          8383  0x000020bfiStrings22                          8383  0x000020bf (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings23                          8409  0x000020d9iStrings23                          8409  0x000020d9 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings24                          8435  0x000020f3iStrings24                          8435  0x000020f3 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings25                          8461  0x0000210diStrings25                          8461  0x0000210d (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings26                          8487  0x00002127iStrings26                          8487  0x00002127 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings27                          8513  0x00002141iStrings27                          8513  0x00002141 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings28                          8539  0x0000215biStrings28                          8539  0x0000215b (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings29                          8565  0x00002175iStrings29                          8565  0x00002175 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings3                           7889  0x00001ed1iStrings3                           7889  0x00001ed1 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings30                          8591  0x0000218fiStrings30                          8591  0x0000218f (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings31                          8617  0x000021a9iStrings31                          8617  0x000021a9 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings32                          8643  0x000021c3iStrings32                          8643  0x000021c3 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings33                          8669  0x000021ddiStrings33                          8669  0x000021dd (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings34                          8695  0x000021f7iStrings34                          8695  0x000021f7 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings35                          8721  0x00002211iStrings35                          8721  0x00002211 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings36                          8747  0x0000222biStrings36                          8747  0x0000222b (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings37                          8773  0x00002245iStrings37                          8773  0x00002245 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings38                          8799  0x0000225fiStrings38                          8799  0x0000225f (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings39                          8825  0x00002279iStrings39                          8825  0x00002279 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings4                           7915  0x00001eebiStrings4                           7915  0x00001eeb (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings40                          8851  0x00002293iStrings40                          8851  0x00002293 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings41                          8877  0x000022adiStrings41                          8877  0x000022ad (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings42                          8903  0x000022c7iStrings42                          8903  0x000022c7 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings43                          8929  0x000022e1iStrings43                          8929  0x000022e1 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings44                          8955  0x000022fbiStrings44                          8955  0x000022fb (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings45                          8981  0x00002315iStrings45                          8981  0x00002315 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings46                          9007  0x0000232fiStrings46                          9007  0x0000232f (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings47                          9033  0x00002349iStrings47                          9033  0x00002349 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings48                          9059  0x00002363iStrings48                          9059  0x00002363 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings49                          9085  0x0000237diStrings49                          9085  0x0000237d (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings5                           7941  0x00001f05iStrings5                           7941  0x00001f05 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings50                          9111  0x00002397iStrings50                          9111  0x00002397 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings51                          9137  0x000023b1iStrings51                          9137  0x000023b1 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings52                          9163  0x000023cbiStrings52                          9163  0x000023cb (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings53                          9189  0x000023e5iStrings53                          9189  0x000023e5 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings6                           7967  0x00001f1fiStrings6                           7967  0x00001f1f (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings7                           7993  0x00001f39iStrings7                           7993  0x00001f39 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings8                           8019  0x00001f53iStrings8                           8019  0x00001f53 (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings9                           8045  0x00001f6diStrings9                           8045  0x00001f6d (mem) word[13] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                         15  0x0000000f (const ??? 0)  (usage 3)
iUserbutton100                       110  0x0000006e (const ??? 0)  (usage 3)
iUserbutton101                       111  0x0000006f (const ??? 0)  (usage 3)
iUserbutton102                       150  0x00000096 (const ??? 0)  (usage 3)
iUserbutton103                       151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton104                       152  0x00000098 (const ??? 0)  (usage 3)
iUserbutton105                       153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton106                       154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton107                       155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton108                       156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton109                       157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton11                        123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton110                       158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton111                       159  0x0000009f (const ??? 0)  (usage 3)
iUserbutton112                       162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton113                       163  0x000000a3 (const ??? 0)  (usage 3)
iUserbutton114                       164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton115                       170  0x000000aa (const ??? 0)  (usage 3)
iUserbutton116                       171  0x000000ab (const ??? 0)  (usage 3)
iUserbutton117                       172  0x000000ac (const ??? 0)  (usage 3)
iUserbutton118                        89  0x00000059 (const ??? 0)  (usage 3)
iUserbutton119                       205  0x000000cd (const ??? 0)  (usage 3)
iUserbutton12                         17  0x00000011 (const ??? 0)  (usage 3)
iUserbutton120                       196  0x000000c4 (const ??? 0)  (usage 3)
iUserbutton121                       197  0x000000c5 (const ??? 0)  (usage 3)
iUserbutton122                       198  0x000000c6 (const ??? 0)  (usage 3)
iUserbutton123                       199  0x000000c7 (const ??? 0)  (usage 3)
iUserbutton124                       200  0x000000c8 (const ??? 0)  (usage 3)
iUserbutton125                       201  0x000000c9 (const ??? 0)  (usage 3)
iUserbutton126                       202  0x000000ca (const ??? 0)  (usage 3)
iUserbutton127                       206  0x000000ce (const ??? 0)  (usage 3)
iUserbutton128                       207  0x000000cf (const ??? 0)  (usage 3)
iUserbutton129                       208  0x000000d0 (const ??? 0)  (usage 3)
iUserbutton13                         18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton130                       209  0x000000d1 (const ??? 0)  (usage 3)
iUserbutton131                       210  0x000000d2 (const ??? 0)  (usage 3)
iUserbutton132                       211  0x000000d3 (const ??? 0)  (usage 3)
iUserbutton133                       212  0x000000d4 (const ??? 0)  (usage 3)
iUserbutton134                       204  0x000000cc (const ??? 0)  (usage 3)
iUserbutton135                       213  0x000000d5 (const ??? 0)  (usage 3)
iUserbutton136                       214  0x000000d6 (const ??? 0)  (usage 3)
iUserbutton137                       216  0x000000d8 (const ??? 0)  (usage 3)
iUserbutton138                       217  0x000000d9 (const ??? 0)  (usage 3)
iUserbutton139                       218  0x000000da (const ??? 0)  (usage 3)
iUserbutton14                          7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton140                       219  0x000000db (const ??? 0)  (usage 3)
iUserbutton141                       220  0x000000dc (const ??? 0)  (usage 3)
iUserbutton142                       221  0x000000dd (const ??? 0)  (usage 3)
iUserbutton143                       222  0x000000de (const ??? 0)  (usage 3)
iUserbutton144                       223  0x000000df (const ??? 0)  (usage 3)
iUserbutton145                       224  0x000000e0 (const ??? 0)  (usage 3)
iUserbutton146                       225  0x000000e1 (const ??? 0)  (usage 3)
iUserbutton147                       226  0x000000e2 (const ??? 0)  (usage 3)
iUserbutton149                       215  0x000000d7 (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton150                       227  0x000000e3 (const ??? 0)  (usage 3)
iUserbutton16                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton17                         57  0x00000039 (const ??? 0)  (usage 3)
iUserbutton18                         46  0x0000002e (const ??? 0)  (usage 3)
iUserbutton19                         47  0x0000002f (const ??? 0)  (usage 3)
iUserbutton2                          21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton20                         98  0x00000062 (const ??? 0)  (usage 3)
iUserbutton21                        102  0x00000066 (const ??? 0)  (usage 3)
iUserbutton22                        103  0x00000067 (const ??? 0)  (usage 3)
iUserbutton23                        113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton24                        114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton25                        115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton26                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton27                         51  0x00000033 (const ??? 0)  (usage 3)
iUserbutton28                         52  0x00000034 (const ??? 0)  (usage 3)
iUserbutton29                         53  0x00000035 (const ??? 0)  (usage 3)
iUserbutton3                          32  0x00000020 (const ??? 0)  (usage 3)
iUserbutton30                         54  0x00000036 (const ??? 0)  (usage 3)
iUserbutton31                         55  0x00000037 (const ??? 0)  (usage 3)
iUserbutton32                         58  0x0000003a (const ??? 0)  (usage 3)
iUserbutton33                         59  0x0000003b (const ??? 0)  (usage 3)
iUserbutton34                        176  0x000000b0 (const ??? 0)  (usage 3)
iUserbutton35                         62  0x0000003e (const ??? 0)  (usage 3)
iUserbutton36                         63  0x0000003f (const ??? 0)  (usage 3)
iUserbutton37                         64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton38                         67  0x00000043 (const ??? 0)  (usage 3)
iUserbutton39                         65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton4                           5  0x00000005 (const ??? 0)  (usage 3)
iUserbutton40                         66  0x00000042 (const ??? 0)  (usage 3)
iUserbutton41                        180  0x000000b4 (const ??? 0)  (usage 3)
iUserbutton42                        181  0x000000b5 (const ??? 0)  (usage 3)
iUserbutton43                        183  0x000000b7 (const ??? 0)  (usage 3)
iUserbutton44                        184  0x000000b8 (const ??? 0)  (usage 3)
iUserbutton45                        186  0x000000ba (const ??? 0)  (usage 3)
iUserbutton46                        187  0x000000bb (const ??? 0)  (usage 3)
iUserbutton47                        189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton48                        190  0x000000be (const ??? 0)  (usage 3)
iUserbutton49                        177  0x000000b1 (const ??? 0)  (usage 3)
iUserbutton5                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton50                         22  0x00000016 (const ??? 0)  (usage 3)
iUserbutton51                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton52                         70  0x00000046 (const ??? 0)  (usage 3)
iUserbutton53                         79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton54                         71  0x00000047 (const ??? 0)  (usage 3)
iUserbutton55                         80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton56                         81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton57                         82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton58                         83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton59                         84  0x00000054 (const ??? 0)  (usage 3)
iUserbutton6                          11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton60                         85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        191  0x000000bf (const ??? 0)  (usage 3)
iUserbutton63                         42  0x0000002a (const ??? 0)  (usage 3)
iUserbutton64                        193  0x000000c1 (const ??? 0)  (usage 3)
iUserbutton65                        194  0x000000c2 (const ??? 0)  (usage 3)
iUserbutton66                         87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton67                        229  0x000000e5 (const ??? 0)  (usage 3)
iUserbutton68                         88  0x00000058 (const ??? 0)  (usage 3)
iUserbutton69                         94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton7                          12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton70                        195  0x000000c3 (const ??? 0)  (usage 3)
iUserbutton71                         96  0x00000060 (const ??? 0)  (usage 3)
iUserbutton72                        105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton73                        116  0x00000074 (const ??? 0)  (usage 3)
iUserbutton74                         97  0x00000061 (const ??? 0)  (usage 3)
iUserbutton75                         73  0x00000049 (const ??? 0)  (usage 3)
iUserbutton76                         74  0x0000004a (const ??? 0)  (usage 3)
iUserbutton77                         75  0x0000004b (const ??? 0)  (usage 3)
iUserbutton78                        117  0x00000075 (const ??? 0)  (usage 3)
iUserbutton79                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton8                          13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton80                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton81                        120  0x00000078 (const ??? 0)  (usage 3)
iUserbutton82                        121  0x00000079 (const ??? 0)  (usage 3)
iUserbutton83                        124  0x0000007c (const ??? 0)  (usage 3)
iUserbutton84                        128  0x00000080 (const ??? 0)  (usage 3)
iUserbutton85                        129  0x00000081 (const ??? 0)  (usage 3)
iUserbutton86                        130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton87                        131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton88                        132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton89                        133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton9                          14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton90                        134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton91                        135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton92                        126  0x0000007e (const ??? 0)  (usage 3)
iUserbutton93                        138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton94                        141  0x0000008d (const ??? 0)  (usage 3)
iUserbutton95                        146  0x00000092 (const ??? 0)  (usage 3)
iUserbutton96                        106  0x0000006a (const ??? 0)  (usage 3)
iUserbutton97                        107  0x0000006b (const ??? 0)  (usage 3)
iUserbutton98                        108  0x0000006c (const ??? 0)  (usage 3)
iUserbutton99                        109  0x0000006d (const ??? 0)  (usage 3)
iUserimages0                         125  0x0000007d (const ??? 0)  (usage 3)
iUserimages1                          69  0x00000045 (const ??? 0)  (usage 3)
iUserimages11                        230  0x000000e6 (const ??? 0)  (usage 3)
iUserimages12                        173  0x000000ad (const ??? 0)  (usage 3)
iUserimages13                        166  0x000000a6 (const ??? 0)  (usage 3)
iUserimages3                         137  0x00000089 (const ??? 0)  (usage 3)
iUserimages4                         142  0x0000008e (const ??? 0)  (usage 3)
iUserimages5                         145  0x00000091 (const ??? 0)  (usage 3)
iUserimages6                         175  0x000000af (const ??? 0)  (usage 3)
iUserimages7                         139  0x0000008b (const ??? 0)  (usage 3)
iUserimages8                         143  0x0000008f (const ??? 0)  (usage 3)
iUserimages9                         147  0x00000093 (const ??? 0)  (usage 3)
iVideo0                                9  0x00000009 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                           25  0x00000019 (const ??? 0)  (usage 3)
iWinbutton1                           26  0x0000001a (const ??? 0)  (usage 3)
iWinbutton2                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton3                           28  0x0000001c (const ??? 0)  (usage 3)
iWinbutton4                           29  0x0000001d (const ??? 0)  (usage 3)
iWinbutton5                           43  0x0000002b (const ??? 0)  (usage 3)
iWinbutton6                           44  0x0000002c (const ??? 0)  (usage 3)
iWinbutton7                           30  0x0000001e (const ??? 0)  (usage 3)
iWinbutton8                           31  0x0000001f (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 9957  0x000026e5kKeyboardKeystrokes                 9957  0x000026e5 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   13488  0x000034b0 (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                               10471  0x000028e7 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               14610  0x00003912 (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              326  0x00000146 (const dword)  (usage 3)
nObjects                             231  0x000000e7 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              54  0x00000036 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                          9555  0x00002553o4Dbuttons                          9555  0x00002553 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAngularmeters                      9247  0x0000241foAngularmeters                      9247  0x0000241f (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAniButtons                         9557  0x00002555oAniButtons                         9557  0x00002555 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       9559  0x00002557oColorPickers                       9559  0x00002557 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCoolgauges                         9249  0x00002421oCoolgauges                         9249  0x00002421 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCustomdigitss                      9251  0x00002423oCustomdigitss                      9251  0x00002423 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oDipSwitchs                         9215  0x000023ffoDipSwitchs                         9215  0x000023ff (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              9253  0x00002425oForms                              9253  0x00002425 (mem) word[44] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 15)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                             9341  0x0000247doGauges                             9341  0x0000247d (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGSliders                           9223  0x00002407oGSliders                           9223  0x00002407 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oImages                             9343  0x0000247foImages                             9343  0x0000247f (mem) word[2] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKeyboards                          9347  0x00002483oKeyboards                          9347  0x00002483 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKnobs                              9217  0x00002401oKnobs                              9217  0x00002401 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLedDigitsn                         9961  0x000026e9oLedDigitsn                         9961  0x000026e9 (mem) word[15] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
oLeddigitss                         9351  0x00002487oLeddigitss                         9351  0x00002487 (mem) word[4] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
oLeds                               9349  0x00002485oLeds                               9349  0x00002485 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             9359  0x0000248foMeters                             9359  0x0000248f (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             220  0x000000dc (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                          9553  0x00002551oPinInputs                          9553  0x00002551 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oPinOutputs                         9869  0x0000268doPinOutputs                         9869  0x0000268d (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      9219  0x00002403oRockerSwitchs                      9219  0x00002403 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oRotarySwitchs                      9221  0x00002405oRotarySwitchs                      9221  0x00002405 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oScopes                             9519  0x0000252foScopes                             9519  0x0000252f (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
oSoundss                            9867  0x0000268boSoundss                            9867  0x0000268b (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oSpectrums                          9517  0x0000252doSpectrums                          9517  0x0000252d (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStaticTexts                        9479  0x00002507oStaticTexts                        9479  0x00002507 (mem) word[19] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStringss                           9361  0x00002491oStringss                           9361  0x00002491 (mem) word[55] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 84)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 423)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              9521  0x00002531oTanks                              9521  0x00002531 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oThermometers                       9471  0x000024ffoThermometers                       9471  0x000024ff (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTimers                             9865  0x00002689oTimers                             9865  0x00002689 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTrackbars                          9225  0x00002409oTrackbars                          9225  0x00002409 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserButtons                        9561  0x00002559oUserButtons                        9561  0x00002559 (mem) word[152] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
oUserImagess                        9523  0x00002533oUserImagess                        9523  0x00002533 (mem) word[15] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserleds                           9473  0x00002501oUserleds                           9473  0x00002501 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             544  0x00000220 (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                             9475  0x00002503oVideos                             9475  0x00002503 (mem) word[2] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                         9227  0x0000240boWinButtons                         9227  0x0000240b (mem) word[10] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          300  0x0000012c (mem) word (global)  (usage 18)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       14645  0x00003935 (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         14357  0x00003815 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                   9959  0x000026e7rKeyboardRoutines                   9959  0x000026e7 (mem) word[1] (member of I:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         14543  0x000038cf (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           14626  0x00003922 (User func) args[1] r=0  (usage 15)
seroutOcs                          14593  0x00003901 (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           7  0x00000007 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      3072  0x00000c00 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                         15  0x0000000f (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         33  0x00000021 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         15  0x0000000f (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                          3  0x00000003 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                    25088  0x00006200 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                         23  0x00000017 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                         24  0x00000018 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     6656  0x00001a00 (const dword)  (usage 3)
Strings17Count                         1  0x00000001 (const dword)  (not used)
Strings17Size                         65  0x00000041 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                    20480  0x00005000 (const dword)  (usage 3)
Strings18Count                         1  0x00000001 (const dword)  (not used)
Strings18Size                         42  0x0000002a (const dword)  (usage 3)
Strings18StartH                        0  0x00000000 (const dword)  (usage 3)
Strings18StartL                    20992  0x00005200 (const dword)  (usage 3)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                         45  0x0000002d (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                    21504  0x00005400 (const dword)  (usage 3)
Strings1Count                          1  0x00000001 (const dword)  (not used)
Strings1Size                          20  0x00000014 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                         0  0x00000000 (const dword)  (usage 3)
Strings20Count                         1  0x00000001 (const dword)  (not used)
Strings20Size                         35  0x00000023 (const dword)  (usage 3)
Strings20StartH                        0  0x00000000 (const dword)  (usage 3)
Strings20StartL                     1024  0x00000400 (const dword)  (usage 3)
Strings21Count                         1  0x00000001 (const dword)  (not used)
Strings21Size                         35  0x00000023 (const dword)  (usage 3)
Strings21StartH                        0  0x00000000 (const dword)  (usage 3)
Strings21StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings22Count                         1  0x00000001 (const dword)  (not used)
Strings22Size                         20  0x00000014 (const dword)  (usage 3)
Strings22StartH                        0  0x00000000 (const dword)  (usage 3)
Strings22StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings23Count                         1  0x00000001 (const dword)  (not used)
Strings23Size                         17  0x00000011 (const dword)  (usage 3)
Strings23StartH                        0  0x00000000 (const dword)  (usage 3)
Strings23StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings24Count                         1  0x00000001 (const dword)  (not used)
Strings24Size                         26  0x0000001a (const dword)  (usage 3)
Strings24StartH                        0  0x00000000 (const dword)  (usage 3)
Strings24StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings25Count                         1  0x00000001 (const dword)  (not used)
Strings25Size                         10  0x0000000a (const dword)  (usage 3)
Strings25StartH                        0  0x00000000 (const dword)  (usage 3)
Strings25StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings26Count                         1  0x00000001 (const dword)  (not used)
Strings26Size                         10  0x0000000a (const dword)  (usage 3)
Strings26StartH                        0  0x00000000 (const dword)  (usage 3)
Strings26StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings27Count                         1  0x00000001 (const dword)  (not used)
Strings27Size                         11  0x0000000b (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings28Count                         1  0x00000001 (const dword)  (not used)
Strings28Size                         40  0x00000028 (const dword)  (usage 3)
Strings28StartH                        0  0x00000000 (const dword)  (usage 3)
Strings28StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                         65  0x00000041 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    22016  0x00005600 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      2560  0x00000a00 (const dword)  (usage 3)
Strings30Count                         1  0x00000001 (const dword)  (not used)
Strings30Size                         45  0x0000002d (const dword)  (usage 3)
Strings30StartH                        0  0x00000000 (const dword)  (usage 3)
Strings30StartL                    22528  0x00005800 (const dword)  (usage 3)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          7  0x00000007 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    23040  0x00005a00 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                         19  0x00000013 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    23552  0x00005c00 (const dword)  (usage 3)
Strings33Count                         1  0x00000001 (const dword)  (not used)
Strings33Size                         33  0x00000021 (const dword)  (usage 3)
Strings33StartH                        0  0x00000000 (const dword)  (usage 3)
Strings33StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings34Count                         0  0x00000000 (const dword)  (not used)
Strings34Size                          1  0x00000001 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings35Count                         1  0x00000001 (const dword)  (not used)
Strings35Size                         36  0x00000024 (const dword)  (usage 3)
Strings35StartH                        0  0x00000000 (const dword)  (usage 3)
Strings35StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings36Count                         0  0x00000000 (const dword)  (not used)
Strings36Size                          1  0x00000001 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings37Count                         0  0x00000000 (const dword)  (not used)
Strings37Size                          1  0x00000001 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings38Count                         0  0x00000000 (const dword)  (not used)
Strings38Size                          1  0x00000001 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                    15360  0x00003c00 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings3Count                          1  0x00000001 (const dword)  (not used)
Strings3Size                          18  0x00000012 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                       512  0x00000200 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                          7  0x00000007 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings41Count                         1  0x00000001 (const dword)  (not used)
Strings41Size                          7  0x00000007 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings42Count                         1  0x00000001 (const dword)  (not used)
Strings42Size                          7  0x00000007 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                    17408  0x00004400 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    17920  0x00004600 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    18432  0x00004800 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    18944  0x00004a00 (const dword)  (usage 3)
Strings46Count                         0  0x00000000 (const dword)  (not used)
Strings46Size                          1  0x00000001 (const dword)  (usage 3)
Strings46StartH                        0  0x00000000 (const dword)  (usage 3)
Strings46StartL                    25600  0x00006400 (const dword)  (usage 3)
Strings47Count                         1  0x00000001 (const dword)  (not used)
Strings47Size                          3  0x00000003 (const dword)  (usage 3)
Strings47StartH                        0  0x00000000 (const dword)  (usage 3)
Strings47StartL                    26112  0x00006600 (const dword)  (usage 3)
Strings48Count                         0  0x00000000 (const dword)  (not used)
Strings48Size                          1  0x00000001 (const dword)  (usage 3)
Strings48StartH                        0  0x00000000 (const dword)  (usage 3)
Strings48StartL                    26624  0x00006800 (const dword)  (usage 3)
Strings49Count                         1  0x00000001 (const dword)  (not used)
Strings49Size                         17  0x00000011 (const dword)  (usage 3)
Strings49StartH                        0  0x00000000 (const dword)  (usage 3)
Strings49StartL                    24064  0x00005e00 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings50Count                         1  0x00000001 (const dword)  (not used)
Strings50Size                         20  0x00000014 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    24576  0x00006000 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    19456  0x00004c00 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    19968  0x00004e00 (const dword)  (usage 3)
Strings53Count                         1  0x00000001 (const dword)  (not used)
Strings53Size                        142  0x0000008e (const dword)  (usage 3)
Strings53StartH                        0  0x00000000 (const dword)  (usage 3)
Strings53StartL                    27136  0x00006a00 (const dword)  (usage 3)
Strings5Count                          1  0x00000001 (const dword)  (not used)
Strings5Size                          37  0x00000025 (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                     11776  0x00002e00 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          31  0x0000001f (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      2048  0x00000800 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                     14336  0x00003800 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                     14848  0x00003a00 (const dword)  (usage 3)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      3584  0x00000e00 (const dword)  (usage 3)
stringsCV                            110  0x0000006e (mem) word[54] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           296  0x00000128 (mem) word (global)  (usage 24)
TouchXpos                            290  0x00000122 (mem) word (global)  (usage 12)
TouchYpos                            292  0x00000124 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     13802  0x000035ea (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 465)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 45)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      12511  0x000030df (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 159)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        14002  0x000036b2 (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
