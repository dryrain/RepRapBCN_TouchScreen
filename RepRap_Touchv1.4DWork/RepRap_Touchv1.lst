file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318        
003998  004319  //------------------------------------------------------------------------------
003999  004320  // FILEIO Error Code Constants
004000  004321  //------------------------------------------------------------------------------
004001  004322  #CONST
004002  004348  #END
004003  004349        
004004  004350  //------------------------------------------------------------------------------
004005  004351  // DISK struct offsets
004006  004352  //------------------------------------------------------------------------------
004007  004353  #CONST
004008  004370  #END
004009  004371        
004010  004372  //------------------------------------------------------------------------------
004011  004373  // FILE struct offsets
004012  004374  //------------------------------------------------------------------------------
004013  004375  #CONST
004014  004394  #END
004015  004395        
004016  004396        
004017  004397  //------------------------------------------------------------------//
004018  004398  //        Sound Class Services
004019  004399  //------------------------------------------------------------------//
004020  004400        
004021  004401  func snd_Volume("var"), 0;
004022  004402  // Syntax: snd_Volume("var");
004023  004403  // Usage : snd_Volume(30);
004024  004404  // Notes : set sound playback volume.  Var must
004025  004405  //       : be in the range from 8 (min volume)
004026  004406  //       : to 127 (max volume). If var is less
004027  004407  //       : than 8 volume is set to 8, and if
004028  004408  //       : var > 127 it is set to 127.
004029  004409        
004030  004410  func snd_Pitch("pitch"), 1;
004031  004411  // func snd_Pitch("freq"), 1;
004032  004412  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004033  004413  // Notes : sets the samples playback rate to a different frequency
004034  004414  //       : The minimum value is 4khz
004035  004415  //       : Setting the pitch to zero restores the original sample rate
004036  004416  //       : Return value is the samples original sample rate.
004037  004417        
004038  004418  func snd_BufSize("var"), 0;
004039  004419  // Syntax: snd_BufSize("var");
004040  004420  // Usage : snd_BufSize(2);
004041  004421  // Notes : specify the a memory chunk size for the wavefile buffer.
004042  004422  //       : default size 1024 bytes.
004043  004423  //       : 0 = 1024 bytes (default)
004044  004424  //       : 1 = 2048 bytes
004045  004425  //       : 2 = 4096 bytes
004046  004426  //       : 3 = 8192 bytes
004047  004427        
004048  004428  func snd_Stop(), 0;
004049  004429  // Syntax: snd_Stop();
004050  004430  // Usage : snd_Stop();
004051  004431  // Notes : stop any sound that is playing, releasing
004052  004432  //       : buffers and closes any open wav file.
004053  004433        
004054  004434  func snd_Pause(), 0;
004055  004435  // Syntax: snd_Pause();
004056  004436  // Usage : snd_Pause();
004057  004437  // Notes : pauses any sound that is playing, does nothing
004058  004438  //       : until sound is resumed with snd_Continue().
004059  004439  //       : The sample cam be terminated with snd_Stop.
004060  004440  //       : buffers and closes any open wav file.
004061  004441        
004062  004442  func snd_Continue(), 0;
004063  004443  // Syntax: snd_Continue();
004064  004444  // Usage : snd_Continue();
004065  004445  // Notes : resume any sound that is paused by snd_Pause.
004066  004446        
004067  004447  func snd_Playing(), 1;
004068  004448  // Syntax: snd_Playing();
004069  004449  // Usage : r := snd_Playing();
004070  004450  // Notes : returns 0 if sound has finished playing,
004071  004451  //       : else return number of 512 byte blocks to go.
004072  004452        
004073  004453  func snd_Freq("Freq", "Duration"), 1;
004074  004454  // Syntax: snd_Freq("Freq", "Duration");
004075  004455  // Usage : r := snd_Freq(1000, 2000);
004076  004456  // Notes : Returns 0 if note cannot be played because a wav file is playing
004077  004457  //       : else return True.
004078  004458  //       : Minimum Freq is 20
004079  004459  //       : This will produce a pure Square wave and is designed for driving
004080  004460  //       : Piezo transducers which require this sort of drive. It can also be
004081  004461  //       : used to drive the amp on displays with audio.
004082  004462        
004083  004463        
004084  004464  func __reserved60(), 0; // do not remove
004085  004465  func __reserved61(), 0; // do not remove
004086  004466  func __reserved62(), 0; // do not remove
004087  004467        
004088  004468  //=========================================================================================================
004089  004469  // String functions
004090  004470  //=========================================================================================================
004091  004471        
004092  004472  func str_Ptr("&var"), 1;
004093  004473  // Syntax: str_Ptr(&var);
004094  004474  // Usage : p := str_Ptr(&var);
004095  004475  // Notes : return a byte pointer to a word region
004096  004476        
004097  004477  func str_GetD("&ptr", "&var"), 1;
004098  004478  // Syntax: str_GetD(&ptr, &var);
004099  004479  // Usage : ok := str_GetD(&ptr, &var);
004100  004480  // Notes : convert number in a string to DWORD ( myvar[2] )
004101  004481  //       : returns true if function succeeds, advancing ptr
004102  004482        
004103  004483  func str_GetW("&ptr", "&var"), 1;
004104  004484  // Syntax: str_GetW(&ptr, &var);
004105  004485  // Usage : ok := str_GetW(&ptr, &var);
004106  004486  // Notes : convert number in a string to WORD ( myvar )
004107  004487  //       : returns true if function succeeds, advancing ptr
004108  004488        
004109  004489  func str_GetHexW("&ptr", "&var"), 1;
004110  004490  // Syntax: str_GetHexW(&ptr, &var);
004111  004491  // Usage : ok := str_GetHexW(&ptr, &var);
004112  004492  // Notes : convert HEX number in a string to WORD ( myvar )
004113  004493  //       : returns true if function succeeds, advancing ptr
004114  004494        
004115  004495  func str_GetC("&ptr", "&var"), 1;
004116  004496  // Syntax: str_GetC(&ptr, &var);
004117  004497  // Usage : ok := str_GetC(&ptr, &var);
004118  004498  // Notes : get a valid ascii char in a string to WORD ( myvar )
004119  004499  //       : returns true if function succeeds, advancing ptr
004120  004500        
004121  004501  func str_GetByte("ptr"), 1;
004122  004502  // Syntax: str_GetByte(ptr);
004123  004503  // Usage : myvar := str_GetByte(ptr);
004124  004504  // Notes : get a byte to myvar
004125  004505  //       : returns value
004126  004506        
004127  004507  func str_GetWord("ptr"), 1;
004128  004508  // Syntax: GetWord(ptr);
004129  004509  // Usage : GetWord(ptr);
004130  004510  // Notes : get a word to myvar
004131  004511  //       : returns value
004132  004512        
004133  004513  func str_PutByte("ptr","val"), 0;
004134  004514  // Syntax: str_PutByte(ptr);
004135  004515  // Usage : myvar := str_PutByte(ptr);
004136  004516  // Notes : put a byte at ptr
004137  004517  //       : returns value
004138  004518        
004139  004519  func str_PutWord("ptr","val"), 0;
004140  004520  // Syntax: str_PutWord("ptr","val");
004141  004521  // Usage : str_PutWord(p,100);
004142  004522  // Notes : put word 100 at current pointer location
004143  004523  //       : returns value
004144  004524        
004145  004525  func str_Match("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Match(&ptr, *str);
004147  004527  // Usage : r := str_Match(&p, "hello");
004148  004528  // Notes : Case sensitive match
004149  004529  //       : returns true if function succeded, andvancing pointer to position past
004150  004530  //       : the matched item. Note that any whitespace characters are skipped
004151  004531  //       : in the source string prior to the test.
004152  004532        
004153  004533  func str_MatchI("&ptr", "*str"), 1;
004154  004534  // Syntax: str_MatchI(&ptr, *str);
004155  004535  // Usage : r := str_MatchI(&p, "hello");
004156  004536  // Notes : Case insensitive match
004157  004537  //       : returns true if function succeded, andvancing pointer to position past
004158  004538  //       : the matched item. Note that any whitespace characters are skipped
004159  004539  //       : in the source string prior to the test.
004160  004540        
004161  004541  func str_Find("&ptr", "*str"), 1;
004162  004542  // Syntax: str_Find(&ptr, *str);
004163  004543  // Usage : n := str_Find(&p, "hello");
004164  004544  // Notes : given the address of a pointer to a source string as the
004165  004545  //       : first argument, and a pointer to a test string as the second
004166  004546  //       : argument, attempt to find the position of the matching string
004167  004547  //       : in the source string. The test is performed with case sensitivity.
004168  004548  //       : return 0 if not found, else returns the address of the first
004169  004549  //       : character of the match. NB:- The source pointer is not altered.
004170  004550        
004171  004551  func str_FindI("&ptr", "*str"), 1;
004172  004552  // Syntax: str_Find(&ptr, *str);
004173  004553  // Usage : n := str_Find(&p, "hello");
004174  004554  // Notes : given the address of a pointer to a source string as the
004175  004555  //       : first argument, and a pointer to a test string as the second
004176  004556  //       : argument, attempt to find the position of the matching string
004177  004557  //       : in the source string. The test is performed with no case
004178  004558  //       : sensitivity, eg upper and lower case chars are accepted.
004179  004559  //       : return 0 if not found, else returns the address of the first
004180  004560  //       : character of the match. NB:- The source pointer is not altered.
004181  004561        
004182  004562  func str_Length("ptr"), 1;
004183  004563  // Syntax: str_Length(ptr);
004184  004564  // Usage : len := str_Ptr(mystring);
004185  004565  // Notes : return the length of a byte aligned string excluding terminator
004186  004566        
004187  004567  func str_Printf("&ptr", "*format"), 1;
004188  004568  // Syntax: str_Printf("&ptr", "*format");
004189  004569  // Usage : r := str_Printf(&p, "hello");
004190  004570  // Notes : refer to documentation
004191  004571  //       :
004192  004572        
004193  004573  func str_Cat("dest","src"), 1;
004194  004574  // Syntax: str_Append("&dest","&src");
004195  004575  // Usage : str_Append(&buf,"Hello");
004196  004576  // Notes : Appends a copy of the source string to the destination string.
004197  004577  //       : The terminating null character in destination is overwritten by
004198  004578  //       : the first character of source, and a new null-character is appended
004199  004579  //       : at the end of the new string formed by the concatenation of both in destination.
004200  004580  //       : returns destination.
004201  004581        
004202  004582  func str_CatN("dest","src","count"), 1;
004203  004583  // Syntax: str_Append("&dest","&src","count");
004204  004584  // Usage : str_Append(&buf,"Monday",3);
004205  004585  // Notes : Appends a copy of the source string to the destination string.
004206  004586  //       : The number of characters copied is limited by "count".
004207  004587  //       : The terminating null character in destination is overwritten by
004208  004588  //       : the first character of source, and a new null-character is appended
004209  004589  //       : at the end of the new string formed by the concatenation of both in destination.
004210  004590  //       : returns destination.
004211  004591        
004212  004592        
004213  004593  func str_ByteMove("src", "dest", "count"), 1;
004214  004594  // Syntax   : str_ByteMove(src, dest, bytecount);
004215  004595  // Input    : STR *source points to byte aligned source.
004216  004596  //          : STR *dest   points to byte aligned destination.
004217  004597  //          : VAR count   number of bytes to transfer.
004218  004598  // Usage    : nextpos := str_ByteMove(s, d, 100);
004219  004599  // Notes    : copy bytes from "src" to "dest", stopping only
004220  004600  //          : when "count" is exhausted.
004221  004601  //          : No terminator is appended, it is purely a
004222  004602  //          : byte copy, and any zeroes encountered will
004223  004603  //          : also be copied.
004224  004604  // Returns  : returns a pointer to the end of the destination
004225  004605  //          : (which is "dest" + "count")
004226  004606        
004227  004607        
004228  004608  func str_Copy("dest", "src"), 1;
004229  004609  // Syntax   : str_Copy(dest, src);
004230  004610  // Input    : STR *dest   points to byte aligned destination.
004231  004611  //          : STR *source points to byte aligned source.
004232  004612  // Usage    : nextplace := str_Copy(d, s);
004233  004613  // Notes    : copy a string from "src" to "dest", stopping only
004234  004614  //          : when the end of source string "src" is encountered
004235  004615  //          : (0x00 terminator).
004236  004616  //          : The terminator is always appended, even if "src" is
004237  004617  //          : an empty string.
004238  004618  // Returns  : returns a pointer to the 0x00 string terminator at
004239  004619  //          : end of "dest" (which is "dest" + str_Length(src); )
004240  004620        
004241  004621        
004242  004622  func str_CopyN("dest", "src", "count"), 1;
004243  004623  // Syntax   : str_CopyN(dest, src, bytecount);
004244  004624  // Input    : STR *dest   points to byte aligned destination.
004245  004625  //          : STR *source points to byte aligned source.
004246  004626  //          : VAR count   max number of chars to copy.
004247  004627  // Usage    : nextplace := str_CopyN(d, s, 100);
004248  004628  // Notes    : copy a string from "src" to "dest", stopping only
004249  004629  //          : when "count" is exhausted, or end of source
004250  004630  //          : string "str" is encountered (0x00 string terminator).
004251  004631  //          : The terminator is always appended, even if
004252  004632  //          : "count" is zero, or "src" is a null string.
004253  004633  // Returns  : returns a pointer to the 0x00 string terminator
004254  004634  //          : (which is "dest" + whatever was copied)
004255  004635        
004256  004636        
004257  004637  func __reserved63(), 0; // do not remove
004258  004638  func __reserved64(), 0; // do not remove
004259  004639  func __reserved65(), 0; // do not remove
004260  004640  func __reserved66(), 0; // do not remove
004261  004641        
004262  004642  //=========================================================================================================
004263  004643  // FLASH memory functions
004264  004644  //=========================================================================================================
004265  004645  func flash_GetByte("bank", "ptr"), 1;
004266  004646  // Syntax   : flash_GetByte(bank, ptr);
004267  004647  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004268  004648  // Notes    : Reads a single byte from any flash location.
004269  004649  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004270  004650  //          : which is the header signature for a valid program.
004271  004651  // Returns  : the byte value from the location
004272  004652        
004273  004653        
004274  004654  func flash_GetWord("bank", "ptr"), 1;
004275  004655  // Syntax   : flash_GetWord(bank, ptr);
004276  004656  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004277  004657  // Notes    : Reads a single word from any flash location.
004278  004658  //          : The pointer is byte aligned.
004279  004659  //          : If the bank is read protected, only the first word can be read
004280  004660  //          : which is the header signature for a valid program (0xAA55).
004281  004661  // Returns  : the byte value from the location
004282  004662        
004283  004663        
004284  004664  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004285  004665  // Syntax   : flash_Copy(bank, ptr);
004286  004666  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004287  004667  // Notes    : Copies bytes from any flash locations to a user buffer.
004288  004668  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004289  004669  //          : If the bank is read protected, 0 bytes will be read
004290  004670  //          : which is the header signature for a valid program (0xAA55).
004291  004671  // Returns  : the count of bytes transferred.
004292  004672        
004293  004673        
004294  004674  func flash_Run("bank"), 1;
004295  004675  // Syntax    : flash_Run(bankx);
004296  004676  // Usage     : res := flash_Run(FLASHBANK_5);
004297  004677  // Notes     : Restarts the processor, running code from the required
004298  004678  //           : flash bank. bank may be a variable, or one of the
004299  004679  //           : pre-defined constants:-
004300  004680  //           :    FLASHBANK_0                 //0x00
004301  004681  //           :    FLASHBANK_1                 //0x01
004302  004682  //           :    FLASHBANK_2                 //0x02
004303  004683  //           :    FLASHBANK_3                 //0x03
004304  004684  //           :    FLASHBANK_4                 //0x04
004305  004685  //           :    FLASHBANK_5                 //0x05
004306  004686  // returns    : This function should net return as it restarts
004307  004687  //        : the processor and jumps to the required bank,
004308  004688  //        : If it does return, -1 indicates incorrect/invalid
004309  004689  //        : bank number, and -2 indicates no valid program
004310  004690  //        : in the selected bank.
004311  004691        
004312  004692  func flash_Bank(), 1;
004313  004693  // Syntax   : flash_Bank();
004314  004694  // Usage    : myvar := flash_Bank();
004315  004695  // Notes    : Identifies which flash bank the code is running from.
004316  004696  // Returns  : The FLASH bank that code is currently running from, 0-5.
004317  004697        
004318  004698        
004319  004699  func flash_EraseBank("bank", "confirmation"), 1;
004320  004700  // Syntax   : flash_EraseBank(bank, confirmation);
004321  004701  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004322  004702  // Notes    : This function should be used with extreme caution.
004323  004703  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004324  004704  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004325  004705  //          : a protected bank will not be erased, and function will return with 0
004326  004706  //          : If the destination bank is the same as the execution bank, the processor will reset
004327  004707  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004328  004708  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004329  004709  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004330  004710  // Returns  : returns true if the function succeeded
004331  004711  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004332  004712        
004333  004713  func flash_LoadFile("bank", "filename"), 1;
004334  004714  // Syntax   : flash_LoadFile(bank, ptr);
004335  004715  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004336  004716  // Notes    : Copies a file from uSD to the required flashbank.
004337  004717  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004338  004718  // Returns  : returns true if the function succeeded.
004339  004719        
004340  004720        
004341  004721  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004342  004722  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004343  004723  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004344  004724  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004345  004725  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004346  004726  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004347  004727  // Returns  : returns true if the function succeeded.
004348  004728        
004349  004729        
004350  004730  func flash_putstr("bank", "ptr"), 1;
004351  004731  // Syntax   : flash_putstr(bank, ptr);
004352  004732  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004353  004733  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004354  004734  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004355  004735  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004356  004736        
004357  004737  func flash_Blit16("bank", "offset", "count"), 1;
004358  004738  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004359  004739  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004360  004740  // Notes    : Blit an image to a GRAM window from FLASH storage.
004361  004741  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004362  004742  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004363  004743        
004364  004744  func flash_Blit8("bank", "offset", "count"), 1;
004365  004745  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004366  004746  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004367  004747  // Notes    : Blit an image to a GRAM window from FLASH storage.
004368  004748  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004369  004749  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004370  004750        
004371  004751  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004372  004752  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004373  004753  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004374  004754  // Notes    : Blit an image to a GRAM window from FLASH storage.
004375  004755  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004376  004756  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004377  004757        
004378  004758  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004379  004759  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004380  004760  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004381  004761  // Notes    : Blit an image to a GRAM window from FLASH storage.
004382  004762  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004383  004763  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004384  004764        
004385  004765  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004386  004766  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004387  004767  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004388  004768  // Notes    : Blit an image to a GRAM window from FLASH storage.
004389  004769  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004390  004770  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004391  004771        
004392  004772  func flash_Exec("bank", "arglistptr"), 1;
004393  004773  // Syntax: res := flash_Exec("bank","arglistptr");
004394  004774  // Usage : res := flash_Exec("bank","arglistptr");
004395  004775  // Notes : returns like a function, current program
004396  004776  //       : calling program is kept active and control returns to it.
004397  004777  //       : If arglistptr is 0, no arguments are passed, else
004398  004778  //       : arglist points to an array, the first element being
004399  004779  //       : the number of elements in the array.
004400  004780  //       : func 'main' in the called bank accepts the arguments.
004401  004781  // WARNING Not currently implemented!
004402  004782        
004403  004783        
004404  004784  func __reserved68(), 0; // do not remove
004405  004785  func __reserved69(), 0; // do not remove
004406  004786  func __reserved70(), 0; // do not remove
004407  004787        
004408  004788  //=========================================================================================================
004409  004789  // I/O and hardware functions
004410  004790  //=========================================================================================================
004411  004791        
004412  004792        
004413  004793        
004414  004794        
004415  004795  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004416  004796  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004417  004797  // Syntax: pin_Pulseout(pin, value);
004418  004798  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004419  004799  // Notes : only available on PA0 to PA9
004420  004800  //       : Invert the state of an output for "value" milliseconds.
004421  004801  //       : pulseout is non blocking, that is, code execution may continue while
004422  004802  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004423  004803  //       : If not already an output, pin is automatically made a push/pull output,
004424  004804  //       : and the last state of its output latch will determine pulse polarity.
004425  004805  //       : It's its open drain state is not altered if the pin was already an output.
004426  004806  //       : If pulseout is called while pulseout is still active, the pulse timer
004427  004807  //       : will simply be updated with the new "value" and the pulse will continue
004428  004808  //       : with the extended value.
004429  004809  //       : returns true if the pin number is legal (usually ignored)
004430  004810        
004431  004811        
004432  004812  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004433  004813  // Syntax: pin_Counter(pin, mode, userfunc);
004434  004814  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004435  004815  // Notes : only available on PA4 to PA9
004436  004816  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004437  004817  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004438  004818  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004439  004819  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004440  004820  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004441  004821  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004442  004822  //       : The pin may be configured as an input or output, the function behaves the same.
004443  004823  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004444  004824  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004445  004825  //       : "mode" has the following effect:-
004446  004826  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004447  004827  //       : mode COUNT_RISE(1) = increment on every rising edge
004448  004828  //       : mode COUNT_FALL(2) = increment on every falling edge
004449  004829  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004450  004830        
004451  004831  //------------------------------------------------------------------//
004452  004832  // pin counter mode constants                                       //
004453  004833  //------------------------------------------------------------------//
004454  004834  #CONST
004455  004839  #END
004456  004840        
004457  004841  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004458  004842  // Syntax: Qencoder1(pinA, pinB, mode);
004459  004843  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004460  004844  // Notes : not available on pins PA14 and PA15
004461  004845  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004462  004846  //       : or written to at any time with peekW and pokeW using the following constants:-
004463  004847  //       : It is necessary to configure the pins first, depending on your requirements, eg
004464  004848  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004465  004849  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004466  004850  //       : Returns true if the pin numbers are legal (usually ignored)
004467  004851  //    QEN1_COUNTER_LO
004468  004852  //    QEN1_COUNTER_HI
004469  004853  //    QEN1_DELTA This is reset to 0 when read
004470  004854        
004471  004855  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004472  004856  // Syntax: Qencoder2(pinA, pinB, mode);
004473  004857  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004474  004858  // Notes : not available on pins PA14 and PA15
004475  004859  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004476  004860  //       : or written to at any time with peekW and pokeW using the following constants:-
004477  004861  //       : It is necessary to configure the pins first, depending on your requirements, eg
004478  004862  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004479  004863  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004480  004864  //       : Returns true if the pin numbers are legal (usually ignored)
004481  004865  //    QEN2_COUNTER_LO
004482  004866  //    QEN2_COUNTER_HI
004483  004867  //    QEN2_DELTA This is reset to 0 when read
004484  004868        
004485  004869        
004486  004870  func Qencoder1Reset(), 0;
004487  004871  // Syntax: Qencoder1Reset();
004488  004872  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004489  004873  // Notes :
004490  004874  //    QEN1_COUNTER_LO is reset to zero
004491  004875  //    QEN1_COUNTER_HI is reset to zero
004492  004876  //    QEN1_DELTA is reset to zero
004493  004877        
004494  004878  func Qencoder2Reset(), 0;
004495  004879  // Syntax: Qencoder2Reset();
004496  004880  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004497  004881  // Notes :
004498  004882  //    QEN2_COUNTER_LO is reset to zero
004499  004883  //    QEN2_COUNTER_HI is reset to zero
004500  004884  //    QEN2_DELTA is reset to zero
004501  004885        
004502  004886        
004503  004887  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004504  004888  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004505  004889  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004506  004890  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004507  004891  //       : Invert the state of an output at a "freq" freuency "count" times.
004508  004892  //       : PulseoutCount is non blocking, that is, code execution may continue while
004509  004893  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004510  004894  //       : If not already an output, pin is automatically made a push/pull output,
004511  004895  //       : and the last state of its output latch will determine pulse polarity.
004512  004896  //       : It's its open drain state is not altered if the pin was already an output.
004513  004897  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004514  004898  //       : will simply have the new "value" added to it.
004515  004899  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004516  004900  //       : returns true if the pin number is legal (usually ignored)
004517  004901        
004518  004902  func __reserved72(), 0; // do not remove
004519  004903        
004520  004904  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004521  004905  // Syntax: pwm_Init(pin, value);
004522  004906  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004523  004907  // Notes : only available on PA4 to PA9
004524  004908  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004525  004909  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004526  004910  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004527  004911  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004528  004912  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004529  004913  //       :                    : Repetition rate ~50hz or 20ms
004530  004914  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004531  004915  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004532  004916  //       : pwm_Init is non blocking and the pwm continues until turn off
004533  004917  //       : Returns true if the pin number is legal (usually ignored)
004534  004918        
004535  004919  //------------------------------------------------------------------------------
004536  004920  // PWM Constants
004537  004921  //------------------------------------------------------------------------------
004538  004922  #CONST
004539  004927  #END
004540  004928        
004541  004929  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004542  004930  // Syntax   : OW_Reset(PA0);
004543  004931  // Usage    : OW_Reset(PA0);
004544  004932  // Notes    : Only available on PA0 to PA13
004545  004933  //          : Resets  ONEWIRE device
004546  004934  //          : Returns the status, 0 = ACK.
004547  004935  //          :
004548  004936        
004549  004937  func OW_Read("pin"), 1;                              // read data from 1wire bus
004550  004938  // Syntax   : OW_Read(PA0);
004551  004939  // Usage    : arg1 := OW_Read(PA0);
004552  004940  // Notes    : Only available on PA0 to PA13
004553  004941  //          : Reads value of the ONEWIRE pin
004554  004942  //          : that was previously selected for ONEWIRE comms.
004555  004943  //          :
004556  004944  //          : pin = 0 : the next byte from the ONEWIRE bus
004557  004945        
004558  004946  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004559  004947  // Syntax   : OW_Read9(PA0);
004560  004948  // Usage    : OW_Read9(PA0);
004561  004949  // Notes    : Only available on PA0 to PA13
004562  004950  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004563  004951  //          : that was previously selected for ONEWIRE comms.
004564  004952  //          :
004565  004953  //          : read the 9 bits from the ONEWIRE bus
004566  004954        
004567  004955  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004568  004956  // Syntax   : OW_Write(PA0, arg);
004569  004957  // Usage    : OW_Write(PA0, arg);
004570  004958  // Notes    : Only available on PA0 to PA13
004571  004959  //          : Sends ONEWIRE data on the appropriate
004572  004960  //          : pin that was previously  selected as ONEWIRE comms.
004573  004961  //          :
004574  004962  //          : write arg to the ONEWIRE bus
004575  004963        
004576  004964  func __reserved77(), 0; // do not remove
004577  004965  func __reserved78(), 0; // do not remove
004578  004966        
004579  004967  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004580  004968  // Syntax: sys_GetDateVar(&year, &month, &day);
004581  004969  // Usage : sys_GetDateVar(&year, &month, &day);
004582  004970  // Notes : Retrieves the date values into variables
004583  004971        
004584  004972  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004585  004973  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004974  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004587  004975  // Notes : Retrieves the time values into variables
004588  004976        
004589  004977  func sys_PmmC(), 0;
004590  004978  // Syntax: sys_PmmC();
004591  004979  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004592  004980  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004593  004981  //       : Can be captured to a buffer using the to( function
004594  004982  //       : Returns nothing.
004595  004983        
004596  004984  func sys_Driver(), 0;
004597  004985  // Syntax: sys_Driver();
004598  004986  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004599  004987  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004600  004988  //       : Can be captured to a buffer using the to( function
004601  004989  //       : Returns nothing.
004602  004990        
004603  004991  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004604  004992  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004605  004993  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004606  004994  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004607  004995  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004608  004996  //       : elements in each buffer. This will need to be greater than "width" for negative
004609  004997  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004610  004998  //       : pass 0 as the address for any unused traces
004611  004999  //       : X position is incremented each point by "xstep" pixels.
004612  005000  //       : Y values are derived from a Y buffer "newy" (signed values).
004613  005001  //       : 2 buffers need to be supplied, "newy" contains new
004614  005002  //       : points to be drawn, "oldy" contains most recent set
004615  005003  //       : of points to be un-drawn. After the waveform is drawn,
004616  005004  //       : "newy" buffer is automatically copied to "oldy" buffer.
004617  005005        
004618  005006        
004619  005007  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004620  005008  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004621  005009  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004622  005010  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004623  005011  //       : and calls "COMPLETEfunction" when done.
004624  005012  //       : "rate" is samples in 100 of samples per second
004625  005013  //       : Any unused IOx pins should have their buffer addresses set to 0
004626  005014  //       : For performance reasons samples are taken in chunks of 32, thus if you
004627  005015  //       : request 33 samples there will be a delay of 31 samples before
004628  005016  //       : "COMPLETEfunction" is called
004629  005017  //       : If Touch is enabled this function should be called no more than once per
004630  005018  //       : millisecond, otherwise touch behaviour could be eratic.
004631  005019        
004632  005020        
004633  005021  func sys_ErrorMessage("msgnum"), 1;
004634  005022        
004635  005023  //==============================//
004636  005024  // NeoPixel specific functions  //
004637  005025  //==============================//
004638  005026        
004639  005027  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004640  005028  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004641  005029  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004642  005030  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004643  005031  //       : data        : Address of data to be sent
004644  005032  //       : size        : number of colour 'sets' to follow
004645  005033  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004646  005034  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004647  005035  //       : Repeat      : Number of times to repeat the colours between first and last
004648  005036  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004649  005037  //       : Returns true if the pin number is legal (usually ignored)
004650  005038  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004651  005039  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004652  005040        
004653  005041  // NeoPixel related constants
004654  005042  #CONST
004655  005046  #END
004656  005047        
004657  005048  func __reserved85(), 0; // do not remove
004658  005049  func __reserved86(), 0; // do not remove
004659  005050        
004660  005051  //==============================================//
004661  005052  // spi flash device specific functions          //
004662  005053  //==============================================//
004663  005054        
004664  005055  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004665  005056  // Syntax   : spiflash_SIG("spi#","enablepin");
004666  005057  // Usage    : var := spiflash_SIG(SPI1, PA0);
004667  005058  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004668  005059  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004669  005060  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004670  005061  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004671  005062  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004672  005063  //          : byte is ignored.
004673  005064        
004674  005065  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004675  005066  // Syntax   : spiflash_ID("spi#","enablepin");
004676  005067  // Usage    : var := spiflash_ID(SPI1, PA0);
004677  005068  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004678  005069  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004679  005070  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004680  005071  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004681  005072  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004682  005073  //          : contains capacity. Refer to the device data sheet for further information.
004683  005074        
004684  005075  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004685  005076  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004686  005077  // Usage    : spiflash_BulkErase(SPI1, PA0);
004687  005078  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004688  005079  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004689  005080  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004690  005081  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004691  005082  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004692  005083  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004693  005084        
004694  005085  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004695  005086  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004696  005087  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004697  005088  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004698  005089  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004699  005090  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004700  005091  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004701  005092  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004702  005093  //          : blockAddress The address of the 64k FLASH block to be erased.
004703  005094  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004704  005095  //          : can take up to 3 milliseconds.
004705  005096        
004706  005097  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004707  005098  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004708  005099  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004709  005100  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004710  005101        
004711  005102  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004712  005103  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004713  005104  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004714  005105  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004715  005106  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004716  005107  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004717  005108  //       : returns number of characters read
004718  005109  //       : if "dest" is zero, data is read direct to GRAM window
004719  005110  //       :
004720  005111        
004721  005112  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004722  005113  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004723  005114  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004724  005115  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004725  005116  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004726  005117  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004727  005118  //       : returns number of bytes written
004728  005119  //       :
004729  005120        
004730  005121  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004731  005122  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004732  005123  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004733  005124  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004734  005125  //       : The image is displayed at x,y (with respect to top left corner).
004735  005126        
004736  005127  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004737  005128  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004738  005129  // Usage : spiflash_PutC('x', SPI1, PA0);
004739  005130  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004740  005131  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004741  005132  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004742  005133        
004743  005134  func spiflash_GetC("spi#", "enablepin"), 1;
004744  005135  // Syntax: spiflash_GetC("spi#", "enablepin");
004745  005136  // Usage : mychar := fgetC(SPI1, PA0);
004746  005137  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004747  005138  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004748  005139  //       : by subsequent reads or writes.
004749  005140  //       : returns next char from file
004750  005141        
004751  005142  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004752  005143  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004753  005144  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004754  005145  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004755  005146  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004756  005147  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004757  005148        
004758  005149  func spiflash_GetW("spi#", "enablepin"), 1;
004759  005150  // Syntax: spiflash_GetW("spi#", "enablepin");
004760  005151  // Usage : myword := fgetW(SPI1, PA0);
004761  005152  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004762  005153  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004763  005154  //       : by subsequent reads or writes.
004764  005155  // Notes : returns next word in file
004765  005156        
004766  005157  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004767  005158  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004768  005159  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004769  005160  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004770  005161  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004771  005162  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004772  005163  //       : returns number of characters written
004773  005164  //       :
004774  005165        
004775  005166  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004776  005167  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004777  005168  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004778  005169  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004779  005170  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004780  005171  //       : by subsequent reads or writes.
004781  005172  //       : returns pointer to string or null if failed.
004782  005173  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004783  005174  //       : NB:- only reads up to "size-1" characters into "string"
004784  005175  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004785  005176  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004786  005177  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004787  005178  //       : C] It reaches the end of file
004788  005179  //       : D] A read error occurs.
004789  005180        
004790  005181  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004791  005182  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004792  005183  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004793  005184  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004794  005185  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004795  005186  //       : return a function pointer to the allocation.
004796  005187  //       : The function can then be invoked just like any other
004797  005188  //       : function would be called via a function pointer.
004798  005189  //       : Parameters may be passed to it in a conventional way.
004799  005190  //       : The function may be discarded at any time when no
004800  005191  //       : longer required, thus freeing its memory resources.
004801  005192  //       : The loaded function can be discarded with mem_Free(..)
004802  005193  //       : eg:
004803  005194  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004804  005195  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004805  005196  //       : then elsewhere in your program:-
004806  005197  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004807  005198  //       : if(res == QUIT_APPLICATION) goto exitApp;
004808  005199  //       : Later in your program, when popupWindow is no longer
004809  005200  //       : required for the application:-
004810  005201  //       : res := mem_Free(popupWindow);
004811  005202  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004812  005203  //       : The callers stack is shared by the loaded function,
004813  005204  //       : however any global variables in the loaded function
004814  005205  //       : are private to that function.
004815  005206  //
004816  005207        
004817  005208  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004818  005209  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004819  005210  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004820  005211  // Notes : current program releases any allocated memory but
004821  005212  //       : retains the stack and global memory.
004822  005213  //       : If arglistptr is 0, no arguments are passed, else
004823  005214  //       : arglist points to an array, the first element being
004824  005215  //       : the number of elements in the array.
004825  005216  //       : func 'main' in the called program accepts
004826  005217  //       : the arguments, if any. The arguments can only
004827  005218  //       : be passed by value, no pointers or references can be
004828  005219  //       : used as all memory is cleared before the file
004829  005220  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004830  005221  //       : for functions that can pass by reference.
004831  005222        
004832  005223  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004833  005224  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004834  005225  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004835  005226  // Notes : returns like a function, current program
004836  005227  //       : calling program is kept active and control returns to it.
004837  005228  //       : If arglistptr is 0, no arguments are passed, else
004838  005229  //       : arglist points to an array, the first element being
004839  005230  //       : the number of elements in the array.
004840  005231  //       : func 'main' in the called program accepts the arguments.
004841  005232  //       : This function is similar to spiflash_LoadFunction(...), however,
004842  005233  //       : the function argument list is passed by pointer, and
004843  005234  //       : the memory consumed by the function is released as
004844  005235  //       : soon as the function completes.
004845  005236        
004846  005237  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004847  005238  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004848  005239  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004849  005240  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004850  005241  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004851  005242  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004852  005243  //       : Returns NULL if function fails.
004853  005244  //       : Returns a handle (pointer to the memory allocation) to the
004854  005245  //       : image control list that has been created.
004855  005246        
004856  005247  // Notes : This function Calculates the size of a chunk of memory required for
004857  005248  //       : a image list and populates it from the image control file ("*.dat")
004858  005249  //       : therefore, when imagelist is no longer required, you must de-allocate
004859  005250  //       : the image list memory by using eg:- mem_Free(hImagelist);
004860  005251  //       : to restore the heap.
004861  005252  //       :
004862  005253        
004863  005254  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004864  005255  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004865  005256  // Usage : spiflash_PlayWAV(SPI1, PA0);
004866  005257  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004867  005258  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004868  005259  //       : or writes.
004869  005260  //       : This function automatically grabs a chunk
004870  005261  //       : of memory for a file buffer, and a wave
004871  005262  //       : buffer. The minimum memory requirement is
004872  005263  //       : about 580 bytes for the disk io service and
004873  005264  //       : a minimum wave buffer size of 1024. The size
004874  005265  //       : of the wave buffer allocation
004875  005266  //       : can be increased by the snd_BufSize function.
004876  005267  //       : The default size 1024 bytes.
004877  005268  //       : NB the memory is only required during the
004878  005269  //       : duration of play, and is automatically
004879  005270  //       : released while not in use.
004880  005271  //       : See the Sound Class services for other associated controls.
004881  005272  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004882  005273  //       : If errors occured, the folling is returned
004883  005274  //       : -7  : Insufficient memory available for WAV buffer and file
004884  005275  //       : -6  : cant play this rate
004885  005276  //       : -5  : no data chunk found in first rsector
004886  005277  //       : -4  : no format data
004887  005278  //       : -3  : no wave chunk signature
004888  005279  //       : -2  : bad wave file format
004889  005280  //       : -1  : file not found
004890  005281        
004891  005282  //==============================================//
004892  005283  // more com functions                           //
004893  005284  //==============================================//
004894  005285        
004895  005286  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004896  005287  // Syntax   : com1_TXblock("buf", "bufsize");
004897  005288  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004898  005289  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004899  005290  //          : if a transmit buffer is active and space is available this function will return almost
004900  005291  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004901  005292        
004902  005293  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004903  005294  // Syntax   : com1_RXblock("buf", "bufsize");
004904  005295  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004905  005296  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004906  005297  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004907  005298  //          : immediately otherwise it will block until until the required bytes are received.
004908  005299        
004909  005300  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004910  005301  // Syntax   : com_TXblock("buf", "bufsize");
004911  005302  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004912  005303  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004913  005304  //          : if a transmit buffer is active and space is available this function will return almost
004914  005305  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004915  005306        
004916  005307  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004917  005308  // Syntax   : com_RXblock("buf", "bufsize");
004918  005309  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004919  005310  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004920  005311  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004921  005312  //          : immediately otherwise it will block until until the required bytes are received.
004922  005313        
004923  005314  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004924  005315  // Syntax   : com_TXblock("buf", "bufsize");
004925  005316  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004926  005317  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004927  005318  //          : if a transmit buffer is active and space is available this function will return almost
004928  005319  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004929  005320        
004930  005321  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004931  005322  // Syntax   : com_RXblock("buf", "bufsize");
004932  005323  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004933  005324  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004934  005325  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004935  005326  //          : immediately otherwise it will block until until the required bytes are received.
004936  005327        
004937  005328  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004938  005329  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004939  005330  // Usage : disp_BlitPixelsFromCOM1();
004940  005331  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004941  005332  //       : display from the specified com port.
004942  005333        
004943  005334  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004944  005335  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004945  005336  // Usage : disp_BlitPixelsFromCOM2();
004946  005337  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004947  005338  //       : display from the specified com port.
004948  005339        
004949  005340  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004950  005341  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004951  005342  // Usage : disp_BlitPixelsFromCOM3();
004952  005343  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004953  005344  //       : display from the specified com port.
004954  005345        
004955  005346        
004956  005347  //==============================================//
004957  005348  // crc generation functions                     //
004958  005349  //==============================================//
004959  005350        
004960  005351  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004961  005352  // *Notes   : (if you calculate all of the incoming data
004962  005353  //          : INCLUDING the CRC, the result should be 0x00
004963  005354  //          : This is equivalent to simple addition of all bytes
004964  005355  //          : and returning the negated sum an 8 bit value.
004965  005356  //          : For the standard test string "123456789",
004966  005357  //          : crc_CSUM_8 will return 0x0023.
004967  005358        
004968  005359        
004969  005360  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004970  005361  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004971  005362  //          : (if you calculate all of the incoming data
004972  005363  //          : INCLUDING the CRC, the result should be 0x0000
004973  005364  //          : For the standard test string "123456789",
004974  005365  //          : crc_16 will return 0xBB3D.
004975  005366        
004976  005367        
004977  005368  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004978  005369  // *Notes   : (if you calculate all of the incoming data
004979  005370  //          : INCLUDING the CRC, the result should be 0x0000
004980  005371  //          : For the standard test string "123456789",
004981  005372  //          : crc_MODBUS will return 0x4B37.
004982  005373        
004983  005374        
004984  005375  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004985  005376  // *Notes   : (if you calculate all of the incoming data
004986  005377  //          : INCLUDING the CRC, the result should be 0x0000
004987  005378  //          : For the standard test string "123456789",
004988  005379  //          : crc_CCITT will return the following:-
004989  005380  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004990  005381  //          : seed = 0xFFFF, result = 0x29B1
004991  005382  //          : seed = 0x1D0F, result = 0xE5CC
004992  005383        
004993  005384        
004994  005385  //------------------------------------------------------------------//
004995  005386  // CONSTANTS
004996  005387  //------------------------------------------------------------------//
004997  005388        
004998  005389  #CONST
004999  005393  #END
005000  005394        
005001  005395  // timebase constants for timebase_init
005002  005396  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005003  005397  #CONST
005004  005408  #END
005005  005409        
005006  005410        
005007  005411  // generic constants
005008  005412  #CONST
005009  005420  #END
005010  005421        
005011  005422        
005012  005423        
005013  005424  //gfx_Get() related constants
005014  005425  #CONST
005015  005434  #END
005016  005435        
005017  005436        
005018  005437        
005019  005438        
005020  005439  #CONST
005021  005452  #END
005022  005453        
005023  005454        
005024  005455  #CONST
005025  005480  #END
005026  005481        
005027  005482        
005028  005483        
005029  005484        
005030  005485  // timer control  related constants
005031  005486  #CONST
005032  005495  #END
005033  005496        
005034  005497        
005035  005498        
005036  005499  //------------------------------------------------------------------------------
005037  005500  // system WORD variables accesible with peekW and pokeW or pointer access
005038  005501  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005039  005502  // can also be accessed with peekW and pokeW
005040  005503  //------------------------------------------------------------------------------
005041  005504        
005042  005505  #CONST
005043  005600  #END
005044  005601        
005045  005602  #CONST
005046  005767  #END
005047  005768        
005048  005769        
005049  005770        
005050  005771  //==================================================================================================
005051  005772        
005052  005773        
005053  005774        
005054  000013      #ENDIF
005055  000014        
005056  000015        
005057  000016  //===========================================================================================
005058  000017        
005059  000018        
005060  000002        
005061  000003  // generated 30/12/2015 11:51:39
005062  000004        
005063  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005064  000006  #inherit "4DGL_16bitColours.fnc"
005065  000006  #inherit "4DGL_16bitColours.fnc"
005066  000004  */
005067  000005        
005068  000006        
005069  000007        
005070  000008  #CONST
005071  000149  #END
005072  000150        
005073  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005074  000008  #inherit "VisualConst.inc"
005075  000008  #inherit "VisualConst.inc"
005076  000001  // Line Patterns
005077  000002  #constant  LPCOARSE    0xF0F0
005078  000002  #constant  LPCOARSE    0xF0F0
005079  000003  #constant  LPMEDIUM    0x3333
005080  000003  #constant  LPMEDIUM    0x3333
005081  000004  #constant  LPFINE      0xAAAA
005082  000004  #constant  LPFINE      0xAAAA
005083  000005  #constant  LPDASHDOT   0x03CF
005084  000005  #constant  LPDASHDOT   0x03CF
005085  000006  #constant  LPDASHDOTDOT 0x0333
005086  000006  #constant  LPDASHDOTDOT 0x0333
005087  000007  #constant  LPSOLID     0x0000
005088  000007  #constant  LPSOLID     0x0000
005089  000009        
005090  000010        
file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1Const.inc

005091  000011  #inherit "RepRap_Touchv1Const.inc"
005092  000011  #inherit "RepRap_Touchv1Const.inc"
005093  000001  // File generated 30/12/2015 11:51:12
005094  000002  // Warning! This is a generated file, any manual changes will be
005095  000003  // lost during the next generation.
005096  000004        
005097  000005  #constant  Strings3Count    0
005098  000005  #constant  Strings3Count    0
005099  000006  #constant  Strings3Size     1
005100  000006  #constant  Strings3Size     1
005101  000007  #constant  Strings1Count    1
005102  000007  #constant  Strings1Count    1
005103  000008  #constant  Strings1Size     30
005104  000008  #constant  Strings1Size     30
005105  000009  #constant  Strings4Count    1
005106  000009  #constant  Strings4Count    1
005107  000010  #constant  Strings4Size     25
005108  000010  #constant  Strings4Size     25
005109  000011  #constant  Strings6Count    1
005110  000011  #constant  Strings6Count    1
005111  000012  #constant  Strings6Size     31
005112  000012  #constant  Strings6Size     31
005113  000013  #constant  Strings2Count    0
005114  000013  #constant  Strings2Count    0
005115  000014  #constant  Strings2Size     1
005116  000014  #constant  Strings2Size     1
005117  000015  #constant  Strings0Count    1
005118  000015  #constant  Strings0Count    1
005119  000016  #constant  Strings0Size     7
005120  000016  #constant  Strings0Size     7
005121  000017  #constant  Strings9Count    0
005122  000017  #constant  Strings9Count    0
005123  000018  #constant  Strings9Size     1
005124  000018  #constant  Strings9Size     1
005125  000019  #constant  Strings34Count    0
005126  000019  #constant  Strings34Count    0
005127  000020  #constant  Strings34Size     1
005128  000020  #constant  Strings34Size     1
005129  000021  #constant  Strings36Count    0
005130  000021  #constant  Strings36Count    0
005131  000022  #constant  Strings36Size     1
005132  000022  #constant  Strings36Size     1
005133  000023  #constant  Strings37Count    0
005134  000023  #constant  Strings37Count    0
005135  000024  #constant  Strings37Size     1
005136  000024  #constant  Strings37Size     1
005137  000025  #constant  Strings16Count    0
005138  000025  #constant  Strings16Count    0
005139  000026  #constant  Strings16Size     1
005140  000026  #constant  Strings16Size     1
005141  000027  #constant  Strings11Count    1
005142  000027  #constant  Strings11Count    1
005143  000028  #constant  Strings11Size     73
005144  000028  #constant  Strings11Size     73
005145  000029  #constant  Strings40Count    1
005146  000029  #constant  Strings40Count    1
005147  000030  #constant  Strings40Size     12
005148  000030  #constant  Strings40Size     12
005149  000031  #constant  Strings41Count    1
005150  000031  #constant  Strings41Count    1
005151  000032  #constant  Strings41Size     13
005152  000032  #constant  Strings41Size     13
005153  000033  #constant  Strings42Count    1
005154  000033  #constant  Strings42Count    1
005155  000034  #constant  Strings42Size     8
005156  000034  #constant  Strings42Size     8
005157  000035  #constant  Strings43Count    0
005158  000035  #constant  Strings43Count    0
005159  000036  #constant  Strings43Size     1
005160  000036  #constant  Strings43Size     1
005161  000037  #constant  Strings44Count    0
005162  000037  #constant  Strings44Count    0
005163  000038  #constant  Strings44Size     1
005164  000038  #constant  Strings44Size     1
005165  000039  #constant  Strings45Count    0
005166  000039  #constant  Strings45Count    0
005167  000040  #constant  Strings45Size     1
005168  000040  #constant  Strings45Size     1
005169  000041  #constant  Strings51Count    0
005170  000041  #constant  Strings51Count    0
005171  000042  #constant  Strings51Size     1
005172  000042  #constant  Strings51Size     1
005173  000043  #constant  Strings52Count    0
005174  000043  #constant  Strings52Count    0
005175  000044  #constant  Strings52Size     1
005176  000044  #constant  Strings52Size     1
005177  000045  #constant  Strings29Count    1
005178  000045  #constant  Strings29Count    1
005179  000046  #constant  Strings29Size     53
005180  000046  #constant  Strings29Size     53
005181  000047  #constant  Strings31Count    1
005182  000047  #constant  Strings31Count    1
005183  000048  #constant  Strings31Size     7
005184  000048  #constant  Strings31Size     7
005185  000049  #constant  Strings32Count    1
005186  000049  #constant  Strings32Count    1
005187  000050  #constant  Strings32Size     19
005188  000050  #constant  Strings32Size     19
005189  000051  #constant  Strings50Count    0
005190  000051  #constant  Strings50Count    0
005191  000052  #constant  Strings50Size     1
005192  000052  #constant  Strings50Size     1
005193  000053  #constant  Strings53Count    1
005194  000053  #constant  Strings53Count    1
005195  000054  #constant  Strings53Size     67
005196  000054  #constant  Strings53Size     67
005197  000055  #constant  Strings5Count    1
005198  000055  #constant  Strings5Count    1
005199  000056  #constant  Strings5Size     10
005200  000056  #constant  Strings5Size     10
005201  000057  #constant  Strings10Count    1
005202  000057  #constant  Strings10Count    1
005203  000058  #constant  Strings10Size     7
005204  000058  #constant  Strings10Size     7
005205  000059  #constant  Strings17Count    1
005206  000059  #constant  Strings17Count    1
005207  000060  #constant  Strings17Size     8
005208  000060  #constant  Strings17Size     8
005209  000061  #constant  Strings13Count    1
005210  000061  #constant  Strings13Count    1
005211  000062  #constant  Strings13Size     7
005212  000062  #constant  Strings13Size     7
005213  000063  #constant  Strings14Count    1
005214  000063  #constant  Strings14Count    1
005215  000064  #constant  Strings14Size     7
005216  000064  #constant  Strings14Size     7
005217  000065  #constant  Strings15Count    1
005218  000065  #constant  Strings15Count    1
005219  000066  #constant  Strings15Size     7
005220  000066  #constant  Strings15Size     7
005221  000067  #constant  Strings18Count    1
005222  000067  #constant  Strings18Count    1
005223  000068  #constant  Strings18Size     7
005224  000068  #constant  Strings18Size     7
005225  000069  #constant  Strings19Count    1
005226  000069  #constant  Strings19Count    1
005227  000070  #constant  Strings19Size     7
005228  000070  #constant  Strings19Size     7
005229  000071  #constant  Strings20Count    1
005230  000071  #constant  Strings20Count    1
005231  000072  #constant  Strings20Size     7
005232  000072  #constant  Strings20Size     7
005233  000073  #constant  Strings21Count    1
005234  000073  #constant  Strings21Count    1
005235  000074  #constant  Strings21Size     7
005236  000074  #constant  Strings21Size     7
005237  000075  #constant  Strings22Count    1
005238  000075  #constant  Strings22Count    1
005239  000076  #constant  Strings22Size     7
005240  000076  #constant  Strings22Size     7
005241  000077  // object indexes into ImageControl
005242  000078  #CONST
005243  000311  #END
005244  000312        
005245  000313  #constant  Strings7Size     0
005246  000313  #constant  Strings7Size     0
005247  000314  #constant  Strings7StartH   0
005248  000314  #constant  Strings7StartH   0
005249  000315  #constant  Strings7StartL   0
005250  000315  #constant  Strings7StartL   0
005251  000316  #constant  Strings8Size     0
005252  000316  #constant  Strings8Size     0
005253  000317  #constant  Strings8StartH   0
005254  000317  #constant  Strings8StartH   0
005255  000318  #constant  Strings8StartL   0
005256  000318  #constant  Strings8StartL   0
005257  000319  #constant  Strings12Size     0
005258  000319  #constant  Strings12Size     0
005259  000320  #constant  Strings12StartH   0
005260  000320  #constant  Strings12StartH   0
005261  000321  #constant  Strings12StartL   0
005262  000321  #constant  Strings12StartL   0
005263  000322  #constant  Strings23Size     0
005264  000322  #constant  Strings23Size     0
005265  000323  #constant  Strings23StartH   0
005266  000323  #constant  Strings23StartH   0
005267  000324  #constant  Strings23StartL   0
005268  000324  #constant  Strings23StartL   0
005269  000325  #constant  Strings24Size     0
005270  000325  #constant  Strings24Size     0
005271  000326  #constant  Strings24StartH   0
005272  000326  #constant  Strings24StartH   0
005273  000327  #constant  Strings24StartL   0
005274  000327  #constant  Strings24StartL   0
005275  000328  #constant  Strings25Size     0
005276  000328  #constant  Strings25Size     0
005277  000329  #constant  Strings25StartH   0
005278  000329  #constant  Strings25StartH   0
005279  000330  #constant  Strings25StartL   0
005280  000330  #constant  Strings25StartL   0
005281  000331  #constant  Strings26Size     0
005282  000331  #constant  Strings26Size     0
005283  000332  #constant  Strings26StartH   0
005284  000332  #constant  Strings26StartH   0
005285  000333  #constant  Strings26StartL   0
005286  000333  #constant  Strings26StartL   0
005287  000334  #constant  Strings27Size     0
005288  000334  #constant  Strings27Size     0
005289  000335  #constant  Strings27StartH   0
005290  000335  #constant  Strings27StartH   0
005291  000336  #constant  Strings27StartL   0
005292  000336  #constant  Strings27StartL   0
005293  000337  #constant  Strings28Size     0
005294  000337  #constant  Strings28Size     0
005295  000338  #constant  Strings28StartH   0
005296  000338  #constant  Strings28StartH   0
005297  000339  #constant  Strings28StartL   0
005298  000339  #constant  Strings28StartL   0
005299  000340  #constant  Strings30Size     0
005300  000340  #constant  Strings30Size     0
005301  000341  #constant  Strings30StartH   0
005302  000341  #constant  Strings30StartH   0
005303  000342  #constant  Strings30StartL   0
005304  000342  #constant  Strings30StartL   0
005305  000343  #constant  Strings33Size     0
005306  000343  #constant  Strings33Size     0
005307  000344  #constant  Strings33StartH   0
005308  000344  #constant  Strings33StartH   0
005309  000345  #constant  Strings33StartL   0
005310  000345  #constant  Strings33StartL   0
005311  000346  #constant  Strings35Size     0
005312  000346  #constant  Strings35Size     0
005313  000347  #constant  Strings35StartH   0
005314  000347  #constant  Strings35StartH   0
005315  000348  #constant  Strings35StartL   0
005316  000348  #constant  Strings35StartL   0
005317  000349  #constant  Strings38Size     0
005318  000349  #constant  Strings38Size     0
005319  000350  #constant  Strings38StartH   0
005320  000350  #constant  Strings38StartH   0
005321  000351  #constant  Strings38StartL   0
005322  000351  #constant  Strings38StartL   0
005323  000352  #constant  Strings39Size     0
005324  000352  #constant  Strings39Size     0
005325  000353  #constant  Strings39StartH   0
005326  000353  #constant  Strings39StartH   0
005327  000354  #constant  Strings39StartL   0
005328  000354  #constant  Strings39StartL   0
005329  000355  #constant  Strings46Size     0
005330  000355  #constant  Strings46Size     0
005331  000356  #constant  Strings46StartH   0
005332  000356  #constant  Strings46StartH   0
005333  000357  #constant  Strings46StartL   0
005334  000357  #constant  Strings46StartL   0
005335  000358  #constant  Strings47Size     0
005336  000358  #constant  Strings47Size     0
005337  000359  #constant  Strings47StartH   0
005338  000359  #constant  Strings47StartH   0
005339  000360  #constant  Strings47StartL   0
005340  000360  #constant  Strings47StartL   0
005341  000361  #constant  Strings48Size     0
005342  000361  #constant  Strings48Size     0
005343  000362  #constant  Strings48StartH   0
005344  000362  #constant  Strings48StartH   0
005345  000363  #constant  Strings48StartL   0
005346  000363  #constant  Strings48StartL   0
005347  000364  #constant  Strings49Size     0
005348  000364  #constant  Strings49Size     0
005349  000365  #constant  Strings49StartH   0
005350  000365  #constant  Strings49StartH   0
005351  000366  #constant  Strings49StartL   0
005352  000366  #constant  Strings49StartL   0
005353  000367  #constant  Strings3StartH   0x0
005354  000367  #constant  Strings3StartH   0x0
005355  000368  #constant  Strings3StartL   0x0
005356  000368  #constant  Strings3StartL   0x0
005357  000369  #constant  Strings1StartH   0x0
005358  000369  #constant  Strings1StartH   0x0
005359  000370  #constant  Strings1StartL   0x200
005360  000370  #constant  Strings1StartL   0x200
005361  000371  #constant  Strings4StartH   0x0
005362  000371  #constant  Strings4StartH   0x0
005363  000372  #constant  Strings4StartL   0x400
005364  000372  #constant  Strings4StartL   0x400
005365  000373  #constant  Strings6StartH   0x0
005366  000373  #constant  Strings6StartH   0x0
005367  000374  #constant  Strings6StartL   0x600
005368  000374  #constant  Strings6StartL   0x600
005369  000375  #constant  Strings2StartH   0x0
005370  000375  #constant  Strings2StartH   0x0
005371  000376  #constant  Strings2StartL   0x800
005372  000376  #constant  Strings2StartL   0x800
005373  000377  #constant  Strings0StartH   0x0
005374  000377  #constant  Strings0StartH   0x0
005375  000378  #constant  Strings0StartL   0xA00
005376  000378  #constant  Strings0StartL   0xA00
005377  000379  #constant  Strings9StartH   0x0
005378  000379  #constant  Strings9StartH   0x0
005379  000380  #constant  Strings9StartL   0xC00
005380  000380  #constant  Strings9StartL   0xC00
005381  000381  #constant  Strings34StartH   0x0
005382  000381  #constant  Strings34StartH   0x0
005383  000382  #constant  Strings34StartL   0xE00
005384  000382  #constant  Strings34StartL   0xE00
005385  000383  #constant  Strings36StartH   0x0
005386  000383  #constant  Strings36StartH   0x0
005387  000384  #constant  Strings36StartL   0x1000
005388  000384  #constant  Strings36StartL   0x1000
005389  000385  #constant  Strings37StartH   0x0
005390  000385  #constant  Strings37StartH   0x0
005391  000386  #constant  Strings37StartL   0x1200
005392  000386  #constant  Strings37StartL   0x1200
005393  000387  #constant  Strings16StartH   0x0
005394  000387  #constant  Strings16StartH   0x0
005395  000388  #constant  Strings16StartL   0x1400
005396  000388  #constant  Strings16StartL   0x1400
005397  000389  #constant  Strings11StartH   0x0
005398  000389  #constant  Strings11StartH   0x0
005399  000390  #constant  Strings11StartL   0x1600
005400  000390  #constant  Strings11StartL   0x1600
005401  000391  #constant  Strings40StartH   0x0
005402  000391  #constant  Strings40StartH   0x0
005403  000392  #constant  Strings40StartL   0x1800
005404  000392  #constant  Strings40StartL   0x1800
005405  000393  #constant  Strings41StartH   0x0
005406  000393  #constant  Strings41StartH   0x0
005407  000394  #constant  Strings41StartL   0x1A00
005408  000394  #constant  Strings41StartL   0x1A00
005409  000395  #constant  Strings42StartH   0x0
005410  000395  #constant  Strings42StartH   0x0
005411  000396  #constant  Strings42StartL   0x1C00
005412  000396  #constant  Strings42StartL   0x1C00
005413  000397  #constant  Strings43StartH   0x0
005414  000397  #constant  Strings43StartH   0x0
005415  000398  #constant  Strings43StartL   0x1E00
005416  000398  #constant  Strings43StartL   0x1E00
005417  000399  #constant  Strings44StartH   0x0
005418  000399  #constant  Strings44StartH   0x0
005419  000400  #constant  Strings44StartL   0x2000
005420  000400  #constant  Strings44StartL   0x2000
005421  000401  #constant  Strings45StartH   0x0
005422  000401  #constant  Strings45StartH   0x0
005423  000402  #constant  Strings45StartL   0x2200
005424  000402  #constant  Strings45StartL   0x2200
005425  000403  #constant  Strings51StartH   0x0
005426  000403  #constant  Strings51StartH   0x0
005427  000404  #constant  Strings51StartL   0x2400
005428  000404  #constant  Strings51StartL   0x2400
005429  000405  #constant  Strings52StartH   0x0
005430  000405  #constant  Strings52StartH   0x0
005431  000406  #constant  Strings52StartL   0x2600
005432  000406  #constant  Strings52StartL   0x2600
005433  000407  #constant  Strings29StartH   0x0
005434  000407  #constant  Strings29StartH   0x0
005435  000408  #constant  Strings29StartL   0x2800
005436  000408  #constant  Strings29StartL   0x2800
005437  000409  #constant  Strings31StartH   0x0
005438  000409  #constant  Strings31StartH   0x0
005439  000410  #constant  Strings31StartL   0x2A00
005440  000410  #constant  Strings31StartL   0x2A00
005441  000411  #constant  Strings32StartH   0x0
005442  000411  #constant  Strings32StartH   0x0
005443  000412  #constant  Strings32StartL   0x2C00
005444  000412  #constant  Strings32StartL   0x2C00
005445  000413  #constant  Strings50StartH   0x0
005446  000413  #constant  Strings50StartH   0x0
005447  000414  #constant  Strings50StartL   0x2E00
005448  000414  #constant  Strings50StartL   0x2E00
005449  000415  #constant  Strings53StartH   0x0
005450  000415  #constant  Strings53StartH   0x0
005451  000416  #constant  Strings53StartL   0x3000
005452  000416  #constant  Strings53StartL   0x3000
005453  000417  #constant  Strings5StartH   0x0
005454  000417  #constant  Strings5StartH   0x0
005455  000418  #constant  Strings5StartL   0x3200
005456  000418  #constant  Strings5StartL   0x3200
005457  000419  #constant  Strings10StartH   0x0
005458  000419  #constant  Strings10StartH   0x0
005459  000420  #constant  Strings10StartL   0x3400
005460  000420  #constant  Strings10StartL   0x3400
005461  000421  #constant  Strings17StartH   0x0
005462  000421  #constant  Strings17StartH   0x0
005463  000422  #constant  Strings17StartL   0x3600
005464  000422  #constant  Strings17StartL   0x3600
005465  000423  #constant  Strings13StartH   0x0
005466  000423  #constant  Strings13StartH   0x0
005467  000424  #constant  Strings13StartL   0x3800
005468  000424  #constant  Strings13StartL   0x3800
005469  000425  #constant  Strings14StartH   0x0
005470  000425  #constant  Strings14StartH   0x0
005471  000426  #constant  Strings14StartL   0x3A00
005472  000426  #constant  Strings14StartL   0x3A00
005473  000427  #constant  Strings15StartH   0x0
005474  000427  #constant  Strings15StartH   0x0
005475  000428  #constant  Strings15StartL   0x3C00
005476  000428  #constant  Strings15StartL   0x3C00
005477  000429  #constant  Strings18StartH   0x0
005478  000429  #constant  Strings18StartH   0x0
005479  000430  #constant  Strings18StartL   0x3E00
005480  000430  #constant  Strings18StartL   0x3E00
005481  000431  #constant  Strings19StartH   0x0
005482  000431  #constant  Strings19StartH   0x0
005483  000432  #constant  Strings19StartL   0x4000
005484  000432  #constant  Strings19StartL   0x4000
005485  000433  #constant  Strings20StartH   0x0
005486  000433  #constant  Strings20StartH   0x0
005487  000434  #constant  Strings20StartL   0x4200
005488  000434  #constant  Strings20StartL   0x4200
005489  000435  #constant  Strings21StartH   0x0
005490  000435  #constant  Strings21StartH   0x0
005491  000436  #constant  Strings21StartL   0x4400
005492  000436  #constant  Strings21StartL   0x4400
005493  000437  #constant  Strings22StartH   0x0
005494  000437  #constant  Strings22StartH   0x0
005495  000438  #constant  Strings22StartL   0x4600
005496  000438  #constant  Strings22StartL   0x4600
005497  000439  #IFNOT EXISTS NOGLOBALS
005498  000440  var hndl ;
005499  000441  #ENDIF
005500  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005501  000013  #inherit "CLPrintStrings.inc"
005502  000013  #inherit "CLPrintStrings.inc"
005503  000001  func PrintStrings(var ID, var *msgid, var String)
005504  000002      var StringID, i, ch, offs32[2], res32[2];
005505  000003      StringID := oStringss[1+ID] ;
005506  000004      if (String)
005507  000005          stringsCV[ID] := -1 ;
005508  000006      else
005509  000007          stringsCV[ID] := msgid ;
005510  000008      endif
005511  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005512  000010      txt_FontID(hFonts[ID]) ;
005513  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005514  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005515  000013        
005516  000014      if (*(StringID + Ofs_String_Transparent))
005517  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005518  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005519  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005520  000018      else
005521  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005522  000020          gfx_Clipping(ON) ;
005523  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005524  000022          gfx_Clipping(OFF) ;
005525  000023        
005526  000024      endif
005527  000025        
005528  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005529  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005530  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005531  000029        
005532  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005533  000031        
005534  000032      if (String)
005535  000033          i := 0 ;
005536  000034          ch := msgid[i++] ;
005537  000035          while (ch != 0)
005538  000036              putch(ch) ;
005539  000037              ch := msgid[i++] ;
005540  000038          wend
005541  000039      else
005542  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005543  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005544  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005545  000043          uadd_3232(res32,res32,offs32) ;
005546  000044          file_Seek(hstrings, res32[1], res32[0]);
005547  000045          repeat
005548  000046              if (*(StringID + Ofs_String_Ansi))
005549  000047                  ch := file_GetC(hstrings) ;
005550  000048              else
005551  000049                  ch := file_GetW(hstrings) ;
005552  000050              endif
005553  000051              putch(ch) ;
005554  000052          until (ch == 0) ;
005555  000053      endif
005556  000054        
005557  000055  endfunc
005558  000056        
005559  000014        
005560  000015  #constant IPDatasize 22
005561  000015  #constant IPDatasize 22
005562  000016        
005563  000017  #CONST
005564  000021  #END
005565  000022        
005566  000023  #CONST
005567  000130  #END
005568  000131        
005569  000566  #END
5570  268E
5571  268F
5572  2690
5573  2691
5574  2692
5575  2693
5576  2694
5577  2695
5578  2696
5579  2697
5580  2698
5581  2699
5582  269A
5583  269B
5584  269C
5585  269D
5586  269E
5587  269F
5588  26A0
5589  26A1
5590  26A2
5591  26A3
5592  26A4
5593  26A5
5594  26A6
5595  26A7
5596  26A8
5597  26A9
5598  26AA
5599  26AB
5600  26AC
5601  26AD
5602  26AE
5603  26AF
5604  26B0
5605  26B1
5606  26B2
5607  26B3
5608  26B4
5609  26B5
5610  26B6
5611  26B7
5612  26B8
5613  26B9
5614  26BA
5615  26BB
5616  26BC
5617  26BD
5618  26BE
5619  26BF
5620  26C0
5621  26C1
5622  26C2
5623  26C3
5624  26C4
5625  26C5
5626  26C6
5627  26C7
5628  26C8
5629  26C9
5630  26CA
5631  26CB
5632  26CC
5633  26CD
5634  26CE
5635  26CF
5636  26D0
5637  26D1
5638  26D2
5639  26D3
5640  26D4
5641  26D5
5642  26D6
5643  26D7
5644  26D8
5645  26D9
5646  26DA
5647  26DB
5648  26DC
5649  26DD
5650  26DE
5651  26DF
5652  26E0
5653  26E1
5654  26E2
5655  26E3
5656  26E4
5657  26E5
5658  26E6
5659  26E7
5660  26E8
5661  26E9
5662  26EA
5663  26EB
5664  26EC
5665  26ED
5666  26EE
5667  26EF
5668  26F0
5669  26F1
5670  26F2
5671  26F3
5672  26F4
5673  26F5
5674  26F6
5675  26F7
5676  26F8
5677  26F9
5678  26FA
5679  26FB
5680  26FC
5681  26FD
5682  26FE
5683  26FF
5684  2700
5685  2701
5686  2702
5687  2703
5688  2704
5689  2705
5690  2706
5691  2707
5692  2708
5693  2709
5694  270A
5695  270B
5696  270C
5697  270D
5698  270E
5699  270F
5700  2710
5701  2711
5702  2712
5703  2713
5704  2714
5705  2715
5706  2716
5707  2717
5708  2718
5709  2719
5710  271A
5711  271B
5712  271C
5713  271D
5714  271E
5715  271F
5716  2720
5717  2721
5718  2722
5719  2723
5720  2724
5721  2725
5722  2726
5723  2727
5724  2728
5725  2729
5726  272A
5727  272B
5728  272C
5729  272D
5730  272E
5731  272F
5732  2730
5733  2731
5734  2732
5735  2733
5736  2734
5737  2735
5738  2736
5739  2737
5740  2738
5741  2739
5742  273A
5743  273B
5744  273C
5745  273D
5746  273E
5747  273F
5748  2740
5749  2741
5750  2742
5751  2743
5752  2744
5753  2745
5754  2746
5755  2747
5756  2748
5757  2749
5758  274A
5759  274B
5760  274C
5761  274D
5762  274E
5763  274F
5764  2750
5765  2751
5766  2752
5767  2753
5768  2754
5769  2755
5770  2756
5771  2757
5772  2758
5773  2759
5774  275A
5775  275B
5776  275C
5777  275D
5778  275E
5779  275F
5780  2760
5781  2761
5782  2762
5783  2763
5784  2764
5785  2765
5786  2766
5787  2767
5788  2768
5789  2769
5790  276A
5791  276B
5792  276C
5793  276D
5794  276E
5795  276F
5796  2770
5797  2771
5798  2772
5799  2773
5800  2774
5801  2775
5802  2776
5803  2777
5804  2778
5805  2779
5806  277A
5807  277B
5808  277C
5809  277D
5810  277E
5811  277F
5812  2780
5813  2781
5814  2782
5815  2783
5816  2784
5817  2785
5818  2786
5819  2787
5820  2788
5821  2789
5822  278A
5823  278B
5824  278C
5825  278D
5826  278E
5827  278F
5828  2790
5829  2791
5830  2792
5831  2793
5832  2794
5833  2795
5834  2796
5835  2797
5836  2798
5837  2799
5838  279A
5839  279B
5840  279C
5841  279D
5842  279E
5843  279F
5844  27A0
5845  27A1
5846  27A2
5847  27A3
5848  27A4
5849  27A5
5850  27A6
5851  27A7
5852  27A8
5853  27A9
5854  27AA
5855  27AB
5856  27AC
5857  27AD
5858  27AE
5859  27AF
5860  27B0
5861  27B1
5862  27B2
5863  27B3
5864  27B4
5865  27B5
5866  27B6
5867  27B7
5868  27B8
5869  27B9
5870  27BA
5871  27BB
5872  27BC
5873  27BD
5874  27BE
5875  27BF
5876  27C0
5877  27C1
5878  27C2
5879  27C3
5880  27C4
5881  27C5
5882  27C6
5883  27C7
5884  27C8
5885  27C9
5886  27CA
5887  27CB
5888  27CC
5889  27CD
5890  27CE
5891  27CF
5892  27D0
5893  27D1
5894  27D2
5895  27D3
5896  27D4
5897  27D5
5898  27D6
5899  27D7
5900  27D8
5901  27D9
5902  27DA
5903  27DB
5904  27DC
5905  27DD
5906  27DE
5907  27DF
5908  27E0
5909  27E1
5910  27E2
5911  27E3
5912  27E4
5913  27E5
5914  27E6
5915  27E7
5916  27E8
5917  27E9
5918  27EA
5919  27EB
5920  27EC
5921  27ED
5922  27EE
5923  27EF
5924  27F0
5925  27F1
5926  27F2
5927  27F3
5928  27F4
5929  27F5
5930  27F6
5931  27F7
5932  27F8
5933  27F9
5934  27FA
5935  27FB
5936  27FC
5937  27FD
5938  27FE
5939  27FF
5940  2800
5941  2801
5942  2802
5943  2803
5944  2804
5945  2805
5946  2806
5947  2807
5948  2808
5949  2809
5950  280A
5951  280B
5952  280C
5953  280D
5954  280E
5955  280F
5956  2810
5957  2811
5958  2812
5959  2813
5960  2814
5961  2815
5962  2816
5963  2817
5964  2818
5965  2819
5966  281A
5967  281B
5968  281C
5969  281D
5970  281E
5971  281F
5972  2820
5973  2821
5974  2822
5975  2823
5976  2824
5977  2825
5978  2826
5979  2827
5980  2828
5981  2829
5982  282A
5983  282B
5984  282C
5985  282D
5986  282E
5987  282F
5988  2830
5989  2831
5990  2832
5991  2833
5992  2834
5993  2835
5994  2836
5995  2837
5996  2838
5997  2839
5998  283A
5999  283B
6000  283C
6001  283D
6002  283E
6003  283F
6004  2840
6005  2841
6006  2842
6007  2843
6008  2844
6009  2845
6010  2846
6011  2847
6012  2848
6013  2849
6014  284A
6015  284B
6016  284C
6017  284D
6018  284E
6019  284F
6020  2850
6021  2851
6022  2852
6023  2853
6024  2854
6025  2855
6026  2856
6027  2857
6028  2858
6029  2859
6030  285A
6031  285B
6032  285C
6033  285D
6034  285E
6035  285F
6036  2860
6037  2861
6038  2862
6039  2863
6040  2864
6041  2865
6042  2866
6043  2867
6044  2868
6045  2869
6046  286A
6047  286B
6048  286C
6049  286D
6050  286E
6051  286F
6052  2870
6053  2871
6054  2872
6055  2873
6056  2874
6057  2875
6058  2876
6059  2877
6060  2878
6061  2879
6062  287A
6063  287B
6064  287C
6065  287D
6066  287E
6067  287F
6068  2880
6069  2881
6070  2882
6071  2883
6072  2884
6073  2885
6074  2886
6075  2887
6076  2888
6077  2889
6078  288A
6079  288B
6080  288C
6081  288D
6082  288E
6083  288F
6084  2890
6085  2891
6086  2892
6087  2893
6088  2894
6089  2895
6090  2896
6091  2897
6092  2898
6093  2899
6094  289A
6095  289B
6096  289C
6097  289D
6098  289E
6099  289F
6100  28A0
6101  28A1
6102  28A2
6103  28A3
6104  28A4
6105  28A5
6106  28A6
6107  28A7
6108  28A8
6109  28A9
6110  28AA
6111  28AB
6112  28AC
6113  28AD
6114  28AE
6115  28AF
6116  28B0
6117  28B1
6118  28B2
6119  28B3
6120  28B4
6121  28B5
6122  28B6
6123  28B7
6124  28B8
6125  28B9
6126  28BA
6127  28BB
6128  28BC
6129  28BD
6130  28BE
6131  28BF
6132  28C0
6133  28C1
6134  28C2
6135  28C3
6136  28C4
6137  28C5
6138  28C6
6139  28C7
6140  28C8
6141  28C9
6142  28CA
6143  28CB
6144  28CC
6145  28CD
6146  28CE
6147  28CF
6148  28D0
6149  28D1
6150  28D2
6151  28D3
6152  28D4
6153  28D5
6154  28D6
6155  28D7
6156  28D8
6157  28D9
6158  28DA
6159  28DB
6160  28DC
6161  28DD
6162  28DE
6163  28DF
6164  28E0
6165  28E1
6166  28E2
6167  28E3
6168  28E4
6169  28E5
6170  28E6
6171  28E7
6172  28E8
6173  28E9
6174  28EA
6175  28EB
6176  28EC
6177  28ED
6178  28EE
6179  28EF
6180  28F0
6181  28F1
6182  28F2
6183  28F3
6184  28F4
6185  28F5
6186  28F6
6187  28F7
6188  28F8
6189  28F9
6190  28FA
6191  28FB
6192  28FC
6193  28FD
6194  28FE
6195  28FF
6196  2900
6197  2901
6198  2902
6199  2903
6200  2904
6201  2905
6202  2906
6203  2907
6204  2908
6205  2909
6206  290A
6207  290B
6208  290C
6209  290D
6210  290E
6211  290F
6212  2910
6213  2911
6214  2912
6215  2913
6216  2914
6217  2915
6218  2916
6219  2917
6220  2918
6221  2919
6222  291A
6223  291B
6224  291C
6225  291D
6226  291E
6227  291F
6228  2920
6229  2921
6230  2922
6231  2923
6232  2924
6233  2925
6234  2926
6235  2927
6236  2928
6237  2929
6238  292A
6239  292B
6240  292C
6241  292D
6242  292E
6243  292F
6244  2930
6245  2931
6246  2932
6247  2933
6248  2934
6249  2935
6250  2936
6251  2937
6252  2938
6253  2939
6254  293A
6255  293B
6256  293C
6257  293D
6258  293E
6259  293F
6260  2940
6261  2941
6262  2942
6263  2943
6264  2944
6265  2945
6266  2946
6267  2947
6268  2948
6269  2949
6270  294A
6271  294B
6272  294C
6273  294D
6274  294E
6275  294F
6276  2950
6277  2951
6278  2952
6279  2953
6280  2954
6281  2955
6282  2956
6283  2957
6284  2958
6285  2959
6286  295A
6287  295B
6288  295C
6289  295D
6290  295E
6291  295F
6292  2960
6293  2961
6294  2962
6295  2963
6296  2964
6297  2965
6298  2966
6299  2967
6300  2968
6301  2969
6302  296A
6303  296B
6304  296C
6305  296D
6306  296E
6307  296F
6308  2970
6309  2971
6310  2972
6311  2973
6312  2974
6313  2975
6314  2976
6315  2977
6316  2978
6317  2979
6318  297A
6319  297B
6320  297C
6321  297D
6322  297E
6323  297F
6324  2980
6325  2981
6326  2982
6327  2983
6328  2984
6329  2985
6330  2986
6331  2987
6332  2988
6333  2989
6334  298A
6335  298B
6336  298C
6337  298D
6338  298E
6339  298F
6340  2990
6341  2991
6342  2992
6343  2993
6344  2994
6345  2995
6346  2996
6347  2997
6348  2998
6349  2999
6350  299A
6351  299B
6352  299C
6353  299D
6354  299E
6355  299F
6356  29A0
6357  29A1
6358  29A2
6359  29A3
6360  29A4
6361  29A5
6362  29A6
6363  29A7
6364  29A8
6365  29A9
6366  29AA
6367  29AB
6368  29AC
6369  29AD
6370  29AE
6371  29AF
6372  29B0
6373  29B1
6374  29B2
6375  29B3
6376  29B4
6377  29B5
6378  29B6
6379  29B7
6380  29B8
6381  29B9
6382  29BA
6383  29BB
6384  29BC
6385  29BD
6386  29BE
6387  29BF
6388  29C0
6389  29C1
6390  29C2
6391  29C3
6392  29C4
6393  29C5
6394  29C6
6395  29C7
6396  29C8
6397  29C9
6398  29CA
6399  29CB
6400  29CC
6401  29CD
6402  29CE
6403  29CF
6404  29D0
6405  29D1
6406  29D2
6407  29D3
6408  29D4
6409  29D5
6410  29D6
6411  29D7
6412  29D8
6413  29D9
6414  29DA
6415  29DB
6416  29DC
6417  29DD
6418  29DE
6419  29DF
6420  29E0
6421  29E1
6422  29E2
6423  29E3
6424  29E4
6425  29E5
6426  29E6
6427  29E7
6428  29E8
6429  29E9
6430  29EA
6431  29EB
6432  29EC
6433  29ED
6434  29EE
6435  29EF
6436  29F0
6437  29F1
6438  29F2
6439  29F3
6440  29F4
6441  29F5
6442  29F6
6443  29F7
6444  29F8
6445  29F9
6446  29FA
6447  29FB
6448  29FC
6449  29FD
6450  29FE
6451  29FF
6452  2A00
6453  2A01
6454  2A02
6455  2A03
6456  2A04
6457  2A05
6458  2A06
6459  2A07
6460  2A08
6461  2A09
6462  2A0A
6463  2A0B
6464  2A0C
6465  2A0D
6466  2A0E
6467  2A0F
6468  2A10
6469  2A11
6470  2A12
6471  2A13
6472  2A14
6473  2A15
6474  2A16
6475  2A17
6476  2A18
6477  2A19
6478  2A1A
6479  2A1B
6480  2A1C
6481  2A1D
6482  2A1E
6483  2A1F
6484  2A20
6485  2A21
6486  2A22
6487  2A23
6488  2A24
6489  2A25
6490  2A26
6491  2A27
6492  2A28
6493  2A29
6494  2A2A
6495  2A2B
6496  2A2C
6497  2A2D
6498  2A2E
6499  2A2F
6500  2A30
6501  2A31
6502  2A32
6503  2A33
6504  2A34
6505  2A35
6506  2A36
6507  2A37
6508  2A38
6509  2A39
6510  2A3A
6511  2A3B
6512  2A3C
6513  2A3D
6514  2A3E
6515  2A3F
6516  2A40
6517  2A41
6518  2A42
6519  2A43
6520  2A44
6521  2A45
6522  2A46
6523  2A47
6524  2A48
6525  2A49
6526  2A4A
6527  2A4B
6528  2A4C
6529  2A4D
6530  2A4E
6531  2A4F
6532  2A50
6533  2A51
6534  2A52
6535  2A53
6536  2A54
6537  2A55
6538  2A56
6539  2A57
6540  2A58
6541  2A59
6542  2A5A
6543  2A5B
6544  2A5C
6545  2A5D
6546  2A5E
6547  2A5F
6548  2A60
6549  2A61
6550  2A62
6551  2A63
6552  2A64
6553  2A65
6554  2A66
6555  2A67
6556  2A68
6557  2A69
6558  2A6A
6559  2A6B
6560  2A6C
6561  2A6D
6562  2A6E
6563  2A6F
6564  2A70
6565  2A71
6566  2A72
6567  2A73
6568  2A74
6569  2A75
6570  2A76
6571  2A77
6572  2A78
6573  2A79
6574  2A7A
6575  2A7B
6576  2A7C
6577  2A7D
6578  2A7E
6579  2A7F
6580  2A80
6581  2A81
6582  2A82
6583  2A83
6584  2A84
6585  2A85
6586  2A86
6587  2A87
6588  2A88
6589  2A89
6590  2A8A
6591  2A8B
6592  2A8C
6593  2A8D
6594  2A8E
6595  2A8F
6596  2A90
6597  2A91
6598  2A92
6599  2A93
6600  2A94
6601  2A95
6602  2A96
6603  2A97
6604  2A98
6605  2A99
6606  2A9A
6607  2A9B
6608  2A9C
6609  2A9D
6610  2A9E
6611  2A9F
6612  2AA0
6613  2AA1
6614  2AA2
6615  2AA3
6616  2AA4
6617  2AA5
6618  2AA6
6619  2AA7
6620  2AA8
6621  2AA9
6622  2AAA
6623  2AAB
6624  2AAC
6625  2AAD
6626  2AAE
6627  2AAF
6628  2AB0
6629  2AB1
6630  2AB2
6631  2AB3
6632  2AB4
6633  2AB5
6634  2AB6
6635  2AB7
6636  2AB8
6637  2AB9
6638  2ABA
6639  2ABB
6640  2ABC
6641  2ABD
6642  2ABE
6643  2ABF
6644  2AC0
6645  2AC1
6646  2AC2
6647  2AC3
6648  2AC4
6649  2AC5
6650  2AC6
6651  2AC7
6652  2AC8
6653  2AC9
6654  2ACA
6655  2ACB
6656  2ACC
6657  2ACD
6658  2ACE
6659  2ACF
6660  2AD0
6661  2AD1
6662  2AD2
6663  2AD3
6664  2AD4
6665  2AD5
6666  2AD6
6667  2AD7
6668  2AD8
6669  2AD9
6670  2ADA
6671  2ADB
6672  2ADC
6673  2ADD
6674  2ADE
6675  2ADF
6676  2AE0
6677  2AE1
6678  2AE2
6679  2AE3
6680  2AE4
6681  2AE5
6682  2AE6
6683  2AE7
6684  2AE8
6685  2AE9
6686  2AEA
6687  2AEB
6688  2AEC
6689  2AED
6690  2AEE
6691  2AEF
6692  2AF0
6693  2AF1
6694  2AF2
6695  2AF3
6696  2AF4
6697  2AF5
6698  2AF6
6699  2AF7
6700  2AF8
6701  2AF9
6702  2AFA
6703  2AFB
6704  2AFC
6705  2AFD
6706  2AFE
6707  2AFF
6708  2B00
6709  2B01
6710  2B02
6711  2B03
6712  2B04
6713  2B05
6714  2B06
6715  2B07
6716  2B08
6717  2B09
6718  2B0A
6719  2B0B
6720  2B0C
6721  2B0D
6722  2B0E
6723  2B0F
6724  2B10
6725  2B11
6726  2B12
6727  2B13
6728  2B14
6729  2B15
6730  2B16
6731  2B17
6732  2B18
6733  2B19
6734  2B1A
6735  2B1B
6736  2B1C
6737  2B1D
6738  2B1E
6739  2B1F
6740  2B20
6741  2B21
6742  2B22
6743  2B23
6744  2B24
6745  2B25
6746  2B26
6747  2B27
6748  2B28
6749  2B29
6750  2B2A
6751  2B2B
6752  2B2C
6753  2B2D
6754  2B2E
6755  2B2F
6756  2B30
6757  2B31
6758  2B32
6759  2B33
6760  2B34
6761  2B35
6762  2B36
6763  2B37
6764  2B38
6765  2B39
6766  2B3A
6767  2B3B
6768  2B3C
6769  2B3D
6770  2B3E
6771  2B3F
6772  2B40
6773  2B41
6774  2B42
6775  2B43
6776  2B44
6777  2B45
6778  2B46
6779  2B47
6780  2B48
6781  2B49
6782  2B4A
6783  2B4B
6784  2B4C
6785  2B4D
6786  2B4E
6787  2B4F
6788  2B50
6789  2B51
6790  2B52
6791  2B53
6792  2B54
6793  2B55
6794  2B56
6795  2B57
6796  2B58
6797  2B59
6798  2B5A
6799  2B5B
6800  2B5C
6801  2B5D
6802  2B5E
6803  2B5F
6804  2B60
6805  2B61
6806  2B62
6807  2B63
6808  2B64
6809  2B65
6810  2B66
6811  2B67
6812  2B68
6813  2B69
6814  2B6A
6815  2B6B
6816  2B6C
6817  2B6D
6818  2B6E
6819  2B6F
6820  2B70
6821  2B71
6822  2B72
6823  2B73
6824  2B74
6825  2B75
6826  2B76
6827  2B77
6828  2B78
6829  2B79
6830  2B7A
6831  2B7B
6832  2B7C
6833  2B7D
6834  2B7E
6835  2B7F
6836  2B80
6837  2B81
6838  2B82
6839  2B83
6840  2B84
6841  2B85
6842  2B86
6843  2B87
6844  2B88
6845  2B89
6846  2B8A
6847  2B8B
6848  2B8C
6849  2B8D
6850  2B8E
6851  2B8F
6852  2B90
6853  2B91
6854  2B92
6855  2B93
6856  2B94
6857  2B95
6858  2B96
6859  2B97
6860  2B98
6861  2B99
6862  2B9A
6863  2B9B
6864  2B9C
6865  2B9D
6866  2B9E
6867  2B9F
6868  2BA0
6869  2BA1
6870  2BA2
6871  2BA3
6872  2BA4
6873  2BA5
6874  2BA6
6875  2BA7
6876  2BA8
6877  2BA9
6878  2BAA
6879  2BAB
6880  2BAC
6881  2BAD
6882  2BAE
6883  2BAF
6884  2BB0
6885  2BB1
6886  2BB2
6887  2BB3
6888  2BB4
6889  2BB5
6890  2BB6
6891  2BB7
6892  2BB8
6893  2BB9
6894  2BBA
6895  2BBB
6896  2BBC
6897  2BBD
6898  2BBE
6899  2BBF
6900  2BC0
6901  2BC1
6902  2BC2
6903  2BC3
6904  2BC4
6905  2BC5
6906  2BC6
6907  2BC7
6908  2BC8
6909  2BC9
6910  2BCA
6911  2BCB
6912  2BCC
6913  2BCD
6914  2BCE
6915  2BCF
6916  2BD0
6917  2BD1
6918  2BD2
6919  2BD3
6920  2BD4
6921  2BD5
6922  2BD6
6923  2BD7
6924  2BD8
6925  2BD9
6926  2BDA
6927  2BDB
6928  2BDC
6929  2BDD
6930  2BDE
6931  2BDF
6932  2BE0
6933  2BE1
6934  2BE2
6935  2BE3
6936  2BE4
6937  2BE5
6938  2BE6
6939  2BE7
6940  2BE8
6941  2BE9
6942  2BEA
6943  2BEB
6944  2BEC
6945  2BED
6946  2BEE
6947  2BEF
6948  2BF0
6949  2BF1
6950  2BF2
6951  2BF3
6952  2BF4
6953  2BF5
6954  2BF6
6955  2BF7
6956  2BF8
6957  2BF9
6958  2BFA
6959  2BFB
6960  2BFC
6961  2BFD
6962  2BFE
6963  2BFF
6964  2C00
6965  2C01
6966  2C02
6967  2C03
6968  2C04
6969  2C05
6970  2C06
6971  2C07
6972  2C08
6973  2C09
6974  2C0A
6975  2C0B
6976  2C0C
6977  2C0D
6978  2C0E
6979  2C0F
6980  2C10
6981  2C11
6982  2C12
6983  2C13
6984  2C14
6985  2C15
6986  2C16
6987  2C17
6988  2C18
6989  2C19
6990  2C1A
6991  2C1B
6992  2C1C
6993  2C1D
6994  2C1E
6995  2C1F
6996  2C20
6997  2C21
6998  2C22
6999  2C23
7000  2C24
7001  2C25
7002  2C26
7003  2C27
7004  2C28
7005  2C29
7006  2C2A
7007  2C2B
7008  2C2C
7009  2C2D
7010  2C2E
7011  2C2F
7012  2C30
7013  2C31
7014  2C32
7015  2C33
7016  2C34
7017  2C35
7018  2C36
7019  2C37
7020  2C38
7021  2C39
7022  2C3A
7023  2C3B
7024  2C3C
7025  2C3D
7026  2C3E
7027  2C3F
7028  2C40
7029  2C41
7030  2C42
7031  2C43
7032  2C44
7033  2C45
7034  2C46
7035  2C47
7036  2C48
7037  2C49
7038  2C4A
7039  2C4B
7040  2C4C
7041  2C4D
7042  2C4E
7043  2C4F
7044  2C50
7045  2C51
7046  2C52
7047  2C53
7048  2C54
7049  2C55
7050  2C56
7051  2C57
7052  2C58
7053  2C59
7054  2C5A
7055  2C5B
7056  2C5C
7057  2C5D
7058  2C5E
7059  2C5F
7060  2C60
7061  2C61
7062  2C62
7063  2C63
7064  2C64
7065  2C65
7066  2C66
7067  2C67
7068  2C68
7069  2C69
7070  2C6A
7071  2C6B
7072  2C6C
7073  2C6D
7074  2C6E
7075  2C6F
7076  2C70
7077  2C71
7078  2C72
7079  2C73
7080  2C74
7081  2C75
7082  2C76
7083  2C77
7084  2C78
7085  2C79
7086  2C7A
7087  2C7B
7088  2C7C
7089  2C7D
7090  2C7E
7091  2C7F
7092  2C80
7093  2C81
7094  2C82
7095  2C83
7096  2C84
7097  2C85
7098  2C86
7099  2C87
7100  2C88
7101  2C89
7102  2C8A
7103  2C8B
7104  2C8C
7105  2C8D
7106  2C8E
7107  2C8F
7108  2C90
7109  2C91
7110  2C92
7111  2C93
7112  2C94
7113  2C95
7114  2C96
7115  2C97
7116  2C98
7117  2C99
7118  2C9A
7119  2C9B
7120  2C9C
7121  2C9D
7122  2C9E
7123  2C9F
7124  2CA0
7125  2CA1
7126  2CA2
7127  2CA3
7128  2CA4
7129  2CA5
7130  2CA6
7131  2CA7
7132  2CA8
7133  2CA9
7134  2CAA
7135  2CAB
7136  2CAC
7137  2CAD
7138  2CAE
7139  2CAF
7140  2CB0
7141  2CB1
7142  2CB2
7143  2CB3
7144  2CB4
7145  2CB5
7146  2CB6
7147  2CB7
7148  2CB8
7149  2CB9
7150  2CBA
7151  2CBB
7152  2CBC
7153  2CBD
7154  2CBE
7155  2CBF
7156  2CC0
7157  2CC1
7158  2CC2
7159  2CC3
7160  2CC4
7161  2CC5
7162  2CC6
7163  2CC7
7164  2CC8
7165  2CC9
7166  2CCA
7167  2CCB
7168  2CCC
7169  2CCD
7170  2CCE
7171  2CCF
7172  2CD0
7173  2CD1
7174  2CD2
7175  2CD3
7176  2CD4
7177  2CD5
7178  2CD6
7179  2CD7
7180  2CD8
7181  2CD9
7182  2CDA
7183  2CDB
7184  2CDC
7185  2CDD
7186  2CDE
7187  2CDF
7188  2CE0
7189  2CE1
7190  2CE2
7191  2CE3
7192  2CE4
7193  2CE5
7194  2CE6
7195  2CE7
7196  2CE8
7197  2CE9
7198  2CEA
7199  2CEB
7200  2CEC
7201  2CED
7202  2CEE
7203  2CEF
7204  2CF0
7205  2CF1
7206  2CF2
7207  2CF3
7208  2CF4
7209  2CF5
7210  2CF6
7211  2CF7
7212  2CF8
7213  2CF9
7214  2CFA
7215  2CFB
7216  2CFC
7217  2CFD
7218  2CFE
7219  2CFF
7220  2D00
7221  2D01
7222  2D02
7223  2D03
7224  2D04
7225  2D05
7226  2D06
7227  2D07
7228  2D08
7229  2D09
7230  2D0A
7231  2D0B
7232  2D0C
7233  2D0D
7234  2D0E
7235  2D0F
7236  2D10
7237  2D11
7238  2D12
7239  2D13
7240  2D14
7241  2D15
7242  2D16
7243  2D17
7244  2D18
7245  2D19
7246  2D1A
7247  2D1B
7248  2D1C
7249  2D1D
7250  2D1E
7251  2D1F
7252  2D20
7253  2D21
7254  2D22
7255  2D23
7256  2D24
7257  2D25
7258  2D26
7259  2D27
7260  2D28
7261  2D29
7262  2D2A
7263  2D2B
7264  2D2C
7265  2D2D
7266  2D2E
7267  2D2F
7268  2D30
7269  2D31
7270  2D32
7271  2D33
7272  2D34
7273  2D35
7274  2D36
7275  2D37
7276  2D38
7277  2D39
7278  2D3A
7279  2D3B
7280  2D3C
7281  2D3D
7282  2D3E
7283  2D3F
7284  2D40
7285  2D41
7286  2D42
7287  2D43
7288  2D44
7289  2D45
7290  2D46
7291  2D47
7292  2D48
7293  2D49
7294  2D4A
7295  2D4B
7296  2D4C
7297  2D4D
7298  2D4E
7299  2D4F
7300  2D50
7301  2D51
7302  2D52
7303  2D53
7304  2D54
7305  2D55
7306  2D56
7307  2D57
7308  2D58
7309  2D59
7310  2D5A
7311  2D5B
7312  2D5C
7313  2D5D
7314  2D5E
7315  2D5F
7316  2D60
7317  2D61
7318  2D62
7319  2D63
7320  2D64
7321  2D65
7322  2D66
7323  2D67
7324  2D68
7325  2D69
7326  2D6A
7327  2D6B
7328  2D6C
7329  2D6D
7330  2D6E
7331  2D6F
7332  2D70
7333  2D71
7334  2D72
7335  2D73
7336  2D74
7337  2D75
7338  2D76
7339  2D77
7340  2D78
7341  2D79
7342  2D7A
7343  2D7B
7344  2D7C
7345  2D7D
7346  2D7E
7347  2D7F
7348  2D80
7349  2D81
7350  2D82
7351  2D83
7352  2D84
7353  2D85
7354  2D86
7355  2D87
7356  2D88
7357  2D89
7358  2D8A
7359  2D8B
7360  2D8C
7361  2D8D
7362  2D8E
7363  2D8F
7364  2D90
7365  2D91
7366  2D92
7367  2D93
7368  2D94
7369  2D95
7370  2D96
7371  2D97
7372  2D98
7373  2D99
7374  2D9A
7375  2D9B
7376  2D9C
7377  2D9D
7378  2D9E
7379  2D9F
7380  2DA0
7381  2DA1
7382  2DA2
7383  2DA3
7384  2DA4
7385  2DA5
7386  2DA6
7387  2DA7
7388  2DA8
7389  2DA9
7390  2DAA
7391  2DAB
7392  2DAC
7393  2DAD
7394  2DAE
7395  2DAF
7396  2DB0
7397  2DB1
7398  2DB2
7399  2DB3
7400  2DB4
7401  2DB5
7402  2DB6
7403  2DB7
7404  2DB8
7405  2DB9
7406  2DBA
7407  2DBB
7408  2DBC
7409  2DBD
7410  2DBE
7411  2DBF
7412  2DC0
7413  2DC1
7414  2DC2
7415  2DC3
7416  2DC4
7417  2DC5
7418  2DC6
7419  2DC7
7420  2DC8
7421  2DC9
7422  2DCA
7423  2DCB
7424  2DCC
7425  2DCD
7426  2DCE
7427  2DCF
7428  2DD0
7429  2DD1
7430  2DD2
7431  2DD3
7432  2DD4
7433  2DD5
7434  2DD6
7435  2DD7
7436  2DD8
7437  2DD9
7438  2DDA
7439  2DDB
7440  2DDC
7441  2DDD
7442  2DDE
7443  2DDF
7444  2DE0
7445  2DE1
7446  2DE2
7447  2DE3
7448  2DE4
7449  2DE5
7450  2DE6
7451  2DE7
7452  2DE8
7453  2DE9
7454  2DEA
7455  2DEB
7456  2DEC
7457  2DED
7458  2DEE
7459  2DEF
7460  2DF0
7461  2DF1
7462  2DF2
7463  2DF3
7464  2DF4
7465  2DF5
7466  2DF6
7467  2DF7
7468  2DF8
7469  2DF9
7470  2DFA
7471  2DFB
7472  2DFC
7473  2DFD
7474  2DFE
7475  2DFF
7476  2E00
7477  2E01
7478  2E02
7479  2E03
7480  2E04
7481  2E05
7482  2E06
7483  2E07
7484  2E08
7485  2E09
7486  2E0A
7487  2E0B
7488  2E0C
7489  2E0D
7490  2E0E
7491  2E0F
7492  2E10
7493  2E11
7494  2E12
7495  2E13
7496  2E14
7497  2E15
7498  2E16
7499  2E17
7500  2E18
7501  2E19
7502  2E1A
7503  2E1B
7504  2E1C
7505  2E1D
7506  2E1E
7507  2E1F
7508  2E20
7509  2E21
7510  2E22
7511  2E23
7512  2E24
7513  2E25
7514  2E26
7515  2E27
7516  2E28
7517  2E29
7518  2E2A
7519  2E2B
7520  2E2C
7521  2E2D
7522  2E2E
7523  2E2F
7524  2E30
7525  2E31
7526  2E32
7527  2E33
7528  2E34
7529  2E35
7530  2E36
7531  2E37
7532  2E38
7533  2E39
7534  2E3A
7535  2E3B
7536  2E3C
7537  2E3D
7538  2E3E
7539  2E3F
7540  2E40
7541  2E41
7542  2E42
7543  2E43
7544  2E44
7545  2E45
7546  2E46
7547  2E47
7548  2E48
7549  2E49
7550  2E4A
7551  2E4B
7552  2E4C
7553  2E4D
7554  2E4E
7555  2E4F
7556  2E50
7557  2E51
7558  2E52
7559  2E53
7560  2E54
7561  2E55
7562  2E56
7563  2E57
7564  2E58
7565  2E59
7566  2E5A
7567  2E5B
7568  2E5C
7569  2E5D
7570  2E5E
7571  2E5F
7572  2E60
7573  2E61
7574  2E62
7575  2E63
7576  2E64
7577  2E65
7578  2E66
7579  2E67
7580  2E68
7581  2E69
7582  2E6A
7583  2E6B
7584  2E6C
7585  2E6D
7586  2E6E
7587  2E6F
7588  2E70
7589  2E71
7590  2E72
7591  2E73
7592  2E74
7593  2E75
7594  2E76
7595  2E77
7596  2E78
7597  2E79
7598  2E7A
7599  2E7B
7600  2E7C
7601  2E7D
7602  2E7E
7603  2E7F
7604  2E80
7605  2E81
7606  2E82
7607  2E83
7608  2E84
7609  2E85
7610  2E86
7611  2E87
7612  2E88
7613  2E89
7614  2E8A
7615  2E8B
7616  2E8C
7617  2E8D
7618  2E8E
7619  2E8F
7620  2E90
7621  2E91
7622  2E92
7623  2E93
7624  2E94
7625  2E95
7626  2E96
7627  2E97
7628  2E98
7629  2E99
7630  2E9A
7631  2E9B
7632  2E9C
7633  2E9D
7634  2E9E
7635  2E9F
7636  2EA0
7637  2EA1
7638  2EA2
7639  2EA3
7640  2EA4
7641  2EA5
7642  2EA6
7643  2EA7
7644  2EA8
7645  2EA9
7646  2EAA
7647  2EAB
7648  2EAC
7649  2EAD
7650  2EAE
7651  2EAF
7652  2EB0
7653  2EB1
7654  2EB2
7655  2EB3
7656  2EB4
7657  2EB5
7658  2EB6
7659  2EB7
7660  2EB8
7661  2EB9
7662  2EBA
7663  2EBB
7664  2EBC
7665  2EBD
7666  2EBE
7667  2EBF
7668  2EC0
7669  2EC1
7670  2EC2
7671  2EC3
7672  2EC4
7673  2EC5
7674  2EC6
7675  2EC7
7676  2EC8
7677  2EC9
7678  2ECA
7679  2ECB
7680  2ECC
7681  2ECD
7682  2ECE
7683  2ECF
7684  2ED0
7685  2ED1
7686  2ED2
7687  2ED3
7688  2ED4
7689  2ED5
7690  2ED6
7691  2ED7
7692  2ED8
7693  2ED9
7694  2EDA
7695  2EDB
7696  2EDC
7697  2EDD
7698  2EDE
7699  2EDF
7700  2EE0
7701  2EE1
7702  2EE2
7703  2EE3
7704  2EE4
7705  2EE5
7706  2EE6
7707  2EE7
7708  2EE8
7709  2EE9
7710  2EEA
7711  2EEB
7712  2EEC
7713  2EED
7714  2EEE
7715  2EEF
7716  2EF0
7717  2EF1
7718  2EF2
7719  2EF3
7720  2EF4
7721  2EF5
7722  2EF6
7723  2EF7
7724  2EF8
7725  2EF9
7726  2EFA
7727  2EFB
7728  2EFC
7729  2EFD
7730  2EFE
7731  2EFF
7732  2F00
7733  2F01
7734  2F02
7735  2F03
7736  2F04
7737  2F05
7738  2F06
7739  2F07
7740  2F08
7741  2F09
7742  2F0A
7743  2F0B
7744  2F0C
7745  2F0D
7746  2F0E
7747  2F0F
7748  2F10
7749  2F11
7750  2F12
7751  2F13
7752  2F14
7753  2F15
7754  2F16
7755  2F17
7756  2F18
7757  2F19
7758  2F1A
7759  2F1B
7760  2F1C
7761  2F1D
7762  2F1E
7763  2F1F
7764  2F20
7765  2F21
7766  2F22
7767  2F23
7768  2F24
7769  2F25
7770  2F26
7771  2F27
7772  2F28
7773  2F29
7774  2F2A
7775  2F2B
7776  2F2C
7777  2F2D
7778  2F2E
7779  2F2F
7780  2F30
7781  2F31
7782  2F32
7783  2F33
7784  2F34
7785  2F35
7786  2F36
7787  2F37
7788  2F38
7789  2F39
7790  2F3A
7791  2F3B
7792  2F3C
7793  2F3D
7794  2F3E
7795  2F3F
7796  2F40
7797  2F41
7798  2F42
7799  2F43
7800  2F44
7801  2F45
7802  2F46
7803  2F47
7804  2F48
7805  2F49
7806  2F4A
7807  2F4B
7808  2F4C
7809  2F4D
7810  2F4E
7811  2F4F
7812  2F50
7813  2F51
7814  2F52
7815  2F53
7816  2F54
7817  2F55
7818  2F56
7819  2F57
7820  2F58
7821  2F59
7822  2F5A
7823  2F5B
7824  2F5C
7825  2F5D
7826  2F5E
7827  2F5F
7828  2F60
7829  2F61
7830  2F62
7831  2F63
7832  2F64
7833  2F65
7834  2F66
7835  2F67
7836  2F68
7837  2F69
7838  2F6A
7839  2F6B
7840  2F6C
7841  2F6D
7842  2F6E
7843  2F6F
7844  2F70
7845  2F71
7846  2F72
7847  2F73
7848  2F74
7849  2F75
7850  2F76
7851  2F77
7852  2F78
7853  2F79
7854  2F7A
7855  2F7B
7856  2F7C
7857  2F7D
7858  2F7E
7859  2F7F
7860  2F80
7861  2F81
7862  2F82
7863  2F83
7864  2F84
7865  2F85
7866  2F86
7867  2F87
7868  2F88
7869  2F89
7870  2F8A
7871  2F8B
7872  2F8C
7873  2F8D
7874  2F8E
7875  2F8F
7876  2F90
7877  2F91
7878  2F92
7879  2F93
7880  2F94
7881  2F95
7882  2F96
7883  2F97
7884  2F98
7885  2F99
7886  2F9A
7887  2F9B
7888  2F9C
7889  2F9D
7890  2F9E
7891  2F9F
7892  2FA0
7893  2FA1
7894  2FA2
7895  2FA3
7896  2FA4
7897  2FA5
7898  2FA6
7899  2FA7
7900  2FA8
7901  2FA9
7902  2FAA
7903  2FAB
7904  2FAC
7905  2FAD
7906  2FAE
7907  2FAF
7908  2FB0
7909  2FB1
7910  2FB2
7911  2FB3
7912  2FB4
7913  2FB5
7914  2FB6
7915  2FB7
7916  2FB8
7917  2FB9
7918  2FBA
7919  2FBB
7920  2FBC
7921  2FBD
7922  2FBE
7923  2FBF
7924  2FC0
7925  2FC1
7926  2FC2
7927  2FC3
7928  2FC4
7929  2FC5
7930  2FC6
7931  2FC7
7932  2FC8
7933  2FC9
7934  2FCA
7935  2FCB
7936  2FCC
7937  2FCD
7938  2FCE
7939  2FCF
7940  2FD0
7941  2FD1
7942  2FD2
7943  2FD3
7944  2FD4
7945  2FD5
7946  2FD6
7947  2FD7
7948  2FD8
7949  2FD9
7950  2FDA
7951  2FDB
7952  2FDC
7953  2FDD
7954  2FDE
7955  2FDF
7956  2FE0
7957  2FE1
7958  2FE2
7959  2FE3
7960  2FE4
7961  2FE5
7962  2FE6
7963  2FE7
7964  2FE8
7965  2FE9
7966  2FEA
7967  2FEB
7968  2FEC
7969  2FED
7970  2FEE
7971  2FEF
7972  2FF0
7973  2FF1
7974  2FF2
7975  2FF3
7976  2FF4
7977  2FF5
7978  2FF6
7979  2FF7
7980  2FF8
7981  2FF9
7982  2FFA
7983  2FFB
7984  2FFC
7985  2FFD
7986  2FFE
7987  2FFF
7988  3000
7989  3001
7990  3002
7991  3003
7992  3004
7993  3005
7994  3006
7995  3007
7996  3008
7997  3009
7998  300A
7999  300B
8000  300C
8001  300D
8002  300E
8003  300F
8004  3010
8005  3011
8006  3012
8007  3013
8008  3014
8009  3015
8010  3016
8011  3017
8012  3018
8013  3019
8014  301A
8015  301B
8016  301C
8017  301D
8018  301E
8019  301F
8020  3020
8021  3021
8022  3022
8023  3023
8024  3024
8025  3025
8026  3026
8027  3027
8028  3028
8029  3029
8030  302A
8031  302B
8032  302C
8033  302D
8034  302E
8035  302F
8036  3030
8037  3031
8038  3032
8039  3033
8040  3034
8041  3035
8042  3036
8043  3037
8044  3038
8045  3039
8046  303A
8047  303B
8048  303C
8049  303D
8050  303E
8051  303F
8052  3040
8053  3041
8054  3042
8055  3043
8056  3044
8057  3045
8058  3046
8059  3047
8060  3048
8061  3049
8062  304A
8063  304B
8064  304C
8065  304D
8066  304E
8067  304F
8068  3050
8069  3051
8070  3052
8071  3053
8072  3054
8073  3055
8074  3056
8075  3057
8076  3058
8077  3059
8078  305A
8079  305B
8080  305C
8081  305D
8082  305E
8083  305F
8084  3060
8085  3061
8086  3062
8087  3063
8088  3064
8089  3065
8090  3066
8091  3067
8092  3068
8093  3069
8094  306A
8095  306B
8096  306C
8097  306D
8098  306E
8099  306F
8100  3070
8101  3071
8102  3072
8103  3073
8104  3074
8105  3075
8106  3076
8107  3077
8108  3078
8109  3079
8110  307A
8111  307B
8112  307C
8113  307D
8114  307E
8115  307F
8116  3080
8117  3081
8118  3082
8119  3083
8120  3084
8121  3085
8122  3086
8123  3087
8124  3088
8125  3089
8126  308A
8127  308B
8128  308C
8129  308D
8130  308E
8131  308F
8132  3090
8133  3091
8134  3092
8135  3093
8136  3094
8137  3095
8138  3096
8139  3097
8140  3098
8141  3099
8142  309A
8143  309B
8144  309C
8145  309D
8146  309E
8147  309F
8148  30A0
8149  30A1
8150  30A2
8151  30A3
8152  30A4
8153  30A5
8154  30A6
8155  30A7
8156  30A8
8157  30A9
8158  30AA
8159  30AB
8160  30AC
8161  30AD
8162  30AE
8163  30AF
8164  30B0
8165  30B1
8166  30B2
8167  30B3
8168  30B4
8169  30B5
8170  30B6
8171  30B7
8172  30B8
8173  30B9
8174  30BA
8175  30BB
8176  30BC
8177  30BD
8178  30BE
8179  30BF
8180  30C0
8181  30C1
8182  30C2
8183  30C3
8184  30C4
8185  30C5
8186  30C6
8187  30C7
8188  30C8
8189  30C9
8190  30CA
8191  30CB
8192  30CC
8193  30CD
8194  30CE
8195  30CF
8196  30D0
8197  30D1
8198  30D2
8199  30D3
8200  30D4
8201  30D5
8202  30D6
8203  30D7
8204  30D8
8205  30D9
8206  30DA
8207  30DB
8208  30DC
8209  30DD
8210  30DE
8211  30DF
8212  30E0
8213  30E1
8214  30E2
8215  30E3
8216  30E4
8217  30E5
8218  30E6
8219  30E7
8220  30E8
8221  30E9
8222  30EA
8223  30EB
8224  30EC
8225  30ED
8226  30EE
8227  30EF
8228  30F0
8229  30F1
8230  30F2
8231  30F3
8232  30F4
8233  30F5
8234  30F6
8235  30F7
8236  30F8
8237  30F9
8238  30FA
8239  30FB
8240  30FC
8241  30FD
8242  30FE
8243  30FF
8244  3100
8245  3101
8246  3102
8247  3103
8248  3104
8249  3105
8250  3106
8251  3107
8252  3108
8253  3109
8254  310A
8255  310B
8256  310C
8257  310D
8258  310E
8259  310F
8260  3110
8261  3111
8262  3112
8263  3113
8264  3114
8265  3115
8266  3116
8267  3117
8268  3118
8269  3119
8270  311A
8271  311B
8272  311C
8273  311D
8274  311E
8275  311F
8276  3120
8277  3121
8278  3122
8279  3123
8280  3124
8281  3125
8282  3126
8283  3127
8284  3128
8285  3129
8286  312A
8287  312B
8288  312C
8289  312D
8290  312E
8291  312F
8292  3130
8293  3131
8294  3132
8295  3133
8296  3134
8297  3135
8298  3136
8299  3137
8300  3138
8301  3139
8302  313A
8303  313B
8304  313C
8305  313D
8306  313E
8307  313F
8308  3140
8309  3141
8310  3142
8311  3143
8312  3144
8313  3145
8314  3146
8315  3147
8316  3148
8317  3149
8318  314A
8319  314B
8320  314C
8321  314D
8322  314E
8323  314F
8324  3150
8325  3151
8326  3152
8327  3153
8328  3154
8329  3155
8330  3156
8331  3157
8332  3158
8333  3159
8334  315A
8335  315B
8336  315C
8337  315D
8338  315E
8339  315F
8340  3160
8341  3161
8342  3162
8343  3163
8344  3164
8345  3165
8346  3166
8347  3167
8348  3168
8349  3169
8350  316A
8351  316B
8352  316C
8353  316D
8354  316E
8355  316F
8356  3170
8357  3171
8358  3172
8359  3173
8360  3174
8361  3175
8362  3176
8363  3177
8364  3178
8365  3179
8366  317A
8367  317B
8368  317C
8369  317D
8370  317E
8371  317F
8372  3180
8373  3181
8374  3182
8375  3183
8376  3184
8377  3185
8378  3186
8379  3187
8380  3188
8381  3189
8382  318A
8383  318B
8384  318C
8385  318D
8386  318E
8387  318F
8388  3190
8389  3191
8390  3192
8391  3193
8392  3194
8393  3195
8394  3196
8395  3197
8396  3198
8397  3199
8398  319A
8399  319B
8400  319C
8401  319D
8402  319E
8403  319F
8404  31A0
8405  31A1
8406  31A2
8407  31A3
8408  31A4
8409  31A5
8410  31A6
8411  31A7
8412  31A8
8413  31A9
8414  31AA
8415  31AB
8416  31AC
8417  31AD
8418  31AE
8419  31AF
8420  31B0
8421  31B1
8422  31B2
8423  31B3
8424  31B4
8425  31B5
8426  31B6
8427  31B7
8428  31B8
8429  31B9
8430  31BA
8431  31BB
8432  31BC
8433  31BD
8434  31BE
8435  31BF
8436  31C0
8437  31C1
8438  31C2
8439  31C3
8440  31C4
8441  31C5
8442  31C6
8443  31C7
8444  31C8
8445  31C9
8446  31CA
8447  31CB
8448  31CC
8449  31CD
8450  31CE
8451  31CF
8452  31D0
8453  31D1
8454  31D2
8455  31D3
8456  31D4
8457  31D5
8458  31D6
8459  31D7
8460  31D8
8461  31D9
8462  31DA
8463  31DB
8464  31DC
8465  31DD
8466  31DE
8467  31DF
8468  31E0
8469  31E1
8470  31E2
8471  31E3
8472  31E4
8473  31E5
8474  31E6
8475  31E7
8476  31E8
8477  31E9
8478  31EA
8479  31EB
8480  31EC
8481  31ED
8482  31EE
8483  31EF
8484  31F0
8485  31F1
8486  31F2
8487  31F3
8488  31F4
8489  31F5
8490  31F6
8491  31F7
8492  31F8
8493  31F9
8494  31FA
8495  31FB
8496  31FC
8497  31FD
8498  31FE
8499  31FF
8500  3200
8501  3201
8502  3202
8503  3203
8504  3204
8505  3205
8506  3206
8507  3207
8508  3208
8509  3209
8510  320A
8511  320B
8512  320C
8513  320D
8514  320E
8515  320F
8516  3210
8517  3211
8518  3212
8519  3213
8520  3214
8521  3215
8522  3216
8523  3217
8524  3218
8525  3219
8526  321A
8527  321B
8528  321C
8529  321D
8530  321E
8531  321F
8532  3220
8533  3221
8534  3222
8535  3223
8536  3224
8537  3225
8538  3226
8539  3227
8540  3228
8541  3229
8542  322A
8543  322B
8544  322C
8545  322D
8546  322E
8547  322F
8548  3230
8549  3231
8550  3232
8551  3233
8552  3234
8553  3235
8554  3236
8555  3237
8556  3238
8557  3239
8558  323A
8559  323B
8560  323C
8561  323D
8562  323E
8563  323F
8564  3240
8565  3241
8566  3242
8567  3243
8568  3244
8569  3245
8570  3246
8571  3247
8572  3248
8573  3249
8574  324A
8575  324B
8576  324C
8577  324D
8578  324E
8579  324F
8580  3250
8581  3251
8582  3252
8583  3253
8584  3254
8585  3255
8586  3256
8587  3257
8588  3258
8589  3259
8590  325A
8591  325B
8592  325C
8593  325D
8594  325E
8595  325F
8596  3260
8597  3261
8598  3262
8599  3263
8600  3264
8601  3265
8602  3266
8603  3267
8604  3268
8605  3269
8606  326A
8607  326B
8608  326C
8609  326D
8610  326E
8611  326F
8612  3270
8613  3271
8614  3272
8615  3273
8616  3274
8617  3275
8618  3276
8619  3277
8620  3278
8621  3279
8622  327A
8623  327B
8624  327C
8625  327D
8626  327E
8627  327F
8628  3280
8629  3281
8630  3282
8631  3283
8632  3284
8633  3285
8634  3286
8635  3287
8636  3288
8637  3289
8638  328A
8639  328B
8640  328C
8641  328D
8642  328E
8643  328F
8644  3290
8645  3291
8646  3292
8647  3293
8648  3294
8649  3295
8650  3296
8651  3297
8652  3298
8653  3299
8654  329A
8655  329B
8656  329C
8657  329D
8658  329E
8659  329F
8660  32A0
8661  32A1
8662  32A2
8663  32A3
8664  32A4
8665  32A5
8666  32A6
8667  32A7
8668  32A8
8669  32A9
8670  32AA
8671  32AB
8672  32AC
8673  32AD
8674  32AE
8675  32AF
8676  32B0
8677  32B1
8678  32B2
8679  32B3
8680  32B4
8681  32B5
8682  32B6
8683  32B7
8684  32B8
8685  32B9
8686  32BA
8687  32BB
8688  32BC
8689  32BD
8690  32BE
8691  32BF
8692  32C0
8693  32C1
8694  32C2
8695  32C3
8696  32C4
8697  32C5
8698  32C6
8699  32C7
8700  32C8
8701  32C9
8702  32CA
8703  32CB
8704  32CC
8705  32CD
8706  32CE
8707  32CF
8708  32D0
8709  32D1
8710  32D2
8711  32D3
8712  32D4
8713  32D5
8714  32D6
8715  32D7
8716  32D8
8717  32D9
8718  32DA
8719  32DB
8720  32DC
8721  32DD
8722  32DE
8723  32DF
8724  32E0
8725  32E1
8726  32E2
8727  32E3
8728  32E4
8729  32E5
8730  32E6
8731  32E7
8732  32E8
8733  32E9
8734  32EA
8735  32EB
8736  32EC
8737  32ED
8738  32EE
8739  32EF
8740  32F0
8741  32F1
8742  32F2
8743  32F3
8744  32F4
8745  32F5
8746  32F6
8747  32F7
8748  32F8
8749  32F9
8750  32FA
8751  32FB
8752  32FC
8753  32FD
8754  32FE
8755  32FF
8756  3300
8757  3301
8758  3302
8759  3303
8760  3304
8761  3305
8762  3306
8763  3307
8764  3308
8765  3309
8766  330A
8767  330B
8768  330C
8769  330D
8770  330E
8771  330F
8772  3310
8773  3311
8774  3312
8775  3313
8776  3314
8777  3315
8778  3316
8779  3317
8780  3318
8781  3319
8782  331A
8783  331B
8784  331C
8785  331D
8786  331E
8787  331F
8788  3320
8789  3321
8790  3322
8791  3323
8792  3324
8793  3325
8794  3326
8795  3327
8796  3328
8797  3329
8798  332A
8799  332B
8800  332C
8801  332D
8802  332E
8803  332F
8804  3330
8805  3331
8806  3332
8807  3333
8808  3334
8809  3335
8810  3336
8811  3337
8812  3338
8813  3339
8814  333A
8815  333B
8816  333C
8817  333D
8818  333E
8819  333F
8820  3340
8821  3341
8822  3342
8823  3343
8824  3344
8825  3345
8826  3346
8827  3347
8828  3348
8829  3349
8830  334A
8831  334B
8832  334C
8833  334D
8834  334E
8835  334F
8836  3350
8837  3351
8838  3352
8839  3353
8840  3354
8841  3355
8842  3356
8843  3357
8844  3358
8845  3359
8846  335A
8847  335B
8848  335C
8849  335D
8850  335E
8851  335F
8852  3360
8853  3361
8854  3362
8855  3363
8856  3364
8857  3365
8858  3366
8859  3367
8860  3368
8861  3369
8862  336A
8863  336B
8864  336C
8865  336D
8866  336E
8867  336F
8868  3370
8869  3371
8870  3372
8871  3373
8872  3374
8873  3375
8874  3376
8875  3377
8876  3378
8877  3379
8878  337A
8879  337B
8880  337C
8881  337D
8882  337E
8883  337F
8884  3380
8885  3381
8886  3382
8887  3383
8888  3384
8889  3385
8890  3386
8891  3387
8892  3388
8893  3389
8894  338A
8895  338B
8896  338C
8897  338D
8898  338E
8899  338F
8900  3390
8901  3391
8902  3392
8903  3393
8904  3394
8905  3395
8906  3396
8907  3397
8908  3398
8909  3399
8910  339A
8911  339B
8912  339C
8913  339D
8914  339E
8915  339F
8916  33A0
8917  33A1
8918  33A2
8919  33A3
8920  33A4
8921  33A5
8922  33A6
8923  33A7
8924  33A8
8925  33A9
8926  33AA
8927  33AB
8928  33AC
8929  33AD
8930  33AE
8931  33AF
8932  33B0
8933  33B1
8934  33B2
8935  33B3
8936  33B4
8937  33B5
8938  33B6
8939  33B7
8940  33B8
8941  33B9
8942  33BA
8943  33BB
8944  33BC
8945  33BD
8946  33BE
8947  33BF
8948  33C0
8949  33C1
8950  33C2
8951  33C3
8952  33C4
8953  33C5
8954  33C6
8955  33C7
8956  33C8
8957  33C9
8958  33CA
8959  33CB
8960  33CC
8961  33CD
8962  33CE
8963  33CF
8964  33D0
8965  33D1
8966  33D2
8967  33D3
8968  33D4
8969  33D5
8970  33D6
8971  33D7
8972  33D8
8973  33D9
8974  33DA
8975  33DB
8976  33DC
8977  33DD
8978  33DE
8979  33DF
8980  33E0
8981  33E1
8982  33E2
8983  33E3
8984  33E4
8985  33E5
8986  33E6
8987  33E7
8988  33E8
8989  33E9
8990  33EA
8991  33EB
8992  33EC
8993  33ED
8994  33EE
8995  33EF
8996  33F0
8997  33F1
8998  33F2
8999  33F3
9000  33F4
9001  33F5
9002  33F6
9003  33F7
9004  33F8
9005  33F9
9006  33FA
9007  33FB
9008  33FC
9009  33FD
9010  33FE
9011  33FF
9012  3400
9013  3401
9014  3402
9015  3403
9016  3404
9017  3405
9018  3406
9019  3407
9020  3408
9021  3409
9022  340A
9023  340B
9024  340C
9025  340D
9026  340E
9027  340F
9028  3410
9029  3411
9030  3412
9031  3413
9032  3414
9033  3415
9034  3416
9035  3417
9036  3418
9037  3419
9038  341A
9039  341B
9040  341C
9041  341D
9042  341E
9043  341F
9044  3420
9045  3421
9046  3422
9047  3423
9048  3424
9049  3425
9050  3426
9051  3427
9052  3428
9053  3429
9054  342A
9055  342B
9056  342C
9057  342D
9058  342E
9059  342F
9060  3430
9061  3431
9062  3432
9063  3433
9064  3434
9065  3435
9066  3436
9067  3437
9068  3438
9069  3439
9070  343A
9071  343B
9072  343C
9073  343D
9074  343E
9075  343F
9076  3440
9077  3441
9078  3442
9079  3443
9080  3444
9081  3445
9082  3446
9083  3447
9084  3448
9085  3449
9086  344A
9087  344B
9088  344C
9089  344D
9090  344E
9091  344F
9092  3450
9093  3451
9094  3452
9095  3453
9096  3454
9097  3455
9098  3456
9099  3457
9100  3458
9101  3459
9102  345A
9103  345B
9104  345C
9105  345D
9106  345E
9107  345F
9108  3460
9109  3461
9110  3462
9111  3463
9112  3464
9113  3465
9114  3466
9115  3467
9116  3468
9117  3469
9118  346A
9119  346B
9120  346C
9121  346D
9122  346E
9123  346F
9124  3470
9125  3471
9126  3472
9127  3473
9128  3474
9129  3475
9130  3476
9131  3477
9132  3478
9133  3479
9134  347A
9135  347B
9136  347C
9137  347D
9138  347E
9139  347F
9140  3480
9141  3481
9142  3482
9143  3483
9144  3484
9145  3485
9146  3486
9147  3487
9148  3488
9149  3489
9150  348A
9151  348B
9152  348C
9153  348D
9154  348E
9155  348F
9156  3490
9157  3491
9158  3492
9159  3493
9160  3494
9161  3495
9162  3496
9163  3497
9164  3498
9165  3499
9166  349A
9167  349B
9168  349C
9169  349D
9170  349E
9171  349F
9172  34A0
9173  34A1
9174  34A2
9175  34A3
9176  34A4
9177  34A5
9178  34A6
9179  34A7
9180  34A8
9181  34A9
9182  34AA
9183  34AB
9184  34AC
9185  34AD
9186  34AE
9187  34AF
9188  34B0
9189  34B1
9190  34B2
9191  34B3
9192  34B4
9193  34B5
9194  34B6
9195  34B7
9196  34B8
9197  34B9
9198  34BA
9199  34BB
9200  34BC
9201  34BD
9202  34BE
9203  34BF
9204  34C0
9205  34C1
9206  34C2
9207  34C3
9208  34C4
9209  34C5
9210  34C6
9211  34C7
9212  34C8
9213  34C9
9214  34CA
9215  34CB
9216  34CC
9217  34CD
9218  34CE
9219  34CF
9220  34D0
9221  34D1
9222  34D2
9223  34D3
9224  34D4
9225  34D5
9226  34D6
9227  34D7
9228  34D8
9229  34D9
9230  34DA
9231  34DB
9232  34DC
9233  34DD
9234  34DE
9235  34DF
9236  34E0
9237  34E1
9238  34E2
9239  34E3
9240  34E4
9241  34E5
9242  34E6
9243  34E7
9244  34E8
9245  34E9
9246  34EA
9247  34EB
9248  34EC
9249  34ED
9250  34EE
9251  34EF
9252  34F0
9253  34F1
9254  34F2
9255  34F3
9256  34F4
9257  34F5
9258  34F6
9259  34F7
9260  34F8
9261  34F9
9262  34FA
9263  34FB
9264  34FC
9265  34FD
9266  34FE
9267  34FF
9268  3500
9269  3501
9270  3502
9271  3503
9272  3504
9273  3505
9274  3506
9275  3507
9276  3508
9277  3509
9278  350A
9279  350B
9280  350C
9281  350D
9282  350E
9283  350F
9284  3510
9285  3511
9286  3512
9287  3513
9288  3514
9289  3515
9290  3516
9291  3517
9292  3518
9293  3519
9294  351A
9295  351B
9296  351C
9297  351D
9298  351E
9299  351F
9300  3520
9301  3521
9302  3522
9303  3523
9304  3524
9305  3525
9306  3526
9307  3527
9308  3528
9309  3529
9310  352A
9311  352B
9312  352C
9313  352D
9314  352E
9315  352F
9316  3530
9317  3531
9318  3532
9319  3533
9320  3534
9321  3535
9322  3536
9323  3537
9324  3538
9325  3539
9326  353A
9327  353B
9328  353C
9329  353D
9330  353E
9331  353F
9332  3540
9333  3541
9334  3542
9335  3543
9336  3544
9337  3545
9338  3546
9339  3547
9340  3548
9341  3549
9342  354A
9343  354B
9344  354C
9345  354D
9346  354E
9347  354F
9348  3550
9349  3551
9350  3552
9351  3553
9352  3554
9353  3555
9354  3556
9355  3557
9356  3558
9357  3559
9358  355A
9359  355B
9360  355C
9361  355D
9362  355E
9363  355F
9364  3560
9365  3561
9366  3562
9367  3563
9368  3564
9369  3565
9370  3566
9371  3567
9372  3568
9373  3569
9374  356A
9375  356B
9376  356C
9377  356D
9378  356E
9379  356F
9380  3570
9381  3571
9382  3572
9383  3573
9384  3574
9385  3575
9386  3576
9387  3577
9388  3578
9389  3579
9390  357A
9391  357B
9392  357C
9393  357D
9394  357E
9395  357F
9396  3580
9397  3581
9398  3582
9399  3583
9400  3584
9401  3585
9402  3586
9403  3587
9404  3588
9405  3589
9406  358A
9407  358B
9408  358C
9409  358D
9410  358E
9411  358F
9412  3590
9413  3591
9414  3592
9415  3593
9416  3594
9417  3595
9418  3596
9419  3597
9420  3598
9421  3599
9422  359A
9423  359B
9424  359C
9425  359D
9426  359E
9427  359F
9428  35A0
9429  35A1
9430  35A2
9431  35A3
9432  35A4
9433  35A5
9434  35A6
9435  35A7
9436  35A8
9437  35A9
9438  35AA
9439  35AB
9440  35AC
9441  35AD
9442  35AE
9443  35AF
9444  35B0
9445  35B1
9446  35B2
9447  35B3
9448  35B4
9449  35B5
9450  35B6
9451  35B7
9452  35B8
9453  35B9
9454  35BA
9455  35BB
9456  35BC
9457  35BD
9458  35BE
9459  35BF
9460  35C0
9461  35C1
9462  35C2
9463  35C3
9464  35C4
9465  35C5
9466  35C6
9467  35C7
9468  35C8
9469  35C9
9470  35CA
9471  35CB
9472  35CC
9473  35CD
9474  35CE
9475  35CF
9476  35D0
9477  35D1
9478  35D2
9479  35D3
9480  35D4
9481  35D5
9482  35D6
9483  35D7
9484  35D8
9485  35D9
9486  35DA
9487  35DB
9488  35DC
9489  35DD
9490  35DE
9491  35DF
9492  35E0
9493  35E1
9494  35E2
9495  35E3
9496  35E4
9497  35E5
9498  35E6
9499  35E7
9500  35E8
9501  35E9
9502  35EA
9503  35EB
9504  35EC
9505  35ED
9506  35EE
9507  35EF
9508  35F0
9509  35F1
9510  35F2
9511  35F3
9512  35F4
9513  35F5
9514  35F6
9515  35F7
9516  35F8
9517  35F9
9518  35FA
9519  35FB
9520  35FC
9521  35FD
9522  35FE
9523  35FF
9524  3600
9525  3601
9526  3602
9527  3603
9528  3604
9529  3605
9530  3606
9531  3607
9532  3608
9533  3609
9534  360A
9535  360B
9536  360C
9537  360D
9538  360E
9539  360F
9540  3610
9541  3611
9542  3612
9543  3613
9544  3614
9545  3615
9546  3616
9547  3617
9548  3618
9549  3619
9550  361A
9551  361B
9552  361C
9553  361D
9554  361E
9555  361F
9556  3620
9557  3621
9558  3622
9559  3623
9560  3624
9561  3625
9562  3626
9563  3627
9564  3628
9565  3629
9566  362A
9567  362B
9568  362C
9569  362D
9570  362E
9571  362F
9572  3630
9573  3631
9574  3632
9575  3633
9576  3634
9577  3635
9578  3636
9579  3637
9580  3638
9581  3639
9582  363A
9583  363B
9584  363C
9585  363D
9586  363E
9587  363F
9588  3640
9589  3641
9590  3642
9591  3643
9592  3644
9593  3645
9594  3646
9595  3647
9596  3648
9597  3649
9598  364A
9599  364B
9600  364C
9601  364D
9602  364E
9603  364F
9604  3650
9605  3651
9606  3652
9607  3653
9608  3654
9609  3655
9610  3656
9611  3657
9612  3658
9613  3659
9614  365A
9615  365B
9616  365C
9617  365D
9618  365E
9619  365F
9620  3660
9621  3661
9622  3662
9623  3663
9624  3664
9625  3665
9626  3666
9627  3667
9628  3668
9629  3669
9630  366A
9631  366B
9632  366C
9633  366D
9634  366E
9635  366F
9636  3670
9637  3671
9638  3672
9639  3673
9640  3674
9641  3675
9642  3676
9643  3677
9644  3678
9645  3679
9646  367A
9647  367B
9648  367C
9649  367D
9650  367E
9651  367F
9652  3680
9653  3681
9654  3682
9655  3683
9656  3684
9657  3685
9658  3686
9659  3687
9660  3688
9661  3689
9662  368A
9663  368B
9664  368C
9665  368D
9666  368E
9667  368F
9668  3690
9669  3691
9670  3692
9671  3693
9672  3694
9673  3695
9674  3696
9675  3697
9676  3698
9677  3699
9678  369A
9679  369B
9680  369C
9681  369D
9682  369E
9683  369F
9684  36A0
9685  36A1
9686  36A2
9687  36A3
9688  36A4
9689  36A5
9690  36A6
9691  36A7
9692  36A8
9693  36A9
9694  36AA
9695  36AB
9696  36AC
9697  36AD
9698  36AE
9699  36AF
9700  36B0
9701  36B1
9702  36B2
9703  36B3
9704  36B4
9705  36B5
9706  36B6
9707  36B7
9708  36B8
9709  36B9
9710  36BA
9711  36BB
9712  36BC
9713  36BD
9714  36BE
9715  36BF
9716  36C0
9717  36C1
9718  36C2
9719  36C3
9720  36C4
9721  36C5
9722  36C6
9723  36C7
9724  36C8
9725  36C9
9726  36CA
9727  36CB
9728  36CC
9729  36CD
9730  36CE
9731  36CF
9732  36D0
9733  36D1
9734  36D2
9735  36D3
9736  36D4
9737  36D5
9738  36D6
9739  36D7
9740  36D8
9741  36D9
9742  36DA
9743  36DB
9744  36DC
9745  36DD
9746  36DE
9747  36DF
9748  36E0
9749  36E1
9750  36E2
9751  36E3
9752  36E4
9753  36E5
9754  36E6
9755  36E7
9756  36E8
9757  36E9
9758  36EA
9759  36EB
9760  36EC
9761  36ED
9762  36EE
9763  36EF
9764  36F0
9765  36F1
9766  36F2
9767  36F3
9768  36F4
9769  36F5
9770  36F6
9771  36F7
9772  36F8
9773  36F9
9774  36FA
9775  36FB
9776  36FC
9777  36FD
9778  36FE
9779  36FF
9780  3700
9781  3701
9782  3702
9783  3703
9784  3704
9785  3705
9786  3706
9787  3707
9788  3708
9789  3709
9790  370A
9791  370B
9792  370C
9793  370D
9794  370E
9795  370F
9796  3710
9797  3711
9798  3712
9799  3713
9800  3714
9801  3715
9802  3716
9803  3717
9804  3718
9805  3719
9806  371A
9807  371B
9808  371C
9809  371D
9810  371E
9811  371F
9812  3720
9813  3721
9814  3722
9815  3723
9816  3724
9817  3725
9818  3726
9819  3727
9820  3728
9821  3729
9822  372A
9823  372B
9824  372C
9825  372D
9826  372E
9827  372F
9828  3730
9829  3731
9830  3732
9831  3733
9832  3734
9833  3735
9834  3736
9835  3737
9836  3738
9837  3739
9838  373A
9839  373B
9840  373C
9841  373D
9842  373E
9843  373F
9844  3740
9845  3741
9846  3742
9847  3743
9848  3744
9849  3745
9850  3746
9851  3747
9852  3748
9853  3749
9854  374A
9855  374B
9856  374C
9857  374D
9858  374E
9859  374F
9860  3750
9861  3751
9862  3752
9863  3753
9864  3754
9865  3755
9866  3756
9867  3757
9868  3758
9869  3759
9870  375A
9871  375B
9872  375C
9873  375D
9874  375E
9875  375F
9876  3760
9877  3761
9878  3762
9879  3763
9880  3764
9881  3765
9882  3766
9883  3767
9884  3768
9885  3769
9886  376A
9887  376B
9888  376C
9889  376D
9890  376E
9891  376F
9892  3770
9893  3771
9894  3772
9895  3773
9896  3774
9897  3775
9898  3776
9899  3777
9900  3778
9901  3779
9902  377A
9903  377B
9904  377C
9905  377D
9906  377E
9907  377F
9908  3780
9909  3781
9910  3782
9911  3783
9912  3784
9913  3785
9914  3786
9915  3787
9916  3788
9917  3789
9918  378A
9919  378B
9920  378C
9921  378D
9922  378E
9923  378F
9924  3790
9925  3791
9926  3792
9927  3793
9928  3794
9929  3795
9930  3796
9931  3797
9932  3798
9933  3799
9934  379A
9935  379B
9936  379C
9937  379D
9938  379E
9939  379F
9940  37A0
9941  37A1
9942  37A2
9943  37A3
9944  37A4
9945  37A5
9946  37A6
9947  37A7
9948  37A8
9949  37A9
9950  37AA
9951  37AB
9952  37AC
9953  37AD
9954  37AE
9955  37AF
9956  37B0
9957  37B1
9958  37B2
9959  37B3
9960  37B4
9961  37B5
9962  37B6
9963  37B7
9964  37B8
9965  37B9
9966  37BA
9967  37BB
9968  37BC
9969  37BD
9970  37BE
9971  37BF
9972  37C0
9973  37C1
9974  37C2
9975  37C3
9976  37C4
9977  37C5
9978  37C6
9979  37C7
9980  37C8
9981  37C9
9982  37CA
9983  37CB
9984  37CC
9985  37CD
9986  37CE
9987  37CF
9988  37D0
9989  37D1
9990  37D2
9991  37D3
9992  37D4
9993  37D5
9994  37D6
9995  37D7
9996  37D8
9997  37D9
9998  37DA
9999  37DB
10000  37DC
10001  37DD
10002  37DE
10003  37DF
10004  37E0
10005  37E1
10006  37E2
10007  37E3
10008  37E4
10009  37E5
10010  37E6
10011  37E7
10012  37E8
10013  37E9
10014  37EA
10015  37EB
10016  37EC
10017  37ED
10018  37EE
10019  37EF
10020  37F0
10021  37F1
10022  37F2
10023  37F3
10024  37F4
10025  37F5
10026  37F6
10027  37F7
10028  37F8
10029  37F9
10030  37FA
10031  37FB
10032  37FC
10033  37FD
10034  37FE
10035  37FF
10036  3800
10037  3801
10038  3802
10039  3803
10040  3804
10041  3805
10042  3806
10043  3807
10044  3808
10045  3809
10046  380A
10047  380B
10048  380C
10049  380D
10050  380E
10051  380F
10052  3810
10053  3811
10054  3812
10055  3813
10056  3814
10057  3815
10058  3816
10059  3817
10060  3818
10061  3819
10062  381A
10063  381B
10064  381C
10065  381D
10066  381E
10067  381F
10068  3820
10069  3821
10070  3822
10071  3823
10072  3824
10073  3825
10074  3826
10075  3827
10076  3828
10077  3829
10078  382A
10079  382B
10080  382C
10081  382D
10082  382E
10083  382F
10084  3830
10085  3831
10086  3832
10087  3833
10088  3834
10089  3835
10090  3836
10091  3837
10092  3838
10093  3839
10094  383A
10095  383B
10096  383C
10097  383D
10098  383E
10099  383F
10100  3840
10101  3841
10102  3842
10103  3843
10104  3844
10105  3845
10106  3846
10107  3847
10108  3848
10109  3849
10110  384A
10111  384B
10112  384C
10113  384D
10114  384E
10115  384F
10116  3850
10117  3851
10118  3852
10119  3853
10120  3854
10121  3855
10122  3856
10123  3857
10124  3858
10125  3859
10126  385A
10127  385B
10128  385C
10129  385D
10130  385E
10131  385F
10132  3860
10133  3861
10134  3862
10135  3863
10136  3864
10137  3865
10138  3866
10139  3867
10140  3868
10141  3869
10142  386A
10143  386B
10144  386C
10145  386D
10146  386E
10147  386F
10148  3870
10149  3871
10150  3872
10151  3873
10152  3874
10153  3875
10154  3876
10155  3877
10156  3878
10157  3879
10158  387A
10159  387B
10160  387C
10161  387D
10162  387E
10163  387F
10164  3880
10165  3881
10166  3882
10167  3883
10168  3884
10169  3885
10170  3886
10171  3887
10172  3888
10173  3889
10174  388A
10175  388B
10176  388C
10177  388D
10178  388E
10179  388F
10180  3890
10181  3891
10182  3892
10183  3893
10184  3894
10185  3895
10186  3896
10187  3897
10188  3898
10189  3899
10190  389A
10191  389B
10192  389C
10193  389D
10194  389E
10195  389F
10196  38A0
10197  38A1
10198  38A2
10199  38A3
10200  38A4
10201  38A5
10202  38A6
10203  38A7
10204  38A8
10205  38A9
10206  38AA
10207  38AB
10208  38AC
10209  38AD
10210  38AE
10211  38AF
10212  38B0
10213  38B1
10214  38B2
10215  38B3
10216  38B4
10217  38B5
10218  38B6
10219  38B7
10220  38B8
10221  38B9
10222  38BA
10223  38BB
10224  38BC
10225  38BD
10226  38BE
10227  38BF
10228  38C0
10229  38C1
10230  38C2
10231  38C3
10232  38C4
10233  38C5
10234  38C6
10235  38C7
10236  38C8
10237  38C9
10238  38CA
10239  38CB
10240  38CC
10241  38CD
10242  38CE
10243  38CF
10244  38D0
10245  38D1
10246  38D2
10247  38D3
10248  38D4
10249  38D5
10250  38D6
10251  38D7
10252  38D8
10253  38D9
10254  38DA
10255  38DB
10256  38DC
10257  38DD
10258  38DE
10259  38DF
10260  38E0
10261  38E1
10262  38E2
10263  38E3
10264  38E4
10265  38E5
10266  38E6
10267  38E7
10268  38E8
10269  38E9
10270  38EA
10271  38EB
10272  38EC
10273  38ED
10274  38EE
10275  38EF
10276  38F0
10277  38F1
10278  38F2
10279  38F3
10280  38F4
10281  38F5
10282  38F6
10283  38F7
10284  38F8
10285  38F9
10286  38FA
10287  38FB
10288  38FC
10289  38FD
10290  38FE
10291  38FF
10292  3900
10293  3901
10294  3902
10295  3903
10296  3904
10297  3905
10298  3906
10299  3907
10300  3908
10301  3909
10302  390A
10303  390B
10304  390C
10305  390D
10306  390E
10307  390F
10308  3910
10309  3911
10310  3912
10311  3913
10312  3914
10313  3915
10314  3916
10315  3917
10316  3918
10317  3919
10318  391A
10319  391B
10320  391C
10321  391D
10322  391E
10323  391F
10324  3920
10325  3921
10326  3922
10327  3923
10328  3924
10329  3925
10330  3926
10331  3927
10332  3928
10333  3929
10334  392A
10335  392B
10336  392C
10337  392D
10338  392E
10339  392F
10340  3930
10341  3931
10342  3932
10343  3933
10344  3934
10345  3935
10346  3936
10347  3937
10348  3938
10349  3939
10350  393A
10351  393B
10352  393C
10353  393D
10354  393E
10355  393F
10356  3940
10357  3941
10358  3942
10359  3943
10360  3944
10361  3945
10362  3946
10363  3947
10364  3948
10365  3949
10366  394A
10367  394B
10368  394C
10369  394D
10370  394E
10371  394F
10372  3950
10373  3951
10374  3952
10375  3953
10376  3954
10377  3955
10378  3956
10379  3957
10380  3958
10381  3959
10382  395A
10383  395B
10384  395C
10385  395D
10386  395E
10387  395F
10388  3960
10389  3961
10390  3962
10391  3963
10392  3964
10393  3965
10394  3966
10395  3967
10396  3968
10397  3969
10398  396A
10399  396B
10400  396C
10401  396D
10402  396E
10403  396F
10404  3970
10405  3971
10406  3972
10407  3973
10408  3974
10409  3975
10410  3976
10411  3977
10412  3978
10413  3979
10414  397A
10415  397B
10416  397C
10417  397D
10418  397E
10419  397F
10420  3980
10421  3981
10422  3982
10423  3983
10424  3984
10425  3985
10426  3986
10427  3987
10428  3988
10429  3989
10430  398A
10431  398B
10432  398C
10433  398D
10434  398E
10435  398F
10436  3990
10437  3991
10438  3992
10439  3993
10440  3994
10441  3995
10442  3996
10443  3997
10444  3998
10445  3999
10446  399A
10447  399B
10448  399C
10449  399D
10450  399E
10451  399F
10452  39A0
10453  39A1
10454  39A2
10455  39A3
10456  39A4
10457  39A5
10458  39A6
10459  39A7
10460  39A8
10461  39A9
10462  39AA
10463  39AB
10464  39AC
10465  39AD
10466  39AE
10467  39AF
10468  39B0
10469  39B1
10470  39B2
10471  39B3
10472  39B4
10473  39B5
10474  39B6
10475  39B7
10476  39B8
10477  39B9
10478  39BA
10479  39BB
10480  39BC
10481  39BD
10482  39BE
10483  39BF
10484  39C0
10485  39C1
10486  39C2
10487  39C3
10488  39C4
10489  39C5
10490  39C6
10491  39C7
10492  39C8
10493  39C9
10494  39CA
10495  39CB
10496  39CC
10497  39CD
10498  39CE
10499  39CF
10500  39D0
10501  39D1
10502  39D2
10503  39D3
10504  39D4
10505  39D5
10506  39D6
10507  39D7
10508  39D8
10509  39D9
10510  39DA
10511  39DB
10512  39DC
10513  39DD
10514  39DE
10515  39DF
10516  39E0
10517  39E1
10518  39E2
10519  39E3
10520  39E4
10521  39E5
10522  39E6
10523  39E7
10524  39E8
10525  39E9
10526  39EA
10527  39EB
10528  39EC
10529  39ED
10530  39EE
10531  39EF
10532  39F0
10533  39F1
10534  39F2
10535  39F3
10536  39F4
10537  39F5
10538  39F6
10539  39F7
10540  39F8
10541  39F9
10542  39FA
10543  39FB
10544  39FC
10545  39FD
10546  39FE
10547  39FF
10548  3A00
10549  3A01
10550  3A02
10551  3A03
10552  3A04
10553  3A05
10554  3A06
10555  3A07
10556  3A08
10557  3A09
10558  3A0A
10559  3A0B
10560  3A0C
10561  3A0D
10562  3A0E
10563  3A0F
10564  3A10
10565  3A11
10566  3A12
10567  3A13
10568  3A14
10569  3A15
10570  3A16
10571  3A17
10572  3A18
10573  3A19
10574  3A1A
10575  3A1B
10576  3A1C
10577  3A1D
10578  3A1E
10579  3A1F
10580  3A20
10581  3A21
10582  3A22
10583  3A23
10584  3A24
10585  3A25
10586  3A26
10587  3A27
10588  3A28
10589  3A29
10590  3A2A
10591  3A2B
10592  3A2C
10593  3A2D
10594  3A2E
10595  3A2F
10596  3A30
10597  3A31
10598  3A32
10599  3A33
10600  3A34
10601  3A35
10602  3A36
10603  3A37
10604  3A38
10605  3A39
10606  3A3A
10607  3A3B
10608  3A3C
10609  3A3D
10610  3A3E
10611  3A3F
10612  3A40
10613  3A41
10614  3A42
10615  3A43
10616  3A44
10617  3A45
10618  3A46
10619  3A47
10620  3A48
10621  3A49
10622  3A4A
10623  3A4B
10624  3A4C
10625  3A4D
10626  3A4E
10627  3A4F
10628  3A50
10629  3A51
10630  3A52
10631  3A53
10632  3A54
10633  3A55
10634  3A56
10635  3A57
10636  3A58
10637  3A59
10638  3A5A
10639  3A5B
10640  3A5C
10641  3A5D
10642  3A5E
10643  3A5F
10644  3A60
10645  3A61
10646  3A62
10647  3A63
10648  3A64
10649  3A65
10650  3A66
10651  3A67
10652  3A68
10653  3A69
10654  3A6A
10655  3A6B
10656  3A6C
10657  3A6D
10658  3A6E
10659  3A6F
10660  3A70
10661  3A71
10662  3A72
10663  3A73
10664  3A74
10665  3A75
10666  3A76
10667  3A77
10668  3A78
10669  3A79
10670  3A7A
10671  3A7B
10672  3A7C
10673  3A7D
10674  3A7E
10675  3A7F
10676  3A80
10677  3A81
10678  3A82
10679  3A83
10680  3A84
10681  3A85
10682  3A86
10683  3A87
10684  3A88
10685  3A89
10686  3A8A
10687  3A8B
10688  3A8C
10689  3A8D
10690  3A8E
10691  3A8F
10692  3A90
10693  3A91
10694  3A92
10695  3A93
10696  3A94
10697  3A95
10698  3A96
10699  3A97
10700  3A98
10701  3A99
10702  3A9A
10703  3A9B
10704  3A9C
10705  3A9D
10706  3A9E
10707  3A9F
10708  3AA0
10709  3AA1
10710  3AA2
10711  3AA3
10712  3AA4
10713  3AA5
10714  3AA6
10715  3AA7
10716  3AA8
10717  3AA9
10718  3AAA
10719  3AAB
10720  3AAC
10721  3AAD
10722  3AAE
10723  3AAF
10724  3AB0
10725  3AB1
10726  3AB2
10727  3AB3
10728  3AB4
10729  3AB5
10730  3AB6
10731  3AB7
10732  3AB8
10733  3AB9
10734  3ABA
10735  3ABB
10736  3ABC
10737  3ABD
10738  3ABE
10739  3ABF
10740  3AC0
10741  3AC1
10742  3AC2
10743  3AC3
10744  3AC4
10745  3AC5
10746  3AC6
10747  3AC7
10748  3AC8
10749  3AC9
10750  3ACA
10751  3ACB
10752  3ACC
10753  3ACD
10754  3ACE
10755  3ACF
10756  3AD0
10757  3AD1
10758  3AD2
10759  3AD3
10760  3AD4
10761  3AD5
10762  3AD6
10763  3AD7
10764  3AD8
10765  3AD9
10766  3ADA
10767  3ADB
10768  3ADC
10769  3ADD
10770  3ADE
10771  3ADF
10772  3AE0
10773  3AE1
10774  3AE2
10775  3AE3
10776  3AE4
10777  3AE5
10778  3AE6
10779  3AE7
10780  3AE8
10781  3AE9
10782  3AEA
10783  3AEB
10784  3AEC
10785  3AED
10786  3AEE
10787  3AEF
10788  3AF0
10789  3AF1
10790  3AF2
10791  3AF3
10792  3AF4
10793  3AF5
10794  3AF6
10795  3AF7
10796  3AF8
10797  3AF9
10798  3AFA
10799  3AFB
10800  3AFC
10801  3AFD
10802  3AFE
10803  3AFF
10804  3B00
10805  3B01
10806  3B02
10807  3B03
10808  3B04
10809  3B05
10810  3B06
10811  3B07
10812  3B08
10813  3B09
10814  3B0A
10815  3B0B
10816  3B0C
10817  3B0D
10818  3B0E
10819  3B0F
10820  3B10
10821  3B11
10822  3B12
10823  3B13
10824  3B14
10825  3B15
10826  3B16
10827  3B17
10828  3B18
10829  3B19
10830  3B1A
10831  3B1B
10832  3B1C
10833  3B1D
10834  3B1E
10835  3B1F
10836  3B20
10837  3B21
10838  3B22
10839  3B23
10840  3B24
10841  3B25
10842  3B26
10843  3B27
10844  3B28
10845  3B29
10846  3B2A
10847  3B2B
10848  3B2C
10849  3B2D
10850  3B2E
10851  3B2F
10852  3B30
10853  3B31
10854  3B32
10855  3B33
10856  3B34
10857  3B35
10858  3B36
10859  3B37
10860  3B38
10861  3B39
10862  3B3A
10863  3B3B
10864  3B3C
10865  3B3D
10866  3B3E
10867  3B3F
10868  3B40
10869  3B41
10870  3B42
10871  3B43
10872  3B44
10873  3B45
10874  3B46
10875  3B47
10876  3B48
10877  3B49
10878  3B4A
10879  3B4B
10880  3B4C
10881  3B4D
10882  3B4E
10883  3B4F
10884  3B50
10885  3B51
10886  3B52
10887  3B53
10888  3B54
10889  3B55
10890  3B56
10891  3B57
10892  3B58
10893  3B59
10894  3B5A
10895  3B5B
10896  3B5C
10897  3B5D
10898  3B5E
10899  3B5F
10900  3B60
10901  3B61
10902  3B62
10903  3B63
10904  3B64
10905  3B65
10906  3B66
10907  3B67
10908  3B68
10909  3B69
10910  3B6A
10911  3B6B
10912  3B6C
10913  3B6D
10914  3B6E
10915  3B6F
10916  3B70
10917  3B71
10918  3B72
10919  3B73
10920  3B74
10921  3B75
10922  3B76
10923  3B77
10924  3B78
10925  3B79
10926  3B7A
10927  3B7B
10928  3B7C
10929  3B7D
10930  3B7E
10931  3B7F
10932  3B80
10933  3B81
10934  3B82
10935  3B83
10936  3B84
10937  3B85
10938  3B86
10939  3B87
10940  3B88
10941  3B89
10942  3B8A
10943  3B8B
10944  3B8C
10945  3B8D
10946  3B8E
10947  3B8F
10948  3B90
10949  3B91
10950  3B92
10951  3B93
10952  3B94
10953  3B95
10954  3B96
10955  3B97
10956  3B98
10957  3B99
10958  3B9A
10959  3B9B
10960  3B9C
10961  3B9D
10962  3B9E
10963  3B9F
10964  3BA0
10965  3BA1
10966  3BA2
10967  3BA3
10968  3BA4
10969  3BA5
10970  3BA6
10971  3BA7
10972  3BA8
10973  3BA9
10974  3BAA
10975  3BAB
10976  3BAC
10977  3BAD
10978  3BAE
10979  3BAF
10980  3BB0
10981  3BB1
10982  3BB2
10983  3BB3
10984  3BB4
10985  3BB5
10986  3BB6
10987  3BB7
10988  3BB8
10989  3BB9
10990  3BBA
10991  3BBB
10992  3BBC
10993  3BBD
10994  3BBE
10995  3BBF
10996  3BC0
10997  3BC1
10998  3BC2
10999  3BC3
11000  3BC4
11001  3BC5
11002  3BC6
11003  3BC7
11004  3BC8
11005  3BC9
11006  3BCA
11007  3BCB
11008  3BCC
11009  3BCD
11010  3BCE
11011  3BCF
11012  3BD0
11013  3BD1
11014  3BD2
11015  3BD3
11016  3BD4
11017  3BD5
11018  3BD6
11019  3BD7
11020  3BD8
11021  3BD9
11022  3BDA
11023  3BDB
11024  3BDC
11025  3BDD
11026  3BDE
11027  3BDF
11028  3BE0
11029  3BE1
11030  3BE2
11031  3BE3
11032  3BE4
11033  3BE5
11034  3BE6
11035  3BE7
11036  3BE8
11037  3BE9
11038  3BEA
11039  3BEB
11040  3BEC
11041  3BED
11042  3BEE
11043  3BEF
11044  3BF0
11045  3BF1
11046  3BF2
11047  3BF3
11048  3BF4
11049  3BF5
11050  3BF6
11051  3BF7
11052  3BF8
11053  3BF9
11054  3BFA
11055  3BFB
11056  3BFC
11057  3BFD
11058  3BFE
11059  3BFF
11060  3C00
11061  3C01
11062  3C02
11063  3C03
11064  3C04
11065  3C05
11066  3C06
11067  3C07
11068  3C08
11069  3C09
11070  3C0A
11071  3C0B
11072  3C0C
11073  3C0D
11074  3C0E
11075  3C0F
11076  3C10
11077  3C11
11078  3C12
11079  3C13
11080  3C14
11081  3C15
11082  3C16
11083  3C17
11084  3C18
11085  3C19
11086  3C1A
11087  3C1B
11088  3C1C
11089  3C1D
11090  3C1E
11091  3C1F
11092  3C20
11093  3C21
11094  3C22
11095  3C23
11096  3C24
11097  3C25
11098  3C26
11099  3C27
11100  3C28
11101  3C29
11102  3C2A
11103  3C2B
11104  3C2C
11105  3C2D
11106  3C2E
11107  3C2F
11108  3C30
11109  3C31
11110  3C32
11111  3C33
11112  3C34
11113  3C35
11114  3C36
11115  3C37
11116  3C38
11117  3C39
11118  3C3A
11119  3C3B
11120  3C3C
11121  3C3D
11122  3C3E
11123  3C3F
11124  3C40
11125  3C41
11126  3C42
11127  3C43
11128  3C44
11129  3C45
11130  3C46
11131  3C47
11132  3C48
11133  3C49
11134  3C4A
11135  3C4B
11136  3C4C
11137  3C4D
11138  3C4E
11139  3C4F
11140  3C50
11141  3C51
11142  3C52
11143  3C53
11144  3C54
11145  3C55
11146  3C56
11147  3C57
11148  3C58
11149  3C59
11150  3C5A
11151  3C5B
11152  3C5C
11153  3C5D
11154  3C5E
11155  3C5F
11156  3C60
11157  3C61
11158  3C62
11159  3C63
11160  3C64
11161  3C65
11162  3C66
11163  3C67
11164  3C68
11165  3C69
11166  3C6A
11167  3C6B
11168  3C6C
11169  3C6D
11170  3C6E
11171  3C6F
11172  3C70
11173  3C71
11174  3C72
11175  3C73
11176  3C74
11177  3C75
11178  3C76
11179  3C77
11180  3C78
11181  3C79
11182  3C7A
11183  3C7B
11184  3C7C
11185  3C7D
11186  3C7E
11187  3C7F
11188  3C80
11189  3C81
11190  3C82
11191  3C83
11192  3C84
11193  3C85
11194  3C86
11195  3C87
11196  3C88
11197  3C89
11198  3C8A
11199  3C8B
11200  3C8C
11201  3C8D
11202  3C8E
11203  3C8F
11204  3C90
11205  3C91
11206  3C92
11207  3C93
11208  3C94
11209  3C95
11210  3C96
11211  3C97
11212  3C98
11213  3C99
11214  3C9A
11215  3C9B
11216  3C9C
11217  3C9D
11218  3C9E
11219  3C9F
11220  3CA0
11221  3CA1
11222  3CA2
11223  3CA3
11224  3CA4
11225  3CA5
11226  3CA6
11227  3CA7
11228  3CA8
11229  3CA9
11230  3CAA
11231  3CAB
11232  3CAC
11233  3CAD
11234  3CAE
11235  3CAF
11236  3CB0
11237  3CB1
11238  3CB2
11239  3CB3
11240  3CB4
11241  3CB5
11242  3CB6
11243  3CB7
11244  3CB8
11245  3CB9
11246  3CBA
11247  3CBB
11248  3CBC
11249  3CBD
11250  3CBE
11251  3CBF
11252  3CC0
11253  3CC1
11254  3CC2
11255  3CC3
11256  3CC4
11257  3CC5
11258  3CC6
11259  3CC7
11260  3CC8
11261  3CC9
11262  3CCA
11263  3CCB
11264  3CCC
11265  3CCD
11266  3CCE
11267  3CCF
11268  3CD0
11269  3CD1
11270  3CD2
11271  3CD3
11272  3CD4
11273  3CD5
11274  3CD6
11275  3CD7
11276  3CD8
11277  3CD9
11278  3CDA
11279  3CDB
11280  3CDC
11281  3CDD
11282  3CDE
11283  3CDF
11284  3CE0
11285  3CE1
11286  3CE2
11287  3CE3
11288  3CE4
11289  3CE5
11290  3CE6
11291  3CE7
11292  3CE8
11293  3CE9
11294  3CEA
11295  3CEB
11296  3CEC
11297  3CED
11298  3CEE
11299  3CEF
11300  3CF0
11301  3CF1
11302  3CF2
11303  3CF3
11304  3CF4
11305  3CF5
11306  3CF6
11307  3CF7
11308  3CF8
11309  3CF9
11310  3CFA
11311  3CFB
11312  3CFC
11313  3CFD
11314  3CFE
11315  3CFF
11316  3D00
11317  3D01
11318  3D02
11319  3D03
11320  3D04
11321  3D05
11322  3D06
11323  3D07
11324  3D08
11325  3D09
11326  3D0A
11327  3D0B
11328  3D0C
11329  3D0D
11330  3D0E
11331  3D0F
11332  3D10
11333  3D11
11334  3D12
11335  3D13
11336  3D14
11337  3D15
11338  3D16
11339  3D17
11340  3D18
11341  3D19
11342  3D1A
11343  3D1B
11344  3D1C
11345  3D1D
11346  3D1E
11347  3D1F
11348  3D20
11349  3D21
11350  3D22
11351  3D23
11352  3D24
11353  3D25
11354  3D26
11355  3D27
11356  3D28
11357  3D29
11358  3D2A
11359  3D2B
11360  3D2C
11361  3D2D
11362  3D2E
11363  3D2F
11364  3D30
11365  3D31
11366  3D32
11367  3D33
11368  3D34
11369  3D35
11370  3D36
11371  3D37
11372  3D38
11373  3D39
11374  3D3A
11375  3D3B
11376  3D3C
11377  3D3D
11378  3D3E
11379  3D3F
11380  3D40
11381  3D41
11382  3D42
11383  3D43
11384  3D44
11385  3D45
11386  3D46
11387  3D47
11388  3D48
11389  3D49
11390  3D4A
11391  3D4B
11392  3D4C
11393  3D4D
11394  3D4E
11395  3D4F
11396  3D50
11397  3D51
11398  3D52
11399  3D53
11400  3D54
11401  3D55
11402  3D56
11403  3D57
11404  3D58
11405  3D59
11406  3D5A
11407  3D5B
11408  3D5C
11409  3D5D
11410  3D5E
11411  3D5F
11412  3D60
11413  3D61
11414  3D62
11415  3D63
11416  3D64
11417  3D65
11418  3D66
11419  3D67
11420  3D68
11421  3D69
11422  3D6A
11423  3D6B
11424  3D6C
11425  3D6D
11426  3D6E
11427  3D6F
11428  3D70
11429  3D71
11430  3D72
11431  3D73
11432  3D74
11433  3D75
11434  3D76
11435  3D77
11436  3D78
11437  3D79
11438  3D7A
11439  3D7B
11440  3D7C
11441  3D7D
11442  3D7E
11443  3D7F
11444  3D80
11445  3D81
11446  3D82
11447  3D83
11448  3D84
11449  3D85
11450  3D86
11451  3D87
11452  3D88
11453  3D89
11454  3D8A
11455  3D8B
11456  3D8C
11457  3D8D
11458  3D8E
11459  3D8F
11460  3D90
11461  3D91
11462  3D92
11463  3D93
11464  3D94
11465  3D95
11466  3D96
11467  3D97
11468  3D98
11469  3D99
11470  3D9A
11471  3D9B
11472  3D9C
11473  3D9D
11474  3D9E
11475  3D9F
11476  3DA0
11477  3DA1
11478  3DA2
11479  3DA3
11480  3DA4
11481  3DA5
11482  3DA6
11483  3DA7
11484  3DA8
11485  3DA9
11486  3DAA
11487  3DAB
11488  3DAC
11489  3DAD
11490  3DAE
11491  3DAF
11492  3DB0
11493  3DB1
11494  3DB2
11495  3DB3
11496  3DB4
11497  3DB5
11498  3DB6
11499  3DB7
11500  3DB8
11501  3DB9
11502  3DBA
11503  3DBB
11504  3DBC
11505  3DBD
11506  3DBE
11507  3DBF
11508  3DC0
11509  3DC1
11510  3DC2
11511  3DC3
11512  3DC4
11513  3DC5
11514  3DC6
11515  3DC7
11516  3DC8
11517  3DC9
11518  3DCA
11519  3DCB
11520  3DCC
11521  3DCD
11522  3DCE
11523  3DCF
11524  3DD0
11525  3DD1
11526  3DD2
11527  3DD3
11528  3DD4
11529  3DD5
11530  3DD6
11531  3DD7
11532  3DD8
11533  3DD9
11534  3DDA
11535  3DDB
11536  3DDC
11537  3DDD
11538  3DDE
11539  3DDF
11540  3DE0
11541  3DE1
11542  3DE2
11543  3DE3
11544  3DE4
11545  3DE5
11546  3DE6
11547  3DE7
11548  3DE8
11549  3DE9
11550  3DEA
11551  3DEB
11552  3DEC
11553  3DED
11554  3DEE
11555  3DEF
11556  3DF0
11557  3DF1
11558  3DF2
11559  3DF3
11560  3DF4
11561  3DF5
11562  3DF6
11563  3DF7
11564  3DF8
11565  3DF9
11566  3DFA
11567  3DFB
11568  3DFC
11569  3DFD
11570  3DFE
11571  3DFF
11572  3E00
11573  3E01
11574  3E02
11575  3E03
11576  3E04
11577  3E05
11578  3E06
11579  3E07
11580  3E08
11581  3E09
11582  3E0A
11583  3E0B
11584  3E0C
11585  3E0D
11586  3E0E
11587  3E0F
11588  3E10
11589  3E11
11590  3E12
11591  3E13
11592  3E14
11593  3E15
11594  3E16
11595  3E17
11596  3E18
11597  3E19
11598  3E1A
11599  3E1B
11600  3E1C
11601  3E1D
11602  3E1E
11603  3E1F
11604  3E20
11605  3E21
11606  3E22
11607  3E23
11608  3E24
11609  3E25
11610  3E26
11611  3E27
11612  3E28
11613  3E29
11614  3E2A
11615  3E2B
11616  3E2C
11617  3E2D
11618  3E2E
11619  3E2F
11620  3E30
11621  3E31
11622  3E32
11623  3E33
11624  3E34
11625  3E35
11626  3E36
11627  3E37
11628  3E38
11629  3E39
11630  3E3A
11631  3E3B
11632  3E3C
11633  3E3D
11634  3E3E
11635  3E3F
11636  3E40
11637  3E41
11638  3E42
11639  3E43
11640  3E44
11641  3E45
11642  3E46
11643  3E47
11644  3E48
11645  3E49
11646  3E4A
11647  3E4B
11648  3E4C
11649  3E4D
11650  3E4E
11651  3E4F
11652  3E50
11653  3E51
11654  3E52
11655  3E53
11656  3E54
11657  3E55
11658  3E56
11659  3E57
11660  3E58
11661  3E59
11662  3E5A
11663  3E5B
11664  3E5C
11665  3E5D
11666  3E5E
11667  3E5F
11668  3E60
11669  3E61
11670  3E62
11671  3E63
11672  3E64
11673  3E65
11674  3E66
11675  3E67
11676  3E68
11677  3E69
11678  3E6A
11679  3E6B
11680  3E6C
11681  3E6D
11682  3E6E
11683  3E6F
11684  3E70
11685  3E71
11686  3E72
11687  3E73
11688  3E74
11689  3E75
11690  3E76
11691  3E77
11692  3E78
11693  3E79
11694  3E7A
11695  3E7B
11696  3E7C
11697  3E7D
11698  3E7E
11699  3E7F
11700  3E80
11701  3E81
11702  3E82
11703  3E83
11704  3E84
11705  3E85
11706  3E86
11707  3E87
11708  3E88
11709  3E89
11710  3E8A
11711  3E8B
11712  3E8C
11713  3E8D
11714  3E8E
11715  3E8F
11716  3E90
11717  3E91
11718  3E92
11719  3E93
11720  3E94
11721  3E95
11722  3E96
11723  3E97
11724  3E98
11725  3E99
11726  3E9A
11727  3E9B
11728  3E9C
11729  3E9D
11730  3E9E
11731  3E9F
11732  3EA0
11733  3EA1
11734  3EA2
11735  3EA3
11736  3EA4
11737  3EA5
11738  3EA6
11739  3EA7
11740  3EA8
11741  3EA9
11742  3EAA
11743  3EAB
11744  3EAC
11745  3EAD
11746  3EAE
11747  3EAF
11748  3EB0
11749  3EB1
11750  3EB2
11751  3EB3
11752  3EB4
11753  3EB5
11754  3EB6
11755  3EB7
11756  3EB8
11757  3EB9
11758  3EBA
11759  3EBB
11760  3EBC
11761  3EBD
11762  3EBE
11763  3EBF
11764  3EC0
11765  3EC1
11766  3EC2
11767  3EC3
11768  3EC4
11769  3EC5
11770  3EC6
11771  3EC7
11772  3EC8
11773  3EC9
11774  3ECA
11775  3ECB
11776  3ECC
11777  3ECD
11778  3ECE
11779  3ECF
11780  3ED0
11781  3ED1
11782  3ED2
11783  3ED3
11784  3ED4
11785  3ED5
11786  3ED6
11787  3ED7
11788  3ED8
11789  3ED9
11790  3EDA
11791  3EDB
11792  3EDC
11793  3EDD
11794  3EDE
11795  3EDF
11796  3EE0
11797  3EE1
11798  3EE2
11799  3EE3
11800  3EE4
11801  3EE5
11802  3EE6
11803  3EE7
11804  3EE8
11805  3EE9
11806  3EEA
11807  3EEB
11808  3EEC
11809  3EED
11810  3EEE
11811  3EEF
11812  3EF0
11813  3EF1
11814  3EF2
11815  3EF3
11816  3EF4
11817  3EF5
11818  3EF6
11819  3EF7
11820  3EF8
11821  3EF9
11822  3EFA
11823  3EFB
11824  3EFC
11825  3EFD
11826  3EFE
11827  3EFF
11828  3F00
11829  3F01
11830  3F02
11831  3F03
11832  3F04
11833  3F05
11834  3F06
11835  3F07
11836  3F08
11837  3F09
11838  3F0A
11839  3F0B
11840  3F0C
11841  3F0D
11842  3F0E
11843  3F0F
11844  3F10
11845  3F11
11846  3F12
11847  3F13
11848  3F14
11849  3F15
11850  3F16
11851  3F17
11852  3F18
11853  3F19
11854  3F1A
11855  3F1B
11856  3F1C
11857  3F1D
11858  3F1E
11859  3F1F
11860  3F20
11861  3F21
11862  3F22
11863  3F23
11864  3F24
11865  3F25
11866  3F26
11867  3F27
11868  3F28
11869  3F29
11870  3F2A
11871  3F2B
11872  3F2C
11873  3F2D
11874  3F2E
11875  3F2F
11876  3F30
11877  3F31
11878  3F32
11879  3F33
11880  3F34
11881  3F35
11882  3F36
11883  3F37
11884  3F38
11885  3F39
11886  3F3A
11887  3F3B
11888  3F3C
11889  3F3D
11890  3F3E
11891  3F3F
11892  3F40
11893  3F41
11894  3F42
11895  3F43
11896  3F44
11897  3F45
11898  3F46
11899  3F47
11900  3F48
11901  3F49
11902  3F4A
11903  3F4B
11904  3F4C
11905  3F4D
11906  3F4E
11907  3F4F
11908  3F50
11909  3F51
11910  3F52
11911  3F53
11912  3F54
11913  3F55
11914  3F56
11915  3F57
11916  3F58
11917  3F59
11918  3F5A
11919  3F5B
11920  3F5C
11921  3F5D
11922  3F5E
11923  3F5F
11924  3F60
11925  3F61
11926  3F62
11927  3F63
11928  3F64
11929  3F65
11930  3F66
11931  3F67
11932  3F68
11933  3F69
11934  3F6A
11935  3F6B
11936  3F6C
11937  3F6D
11938  3F6E
11939  3F6F
11940  3F70
11941  3F71
11942  3F72
11943  3F73
11944  3F74
11945  3F75
11946  3F76
11947  3F77
11948  3F78
11949  3F79
11950  3F7A
11951  3F7B
11952  3F7C
11953  3F7D
11954  3F7E
11955  3F7F
11956  3F80
11957  3F81
11958  3F82
11959  3F83
11960  3F84
11961  3F85
11962  3F86
11963  3F87
11964  3F88
11965  3F89
11966  3F8A
11967  3F8B
11968  3F8C
11969  3F8D
11970  3F8E
11971  3F8F
11972  3F90
11973  3F91
11974  3F92
11975  3F93
11976  3F94
11977  3F95
11978  3F96
11979  3F97
11980  3F98
11981  3F99
11982  3F9A
11983  3F9B
11984  3F9C
11985  3F9D
11986  3F9E
11987  3F9F
11988  3FA0
11989  3FA1
11990  3FA2
11991  3FA3
11992  3FA4
11993  3FA5
11994  3FA6
11995  3FA7
11996  3FA8
11997  3FA9
11998  3FAA
11999  3FAB
12000  3FAC
12001  3FAD
12002  3FAE
12003  3FAF
12004  3FB0
12005  3FB1
12006  3FB2
12007  3FB3
12008  3FB4
12009  3FB5
12010  3FB6
12011  3FB7
12012  3FB8
12013  3FB9
12014  3FBA
12015  3FBB
12016  3FBC
12017  3FBD
12018  3FBE
12019  3FBF
12020  3FC0
12021  3FC1
12022  3FC2
12023  3FC3
12024  3FC4
12025  3FC5
12026  3FC6
12027  3FC7
12028  3FC8
12029  3FC9
12030  3FCA
12031  3FCB
12032  3FCC
12033  3FCD
12034  3FCE
12035  3FCF
12036  3FD0
12037  3FD1
12038  3FD2
12039  3FD3
12040  3FD4
12041  3FD5
12042  3FD6
12043  3FD7
12044  3FD8
12045  3FD9
12046  3FDA
12047  3FDB
12048  3FDC
12049  3FDD
12050  3FDE
12051  3FDF
12052  3FE0
12053  3FE1
12054  3FE2
12055  3FE3
12056  3FE4
12057  3FE5
12058  3FE6
12059  3FE7
12060  3FE8
12061  3FE9
12062  3FEA
12063  3FEB
12064  3FEC
12065  3FED
12066  3FEE
12067  3FEF
12068  3FF0
12069  3FF1
12070  3FF2
12071  3FF3
12072  3FF4
12073  3FF5
12074  3FF6
12075  3FF7
12076  3FF8
12077  3FF9
12078  3FFA
12079  3FFB
12080  3FFC
12081  3FFD
12082  3FFE
12083  3FFF
12084  4000
12085  4001
12086  4002
12087  4003
12088  4004
12089  4005
12090  4006
12091  4007
12092  4008
12093  4009
12094  400A
12095  400B
12096  400C
12097  400D
12098  400E
12099  400F
12100  4010
12101  4011
12102  4012
12103  4013
12104  4014
12105  4015
12106  4016
12107  4017
12108  4018
12109  4019
12110  401A
12111  401B
12112  401C
12113  401D
12114  401E
12115  401F
12116  4020
12117  4021
12118  4022
12119  4023
12120  4024
12121  4025
12122  4026
12123  4027
12124  4028
12125  4029
12126  402A
12127  402B
12128  402C
12129  402D
12130  402E
12131  402F
12132  4030
12133  4031
12134  4032
12135  4033
12136  4034
12137  4035
12138  4036
12139  4037
12140  4038
12141  4039
12142  403A
12143  403B
12144  403C
12145  403D
12146  403E
12147  403F
12148  4040
12149  4041
12150  4042
12151  4043
12152  4044
12153  4045
12154  4046
12155  4047
12156  4048
12157  4049
12158  404A
12159  404B
12160  404C
12161  404D
12162  404E
12163  404F
12164  4050
12165  4051
12166  4052
12167  4053
12168  4054
12169  4055
12170  4056
12171  4057
12172  4058
12173  4059
12174  405A
12175  405B
12176  405C
12177  405D
12178  405E
12179  405F
12180  4060
12181  4061
12182  4062
12183  4063
12184  4064
12185  4065
12186  4066
12187  4067
12188  4068
12189  4069
12190  406A
12191  406B
12192  406C
12193  406D
12194  406E
12195  406F
12196  4070
12197  4071
12198  4072
12199  4073
12200  4074
12201  4075
12202  4076
12203  4077
12204  4078
12205  4079
12206  407A
12207  407B
12208  407C
12209  407D
12210  407E
12211  407F
12212  4080
12213  4081
12214  4082
12215  4083
12216  4084
12217  4085
12218  4086
12219  4087
12220  4088
12221  4089
12222  408A
12223  408B
12224  408C
12225  408D
12226  408E
12227  408F
12228  4090
12229  4091
12230  4092
12231  4093
12232  4094
12233  4095
12234  4096
12235  4097
12236  4098
12237  4099
12238  409A
12239  409B
12240  409C
12241  409D
12242  409E
12243  409F
12244  40A0
12245  40A1
12246  40A2
12247  40A3
12248  40A4
12249  40A5
12250  40A6
12251  40A7
12252  40A8
12253  40A9
12254  40AA
12255  40AB
12256  40AC
12257  40AD
12258  40AE
12259  40AF
12260  40B0
12261  40B1
12262  40B2
12263  40B3
12264  40B4
12265  40B5
12266  40B6
12267  40B7
12268  40B8
12269  40B9
12270  40BA
12271  40BB
12272  40BC
12273  40BD
12274  40BE
12275  40BF
12276  40C0
12277  40C1
12278  40C2
12279  40C3
12280  40C4
12281  40C5
12282  40C6
12283  40C7
12284  40C8
12285  40C9
12286  40CA
12287  40CB
12288  40CC
12289  40CD
12290  40CE
12291  40CF
12292  40D0
12293  40D1
12294  40D2
12295  40D3
12296  40D4
12297  40D5
12298  40D6
12299  40D7
12300  40D8
12301  40D9
12302  40DA
12303  40DB
12304  40DC
12305  40DD
12306  40DE
12307  40DF
12308  40E0
12309  40E1
12310  40E2
12311  40E3
12312  40E4
12313  40E5
12314  40E6
12315  40E7
12316  40E8
12317  40E9
12318  40EA
12319  40EB
12320  40EC
12321  40ED
12322  40EE
12323  40EF
12324  40F0
12325  40F1
12326  40F2
12327  40F3
12328  40F4
12329  40F5
12330  40F6
12331  40F7
12332  40F8
12333  40F9
12334  40FA
12335  40FB
12336  40FC
12337  40FD
12338  40FE
12339  40FF
12340  4100
12341  4101
12342  4102
12343  4103
12344  4104
12345  4105
12346  4106
12347  4107
12348  4108
12349  4109
12350  410A
12351  410B
12352  410C
12353  410D
12354  410E
12355  410F
12356  4110
12357  4111
12358  4112
12359  4113
12360  4114
12361  4115
12362  4116
12363  4117
12364  4118
12365  4119
12366  411A
12367  411B
12368  411C
12369  411D
12370  411E
12371  411F
12372  4120
12373  4121
12374  4122
12375  4123
12376  4124
12377  4125
12378  4126
12379  4127
12380  4128
12381  4129
12382  412A
12383  412B
12384  412C
12385  412D
12386  412E
12387  412F
12388  4130
12389  4131
12390  4132
12391  4133
12392  4134
12393  4135
12394  4136
12395  4137
12396  4138
12397  4139
12398  413A
12399  413B
12400  413C
12401  413D
12402  413E
12403  413F
12404  4140
12405  4141
12406  4142
12407  4143
12408  4144
12409  4145
12410  4146
12411  4147
12412  4148
12413  4149
12414  414A
12415  414B
12416  414C
12417  414D
12418  414E
12419  414F
12420  4150
12421  4151
12422  4152
12423  4153
12424  4154
12425  4155
12426  4156
12427  4157
12428  4158
12429  4159
12430  415A
12431  415B
12432  415C
12433  415D
12434  415E
12435  415F
12436  4160
12437  4161
12438  4162
12439  4163
12440  4164
12441  4165
12442  4166
12443  4167
12444  4168
12445  4169
12446  416A
12447  416B
12448  416C
12449  416D
12450  416E
12451  416F
12452  4170
12453  4171
12454  4172
12455  4173
12456  4174
12457  4175
12458  4176
12459  4177
12460  4178
12461  4179
12462  417A
12463  417B
12464  417C
12465  417D
12466  417E
12467  417F
12468  4180
12469  4181
12470  4182
12471  4183
12472  4184
12473  4185
12474  4186
12475  4187
12476  4188
12477  4189
12478  418A
12479  418B
12480  418C
12481  418D
12482  418E
12483  418F
12484  4190
12485  4191
12486  4192
12487  4193
12488  4194
12489  4195
12490  4196
12491  4197
12492  4198
12493  4199
12494  419A
12495  419B
12496  419C
12497  419D
12498  419E
12499  419F
12500  41A0
12501  41A1
12502  41A2
12503  41A3
12504  41A4
12505  41A5
12506  41A6
12507  41A7
12508  41A8
12509  41A9
12510  41AA
12511  41AB
12512  41AC
12513  41AD
12514  41AE
12515  41AF
12516  41B0
12517  41B1
12518  41B2
12519  41B3
12520  41B4
12521  41B5
12522  41B6
12523  41B7
12524  41B8
12525  41B9
12526  41BA
12527  41BB
12528  41BC
12529  41BD
12530  41BE
12531  41BF
12532  41C0
12533  41C1
12534  41C2
12535  41C3
12536  41C4
12537  41C5
12538  41C6
12539  41C7
12540  41C8
12541  41C9
12542  41CA
12543  41CB
12544  41CC
12545  41CD
12546  41CE
12547  41CF
12548  41D0
12549  41D1
12550  41D2
12551  41D3
12552  41D4
12553  41D5
12554  41D6
12555  41D7
12556  41D8
12557  41D9
12558  41DA
12559  41DB
12560  41DC
12561  41DD
12562  41DE
12563  41DF
12564  41E0
12565  41E1
12566  41E2
12567  41E3
12568  41E4
12569  41E5
12570  41E6
12571  41E7
12572  41E8
12573  41E9
12574  41EA
12575  41EB
12576  41EC
12577  41ED
12578  41EE
12579  41EF
12580  41F0
12581  41F1
12582  41F2
12583  41F3
12584  41F4
12585  41F5
12586  41F6
12587  41F7
12588  41F8
12589  41F9
12590  41FA
12591  41FB
12592  41FC
12593  41FD
12594  41FE
12595  41FF
12596  4200
12597  4201
12598  4202
12599  4203
12600  4204
12601  4205
12602  4206
12603  4207
12604  4208
12605  4209
12606  420A
12607  420B
12608  420C
12609  420D
12610  420E
12611  420F
12612  4210
12613  4211
12614  4212
12615  4213
12616  4214
12617  4215
12618  4216
12619  4217
12620  4218
12621  4219
12622  421A
12623  421B
12624  421C
12625  421D
12626  421E
12627  421F
12628  4220
12629  4221
12630  4222
12631  4223
12632  4224
12633  4225
12634  4226
12635  4227
12636  4228
12637  4229
12638  422A
12639  422B
12640  422C
12641  422D
12642  422E
12643  422F
12644  4230
12645  4231
12646  4232
12647  4233
12648  4234
12649  4235
12650  4236
12651  4237
12652  4238
12653  4239
12654  423A
12655  423B
12656  423C
12657  423D
12658  423E
12659  423F
12660  4240
12661  4241
12662  4242
12663  4243
12664  4244
12665  4245
12666  4246
12667  4247
12668  4248
12669  4249
12670  424A
12671  424B
12672  424C
12673  424D
12674  424E
12675  424F
12676  4250
12677  4251
12678  4252
12679  4253
12680  4254
12681  4255
12682  4256
12683  4257
12684  4258
12685  4259
12686  425A
12687  425B
12688  425C
12689  425D
12690  425E
12691  425F
12692  4260
12693  4261
12694  4262
12695  4263
12696  4264
12697  4265
12698  4266
12699  4267
12700  4268
12701  4269
12702  426A
12703  426B
12704  426C
12705  426D
12706  426E
12707  426F
12708  4270
12709  4271
12710  4272
12711  4273
12712  4274
12713  4275
12714  4276
12715  4277
12716  4278
12717  4279
12718  427A
12719  427B
12720  427C
12721  427D
12722  427E
12723  427F
12724  4280
12725  4281
12726  4282
12727  4283
12728  4284
12729  4285
12730  4286
12731  4287
12732  4288
12733  4289
12734  428A
12735  428B
12736  428C
12737  428D
12738  428E
12739  428F
12740  4290
12741  4291
12742  4292
12743  4293
12744  4294
12745  4295
12746  4296
12747  4297
12748  4298
12749  4299
12750  429A
12751  429B
12752  429C
12753  429D
12754  429E
12755  429F
12756  42A0
12757  42A1
12758  42A2
12759  42A3
12760  42A4
12761  42A5
12762  42A6
12763  42A7
12764  42A8
12765  42A9
12766  42AA
12767  42AB
12768  42AC
12769  42AD
12770  42AE
12771  42AF
12772  42B0
12773  42B1
12774  42B2
12775  42B3
12776  42B4
12777  42B5
12778  42B6
12779  42B7
12780  42B8
12781  42B9
12782  42BA
12783  42BB
12784  42BC
12785  42BD
12786  42BE
12787  42BF
12788  42C0
12789  42C1
12790  42C2
12791  42C3
12792  42C4
12793  42C5
12794  42C6
12795  42C7
12796  42C8
12797  42C9
12798  42CA
12799  42CB
12800  42CC
12801  42CD
12802  42CE
12803  42CF
12804  42D0
12805  42D1
12806  42D2
12807  42D3
12808  42D4
12809  42D5
12810  42D6
12811  42D7
12812  42D8
12813  42D9
12814  42DA
12815  42DB
12816  42DC
12817  42DD
12818  42DE
12819  42DF
12820  42E0
12821  42E1
12822  42E2
12823  42E3
12824  42E4
12825  42E5
12826  42E6
12827  42E7
12828  42E8
12829  42E9
12830  42EA
12831  42EB
12832  42EC
12833  42ED
12834  42EE
12835  42EF
12836  42F0
12837  42F1
12838  42F2
12839  42F3
12840  42F4
12841  42F5
12842  42F6
12843  42F7
12844  42F8
12845  42F9
12846  42FA
12847  42FB
12848  42FC
12849  42FD
12850  42FE
12851  42FF
12852  4300
12853  4301
12854  4302
12855  4303
12856  4304
12857  4305
12858  4306
12859  4307
12860  4308
12861  4309
12862  430A
12863  430B
12864  430C
12865  430D
12866  430E
12867  430F
12868  4310
12869  4311
12870  4312
12871  4313
12872  4314
12873  4315
12874  4316
12875  4317
12876  4318
12877  4319
12878  431A
12879  431B
12880  431C
12881  431D
12882  431E
12883  431F
12884  4320
12885  4321
12886  4322
12887  4323
12888  4324
12889  4325
12890  4326
12891  4327
12892  4328
12893  4329
12894  432A
12895  432B
12896  432C
12897  432D
12898  432E
12899  432F
12900  4330
12901  4331
12902  4332
12903  4333
12904  4334
12905  4335
12906  4336
12907  4337
12908  4338
12909  4339
12910  433A
12911  433B
12912  433C
12913  433D
12914  433E
12915  433F
12916  4340
12917  4341
12918  4342
12919  4343
12920  4344
12921  4345
12922  4346
12923  4347
12924  4348
12925  4349
12926  434A
12927  434B
12928  434C
12929  434D
12930  434E
12931  434F
12932  4350
12933  4351
12934  4352
12935  4353
12936  4354
12937  4355
12938  4356
12939  4357
12940  4358
12941  4359
12942  435A
12943  435B
12944  435C
12945  435D
12946  435E
12947  435F
12948  4360
12949  4361
12950  4362
12951  4363
12952  4364
12953  4365
12954  4366
12955  4367
12956  4368
12957  4369
12958  436A
12959  436B
12960  436C
12961  436D
12962  436E
12963  436F
12964  4370
12965  4371
12966  4372
12967  4373
12968  4374
12969  4375
12970  4376
12971  4377
12972  4378
12973  4379
12974  437A
12975  437B
12976  437C
12977  437D
12978  437E
12979  437F
12980  4380
12981  4381
12982  4382
12983  4383
12984  4384
12985  4385
12986  4386
12987  4387
12988  4388
12989  4389
12990  438A
12991  438B
12992  438C
12993  438D
12994  438E
12995  438F
12996  4390
12997  4391
12998  4392
12999  4393
13000  4394
13001  4395
13002  4396
13003  4397
13004  4398
13005  4399
13006  439A
13007  439B
13008  439C
13009  439D
13010  439E
13011  439F
13012  43A0
13013  43A1
13014  43A2
13015  43A3
13016  43A4
13017  43A5
13018  43A6
13019  43A7
13020  43A8
13021  43A9
13022  43AA
13023  43AB
13024  43AC
13025  43AD
13026  43AE
13027  43AF
13028  43B0
13029  43B1
13030  43B2
13031  43B3
13032  43B4
13033  43B5
13034  43B6
13035  43B7
13036  43B8
13037  43B9
13038  43BA
13039  43BB
13040  43BC
13041  43BD
13042  43BE
13043  43BF
13044  43C0
13045  43C1
13046  43C2
13047  43C3
13048  43C4
13049  43C5
13050  43C6
13051  43C7
13052  43C8
13053  43C9
13054  43CA
13055  43CB
13056  43CC
13057  43CD
13058  43CE
13059  43CF
13060  43D0
13061  43D1
13062  43D2
13063  43D3
13064  43D4
13065  43D5
13066  43D6
13067  43D7
13068  43D8
13069  43D9
13070  43DA
13071  43DB
13072  43DC
13073  43DD
13074  43DE
13075  43DF
13076  43E0
13077  43E1
13078  43E2
13079  43E3
13080  43E4
13081  43E5
13082  43E6
13083  43E7
13084  43E8
13085  43E9
13086  43EA
13087  43EB
13088  43EC
13089  43ED
13090  43EE
13091  43EF
13092  43F0
13093  43F1
13094  43F2
13095  43F3
13096  43F4
13097  43F5
13098  43F6
13099  43F7
13100  43F8
13101  43F9
13102  43FA
13103  43FB
13104  43FC
13105  43FD
13106  43FE
13107  43FF
13108  4400
13109  4401
13110  4402
13111  4403
13112  4404
13113  4405
13114  4406
13115  4407
13116  4408
13117  4409
13118  440A
13119  440B
13120  440C
13121  440D
13122  440E
13123  440F
13124  4410
13125  4411
13126  4412
13127  4413
13128  4414
13129  4415
13130  4416
13131  4417
13132  4418
13133  4419
13134  441A
13135  441B
13136  441C
13137  441D
13138  441E
13139  441F
13140  4420
13141  4421
13142  4422
13143  4423
13144  4424
13145  4425
13146  4426
13147  4427
13148  4428
13149  4429
13150  442A
13151  442B
13152  442C
13153  442D
13154  442E
13155  442F
13156  4430
13157  4431
13158  4432
13159  4433
13160  4434
13161  4435
13162  4436
13163  4437
13164  4438
13165  4439
13166  443A
13167  443B
13168  443C
13169  443D
13170  443E
13171  443F
13172  4440
13173  4441
13174  4442
13175  4443
13176  4444
13177  4445
13178  4446
13179  4447
13180  4448
13181  4449
13182  444A
13183  444B
13184  444C
13185  444D
13186  444E
13187  444F
13188  4450
13189  4451
13190  4452
13191  4453
13192  4454
13193  4455
13194  4456
13195  4457
13196  4458
13197  4459
13198  445A
13199  445B
13200  445C
13201  445D
13202  445E
13203  445F
13204  4460
13205  4461
13206  4462
13207  4463
13208  4464
13209  4465
13210  4466
13211  4467
13212  4468
13213  4469
13214  446A
13215  446B
13216  446C
13217  446D
13218  446E
13219  446F
13220  4470
13221  4471
13222  4472
13223  4473
13224  4474
13225  4475
13226  4476
13227  4477
13228  4478
13229  4479
13230  447A
13231  447B
13232  447C
13233  447D
13234  447E
13235  447F
13236  4480
13237  4481
13238  4482
13239  4483
13240  4484
13241  4485
13242  4486
13243  4487
13244  4488
13245  4489
13246  448A
13247  448B
13248  448C
13249  448D
13250  448E
13251  448F
13252  4490
13253  4491
13254  4492
13255  4493
13256  4494
13257  4495
13258  4496
13259  4497
13260  4498
13261  4499
13262  449A
13263  449B
13264  449C
13265  449D
13266  449E
13267  449F
13268  44A0
13269  44A1
13270  44A2
13271  44A3
13272  44A4
13273  44A5
13274  44A6
13275  44A7
13276  44A8
13277  44A9
13278  44AA
13279  44AB
13280  44AC
13281  44AD
13282  44AE
13283  44AF
13284  44B0
13285  44B1
13286  44B2
13287  44B3
13288  44B4
13289  44B5
13290  44B6
13291  44B7
13292  44B8
13293  44B9
13294  44BA
13295  44BB
13296  44BC
13297  44BD
13298  44BE
13299  44BF
13300  44C0
13301  44C1
13302  44C2
13303  44C3
13304  44C4
13305  44C5
13306  44C6
13307  44C7
13308  44C8
13309  44C9
13310  44CA
13311  44CB
13312  44CC
13313  44CD
13314  44CE
13315  44CF
13316  44D0
13317  44D1
13318  44D2
13319  44D3
13320  44D4
13321  44D5
13322  44D6
13323  44D7
13324  44D8
13325  44D9
13326  44DA
13327  44DB
13328  44DC
13329  44DD
13330  44DE
13331  44DF
13332  44E0
13333  44E1
13334  44E2
13335  44E3
13336  44E4
13337  44E5
13338  44E6
13339  44E7
13340  44E8
13341  44E9
13342  44EA
13343  44EB
13344  44EC
13345  44ED
13346  44EE
13347  44EF
13348  44F0
13349  44F1
13350  44F2
13351  44F3
13352  44F4
13353  44F5
13354  44F6
13355  44F7
13356  44F8
13357  44F9
13358  44FA
13359  44FB
13360  44FC
13361  44FD
13362  44FE
13363  44FF
13364  4500
13365  4501
13366  4502
13367  4503
13368  4504
13369  4505
13370  4506
13371  4507
13372  4508
13373  4509
13374  450A
13375  450B
13376  450C
13377  450D
13378  450E
13379  450F
13380  4510
13381  4511
13382  4512
13383  4513
13384  4514
13385  4515
13386  4516
13387  4517
13388  4518
13389  4519
13390  451A
13391  451B
13392  451C
13393  451D
13394  451E
13395  451F
13396  4520
13397  4521
13398  4522
13399  4523
13400  4524
13401  4525
13402  4526
13403  4527
13404  4528
13405  4529
13406  452A
13407  452B
13408  452C
13409  452D
13410  452E
13411  452F
13412  4530
13413  4531
13414  4532
13415  4533
13416  4534
13417  4535
13418  4536
13419  4537
13420  4538
13421  4539
13422  453A
13423  453B
13424  453C
13425  453D
13426  453E
13427  453F
13428  4540
13429  4541
13430  4542
13431  4543
13432  4544
13433  4545
13434  4546
13435  4547
13436  4548
13437  4549
13438  454A
13439  454B
13440  454C
13441  454D
13442  454E
13443  454F
13444  4550
13445  4551
13446  4552
13447  4553
13448  4554
13449  4555
13450  4556
13451  4557
13452  4558
13453  4559
13454  455A
13455  455B
13456  455C
13457  455D
13458  455E
13459  455F
13460  4560
13461  4561
13462  4562
13463  4563
13464  4564
13465  4565
13466  4566
13467  4567
13468  4568
13469  4569
13470  456A
13471  456B
13472  456C
13473  456D
13474  456E
13475  456F
13476  4570
13477  4571
13478  4572
13479  4573
13480  4574
13481  4575
13482  4576
13483  4577
13484  4578
13485  4579
13486  457A
13487  457B
13488  457C
13489  457D
13490  457E
13491  457F
13492  4580
13493  4581
13494  4582
13495  4583
13496  4584
13497  4585
13498  4586
13499  4587
13500  4588
13501  4589
13502  458A
13503  458B
13504  458C
13505  458D
13506  458E
13507  458F
13508  4590
13509  4591
13510  4592
13511  4593
13512  4594
13513  4595
13514  4596
13515  4597
13516  4598
13517  4599
13518  459A
13519  459B
13520  459C
13521  459D
13522  459E
13523  459F
13524  45A0
13525  45A1
13526  45A2
13527  45A3
13528  45A4
13529  45A5
13530  45A6
13531  45A7
13532  45A8
13533  45A9
13534  45AA
13535  45AB
13536  45AC
13537  45AD
13538  45AE
13539  45AF
13540  45B0
13541  45B1
13542  45B2
13543  45B3
13544  45B4
13545  45B5
13546  45B6
13547  45B7
13548  45B8
13549  45B9
13550  45BA
13551  45BB
13552  45BC
13553  45BD
13554  45BE
13555  45BF
13556  45C0
13557  45C1
13558  45C2
13559  45C3
13560  45C4
13561  45C5
13562  45C6
13563  45C7
13564  45C8
13565  45C9
13566  45CA
13567  45CB
13568  45CC
13569  45CD
13570  45CE
13571  45CF
13572  45D0
13573  45D1
13574  45D2
13575  45D3
13576  45D4
13577  45D5
13578  45D6
13579  45D7
13580  45D8
13581  45D9
13582  45DA
13583  45DB
13584  45DC
13585  45DD
13586  45DE
13587  45DF
13588  45E0
13589  45E1
13590  45E2
13591  45E3
13592  45E4
13593  45E5
13594  45E6
13595  45E7
13596  45E8
13597  45E9
13598  45EA
13599  45EB
13600  45EC
13601  45ED
13602  45EE
13603  45EF
13604  45F0
13605  45F1
13606  45F2
13607  45F3
13608  45F4
13609  45F5
13610  45F6
13611  45F7
13612  45F8
13613  45F9
13614  45FA
13615  45FB
13616  45FC
13617  45FD
13618  45FE
13619  45FF
13620  4600
13621  4601
13622  4602
13623  4603
13624  4604
13625  4605
13626  4606
13627  4607
13628  4608
13629  4609
13630  460A
13631  460B
13632  460C
13633  460D
13634  460E
13635  460F
13636  4610
13637  4611
13638  4612
13639  4613
13640  4614
13641  4615
13642  4616
13643  4617
13644  4618
13645  4619
13646  461A
13647  461B
13648  461C
13649  461D
13650  461E
13651  461F
13652  4620
13653  4621
13654  4622
13655  4623
13656  4624
13657  4625
13658  4626
13659  4627
13660  4628
13661  4629
13662  462A
13663  462B
13664  462C
13665  462D
13666  462E
13667  462F
13668  4630
13669  4631
13670  4632
13671  4633
13672  4634
13673  4635
13674  4636
13675  4637
13676  4638
13677  4639
13678  463A
13679  463B
13680  463C
13681  463D
13682  463E
13683  463F
13684  4640
13685  4641
13686  4642
13687  4643
13688  4644
13689  4645
13690  4646
13691  4647
13692  4648
13693  4649
13694  464A
13695  464B
13696  464C
13697  464D
13698  464E
13699  464F
13700  4650
13701  4651
13702  4652
13703  4653
13704  4654
13705  4655
13706  4656
13707  4657
13708  4658
13709  4659
13710  465A
13711  465B
13712  465C
13713  465D
13714  465E
13715  465F
13716  4660
13717  4661
13718  4662
13719  4663
13720  4664
13721  4665
13722  4666
13723  4667
13724  4668
13725  4669
13726  466A
13727  466B
13728  466C
13729  466D
13730  466E
13731  466F
13732  4670
13733  4671
13734  4672
13735  4673
13736  4674
13737  4675
13738  4676
13739  4677
13740  4678
13741  4679
13742  467A
13743  467B
13744  467C
13745  467D
13746  467E
13747  467F
13748  4680
13749  4681
13750  4682
13751  4683
13752  4684
13753  4685
13754  4686
13755  4687
13756  4688
13757  4689
13758  468A
13759  468B
13760  468C
13761  468D
13762  468E
13763  468F
13764  4690
13765  4691
13766  4692
13767  4693
13768  4694
13769  4695
13770  4696
13771  4697
13772  4698
13773  4699
13774  469A
13775  469B
13776  469C
13777  469D
13778  469E
13779  469F
13780  46A0
13781  46A1
13782  46A2
13783  46A3
13784  46A4
13785  46A5
13786  46A6
13787  46A7
13788  46A8
13789  46A9
13790  46AA
13791  46AB
13792  46AC
13793  46AD
13794  46AE
13795  46AF
13796  46B0
13797  46B1
13798  46B2
13799  46B3
13800  46B4
13801  46B5
13802  46B6
13803  46B7
13804  46B8
13805  46B9
13806  46BA
13807  46BB
13808  46BC
13809  46BD
13810  46BE
13811  46BF
13812  46C0
13813  46C1
13814  46C2
13815  46C3
13816  46C4
13817  46C5
13818  46C6
13819  46C7
13820  46C8
13821  46C9
13822  46CA
13823  46CB
13824  46CC
13825  46CD
13826  46CE
13827  46CF
13828  46D0
13829  46D1
13830  46D2
13831  46D3
13832  46D4
13833  46D5
13834  46D6
13835  46D7
13836  46D8
13837  46D9
13838  46DA
13839  46DB
13840  46DC
13841  46DD
13842  46DE
13843  46DF
13844  46E0
13845  46E1
13846  46E2
13847  46E3
13848  46E4
13849  46E5
13850  46E6
13851  46E7
13852  46E8
13853  46E9
13854  46EA
13855  46EB
13856  46EC
13857  46ED
13858  46EE
13859  46EF
13860  46F0
13861  46F1
13862  46F2
13863  46F3
13864  46F4
13865  46F5
13866  46F6
13867  46F7
13868  46F8
13869  46F9
13870  46FA
13871  46FB
13872  46FC
13873  46FD
13874  46FE
13875  46FF
13876  4700
13877  4701
13878  4702
13879  4703
13880  4704
13881  4705
13882  4706
13883  4707
13884  4708
13885  4709
13886  470A
13887  470B
13888  470C
13889  470D
13890  470E
13891  470F
13892  4710
13893  4711
13894  4712
13895  4713
13896  4714
13897  4715
13898  4716
13899  4717
13900  4718
13901  4719
13902  471A
13903  471B
13904  471C
13905  471D
13906  471E
13907  471F
13908  4720
13909  4721
13910  4722
13911  4723
13912  4724
13913  4725
13914  4726
13915  4727
13916  4728
13917  4729
13918  472A
13919  472B
13920  472C
13921  472D
13922  472E
13923  472F
13924  4730
13925  4731
13926  4732
13927  4733
13928  4734
13929  4735
13930  4736
13931  4737
13932  4738
13933  4739
13934  473A
13935  473B
13936  473C
13937  473D
13938  473E
13939  473F
13940  4740
13941  4741
13942  4742
13943  4743
13944  4744
13945  4745
13946  4746
13947  4747
13948  4748
13949  4749
13950  474A
13951  474B
13952  474C
13953  474D
13954  474E
13955  474F
13956  4750
13957  4751
13958  4752
13959  4753
13960  4754
13961  4755
13962  4756
13963  4757
13964  4758
13965  4759
13966  475A
13967  475B
13968  475C
13969  475D
13970  475E
13971  475F
13972  4760
13973  4761
13974  4762
13975  4763
13976  4764
13977  4765
13978  4766
13979  4767
13980  4768
13981  4769
13982  476A
13983  476B
13984  476C
13985  476D
13986  476E
13987  476F
13988  4770
13989  4771
13990  4772
13991  4773
13992  4774
13993  4775
13994  4776
13995  4777
13996  4778
13997  4779
13998  477A
13999  477B
14000  477C
14001  477D
14002  477E
14003  477F
14004  4780
14005  4781
14006  4782
14007  4783
14008  4784
14009  4785
14010  4786
14011  4787
14012  4788
14013  4789
14014  478A
14015  478B
14016  478C
14017  478D
14018  478E
14019  478F
14020  4790
14021  4791
14022  4792
14023  4793
14024  4794
14025  4795
14026  4796
14027  4797
14028  4798
14029  4799
14030  479A
14031  479B
14032  479C
14033  479D
14034  479E
14035  479F
14036  47A0
14037  47A1
14038  47A2
14039  47A3
14040  47A4
14041  47A5
14042  47A6
14043  47A7
14044  47A8
14045  47A9
14046  47AA
14047  47AB
14048  47AC
14049  47AD
14050  47AE
14051  47AF
14052  47B0
14053  47B1
14054  47B2
14055  47B3
14056  47B4
14057  47B5
14058  47B6
14059  47B7
14060  47B8
14061  47B9
14062  47BA
14063  47BB
14064  47BC
14065  47BD
14066  47BE
14067  47BF
14068  47C0
14069  47C1
14070  47C2
14071  47C3
14072  47C4
14073  47C5
14074  47C6
14075  47C7
14076  47C8
14077  47C9
14078  47CA
14079  47CB
14080  47CC
14081  47CD
14082  47CE
14083  47CF
14084  47D0
14085  47D1
14086  47D2
14087  47D3
14088  47D4
14089  47D5
14090  47D6
14091  47D7
14092  47D8
14093  47D9
14094  47DA
14095  47DB
14096  47DC
14097  47DD
14098  47DE
14099  47DF
14100  47E0
14101  47E1
14102  47E2
14103  47E3
14104  47E4
14105  47E5
14106  47E6
14107  47E7
14108  47E8
14109  47E9
14110  47EA
14111  47EB
14112  47EC
14113  47ED
14114  47EE
14115  47EF
14116  47F0
14117  47F1
14118  47F2
14119  47F3
14120  47F4
14121  47F5
14122  47F6
14123  47F7
14124  47F8
14125  47F9
14126  47FA
14127  47FB
14128  47FC
14129  47FD
14130  47FE
14131  47FF
14132  4800
14133  4801
14134  4802
14135  4803
14136  4804
14137  4805
14138  4806
14139  4807
14140  4808
14141  4809
14142  480A
14143  480B
14144  480C
14145  480D
14146  480E
14147  480F
14148  4810
14149  4811
14150  4812
14151  4813
14152  4814
14153  4815
14154  4816
14155  4817
14156  4818
14157  4819
14158  481A
14159  481B
14160  481C
14161  481D
14162  481E
14163  481F
14164  4820
14165  4821
14166  4822
14167  4823
14168  4824
14169  4825
14170  4826
14171  4827
14172  4828
14173  4829
14174  482A
14175  482B
14176  482C
14177  482D
14178  482E
14179  482F
14180  4830
14181  4831
14182  4832
14183  4833
14184  4834
14185  4835
14186  4836
14187  4837
14188  4838
14189  4839
14190  483A
14191  483B
14192  483C
14193  483D
14194  483E
14195  483F
14196  4840
14197  4841
14198  4842
14199  4843
14200  4844
14201  4845
14202  4846
14203  4847
14204  4848
14205  4849
14206  484A
14207  484B
14208  484C
14209  484D
14210  484E
14211  484F
14212  4850
14213  4851
14214  4852
14215  4853
14216  4854
14217  4855
14218  4856
14219  4857
14220  4858
14221  4859
14222  485A
14223  485B
14224  485C
14225  485D
14226  485E
14227  485F
14228  4860
14229  4861
14230  4862
14231  4863
14232  4864
14233  4865
14234  4866
14235  4867
14236  4868
14237  4869
14238  486A
14239  486B
14240  486C
14241  486D
14242  486E
14243  486F
14244  4870
14245  4871
14246  4872
14247  4873
14248  4874
14249  4875
14250  4876
14251  4877
14252  4878
14253  4879
14254  487A
14255  487B
14256  487C
14257  487D
14258  487E
14259  487F
14260  4880
14261  4881
14262  4882
14263  4883
14264  4884
14265  4885
14266  4886
14267  4887
14268  4888
14269  4889
14270  488A
14271  488B
14272  488C
14273  488D
14274  488E
14275  488F
14276  4890
14277  4891
14278  4892
14279  4893
14280  4894
14281  4895
14282  4896
14283  4897
14284  4898
14285  4899
14286  489A
14287  489B
14288  489C
14289  489D
14290  489E
14291  489F
14292  48A0
14293  48A1
14294  48A2
14295  48A3
14296  48A4
14297  48A5
14298  48A6
14299  48A7
14300  48A8
14301  48A9
14302  48AA
14303  48AB
14304  48AC
14305  48AD
14306  48AE
14307  48AF
14308  48B0
14309  48B1
14310  48B2
14311  48B3
14312  48B4
14313  48B5
14314  48B6
14315  48B7
14316  48B8
14317  48B9
14318  48BA
14319  48BB
14320  48BC
14321  48BD
14322  48BE
14323  48BF
14324  48C0
14325  48C1
14326  48C2
14327  48C3
14328  48C4
14329  48C5
14330  48C6
14331  48C7
14332  48C8
14333  48C9
14334  48CA
14335  48CB
14336  48CC
14337  48CD
14338  48CE
14339  48CF
14340  48D0
14341  48D1
14342  48D2
14343  48D3
14344  48D4
14345  48D5
14346  48D6
14347  48D7
14348  48D8
14349  48D9
14350  48DA
14351  48DB
14352  48DC
14353  48DD
14354  48DE
14355  48DF
14356  48E0
14357  48E1
14358  48E2
14359  48E3
14360  48E4
14361  48E5
14362  48E6
14363  48E7
14364  48E8
14365  48E9
14366  48EA
14367  48EB
14368  48EC
14369  48ED
14370  48EE
14371  48EF
14372  48F0
14373  48F1
14374  48F2
14375  48F3
14376  48F4
14377  48F5
14378  48F6
14379  48F7
14380  48F8
14381  48F9
14382  48FA
14383  48FB
14384  48FC
14385  48FD
14386  48FE
14387  48FF
14388  4900
14389  4901
14390  4902
14391  4903
14392  4904
14393  4905
14394  4906
14395  4907
14396  4908
14397  4909
14398  490A
14399  490B
14400  490C
14401  490D
14402  490E
14403  490F
14404  4910
14405  4911
14406  4912
14407  4913
14408  4914
14409  4915
14410  4916
14411  4917
14412  4918
14413  4919
14414  491A
14415  491B
14416  491C
14417  491D
14418  491E
14419  491F
14420  4920
14421  4921
14422  4922
14423  4923
14424  4924
14425  4925
14426  4926
14427  4927
14428  4928
14429  4929
14430  492A
14431  492B
14432  492C
14433  492D
14434  492E
14435  492F
14436  4930
14437  4931
14438  4932
14439  4933
14440  4934
14441  4935
14442  4936
14443  4937
14444  4938
14445  4939
14446  493A
14447  493B
14448  493C
14449  493D
14450  493E
14451  493F
14452  4940
14453  4941
14454  4942
14455  4943
14456  4944
14457  4945
14458  4946
14459  4947
14460  4948
14461  4949
14462  494A
14463  494B
14464  494C
14465  494D
14466  494E
14467  494F
14468  4950
14469  4951
14470  4952
14471  4953
14472  4954
14473  4955
14474  4956
14475  4957
14476  4958
14477  4959
14478  495A
14479  495B
14480  495C
14481  495D
14482  495E
14483  495F
14484  4960
14485  4961
14486  4962
14487  4963
14488  4964
14489  4965
14490  4966
14491  4967
14492  4968
14493  4969
14494  496A
14495  496B
14496  496C
14497  496D
14498  496E
14499  496F
14500  4970
14501  4971
14502  4972
14503  4973
14504  4974
14505  4975
14506  4976
14507  4977
14508  4978
14509  4979
14510  497A
14511  497B
14512  497C
14513  497D
14514  497E
14515  497F
14516  4980
14517  4981
14518  4982
14519  4983
14520  4984
14521  4985
14522  4986
14523  4987
14524  4988
14525  4989
14526  498A
14527  498B
14528  498C
14529  498D
14530  498E
14531  498F
14532  4990
14533  4991
14534  4992
14535  4993
14536  4994
14537  4995
14538  4996
14539  4997
14540  4998
14541  4999
14542  499A
14543  499B
14544  499C
14545  499D
14546  499E
14547  499F
14548  49A0
14549  49A1
14550  49A2
14551  49A3
14552  49A4
14553  49A5
14554  49A6
14555  49A7
14556  49A8
14557  49A9
14558  49AA
14559  49AB
14560  49AC
14561  49AD
14562  49AE
14563  49AF
14564  49B0
14565  49B1
14566  49B2
14567  49B3
14568  49B4
14569  49B5
14570  49B6
14571  49B7
14572  49B8
14573  49B9
14574  49BA
14575  49BB
14576  49BC
14577  49BD
14578  49BE
14579  49BF
14580  49C0
14581  49C1
14582  49C2
14583  49C3
14584  49C4
14585  49C5
14586  49C6
14587  49C7
14588  49C8
14589  49C9
14590  49CA
14591  49CB
14592  49CC
14593  49CD
14594  49CE
14595  49CF
14596  49D0
14597  49D1
14598  49D2
14599  49D3
14600  49D4
14601  49D5
14602  49D6
14603  49D7
14604  49D8
14605  49D9
14606  49DA
14607  49DB
14608  49DC
14609  49DD
14610  49DE
14611  49DF
14612  49E0
14613  49E1
14614  49E2
14615  49E3
14616  49E4
14617  49E5
14618  49E6
14619  49E7
14620  49E8
14621  49E9
14622  49EA
14623  49EB
14624  49EC
14625  49ED
14626  49EE
14627  49EF
14628  49F0
14629  49F1
14630  49F2
14631  49F3
14632  49F4
14633  49F5
14634  49F6
14635  49F7
14636  49F8
14637  49F9
14638  49FA
14639  49FB
14640  49FC
14641  49FD
14642  49FE
14643  49FF
14644  4A00
14645  4A01
14646  4A02
14647  4A03
14648  4A04
14649  4A05
14650  4A06
14651  4A07
14652  4A08
14653  4A09
14654  4A0A
14655  4A0B
14656  4A0C
14657  4A0D
14658  4A0E
14659  4A0F
14660  4A10
14661  4A11
14662  4A12
14663  4A13
14664  4A14
14665  4A15
14666  4A16
14667  4A17
14668  4A18
14669  4A19
14670  4A1A
14671  4A1B
14672  4A1C
14673  4A1D
14674  4A1E
14675  4A1F
14676  4A20
14677  4A21
14678  4A22
14679  4A23
14680  4A24
14681  4A25
14682  4A26
14683  4A27
14684  4A28
14685  4A29
14686  4A2A
14687  4A2B
14688  4A2C
14689  4A2D
14690  4A2E
14691  4A2F
14692  4A30
14693  4A31
14694  4A32
14695  4A33
14696  4A34
14697  4A35
14698  4A36
14699  4A37
14700  4A38
14701  4A39
14702  4A3A
14703  4A3B
14704  4A3C
14705  4A3D
14706  4A3E
14707  4A3F
14708  4A40
14709  4A41
14710  4A42
14711  4A43
14712  4A44
14713  4A45
14714  4A46
14715  4A47
14716  4A48
14717  4A49
14718  4A4A
14719  4A4B
14720  4A4C
14721  4A4D
14722  4A4E
14723  4A4F
14724  4A50
14725  4A51
14726  4A52
14727  4A53
14728  4A54
14729  4A55
14730  4A56
14731  4A57
14732  4A58
14733  4A59
14734  4A5A
14735  4A5B
14736  4A5C
14737  4A5D
14738  4A5E
14739  4A5F
14740  4A60
14741  4A61
14742  4A62
14743  4A63
14744  4A64
14745  4A65
14746  4A66
14747  4A67
14748  4A68
14749  4A69
14750  4A6A
14751  4A6B
14752  4A6C
14753  4A6D
14754  4A6E
14755  4A6F
14756  4A70
14757  4A71
14758  4A72
14759  4A73
14760  4A74
14761  4A75
14762  4A76
14763  4A77
14764  4A78
14765  4A79
14766  4A7A
14767  4A7B
14768  4A7C
14769  4A7D
14770  4A7E
14771  4A7F
14772  4A80
14773  4A81
14774  4A82
14775  4A83
14776  4A84
14777  4A85
14778  4A86
14779  4A87
14780  4A88
14781  4A89
14782  4A8A
14783  4A8B
14784  4A8C
14785  4A8D
14786  4A8E
14787  4A8F
14788  4A90
14789  4A91
14790  4A92
14791  4A93
14792  4A94
14793  4A95
14794  4A96
14795  4A97
14796  4A98
14797  4A99
14798  4A9A
14799  4A9B
14800  4A9C
14801  4A9D
14802  4A9E
14803  4A9F
14804  4AA0
14805  4AA1
14806  4AA2
14807  4AA3
14808  4AA4
14809  4AA5
14810  4AA6
14811  4AA7
14812  4AA8
14813  4AA9
14814  4AAA
14815  4AAB
14816  4AAC
14817  4AAD
14818  4AAE
14819  4AAF
14820  4AB0
14821  4AB1
14822  4AB2
14823  4AB3
14824  4AB4
14825  4AB5
14826  4AB6
14827  4AB7
14828  4AB8
14829  4AB9
14830  4ABA
14831  4ABB
14832  4ABC
14833  4ABD
14834  4ABE
14835  4ABF
14836  4AC0
14837  4AC1
14838  4AC2
14839  4AC3
14840  4AC4
14841  4AC5
14842  4AC6
14843  4AC7
14844  4AC8
14845  4AC9
14846  4ACA
14847  4ACB
14848  4ACC
14849  4ACD
14850  4ACE
14851  4ACF
14852  4AD0
14853  4AD1
14854  4AD2
14855  4AD3
14856  4AD4
14857  4AD5
14858  4AD6
14859  4AD7
14860  4AD8
14861  4AD9
14862  4ADA
14863  4ADB
14864  4ADC
14865  4ADD
14866  4ADE
14867  4ADF
14868  4AE0
14869  4AE1
14870  4AE2
14871  4AE3
14872  4AE4
14873  4AE5
14874  4AE6
14875  4AE7
14876  4AE8
14877  4AE9
14878  4AEA
14879  4AEB
14880  4AEC
14881  4AED
14882  4AEE
14883  4AEF
14884  4AF0
14885  4AF1
14886  4AF2
14887  4AF3
14888  4AF4
14889  4AF5
14890  4AF6
14891  4AF7
14892  4AF8
14893  4AF9
14894  4AFA
14895  4AFB
14896  4AFC
14897  4AFD
14898  4AFE
14899  4AFF
14900  4B00
14901  4B01
14902  4B02
14903  4B03
14904  4B04
14905  4B05
14906  4B06
14907  4B07
14908  4B08
14909  4B09
14910  4B0A
14911  4B0B
14912  4B0C
14913  4B0D
14914  4B0E
14915  4B0F
14916  4B10
14917  4B11
14918  4B12
14919  4B13
14920  4B14
14921  4B15
14922  4B16
14923  4B17
14924  4B18
14925  4B19
14926  4B1A
14927  4B1B
14928  4B1C
14929  4B1D
14930  4B1E
14931  4B1F
14932  4B20
14933  4B21
14934  4B22
14935  4B23
14936  4B24
14937  4B25
14938  4B26
14939  4B27
14940  4B28
14941  4B29
14942  4B2A
14943  4B2B
14944  4B2C
14945  4B2D
14946  4B2E
14947  4B2F
14948  4B30
14949  4B31
14950  4B32
14951  4B33
14952  4B34
14953  4B35
14954  4B36
14955  4B37
14956  4B38
14957  4B39
14958  4B3A
14959  4B3B
14960  4B3C
14961  4B3D
14962  4B3E
14963  4B3F
14964  4B40
14965  4B41
14966  4B42
14967  4B43
14968  4B44
14969  4B45
14970  4B46
14971  4B47
14972  4B48
14973  4B49
14974  4B4A
14975  4B4B
14976  4B4C
14977  4B4D
14978  4B4E
14979  4B4F
14980  4B50
14981  4B51
14982  4B52
14983  4B53
14984  4B54
14985  4B55
14986  4B56
14987  4B57
14988  4B58
14989  4B59
14990  4B5A
14991  4B5B
14992  4B5C
14993  4B5D
14994  4B5E
14995  4B5F
14996  4B60
14997  4B61
14998  4B62
14999  4B63
15000  4B64
15001  4B65
15002  4B66
15003  4B67
15004  4B68
15005  4B69
15006  4B6A
15007  4B6B
15008  4B6C
15009  4B6D
15010  4B6E
15011  4B6F
15012  4B70
15013  4B71
15014  4B72
15015  4B73
15016  4B74
15017  4B75
15018  4B76
15019  4B77
15020  4B78
15021  4B79
15022  4B7A
15023  4B7B
15024  4B7C
15025  4B7D
15026  4B7E
15027  4B7F
15028  4B80
15029  4B81
15030  4B82
15031  4B83
15032  4B84
15033  4B85
15034  4B86
15035  4B87
15036  4B88
15037  4B89
15038  4B8A
15039  4B8B
15040  4B8C
15041  4B8D
15042  4B8E
15043  4B8F
15044  4B90
15045  4B91
15046  4B92
15047  4B93
15048  4B94
15049  4B95
15050  4B96
15051  4B97
15052  4B98
15053  4B99
15054  4B9A
15055  4B9B
15056  4B9C
15057  4B9D
15058  4B9E
15059  4B9F
15060  4BA0
15061  4BA1
15062  4BA2
15063  4BA3
15064  4BA4
15065  4BA5
15066  4BA6
15067  4BA7
15068  4BA8
15069  4BA9
15070  4BAA
15071  4BAB
15072  4BAC
15073  4BAD
15074  4BAE
15075  4BAF
15076  4BB0
15077  4BB1
15078  4BB2
15079  4BB3
15080  4BB4
15081  4BB5
15082  4BB6
15083  4BB7
15084  4BB8
15085  4BB9
15086  4BBA
15087  4BBB
15088  4BBC
15089  4BBD
15090  4BBE
15091  4BBF
15092  4BC0
15093  4BC1
15094  4BC2
15095  4BC3
15096  4BC4
15097  4BC5
15098  4BC6
15099  4BC7
15100  4BC8
15101  4BC9
15102  4BCA
15103  4BCB
15104  4BCC
15105  4BCD
15106  4BCE
15107  4BCF
15108  4BD0
15109  4BD1
15110  4BD2
15111  4BD3
15112  4BD4
15113  4BD5
15114  4BD6
15115  4BD7
15116  4BD8
15117  4BD9
15118  4BDA
15119  4BDB
15120  4BDC
15121  4BDD
15122  4BDE
15123  4BDF
15124  4BE0
15125  4BE1
15126  4BE2
15127  4BE3
15128  4BE4
15129  4BE5
15130  4BE6
15131  4BE7
15132  4BE8
15133  4BE9
15134  4BEA
15135  4BEB
15136  4BEC
15137  4BED
15138  4BEE
15139  4BEF
15140  4BF0
15141  4BF1
15142  4BF2
15143  4BF3
15144  4BF4
15145  4BF5
15146  4BF6
15147  4BF7
15148  4BF8
15149  4BF9
15150  4BFA
15151  4BFB
15152  4BFC
15153  4BFD
15154  4BFE
15155  4BFF
15156  4C00
15157  4C01
15158  4C02
15159  4C03
15160  4C04
15161  4C05
15162  4C06
15163  4C07
15164  4C08
15165  4C09
15166  4C0A
15167  4C0B
15168  4C0C
15169  4C0D
15170  4C0E
15171  4C0F
15172  4C10
15173  4C11
15174  4C12
15175  4C13
15176  4C14
15177  4C15
15178  4C16
15179  4C17
15180  4C18
15181  4C19
15182  4C1A
15183  4C1B
15184  4C1C
15185  4C1D
15186  4C1E
15187  4C1F
15188  4C20
15189  4C21
15190  4C22
15191  4C23
15192  4C24
15193  4C25
15194  4C26
15195  4C27
15196  4C28
15197  4C29
15198  4C2A
15199  4C2B
15200  4C2C
15201  4C2D
15202  4C2E
15203  4C2F
15204  4C30
15205  4C31
15206  4C32
15207  4C33
15208  4C34
15209  4C35
15210  4C36
15211  4C37
15212  4C38
15213  4C39
15214  4C3A
15215  4C3B
15216  4C3C
15217  4C3D
15218  4C3E
15219  4C3F
15220  4C40
15221  4C41
15222  4C42
15223  4C43
15224  4C44
15225  4C45
15226  4C46
15227  4C47
15228  4C48
15229  4C49
15230  4C4A
15231  4C4B
15232  4C4C
15233  4C4D
15234  4C4E
15235  4C4F
15236  4C50
15237  4C51
15238  4C52
15239  4C53
15240  4C54
15241  4C55
15242  4C56
15243  4C57
15244  4C58
15245  4C59
15246  4C5A
15247  4C5B
15248  4C5C
15249  4C5D
15250  4C5E
15251  4C5F
15252  4C60
15253  4C61
15254  4C62
15255  4C63
15256  4C64
15257  4C65
15258  4C66
15259  4C67
15260  4C68
15261  4C69
15262  4C6A
15263  4C6B
15264  4C6C
15265  4C6D
15266  4C6E
15267  4C6F
15268  4C70
15269  4C71
15270  4C72
15271  4C73
15272  4C74
15273  4C75
15274  4C76
15275  4C77
15276  4C78
15277  4C79
15278  4C7A
15279  4C7B
15280  4C7C
15281  4C7D
15282  4C7E
15283  4C7F
15284  4C80
15285  4C81
15286  4C82
15287  4C83
15288  4C84
15289  4C85
15290  4C86
15291  4C87
15292  4C88
15293  4C89
15294  4C8A
15295  4C8B
15296  4C8C
15297  4C8D
15298  4C8E
15299  4C8F
15300  4C90
15301  4C91
15302  4C92
15303  4C93
15304  4C94
15305  4C95
15306  4C96
15307  4C97
15308  4C98
15309  4C99
15310  4C9A
15311  4C9B
15312  4C9C
15313  4C9D
15314  4C9E
15315  4C9F
15316  4CA0
15317  4CA1
15318  4CA2
15319  4CA3
15320  4CA4
15321  4CA5
15322  4CA6
15323  4CA7
15324  4CA8
15325  4CA9
15326  4CAA
15327  4CAB
15328  4CAC
15329  4CAD
15330  4CAE
15331  4CAF
15332  4CB0
15333  4CB1
15334  4CB2
15335  4CB3
15336  4CB4
15337  4CB5
15338  4CB6
15339  4CB7
15340  4CB8
15341  4CB9
15342  4CBA
15343  4CBB
15344  4CBC
15345  4CBD
15346  4CBE
15347  4CBF
15348  4CC0
15349  4CC1
15350  4CC2
15351  4CC3
15352  4CC4
15353  4CC5
15354  4CC6
15355  4CC7
15356  4CC8
15357  4CC9
15358  4CCA
15359  4CCB
15360  4CCC
15361  4CCD
15362  4CCE
15363  4CCF
15364  4CD0
15365  4CD1
15366  4CD2
15367  4CD3
15368  4CD4
15369  4CD5
15370  4CD6
15371  4CD7
15372  4CD8
15373  4CD9
15374  4CDA
15375  4CDB
15376  4CDC
15377  4CDD
15378  4CDE
15379  4CDF
15380  4CE0
15381  4CE1
15382  4CE2
15383  4CE3
15384  4CE4
15385  4CE5
15386  4CE6
15387  4CE7
15388  4CE8
15389  4CE9
15390  4CEA
15391  4CEB
15392  4CEC
15393  4CED
15394  4CEE
15395  4CEF
15396  4CF0
15397  4CF1
15398  4CF2
15399  4CF3
15400  4CF4
15401  4CF5
15402  4CF6
15403  4CF7
15404  4CF8
15405  4CF9
15406  4CFA
15407  4CFB
15408  4CFC
15409  4CFD
15410  4CFE
15411  4CFF
15412  4D00
15413  4D01
15414  4D02
15415  4D03
15416  4D04
15417  4D05
15418  4D06
15419  4D07
15420  4D08
15421  4D09
15422  4D0A
15423  4D0B
15424  4D0C
15425  4D0D
15426  4D0E
15427  4D0F
15428  4D10
15429  4D11
15430  4D12
15431  4D13
15432  4D14
15433  4D15
015434  000567        
015435  000568  var hFonts[54] ;
015436  000569  var stringsCV[54] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
15437  26FA
15438  26FB
15439  26FC
15440  26FD
15441  26FE
15442  26FF
15443  2700
15444  2701
15445  2702
15446  2703
15447  2704
15448  2705
15449  2706
15450  2707
15451  2708
15452  2709
15453  270A
15454  270B
15455  270C
15456  270D
15457  270E
15458  270F
15459  2710
15460  2711
15461  2712
15462  2713
15463  2714
15464  2715
15465  2716
15466  2717
15467  2718
15468  2719
15469  271A
15470  271B
15471  271C
15472  271D
15473  271E
15474  271F
15475  2720
15476  2721
15477  2722
15478  2723
15479  2724
15480  2725
15481  2726
15482  2727
15483  2728
15484  2729
15485  272A
15486  272B
15487  272C
15488  272D
15489  272E
15490  272F
15491  2730
15492  2731
15493  2732
15494  2733
15495  2734
15496  2735
15497  2736
15498  2737
15499  2738
15500  2739
15501  273A
15502  273B
15503  273C
15504  273D
15505  273E
15506  273F
15507  2740
15508  2741
15509  2742
15510  2743
15511  2744
15512  2745
15513  2746
15514  2747
15515  2748
15516  2749
15517  274A
15518  274B
15519  274C
15520  274D
15521  274E
15522  274F
15523  2750
15524  2751
15525  2752
15526  2753
15527  2754
15528  2755
15529  2756
15530  2757
15531  2758
15532  2759
15533  275A
15534  275B
15535  275C
15536  275D
15537  275E
15538  275F
15539  2760
15540  2761
15541  2762
15542  2763
15543  2764
15544  2765
015545  000570  // Start P2.inc
015546  000571  var oObjects[MaxTotObjects+1] ;                 // address of objects
015547  000572  var CurrentForm ;
015548  000573  var TouchXpos, TouchYpos ;
015549  000574  var InputType, TouchState, CurInputData, pInputIndex ;
015550  000575  var comRX[40], cmd[CMDLenMAX] ;
015551  000576        
015552  000577  var InputCS, OutputCS ;
015553  000578        
015554  000579        
015555  000580        
015556  000581  func seroutCS(var op)
015557  000582      serout(op) ;
015558  000583      OutputCS ^= op ;
015559  000584  endfunc
015560  000585        
015561  000586  func nak0()
015562  000587      serout(NAK) ;
015563  000588      InputCS := 0 ;
015564  000589  endfunc
015565  000590        
015566  000591  func seroutOcs()
015567  000592      serout(OutputCS) ;
015568  000593      OutputCS := 0 ;
015569  000594  endfunc
015570  000595        
015571  000596  func SendReport(var id, var objt, var objn, var val)
015572  000597      seroutCS(id) ;
015573  000598      seroutCS(objt) ;
015574  000599      seroutCS(objn) ;
015575  000600      seroutCS(val >> 8) ; // first 8 bits
015576  000601      seroutCS(val) ;
015577  000602      seroutOcs() ;
015578  000603  endfunc
015579  000604        
015580  000605        
015581  000606  func ReadObject(var ObjectType, var ObjectIdx)
015582  000607      var j, k, Objects ;
015583  000608      Objects := *(oObjects+ObjectType) ;
015584  000609        
015585  000610      j := 2 + ObjectIdx * 2 + Objects ;
015586  000611       if (ObjectType == tForm)
015587  000612          k := CurrentForm ;
015588  000613      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
015589  000614          k := img_GetWord(hndl, *j, IMAGE_TAG2);
015590  000615      else if (ObjectType == tStrings)
015591  000616          k := stringsCV[ObjectIdx];
015592  000617          else
015593  000618          k := img_GetWord(hndl, *j, IMAGE_INDEX);
015594  000619          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
015595  000620                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
015596  000621      endif
015597  000622      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
015598  000623  endfunc
015599  000624        
015600  000625        
015601  000626  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
015602  000627      var i, j, k, Objects ;
015603  000628      ObjectType &= 0x3f ;
015604  000629      if (ObjectType == tForm)
015605  000630          ActivateForm(ObjectIdx) ;
015606  000631      else
015607  000632          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
015608  000633          i := *(Objects) ;
015609  000634          switch (ObjectType)
015610  000635              case tWinButton :
015611  000636                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
015612  000637                  break ;
015613  000638              case tUserButton :
015614  000639                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
015615  000640                  break ;
015616  000641              default : j := -1 ;
015617  000642          endswitch
015618  000643          if (j != -1)
015619  000644              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
015620  000645              NewVal := NewVal << 1 ;
015621  000646              if (OVF())      // button group index change
015622  000647                  if (*(j+InputData+Ofs_IPD_P1))
015623  000648                      k &= 1 ;    // mask off old group index for momentary
015624  000649                  else
015625  000650                      k &= 3 ;    // mask off old group index for toggle
015626  000651                  endif
015627  000652              else            // normal set
015628  000653                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
015629  000654                  k &= 0xfffc ;    // retain only group index for state set
015630  000655              endif
015631  000656              NewVal |= k ;
015632  000657          endif
015633  000658           if (ObjectType == tLeddigits)
015634  000659              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
015635  000660              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015636  000661          else if (ObjectType == tStrings)
015637  000662              PrintStrings(ObjectIdx, NewVal, 0);
015638  000663          else
015639  000664              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
015640  000665              img_Show(hndl, i) ; // will only display if form is current
015641  000666          endif
015642  000667      endif
015643  000668  endfunc
015644  000669        
015645  000670  func TurnOffButtons(var group)
015646  000671      var j, k, l;
015647  000672      for (j := 0; j < nInputs; j++)
015648  000673          k := j*IPDatasize ;
015649  000674          if (*(InputData+k+Ofs_IPD_P2) == group)
015650  000675              l := -1 ;
015651  000676               if (*(InputData+k) == tWinButton)
015652  000677                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015653  000678                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
015654  000679                  img_Show(hndl, l);      // only shows on current form
015655  000680              else if (*(InputData+k) == tUserButton)
015656  000681                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015657  000682                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
015658  000683                  img_Show(hndl, l);      // only shows on current form
015659  000684              endif
015660  000685          endif
015661  000686      next
015662  000687  endfunc
015663  000688        
015664  000689        
015665  000690  // WARNING, this code will crash if newval exceeds maximum displayable number
015666  000691  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
015667  000692      var i, j, k, l, lb, newval ;
015668  000693      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
015669  000694      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
015670  000695      i := -1 ;
015671  000696      j := *(typeptr) ;
015672  000697      repeat
015673  000698          typeptr += 2 ;
015674  000699          i++ ;
015675  000700          until (*(typeptr) == imgidx);
015676  000701      j := setptr + i*10 ;
015677  000702        
015678  000703      imgidx++ ;
015679  000704      l := 1 ;
015680  000705      for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
015681  000706          l *= 10 ;
015682  000707      next
015683  000708      lb := *(j+Ofs_Digits_LeadingBlanks) ;
015684  000709      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
015685  000710          k := newval / l ;
015686  000711          newval -= k * l ;
015687  000712          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
015688  000713              if (k == 0)
015689  000714                  k := 10 ;
015690  000715              else
015691  000716                  lb := 0 ;
015692  000717              endif
015693  000718          endif
015694  000719          l /= 10 ;
015695  000720          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
015696  000721          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
015697  000722          img_Show(hndl, imgidx);
015698  000723      next
015699  000724  endfunc
015700  000725        
015701  000726        
015702  000727  func ActivateForm(var newform)
015703  000728      var i, j, *p ;
015704  000729        
015705  000730      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
015706  000731          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
015707  000732              if (img_GetWord(hndl, i, IMAGE_TAG))
015708  000733                  img_Disable(hndl,i) ;
015709  000734              endif
015710  000735          next
015711  000736      endif
015712  000737      CurrentForm := newform ;
015713  000738      // display newform image or clear to image color
015714  000739      if (FormBGcolors[CurrentForm] != ColorBGimage)
015715  000740          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
015716  000741          gfx_Cls() ;
015717  000742          DoGFXObjects() ;                                    // display GFX 'widgets'
015718  000743      endif
015719  000744        
015720  000745      // enable inputs
015721  000746      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
015722  000747          j := img_GetWord(hndl, i, IMAGE_TAG) ;
015723  000748          if (j)
015724  000749              j-- ;
015725  000750              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
015726  000751              //if (j != tKeyboard)
015727  000752              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
015728  000753                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
015729  000754              endif
015730  000755              img_Show(hndl,i) ; // show initialy, if required
015731  000756              if (j == tForm)
015732  000757                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
015733  000758              else if (j == tLeddigits)
015734  000759                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015735  000760              endif
015736  000761          endif
015737  000762      next
015738  000763      for (i := 0; i < nStrings; i++)
015739  000764          if (stringsCV[i] != -1)
015740  000765              WriteObject(tStrings, i, stringsCV[i]) ;
015741  000766          endif
015742  000767      next
015743  000768        
015744  000769  endfunc
015745  000770        
015746  000771  func UpdateObjects(var newval)
015747  000772      var IPidx, otherOBJ ;
015748  000773      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
015749  000774        
015750  000775          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
015751  000776              img_Show(hndl, *(pInputIndex));      // only shows on current form
015752  000777          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
015753  000778              if (*(CurInputData+Ofs_IPD_P1))
015754  000779                  newval &= 1;
015755  000780              else
015756  000781                  newval &= 3;
015757  000782              endif
015758  000783              if (newval > 1) newval := 1;
015759  000784          endif
015760  000785          IPidx := *(CurInputData+TouchState) ;
015761  000786          while(IPidx != 0)
015762  000787              otherOBJ := IPidx + InputData;
015763  000788              if (*(otherOBJ) == OT_REPORT)
015764  000789          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
015765  000790              else if (*(otherOBJ) == OT_MAGIC)
015766  000791                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
015767  000792                  IPidx(newval) ;
015768  000793              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
015769  000794                  if (*(otherOBJ) == OT_ACTIVATE)
015770  000795                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
015771  000796                      InputType := tForm ;
015772  000797                  else if (*(otherOBJ) == OT_SETCONST)
015773  000798                      newval := *(otherOBJ+Ofs_IPD_P3) ;
015774  000799                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015775  000800                  else if (*(otherOBJ) == OT_SETANOTHER)
015776  000801                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015777  000802                  else if (*(otherOBJ) == OT_PREVFRAME)
015778  000803                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
015779  000804                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
015780  000805                      endif
015781  000806                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015782  000807                  else if (*(otherOBJ) == OT_NEXTFRAME)
015783  000808                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
015784  000809                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
015785  000810                      endif
015786  000811                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015787  000812                  else if (*(otherOBJ) == OT_PREVSTRING)
015788  000813                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
015789  000814                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
015790  000815                      endif
015791  000816                  else if (*(otherOBJ) == OT_NEXTSTRING)
015792  000817                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
015793  000818                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
015794  000819                      endif
015795  000820                  endif
015796  000821              endif
015797  000822              IPidx := *(otherOBJ+TouchState) ;
015798  000823          wend
015799  000824      endif
015800  000825  endfunc
015801  000826        
015802  000827  // End P2.inc
015803  000828  func DoGFXObjects()
015804  000829  endfunc
015805  000830        
015806  000831  // Start P3.inc
015807  000832  func main()
015808  000833      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
015809  000834        
015810  000835     // putstr("Mounting...\n");
015811  000836      if (!(file_Mount()))
015812  000837          while(!(file_Mount()))
015813  000838              putstr("Drive not mounted...");
015814  000839              pause(200);
015815  000840              gfx_Cls();
015816  000841              pause(200);
015817  000842          wend
015818  000843      endif
015819  000844  //    gfx_MoveTo(0, 0);
015820  000845  //    print(mem_Heap()," ") ;
015821  000846  //    gfx_TransparentColour(0x0020);
015822  000847  //    gfx_Transparency(ON);
015823  000848        
015824  000849      gfx_ScreenMode(LANDSCAPE) ;
015825  000850        
015826  000851      // open image control
015827  000852      hndl := file_LoadImageControl("RepRap_T.dat", "RepRap_T.gci", 1);
015828  000853        
015829  000854      // init 'constants'
015830  000855  // End P3.inc
015831  000856        
015832  000857      oObjects[tDipSwitch] := oDipSwitchs ;
015833  000858      oObjects[tKnob] := oKnobs ;
015834  000859      oObjects[tRockerSwitch] := oRockerSwitchs ;
015835  000860      oObjects[tRotarySwitch] := oRotarySwitchs ;
015836  000861      oObjects[tGSlider] := oGSliders ;
015837  000862      oObjects[tTrackbar] := oTrackbars ;
015838  000863      oObjects[tWinButton] := oWinButtons ;
015839  000864      oObjects[tAngularmeter] := oAngularmeters ;
015840  000865      oObjects[tCoolgauge] := oCoolgauges ;
015841  000866      oObjects[tCustomdigits] := oCustomdigitss ;
015842  000867      oObjects[tForm] := oForms ;
015843  000868      oObjects[tGauge] := oGauges ;
015844  000869      oObjects[tImage] := oImages ;
015845  000870      oObjects[tKeyboard] := oKeyboards ;
015846  000871      oObjects[tLed] := oLeds ;
015847  000872      oObjects[tLeddigits] := oLeddigitss ;
015848  000873      oObjects[tMeter] := oMeters ;
015849  000874      oObjects[tStrings] := oStringss ;
015850  000875      oObjects[tThermometer] := oThermometers ;
015851  000876      oObjects[tUserled] := oUserleds ;
015852  000877      oObjects[tVideo] := oVideos ;
015853  000878      oObjects[tStaticText] := oStaticTexts ;
015854  000879      oObjects[tSounds] := oSoundss ;
015855  000880      oObjects[tTimer] := oTimers ;
015856  000881      oObjects[tSpectrum] := oSpectrums ;
015857  000882      oObjects[tTank] := oTanks ;
015858  000883      oObjects[tUserImages] := oUserImagess ;
015859  000884      oObjects[tPinOutput] := oPinOutputs ;
015860  000885      oObjects[tPinInput] := oPinInputs ;
015861  000886      oObjects[t4Dbutton] := o4Dbuttons ;
015862  000887      oObjects[tAniButton] := oAniButtons ;
015863  000888      oObjects[tColorPicker] := oColorPickers ;
015864  000889      oObjects[tUserButton] := oUserButtons ;
015865  000890      hFonts[0] := file_LoadImageControl("RepRap_T.d04", "RepRap_T.g04", 1)  ;
015866  000891      hFonts[1] := file_LoadImageControl("RepRap_T.d02", "RepRap_T.g02", 1)  ;
015867  000892      hFonts[2] := file_LoadImageControl("RepRap_T.d03", "RepRap_T.g03", 1)  ;
015868  000893      hFonts[3] := file_LoadImageControl("RepRap_T.d01", "RepRap_T.g01", 1)  ;
015869  000894      hFonts[4] := FONT3 ;
015870  000895      hFonts[5] := file_LoadImageControl("RepRap_T.d0@", "RepRap_T.g0@", 1)  ;
015871  000896      hFonts[6] := FONT3 ;
015872  000897      hFonts[10] := file_LoadImageControl("RepRap_T.d0B", "RepRap_T.g0B", 1)  ;
015873  000898      hFonts[11] := file_LoadImageControl("RepRap_T.d06", "RepRap_T.g06", 1)  ;
015874  000899      hFonts[13] := file_LoadImageControl("RepRap_T.d0D", "RepRap_T.g0D", 1)  ;
015875  000900      hFonts[16] := FONT3 ;
015876  000901      hFonts[17] := file_LoadImageControl("RepRap_T.d0C", "RepRap_T.g0C", 1)  ;
015877  000902      hFonts[19] := file_LoadImageControl("RepRap_T.d0E", "RepRap_T.g0E", 1)  ;
015878  000903      hFonts[31] := file_LoadImageControl("RepRap_T.d08", "RepRap_T.g08", 1)  ;
015879  000904      hFonts[37] := file_LoadImageControl("RepRap_T.d05", "RepRap_T.g05", 1)  ;
015880  000905      hFonts[43] := file_LoadImageControl("RepRap_T.d07", "RepRap_T.g07", 1)  ;
015881  000906      hFonts[50] := file_LoadImageControl("RepRap_T.d09", "RepRap_T.g09", 1)  ;
015882  000907      hFonts[51] := FONT3 ;
015883  000908      hFonts[52] := FONT3 ;
015884  000909      hFonts[9] := hFonts[0] ;
015885  000910      hFonts[14] := hFonts[13] ;
015886  000911      hFonts[15] := hFonts[13] ;
015887  000912      hFonts[18] := hFonts[13] ;
015888  000913      hFonts[20] := hFonts[19] ;
015889  000914      hFonts[21] := hFonts[19] ;
015890  000915      hFonts[22] := hFonts[19] ;
015891  000916      hFonts[29] := hFonts[11] ;
015892  000917      hFonts[32] := hFonts[31] ;
015893  000918      hFonts[34] := hFonts[0] ;
015894  000919      hFonts[36] := hFonts[0] ;
015895  000920      hFonts[40] := hFonts[0] ;
015896  000921      hFonts[41] := hFonts[0] ;
015897  000922      hFonts[42] := hFonts[0] ;
015898  000923      hFonts[44] := hFonts[43] ;
015899  000924      hFonts[45] := hFonts[43] ;
015900  000925      hFonts[53] := hFonts[50] ;
015901  000926  // Start P4.inc
015902  000927      hstrings := file_Open("RepRap_T.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
015903  000928      // init comms
015904  000929      com_Init(comRX,CMDLenMAX,0);
015905  000930      com_SetBaud(COM0,19886);
015906  000931      com_TXbuffer(comTX, 100, 0);
015907  000932      snd_BufSize(2) ;
015908  000933      // tag 'real' objects
015909  000934      for (i := 0; i <= MaxTotObjects; i++)
015910  000935          if (   (i != tSounds)
015911  000936              && (i != tTimer)
015912  000937              && (i != tPinOutput)
015913  000938              && (i != tPinInput) )
015914  000939              TouchXpos := oObjects[i] ;
015915  000940              TouchYpos := *(TouchXpos) ;
015916  000941              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
015917  000942                  oldn := *(TouchXpos+ImageTouched*2) ;
015918  000943                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
015919  000944                  if (oldn != -1)
015920  000945                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
015921  000946                      img_Disable(hndl, oldn) ;
015922  000947                  endif
015923  000948              next
015924  000949          endif
015925  000950      next
015926  000951        
015927  000952      // display initial form
015928  000953      CurrentForm := -1 ;
015929  000954      ActivateForm(0) ; // need to change this according to first actual form
015930  000955        
015931  000956  // End P4.inc
015932  000957  // Start P5.inc
015933  000958      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
015934  000959      oldn := -1 ;
015935  000960      repeat
015936  000961        
015937  000962          // check comms for command, how to NAK invalid command
015938  000963          if (com_Count() != 0)
015939  000964              i := serin() ;
015940  000965              InputCS ^= i ;               // update checksum
015941  000966              if (   (cmdi > 2)
015942  000967                  && (cmd[0] == WRITE_STRU) )
015943  000968                  j := (cmdi-1) >> 1 + 2 ;
015944  000969                  if (j == CMDLenMAX)    // max length exceeded
015945  000970                      nak0() ;
015946  000971                      cmdi := -1 ;
015947  000972                  else if (cmdi & 1)
015948  000973                      cmd[j] := i ;
015949  000974                      if (cmd[2] == 0)    // if string complete
015950  000975                          if (InputCS)
015951  000976                              nak0() ;
015952  000977                          else
015953  000978                              if (cmd[0] == WRITE_STRU)
015954  000979                              cmd[j] := 0 ;                     // terminate it
015955  000980                              PrintStrings(cmd[1], &cmd[3], 1) ;
015956  000981                              serout(ACK) ;
015957  000982                              else
015958  000983                              endif
015959  000984                          endif
015960  000985                          cmdi := -1 ;
015961  000986                      endif
015962  000987                  else
015963  000988                      cmd[j] := cmd[j] << 8 + i ;
015964  000989                      cmd[2]-- ;          // dec length
015965  000990                  endif
015966  000991                  cmdi++ ;
015967  000992              else // not unicode string
015968  000993                  cmd[cmdi++] := i ;
015969  000994                   if (cmd[0] == WRITE_STR)                  // Ansi String
015970  000995                      if (cmdi == CMDLenMAX)      // max length exceeded
015971  000996                          nak0() ;
015972  000997                          cmdi := 0 ;
015973  000998                      else if (cmdi > 2)
015974  000999                          if (cmd[2] == -1)
015975  001000                              if (InputCS)
015976  001001                                  nak0() ;
015977  001002                              else
015978  001003                                  if (cmd[0] == WRITE_STR)
015979  001004                                  cmd[cmdi-1] := 0 ;                     // terminate it
015980  001005                                  PrintStrings(cmd[1], &cmd[3], 1) ;
015981  001006                                  serout(ACK) ;
015982  001007                                  else
015983  001008                                  endif
015984  001009                              endif
015985  001010                              cmdi := 0 ;
015986  001011                          else
015987  001012                              cmd[2]-- ;          // dec length
015988  001013                          endif
015989  001014                      endif
015990  001015                  else if (   (cmd[0] == READ_OBJ)
015991  001016                           && (cmdi == 4)         )
015992  001017                      if (InputCS)
015993  001018                          nak0() ;
015994  001019                      else
015995  001020                          ReadObject(cmd[1], cmd[2]) ;
015996  001021                      endif
015997  001022                      cmdi := 0 ;
015998  001023                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
015999  001024                           && (cmdi == 6)          )
016000  001025                      if (InputCS)
016001  001026                          nak0() ;
016002  001027                      else
016003  001028                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
016004  001029                          serout(ACK) ;
016005  001030                      endif
016006  001031                      cmdi := 0 ;
016007  001032                  else if (   (cmd[0] == WRITE_CONTRAST)
016008  001033                           && (cmdi == 3)         )
016009  001034                      if (InputCS)
016010  001035                          nak0() ;
016011  001036                      else
016012  001037                          gfx_Contrast(cmd[1]) ;
016013  001038                          serout(ACK) ;
016014  001039                      endif
016015  001040                      cmdi := 0 ;
016016  001041                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
016017  001042                      nak0() ;
016018  001043                      cmdi := 0 ;
016019  001044                  endif
016020  001045              endif   // not unicode string
016021  001046          endif   // a character is available
016022  001047        
016023  001048        
016024  001049      // touch code processing
016025  001050        
016026  001051          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
016027  001052          ImageTouched := img_Touched(hndl,-1) ;
016028  001053          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
016029  001054              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
016030  001055                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
016031  001056              endif
016032  001057              if (TouchStatus != TOUCH_RELEASED)        // if not released
016033  001058                  if (oldn != -1)
016034  001059                      ImageTouched := oldn ;
016035  001060                  else
016036  001061                      if (oldn != ImageTouched)
016037  001062                  oldn := ImageTouched ;
016038  001063                          TouchStatus := TOUCH_PRESSED ;
016039  001064                      endif
016040  001065                  endif
016041  001066                  TouchXpos  := touch_Get(TOUCH_GETX);
016042  001067                  TouchYpos  := touch_Get(TOUCH_GETY);
016043  001068                  TouchState := Ofs_IPD_DOWN ;
016044  001069              else
016045  001070                  ImageTouched := oldn ;                     // simulate release of what we touched
016046  001071                  oldn := -1 ;                    // prevent double release
016047  001072                  TouchState := Ofs_IPD_RELEASE ;
016048  001073              endif
016049  001074              if (ImageTouched != -1)
016050  001075                          CurInputData := InputControls[ImageTouched] + InputData;
016051  001076                          InputType := *(CurInputData) ;
016052  001077                          i := InputType ;
016053  001078                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
016054  001079                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
016055  001080              endif
016056  001081          endif
016057  001082   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
016058  001083        
016059  001084          sys_EventsResume() ;
016060  001085      forever
016061  001086        
016062  001087  cDipswitch:
016063  001088        
016064  001089  cKnob:
016065  001090        
016066  001091  cRockerswitch:
016067  001092        
016068  001093  cRotaryswitch:
016069  001094        
016070  001095  cSlider:
016071  001096  cTrackbar:
016072  001097        
016073  001098  c4DButton:
016074  001099  cUserButton:
016075  001100      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
016076  001101      goto gbutton ;
016077  001102  cWinbutton:
016078  001103      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
016079  001104  gbutton:
016080  001105      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
016081  001106      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
016082  001107          if (TouchStatus == TOUCH_RELEASED)
016083  001108              i &= 0xfffe ;
016084  001109              TouchState == Ofs_IPD_DOWN ;
016085  001110          else
016086  001111              i |= 1 ;
016087  001112              TouchState == Ofs_IPD_RELEASE ;
016088  001113          endif
016089  001114      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
016090  001115          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
016091  001116              if ((i & 3) == 3)
016092  001117                  i &= 0xfffc ;
016093  001118              else
016094  001119                  i++ ;
016095  001120              endif
016096  001121          else
016097  001122              i |= 1 ;                                      // make down regardless of current state
016098  001123          endif
016099  001124      else                        // group action, up all other buttons on touch press, reports 0 for button down
016100  001125          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
016101  001126              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
016102  001127          endif
016103  001128          i := (i & 0xfffc) | 2 ;
016104  001129      endif
016105  001130        
016106  001131      UpdateObjects(i) ;
016107  001132  endsub ;
016108  001133        
016109  001134  cAniButton:
016110  001135        
016111  001136  cColorPicker:
016112  001137        
016113  001138  endfunc
016114  001139  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 792 file:RepRap_Touchv1.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 728 file:RepRap_Touchv1.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       13040  0x000032f0 (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 93)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (not used)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  382  0x0000017e (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 162)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                302  0x0000012e (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         298  0x0000012a (mem) word (global)  (usage 27)
CurrentForm                          288  0x00000120 (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (not used)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (usage 6)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       12408  0x00003078 (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 45)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (usage 15)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                        9729  0x00002601FormBGcolors                        9729  0x00002601 (mem) word[54] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                         115  0x00000073FormEndIndex                         115  0x00000073 (mem) word[54] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[54] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[54] (global)  (usage 162)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             218  0x000000da (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm0                                 0  0x00000000 (const ??? 0)  (usage 3)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                              228  0x000000e4 (const ??? 0)  (usage 3)
iForm11                               72  0x00000048 (const ??? 0)  (usage 3)
iForm12                              230  0x000000e6 (const ??? 0)  (usage 3)
iForm13                              169  0x000000a9 (const ??? 0)  (usage 3)
iForm14                               46  0x0000002e (const ??? 0)  (usage 3)
iForm16                              132  0x00000084 (const ??? 0)  (usage 3)
iForm18                              135  0x00000087 (const ??? 0)  (usage 3)
iForm19                               50  0x00000032 (const ??? 0)  (usage 3)
iForm2                                 4  0x00000004 (const ??? 0)  (usage 3)
iForm20                               53  0x00000035 (const ??? 0)  (usage 3)
iForm21                               57  0x00000039 (const ??? 0)  (usage 3)
iForm23                               61  0x0000003d (const ??? 0)  (usage 3)
iForm24                               65  0x00000041 (const ??? 0)  (usage 3)
iForm25                              176  0x000000b0 (const ??? 0)  (usage 3)
iForm26                               69  0x00000045 (const ??? 0)  (usage 3)
iForm27                               74  0x0000004a (const ??? 0)  (usage 3)
iForm28                               86  0x00000056 (const ??? 0)  (usage 3)
iForm29                               90  0x0000005a (const ??? 0)  (usage 3)
iForm3                               165  0x000000a5 (const ??? 0)  (usage 3)
iForm30                               99  0x00000063 (const ??? 0)  (usage 3)
iForm31                              103  0x00000067 (const ??? 0)  (usage 3)
iForm32                              106  0x0000006a (const ??? 0)  (usage 3)
iForm33                              109  0x0000006d (const ??? 0)  (usage 3)
iForm34                              121  0x00000079 (const ??? 0)  (usage 3)
iForm35                              125  0x0000007d (const ??? 0)  (usage 3)
iForm38                              137  0x00000089 (const ??? 0)  (usage 3)
iForm4                                 9  0x00000009 (const ??? 0)  (usage 3)
iForm40                              147  0x00000093 (const ??? 0)  (usage 3)
iForm41                              150  0x00000096 (const ??? 0)  (usage 3)
iForm43                              153  0x00000099 (const ??? 0)  (usage 3)
iForm44                              156  0x0000009c (const ??? 0)  (usage 3)
iForm47                              173  0x000000ad (const ??? 0)  (usage 3)
iForm48                              183  0x000000b7 (const ??? 0)  (usage 3)
iForm49                              190  0x000000be (const ??? 0)  (usage 3)
iForm5                                14  0x0000000e (const ??? 0)  (usage 3)
iForm50                              195  0x000000c3 (const ??? 0)  (usage 3)
iForm51                              201  0x000000c9 (const ??? 0)  (usage 3)
iForm52                              207  0x000000cf (const ??? 0)  (usage 3)
iForm53                              218  0x000000da (const ??? 0)  (usage 3)
iForm6                                17  0x00000011 (const ??? 0)  (usage 3)
iForm7                               129  0x00000081 (const ??? 0)  (usage 3)
iForm9                                42  0x0000002a (const ??? 0)  (usage 3)
iiLeddigits0                          31  0x0000001f (const ??? 0)  (not used)
iiLeddigits1                          33  0x00000021 (const ??? 0)  (not used)
iiLeddigits2                          35  0x00000023 (const ??? 0)  (not used)
iLeddigits0                           30  0x0000001e (const ??? 0)  (usage 3)
iLeddigits1                           32  0x00000020 (const ??? 0)  (usage 3)
iLeddigits2                           34  0x00000022 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        223  0x000000dfInputControls                        223  0x000000df (mem) word[232] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
InputCS                              542  0x0000021e (mem) word (global)  (usage 21)
InputData                            687  0x000002afInputData                            687  0x000002af (mem) word[3696] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 30)
InputType                            294  0x00000126 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                          66  0x00000042 (const ??? 0)  (usage 3)
iStatictext1                          36  0x00000024 (const ??? 0)  (usage 3)
iStatictext13                        149  0x00000095 (const ??? 0)  (usage 3)
iStatictext14                        175  0x000000af (const ??? 0)  (usage 3)
iStatictext2                          37  0x00000025 (const ??? 0)  (usage 3)
iStatictext4                          38  0x00000026 (const ??? 0)  (usage 3)
iStatictext6                         148  0x00000094 (const ??? 0)  (usage 3)
iStatictext8                          59  0x0000003b (const ??? 0)  (usage 3)
iStrings0                           8079  0x00001f8fiStrings0                           8079  0x00001f8f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings1                           8105  0x00001fa9iStrings1                           8105  0x00001fa9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings10                          8287  0x0000205fiStrings10                          8287  0x0000205f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings11                          8313  0x00002079iStrings11                          8313  0x00002079 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings13                          8339  0x00002093iStrings13                          8339  0x00002093 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings14                          8365  0x000020adiStrings14                          8365  0x000020ad (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings15                          8391  0x000020c7iStrings15                          8391  0x000020c7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings16                          8417  0x000020e1iStrings16                          8417  0x000020e1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings17                          8443  0x000020fbiStrings17                          8443  0x000020fb (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings18                          8469  0x00002115iStrings18                          8469  0x00002115 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings19                          8495  0x0000212fiStrings19                          8495  0x0000212f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings2                           8131  0x00001fc3iStrings2                           8131  0x00001fc3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings20                          8521  0x00002149iStrings20                          8521  0x00002149 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings21                          8547  0x00002163iStrings21                          8547  0x00002163 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings22                          8573  0x0000217diStrings22                          8573  0x0000217d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings29                          8599  0x00002197iStrings29                          8599  0x00002197 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings3                           8157  0x00001fddiStrings3                           8157  0x00001fdd (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings31                          8625  0x000021b1iStrings31                          8625  0x000021b1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings32                          8651  0x000021cbiStrings32                          8651  0x000021cb (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings34                          8677  0x000021e5iStrings34                          8677  0x000021e5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings36                          8703  0x000021ffiStrings36                          8703  0x000021ff (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings37                          8729  0x00002219iStrings37                          8729  0x00002219 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings4                           8183  0x00001ff7iStrings4                           8183  0x00001ff7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings40                          8755  0x00002233iStrings40                          8755  0x00002233 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings41                          8781  0x0000224diStrings41                          8781  0x0000224d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings42                          8807  0x00002267iStrings42                          8807  0x00002267 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings43                          8833  0x00002281iStrings43                          8833  0x00002281 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings44                          8859  0x0000229biStrings44                          8859  0x0000229b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings45                          8885  0x000022b5iStrings45                          8885  0x000022b5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings5                           8209  0x00002011iStrings5                           8209  0x00002011 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings50                          8911  0x000022cfiStrings50                          8911  0x000022cf (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings51                          8937  0x000022e9iStrings51                          8937  0x000022e9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings52                          8963  0x00002303iStrings52                          8963  0x00002303 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings53                          8989  0x0000231diStrings53                          8989  0x0000231d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings6                           8235  0x0000202biStrings6                           8235  0x0000202b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings9                           8261  0x00002045iStrings9                           8261  0x00002045 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                        131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton100                        83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton101                        84  0x00000054 (const ??? 0)  (usage 3)
iUserbutton102                       110  0x0000006e (const ??? 0)  (usage 3)
iUserbutton103                       111  0x0000006f (const ??? 0)  (usage 3)
iUserbutton104                       112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton105                       113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton106                       114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton107                       115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton108                       116  0x00000074 (const ??? 0)  (usage 3)
iUserbutton109                       117  0x00000075 (const ??? 0)  (usage 3)
iUserbutton11                         87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton110                       118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton111                       119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton112                       122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton113                       123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton114                       124  0x0000007c (const ??? 0)  (usage 3)
iUserbutton115                       126  0x0000007e (const ??? 0)  (usage 3)
iUserbutton116                       127  0x0000007f (const ??? 0)  (usage 3)
iUserbutton117                       128  0x00000080 (const ??? 0)  (usage 3)
iUserbutton118                        64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton119                       186  0x000000ba (const ??? 0)  (usage 3)
iUserbutton12                         15  0x0000000f (const ??? 0)  (usage 3)
iUserbutton120                       140  0x0000008c (const ??? 0)  (usage 3)
iUserbutton121                       141  0x0000008d (const ??? 0)  (usage 3)
iUserbutton122                       142  0x0000008e (const ??? 0)  (usage 3)
iUserbutton123                       143  0x0000008f (const ??? 0)  (usage 3)
iUserbutton124                       144  0x00000090 (const ??? 0)  (usage 3)
iUserbutton125                       145  0x00000091 (const ??? 0)  (usage 3)
iUserbutton126                       146  0x00000092 (const ??? 0)  (usage 3)
iUserbutton127                       187  0x000000bb (const ??? 0)  (usage 3)
iUserbutton128                       191  0x000000bf (const ??? 0)  (usage 3)
iUserbutton129                       192  0x000000c0 (const ??? 0)  (usage 3)
iUserbutton13                         16  0x00000010 (const ??? 0)  (usage 3)
iUserbutton130                       193  0x000000c1 (const ??? 0)  (usage 3)
iUserbutton131                       180  0x000000b4 (const ??? 0)  (usage 3)
iUserbutton132                       196  0x000000c4 (const ??? 0)  (usage 3)
iUserbutton133                       197  0x000000c5 (const ??? 0)  (usage 3)
iUserbutton134                       198  0x000000c6 (const ??? 0)  (usage 3)
iUserbutton135                       199  0x000000c7 (const ??? 0)  (usage 3)
iUserbutton136                       200  0x000000c8 (const ??? 0)  (usage 3)
iUserbutton137                       202  0x000000ca (const ??? 0)  (usage 3)
iUserbutton138                       203  0x000000cb (const ??? 0)  (usage 3)
iUserbutton139                       204  0x000000cc (const ??? 0)  (usage 3)
iUserbutton14                          7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton140                       205  0x000000cd (const ??? 0)  (usage 3)
iUserbutton141                       206  0x000000ce (const ??? 0)  (usage 3)
iUserbutton142                       208  0x000000d0 (const ??? 0)  (usage 3)
iUserbutton143                       209  0x000000d1 (const ??? 0)  (usage 3)
iUserbutton144                       210  0x000000d2 (const ??? 0)  (usage 3)
iUserbutton145                       211  0x000000d3 (const ??? 0)  (usage 3)
iUserbutton146                       212  0x000000d4 (const ??? 0)  (usage 3)
iUserbutton147                       213  0x000000d5 (const ??? 0)  (usage 3)
iUserbutton148                       214  0x000000d6 (const ??? 0)  (usage 3)
iUserbutton149                       215  0x000000d7 (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton150                       216  0x000000d8 (const ??? 0)  (usage 3)
iUserbutton151                       157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton152                       158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton153                       159  0x0000009f (const ??? 0)  (usage 3)
iUserbutton154                       160  0x000000a0 (const ??? 0)  (usage 3)
iUserbutton155                       161  0x000000a1 (const ??? 0)  (usage 3)
iUserbutton156                       162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton157                       163  0x000000a3 (const ??? 0)  (usage 3)
iUserbutton158                       134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton159                        21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton16                         45  0x0000002d (const ??? 0)  (usage 3)
iUserbutton160                       164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton161                       217  0x000000d9 (const ??? 0)  (usage 3)
iUserbutton162                       219  0x000000db (const ??? 0)  (usage 3)
iUserbutton163                       220  0x000000dc (const ??? 0)  (usage 3)
iUserbutton164                       221  0x000000dd (const ??? 0)  (usage 3)
iUserbutton165                       222  0x000000de (const ??? 0)  (usage 3)
iUserbutton166                       223  0x000000df (const ??? 0)  (usage 3)
iUserbutton167                       224  0x000000e0 (const ??? 0)  (usage 3)
iUserbutton168                       225  0x000000e1 (const ??? 0)  (usage 3)
iUserbutton169                       226  0x000000e2 (const ??? 0)  (usage 3)
iUserbutton17                         47  0x0000002f (const ??? 0)  (usage 3)
iUserbutton170                       227  0x000000e3 (const ??? 0)  (usage 3)
iUserbutton18                         43  0x0000002b (const ??? 0)  (usage 3)
iUserbutton19                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton2                          19  0x00000013 (const ??? 0)  (usage 3)
iUserbutton20                         85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton21                         75  0x0000004b (const ??? 0)  (usage 3)
iUserbutton22                         76  0x0000004c (const ??? 0)  (usage 3)
iUserbutton23                        181  0x000000b5 (const ??? 0)  (usage 3)
iUserbutton24                        182  0x000000b6 (const ??? 0)  (usage 3)
iUserbutton25                        188  0x000000bc (const ??? 0)  (usage 3)
iUserbutton26                        120  0x00000078 (const ??? 0)  (usage 3)
iUserbutton27                        166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton28                        167  0x000000a7 (const ??? 0)  (usage 3)
iUserbutton29                        168  0x000000a8 (const ??? 0)  (usage 3)
iUserbutton3                          29  0x0000001d (const ??? 0)  (usage 3)
iUserbutton30                        170  0x000000aa (const ??? 0)  (usage 3)
iUserbutton31                        171  0x000000ab (const ??? 0)  (usage 3)
iUserbutton32                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton33                         49  0x00000031 (const ??? 0)  (usage 3)
iUserbutton34                        154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton35                        172  0x000000ac (const ??? 0)  (usage 3)
iUserbutton36                        231  0x000000e7 (const ??? 0)  (usage 3)
iUserbutton4                           5  0x00000005 (const ??? 0)  (usage 3)
iUserbutton41                        133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton43                        177  0x000000b1 (const ??? 0)  (usage 3)
iUserbutton45                        136  0x00000088 (const ??? 0)  (usage 3)
iUserbutton47                        178  0x000000b2 (const ??? 0)  (usage 3)
iUserbutton48                        179  0x000000b3 (const ??? 0)  (usage 3)
iUserbutton49                        130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton5                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton50                         20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton51                         77  0x0000004d (const ??? 0)  (usage 3)
iUserbutton52                         51  0x00000033 (const ??? 0)  (usage 3)
iUserbutton53                         58  0x0000003a (const ??? 0)  (usage 3)
iUserbutton58                        174  0x000000ae (const ??? 0)  (usage 3)
iUserbutton6                          10  0x0000000a (const ??? 0)  (usage 3)
iUserbutton60                        184  0x000000b8 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        185  0x000000b9 (const ??? 0)  (usage 3)
iUserbutton63                         39  0x00000027 (const ??? 0)  (usage 3)
iUserbutton64                        194  0x000000c2 (const ??? 0)  (usage 3)
iUserbutton65                        138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton66                         62  0x0000003e (const ??? 0)  (usage 3)
iUserbutton67                        151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton68                         63  0x0000003f (const ??? 0)  (usage 3)
iUserbutton69                         67  0x00000043 (const ??? 0)  (usage 3)
iUserbutton7                          11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton70                        139  0x0000008b (const ??? 0)  (usage 3)
iUserbutton71                        229  0x000000e5 (const ??? 0)  (usage 3)
iUserbutton72                         78  0x0000004e (const ??? 0)  (usage 3)
iUserbutton73                        189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton74                        155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton75                         54  0x00000036 (const ??? 0)  (usage 3)
iUserbutton76                         55  0x00000037 (const ??? 0)  (usage 3)
iUserbutton77                         56  0x00000038 (const ??? 0)  (usage 3)
iUserbutton8                          12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton83                         88  0x00000058 (const ??? 0)  (usage 3)
iUserbutton84                         91  0x0000005b (const ??? 0)  (usage 3)
iUserbutton85                         92  0x0000005c (const ??? 0)  (usage 3)
iUserbutton86                         93  0x0000005d (const ??? 0)  (usage 3)
iUserbutton87                         94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton88                         95  0x0000005f (const ??? 0)  (usage 3)
iUserbutton89                         96  0x00000060 (const ??? 0)  (usage 3)
iUserbutton9                          13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton90                         97  0x00000061 (const ??? 0)  (usage 3)
iUserbutton91                         98  0x00000062 (const ??? 0)  (usage 3)
iUserbutton92                         89  0x00000059 (const ??? 0)  (usage 3)
iUserbutton93                        101  0x00000065 (const ??? 0)  (usage 3)
iUserbutton94                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton95                        107  0x0000006b (const ??? 0)  (usage 3)
iUserbutton96                         79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton97                         80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton98                         81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton99                         82  0x00000052 (const ??? 0)  (usage 3)
iUserimages0                          71  0x00000047 (const ??? 0)  (usage 3)
iUserimages1                          52  0x00000034 (const ??? 0)  (usage 3)
iUserimages10                         70  0x00000046 (const ??? 0)  (usage 3)
iUserimages11                        152  0x00000098 (const ??? 0)  (usage 3)
iUserimages13                         60  0x0000003c (const ??? 0)  (usage 3)
iUserimages16                         68  0x00000044 (const ??? 0)  (usage 3)
iUserimages2                          73  0x00000049 (const ??? 0)  (usage 3)
iUserimages3                         100  0x00000064 (const ??? 0)  (usage 3)
iUserimages4                         105  0x00000069 (const ??? 0)  (usage 3)
iUserimages5                         108  0x0000006c (const ??? 0)  (usage 3)
iUserimages7                         102  0x00000066 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                           22  0x00000016 (const ??? 0)  (usage 3)
iWinbutton1                           23  0x00000017 (const ??? 0)  (usage 3)
iWinbutton2                           24  0x00000018 (const ??? 0)  (usage 3)
iWinbutton3                           25  0x00000019 (const ??? 0)  (usage 3)
iWinbutton4                           26  0x0000001a (const ??? 0)  (usage 3)
iWinbutton5                           40  0x00000028 (const ??? 0)  (usage 3)
iWinbutton6                           41  0x00000029 (const ??? 0)  (usage 3)
iWinbutton7                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton8                           28  0x0000001c (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 9837  0x0000266dkKeyboardKeystrokes                 9837  0x0000266d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   13386  0x0000344a (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                               10442  0x000028ca (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               14508  0x000038ac (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              336  0x00000150 (const dword)  (usage 3)
nObjects                             232  0x000000e8 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              54  0x00000036 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                          9373  0x0000249do4Dbuttons                          9373  0x0000249d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAngularmeters                      9047  0x00002357oAngularmeters                      9047  0x00002357 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAniButtons                         9375  0x0000249foAniButtons                         9375  0x0000249f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       9377  0x000024a1oColorPickers                       9377  0x000024a1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCoolgauges                         9049  0x00002359oCoolgauges                         9049  0x00002359 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCustomdigitss                      9051  0x0000235boCustomdigitss                      9051  0x0000235b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oDipSwitchs                         9015  0x00002337oDipSwitchs                         9015  0x00002337 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              9053  0x0000235doForms                              9053  0x0000235d (mem) word[55] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 15)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                             9163  0x000023cboGauges                             9163  0x000023cb (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGSliders                           9023  0x0000233foGSliders                           9023  0x0000233f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oImages                             9165  0x000023cdoImages                             9165  0x000023cd (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKeyboards                          9167  0x000023cfoKeyboards                          9167  0x000023cf (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKnobs                              9017  0x00002339oKnobs                              9017  0x00002339 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLedDigitsn                         9841  0x00002671oLedDigitsn                         9841  0x00002671 (mem) word[15] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
oLeddigitss                         9171  0x000023d3oLeddigitss                         9171  0x000023d3 (mem) word[4] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
oLeds                               9169  0x000023d1oLeds                               9169  0x000023d1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             9179  0x000023dboMeters                             9179  0x000023db (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             220  0x000000dc (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                          9371  0x0000249boPinInputs                          9371  0x0000249b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oPinOutputs                         9727  0x000025ffoPinOutputs                         9727  0x000025ff (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      9019  0x0000233boRockerSwitchs                      9019  0x0000233b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oRotarySwitchs                      9021  0x0000233doRotarySwitchs                      9021  0x0000233d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oScopes                             9331  0x00002473oScopes                             9331  0x00002473 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
oSoundss                            9725  0x000025fdoSoundss                            9725  0x000025fd (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oSpectrums                          9329  0x00002471oSpectrums                          9329  0x00002471 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStaticTexts                        9297  0x00002451oStaticTexts                        9297  0x00002451 (mem) word[16] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStringss                           9181  0x000023ddoStringss                           9181  0x000023dd (mem) word[55] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 72)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 453)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              9333  0x00002475oTanks                              9333  0x00002475 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oThermometers                       9291  0x0000244boThermometers                       9291  0x0000244b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTimers                             9723  0x000025fboTimers                             9723  0x000025fb (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTrackbars                          9025  0x00002341oTrackbars                          9025  0x00002341 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserButtons                        9379  0x000024a3oUserButtons                        9379  0x000024a3 (mem) word[172] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
oUserImagess                        9335  0x00002477oUserImagess                        9335  0x00002477 (mem) word[18] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserleds                           9293  0x0000244doUserleds                           9293  0x0000244d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             544  0x00000220 (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                             9295  0x0000244foVideos                             9295  0x0000244f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                         9027  0x00002343oWinButtons                         9027  0x00002343 (mem) word[10] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          300  0x0000012c (mem) word (global)  (usage 18)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       14543  0x000038cf (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 3)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         14255  0x000037af (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                   9839  0x0000266frKeyboardRoutines                   9839  0x0000266f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         14441  0x00003869 (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           14524  0x000038bc (User func) args[1] r=0  (usage 15)
seroutOcs                          14491  0x0000389b (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           7  0x00000007 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      2560  0x00000a00 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                          7  0x00000007 (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         73  0x00000049 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings12Size                          0  0x00000000 (const dword)  (not used)
Strings12StartH                        0  0x00000000 (const dword)  (not used)
Strings12StartL                        0  0x00000000 (const dword)  (not used)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                          7  0x00000007 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                    14336  0x00003800 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                          7  0x00000007 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                    14848  0x00003a00 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                          7  0x00000007 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                    15360  0x00003c00 (const dword)  (usage 3)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings17Count                         1  0x00000001 (const dword)  (not used)
Strings17Size                          8  0x00000008 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings18Count                         1  0x00000001 (const dword)  (not used)
Strings18Size                          7  0x00000007 (const dword)  (usage 3)
Strings18StartH                        0  0x00000000 (const dword)  (usage 3)
Strings18StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                          7  0x00000007 (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings1Count                          1  0x00000001 (const dword)  (not used)
Strings1Size                          30  0x0000001e (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                       512  0x00000200 (const dword)  (usage 3)
Strings20Count                         1  0x00000001 (const dword)  (not used)
Strings20Size                          7  0x00000007 (const dword)  (usage 3)
Strings20StartH                        0  0x00000000 (const dword)  (usage 3)
Strings20StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings21Count                         1  0x00000001 (const dword)  (not used)
Strings21Size                          7  0x00000007 (const dword)  (usage 3)
Strings21StartH                        0  0x00000000 (const dword)  (usage 3)
Strings21StartL                    17408  0x00004400 (const dword)  (usage 3)
Strings22Count                         1  0x00000001 (const dword)  (not used)
Strings22Size                          7  0x00000007 (const dword)  (usage 3)
Strings22StartH                        0  0x00000000 (const dword)  (usage 3)
Strings22StartL                    17920  0x00004600 (const dword)  (usage 3)
Strings23Size                          0  0x00000000 (const dword)  (not used)
Strings23StartH                        0  0x00000000 (const dword)  (not used)
Strings23StartL                        0  0x00000000 (const dword)  (not used)
Strings24Size                          0  0x00000000 (const dword)  (not used)
Strings24StartH                        0  0x00000000 (const dword)  (not used)
Strings24StartL                        0  0x00000000 (const dword)  (not used)
Strings25Size                          0  0x00000000 (const dword)  (not used)
Strings25StartH                        0  0x00000000 (const dword)  (not used)
Strings25StartL                        0  0x00000000 (const dword)  (not used)
Strings26Size                          0  0x00000000 (const dword)  (not used)
Strings26StartH                        0  0x00000000 (const dword)  (not used)
Strings26StartL                        0  0x00000000 (const dword)  (not used)
Strings27Size                          0  0x00000000 (const dword)  (not used)
Strings27StartH                        0  0x00000000 (const dword)  (not used)
Strings27StartL                        0  0x00000000 (const dword)  (not used)
Strings28Size                          0  0x00000000 (const dword)  (not used)
Strings28StartH                        0  0x00000000 (const dword)  (not used)
Strings28StartL                        0  0x00000000 (const dword)  (not used)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                         53  0x00000035 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      2048  0x00000800 (const dword)  (usage 3)
Strings30Size                          0  0x00000000 (const dword)  (not used)
Strings30StartH                        0  0x00000000 (const dword)  (not used)
Strings30StartL                        0  0x00000000 (const dword)  (not used)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          7  0x00000007 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                         19  0x00000013 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings33Size                          0  0x00000000 (const dword)  (not used)
Strings33StartH                        0  0x00000000 (const dword)  (not used)
Strings33StartL                        0  0x00000000 (const dword)  (not used)
Strings34Count                         0  0x00000000 (const dword)  (not used)
Strings34Size                          1  0x00000001 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     3584  0x00000e00 (const dword)  (usage 3)
Strings35Size                          0  0x00000000 (const dword)  (not used)
Strings35StartH                        0  0x00000000 (const dword)  (not used)
Strings35StartL                        0  0x00000000 (const dword)  (not used)
Strings36Count                         0  0x00000000 (const dword)  (not used)
Strings36Size                          1  0x00000001 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings37Count                         0  0x00000000 (const dword)  (not used)
Strings37Size                          1  0x00000001 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings38Size                          0  0x00000000 (const dword)  (not used)
Strings38StartH                        0  0x00000000 (const dword)  (not used)
Strings38StartL                        0  0x00000000 (const dword)  (not used)
Strings39Size                          0  0x00000000 (const dword)  (not used)
Strings39StartH                        0  0x00000000 (const dword)  (not used)
Strings39StartL                        0  0x00000000 (const dword)  (not used)
Strings3Count                          0  0x00000000 (const dword)  (not used)
Strings3Size                           1  0x00000001 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                         0  0x00000000 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                         12  0x0000000c (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings41Count                         1  0x00000001 (const dword)  (not used)
Strings41Size                         13  0x0000000d (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                     6656  0x00001a00 (const dword)  (usage 3)
Strings42Count                         1  0x00000001 (const dword)  (not used)
Strings42Size                          8  0x00000008 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings46Size                          0  0x00000000 (const dword)  (not used)
Strings46StartH                        0  0x00000000 (const dword)  (not used)
Strings46StartL                        0  0x00000000 (const dword)  (not used)
Strings47Size                          0  0x00000000 (const dword)  (not used)
Strings47StartH                        0  0x00000000 (const dword)  (not used)
Strings47StartL                        0  0x00000000 (const dword)  (not used)
Strings48Size                          0  0x00000000 (const dword)  (not used)
Strings48StartH                        0  0x00000000 (const dword)  (not used)
Strings48StartL                        0  0x00000000 (const dword)  (not used)
Strings49Size                          0  0x00000000 (const dword)  (not used)
Strings49StartH                        0  0x00000000 (const dword)  (not used)
Strings49StartL                        0  0x00000000 (const dword)  (not used)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings50Count                         0  0x00000000 (const dword)  (not used)
Strings50Size                          1  0x00000001 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    11776  0x00002e00 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings53Count                         1  0x00000001 (const dword)  (not used)
Strings53Size                         67  0x00000043 (const dword)  (usage 3)
Strings53StartH                        0  0x00000000 (const dword)  (usage 3)
Strings53StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings5Count                          1  0x00000001 (const dword)  (not used)
Strings5Size                          10  0x0000000a (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                     12800  0x00003200 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          31  0x0000001f (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings7Size                           0  0x00000000 (const dword)  (not used)
Strings7StartH                         0  0x00000000 (const dword)  (not used)
Strings7StartL                         0  0x00000000 (const dword)  (not used)
Strings8Size                           0  0x00000000 (const dword)  (not used)
Strings8StartH                         0  0x00000000 (const dword)  (not used)
Strings8StartL                         0  0x00000000 (const dword)  (not used)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      3072  0x00000c00 (const dword)  (usage 3)
stringsCV                            110  0x0000006e (mem) word[54] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           296  0x00000128 (mem) word (global)  (usage 24)
TouchXpos                            290  0x00000122 (mem) word (global)  (usage 12)
TouchYpos                            292  0x00000124 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     13700  0x00003584 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 477)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 45)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      12409  0x00003079 (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS    2803  0x00000af3 (const ??? 0)  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 105)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        13900  0x0000364c (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
