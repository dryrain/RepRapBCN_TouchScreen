file C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318        
003998  004319  //------------------------------------------------------------------------------
003999  004320  // FILEIO Error Code Constants
004000  004321  //------------------------------------------------------------------------------
004001  004322  #CONST
004002  004348  #END
004003  004349        
004004  004350  //------------------------------------------------------------------------------
004005  004351  // DISK struct offsets
004006  004352  //------------------------------------------------------------------------------
004007  004353  #CONST
004008  004370  #END
004009  004371        
004010  004372  //------------------------------------------------------------------------------
004011  004373  // FILE struct offsets
004012  004374  //------------------------------------------------------------------------------
004013  004375  #CONST
004014  004394  #END
004015  004395        
004016  004396        
004017  004397  //------------------------------------------------------------------//
004018  004398  //        Sound Class Services
004019  004399  //------------------------------------------------------------------//
004020  004400        
004021  004401  func snd_Volume("var"), 0;
004022  004402  // Syntax: snd_Volume("var");
004023  004403  // Usage : snd_Volume(30);
004024  004404  // Notes : set sound playback volume.  Var must
004025  004405  //       : be in the range from 8 (min volume)
004026  004406  //       : to 127 (max volume). If var is less
004027  004407  //       : than 8 volume is set to 8, and if
004028  004408  //       : var > 127 it is set to 127.
004029  004409        
004030  004410  func snd_Pitch("pitch"), 1;
004031  004411  // func snd_Pitch("freq"), 1;
004032  004412  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004033  004413  // Notes : sets the samples playback rate to a different frequency
004034  004414  //       : The minimum value is 4khz
004035  004415  //       : Setting the pitch to zero restores the original sample rate
004036  004416  //       : Return value is the samples original sample rate.
004037  004417        
004038  004418  func snd_BufSize("var"), 0;
004039  004419  // Syntax: snd_BufSize("var");
004040  004420  // Usage : snd_BufSize(2);
004041  004421  // Notes : specify the a memory chunk size for the wavefile buffer.
004042  004422  //       : default size 1024 bytes.
004043  004423  //       : 0 = 1024 bytes (default)
004044  004424  //       : 1 = 2048 bytes
004045  004425  //       : 2 = 4096 bytes
004046  004426  //       : 3 = 8192 bytes
004047  004427        
004048  004428  func snd_Stop(), 0;
004049  004429  // Syntax: snd_Stop();
004050  004430  // Usage : snd_Stop();
004051  004431  // Notes : stop any sound that is playing, releasing
004052  004432  //       : buffers and closes any open wav file.
004053  004433        
004054  004434  func snd_Pause(), 0;
004055  004435  // Syntax: snd_Pause();
004056  004436  // Usage : snd_Pause();
004057  004437  // Notes : pauses any sound that is playing, does nothing
004058  004438  //       : until sound is resumed with snd_Continue().
004059  004439  //       : The sample cam be terminated with snd_Stop.
004060  004440  //       : buffers and closes any open wav file.
004061  004441        
004062  004442  func snd_Continue(), 0;
004063  004443  // Syntax: snd_Continue();
004064  004444  // Usage : snd_Continue();
004065  004445  // Notes : resume any sound that is paused by snd_Pause.
004066  004446        
004067  004447  func snd_Playing(), 1;
004068  004448  // Syntax: snd_Playing();
004069  004449  // Usage : r := snd_Playing();
004070  004450  // Notes : returns 0 if sound has finished playing,
004071  004451  //       : else return number of 512 byte blocks to go.
004072  004452        
004073  004453  func snd_Freq("Freq", "Duration"), 1;
004074  004454  // Syntax: snd_Freq("Freq", "Duration");
004075  004455  // Usage : r := snd_Freq(1000, 2000);
004076  004456  // Notes : Returns 0 if note cannot be played because a wav file is playing
004077  004457  //       : else return True.
004078  004458  //       : Minimum Freq is 20
004079  004459  //       : This will produce a pure Square wave and is designed for driving
004080  004460  //       : Piezo transducers which require this sort of drive. It can also be
004081  004461  //       : used to drive the amp on displays with audio.
004082  004462        
004083  004463        
004084  004464  func __reserved60(), 0; // do not remove
004085  004465  func __reserved61(), 0; // do not remove
004086  004466  func __reserved62(), 0; // do not remove
004087  004467        
004088  004468  //=========================================================================================================
004089  004469  // String functions
004090  004470  //=========================================================================================================
004091  004471        
004092  004472  func str_Ptr("&var"), 1;
004093  004473  // Syntax: str_Ptr(&var);
004094  004474  // Usage : p := str_Ptr(&var);
004095  004475  // Notes : return a byte pointer to a word region
004096  004476        
004097  004477  func str_GetD("&ptr", "&var"), 1;
004098  004478  // Syntax: str_GetD(&ptr, &var);
004099  004479  // Usage : ok := str_GetD(&ptr, &var);
004100  004480  // Notes : convert number in a string to DWORD ( myvar[2] )
004101  004481  //       : returns true if function succeeds, advancing ptr
004102  004482        
004103  004483  func str_GetW("&ptr", "&var"), 1;
004104  004484  // Syntax: str_GetW(&ptr, &var);
004105  004485  // Usage : ok := str_GetW(&ptr, &var);
004106  004486  // Notes : convert number in a string to WORD ( myvar )
004107  004487  //       : returns true if function succeeds, advancing ptr
004108  004488        
004109  004489  func str_GetHexW("&ptr", "&var"), 1;
004110  004490  // Syntax: str_GetHexW(&ptr, &var);
004111  004491  // Usage : ok := str_GetHexW(&ptr, &var);
004112  004492  // Notes : convert HEX number in a string to WORD ( myvar )
004113  004493  //       : returns true if function succeeds, advancing ptr
004114  004494        
004115  004495  func str_GetC("&ptr", "&var"), 1;
004116  004496  // Syntax: str_GetC(&ptr, &var);
004117  004497  // Usage : ok := str_GetC(&ptr, &var);
004118  004498  // Notes : get a valid ascii char in a string to WORD ( myvar )
004119  004499  //       : returns true if function succeeds, advancing ptr
004120  004500        
004121  004501  func str_GetByte("ptr"), 1;
004122  004502  // Syntax: str_GetByte(ptr);
004123  004503  // Usage : myvar := str_GetByte(ptr);
004124  004504  // Notes : get a byte to myvar
004125  004505  //       : returns value
004126  004506        
004127  004507  func str_GetWord("ptr"), 1;
004128  004508  // Syntax: GetWord(ptr);
004129  004509  // Usage : GetWord(ptr);
004130  004510  // Notes : get a word to myvar
004131  004511  //       : returns value
004132  004512        
004133  004513  func str_PutByte("ptr","val"), 0;
004134  004514  // Syntax: str_PutByte(ptr);
004135  004515  // Usage : myvar := str_PutByte(ptr);
004136  004516  // Notes : put a byte at ptr
004137  004517  //       : returns value
004138  004518        
004139  004519  func str_PutWord("ptr","val"), 0;
004140  004520  // Syntax: str_PutWord("ptr","val");
004141  004521  // Usage : str_PutWord(p,100);
004142  004522  // Notes : put word 100 at current pointer location
004143  004523  //       : returns value
004144  004524        
004145  004525  func str_Match("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Match(&ptr, *str);
004147  004527  // Usage : r := str_Match(&p, "hello");
004148  004528  // Notes : Case sensitive match
004149  004529  //       : returns true if function succeded, andvancing pointer to position past
004150  004530  //       : the matched item. Note that any whitespace characters are skipped
004151  004531  //       : in the source string prior to the test.
004152  004532        
004153  004533  func str_MatchI("&ptr", "*str"), 1;
004154  004534  // Syntax: str_MatchI(&ptr, *str);
004155  004535  // Usage : r := str_MatchI(&p, "hello");
004156  004536  // Notes : Case insensitive match
004157  004537  //       : returns true if function succeded, andvancing pointer to position past
004158  004538  //       : the matched item. Note that any whitespace characters are skipped
004159  004539  //       : in the source string prior to the test.
004160  004540        
004161  004541  func str_Find("&ptr", "*str"), 1;
004162  004542  // Syntax: str_Find(&ptr, *str);
004163  004543  // Usage : n := str_Find(&p, "hello");
004164  004544  // Notes : given the address of a pointer to a source string as the
004165  004545  //       : first argument, and a pointer to a test string as the second
004166  004546  //       : argument, attempt to find the position of the matching string
004167  004547  //       : in the source string. The test is performed with case sensitivity.
004168  004548  //       : return 0 if not found, else returns the address of the first
004169  004549  //       : character of the match. NB:- The source pointer is not altered.
004170  004550        
004171  004551  func str_FindI("&ptr", "*str"), 1;
004172  004552  // Syntax: str_Find(&ptr, *str);
004173  004553  // Usage : n := str_Find(&p, "hello");
004174  004554  // Notes : given the address of a pointer to a source string as the
004175  004555  //       : first argument, and a pointer to a test string as the second
004176  004556  //       : argument, attempt to find the position of the matching string
004177  004557  //       : in the source string. The test is performed with no case
004178  004558  //       : sensitivity, eg upper and lower case chars are accepted.
004179  004559  //       : return 0 if not found, else returns the address of the first
004180  004560  //       : character of the match. NB:- The source pointer is not altered.
004181  004561        
004182  004562  func str_Length("ptr"), 1;
004183  004563  // Syntax: str_Length(ptr);
004184  004564  // Usage : len := str_Ptr(mystring);
004185  004565  // Notes : return the length of a byte aligned string excluding terminator
004186  004566        
004187  004567  func str_Printf("&ptr", "*format"), 1;
004188  004568  // Syntax: str_Printf("&ptr", "*format");
004189  004569  // Usage : r := str_Printf(&p, "hello");
004190  004570  // Notes : refer to documentation
004191  004571  //       :
004192  004572        
004193  004573  func str_Cat("dest","src"), 1;
004194  004574  // Syntax: str_Append("&dest","&src");
004195  004575  // Usage : str_Append(&buf,"Hello");
004196  004576  // Notes : Appends a copy of the source string to the destination string.
004197  004577  //       : The terminating null character in destination is overwritten by
004198  004578  //       : the first character of source, and a new null-character is appended
004199  004579  //       : at the end of the new string formed by the concatenation of both in destination.
004200  004580  //       : returns destination.
004201  004581        
004202  004582  func str_CatN("dest","src","count"), 1;
004203  004583  // Syntax: str_Append("&dest","&src","count");
004204  004584  // Usage : str_Append(&buf,"Monday",3);
004205  004585  // Notes : Appends a copy of the source string to the destination string.
004206  004586  //       : The number of characters copied is limited by "count".
004207  004587  //       : The terminating null character in destination is overwritten by
004208  004588  //       : the first character of source, and a new null-character is appended
004209  004589  //       : at the end of the new string formed by the concatenation of both in destination.
004210  004590  //       : returns destination.
004211  004591        
004212  004592        
004213  004593  func str_ByteMove("src", "dest", "count"), 1;
004214  004594  // Syntax   : str_ByteMove(src, dest, bytecount);
004215  004595  // Input    : STR *source points to byte aligned source.
004216  004596  //          : STR *dest   points to byte aligned destination.
004217  004597  //          : VAR count   number of bytes to transfer.
004218  004598  // Usage    : nextpos := str_ByteMove(s, d, 100);
004219  004599  // Notes    : copy bytes from "src" to "dest", stopping only
004220  004600  //          : when "count" is exhausted.
004221  004601  //          : No terminator is appended, it is purely a
004222  004602  //          : byte copy, and any zeroes encountered will
004223  004603  //          : also be copied.
004224  004604  // Returns  : returns a pointer to the end of the destination
004225  004605  //          : (which is "dest" + "count")
004226  004606        
004227  004607        
004228  004608  func str_Copy("dest", "src"), 1;
004229  004609  // Syntax   : str_Copy(dest, src);
004230  004610  // Input    : STR *dest   points to byte aligned destination.
004231  004611  //          : STR *source points to byte aligned source.
004232  004612  // Usage    : nextplace := str_Copy(d, s);
004233  004613  // Notes    : copy a string from "src" to "dest", stopping only
004234  004614  //          : when the end of source string "src" is encountered
004235  004615  //          : (0x00 terminator).
004236  004616  //          : The terminator is always appended, even if "src" is
004237  004617  //          : an empty string.
004238  004618  // Returns  : returns a pointer to the 0x00 string terminator at
004239  004619  //          : end of "dest" (which is "dest" + str_Length(src); )
004240  004620        
004241  004621        
004242  004622  func str_CopyN("dest", "src", "count"), 1;
004243  004623  // Syntax   : str_CopyN(dest, src, bytecount);
004244  004624  // Input    : STR *dest   points to byte aligned destination.
004245  004625  //          : STR *source points to byte aligned source.
004246  004626  //          : VAR count   max number of chars to copy.
004247  004627  // Usage    : nextplace := str_CopyN(d, s, 100);
004248  004628  // Notes    : copy a string from "src" to "dest", stopping only
004249  004629  //          : when "count" is exhausted, or end of source
004250  004630  //          : string "str" is encountered (0x00 string terminator).
004251  004631  //          : The terminator is always appended, even if
004252  004632  //          : "count" is zero, or "src" is a null string.
004253  004633  // Returns  : returns a pointer to the 0x00 string terminator
004254  004634  //          : (which is "dest" + whatever was copied)
004255  004635        
004256  004636        
004257  004637  func __reserved63(), 0; // do not remove
004258  004638  func __reserved64(), 0; // do not remove
004259  004639  func __reserved65(), 0; // do not remove
004260  004640  func __reserved66(), 0; // do not remove
004261  004641        
004262  004642  //=========================================================================================================
004263  004643  // FLASH memory functions
004264  004644  //=========================================================================================================
004265  004645  func flash_GetByte("bank", "ptr"), 1;
004266  004646  // Syntax   : flash_GetByte(bank, ptr);
004267  004647  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004268  004648  // Notes    : Reads a single byte from any flash location.
004269  004649  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004270  004650  //          : which is the header signature for a valid program.
004271  004651  // Returns  : the byte value from the location
004272  004652        
004273  004653        
004274  004654  func flash_GetWord("bank", "ptr"), 1;
004275  004655  // Syntax   : flash_GetWord(bank, ptr);
004276  004656  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004277  004657  // Notes    : Reads a single word from any flash location.
004278  004658  //          : The pointer is byte aligned.
004279  004659  //          : If the bank is read protected, only the first word can be read
004280  004660  //          : which is the header signature for a valid program (0xAA55).
004281  004661  // Returns  : the byte value from the location
004282  004662        
004283  004663        
004284  004664  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004285  004665  // Syntax   : flash_Copy(bank, ptr);
004286  004666  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004287  004667  // Notes    : Copies bytes from any flash locations to a user buffer.
004288  004668  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004289  004669  //          : If the bank is read protected, 0 bytes will be read
004290  004670  //          : which is the header signature for a valid program (0xAA55).
004291  004671  // Returns  : the count of bytes transferred.
004292  004672        
004293  004673        
004294  004674  func flash_Run("bank"), 1;
004295  004675  // Syntax    : flash_Run(bankx);
004296  004676  // Usage     : res := flash_Run(FLASHBANK_5);
004297  004677  // Notes     : Restarts the processor, running code from the required
004298  004678  //           : flash bank. bank may be a variable, or one of the
004299  004679  //           : pre-defined constants:-
004300  004680  //           :    FLASHBANK_0                 //0x00
004301  004681  //           :    FLASHBANK_1                 //0x01
004302  004682  //           :    FLASHBANK_2                 //0x02
004303  004683  //           :    FLASHBANK_3                 //0x03
004304  004684  //           :    FLASHBANK_4                 //0x04
004305  004685  //           :    FLASHBANK_5                 //0x05
004306  004686  // returns    : This function should net return as it restarts
004307  004687  //        : the processor and jumps to the required bank,
004308  004688  //        : If it does return, -1 indicates incorrect/invalid
004309  004689  //        : bank number, and -2 indicates no valid program
004310  004690  //        : in the selected bank.
004311  004691        
004312  004692  func flash_Bank(), 1;
004313  004693  // Syntax   : flash_Bank();
004314  004694  // Usage    : myvar := flash_Bank();
004315  004695  // Notes    : Identifies which flash bank the code is running from.
004316  004696  // Returns  : The FLASH bank that code is currently running from, 0-5.
004317  004697        
004318  004698        
004319  004699  func flash_EraseBank("bank", "confirmation"), 1;
004320  004700  // Syntax   : flash_EraseBank(bank, confirmation);
004321  004701  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004322  004702  // Notes    : This function should be used with extreme caution.
004323  004703  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004324  004704  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004325  004705  //          : a protected bank will not be erased, and function will return with 0
004326  004706  //          : If the destination bank is the same as the execution bank, the processor will reset
004327  004707  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004328  004708  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004329  004709  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004330  004710  // Returns  : returns true if the function succeeded
004331  004711  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004332  004712        
004333  004713  func flash_LoadFile("bank", "filename"), 1;
004334  004714  // Syntax   : flash_LoadFile(bank, ptr);
004335  004715  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004336  004716  // Notes    : Copies a file from uSD to the required flashbank.
004337  004717  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004338  004718  // Returns  : returns true if the function succeeded.
004339  004719        
004340  004720        
004341  004721  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004342  004722  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004343  004723  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004344  004724  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004345  004725  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004346  004726  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004347  004727  // Returns  : returns true if the function succeeded.
004348  004728        
004349  004729        
004350  004730  func flash_putstr("bank", "ptr"), 1;
004351  004731  // Syntax   : flash_putstr(bank, ptr);
004352  004732  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004353  004733  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004354  004734  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004355  004735  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004356  004736        
004357  004737  func flash_Blit16("bank", "offset", "count"), 1;
004358  004738  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004359  004739  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004360  004740  // Notes    : Blit an image to a GRAM window from FLASH storage.
004361  004741  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004362  004742  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004363  004743        
004364  004744  func flash_Blit8("bank", "offset", "count"), 1;
004365  004745  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004366  004746  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004367  004747  // Notes    : Blit an image to a GRAM window from FLASH storage.
004368  004748  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004369  004749  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004370  004750        
004371  004751  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004372  004752  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004373  004753  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004374  004754  // Notes    : Blit an image to a GRAM window from FLASH storage.
004375  004755  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004376  004756  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004377  004757        
004378  004758  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004379  004759  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004380  004760  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004381  004761  // Notes    : Blit an image to a GRAM window from FLASH storage.
004382  004762  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004383  004763  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004384  004764        
004385  004765  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004386  004766  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004387  004767  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004388  004768  // Notes    : Blit an image to a GRAM window from FLASH storage.
004389  004769  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004390  004770  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004391  004771        
004392  004772  func flash_Exec("bank", "arglistptr"), 1;
004393  004773  // Syntax: res := flash_Exec("bank","arglistptr");
004394  004774  // Usage : res := flash_Exec("bank","arglistptr");
004395  004775  // Notes : returns like a function, current program
004396  004776  //       : calling program is kept active and control returns to it.
004397  004777  //       : If arglistptr is 0, no arguments are passed, else
004398  004778  //       : arglist points to an array, the first element being
004399  004779  //       : the number of elements in the array.
004400  004780  //       : func 'main' in the called bank accepts the arguments.
004401  004781  // WARNING Not currently implemented!
004402  004782        
004403  004783        
004404  004784  func __reserved68(), 0; // do not remove
004405  004785  func __reserved69(), 0; // do not remove
004406  004786  func __reserved70(), 0; // do not remove
004407  004787        
004408  004788  //=========================================================================================================
004409  004789  // I/O and hardware functions
004410  004790  //=========================================================================================================
004411  004791        
004412  004792        
004413  004793        
004414  004794        
004415  004795  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004416  004796  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004417  004797  // Syntax: pin_Pulseout(pin, value);
004418  004798  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004419  004799  // Notes : only available on PA0 to PA9
004420  004800  //       : Invert the state of an output for "value" milliseconds.
004421  004801  //       : pulseout is non blocking, that is, code execution may continue while
004422  004802  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004423  004803  //       : If not already an output, pin is automatically made a push/pull output,
004424  004804  //       : and the last state of its output latch will determine pulse polarity.
004425  004805  //       : It's its open drain state is not altered if the pin was already an output.
004426  004806  //       : If pulseout is called while pulseout is still active, the pulse timer
004427  004807  //       : will simply be updated with the new "value" and the pulse will continue
004428  004808  //       : with the extended value.
004429  004809  //       : returns true if the pin number is legal (usually ignored)
004430  004810        
004431  004811        
004432  004812  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004433  004813  // Syntax: pin_Counter(pin, mode, userfunc);
004434  004814  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004435  004815  // Notes : only available on PA4 to PA9
004436  004816  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004437  004817  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004438  004818  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004439  004819  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004440  004820  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004441  004821  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004442  004822  //       : The pin may be configured as an input or output, the function behaves the same.
004443  004823  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004444  004824  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004445  004825  //       : "mode" has the following effect:-
004446  004826  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004447  004827  //       : mode COUNT_RISE(1) = increment on every rising edge
004448  004828  //       : mode COUNT_FALL(2) = increment on every falling edge
004449  004829  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004450  004830        
004451  004831  //------------------------------------------------------------------//
004452  004832  // pin counter mode constants                                       //
004453  004833  //------------------------------------------------------------------//
004454  004834  #CONST
004455  004839  #END
004456  004840        
004457  004841  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004458  004842  // Syntax: Qencoder1(pinA, pinB, mode);
004459  004843  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004460  004844  // Notes : not available on pins PA14 and PA15
004461  004845  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004462  004846  //       : or written to at any time with peekW and pokeW using the following constants:-
004463  004847  //       : It is necessary to configure the pins first, depending on your requirements, eg
004464  004848  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004465  004849  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004466  004850  //       : Returns true if the pin numbers are legal (usually ignored)
004467  004851  //    QEN1_COUNTER_LO
004468  004852  //    QEN1_COUNTER_HI
004469  004853  //    QEN1_DELTA This is reset to 0 when read
004470  004854        
004471  004855  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004472  004856  // Syntax: Qencoder2(pinA, pinB, mode);
004473  004857  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004474  004858  // Notes : not available on pins PA14 and PA15
004475  004859  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004476  004860  //       : or written to at any time with peekW and pokeW using the following constants:-
004477  004861  //       : It is necessary to configure the pins first, depending on your requirements, eg
004478  004862  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004479  004863  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004480  004864  //       : Returns true if the pin numbers are legal (usually ignored)
004481  004865  //    QEN2_COUNTER_LO
004482  004866  //    QEN2_COUNTER_HI
004483  004867  //    QEN2_DELTA This is reset to 0 when read
004484  004868        
004485  004869        
004486  004870  func Qencoder1Reset(), 0;
004487  004871  // Syntax: Qencoder1Reset();
004488  004872  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004489  004873  // Notes :
004490  004874  //    QEN1_COUNTER_LO is reset to zero
004491  004875  //    QEN1_COUNTER_HI is reset to zero
004492  004876  //    QEN1_DELTA is reset to zero
004493  004877        
004494  004878  func Qencoder2Reset(), 0;
004495  004879  // Syntax: Qencoder2Reset();
004496  004880  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004497  004881  // Notes :
004498  004882  //    QEN2_COUNTER_LO is reset to zero
004499  004883  //    QEN2_COUNTER_HI is reset to zero
004500  004884  //    QEN2_DELTA is reset to zero
004501  004885        
004502  004886        
004503  004887  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004504  004888  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004505  004889  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004506  004890  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004507  004891  //       : Invert the state of an output at a "freq" freuency "count" times.
004508  004892  //       : PulseoutCount is non blocking, that is, code execution may continue while
004509  004893  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004510  004894  //       : If not already an output, pin is automatically made a push/pull output,
004511  004895  //       : and the last state of its output latch will determine pulse polarity.
004512  004896  //       : It's its open drain state is not altered if the pin was already an output.
004513  004897  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004514  004898  //       : will simply have the new "value" added to it.
004515  004899  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004516  004900  //       : returns true if the pin number is legal (usually ignored)
004517  004901        
004518  004902  func __reserved72(), 0; // do not remove
004519  004903        
004520  004904  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004521  004905  // Syntax: pwm_Init(pin, value);
004522  004906  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004523  004907  // Notes : only available on PA4 to PA9
004524  004908  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004525  004909  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004526  004910  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004527  004911  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004528  004912  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004529  004913  //       :                    : Repetition rate ~50hz or 20ms
004530  004914  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004531  004915  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004532  004916  //       : pwm_Init is non blocking and the pwm continues until turn off
004533  004917  //       : Returns true if the pin number is legal (usually ignored)
004534  004918        
004535  004919  //------------------------------------------------------------------------------
004536  004920  // PWM Constants
004537  004921  //------------------------------------------------------------------------------
004538  004922  #CONST
004539  004927  #END
004540  004928        
004541  004929  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004542  004930  // Syntax   : OW_Reset(PA0);
004543  004931  // Usage    : OW_Reset(PA0);
004544  004932  // Notes    : Only available on PA0 to PA13
004545  004933  //          : Resets  ONEWIRE device
004546  004934  //          : Returns the status, 0 = ACK.
004547  004935  //          :
004548  004936        
004549  004937  func OW_Read("pin"), 1;                              // read data from 1wire bus
004550  004938  // Syntax   : OW_Read(PA0);
004551  004939  // Usage    : arg1 := OW_Read(PA0);
004552  004940  // Notes    : Only available on PA0 to PA13
004553  004941  //          : Reads value of the ONEWIRE pin
004554  004942  //          : that was previously selected for ONEWIRE comms.
004555  004943  //          :
004556  004944  //          : pin = 0 : the next byte from the ONEWIRE bus
004557  004945        
004558  004946  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004559  004947  // Syntax   : OW_Read9(PA0);
004560  004948  // Usage    : OW_Read9(PA0);
004561  004949  // Notes    : Only available on PA0 to PA13
004562  004950  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004563  004951  //          : that was previously selected for ONEWIRE comms.
004564  004952  //          :
004565  004953  //          : read the 9 bits from the ONEWIRE bus
004566  004954        
004567  004955  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004568  004956  // Syntax   : OW_Write(PA0, arg);
004569  004957  // Usage    : OW_Write(PA0, arg);
004570  004958  // Notes    : Only available on PA0 to PA13
004571  004959  //          : Sends ONEWIRE data on the appropriate
004572  004960  //          : pin that was previously  selected as ONEWIRE comms.
004573  004961  //          :
004574  004962  //          : write arg to the ONEWIRE bus
004575  004963        
004576  004964  func __reserved77(), 0; // do not remove
004577  004965  func __reserved78(), 0; // do not remove
004578  004966        
004579  004967  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004580  004968  // Syntax: sys_GetDateVar(&year, &month, &day);
004581  004969  // Usage : sys_GetDateVar(&year, &month, &day);
004582  004970  // Notes : Retrieves the date values into variables
004583  004971        
004584  004972  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004585  004973  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004974  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004587  004975  // Notes : Retrieves the time values into variables
004588  004976        
004589  004977  func sys_PmmC(), 0;
004590  004978  // Syntax: sys_PmmC();
004591  004979  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004592  004980  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004593  004981  //       : Can be captured to a buffer using the to( function
004594  004982  //       : Returns nothing.
004595  004983        
004596  004984  func sys_Driver(), 0;
004597  004985  // Syntax: sys_Driver();
004598  004986  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004599  004987  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004600  004988  //       : Can be captured to a buffer using the to( function
004601  004989  //       : Returns nothing.
004602  004990        
004603  004991  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004604  004992  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004605  004993  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004606  004994  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004607  004995  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004608  004996  //       : elements in each buffer. This will need to be greater than "width" for negative
004609  004997  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004610  004998  //       : pass 0 as the address for any unused traces
004611  004999  //       : X position is incremented each point by "xstep" pixels.
004612  005000  //       : Y values are derived from a Y buffer "newy" (signed values).
004613  005001  //       : 2 buffers need to be supplied, "newy" contains new
004614  005002  //       : points to be drawn, "oldy" contains most recent set
004615  005003  //       : of points to be un-drawn. After the waveform is drawn,
004616  005004  //       : "newy" buffer is automatically copied to "oldy" buffer.
004617  005005        
004618  005006        
004619  005007  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004620  005008  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004621  005009  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004622  005010  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004623  005011  //       : and calls "COMPLETEfunction" when done.
004624  005012  //       : "rate" is samples in 100 of samples per second
004625  005013  //       : Any unused IOx pins should have their buffer addresses set to 0
004626  005014  //       : For performance reasons samples are taken in chunks of 32, thus if you
004627  005015  //       : request 33 samples there will be a delay of 31 samples before
004628  005016  //       : "COMPLETEfunction" is called
004629  005017  //       : If Touch is enabled this function should be called no more than once per
004630  005018  //       : millisecond, otherwise touch behaviour could be eratic.
004631  005019        
004632  005020        
004633  005021  func sys_ErrorMessage("msgnum"), 1;
004634  005022        
004635  005023  //==============================//
004636  005024  // NeoPixel specific functions  //
004637  005025  //==============================//
004638  005026        
004639  005027  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004640  005028  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004641  005029  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004642  005030  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004643  005031  //       : data        : Address of data to be sent
004644  005032  //       : size        : number of colour 'sets' to follow
004645  005033  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004646  005034  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004647  005035  //       : Repeat      : Number of times to repeat the colours between first and last
004648  005036  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004649  005037  //       : Returns true if the pin number is legal (usually ignored)
004650  005038  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004651  005039  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004652  005040        
004653  005041  // NeoPixel related constants
004654  005042  #CONST
004655  005046  #END
004656  005047        
004657  005048  func __reserved85(), 0; // do not remove
004658  005049  func __reserved86(), 0; // do not remove
004659  005050        
004660  005051  //==============================================//
004661  005052  // spi flash device specific functions          //
004662  005053  //==============================================//
004663  005054        
004664  005055  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004665  005056  // Syntax   : spiflash_SIG("spi#","enablepin");
004666  005057  // Usage    : var := spiflash_SIG(SPI1, PA0);
004667  005058  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004668  005059  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004669  005060  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004670  005061  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004671  005062  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004672  005063  //          : byte is ignored.
004673  005064        
004674  005065  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004675  005066  // Syntax   : spiflash_ID("spi#","enablepin");
004676  005067  // Usage    : var := spiflash_ID(SPI1, PA0);
004677  005068  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004678  005069  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004679  005070  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004680  005071  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004681  005072  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004682  005073  //          : contains capacity. Refer to the device data sheet for further information.
004683  005074        
004684  005075  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004685  005076  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004686  005077  // Usage    : spiflash_BulkErase(SPI1, PA0);
004687  005078  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004688  005079  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004689  005080  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004690  005081  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004691  005082  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004692  005083  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004693  005084        
004694  005085  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004695  005086  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004696  005087  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004697  005088  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004698  005089  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004699  005090  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004700  005091  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004701  005092  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004702  005093  //          : blockAddress The address of the 64k FLASH block to be erased.
004703  005094  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004704  005095  //          : can take up to 3 milliseconds.
004705  005096        
004706  005097  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004707  005098  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004708  005099  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004709  005100  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004710  005101        
004711  005102  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004712  005103  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004713  005104  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004714  005105  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004715  005106  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004716  005107  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004717  005108  //       : returns number of characters read
004718  005109  //       : if "dest" is zero, data is read direct to GRAM window
004719  005110  //       :
004720  005111        
004721  005112  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004722  005113  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004723  005114  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004724  005115  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004725  005116  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004726  005117  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004727  005118  //       : returns number of bytes written
004728  005119  //       :
004729  005120        
004730  005121  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004731  005122  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004732  005123  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004733  005124  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004734  005125  //       : The image is displayed at x,y (with respect to top left corner).
004735  005126        
004736  005127  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004737  005128  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004738  005129  // Usage : spiflash_PutC('x', SPI1, PA0);
004739  005130  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004740  005131  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004741  005132  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004742  005133        
004743  005134  func spiflash_GetC("spi#", "enablepin"), 1;
004744  005135  // Syntax: spiflash_GetC("spi#", "enablepin");
004745  005136  // Usage : mychar := fgetC(SPI1, PA0);
004746  005137  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004747  005138  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004748  005139  //       : by subsequent reads or writes.
004749  005140  //       : returns next char from file
004750  005141        
004751  005142  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004752  005143  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004753  005144  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004754  005145  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004755  005146  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004756  005147  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004757  005148        
004758  005149  func spiflash_GetW("spi#", "enablepin"), 1;
004759  005150  // Syntax: spiflash_GetW("spi#", "enablepin");
004760  005151  // Usage : myword := fgetW(SPI1, PA0);
004761  005152  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004762  005153  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004763  005154  //       : by subsequent reads or writes.
004764  005155  // Notes : returns next word in file
004765  005156        
004766  005157  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004767  005158  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004768  005159  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004769  005160  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004770  005161  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004771  005162  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004772  005163  //       : returns number of characters written
004773  005164  //       :
004774  005165        
004775  005166  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004776  005167  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004777  005168  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004778  005169  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004779  005170  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004780  005171  //       : by subsequent reads or writes.
004781  005172  //       : returns pointer to string or null if failed.
004782  005173  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004783  005174  //       : NB:- only reads up to "size-1" characters into "string"
004784  005175  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004785  005176  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004786  005177  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004787  005178  //       : C] It reaches the end of file
004788  005179  //       : D] A read error occurs.
004789  005180        
004790  005181  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004791  005182  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004792  005183  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004793  005184  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004794  005185  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004795  005186  //       : return a function pointer to the allocation.
004796  005187  //       : The function can then be invoked just like any other
004797  005188  //       : function would be called via a function pointer.
004798  005189  //       : Parameters may be passed to it in a conventional way.
004799  005190  //       : The function may be discarded at any time when no
004800  005191  //       : longer required, thus freeing its memory resources.
004801  005192  //       : The loaded function can be discarded with mem_Free(..)
004802  005193  //       : eg:
004803  005194  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004804  005195  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004805  005196  //       : then elsewhere in your program:-
004806  005197  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004807  005198  //       : if(res == QUIT_APPLICATION) goto exitApp;
004808  005199  //       : Later in your program, when popupWindow is no longer
004809  005200  //       : required for the application:-
004810  005201  //       : res := mem_Free(popupWindow);
004811  005202  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004812  005203  //       : The callers stack is shared by the loaded function,
004813  005204  //       : however any global variables in the loaded function
004814  005205  //       : are private to that function.
004815  005206  //
004816  005207        
004817  005208  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004818  005209  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004819  005210  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004820  005211  // Notes : current program releases any allocated memory but
004821  005212  //       : retains the stack and global memory.
004822  005213  //       : If arglistptr is 0, no arguments are passed, else
004823  005214  //       : arglist points to an array, the first element being
004824  005215  //       : the number of elements in the array.
004825  005216  //       : func 'main' in the called program accepts
004826  005217  //       : the arguments, if any. The arguments can only
004827  005218  //       : be passed by value, no pointers or references can be
004828  005219  //       : used as all memory is cleared before the file
004829  005220  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004830  005221  //       : for functions that can pass by reference.
004831  005222        
004832  005223  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004833  005224  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004834  005225  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004835  005226  // Notes : returns like a function, current program
004836  005227  //       : calling program is kept active and control returns to it.
004837  005228  //       : If arglistptr is 0, no arguments are passed, else
004838  005229  //       : arglist points to an array, the first element being
004839  005230  //       : the number of elements in the array.
004840  005231  //       : func 'main' in the called program accepts the arguments.
004841  005232  //       : This function is similar to spiflash_LoadFunction(...), however,
004842  005233  //       : the function argument list is passed by pointer, and
004843  005234  //       : the memory consumed by the function is released as
004844  005235  //       : soon as the function completes.
004845  005236        
004846  005237  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004847  005238  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004848  005239  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004849  005240  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004850  005241  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004851  005242  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004852  005243  //       : Returns NULL if function fails.
004853  005244  //       : Returns a handle (pointer to the memory allocation) to the
004854  005245  //       : image control list that has been created.
004855  005246        
004856  005247  // Notes : This function Calculates the size of a chunk of memory required for
004857  005248  //       : a image list and populates it from the image control file ("*.dat")
004858  005249  //       : therefore, when imagelist is no longer required, you must de-allocate
004859  005250  //       : the image list memory by using eg:- mem_Free(hImagelist);
004860  005251  //       : to restore the heap.
004861  005252  //       :
004862  005253        
004863  005254  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004864  005255  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004865  005256  // Usage : spiflash_PlayWAV(SPI1, PA0);
004866  005257  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004867  005258  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004868  005259  //       : or writes.
004869  005260  //       : This function automatically grabs a chunk
004870  005261  //       : of memory for a file buffer, and a wave
004871  005262  //       : buffer. The minimum memory requirement is
004872  005263  //       : about 580 bytes for the disk io service and
004873  005264  //       : a minimum wave buffer size of 1024. The size
004874  005265  //       : of the wave buffer allocation
004875  005266  //       : can be increased by the snd_BufSize function.
004876  005267  //       : The default size 1024 bytes.
004877  005268  //       : NB the memory is only required during the
004878  005269  //       : duration of play, and is automatically
004879  005270  //       : released while not in use.
004880  005271  //       : See the Sound Class services for other associated controls.
004881  005272  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004882  005273  //       : If errors occured, the folling is returned
004883  005274  //       : -7  : Insufficient memory available for WAV buffer and file
004884  005275  //       : -6  : cant play this rate
004885  005276  //       : -5  : no data chunk found in first rsector
004886  005277  //       : -4  : no format data
004887  005278  //       : -3  : no wave chunk signature
004888  005279  //       : -2  : bad wave file format
004889  005280  //       : -1  : file not found
004890  005281        
004891  005282  //==============================================//
004892  005283  // more com functions                           //
004893  005284  //==============================================//
004894  005285        
004895  005286  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004896  005287  // Syntax   : com1_TXblock("buf", "bufsize");
004897  005288  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004898  005289  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004899  005290  //          : if a transmit buffer is active and space is available this function will return almost
004900  005291  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004901  005292        
004902  005293  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004903  005294  // Syntax   : com1_RXblock("buf", "bufsize");
004904  005295  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004905  005296  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004906  005297  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004907  005298  //          : immediately otherwise it will block until until the required bytes are received.
004908  005299        
004909  005300  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004910  005301  // Syntax   : com_TXblock("buf", "bufsize");
004911  005302  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004912  005303  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004913  005304  //          : if a transmit buffer is active and space is available this function will return almost
004914  005305  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004915  005306        
004916  005307  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004917  005308  // Syntax   : com_RXblock("buf", "bufsize");
004918  005309  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004919  005310  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004920  005311  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004921  005312  //          : immediately otherwise it will block until until the required bytes are received.
004922  005313        
004923  005314  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004924  005315  // Syntax   : com_TXblock("buf", "bufsize");
004925  005316  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004926  005317  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004927  005318  //          : if a transmit buffer is active and space is available this function will return almost
004928  005319  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004929  005320        
004930  005321  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004931  005322  // Syntax   : com_RXblock("buf", "bufsize");
004932  005323  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004933  005324  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004934  005325  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004935  005326  //          : immediately otherwise it will block until until the required bytes are received.
004936  005327        
004937  005328  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004938  005329  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004939  005330  // Usage : disp_BlitPixelsFromCOM1();
004940  005331  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004941  005332  //       : display from the specified com port.
004942  005333        
004943  005334  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004944  005335  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004945  005336  // Usage : disp_BlitPixelsFromCOM2();
004946  005337  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004947  005338  //       : display from the specified com port.
004948  005339        
004949  005340  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004950  005341  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004951  005342  // Usage : disp_BlitPixelsFromCOM3();
004952  005343  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004953  005344  //       : display from the specified com port.
004954  005345        
004955  005346        
004956  005347  //==============================================//
004957  005348  // crc generation functions                     //
004958  005349  //==============================================//
004959  005350        
004960  005351  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004961  005352  // *Notes   : (if you calculate all of the incoming data
004962  005353  //          : INCLUDING the CRC, the result should be 0x00
004963  005354  //          : This is equivalent to simple addition of all bytes
004964  005355  //          : and returning the negated sum an 8 bit value.
004965  005356  //          : For the standard test string "123456789",
004966  005357  //          : crc_CSUM_8 will return 0x0023.
004967  005358        
004968  005359        
004969  005360  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004970  005361  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004971  005362  //          : (if you calculate all of the incoming data
004972  005363  //          : INCLUDING the CRC, the result should be 0x0000
004973  005364  //          : For the standard test string "123456789",
004974  005365  //          : crc_16 will return 0xBB3D.
004975  005366        
004976  005367        
004977  005368  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004978  005369  // *Notes   : (if you calculate all of the incoming data
004979  005370  //          : INCLUDING the CRC, the result should be 0x0000
004980  005371  //          : For the standard test string "123456789",
004981  005372  //          : crc_MODBUS will return 0x4B37.
004982  005373        
004983  005374        
004984  005375  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004985  005376  // *Notes   : (if you calculate all of the incoming data
004986  005377  //          : INCLUDING the CRC, the result should be 0x0000
004987  005378  //          : For the standard test string "123456789",
004988  005379  //          : crc_CCITT will return the following:-
004989  005380  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004990  005381  //          : seed = 0xFFFF, result = 0x29B1
004991  005382  //          : seed = 0x1D0F, result = 0xE5CC
004992  005383        
004993  005384        
004994  005385  //------------------------------------------------------------------//
004995  005386  // CONSTANTS
004996  005387  //------------------------------------------------------------------//
004997  005388        
004998  005389  #CONST
004999  005393  #END
005000  005394        
005001  005395  // timebase constants for timebase_init
005002  005396  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005003  005397  #CONST
005004  005408  #END
005005  005409        
005006  005410        
005007  005411  // generic constants
005008  005412  #CONST
005009  005420  #END
005010  005421        
005011  005422        
005012  005423        
005013  005424  //gfx_Get() related constants
005014  005425  #CONST
005015  005434  #END
005016  005435        
005017  005436        
005018  005437        
005019  005438        
005020  005439  #CONST
005021  005452  #END
005022  005453        
005023  005454        
005024  005455  #CONST
005025  005480  #END
005026  005481        
005027  005482        
005028  005483        
005029  005484        
005030  005485  // timer control  related constants
005031  005486  #CONST
005032  005495  #END
005033  005496        
005034  005497        
005035  005498        
005036  005499  //------------------------------------------------------------------------------
005037  005500  // system WORD variables accesible with peekW and pokeW or pointer access
005038  005501  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005039  005502  // can also be accessed with peekW and pokeW
005040  005503  //------------------------------------------------------------------------------
005041  005504        
005042  005505  #CONST
005043  005600  #END
005044  005601        
005045  005602  #CONST
005046  005767  #END
005047  005768        
005048  005769        
005049  005770        
005050  005771  //==================================================================================================
005051  005772        
005052  005773        
005053  005774        
005054  000013      #ENDIF
005055  000014        
005056  000015        
005057  000016  //===========================================================================================
005058  000017        
005059  000018        
005060  000002        
005061  000003  // generated 02/07/2015 17:19:43
005062  000004        
005063  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005064  000006  #inherit "4DGL_16bitColours.fnc"
005065  000006  #inherit "4DGL_16bitColours.fnc"
005066  000004  */
005067  000005        
005068  000006        
005069  000007        
005070  000008  #CONST
005071  000149  #END
005072  000150        
005073  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005074  000008  #inherit "VisualConst.inc"
005075  000008  #inherit "VisualConst.inc"
005076  000001  // Line Patterns
005077  000002  #constant  LPCOARSE    0xF0F0
005078  000002  #constant  LPCOARSE    0xF0F0
005079  000003  #constant  LPMEDIUM    0x3333
005080  000003  #constant  LPMEDIUM    0x3333
005081  000004  #constant  LPFINE      0xAAAA
005082  000004  #constant  LPFINE      0xAAAA
005083  000005  #constant  LPDASHDOT   0x03CF
005084  000005  #constant  LPDASHDOT   0x03CF
005085  000006  #constant  LPDASHDOTDOT 0x0333
005086  000006  #constant  LPDASHDOTDOT 0x0333
005087  000007  #constant  LPSOLID     0x0000
005088  000007  #constant  LPSOLID     0x0000
005089  000009        
005090  000010        
file C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1Const.inc

005091  000011  #inherit "RepRap_Touchv1Const.inc"
005092  000011  #inherit "RepRap_Touchv1Const.inc"
005093  000001  // File generated 02/07/2015 17:19:19
005094  000002  // Warning! This is a generated file, any manual changes will be
005095  000003  // lost during the next generation.
005096  000004        
005097  000005  #constant  Strings1Count    0
005098  000005  #constant  Strings1Count    0
005099  000006  #constant  Strings1Size     1
005100  000006  #constant  Strings1Size     1
005101  000007  #constant  Strings3Count    1
005102  000007  #constant  Strings3Count    1
005103  000008  #constant  Strings3Size     18
005104  000008  #constant  Strings3Size     18
005105  000009  #constant  Strings20Count    1
005106  000009  #constant  Strings20Count    1
005107  000010  #constant  Strings20Size     35
005108  000010  #constant  Strings20Size     35
005109  000011  #constant  Strings4Count    1
005110  000011  #constant  Strings4Count    1
005111  000012  #constant  Strings4Size     25
005112  000012  #constant  Strings4Size     25
005113  000013  #constant  Strings6Count    1
005114  000013  #constant  Strings6Count    1
005115  000014  #constant  Strings6Size     31
005116  000014  #constant  Strings6Size     31
005117  000015  #constant  Strings2Count    0
005118  000015  #constant  Strings2Count    0
005119  000016  #constant  Strings2Size     1
005120  000016  #constant  Strings2Size     1
005121  000017  #constant  Strings0Count    1
005122  000017  #constant  Strings0Count    1
005123  000018  #constant  Strings0Size     7
005124  000018  #constant  Strings0Size     7
005125  000019  #constant  Strings9Count    0
005126  000019  #constant  Strings9Count    0
005127  000020  #constant  Strings9Size     1
005128  000020  #constant  Strings9Size     1
005129  000021  #constant  Strings34Count    0
005130  000021  #constant  Strings34Count    0
005131  000022  #constant  Strings34Size     1
005132  000022  #constant  Strings34Size     1
005133  000023  #constant  Strings36Count    0
005134  000023  #constant  Strings36Count    0
005135  000024  #constant  Strings36Size     1
005136  000024  #constant  Strings36Size     1
005137  000025  #constant  Strings37Count    0
005138  000025  #constant  Strings37Count    0
005139  000026  #constant  Strings37Size     1
005140  000026  #constant  Strings37Size     1
005141  000027  #constant  Strings12Count    1
005142  000027  #constant  Strings12Count    1
005143  000028  #constant  Strings12Size     15
005144  000028  #constant  Strings12Size     15
005145  000029  #constant  Strings14Count    1
005146  000029  #constant  Strings14Count    1
005147  000030  #constant  Strings14Size     23
005148  000030  #constant  Strings14Size     23
005149  000031  #constant  Strings16Count    0
005150  000031  #constant  Strings16Count    0
005151  000032  #constant  Strings16Size     1
005152  000032  #constant  Strings16Size     1
005153  000033  #constant  Strings15Count    1
005154  000033  #constant  Strings15Count    1
005155  000034  #constant  Strings15Size     24
005156  000034  #constant  Strings15Size     24
005157  000035  #constant  Strings21Count    1
005158  000035  #constant  Strings21Count    1
005159  000036  #constant  Strings21Size     35
005160  000036  #constant  Strings21Size     35
005161  000037  #constant  Strings11Count    1
005162  000037  #constant  Strings11Count    1
005163  000038  #constant  Strings11Size     33
005164  000038  #constant  Strings11Size     33
005165  000039  #constant  Strings22Count    1
005166  000039  #constant  Strings22Count    1
005167  000040  #constant  Strings22Size     20
005168  000040  #constant  Strings22Size     20
005169  000041  #constant  Strings23Count    1
005170  000041  #constant  Strings23Count    1
005171  000042  #constant  Strings23Size     17
005172  000042  #constant  Strings23Size     17
005173  000043  #constant  Strings24Count    1
005174  000043  #constant  Strings24Count    1
005175  000044  #constant  Strings24Size     26
005176  000044  #constant  Strings24Size     26
005177  000045  #constant  Strings25Count    1
005178  000045  #constant  Strings25Count    1
005179  000046  #constant  Strings25Size     10
005180  000046  #constant  Strings25Size     10
005181  000047  #constant  Strings26Count    1
005182  000047  #constant  Strings26Count    1
005183  000048  #constant  Strings26Size     10
005184  000048  #constant  Strings26Size     10
005185  000049  #constant  Strings27Count    1
005186  000049  #constant  Strings27Count    1
005187  000050  #constant  Strings27Size     11
005188  000050  #constant  Strings27Size     11
005189  000051  #constant  Strings5Count    1
005190  000051  #constant  Strings5Count    1
005191  000052  #constant  Strings5Size     37
005192  000052  #constant  Strings5Size     37
005193  000053  #constant  Strings28Count    1
005194  000053  #constant  Strings28Count    1
005195  000054  #constant  Strings28Size     40
005196  000054  #constant  Strings28Size     40
005197  000055  #constant  Strings35Count    1
005198  000055  #constant  Strings35Count    1
005199  000056  #constant  Strings35Size     36
005200  000056  #constant  Strings35Size     36
005201  000057  #constant  Strings33Count    1
005202  000057  #constant  Strings33Count    1
005203  000058  #constant  Strings33Size     33
005204  000058  #constant  Strings33Size     33
005205  000059  #constant  Strings10Count    1
005206  000059  #constant  Strings10Count    1
005207  000060  #constant  Strings10Size     15
005208  000060  #constant  Strings10Size     15
005209  000061  #constant  Strings7Count    0
005210  000061  #constant  Strings7Count    0
005211  000062  #constant  Strings7Size     1
005212  000062  #constant  Strings7Size     1
005213  000063  #constant  Strings8Count    0
005214  000063  #constant  Strings8Count    0
005215  000064  #constant  Strings8Size     1
005216  000064  #constant  Strings8Size     1
005217  000065  #constant  Strings38Count    0
005218  000065  #constant  Strings38Count    0
005219  000066  #constant  Strings38Size     1
005220  000066  #constant  Strings38Size     1
005221  000067  #constant  Strings39Count    0
005222  000067  #constant  Strings39Count    0
005223  000068  #constant  Strings39Size     1
005224  000068  #constant  Strings39Size     1
005225  000069  #constant  Strings40Count    1
005226  000069  #constant  Strings40Count    1
005227  000070  #constant  Strings40Size     7
005228  000070  #constant  Strings40Size     7
005229  000071  #constant  Strings41Count    1
005230  000071  #constant  Strings41Count    1
005231  000072  #constant  Strings41Size     7
005232  000072  #constant  Strings41Size     7
005233  000073  #constant  Strings42Count    1
005234  000073  #constant  Strings42Count    1
005235  000074  #constant  Strings42Size     7
005236  000074  #constant  Strings42Size     7
005237  000075  #constant  Strings43Count    0
005238  000075  #constant  Strings43Count    0
005239  000076  #constant  Strings43Size     1
005240  000076  #constant  Strings43Size     1
005241  000077  #constant  Strings44Count    0
005242  000077  #constant  Strings44Count    0
005243  000078  #constant  Strings44Size     1
005244  000078  #constant  Strings44Size     1
005245  000079  #constant  Strings45Count    0
005246  000079  #constant  Strings45Count    0
005247  000080  #constant  Strings45Size     1
005248  000080  #constant  Strings45Size     1
005249  000081  #constant  Strings51Count    0
005250  000081  #constant  Strings51Count    0
005251  000082  #constant  Strings51Size     1
005252  000082  #constant  Strings51Size     1
005253  000083  #constant  Strings52Count    0
005254  000083  #constant  Strings52Count    0
005255  000084  #constant  Strings52Size     1
005256  000084  #constant  Strings52Size     1
005257  000085  #constant  Strings17Count    1
005258  000085  #constant  Strings17Count    1
005259  000086  #constant  Strings17Size     65
005260  000086  #constant  Strings17Size     65
005261  000087  #constant  Strings18Count    1
005262  000087  #constant  Strings18Count    1
005263  000088  #constant  Strings18Size     42
005264  000088  #constant  Strings18Size     42
005265  000089  #constant  Strings19Count    1
005266  000089  #constant  Strings19Count    1
005267  000090  #constant  Strings19Size     45
005268  000090  #constant  Strings19Size     45
005269  000091  #constant  Strings29Count    1
005270  000091  #constant  Strings29Count    1
005271  000092  #constant  Strings29Size     65
005272  000092  #constant  Strings29Size     65
005273  000093  #constant  Strings30Count    1
005274  000093  #constant  Strings30Count    1
005275  000094  #constant  Strings30Size     45
005276  000094  #constant  Strings30Size     45
005277  000095  #constant  Strings31Count    1
005278  000095  #constant  Strings31Count    1
005279  000096  #constant  Strings31Size     7
005280  000096  #constant  Strings31Size     7
005281  000097  #constant  Strings32Count    1
005282  000097  #constant  Strings32Count    1
005283  000098  #constant  Strings32Size     19
005284  000098  #constant  Strings32Size     19
005285  000099  #constant  Strings13Count    1
005286  000099  #constant  Strings13Count    1
005287  000100  #constant  Strings13Size     4
005288  000100  #constant  Strings13Size     4
005289  000101  #constant  Strings46Count    0
005290  000101  #constant  Strings46Count    0
005291  000102  #constant  Strings46Size     1
005292  000102  #constant  Strings46Size     1
005293  000103  #constant  Strings47Count    0
005294  000103  #constant  Strings47Count    0
005295  000104  #constant  Strings47Size     1
005296  000104  #constant  Strings47Size     1
005297  000105  #constant  Strings48Count    1
005298  000105  #constant  Strings48Count    1
005299  000106  #constant  Strings48Size     3
005300  000106  #constant  Strings48Size     3
005301  000107  #constant  Strings49Count    1
005302  000107  #constant  Strings49Count    1
005303  000108  #constant  Strings49Size     17
005304  000108  #constant  Strings49Size     17
005305  000109  #constant  Strings50Count    1
005306  000109  #constant  Strings50Count    1
005307  000110  #constant  Strings50Size     20
005308  000110  #constant  Strings50Size     20
005309  000111  // object indexes into ImageControl
005310  000112  #CONST
005311  000308  #END
005312  000309        
005313  000310  #constant  Strings1StartH   0x0
005314  000310  #constant  Strings1StartH   0x0
005315  000311  #constant  Strings1StartL   0x0
005316  000311  #constant  Strings1StartL   0x0
005317  000312  #constant  Strings3StartH   0x0
005318  000312  #constant  Strings3StartH   0x0
005319  000313  #constant  Strings3StartL   0x200
005320  000313  #constant  Strings3StartL   0x200
005321  000314  #constant  Strings20StartH   0x0
005322  000314  #constant  Strings20StartH   0x0
005323  000315  #constant  Strings20StartL   0x400
005324  000315  #constant  Strings20StartL   0x400
005325  000316  #constant  Strings4StartH   0x0
005326  000316  #constant  Strings4StartH   0x0
005327  000317  #constant  Strings4StartL   0x600
005328  000317  #constant  Strings4StartL   0x600
005329  000318  #constant  Strings6StartH   0x0
005330  000318  #constant  Strings6StartH   0x0
005331  000319  #constant  Strings6StartL   0x800
005332  000319  #constant  Strings6StartL   0x800
005333  000320  #constant  Strings2StartH   0x0
005334  000320  #constant  Strings2StartH   0x0
005335  000321  #constant  Strings2StartL   0xA00
005336  000321  #constant  Strings2StartL   0xA00
005337  000322  #constant  Strings0StartH   0x0
005338  000322  #constant  Strings0StartH   0x0
005339  000323  #constant  Strings0StartL   0xC00
005340  000323  #constant  Strings0StartL   0xC00
005341  000324  #constant  Strings9StartH   0x0
005342  000324  #constant  Strings9StartH   0x0
005343  000325  #constant  Strings9StartL   0xE00
005344  000325  #constant  Strings9StartL   0xE00
005345  000326  #constant  Strings34StartH   0x0
005346  000326  #constant  Strings34StartH   0x0
005347  000327  #constant  Strings34StartL   0x1000
005348  000327  #constant  Strings34StartL   0x1000
005349  000328  #constant  Strings36StartH   0x0
005350  000328  #constant  Strings36StartH   0x0
005351  000329  #constant  Strings36StartL   0x1200
005352  000329  #constant  Strings36StartL   0x1200
005353  000330  #constant  Strings37StartH   0x0
005354  000330  #constant  Strings37StartH   0x0
005355  000331  #constant  Strings37StartL   0x1400
005356  000331  #constant  Strings37StartL   0x1400
005357  000332  #constant  Strings12StartH   0x0
005358  000332  #constant  Strings12StartH   0x0
005359  000333  #constant  Strings12StartL   0x1600
005360  000333  #constant  Strings12StartL   0x1600
005361  000334  #constant  Strings14StartH   0x0
005362  000334  #constant  Strings14StartH   0x0
005363  000335  #constant  Strings14StartL   0x1800
005364  000335  #constant  Strings14StartL   0x1800
005365  000336  #constant  Strings16StartH   0x0
005366  000336  #constant  Strings16StartH   0x0
005367  000337  #constant  Strings16StartL   0x1A00
005368  000337  #constant  Strings16StartL   0x1A00
005369  000338  #constant  Strings15StartH   0x0
005370  000338  #constant  Strings15StartH   0x0
005371  000339  #constant  Strings15StartL   0x1C00
005372  000339  #constant  Strings15StartL   0x1C00
005373  000340  #constant  Strings21StartH   0x0
005374  000340  #constant  Strings21StartH   0x0
005375  000341  #constant  Strings21StartL   0x1E00
005376  000341  #constant  Strings21StartL   0x1E00
005377  000342  #constant  Strings11StartH   0x0
005378  000342  #constant  Strings11StartH   0x0
005379  000343  #constant  Strings11StartL   0x2000
005380  000343  #constant  Strings11StartL   0x2000
005381  000344  #constant  Strings22StartH   0x0
005382  000344  #constant  Strings22StartH   0x0
005383  000345  #constant  Strings22StartL   0x2200
005384  000345  #constant  Strings22StartL   0x2200
005385  000346  #constant  Strings23StartH   0x0
005386  000346  #constant  Strings23StartH   0x0
005387  000347  #constant  Strings23StartL   0x2400
005388  000347  #constant  Strings23StartL   0x2400
005389  000348  #constant  Strings24StartH   0x0
005390  000348  #constant  Strings24StartH   0x0
005391  000349  #constant  Strings24StartL   0x2600
005392  000349  #constant  Strings24StartL   0x2600
005393  000350  #constant  Strings25StartH   0x0
005394  000350  #constant  Strings25StartH   0x0
005395  000351  #constant  Strings25StartL   0x2800
005396  000351  #constant  Strings25StartL   0x2800
005397  000352  #constant  Strings26StartH   0x0
005398  000352  #constant  Strings26StartH   0x0
005399  000353  #constant  Strings26StartL   0x2A00
005400  000353  #constant  Strings26StartL   0x2A00
005401  000354  #constant  Strings27StartH   0x0
005402  000354  #constant  Strings27StartH   0x0
005403  000355  #constant  Strings27StartL   0x2C00
005404  000355  #constant  Strings27StartL   0x2C00
005405  000356  #constant  Strings5StartH   0x0
005406  000356  #constant  Strings5StartH   0x0
005407  000357  #constant  Strings5StartL   0x2E00
005408  000357  #constant  Strings5StartL   0x2E00
005409  000358  #constant  Strings28StartH   0x0
005410  000358  #constant  Strings28StartH   0x0
005411  000359  #constant  Strings28StartL   0x3000
005412  000359  #constant  Strings28StartL   0x3000
005413  000360  #constant  Strings35StartH   0x0
005414  000360  #constant  Strings35StartH   0x0
005415  000361  #constant  Strings35StartL   0x3200
005416  000361  #constant  Strings35StartL   0x3200
005417  000362  #constant  Strings33StartH   0x0
005418  000362  #constant  Strings33StartH   0x0
005419  000363  #constant  Strings33StartL   0x3400
005420  000363  #constant  Strings33StartL   0x3400
005421  000364  #constant  Strings10StartH   0x0
005422  000364  #constant  Strings10StartH   0x0
005423  000365  #constant  Strings10StartL   0x3600
005424  000365  #constant  Strings10StartL   0x3600
005425  000366  #constant  Strings7StartH   0x0
005426  000366  #constant  Strings7StartH   0x0
005427  000367  #constant  Strings7StartL   0x3800
005428  000367  #constant  Strings7StartL   0x3800
005429  000368  #constant  Strings8StartH   0x0
005430  000368  #constant  Strings8StartH   0x0
005431  000369  #constant  Strings8StartL   0x3A00
005432  000369  #constant  Strings8StartL   0x3A00
005433  000370  #constant  Strings38StartH   0x0
005434  000370  #constant  Strings38StartH   0x0
005435  000371  #constant  Strings38StartL   0x3C00
005436  000371  #constant  Strings38StartL   0x3C00
005437  000372  #constant  Strings39StartH   0x0
005438  000372  #constant  Strings39StartH   0x0
005439  000373  #constant  Strings39StartL   0x3E00
005440  000373  #constant  Strings39StartL   0x3E00
005441  000374  #constant  Strings40StartH   0x0
005442  000374  #constant  Strings40StartH   0x0
005443  000375  #constant  Strings40StartL   0x4000
005444  000375  #constant  Strings40StartL   0x4000
005445  000376  #constant  Strings41StartH   0x0
005446  000376  #constant  Strings41StartH   0x0
005447  000377  #constant  Strings41StartL   0x4200
005448  000377  #constant  Strings41StartL   0x4200
005449  000378  #constant  Strings42StartH   0x0
005450  000378  #constant  Strings42StartH   0x0
005451  000379  #constant  Strings42StartL   0x4400
005452  000379  #constant  Strings42StartL   0x4400
005453  000380  #constant  Strings43StartH   0x0
005454  000380  #constant  Strings43StartH   0x0
005455  000381  #constant  Strings43StartL   0x4600
005456  000381  #constant  Strings43StartL   0x4600
005457  000382  #constant  Strings44StartH   0x0
005458  000382  #constant  Strings44StartH   0x0
005459  000383  #constant  Strings44StartL   0x4800
005460  000383  #constant  Strings44StartL   0x4800
005461  000384  #constant  Strings45StartH   0x0
005462  000384  #constant  Strings45StartH   0x0
005463  000385  #constant  Strings45StartL   0x4A00
005464  000385  #constant  Strings45StartL   0x4A00
005465  000386  #constant  Strings51StartH   0x0
005466  000386  #constant  Strings51StartH   0x0
005467  000387  #constant  Strings51StartL   0x4C00
005468  000387  #constant  Strings51StartL   0x4C00
005469  000388  #constant  Strings52StartH   0x0
005470  000388  #constant  Strings52StartH   0x0
005471  000389  #constant  Strings52StartL   0x4E00
005472  000389  #constant  Strings52StartL   0x4E00
005473  000390  #constant  Strings17StartH   0x0
005474  000390  #constant  Strings17StartH   0x0
005475  000391  #constant  Strings17StartL   0x5000
005476  000391  #constant  Strings17StartL   0x5000
005477  000392  #constant  Strings18StartH   0x0
005478  000392  #constant  Strings18StartH   0x0
005479  000393  #constant  Strings18StartL   0x5200
005480  000393  #constant  Strings18StartL   0x5200
005481  000394  #constant  Strings19StartH   0x0
005482  000394  #constant  Strings19StartH   0x0
005483  000395  #constant  Strings19StartL   0x5400
005484  000395  #constant  Strings19StartL   0x5400
005485  000396  #constant  Strings29StartH   0x0
005486  000396  #constant  Strings29StartH   0x0
005487  000397  #constant  Strings29StartL   0x5600
005488  000397  #constant  Strings29StartL   0x5600
005489  000398  #constant  Strings30StartH   0x0
005490  000398  #constant  Strings30StartH   0x0
005491  000399  #constant  Strings30StartL   0x5800
005492  000399  #constant  Strings30StartL   0x5800
005493  000400  #constant  Strings31StartH   0x0
005494  000400  #constant  Strings31StartH   0x0
005495  000401  #constant  Strings31StartL   0x5A00
005496  000401  #constant  Strings31StartL   0x5A00
005497  000402  #constant  Strings32StartH   0x0
005498  000402  #constant  Strings32StartH   0x0
005499  000403  #constant  Strings32StartL   0x5C00
005500  000403  #constant  Strings32StartL   0x5C00
005501  000404  #constant  Strings13StartH   0x0
005502  000404  #constant  Strings13StartH   0x0
005503  000405  #constant  Strings13StartL   0x5E00
005504  000405  #constant  Strings13StartL   0x5E00
005505  000406  #constant  Strings46StartH   0x0
005506  000406  #constant  Strings46StartH   0x0
005507  000407  #constant  Strings46StartL   0x6000
005508  000407  #constant  Strings46StartL   0x6000
005509  000408  #constant  Strings47StartH   0x0
005510  000408  #constant  Strings47StartH   0x0
005511  000409  #constant  Strings47StartL   0x6200
005512  000409  #constant  Strings47StartL   0x6200
005513  000410  #constant  Strings48StartH   0x0
005514  000410  #constant  Strings48StartH   0x0
005515  000411  #constant  Strings48StartL   0x6400
005516  000411  #constant  Strings48StartL   0x6400
005517  000412  #constant  Strings49StartH   0x0
005518  000412  #constant  Strings49StartH   0x0
005519  000413  #constant  Strings49StartL   0x6600
005520  000413  #constant  Strings49StartL   0x6600
005521  000414  #constant  Strings50StartH   0x0
005522  000414  #constant  Strings50StartH   0x0
005523  000415  #constant  Strings50StartL   0x6800
005524  000415  #constant  Strings50StartL   0x6800
005525  000416  #IFNOT EXISTS NOGLOBALS
005526  000417  var hndl ;
005527  000418  #ENDIF
005528  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005529  000013  #inherit "CLPrintStrings.inc"
005530  000013  #inherit "CLPrintStrings.inc"
005531  000001  func PrintStrings(var ID, var *msgid, var String)
005532  000002      var StringID, i, ch, offs32[2], res32[2];
005533  000003      StringID := oStringss[1+ID] ;
005534  000004      if (String)
005535  000005          stringsCV[ID] := -1 ;
005536  000006      else
005537  000007          stringsCV[ID] := msgid ;
005538  000008      endif
005539  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005540  000010      txt_FontID(hFonts[ID]) ;
005541  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005542  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005543  000013        
005544  000014      if (*(StringID + Ofs_String_Transparent))
005545  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005546  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005547  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005548  000018      else
005549  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005550  000020          gfx_Clipping(ON) ;
005551  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005552  000022          gfx_Clipping(OFF) ;
005553  000023        
005554  000024      endif
005555  000025        
005556  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005557  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005558  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005559  000029        
005560  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005561  000031        
005562  000032      if (String)
005563  000033          i := 0 ;
005564  000034          ch := msgid[i++] ;
005565  000035          while (ch != 0)
005566  000036              putch(ch) ;
005567  000037              ch := msgid[i++] ;
005568  000038          wend
005569  000039      else
005570  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005571  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005572  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005573  000043          uadd_3232(res32,res32,offs32) ;
005574  000044          file_Seek(hstrings, res32[1], res32[0]);
005575  000045          repeat
005576  000046              if (*(StringID + Ofs_String_Ansi))
005577  000047                  ch := file_GetC(hstrings) ;
005578  000048              else
005579  000049                  ch := file_GetW(hstrings) ;
005580  000050              endif
005581  000051              putch(ch) ;
005582  000052          until (ch == 0) ;
005583  000053      endif
005584  000054        
005585  000055  endfunc
005586  000056        
005587  000014        
005588  000015  #constant IPDatasize 22
005589  000015  #constant IPDatasize 22
005590  000016        
005591  000017  #CONST
005592  000021  #END
005593  000022        
005594  000023  #CONST
005595  000130  #END
005596  000131        
005597  000548  #END
5598  25EA
5599  25EB
5600  25EC
5601  25ED
5602  25EE
5603  25EF
5604  25F0
5605  25F1
5606  25F2
5607  25F3
5608  25F4
5609  25F5
5610  25F6
5611  25F7
5612  25F8
5613  25F9
5614  25FA
5615  25FB
5616  25FC
5617  25FD
5618  25FE
5619  25FF
5620  2600
5621  2601
5622  2602
5623  2603
5624  2604
5625  2605
5626  2606
5627  2607
5628  2608
5629  2609
5630  260A
5631  260B
5632  260C
5633  260D
5634  260E
5635  260F
5636  2610
5637  2611
5638  2612
5639  2613
5640  2614
5641  2615
5642  2616
5643  2617
5644  2618
5645  2619
5646  261A
5647  261B
5648  261C
5649  261D
5650  261E
5651  261F
5652  2620
5653  2621
5654  2622
5655  2623
5656  2624
5657  2625
5658  2626
5659  2627
5660  2628
5661  2629
5662  262A
5663  262B
5664  262C
5665  262D
5666  262E
5667  262F
5668  2630
5669  2631
5670  2632
5671  2633
5672  2634
5673  2635
5674  2636
5675  2637
5676  2638
5677  2639
5678  263A
5679  263B
5680  263C
5681  263D
5682  263E
5683  263F
5684  2640
5685  2641
5686  2642
5687  2643
5688  2644
5689  2645
5690  2646
5691  2647
5692  2648
5693  2649
5694  264A
5695  264B
5696  264C
5697  264D
5698  264E
5699  264F
5700  2650
5701  2651
5702  2652
5703  2653
5704  2654
5705  2655
5706  2656
5707  2657
5708  2658
5709  2659
5710  265A
5711  265B
5712  265C
5713  265D
5714  265E
5715  265F
5716  2660
5717  2661
5718  2662
5719  2663
5720  2664
5721  2665
5722  2666
5723  2667
5724  2668
5725  2669
5726  266A
5727  266B
5728  266C
5729  266D
5730  266E
5731  266F
5732  2670
5733  2671
5734  2672
5735  2673
5736  2674
5737  2675
5738  2676
5739  2677
5740  2678
5741  2679
5742  267A
5743  267B
5744  267C
5745  267D
5746  267E
5747  267F
5748  2680
5749  2681
5750  2682
5751  2683
5752  2684
5753  2685
5754  2686
5755  2687
5756  2688
5757  2689
5758  268A
5759  268B
5760  268C
5761  268D
5762  268E
5763  268F
5764  2690
5765  2691
5766  2692
5767  2693
5768  2694
5769  2695
5770  2696
5771  2697
5772  2698
5773  2699
5774  269A
5775  269B
5776  269C
5777  269D
5778  269E
5779  269F
5780  26A0
5781  26A1
5782  26A2
5783  26A3
5784  26A4
5785  26A5
5786  26A6
5787  26A7
5788  26A8
5789  26A9
5790  26AA
5791  26AB
5792  26AC
5793  26AD
5794  26AE
5795  26AF
5796  26B0
5797  26B1
5798  26B2
5799  26B3
5800  26B4
5801  26B5
5802  26B6
5803  26B7
5804  26B8
5805  26B9
5806  26BA
5807  26BB
5808  26BC
5809  26BD
5810  26BE
5811  26BF
5812  26C0
5813  26C1
5814  26C2
5815  26C3
5816  26C4
5817  26C5
5818  26C6
5819  26C7
5820  26C8
5821  26C9
5822  26CA
5823  26CB
5824  26CC
5825  26CD
5826  26CE
5827  26CF
5828  26D0
5829  26D1
5830  26D2
5831  26D3
5832  26D4
5833  26D5
5834  26D6
5835  26D7
5836  26D8
5837  26D9
5838  26DA
5839  26DB
5840  26DC
5841  26DD
5842  26DE
5843  26DF
5844  26E0
5845  26E1
5846  26E2
5847  26E3
5848  26E4
5849  26E5
5850  26E6
5851  26E7
5852  26E8
5853  26E9
5854  26EA
5855  26EB
5856  26EC
5857  26ED
5858  26EE
5859  26EF
5860  26F0
5861  26F1
5862  26F2
5863  26F3
5864  26F4
5865  26F5
5866  26F6
5867  26F7
5868  26F8
5869  26F9
5870  26FA
5871  26FB
5872  26FC
5873  26FD
5874  26FE
5875  26FF
5876  2700
5877  2701
5878  2702
5879  2703
5880  2704
5881  2705
5882  2706
5883  2707
5884  2708
5885  2709
5886  270A
5887  270B
5888  270C
5889  270D
5890  270E
5891  270F
5892  2710
5893  2711
5894  2712
5895  2713
5896  2714
5897  2715
5898  2716
5899  2717
5900  2718
5901  2719
5902  271A
5903  271B
5904  271C
5905  271D
5906  271E
5907  271F
5908  2720
5909  2721
5910  2722
5911  2723
5912  2724
5913  2725
5914  2726
5915  2727
5916  2728
5917  2729
5918  272A
5919  272B
5920  272C
5921  272D
5922  272E
5923  272F
5924  2730
5925  2731
5926  2732
5927  2733
5928  2734
5929  2735
5930  2736
5931  2737
5932  2738
5933  2739
5934  273A
5935  273B
5936  273C
5937  273D
5938  273E
5939  273F
5940  2740
5941  2741
5942  2742
5943  2743
5944  2744
5945  2745
5946  2746
5947  2747
5948  2748
5949  2749
5950  274A
5951  274B
5952  274C
5953  274D
5954  274E
5955  274F
5956  2750
5957  2751
5958  2752
5959  2753
5960  2754
5961  2755
5962  2756
5963  2757
5964  2758
5965  2759
5966  275A
5967  275B
5968  275C
5969  275D
5970  275E
5971  275F
5972  2760
5973  2761
5974  2762
5975  2763
5976  2764
5977  2765
5978  2766
5979  2767
5980  2768
5981  2769
5982  276A
5983  276B
5984  276C
5985  276D
5986  276E
5987  276F
5988  2770
5989  2771
5990  2772
5991  2773
5992  2774
5993  2775
5994  2776
5995  2777
5996  2778
5997  2779
5998  277A
5999  277B
6000  277C
6001  277D
6002  277E
6003  277F
6004  2780
6005  2781
6006  2782
6007  2783
6008  2784
6009  2785
6010  2786
6011  2787
6012  2788
6013  2789
6014  278A
6015  278B
6016  278C
6017  278D
6018  278E
6019  278F
6020  2790
6021  2791
6022  2792
6023  2793
6024  2794
6025  2795
6026  2796
6027  2797
6028  2798
6029  2799
6030  279A
6031  279B
6032  279C
6033  279D
6034  279E
6035  279F
6036  27A0
6037  27A1
6038  27A2
6039  27A3
6040  27A4
6041  27A5
6042  27A6
6043  27A7
6044  27A8
6045  27A9
6046  27AA
6047  27AB
6048  27AC
6049  27AD
6050  27AE
6051  27AF
6052  27B0
6053  27B1
6054  27B2
6055  27B3
6056  27B4
6057  27B5
6058  27B6
6059  27B7
6060  27B8
6061  27B9
6062  27BA
6063  27BB
6064  27BC
6065  27BD
6066  27BE
6067  27BF
6068  27C0
6069  27C1
6070  27C2
6071  27C3
6072  27C4
6073  27C5
6074  27C6
6075  27C7
6076  27C8
6077  27C9
6078  27CA
6079  27CB
6080  27CC
6081  27CD
6082  27CE
6083  27CF
6084  27D0
6085  27D1
6086  27D2
6087  27D3
6088  27D4
6089  27D5
6090  27D6
6091  27D7
6092  27D8
6093  27D9
6094  27DA
6095  27DB
6096  27DC
6097  27DD
6098  27DE
6099  27DF
6100  27E0
6101  27E1
6102  27E2
6103  27E3
6104  27E4
6105  27E5
6106  27E6
6107  27E7
6108  27E8
6109  27E9
6110  27EA
6111  27EB
6112  27EC
6113  27ED
6114  27EE
6115  27EF
6116  27F0
6117  27F1
6118  27F2
6119  27F3
6120  27F4
6121  27F5
6122  27F6
6123  27F7
6124  27F8
6125  27F9
6126  27FA
6127  27FB
6128  27FC
6129  27FD
6130  27FE
6131  27FF
6132  2800
6133  2801
6134  2802
6135  2803
6136  2804
6137  2805
6138  2806
6139  2807
6140  2808
6141  2809
6142  280A
6143  280B
6144  280C
6145  280D
6146  280E
6147  280F
6148  2810
6149  2811
6150  2812
6151  2813
6152  2814
6153  2815
6154  2816
6155  2817
6156  2818
6157  2819
6158  281A
6159  281B
6160  281C
6161  281D
6162  281E
6163  281F
6164  2820
6165  2821
6166  2822
6167  2823
6168  2824
6169  2825
6170  2826
6171  2827
6172  2828
6173  2829
6174  282A
6175  282B
6176  282C
6177  282D
6178  282E
6179  282F
6180  2830
6181  2831
6182  2832
6183  2833
6184  2834
6185  2835
6186  2836
6187  2837
6188  2838
6189  2839
6190  283A
6191  283B
6192  283C
6193  283D
6194  283E
6195  283F
6196  2840
6197  2841
6198  2842
6199  2843
6200  2844
6201  2845
6202  2846
6203  2847
6204  2848
6205  2849
6206  284A
6207  284B
6208  284C
6209  284D
6210  284E
6211  284F
6212  2850
6213  2851
6214  2852
6215  2853
6216  2854
6217  2855
6218  2856
6219  2857
6220  2858
6221  2859
6222  285A
6223  285B
6224  285C
6225  285D
6226  285E
6227  285F
6228  2860
6229  2861
6230  2862
6231  2863
6232  2864
6233  2865
6234  2866
6235  2867
6236  2868
6237  2869
6238  286A
6239  286B
6240  286C
6241  286D
6242  286E
6243  286F
6244  2870
6245  2871
6246  2872
6247  2873
6248  2874
6249  2875
6250  2876
6251  2877
6252  2878
6253  2879
6254  287A
6255  287B
6256  287C
6257  287D
6258  287E
6259  287F
6260  2880
6261  2881
6262  2882
6263  2883
6264  2884
6265  2885
6266  2886
6267  2887
6268  2888
6269  2889
6270  288A
6271  288B
6272  288C
6273  288D
6274  288E
6275  288F
6276  2890
6277  2891
6278  2892
6279  2893
6280  2894
6281  2895
6282  2896
6283  2897
6284  2898
6285  2899
6286  289A
6287  289B
6288  289C
6289  289D
6290  289E
6291  289F
6292  28A0
6293  28A1
6294  28A2
6295  28A3
6296  28A4
6297  28A5
6298  28A6
6299  28A7
6300  28A8
6301  28A9
6302  28AA
6303  28AB
6304  28AC
6305  28AD
6306  28AE
6307  28AF
6308  28B0
6309  28B1
6310  28B2
6311  28B3
6312  28B4
6313  28B5
6314  28B6
6315  28B7
6316  28B8
6317  28B9
6318  28BA
6319  28BB
6320  28BC
6321  28BD
6322  28BE
6323  28BF
6324  28C0
6325  28C1
6326  28C2
6327  28C3
6328  28C4
6329  28C5
6330  28C6
6331  28C7
6332  28C8
6333  28C9
6334  28CA
6335  28CB
6336  28CC
6337  28CD
6338  28CE
6339  28CF
6340  28D0
6341  28D1
6342  28D2
6343  28D3
6344  28D4
6345  28D5
6346  28D6
6347  28D7
6348  28D8
6349  28D9
6350  28DA
6351  28DB
6352  28DC
6353  28DD
6354  28DE
6355  28DF
6356  28E0
6357  28E1
6358  28E2
6359  28E3
6360  28E4
6361  28E5
6362  28E6
6363  28E7
6364  28E8
6365  28E9
6366  28EA
6367  28EB
6368  28EC
6369  28ED
6370  28EE
6371  28EF
6372  28F0
6373  28F1
6374  28F2
6375  28F3
6376  28F4
6377  28F5
6378  28F6
6379  28F7
6380  28F8
6381  28F9
6382  28FA
6383  28FB
6384  28FC
6385  28FD
6386  28FE
6387  28FF
6388  2900
6389  2901
6390  2902
6391  2903
6392  2904
6393  2905
6394  2906
6395  2907
6396  2908
6397  2909
6398  290A
6399  290B
6400  290C
6401  290D
6402  290E
6403  290F
6404  2910
6405  2911
6406  2912
6407  2913
6408  2914
6409  2915
6410  2916
6411  2917
6412  2918
6413  2919
6414  291A
6415  291B
6416  291C
6417  291D
6418  291E
6419  291F
6420  2920
6421  2921
6422  2922
6423  2923
6424  2924
6425  2925
6426  2926
6427  2927
6428  2928
6429  2929
6430  292A
6431  292B
6432  292C
6433  292D
6434  292E
6435  292F
6436  2930
6437  2931
6438  2932
6439  2933
6440  2934
6441  2935
6442  2936
6443  2937
6444  2938
6445  2939
6446  293A
6447  293B
6448  293C
6449  293D
6450  293E
6451  293F
6452  2940
6453  2941
6454  2942
6455  2943
6456  2944
6457  2945
6458  2946
6459  2947
6460  2948
6461  2949
6462  294A
6463  294B
6464  294C
6465  294D
6466  294E
6467  294F
6468  2950
6469  2951
6470  2952
6471  2953
6472  2954
6473  2955
6474  2956
6475  2957
6476  2958
6477  2959
6478  295A
6479  295B
6480  295C
6481  295D
6482  295E
6483  295F
6484  2960
6485  2961
6486  2962
6487  2963
6488  2964
6489  2965
6490  2966
6491  2967
6492  2968
6493  2969
6494  296A
6495  296B
6496  296C
6497  296D
6498  296E
6499  296F
6500  2970
6501  2971
6502  2972
6503  2973
6504  2974
6505  2975
6506  2976
6507  2977
6508  2978
6509  2979
6510  297A
6511  297B
6512  297C
6513  297D
6514  297E
6515  297F
6516  2980
6517  2981
6518  2982
6519  2983
6520  2984
6521  2985
6522  2986
6523  2987
6524  2988
6525  2989
6526  298A
6527  298B
6528  298C
6529  298D
6530  298E
6531  298F
6532  2990
6533  2991
6534  2992
6535  2993
6536  2994
6537  2995
6538  2996
6539  2997
6540  2998
6541  2999
6542  299A
6543  299B
6544  299C
6545  299D
6546  299E
6547  299F
6548  29A0
6549  29A1
6550  29A2
6551  29A3
6552  29A4
6553  29A5
6554  29A6
6555  29A7
6556  29A8
6557  29A9
6558  29AA
6559  29AB
6560  29AC
6561  29AD
6562  29AE
6563  29AF
6564  29B0
6565  29B1
6566  29B2
6567  29B3
6568  29B4
6569  29B5
6570  29B6
6571  29B7
6572  29B8
6573  29B9
6574  29BA
6575  29BB
6576  29BC
6577  29BD
6578  29BE
6579  29BF
6580  29C0
6581  29C1
6582  29C2
6583  29C3
6584  29C4
6585  29C5
6586  29C6
6587  29C7
6588  29C8
6589  29C9
6590  29CA
6591  29CB
6592  29CC
6593  29CD
6594  29CE
6595  29CF
6596  29D0
6597  29D1
6598  29D2
6599  29D3
6600  29D4
6601  29D5
6602  29D6
6603  29D7
6604  29D8
6605  29D9
6606  29DA
6607  29DB
6608  29DC
6609  29DD
6610  29DE
6611  29DF
6612  29E0
6613  29E1
6614  29E2
6615  29E3
6616  29E4
6617  29E5
6618  29E6
6619  29E7
6620  29E8
6621  29E9
6622  29EA
6623  29EB
6624  29EC
6625  29ED
6626  29EE
6627  29EF
6628  29F0
6629  29F1
6630  29F2
6631  29F3
6632  29F4
6633  29F5
6634  29F6
6635  29F7
6636  29F8
6637  29F9
6638  29FA
6639  29FB
6640  29FC
6641  29FD
6642  29FE
6643  29FF
6644  2A00
6645  2A01
6646  2A02
6647  2A03
6648  2A04
6649  2A05
6650  2A06
6651  2A07
6652  2A08
6653  2A09
6654  2A0A
6655  2A0B
6656  2A0C
6657  2A0D
6658  2A0E
6659  2A0F
6660  2A10
6661  2A11
6662  2A12
6663  2A13
6664  2A14
6665  2A15
6666  2A16
6667  2A17
6668  2A18
6669  2A19
6670  2A1A
6671  2A1B
6672  2A1C
6673  2A1D
6674  2A1E
6675  2A1F
6676  2A20
6677  2A21
6678  2A22
6679  2A23
6680  2A24
6681  2A25
6682  2A26
6683  2A27
6684  2A28
6685  2A29
6686  2A2A
6687  2A2B
6688  2A2C
6689  2A2D
6690  2A2E
6691  2A2F
6692  2A30
6693  2A31
6694  2A32
6695  2A33
6696  2A34
6697  2A35
6698  2A36
6699  2A37
6700  2A38
6701  2A39
6702  2A3A
6703  2A3B
6704  2A3C
6705  2A3D
6706  2A3E
6707  2A3F
6708  2A40
6709  2A41
6710  2A42
6711  2A43
6712  2A44
6713  2A45
6714  2A46
6715  2A47
6716  2A48
6717  2A49
6718  2A4A
6719  2A4B
6720  2A4C
6721  2A4D
6722  2A4E
6723  2A4F
6724  2A50
6725  2A51
6726  2A52
6727  2A53
6728  2A54
6729  2A55
6730  2A56
6731  2A57
6732  2A58
6733  2A59
6734  2A5A
6735  2A5B
6736  2A5C
6737  2A5D
6738  2A5E
6739  2A5F
6740  2A60
6741  2A61
6742  2A62
6743  2A63
6744  2A64
6745  2A65
6746  2A66
6747  2A67
6748  2A68
6749  2A69
6750  2A6A
6751  2A6B
6752  2A6C
6753  2A6D
6754  2A6E
6755  2A6F
6756  2A70
6757  2A71
6758  2A72
6759  2A73
6760  2A74
6761  2A75
6762  2A76
6763  2A77
6764  2A78
6765  2A79
6766  2A7A
6767  2A7B
6768  2A7C
6769  2A7D
6770  2A7E
6771  2A7F
6772  2A80
6773  2A81
6774  2A82
6775  2A83
6776  2A84
6777  2A85
6778  2A86
6779  2A87
6780  2A88
6781  2A89
6782  2A8A
6783  2A8B
6784  2A8C
6785  2A8D
6786  2A8E
6787  2A8F
6788  2A90
6789  2A91
6790  2A92
6791  2A93
6792  2A94
6793  2A95
6794  2A96
6795  2A97
6796  2A98
6797  2A99
6798  2A9A
6799  2A9B
6800  2A9C
6801  2A9D
6802  2A9E
6803  2A9F
6804  2AA0
6805  2AA1
6806  2AA2
6807  2AA3
6808  2AA4
6809  2AA5
6810  2AA6
6811  2AA7
6812  2AA8
6813  2AA9
6814  2AAA
6815  2AAB
6816  2AAC
6817  2AAD
6818  2AAE
6819  2AAF
6820  2AB0
6821  2AB1
6822  2AB2
6823  2AB3
6824  2AB4
6825  2AB5
6826  2AB6
6827  2AB7
6828  2AB8
6829  2AB9
6830  2ABA
6831  2ABB
6832  2ABC
6833  2ABD
6834  2ABE
6835  2ABF
6836  2AC0
6837  2AC1
6838  2AC2
6839  2AC3
6840  2AC4
6841  2AC5
6842  2AC6
6843  2AC7
6844  2AC8
6845  2AC9
6846  2ACA
6847  2ACB
6848  2ACC
6849  2ACD
6850  2ACE
6851  2ACF
6852  2AD0
6853  2AD1
6854  2AD2
6855  2AD3
6856  2AD4
6857  2AD5
6858  2AD6
6859  2AD7
6860  2AD8
6861  2AD9
6862  2ADA
6863  2ADB
6864  2ADC
6865  2ADD
6866  2ADE
6867  2ADF
6868  2AE0
6869  2AE1
6870  2AE2
6871  2AE3
6872  2AE4
6873  2AE5
6874  2AE6
6875  2AE7
6876  2AE8
6877  2AE9
6878  2AEA
6879  2AEB
6880  2AEC
6881  2AED
6882  2AEE
6883  2AEF
6884  2AF0
6885  2AF1
6886  2AF2
6887  2AF3
6888  2AF4
6889  2AF5
6890  2AF6
6891  2AF7
6892  2AF8
6893  2AF9
6894  2AFA
6895  2AFB
6896  2AFC
6897  2AFD
6898  2AFE
6899  2AFF
6900  2B00
6901  2B01
6902  2B02
6903  2B03
6904  2B04
6905  2B05
6906  2B06
6907  2B07
6908  2B08
6909  2B09
6910  2B0A
6911  2B0B
6912  2B0C
6913  2B0D
6914  2B0E
6915  2B0F
6916  2B10
6917  2B11
6918  2B12
6919  2B13
6920  2B14
6921  2B15
6922  2B16
6923  2B17
6924  2B18
6925  2B19
6926  2B1A
6927  2B1B
6928  2B1C
6929  2B1D
6930  2B1E
6931  2B1F
6932  2B20
6933  2B21
6934  2B22
6935  2B23
6936  2B24
6937  2B25
6938  2B26
6939  2B27
6940  2B28
6941  2B29
6942  2B2A
6943  2B2B
6944  2B2C
6945  2B2D
6946  2B2E
6947  2B2F
6948  2B30
6949  2B31
6950  2B32
6951  2B33
6952  2B34
6953  2B35
6954  2B36
6955  2B37
6956  2B38
6957  2B39
6958  2B3A
6959  2B3B
6960  2B3C
6961  2B3D
6962  2B3E
6963  2B3F
6964  2B40
6965  2B41
6966  2B42
6967  2B43
6968  2B44
6969  2B45
6970  2B46
6971  2B47
6972  2B48
6973  2B49
6974  2B4A
6975  2B4B
6976  2B4C
6977  2B4D
6978  2B4E
6979  2B4F
6980  2B50
6981  2B51
6982  2B52
6983  2B53
6984  2B54
6985  2B55
6986  2B56
6987  2B57
6988  2B58
6989  2B59
6990  2B5A
6991  2B5B
6992  2B5C
6993  2B5D
6994  2B5E
6995  2B5F
6996  2B60
6997  2B61
6998  2B62
6999  2B63
7000  2B64
7001  2B65
7002  2B66
7003  2B67
7004  2B68
7005  2B69
7006  2B6A
7007  2B6B
7008  2B6C
7009  2B6D
7010  2B6E
7011  2B6F
7012  2B70
7013  2B71
7014  2B72
7015  2B73
7016  2B74
7017  2B75
7018  2B76
7019  2B77
7020  2B78
7021  2B79
7022  2B7A
7023  2B7B
7024  2B7C
7025  2B7D
7026  2B7E
7027  2B7F
7028  2B80
7029  2B81
7030  2B82
7031  2B83
7032  2B84
7033  2B85
7034  2B86
7035  2B87
7036  2B88
7037  2B89
7038  2B8A
7039  2B8B
7040  2B8C
7041  2B8D
7042  2B8E
7043  2B8F
7044  2B90
7045  2B91
7046  2B92
7047  2B93
7048  2B94
7049  2B95
7050  2B96
7051  2B97
7052  2B98
7053  2B99
7054  2B9A
7055  2B9B
7056  2B9C
7057  2B9D
7058  2B9E
7059  2B9F
7060  2BA0
7061  2BA1
7062  2BA2
7063  2BA3
7064  2BA4
7065  2BA5
7066  2BA6
7067  2BA7
7068  2BA8
7069  2BA9
7070  2BAA
7071  2BAB
7072  2BAC
7073  2BAD
7074  2BAE
7075  2BAF
7076  2BB0
7077  2BB1
7078  2BB2
7079  2BB3
7080  2BB4
7081  2BB5
7082  2BB6
7083  2BB7
7084  2BB8
7085  2BB9
7086  2BBA
7087  2BBB
7088  2BBC
7089  2BBD
7090  2BBE
7091  2BBF
7092  2BC0
7093  2BC1
7094  2BC2
7095  2BC3
7096  2BC4
7097  2BC5
7098  2BC6
7099  2BC7
7100  2BC8
7101  2BC9
7102  2BCA
7103  2BCB
7104  2BCC
7105  2BCD
7106  2BCE
7107  2BCF
7108  2BD0
7109  2BD1
7110  2BD2
7111  2BD3
7112  2BD4
7113  2BD5
7114  2BD6
7115  2BD7
7116  2BD8
7117  2BD9
7118  2BDA
7119  2BDB
7120  2BDC
7121  2BDD
7122  2BDE
7123  2BDF
7124  2BE0
7125  2BE1
7126  2BE2
7127  2BE3
7128  2BE4
7129  2BE5
7130  2BE6
7131  2BE7
7132  2BE8
7133  2BE9
7134  2BEA
7135  2BEB
7136  2BEC
7137  2BED
7138  2BEE
7139  2BEF
7140  2BF0
7141  2BF1
7142  2BF2
7143  2BF3
7144  2BF4
7145  2BF5
7146  2BF6
7147  2BF7
7148  2BF8
7149  2BF9
7150  2BFA
7151  2BFB
7152  2BFC
7153  2BFD
7154  2BFE
7155  2BFF
7156  2C00
7157  2C01
7158  2C02
7159  2C03
7160  2C04
7161  2C05
7162  2C06
7163  2C07
7164  2C08
7165  2C09
7166  2C0A
7167  2C0B
7168  2C0C
7169  2C0D
7170  2C0E
7171  2C0F
7172  2C10
7173  2C11
7174  2C12
7175  2C13
7176  2C14
7177  2C15
7178  2C16
7179  2C17
7180  2C18
7181  2C19
7182  2C1A
7183  2C1B
7184  2C1C
7185  2C1D
7186  2C1E
7187  2C1F
7188  2C20
7189  2C21
7190  2C22
7191  2C23
7192  2C24
7193  2C25
7194  2C26
7195  2C27
7196  2C28
7197  2C29
7198  2C2A
7199  2C2B
7200  2C2C
7201  2C2D
7202  2C2E
7203  2C2F
7204  2C30
7205  2C31
7206  2C32
7207  2C33
7208  2C34
7209  2C35
7210  2C36
7211  2C37
7212  2C38
7213  2C39
7214  2C3A
7215  2C3B
7216  2C3C
7217  2C3D
7218  2C3E
7219  2C3F
7220  2C40
7221  2C41
7222  2C42
7223  2C43
7224  2C44
7225  2C45
7226  2C46
7227  2C47
7228  2C48
7229  2C49
7230  2C4A
7231  2C4B
7232  2C4C
7233  2C4D
7234  2C4E
7235  2C4F
7236  2C50
7237  2C51
7238  2C52
7239  2C53
7240  2C54
7241  2C55
7242  2C56
7243  2C57
7244  2C58
7245  2C59
7246  2C5A
7247  2C5B
7248  2C5C
7249  2C5D
7250  2C5E
7251  2C5F
7252  2C60
7253  2C61
7254  2C62
7255  2C63
7256  2C64
7257  2C65
7258  2C66
7259  2C67
7260  2C68
7261  2C69
7262  2C6A
7263  2C6B
7264  2C6C
7265  2C6D
7266  2C6E
7267  2C6F
7268  2C70
7269  2C71
7270  2C72
7271  2C73
7272  2C74
7273  2C75
7274  2C76
7275  2C77
7276  2C78
7277  2C79
7278  2C7A
7279  2C7B
7280  2C7C
7281  2C7D
7282  2C7E
7283  2C7F
7284  2C80
7285  2C81
7286  2C82
7287  2C83
7288  2C84
7289  2C85
7290  2C86
7291  2C87
7292  2C88
7293  2C89
7294  2C8A
7295  2C8B
7296  2C8C
7297  2C8D
7298  2C8E
7299  2C8F
7300  2C90
7301  2C91
7302  2C92
7303  2C93
7304  2C94
7305  2C95
7306  2C96
7307  2C97
7308  2C98
7309  2C99
7310  2C9A
7311  2C9B
7312  2C9C
7313  2C9D
7314  2C9E
7315  2C9F
7316  2CA0
7317  2CA1
7318  2CA2
7319  2CA3
7320  2CA4
7321  2CA5
7322  2CA6
7323  2CA7
7324  2CA8
7325  2CA9
7326  2CAA
7327  2CAB
7328  2CAC
7329  2CAD
7330  2CAE
7331  2CAF
7332  2CB0
7333  2CB1
7334  2CB2
7335  2CB3
7336  2CB4
7337  2CB5
7338  2CB6
7339  2CB7
7340  2CB8
7341  2CB9
7342  2CBA
7343  2CBB
7344  2CBC
7345  2CBD
7346  2CBE
7347  2CBF
7348  2CC0
7349  2CC1
7350  2CC2
7351  2CC3
7352  2CC4
7353  2CC5
7354  2CC6
7355  2CC7
7356  2CC8
7357  2CC9
7358  2CCA
7359  2CCB
7360  2CCC
7361  2CCD
7362  2CCE
7363  2CCF
7364  2CD0
7365  2CD1
7366  2CD2
7367  2CD3
7368  2CD4
7369  2CD5
7370  2CD6
7371  2CD7
7372  2CD8
7373  2CD9
7374  2CDA
7375  2CDB
7376  2CDC
7377  2CDD
7378  2CDE
7379  2CDF
7380  2CE0
7381  2CE1
7382  2CE2
7383  2CE3
7384  2CE4
7385  2CE5
7386  2CE6
7387  2CE7
7388  2CE8
7389  2CE9
7390  2CEA
7391  2CEB
7392  2CEC
7393  2CED
7394  2CEE
7395  2CEF
7396  2CF0
7397  2CF1
7398  2CF2
7399  2CF3
7400  2CF4
7401  2CF5
7402  2CF6
7403  2CF7
7404  2CF8
7405  2CF9
7406  2CFA
7407  2CFB
7408  2CFC
7409  2CFD
7410  2CFE
7411  2CFF
7412  2D00
7413  2D01
7414  2D02
7415  2D03
7416  2D04
7417  2D05
7418  2D06
7419  2D07
7420  2D08
7421  2D09
7422  2D0A
7423  2D0B
7424  2D0C
7425  2D0D
7426  2D0E
7427  2D0F
7428  2D10
7429  2D11
7430  2D12
7431  2D13
7432  2D14
7433  2D15
7434  2D16
7435  2D17
7436  2D18
7437  2D19
7438  2D1A
7439  2D1B
7440  2D1C
7441  2D1D
7442  2D1E
7443  2D1F
7444  2D20
7445  2D21
7446  2D22
7447  2D23
7448  2D24
7449  2D25
7450  2D26
7451  2D27
7452  2D28
7453  2D29
7454  2D2A
7455  2D2B
7456  2D2C
7457  2D2D
7458  2D2E
7459  2D2F
7460  2D30
7461  2D31
7462  2D32
7463  2D33
7464  2D34
7465  2D35
7466  2D36
7467  2D37
7468  2D38
7469  2D39
7470  2D3A
7471  2D3B
7472  2D3C
7473  2D3D
7474  2D3E
7475  2D3F
7476  2D40
7477  2D41
7478  2D42
7479  2D43
7480  2D44
7481  2D45
7482  2D46
7483  2D47
7484  2D48
7485  2D49
7486  2D4A
7487  2D4B
7488  2D4C
7489  2D4D
7490  2D4E
7491  2D4F
7492  2D50
7493  2D51
7494  2D52
7495  2D53
7496  2D54
7497  2D55
7498  2D56
7499  2D57
7500  2D58
7501  2D59
7502  2D5A
7503  2D5B
7504  2D5C
7505  2D5D
7506  2D5E
7507  2D5F
7508  2D60
7509  2D61
7510  2D62
7511  2D63
7512  2D64
7513  2D65
7514  2D66
7515  2D67
7516  2D68
7517  2D69
7518  2D6A
7519  2D6B
7520  2D6C
7521  2D6D
7522  2D6E
7523  2D6F
7524  2D70
7525  2D71
7526  2D72
7527  2D73
7528  2D74
7529  2D75
7530  2D76
7531  2D77
7532  2D78
7533  2D79
7534  2D7A
7535  2D7B
7536  2D7C
7537  2D7D
7538  2D7E
7539  2D7F
7540  2D80
7541  2D81
7542  2D82
7543  2D83
7544  2D84
7545  2D85
7546  2D86
7547  2D87
7548  2D88
7549  2D89
7550  2D8A
7551  2D8B
7552  2D8C
7553  2D8D
7554  2D8E
7555  2D8F
7556  2D90
7557  2D91
7558  2D92
7559  2D93
7560  2D94
7561  2D95
7562  2D96
7563  2D97
7564  2D98
7565  2D99
7566  2D9A
7567  2D9B
7568  2D9C
7569  2D9D
7570  2D9E
7571  2D9F
7572  2DA0
7573  2DA1
7574  2DA2
7575  2DA3
7576  2DA4
7577  2DA5
7578  2DA6
7579  2DA7
7580  2DA8
7581  2DA9
7582  2DAA
7583  2DAB
7584  2DAC
7585  2DAD
7586  2DAE
7587  2DAF
7588  2DB0
7589  2DB1
7590  2DB2
7591  2DB3
7592  2DB4
7593  2DB5
7594  2DB6
7595  2DB7
7596  2DB8
7597  2DB9
7598  2DBA
7599  2DBB
7600  2DBC
7601  2DBD
7602  2DBE
7603  2DBF
7604  2DC0
7605  2DC1
7606  2DC2
7607  2DC3
7608  2DC4
7609  2DC5
7610  2DC6
7611  2DC7
7612  2DC8
7613  2DC9
7614  2DCA
7615  2DCB
7616  2DCC
7617  2DCD
7618  2DCE
7619  2DCF
7620  2DD0
7621  2DD1
7622  2DD2
7623  2DD3
7624  2DD4
7625  2DD5
7626  2DD6
7627  2DD7
7628  2DD8
7629  2DD9
7630  2DDA
7631  2DDB
7632  2DDC
7633  2DDD
7634  2DDE
7635  2DDF
7636  2DE0
7637  2DE1
7638  2DE2
7639  2DE3
7640  2DE4
7641  2DE5
7642  2DE6
7643  2DE7
7644  2DE8
7645  2DE9
7646  2DEA
7647  2DEB
7648  2DEC
7649  2DED
7650  2DEE
7651  2DEF
7652  2DF0
7653  2DF1
7654  2DF2
7655  2DF3
7656  2DF4
7657  2DF5
7658  2DF6
7659  2DF7
7660  2DF8
7661  2DF9
7662  2DFA
7663  2DFB
7664  2DFC
7665  2DFD
7666  2DFE
7667  2DFF
7668  2E00
7669  2E01
7670  2E02
7671  2E03
7672  2E04
7673  2E05
7674  2E06
7675  2E07
7676  2E08
7677  2E09
7678  2E0A
7679  2E0B
7680  2E0C
7681  2E0D
7682  2E0E
7683  2E0F
7684  2E10
7685  2E11
7686  2E12
7687  2E13
7688  2E14
7689  2E15
7690  2E16
7691  2E17
7692  2E18
7693  2E19
7694  2E1A
7695  2E1B
7696  2E1C
7697  2E1D
7698  2E1E
7699  2E1F
7700  2E20
7701  2E21
7702  2E22
7703  2E23
7704  2E24
7705  2E25
7706  2E26
7707  2E27
7708  2E28
7709  2E29
7710  2E2A
7711  2E2B
7712  2E2C
7713  2E2D
7714  2E2E
7715  2E2F
7716  2E30
7717  2E31
7718  2E32
7719  2E33
7720  2E34
7721  2E35
7722  2E36
7723  2E37
7724  2E38
7725  2E39
7726  2E3A
7727  2E3B
7728  2E3C
7729  2E3D
7730  2E3E
7731  2E3F
7732  2E40
7733  2E41
7734  2E42
7735  2E43
7736  2E44
7737  2E45
7738  2E46
7739  2E47
7740  2E48
7741  2E49
7742  2E4A
7743  2E4B
7744  2E4C
7745  2E4D
7746  2E4E
7747  2E4F
7748  2E50
7749  2E51
7750  2E52
7751  2E53
7752  2E54
7753  2E55
7754  2E56
7755  2E57
7756  2E58
7757  2E59
7758  2E5A
7759  2E5B
7760  2E5C
7761  2E5D
7762  2E5E
7763  2E5F
7764  2E60
7765  2E61
7766  2E62
7767  2E63
7768  2E64
7769  2E65
7770  2E66
7771  2E67
7772  2E68
7773  2E69
7774  2E6A
7775  2E6B
7776  2E6C
7777  2E6D
7778  2E6E
7779  2E6F
7780  2E70
7781  2E71
7782  2E72
7783  2E73
7784  2E74
7785  2E75
7786  2E76
7787  2E77
7788  2E78
7789  2E79
7790  2E7A
7791  2E7B
7792  2E7C
7793  2E7D
7794  2E7E
7795  2E7F
7796  2E80
7797  2E81
7798  2E82
7799  2E83
7800  2E84
7801  2E85
7802  2E86
7803  2E87
7804  2E88
7805  2E89
7806  2E8A
7807  2E8B
7808  2E8C
7809  2E8D
7810  2E8E
7811  2E8F
7812  2E90
7813  2E91
7814  2E92
7815  2E93
7816  2E94
7817  2E95
7818  2E96
7819  2E97
7820  2E98
7821  2E99
7822  2E9A
7823  2E9B
7824  2E9C
7825  2E9D
7826  2E9E
7827  2E9F
7828  2EA0
7829  2EA1
7830  2EA2
7831  2EA3
7832  2EA4
7833  2EA5
7834  2EA6
7835  2EA7
7836  2EA8
7837  2EA9
7838  2EAA
7839  2EAB
7840  2EAC
7841  2EAD
7842  2EAE
7843  2EAF
7844  2EB0
7845  2EB1
7846  2EB2
7847  2EB3
7848  2EB4
7849  2EB5
7850  2EB6
7851  2EB7
7852  2EB8
7853  2EB9
7854  2EBA
7855  2EBB
7856  2EBC
7857  2EBD
7858  2EBE
7859  2EBF
7860  2EC0
7861  2EC1
7862  2EC2
7863  2EC3
7864  2EC4
7865  2EC5
7866  2EC6
7867  2EC7
7868  2EC8
7869  2EC9
7870  2ECA
7871  2ECB
7872  2ECC
7873  2ECD
7874  2ECE
7875  2ECF
7876  2ED0
7877  2ED1
7878  2ED2
7879  2ED3
7880  2ED4
7881  2ED5
7882  2ED6
7883  2ED7
7884  2ED8
7885  2ED9
7886  2EDA
7887  2EDB
7888  2EDC
7889  2EDD
7890  2EDE
7891  2EDF
7892  2EE0
7893  2EE1
7894  2EE2
7895  2EE3
7896  2EE4
7897  2EE5
7898  2EE6
7899  2EE7
7900  2EE8
7901  2EE9
7902  2EEA
7903  2EEB
7904  2EEC
7905  2EED
7906  2EEE
7907  2EEF
7908  2EF0
7909  2EF1
7910  2EF2
7911  2EF3
7912  2EF4
7913  2EF5
7914  2EF6
7915  2EF7
7916  2EF8
7917  2EF9
7918  2EFA
7919  2EFB
7920  2EFC
7921  2EFD
7922  2EFE
7923  2EFF
7924  2F00
7925  2F01
7926  2F02
7927  2F03
7928  2F04
7929  2F05
7930  2F06
7931  2F07
7932  2F08
7933  2F09
7934  2F0A
7935  2F0B
7936  2F0C
7937  2F0D
7938  2F0E
7939  2F0F
7940  2F10
7941  2F11
7942  2F12
7943  2F13
7944  2F14
7945  2F15
7946  2F16
7947  2F17
7948  2F18
7949  2F19
7950  2F1A
7951  2F1B
7952  2F1C
7953  2F1D
7954  2F1E
7955  2F1F
7956  2F20
7957  2F21
7958  2F22
7959  2F23
7960  2F24
7961  2F25
7962  2F26
7963  2F27
7964  2F28
7965  2F29
7966  2F2A
7967  2F2B
7968  2F2C
7969  2F2D
7970  2F2E
7971  2F2F
7972  2F30
7973  2F31
7974  2F32
7975  2F33
7976  2F34
7977  2F35
7978  2F36
7979  2F37
7980  2F38
7981  2F39
7982  2F3A
7983  2F3B
7984  2F3C
7985  2F3D
7986  2F3E
7987  2F3F
7988  2F40
7989  2F41
7990  2F42
7991  2F43
7992  2F44
7993  2F45
7994  2F46
7995  2F47
7996  2F48
7997  2F49
7998  2F4A
7999  2F4B
8000  2F4C
8001  2F4D
8002  2F4E
8003  2F4F
8004  2F50
8005  2F51
8006  2F52
8007  2F53
8008  2F54
8009  2F55
8010  2F56
8011  2F57
8012  2F58
8013  2F59
8014  2F5A
8015  2F5B
8016  2F5C
8017  2F5D
8018  2F5E
8019  2F5F
8020  2F60
8021  2F61
8022  2F62
8023  2F63
8024  2F64
8025  2F65
8026  2F66
8027  2F67
8028  2F68
8029  2F69
8030  2F6A
8031  2F6B
8032  2F6C
8033  2F6D
8034  2F6E
8035  2F6F
8036  2F70
8037  2F71
8038  2F72
8039  2F73
8040  2F74
8041  2F75
8042  2F76
8043  2F77
8044  2F78
8045  2F79
8046  2F7A
8047  2F7B
8048  2F7C
8049  2F7D
8050  2F7E
8051  2F7F
8052  2F80
8053  2F81
8054  2F82
8055  2F83
8056  2F84
8057  2F85
8058  2F86
8059  2F87
8060  2F88
8061  2F89
8062  2F8A
8063  2F8B
8064  2F8C
8065  2F8D
8066  2F8E
8067  2F8F
8068  2F90
8069  2F91
8070  2F92
8071  2F93
8072  2F94
8073  2F95
8074  2F96
8075  2F97
8076  2F98
8077  2F99
8078  2F9A
8079  2F9B
8080  2F9C
8081  2F9D
8082  2F9E
8083  2F9F
8084  2FA0
8085  2FA1
8086  2FA2
8087  2FA3
8088  2FA4
8089  2FA5
8090  2FA6
8091  2FA7
8092  2FA8
8093  2FA9
8094  2FAA
8095  2FAB
8096  2FAC
8097  2FAD
8098  2FAE
8099  2FAF
8100  2FB0
8101  2FB1
8102  2FB2
8103  2FB3
8104  2FB4
8105  2FB5
8106  2FB6
8107  2FB7
8108  2FB8
8109  2FB9
8110  2FBA
8111  2FBB
8112  2FBC
8113  2FBD
8114  2FBE
8115  2FBF
8116  2FC0
8117  2FC1
8118  2FC2
8119  2FC3
8120  2FC4
8121  2FC5
8122  2FC6
8123  2FC7
8124  2FC8
8125  2FC9
8126  2FCA
8127  2FCB
8128  2FCC
8129  2FCD
8130  2FCE
8131  2FCF
8132  2FD0
8133  2FD1
8134  2FD2
8135  2FD3
8136  2FD4
8137  2FD5
8138  2FD6
8139  2FD7
8140  2FD8
8141  2FD9
8142  2FDA
8143  2FDB
8144  2FDC
8145  2FDD
8146  2FDE
8147  2FDF
8148  2FE0
8149  2FE1
8150  2FE2
8151  2FE3
8152  2FE4
8153  2FE5
8154  2FE6
8155  2FE7
8156  2FE8
8157  2FE9
8158  2FEA
8159  2FEB
8160  2FEC
8161  2FED
8162  2FEE
8163  2FEF
8164  2FF0
8165  2FF1
8166  2FF2
8167  2FF3
8168  2FF4
8169  2FF5
8170  2FF6
8171  2FF7
8172  2FF8
8173  2FF9
8174  2FFA
8175  2FFB
8176  2FFC
8177  2FFD
8178  2FFE
8179  2FFF
8180  3000
8181  3001
8182  3002
8183  3003
8184  3004
8185  3005
8186  3006
8187  3007
8188  3008
8189  3009
8190  300A
8191  300B
8192  300C
8193  300D
8194  300E
8195  300F
8196  3010
8197  3011
8198  3012
8199  3013
8200  3014
8201  3015
8202  3016
8203  3017
8204  3018
8205  3019
8206  301A
8207  301B
8208  301C
8209  301D
8210  301E
8211  301F
8212  3020
8213  3021
8214  3022
8215  3023
8216  3024
8217  3025
8218  3026
8219  3027
8220  3028
8221  3029
8222  302A
8223  302B
8224  302C
8225  302D
8226  302E
8227  302F
8228  3030
8229  3031
8230  3032
8231  3033
8232  3034
8233  3035
8234  3036
8235  3037
8236  3038
8237  3039
8238  303A
8239  303B
8240  303C
8241  303D
8242  303E
8243  303F
8244  3040
8245  3041
8246  3042
8247  3043
8248  3044
8249  3045
8250  3046
8251  3047
8252  3048
8253  3049
8254  304A
8255  304B
8256  304C
8257  304D
8258  304E
8259  304F
8260  3050
8261  3051
8262  3052
8263  3053
8264  3054
8265  3055
8266  3056
8267  3057
8268  3058
8269  3059
8270  305A
8271  305B
8272  305C
8273  305D
8274  305E
8275  305F
8276  3060
8277  3061
8278  3062
8279  3063
8280  3064
8281  3065
8282  3066
8283  3067
8284  3068
8285  3069
8286  306A
8287  306B
8288  306C
8289  306D
8290  306E
8291  306F
8292  3070
8293  3071
8294  3072
8295  3073
8296  3074
8297  3075
8298  3076
8299  3077
8300  3078
8301  3079
8302  307A
8303  307B
8304  307C
8305  307D
8306  307E
8307  307F
8308  3080
8309  3081
8310  3082
8311  3083
8312  3084
8313  3085
8314  3086
8315  3087
8316  3088
8317  3089
8318  308A
8319  308B
8320  308C
8321  308D
8322  308E
8323  308F
8324  3090
8325  3091
8326  3092
8327  3093
8328  3094
8329  3095
8330  3096
8331  3097
8332  3098
8333  3099
8334  309A
8335  309B
8336  309C
8337  309D
8338  309E
8339  309F
8340  30A0
8341  30A1
8342  30A2
8343  30A3
8344  30A4
8345  30A5
8346  30A6
8347  30A7
8348  30A8
8349  30A9
8350  30AA
8351  30AB
8352  30AC
8353  30AD
8354  30AE
8355  30AF
8356  30B0
8357  30B1
8358  30B2
8359  30B3
8360  30B4
8361  30B5
8362  30B6
8363  30B7
8364  30B8
8365  30B9
8366  30BA
8367  30BB
8368  30BC
8369  30BD
8370  30BE
8371  30BF
8372  30C0
8373  30C1
8374  30C2
8375  30C3
8376  30C4
8377  30C5
8378  30C6
8379  30C7
8380  30C8
8381  30C9
8382  30CA
8383  30CB
8384  30CC
8385  30CD
8386  30CE
8387  30CF
8388  30D0
8389  30D1
8390  30D2
8391  30D3
8392  30D4
8393  30D5
8394  30D6
8395  30D7
8396  30D8
8397  30D9
8398  30DA
8399  30DB
8400  30DC
8401  30DD
8402  30DE
8403  30DF
8404  30E0
8405  30E1
8406  30E2
8407  30E3
8408  30E4
8409  30E5
8410  30E6
8411  30E7
8412  30E8
8413  30E9
8414  30EA
8415  30EB
8416  30EC
8417  30ED
8418  30EE
8419  30EF
8420  30F0
8421  30F1
8422  30F2
8423  30F3
8424  30F4
8425  30F5
8426  30F6
8427  30F7
8428  30F8
8429  30F9
8430  30FA
8431  30FB
8432  30FC
8433  30FD
8434  30FE
8435  30FF
8436  3100
8437  3101
8438  3102
8439  3103
8440  3104
8441  3105
8442  3106
8443  3107
8444  3108
8445  3109
8446  310A
8447  310B
8448  310C
8449  310D
8450  310E
8451  310F
8452  3110
8453  3111
8454  3112
8455  3113
8456  3114
8457  3115
8458  3116
8459  3117
8460  3118
8461  3119
8462  311A
8463  311B
8464  311C
8465  311D
8466  311E
8467  311F
8468  3120
8469  3121
8470  3122
8471  3123
8472  3124
8473  3125
8474  3126
8475  3127
8476  3128
8477  3129
8478  312A
8479  312B
8480  312C
8481  312D
8482  312E
8483  312F
8484  3130
8485  3131
8486  3132
8487  3133
8488  3134
8489  3135
8490  3136
8491  3137
8492  3138
8493  3139
8494  313A
8495  313B
8496  313C
8497  313D
8498  313E
8499  313F
8500  3140
8501  3141
8502  3142
8503  3143
8504  3144
8505  3145
8506  3146
8507  3147
8508  3148
8509  3149
8510  314A
8511  314B
8512  314C
8513  314D
8514  314E
8515  314F
8516  3150
8517  3151
8518  3152
8519  3153
8520  3154
8521  3155
8522  3156
8523  3157
8524  3158
8525  3159
8526  315A
8527  315B
8528  315C
8529  315D
8530  315E
8531  315F
8532  3160
8533  3161
8534  3162
8535  3163
8536  3164
8537  3165
8538  3166
8539  3167
8540  3168
8541  3169
8542  316A
8543  316B
8544  316C
8545  316D
8546  316E
8547  316F
8548  3170
8549  3171
8550  3172
8551  3173
8552  3174
8553  3175
8554  3176
8555  3177
8556  3178
8557  3179
8558  317A
8559  317B
8560  317C
8561  317D
8562  317E
8563  317F
8564  3180
8565  3181
8566  3182
8567  3183
8568  3184
8569  3185
8570  3186
8571  3187
8572  3188
8573  3189
8574  318A
8575  318B
8576  318C
8577  318D
8578  318E
8579  318F
8580  3190
8581  3191
8582  3192
8583  3193
8584  3194
8585  3195
8586  3196
8587  3197
8588  3198
8589  3199
8590  319A
8591  319B
8592  319C
8593  319D
8594  319E
8595  319F
8596  31A0
8597  31A1
8598  31A2
8599  31A3
8600  31A4
8601  31A5
8602  31A6
8603  31A7
8604  31A8
8605  31A9
8606  31AA
8607  31AB
8608  31AC
8609  31AD
8610  31AE
8611  31AF
8612  31B0
8613  31B1
8614  31B2
8615  31B3
8616  31B4
8617  31B5
8618  31B6
8619  31B7
8620  31B8
8621  31B9
8622  31BA
8623  31BB
8624  31BC
8625  31BD
8626  31BE
8627  31BF
8628  31C0
8629  31C1
8630  31C2
8631  31C3
8632  31C4
8633  31C5
8634  31C6
8635  31C7
8636  31C8
8637  31C9
8638  31CA
8639  31CB
8640  31CC
8641  31CD
8642  31CE
8643  31CF
8644  31D0
8645  31D1
8646  31D2
8647  31D3
8648  31D4
8649  31D5
8650  31D6
8651  31D7
8652  31D8
8653  31D9
8654  31DA
8655  31DB
8656  31DC
8657  31DD
8658  31DE
8659  31DF
8660  31E0
8661  31E1
8662  31E2
8663  31E3
8664  31E4
8665  31E5
8666  31E6
8667  31E7
8668  31E8
8669  31E9
8670  31EA
8671  31EB
8672  31EC
8673  31ED
8674  31EE
8675  31EF
8676  31F0
8677  31F1
8678  31F2
8679  31F3
8680  31F4
8681  31F5
8682  31F6
8683  31F7
8684  31F8
8685  31F9
8686  31FA
8687  31FB
8688  31FC
8689  31FD
8690  31FE
8691  31FF
8692  3200
8693  3201
8694  3202
8695  3203
8696  3204
8697  3205
8698  3206
8699  3207
8700  3208
8701  3209
8702  320A
8703  320B
8704  320C
8705  320D
8706  320E
8707  320F
8708  3210
8709  3211
8710  3212
8711  3213
8712  3214
8713  3215
8714  3216
8715  3217
8716  3218
8717  3219
8718  321A
8719  321B
8720  321C
8721  321D
8722  321E
8723  321F
8724  3220
8725  3221
8726  3222
8727  3223
8728  3224
8729  3225
8730  3226
8731  3227
8732  3228
8733  3229
8734  322A
8735  322B
8736  322C
8737  322D
8738  322E
8739  322F
8740  3230
8741  3231
8742  3232
8743  3233
8744  3234
8745  3235
8746  3236
8747  3237
8748  3238
8749  3239
8750  323A
8751  323B
8752  323C
8753  323D
8754  323E
8755  323F
8756  3240
8757  3241
8758  3242
8759  3243
8760  3244
8761  3245
8762  3246
8763  3247
8764  3248
8765  3249
8766  324A
8767  324B
8768  324C
8769  324D
8770  324E
8771  324F
8772  3250
8773  3251
8774  3252
8775  3253
8776  3254
8777  3255
8778  3256
8779  3257
8780  3258
8781  3259
8782  325A
8783  325B
8784  325C
8785  325D
8786  325E
8787  325F
8788  3260
8789  3261
8790  3262
8791  3263
8792  3264
8793  3265
8794  3266
8795  3267
8796  3268
8797  3269
8798  326A
8799  326B
8800  326C
8801  326D
8802  326E
8803  326F
8804  3270
8805  3271
8806  3272
8807  3273
8808  3274
8809  3275
8810  3276
8811  3277
8812  3278
8813  3279
8814  327A
8815  327B
8816  327C
8817  327D
8818  327E
8819  327F
8820  3280
8821  3281
8822  3282
8823  3283
8824  3284
8825  3285
8826  3286
8827  3287
8828  3288
8829  3289
8830  328A
8831  328B
8832  328C
8833  328D
8834  328E
8835  328F
8836  3290
8837  3291
8838  3292
8839  3293
8840  3294
8841  3295
8842  3296
8843  3297
8844  3298
8845  3299
8846  329A
8847  329B
8848  329C
8849  329D
8850  329E
8851  329F
8852  32A0
8853  32A1
8854  32A2
8855  32A3
8856  32A4
8857  32A5
8858  32A6
8859  32A7
8860  32A8
8861  32A9
8862  32AA
8863  32AB
8864  32AC
8865  32AD
8866  32AE
8867  32AF
8868  32B0
8869  32B1
8870  32B2
8871  32B3
8872  32B4
8873  32B5
8874  32B6
8875  32B7
8876  32B8
8877  32B9
8878  32BA
8879  32BB
8880  32BC
8881  32BD
8882  32BE
8883  32BF
8884  32C0
8885  32C1
8886  32C2
8887  32C3
8888  32C4
8889  32C5
8890  32C6
8891  32C7
8892  32C8
8893  32C9
8894  32CA
8895  32CB
8896  32CC
8897  32CD
8898  32CE
8899  32CF
8900  32D0
8901  32D1
8902  32D2
8903  32D3
8904  32D4
8905  32D5
8906  32D6
8907  32D7
8908  32D8
8909  32D9
8910  32DA
8911  32DB
8912  32DC
8913  32DD
8914  32DE
8915  32DF
8916  32E0
8917  32E1
8918  32E2
8919  32E3
8920  32E4
8921  32E5
8922  32E6
8923  32E7
8924  32E8
8925  32E9
8926  32EA
8927  32EB
8928  32EC
8929  32ED
8930  32EE
8931  32EF
8932  32F0
8933  32F1
8934  32F2
8935  32F3
8936  32F4
8937  32F5
8938  32F6
8939  32F7
8940  32F8
8941  32F9
8942  32FA
8943  32FB
8944  32FC
8945  32FD
8946  32FE
8947  32FF
8948  3300
8949  3301
8950  3302
8951  3303
8952  3304
8953  3305
8954  3306
8955  3307
8956  3308
8957  3309
8958  330A
8959  330B
8960  330C
8961  330D
8962  330E
8963  330F
8964  3310
8965  3311
8966  3312
8967  3313
8968  3314
8969  3315
8970  3316
8971  3317
8972  3318
8973  3319
8974  331A
8975  331B
8976  331C
8977  331D
8978  331E
8979  331F
8980  3320
8981  3321
8982  3322
8983  3323
8984  3324
8985  3325
8986  3326
8987  3327
8988  3328
8989  3329
8990  332A
8991  332B
8992  332C
8993  332D
8994  332E
8995  332F
8996  3330
8997  3331
8998  3332
8999  3333
9000  3334
9001  3335
9002  3336
9003  3337
9004  3338
9005  3339
9006  333A
9007  333B
9008  333C
9009  333D
9010  333E
9011  333F
9012  3340
9013  3341
9014  3342
9015  3343
9016  3344
9017  3345
9018  3346
9019  3347
9020  3348
9021  3349
9022  334A
9023  334B
9024  334C
9025  334D
9026  334E
9027  334F
9028  3350
9029  3351
9030  3352
9031  3353
9032  3354
9033  3355
9034  3356
9035  3357
9036  3358
9037  3359
9038  335A
9039  335B
9040  335C
9041  335D
9042  335E
9043  335F
9044  3360
9045  3361
9046  3362
9047  3363
9048  3364
9049  3365
9050  3366
9051  3367
9052  3368
9053  3369
9054  336A
9055  336B
9056  336C
9057  336D
9058  336E
9059  336F
9060  3370
9061  3371
9062  3372
9063  3373
9064  3374
9065  3375
9066  3376
9067  3377
9068  3378
9069  3379
9070  337A
9071  337B
9072  337C
9073  337D
9074  337E
9075  337F
9076  3380
9077  3381
9078  3382
9079  3383
9080  3384
9081  3385
9082  3386
9083  3387
9084  3388
9085  3389
9086  338A
9087  338B
9088  338C
9089  338D
9090  338E
9091  338F
9092  3390
9093  3391
9094  3392
9095  3393
9096  3394
9097  3395
9098  3396
9099  3397
9100  3398
9101  3399
9102  339A
9103  339B
9104  339C
9105  339D
9106  339E
9107  339F
9108  33A0
9109  33A1
9110  33A2
9111  33A3
9112  33A4
9113  33A5
9114  33A6
9115  33A7
9116  33A8
9117  33A9
9118  33AA
9119  33AB
9120  33AC
9121  33AD
9122  33AE
9123  33AF
9124  33B0
9125  33B1
9126  33B2
9127  33B3
9128  33B4
9129  33B5
9130  33B6
9131  33B7
9132  33B8
9133  33B9
9134  33BA
9135  33BB
9136  33BC
9137  33BD
9138  33BE
9139  33BF
9140  33C0
9141  33C1
9142  33C2
9143  33C3
9144  33C4
9145  33C5
9146  33C6
9147  33C7
9148  33C8
9149  33C9
9150  33CA
9151  33CB
9152  33CC
9153  33CD
9154  33CE
9155  33CF
9156  33D0
9157  33D1
9158  33D2
9159  33D3
9160  33D4
9161  33D5
9162  33D6
9163  33D7
9164  33D8
9165  33D9
9166  33DA
9167  33DB
9168  33DC
9169  33DD
9170  33DE
9171  33DF
9172  33E0
9173  33E1
9174  33E2
9175  33E3
9176  33E4
9177  33E5
9178  33E6
9179  33E7
9180  33E8
9181  33E9
9182  33EA
9183  33EB
9184  33EC
9185  33ED
9186  33EE
9187  33EF
9188  33F0
9189  33F1
9190  33F2
9191  33F3
9192  33F4
9193  33F5
9194  33F6
9195  33F7
9196  33F8
9197  33F9
9198  33FA
9199  33FB
9200  33FC
9201  33FD
9202  33FE
9203  33FF
9204  3400
9205  3401
9206  3402
9207  3403
9208  3404
9209  3405
9210  3406
9211  3407
9212  3408
9213  3409
9214  340A
9215  340B
9216  340C
9217  340D
9218  340E
9219  340F
9220  3410
9221  3411
9222  3412
9223  3413
9224  3414
9225  3415
9226  3416
9227  3417
9228  3418
9229  3419
9230  341A
9231  341B
9232  341C
9233  341D
9234  341E
9235  341F
9236  3420
9237  3421
9238  3422
9239  3423
9240  3424
9241  3425
9242  3426
9243  3427
9244  3428
9245  3429
9246  342A
9247  342B
9248  342C
9249  342D
9250  342E
9251  342F
9252  3430
9253  3431
9254  3432
9255  3433
9256  3434
9257  3435
9258  3436
9259  3437
9260  3438
9261  3439
9262  343A
9263  343B
9264  343C
9265  343D
9266  343E
9267  343F
9268  3440
9269  3441
9270  3442
9271  3443
9272  3444
9273  3445
9274  3446
9275  3447
9276  3448
9277  3449
9278  344A
9279  344B
9280  344C
9281  344D
9282  344E
9283  344F
9284  3450
9285  3451
9286  3452
9287  3453
9288  3454
9289  3455
9290  3456
9291  3457
9292  3458
9293  3459
9294  345A
9295  345B
9296  345C
9297  345D
9298  345E
9299  345F
9300  3460
9301  3461
9302  3462
9303  3463
9304  3464
9305  3465
9306  3466
9307  3467
9308  3468
9309  3469
9310  346A
9311  346B
9312  346C
9313  346D
9314  346E
9315  346F
9316  3470
9317  3471
9318  3472
9319  3473
9320  3474
9321  3475
9322  3476
9323  3477
9324  3478
9325  3479
9326  347A
9327  347B
9328  347C
9329  347D
9330  347E
9331  347F
9332  3480
9333  3481
9334  3482
9335  3483
9336  3484
9337  3485
9338  3486
9339  3487
9340  3488
9341  3489
9342  348A
9343  348B
9344  348C
9345  348D
9346  348E
9347  348F
9348  3490
9349  3491
9350  3492
9351  3493
9352  3494
9353  3495
9354  3496
9355  3497
9356  3498
9357  3499
9358  349A
9359  349B
9360  349C
9361  349D
9362  349E
9363  349F
9364  34A0
9365  34A1
9366  34A2
9367  34A3
9368  34A4
9369  34A5
9370  34A6
9371  34A7
9372  34A8
9373  34A9
9374  34AA
9375  34AB
9376  34AC
9377  34AD
9378  34AE
9379  34AF
9380  34B0
9381  34B1
9382  34B2
9383  34B3
9384  34B4
9385  34B5
9386  34B6
9387  34B7
9388  34B8
9389  34B9
9390  34BA
9391  34BB
9392  34BC
9393  34BD
9394  34BE
9395  34BF
9396  34C0
9397  34C1
9398  34C2
9399  34C3
9400  34C4
9401  34C5
9402  34C6
9403  34C7
9404  34C8
9405  34C9
9406  34CA
9407  34CB
9408  34CC
9409  34CD
9410  34CE
9411  34CF
9412  34D0
9413  34D1
9414  34D2
9415  34D3
9416  34D4
9417  34D5
9418  34D6
9419  34D7
9420  34D8
9421  34D9
9422  34DA
9423  34DB
9424  34DC
9425  34DD
9426  34DE
9427  34DF
9428  34E0
9429  34E1
9430  34E2
9431  34E3
9432  34E4
9433  34E5
9434  34E6
9435  34E7
9436  34E8
9437  34E9
9438  34EA
9439  34EB
9440  34EC
9441  34ED
9442  34EE
9443  34EF
9444  34F0
9445  34F1
9446  34F2
9447  34F3
9448  34F4
9449  34F5
9450  34F6
9451  34F7
9452  34F8
9453  34F9
9454  34FA
9455  34FB
9456  34FC
9457  34FD
9458  34FE
9459  34FF
9460  3500
9461  3501
9462  3502
9463  3503
9464  3504
9465  3505
9466  3506
9467  3507
9468  3508
9469  3509
9470  350A
9471  350B
9472  350C
9473  350D
9474  350E
9475  350F
9476  3510
9477  3511
9478  3512
9479  3513
9480  3514
9481  3515
9482  3516
9483  3517
9484  3518
9485  3519
9486  351A
9487  351B
9488  351C
9489  351D
9490  351E
9491  351F
9492  3520
9493  3521
9494  3522
9495  3523
9496  3524
9497  3525
9498  3526
9499  3527
9500  3528
9501  3529
9502  352A
9503  352B
9504  352C
9505  352D
9506  352E
9507  352F
9508  3530
9509  3531
9510  3532
9511  3533
9512  3534
9513  3535
9514  3536
9515  3537
9516  3538
9517  3539
9518  353A
9519  353B
9520  353C
9521  353D
9522  353E
9523  353F
9524  3540
9525  3541
9526  3542
9527  3543
9528  3544
9529  3545
9530  3546
9531  3547
9532  3548
9533  3549
9534  354A
9535  354B
9536  354C
9537  354D
9538  354E
9539  354F
9540  3550
9541  3551
9542  3552
9543  3553
9544  3554
9545  3555
9546  3556
9547  3557
9548  3558
9549  3559
9550  355A
9551  355B
9552  355C
9553  355D
9554  355E
9555  355F
9556  3560
9557  3561
9558  3562
9559  3563
9560  3564
9561  3565
9562  3566
9563  3567
9564  3568
9565  3569
9566  356A
9567  356B
9568  356C
9569  356D
9570  356E
9571  356F
9572  3570
9573  3571
9574  3572
9575  3573
9576  3574
9577  3575
9578  3576
9579  3577
9580  3578
9581  3579
9582  357A
9583  357B
9584  357C
9585  357D
9586  357E
9587  357F
9588  3580
9589  3581
9590  3582
9591  3583
9592  3584
9593  3585
9594  3586
9595  3587
9596  3588
9597  3589
9598  358A
9599  358B
9600  358C
9601  358D
9602  358E
9603  358F
9604  3590
9605  3591
9606  3592
9607  3593
9608  3594
9609  3595
9610  3596
9611  3597
9612  3598
9613  3599
9614  359A
9615  359B
9616  359C
9617  359D
9618  359E
9619  359F
9620  35A0
9621  35A1
9622  35A2
9623  35A3
9624  35A4
9625  35A5
9626  35A6
9627  35A7
9628  35A8
9629  35A9
9630  35AA
9631  35AB
9632  35AC
9633  35AD
9634  35AE
9635  35AF
9636  35B0
9637  35B1
9638  35B2
9639  35B3
9640  35B4
9641  35B5
9642  35B6
9643  35B7
9644  35B8
9645  35B9
9646  35BA
9647  35BB
9648  35BC
9649  35BD
9650  35BE
9651  35BF
9652  35C0
9653  35C1
9654  35C2
9655  35C3
9656  35C4
9657  35C5
9658  35C6
9659  35C7
9660  35C8
9661  35C9
9662  35CA
9663  35CB
9664  35CC
9665  35CD
9666  35CE
9667  35CF
9668  35D0
9669  35D1
9670  35D2
9671  35D3
9672  35D4
9673  35D5
9674  35D6
9675  35D7
9676  35D8
9677  35D9
9678  35DA
9679  35DB
9680  35DC
9681  35DD
9682  35DE
9683  35DF
9684  35E0
9685  35E1
9686  35E2
9687  35E3
9688  35E4
9689  35E5
9690  35E6
9691  35E7
9692  35E8
9693  35E9
9694  35EA
9695  35EB
9696  35EC
9697  35ED
9698  35EE
9699  35EF
9700  35F0
9701  35F1
9702  35F2
9703  35F3
9704  35F4
9705  35F5
9706  35F6
9707  35F7
9708  35F8
9709  35F9
9710  35FA
9711  35FB
9712  35FC
9713  35FD
9714  35FE
9715  35FF
9716  3600
9717  3601
9718  3602
9719  3603
9720  3604
9721  3605
9722  3606
9723  3607
9724  3608
9725  3609
9726  360A
9727  360B
9728  360C
9729  360D
9730  360E
9731  360F
9732  3610
9733  3611
9734  3612
9735  3613
9736  3614
9737  3615
9738  3616
9739  3617
9740  3618
9741  3619
9742  361A
9743  361B
9744  361C
9745  361D
9746  361E
9747  361F
9748  3620
9749  3621
9750  3622
9751  3623
9752  3624
9753  3625
9754  3626
9755  3627
9756  3628
9757  3629
9758  362A
9759  362B
9760  362C
9761  362D
9762  362E
9763  362F
9764  3630
9765  3631
9766  3632
9767  3633
9768  3634
9769  3635
9770  3636
9771  3637
9772  3638
9773  3639
9774  363A
9775  363B
9776  363C
9777  363D
9778  363E
9779  363F
9780  3640
9781  3641
9782  3642
9783  3643
9784  3644
9785  3645
9786  3646
9787  3647
9788  3648
9789  3649
9790  364A
9791  364B
9792  364C
9793  364D
9794  364E
9795  364F
9796  3650
9797  3651
9798  3652
9799  3653
9800  3654
9801  3655
9802  3656
9803  3657
9804  3658
9805  3659
9806  365A
9807  365B
9808  365C
9809  365D
9810  365E
9811  365F
9812  3660
9813  3661
9814  3662
9815  3663
9816  3664
9817  3665
9818  3666
9819  3667
9820  3668
9821  3669
9822  366A
9823  366B
9824  366C
9825  366D
9826  366E
9827  366F
9828  3670
9829  3671
9830  3672
9831  3673
9832  3674
9833  3675
9834  3676
9835  3677
9836  3678
9837  3679
9838  367A
9839  367B
9840  367C
9841  367D
9842  367E
9843  367F
9844  3680
9845  3681
9846  3682
9847  3683
9848  3684
9849  3685
9850  3686
9851  3687
9852  3688
9853  3689
9854  368A
9855  368B
9856  368C
9857  368D
9858  368E
9859  368F
9860  3690
9861  3691
9862  3692
9863  3693
9864  3694
9865  3695
9866  3696
9867  3697
9868  3698
9869  3699
9870  369A
9871  369B
9872  369C
9873  369D
9874  369E
9875  369F
9876  36A0
9877  36A1
9878  36A2
9879  36A3
9880  36A4
9881  36A5
9882  36A6
9883  36A7
9884  36A8
9885  36A9
9886  36AA
9887  36AB
9888  36AC
9889  36AD
9890  36AE
9891  36AF
9892  36B0
9893  36B1
9894  36B2
9895  36B3
9896  36B4
9897  36B5
9898  36B6
9899  36B7
9900  36B8
9901  36B9
9902  36BA
9903  36BB
9904  36BC
9905  36BD
9906  36BE
9907  36BF
9908  36C0
9909  36C1
9910  36C2
9911  36C3
9912  36C4
9913  36C5
9914  36C6
9915  36C7
9916  36C8
9917  36C9
9918  36CA
9919  36CB
9920  36CC
9921  36CD
9922  36CE
9923  36CF
9924  36D0
9925  36D1
9926  36D2
9927  36D3
9928  36D4
9929  36D5
9930  36D6
9931  36D7
9932  36D8
9933  36D9
9934  36DA
9935  36DB
9936  36DC
9937  36DD
9938  36DE
9939  36DF
9940  36E0
9941  36E1
9942  36E2
9943  36E3
9944  36E4
9945  36E5
9946  36E6
9947  36E7
9948  36E8
9949  36E9
9950  36EA
9951  36EB
9952  36EC
9953  36ED
9954  36EE
9955  36EF
9956  36F0
9957  36F1
9958  36F2
9959  36F3
9960  36F4
9961  36F5
9962  36F6
9963  36F7
9964  36F8
9965  36F9
9966  36FA
9967  36FB
9968  36FC
9969  36FD
9970  36FE
9971  36FF
9972  3700
9973  3701
9974  3702
9975  3703
9976  3704
9977  3705
9978  3706
9979  3707
9980  3708
9981  3709
9982  370A
9983  370B
9984  370C
9985  370D
9986  370E
9987  370F
9988  3710
9989  3711
9990  3712
9991  3713
9992  3714
9993  3715
9994  3716
9995  3717
9996  3718
9997  3719
9998  371A
9999  371B
10000  371C
10001  371D
10002  371E
10003  371F
10004  3720
10005  3721
10006  3722
10007  3723
10008  3724
10009  3725
10010  3726
10011  3727
10012  3728
10013  3729
10014  372A
10015  372B
10016  372C
10017  372D
10018  372E
10019  372F
10020  3730
10021  3731
10022  3732
10023  3733
10024  3734
10025  3735
10026  3736
10027  3737
10028  3738
10029  3739
10030  373A
10031  373B
10032  373C
10033  373D
10034  373E
10035  373F
10036  3740
10037  3741
10038  3742
10039  3743
10040  3744
10041  3745
10042  3746
10043  3747
10044  3748
10045  3749
10046  374A
10047  374B
10048  374C
10049  374D
10050  374E
10051  374F
10052  3750
10053  3751
10054  3752
10055  3753
10056  3754
10057  3755
10058  3756
10059  3757
10060  3758
10061  3759
10062  375A
10063  375B
10064  375C
10065  375D
10066  375E
10067  375F
10068  3760
10069  3761
10070  3762
10071  3763
10072  3764
10073  3765
10074  3766
10075  3767
10076  3768
10077  3769
10078  376A
10079  376B
10080  376C
10081  376D
10082  376E
10083  376F
10084  3770
10085  3771
10086  3772
10087  3773
10088  3774
10089  3775
10090  3776
10091  3777
10092  3778
10093  3779
10094  377A
10095  377B
10096  377C
10097  377D
10098  377E
10099  377F
10100  3780
10101  3781
10102  3782
10103  3783
10104  3784
10105  3785
10106  3786
10107  3787
10108  3788
10109  3789
10110  378A
10111  378B
10112  378C
10113  378D
10114  378E
10115  378F
10116  3790
10117  3791
10118  3792
10119  3793
10120  3794
10121  3795
10122  3796
10123  3797
10124  3798
10125  3799
10126  379A
10127  379B
10128  379C
10129  379D
10130  379E
10131  379F
10132  37A0
10133  37A1
10134  37A2
10135  37A3
10136  37A4
10137  37A5
10138  37A6
10139  37A7
10140  37A8
10141  37A9
10142  37AA
10143  37AB
10144  37AC
10145  37AD
10146  37AE
10147  37AF
10148  37B0
10149  37B1
10150  37B2
10151  37B3
10152  37B4
10153  37B5
10154  37B6
10155  37B7
10156  37B8
10157  37B9
10158  37BA
10159  37BB
10160  37BC
10161  37BD
10162  37BE
10163  37BF
10164  37C0
10165  37C1
10166  37C2
10167  37C3
10168  37C4
10169  37C5
10170  37C6
10171  37C7
10172  37C8
10173  37C9
10174  37CA
10175  37CB
10176  37CC
10177  37CD
10178  37CE
10179  37CF
10180  37D0
10181  37D1
10182  37D2
10183  37D3
10184  37D4
10185  37D5
10186  37D6
10187  37D7
10188  37D8
10189  37D9
10190  37DA
10191  37DB
10192  37DC
10193  37DD
10194  37DE
10195  37DF
10196  37E0
10197  37E1
10198  37E2
10199  37E3
10200  37E4
10201  37E5
10202  37E6
10203  37E7
10204  37E8
10205  37E9
10206  37EA
10207  37EB
10208  37EC
10209  37ED
10210  37EE
10211  37EF
10212  37F0
10213  37F1
10214  37F2
10215  37F3
10216  37F4
10217  37F5
10218  37F6
10219  37F7
10220  37F8
10221  37F9
10222  37FA
10223  37FB
10224  37FC
10225  37FD
10226  37FE
10227  37FF
10228  3800
10229  3801
10230  3802
10231  3803
10232  3804
10233  3805
10234  3806
10235  3807
10236  3808
10237  3809
10238  380A
10239  380B
10240  380C
10241  380D
10242  380E
10243  380F
10244  3810
10245  3811
10246  3812
10247  3813
10248  3814
10249  3815
10250  3816
10251  3817
10252  3818
10253  3819
10254  381A
10255  381B
10256  381C
10257  381D
10258  381E
10259  381F
10260  3820
10261  3821
10262  3822
10263  3823
10264  3824
10265  3825
10266  3826
10267  3827
10268  3828
10269  3829
10270  382A
10271  382B
10272  382C
10273  382D
10274  382E
10275  382F
10276  3830
10277  3831
10278  3832
10279  3833
10280  3834
10281  3835
10282  3836
10283  3837
10284  3838
10285  3839
10286  383A
10287  383B
10288  383C
10289  383D
10290  383E
10291  383F
10292  3840
10293  3841
10294  3842
10295  3843
10296  3844
10297  3845
10298  3846
10299  3847
10300  3848
10301  3849
10302  384A
10303  384B
10304  384C
10305  384D
10306  384E
10307  384F
10308  3850
10309  3851
10310  3852
10311  3853
10312  3854
10313  3855
10314  3856
10315  3857
10316  3858
10317  3859
10318  385A
10319  385B
10320  385C
10321  385D
10322  385E
10323  385F
10324  3860
10325  3861
10326  3862
10327  3863
10328  3864
10329  3865
10330  3866
10331  3867
10332  3868
10333  3869
10334  386A
10335  386B
10336  386C
10337  386D
10338  386E
10339  386F
10340  3870
10341  3871
10342  3872
10343  3873
10344  3874
10345  3875
10346  3876
10347  3877
10348  3878
10349  3879
10350  387A
10351  387B
10352  387C
10353  387D
10354  387E
10355  387F
10356  3880
10357  3881
10358  3882
10359  3883
10360  3884
10361  3885
10362  3886
10363  3887
10364  3888
10365  3889
10366  388A
10367  388B
10368  388C
10369  388D
10370  388E
10371  388F
10372  3890
10373  3891
10374  3892
10375  3893
10376  3894
10377  3895
10378  3896
10379  3897
10380  3898
10381  3899
10382  389A
10383  389B
10384  389C
10385  389D
10386  389E
10387  389F
10388  38A0
10389  38A1
10390  38A2
10391  38A3
10392  38A4
10393  38A5
10394  38A6
10395  38A7
10396  38A8
10397  38A9
10398  38AA
10399  38AB
10400  38AC
10401  38AD
10402  38AE
10403  38AF
10404  38B0
10405  38B1
10406  38B2
10407  38B3
10408  38B4
10409  38B5
10410  38B6
10411  38B7
10412  38B8
10413  38B9
10414  38BA
10415  38BB
10416  38BC
10417  38BD
10418  38BE
10419  38BF
10420  38C0
10421  38C1
10422  38C2
10423  38C3
10424  38C4
10425  38C5
10426  38C6
10427  38C7
10428  38C8
10429  38C9
10430  38CA
10431  38CB
10432  38CC
10433  38CD
10434  38CE
10435  38CF
10436  38D0
10437  38D1
10438  38D2
10439  38D3
10440  38D4
10441  38D5
10442  38D6
10443  38D7
10444  38D8
10445  38D9
10446  38DA
10447  38DB
10448  38DC
10449  38DD
10450  38DE
10451  38DF
10452  38E0
10453  38E1
10454  38E2
10455  38E3
10456  38E4
10457  38E5
10458  38E6
10459  38E7
10460  38E8
10461  38E9
10462  38EA
10463  38EB
10464  38EC
10465  38ED
10466  38EE
10467  38EF
10468  38F0
10469  38F1
10470  38F2
10471  38F3
10472  38F4
10473  38F5
10474  38F6
10475  38F7
10476  38F8
10477  38F9
10478  38FA
10479  38FB
10480  38FC
10481  38FD
10482  38FE
10483  38FF
10484  3900
10485  3901
10486  3902
10487  3903
10488  3904
10489  3905
10490  3906
10491  3907
10492  3908
10493  3909
10494  390A
10495  390B
10496  390C
10497  390D
10498  390E
10499  390F
10500  3910
10501  3911
10502  3912
10503  3913
10504  3914
10505  3915
10506  3916
10507  3917
10508  3918
10509  3919
10510  391A
10511  391B
10512  391C
10513  391D
10514  391E
10515  391F
10516  3920
10517  3921
10518  3922
10519  3923
10520  3924
10521  3925
10522  3926
10523  3927
10524  3928
10525  3929
10526  392A
10527  392B
10528  392C
10529  392D
10530  392E
10531  392F
10532  3930
10533  3931
10534  3932
10535  3933
10536  3934
10537  3935
10538  3936
10539  3937
10540  3938
10541  3939
10542  393A
10543  393B
10544  393C
10545  393D
10546  393E
10547  393F
10548  3940
10549  3941
10550  3942
10551  3943
10552  3944
10553  3945
10554  3946
10555  3947
10556  3948
10557  3949
10558  394A
10559  394B
10560  394C
10561  394D
10562  394E
10563  394F
10564  3950
10565  3951
10566  3952
10567  3953
10568  3954
10569  3955
10570  3956
10571  3957
10572  3958
10573  3959
10574  395A
10575  395B
10576  395C
10577  395D
10578  395E
10579  395F
10580  3960
10581  3961
10582  3962
10583  3963
10584  3964
10585  3965
10586  3966
10587  3967
10588  3968
10589  3969
10590  396A
10591  396B
10592  396C
10593  396D
10594  396E
10595  396F
10596  3970
10597  3971
10598  3972
10599  3973
10600  3974
10601  3975
10602  3976
10603  3977
10604  3978
10605  3979
10606  397A
10607  397B
10608  397C
10609  397D
10610  397E
10611  397F
10612  3980
10613  3981
10614  3982
10615  3983
10616  3984
10617  3985
10618  3986
10619  3987
10620  3988
10621  3989
10622  398A
10623  398B
10624  398C
10625  398D
10626  398E
10627  398F
10628  3990
10629  3991
10630  3992
10631  3993
10632  3994
10633  3995
10634  3996
10635  3997
10636  3998
10637  3999
10638  399A
10639  399B
10640  399C
10641  399D
10642  399E
10643  399F
10644  39A0
10645  39A1
10646  39A2
10647  39A3
10648  39A4
10649  39A5
10650  39A6
10651  39A7
10652  39A8
10653  39A9
10654  39AA
10655  39AB
10656  39AC
10657  39AD
10658  39AE
10659  39AF
10660  39B0
10661  39B1
10662  39B2
10663  39B3
10664  39B4
10665  39B5
10666  39B6
10667  39B7
10668  39B8
10669  39B9
10670  39BA
10671  39BB
10672  39BC
10673  39BD
10674  39BE
10675  39BF
10676  39C0
10677  39C1
10678  39C2
10679  39C3
10680  39C4
10681  39C5
10682  39C6
10683  39C7
10684  39C8
10685  39C9
10686  39CA
10687  39CB
10688  39CC
10689  39CD
10690  39CE
10691  39CF
10692  39D0
10693  39D1
10694  39D2
10695  39D3
10696  39D4
10697  39D5
10698  39D6
10699  39D7
10700  39D8
10701  39D9
10702  39DA
10703  39DB
10704  39DC
10705  39DD
10706  39DE
10707  39DF
10708  39E0
10709  39E1
10710  39E2
10711  39E3
10712  39E4
10713  39E5
10714  39E6
10715  39E7
10716  39E8
10717  39E9
10718  39EA
10719  39EB
10720  39EC
10721  39ED
10722  39EE
10723  39EF
10724  39F0
10725  39F1
10726  39F2
10727  39F3
10728  39F4
10729  39F5
10730  39F6
10731  39F7
10732  39F8
10733  39F9
10734  39FA
10735  39FB
10736  39FC
10737  39FD
10738  39FE
10739  39FF
10740  3A00
10741  3A01
10742  3A02
10743  3A03
10744  3A04
10745  3A05
10746  3A06
10747  3A07
10748  3A08
10749  3A09
10750  3A0A
10751  3A0B
10752  3A0C
10753  3A0D
10754  3A0E
10755  3A0F
10756  3A10
10757  3A11
10758  3A12
10759  3A13
10760  3A14
10761  3A15
10762  3A16
10763  3A17
10764  3A18
10765  3A19
10766  3A1A
10767  3A1B
10768  3A1C
10769  3A1D
10770  3A1E
10771  3A1F
10772  3A20
10773  3A21
10774  3A22
10775  3A23
10776  3A24
10777  3A25
10778  3A26
10779  3A27
10780  3A28
10781  3A29
10782  3A2A
10783  3A2B
10784  3A2C
10785  3A2D
10786  3A2E
10787  3A2F
10788  3A30
10789  3A31
10790  3A32
10791  3A33
10792  3A34
10793  3A35
10794  3A36
10795  3A37
10796  3A38
10797  3A39
10798  3A3A
10799  3A3B
10800  3A3C
10801  3A3D
10802  3A3E
10803  3A3F
10804  3A40
10805  3A41
10806  3A42
10807  3A43
10808  3A44
10809  3A45
10810  3A46
10811  3A47
10812  3A48
10813  3A49
10814  3A4A
10815  3A4B
10816  3A4C
10817  3A4D
10818  3A4E
10819  3A4F
10820  3A50
10821  3A51
10822  3A52
10823  3A53
10824  3A54
10825  3A55
10826  3A56
10827  3A57
10828  3A58
10829  3A59
10830  3A5A
10831  3A5B
10832  3A5C
10833  3A5D
10834  3A5E
10835  3A5F
10836  3A60
10837  3A61
10838  3A62
10839  3A63
10840  3A64
10841  3A65
10842  3A66
10843  3A67
10844  3A68
10845  3A69
10846  3A6A
10847  3A6B
10848  3A6C
10849  3A6D
10850  3A6E
10851  3A6F
10852  3A70
10853  3A71
10854  3A72
10855  3A73
10856  3A74
10857  3A75
10858  3A76
10859  3A77
10860  3A78
10861  3A79
10862  3A7A
10863  3A7B
10864  3A7C
10865  3A7D
10866  3A7E
10867  3A7F
10868  3A80
10869  3A81
10870  3A82
10871  3A83
10872  3A84
10873  3A85
10874  3A86
10875  3A87
10876  3A88
10877  3A89
10878  3A8A
10879  3A8B
10880  3A8C
10881  3A8D
10882  3A8E
10883  3A8F
10884  3A90
10885  3A91
10886  3A92
10887  3A93
10888  3A94
10889  3A95
10890  3A96
10891  3A97
10892  3A98
10893  3A99
10894  3A9A
10895  3A9B
10896  3A9C
10897  3A9D
10898  3A9E
10899  3A9F
10900  3AA0
10901  3AA1
10902  3AA2
10903  3AA3
10904  3AA4
10905  3AA5
10906  3AA6
10907  3AA7
10908  3AA8
10909  3AA9
10910  3AAA
10911  3AAB
10912  3AAC
10913  3AAD
10914  3AAE
10915  3AAF
10916  3AB0
10917  3AB1
10918  3AB2
10919  3AB3
10920  3AB4
10921  3AB5
10922  3AB6
10923  3AB7
10924  3AB8
10925  3AB9
10926  3ABA
10927  3ABB
10928  3ABC
10929  3ABD
10930  3ABE
10931  3ABF
10932  3AC0
10933  3AC1
10934  3AC2
10935  3AC3
10936  3AC4
10937  3AC5
10938  3AC6
10939  3AC7
10940  3AC8
10941  3AC9
10942  3ACA
10943  3ACB
10944  3ACC
10945  3ACD
10946  3ACE
10947  3ACF
10948  3AD0
10949  3AD1
10950  3AD2
10951  3AD3
10952  3AD4
10953  3AD5
10954  3AD6
10955  3AD7
10956  3AD8
10957  3AD9
10958  3ADA
10959  3ADB
10960  3ADC
10961  3ADD
10962  3ADE
10963  3ADF
10964  3AE0
10965  3AE1
10966  3AE2
10967  3AE3
10968  3AE4
10969  3AE5
10970  3AE6
10971  3AE7
10972  3AE8
10973  3AE9
10974  3AEA
10975  3AEB
10976  3AEC
10977  3AED
10978  3AEE
10979  3AEF
10980  3AF0
10981  3AF1
10982  3AF2
10983  3AF3
10984  3AF4
10985  3AF5
10986  3AF6
10987  3AF7
10988  3AF8
10989  3AF9
10990  3AFA
10991  3AFB
10992  3AFC
10993  3AFD
10994  3AFE
10995  3AFF
10996  3B00
10997  3B01
10998  3B02
10999  3B03
11000  3B04
11001  3B05
11002  3B06
11003  3B07
11004  3B08
11005  3B09
11006  3B0A
11007  3B0B
11008  3B0C
11009  3B0D
11010  3B0E
11011  3B0F
11012  3B10
11013  3B11
11014  3B12
11015  3B13
11016  3B14
11017  3B15
11018  3B16
11019  3B17
11020  3B18
11021  3B19
11022  3B1A
11023  3B1B
11024  3B1C
11025  3B1D
11026  3B1E
11027  3B1F
11028  3B20
11029  3B21
11030  3B22
11031  3B23
11032  3B24
11033  3B25
11034  3B26
11035  3B27
11036  3B28
11037  3B29
11038  3B2A
11039  3B2B
11040  3B2C
11041  3B2D
11042  3B2E
11043  3B2F
11044  3B30
11045  3B31
11046  3B32
11047  3B33
11048  3B34
11049  3B35
11050  3B36
11051  3B37
11052  3B38
11053  3B39
11054  3B3A
11055  3B3B
11056  3B3C
11057  3B3D
11058  3B3E
11059  3B3F
11060  3B40
11061  3B41
11062  3B42
11063  3B43
11064  3B44
11065  3B45
11066  3B46
11067  3B47
11068  3B48
11069  3B49
11070  3B4A
11071  3B4B
11072  3B4C
11073  3B4D
11074  3B4E
11075  3B4F
11076  3B50
11077  3B51
11078  3B52
11079  3B53
11080  3B54
11081  3B55
11082  3B56
11083  3B57
11084  3B58
11085  3B59
11086  3B5A
11087  3B5B
11088  3B5C
11089  3B5D
11090  3B5E
11091  3B5F
11092  3B60
11093  3B61
11094  3B62
11095  3B63
11096  3B64
11097  3B65
11098  3B66
11099  3B67
11100  3B68
11101  3B69
11102  3B6A
11103  3B6B
11104  3B6C
11105  3B6D
11106  3B6E
11107  3B6F
11108  3B70
11109  3B71
11110  3B72
11111  3B73
11112  3B74
11113  3B75
11114  3B76
11115  3B77
11116  3B78
11117  3B79
11118  3B7A
11119  3B7B
11120  3B7C
11121  3B7D
11122  3B7E
11123  3B7F
11124  3B80
11125  3B81
11126  3B82
11127  3B83
11128  3B84
11129  3B85
11130  3B86
11131  3B87
11132  3B88
11133  3B89
11134  3B8A
11135  3B8B
11136  3B8C
11137  3B8D
11138  3B8E
11139  3B8F
11140  3B90
11141  3B91
11142  3B92
11143  3B93
11144  3B94
11145  3B95
11146  3B96
11147  3B97
11148  3B98
11149  3B99
11150  3B9A
11151  3B9B
11152  3B9C
11153  3B9D
11154  3B9E
11155  3B9F
11156  3BA0
11157  3BA1
11158  3BA2
11159  3BA3
11160  3BA4
11161  3BA5
11162  3BA6
11163  3BA7
11164  3BA8
11165  3BA9
11166  3BAA
11167  3BAB
11168  3BAC
11169  3BAD
11170  3BAE
11171  3BAF
11172  3BB0
11173  3BB1
11174  3BB2
11175  3BB3
11176  3BB4
11177  3BB5
11178  3BB6
11179  3BB7
11180  3BB8
11181  3BB9
11182  3BBA
11183  3BBB
11184  3BBC
11185  3BBD
11186  3BBE
11187  3BBF
11188  3BC0
11189  3BC1
11190  3BC2
11191  3BC3
11192  3BC4
11193  3BC5
11194  3BC6
11195  3BC7
11196  3BC8
11197  3BC9
11198  3BCA
11199  3BCB
11200  3BCC
11201  3BCD
11202  3BCE
11203  3BCF
11204  3BD0
11205  3BD1
11206  3BD2
11207  3BD3
11208  3BD4
11209  3BD5
11210  3BD6
11211  3BD7
11212  3BD8
11213  3BD9
11214  3BDA
11215  3BDB
11216  3BDC
11217  3BDD
11218  3BDE
11219  3BDF
11220  3BE0
11221  3BE1
11222  3BE2
11223  3BE3
11224  3BE4
11225  3BE5
11226  3BE6
11227  3BE7
11228  3BE8
11229  3BE9
11230  3BEA
11231  3BEB
11232  3BEC
11233  3BED
11234  3BEE
11235  3BEF
11236  3BF0
11237  3BF1
11238  3BF2
11239  3BF3
11240  3BF4
11241  3BF5
11242  3BF6
11243  3BF7
11244  3BF8
11245  3BF9
11246  3BFA
11247  3BFB
11248  3BFC
11249  3BFD
11250  3BFE
11251  3BFF
11252  3C00
11253  3C01
11254  3C02
11255  3C03
11256  3C04
11257  3C05
11258  3C06
11259  3C07
11260  3C08
11261  3C09
11262  3C0A
11263  3C0B
11264  3C0C
11265  3C0D
11266  3C0E
11267  3C0F
11268  3C10
11269  3C11
11270  3C12
11271  3C13
11272  3C14
11273  3C15
11274  3C16
11275  3C17
11276  3C18
11277  3C19
11278  3C1A
11279  3C1B
11280  3C1C
11281  3C1D
11282  3C1E
11283  3C1F
11284  3C20
11285  3C21
11286  3C22
11287  3C23
11288  3C24
11289  3C25
11290  3C26
11291  3C27
11292  3C28
11293  3C29
11294  3C2A
11295  3C2B
11296  3C2C
11297  3C2D
11298  3C2E
11299  3C2F
11300  3C30
11301  3C31
11302  3C32
11303  3C33
11304  3C34
11305  3C35
11306  3C36
11307  3C37
11308  3C38
11309  3C39
11310  3C3A
11311  3C3B
11312  3C3C
11313  3C3D
11314  3C3E
11315  3C3F
11316  3C40
11317  3C41
11318  3C42
11319  3C43
11320  3C44
11321  3C45
11322  3C46
11323  3C47
11324  3C48
11325  3C49
11326  3C4A
11327  3C4B
11328  3C4C
11329  3C4D
11330  3C4E
11331  3C4F
11332  3C50
11333  3C51
11334  3C52
11335  3C53
11336  3C54
11337  3C55
11338  3C56
11339  3C57
11340  3C58
11341  3C59
11342  3C5A
11343  3C5B
11344  3C5C
11345  3C5D
11346  3C5E
11347  3C5F
11348  3C60
11349  3C61
11350  3C62
11351  3C63
11352  3C64
11353  3C65
11354  3C66
11355  3C67
11356  3C68
11357  3C69
11358  3C6A
11359  3C6B
11360  3C6C
11361  3C6D
11362  3C6E
11363  3C6F
11364  3C70
11365  3C71
11366  3C72
11367  3C73
11368  3C74
11369  3C75
11370  3C76
11371  3C77
11372  3C78
11373  3C79
11374  3C7A
11375  3C7B
11376  3C7C
11377  3C7D
11378  3C7E
11379  3C7F
11380  3C80
11381  3C81
11382  3C82
11383  3C83
11384  3C84
11385  3C85
11386  3C86
11387  3C87
11388  3C88
11389  3C89
11390  3C8A
11391  3C8B
11392  3C8C
11393  3C8D
11394  3C8E
11395  3C8F
11396  3C90
11397  3C91
11398  3C92
11399  3C93
11400  3C94
11401  3C95
11402  3C96
11403  3C97
11404  3C98
11405  3C99
11406  3C9A
11407  3C9B
11408  3C9C
11409  3C9D
11410  3C9E
11411  3C9F
11412  3CA0
11413  3CA1
11414  3CA2
11415  3CA3
11416  3CA4
11417  3CA5
11418  3CA6
11419  3CA7
11420  3CA8
11421  3CA9
11422  3CAA
11423  3CAB
11424  3CAC
11425  3CAD
11426  3CAE
11427  3CAF
11428  3CB0
11429  3CB1
11430  3CB2
11431  3CB3
11432  3CB4
11433  3CB5
11434  3CB6
11435  3CB7
11436  3CB8
11437  3CB9
11438  3CBA
11439  3CBB
11440  3CBC
11441  3CBD
11442  3CBE
11443  3CBF
11444  3CC0
11445  3CC1
11446  3CC2
11447  3CC3
11448  3CC4
11449  3CC5
11450  3CC6
11451  3CC7
11452  3CC8
11453  3CC9
11454  3CCA
11455  3CCB
11456  3CCC
11457  3CCD
11458  3CCE
11459  3CCF
11460  3CD0
11461  3CD1
11462  3CD2
11463  3CD3
11464  3CD4
11465  3CD5
11466  3CD6
11467  3CD7
11468  3CD8
11469  3CD9
11470  3CDA
11471  3CDB
11472  3CDC
11473  3CDD
11474  3CDE
11475  3CDF
11476  3CE0
11477  3CE1
11478  3CE2
11479  3CE3
11480  3CE4
11481  3CE5
11482  3CE6
11483  3CE7
11484  3CE8
11485  3CE9
11486  3CEA
11487  3CEB
11488  3CEC
11489  3CED
11490  3CEE
11491  3CEF
11492  3CF0
11493  3CF1
11494  3CF2
11495  3CF3
11496  3CF4
11497  3CF5
11498  3CF6
11499  3CF7
11500  3CF8
11501  3CF9
11502  3CFA
11503  3CFB
11504  3CFC
11505  3CFD
11506  3CFE
11507  3CFF
11508  3D00
11509  3D01
11510  3D02
11511  3D03
11512  3D04
11513  3D05
11514  3D06
11515  3D07
11516  3D08
11517  3D09
11518  3D0A
11519  3D0B
11520  3D0C
11521  3D0D
11522  3D0E
11523  3D0F
11524  3D10
11525  3D11
11526  3D12
11527  3D13
11528  3D14
11529  3D15
11530  3D16
11531  3D17
11532  3D18
11533  3D19
11534  3D1A
11535  3D1B
11536  3D1C
11537  3D1D
11538  3D1E
11539  3D1F
11540  3D20
11541  3D21
11542  3D22
11543  3D23
11544  3D24
11545  3D25
11546  3D26
11547  3D27
11548  3D28
11549  3D29
11550  3D2A
11551  3D2B
11552  3D2C
11553  3D2D
11554  3D2E
11555  3D2F
11556  3D30
11557  3D31
11558  3D32
11559  3D33
11560  3D34
11561  3D35
11562  3D36
11563  3D37
11564  3D38
11565  3D39
11566  3D3A
11567  3D3B
11568  3D3C
11569  3D3D
11570  3D3E
11571  3D3F
11572  3D40
11573  3D41
11574  3D42
11575  3D43
11576  3D44
11577  3D45
11578  3D46
11579  3D47
11580  3D48
11581  3D49
11582  3D4A
11583  3D4B
11584  3D4C
11585  3D4D
11586  3D4E
11587  3D4F
11588  3D50
11589  3D51
11590  3D52
11591  3D53
11592  3D54
11593  3D55
11594  3D56
11595  3D57
11596  3D58
11597  3D59
11598  3D5A
11599  3D5B
11600  3D5C
11601  3D5D
11602  3D5E
11603  3D5F
11604  3D60
11605  3D61
11606  3D62
11607  3D63
11608  3D64
11609  3D65
11610  3D66
11611  3D67
11612  3D68
11613  3D69
11614  3D6A
11615  3D6B
11616  3D6C
11617  3D6D
11618  3D6E
11619  3D6F
11620  3D70
11621  3D71
11622  3D72
11623  3D73
11624  3D74
11625  3D75
11626  3D76
11627  3D77
11628  3D78
11629  3D79
11630  3D7A
11631  3D7B
11632  3D7C
11633  3D7D
11634  3D7E
11635  3D7F
11636  3D80
11637  3D81
11638  3D82
11639  3D83
11640  3D84
11641  3D85
11642  3D86
11643  3D87
11644  3D88
11645  3D89
11646  3D8A
11647  3D8B
11648  3D8C
11649  3D8D
11650  3D8E
11651  3D8F
11652  3D90
11653  3D91
11654  3D92
11655  3D93
11656  3D94
11657  3D95
11658  3D96
11659  3D97
11660  3D98
11661  3D99
11662  3D9A
11663  3D9B
11664  3D9C
11665  3D9D
11666  3D9E
11667  3D9F
11668  3DA0
11669  3DA1
11670  3DA2
11671  3DA3
11672  3DA4
11673  3DA5
11674  3DA6
11675  3DA7
11676  3DA8
11677  3DA9
11678  3DAA
11679  3DAB
11680  3DAC
11681  3DAD
11682  3DAE
11683  3DAF
11684  3DB0
11685  3DB1
11686  3DB2
11687  3DB3
11688  3DB4
11689  3DB5
11690  3DB6
11691  3DB7
11692  3DB8
11693  3DB9
11694  3DBA
11695  3DBB
11696  3DBC
11697  3DBD
11698  3DBE
11699  3DBF
11700  3DC0
11701  3DC1
11702  3DC2
11703  3DC3
11704  3DC4
11705  3DC5
11706  3DC6
11707  3DC7
11708  3DC8
11709  3DC9
11710  3DCA
11711  3DCB
11712  3DCC
11713  3DCD
11714  3DCE
11715  3DCF
11716  3DD0
11717  3DD1
11718  3DD2
11719  3DD3
11720  3DD4
11721  3DD5
11722  3DD6
11723  3DD7
11724  3DD8
11725  3DD9
11726  3DDA
11727  3DDB
11728  3DDC
11729  3DDD
11730  3DDE
11731  3DDF
11732  3DE0
11733  3DE1
11734  3DE2
11735  3DE3
11736  3DE4
11737  3DE5
11738  3DE6
11739  3DE7
11740  3DE8
11741  3DE9
11742  3DEA
11743  3DEB
11744  3DEC
11745  3DED
11746  3DEE
11747  3DEF
11748  3DF0
11749  3DF1
11750  3DF2
11751  3DF3
11752  3DF4
11753  3DF5
11754  3DF6
11755  3DF7
11756  3DF8
11757  3DF9
11758  3DFA
11759  3DFB
11760  3DFC
11761  3DFD
11762  3DFE
11763  3DFF
11764  3E00
11765  3E01
11766  3E02
11767  3E03
11768  3E04
11769  3E05
11770  3E06
11771  3E07
11772  3E08
11773  3E09
11774  3E0A
11775  3E0B
11776  3E0C
11777  3E0D
11778  3E0E
11779  3E0F
11780  3E10
11781  3E11
11782  3E12
11783  3E13
11784  3E14
11785  3E15
11786  3E16
11787  3E17
11788  3E18
11789  3E19
11790  3E1A
11791  3E1B
11792  3E1C
11793  3E1D
11794  3E1E
11795  3E1F
11796  3E20
11797  3E21
11798  3E22
11799  3E23
11800  3E24
11801  3E25
11802  3E26
11803  3E27
11804  3E28
11805  3E29
11806  3E2A
11807  3E2B
11808  3E2C
11809  3E2D
11810  3E2E
11811  3E2F
11812  3E30
11813  3E31
11814  3E32
11815  3E33
11816  3E34
11817  3E35
11818  3E36
11819  3E37
11820  3E38
11821  3E39
11822  3E3A
11823  3E3B
11824  3E3C
11825  3E3D
11826  3E3E
11827  3E3F
11828  3E40
11829  3E41
11830  3E42
11831  3E43
11832  3E44
11833  3E45
11834  3E46
11835  3E47
11836  3E48
11837  3E49
11838  3E4A
11839  3E4B
11840  3E4C
11841  3E4D
11842  3E4E
11843  3E4F
11844  3E50
11845  3E51
11846  3E52
11847  3E53
11848  3E54
11849  3E55
11850  3E56
11851  3E57
11852  3E58
11853  3E59
11854  3E5A
11855  3E5B
11856  3E5C
11857  3E5D
11858  3E5E
11859  3E5F
11860  3E60
11861  3E61
11862  3E62
11863  3E63
11864  3E64
11865  3E65
11866  3E66
11867  3E67
11868  3E68
11869  3E69
11870  3E6A
11871  3E6B
11872  3E6C
11873  3E6D
11874  3E6E
11875  3E6F
11876  3E70
11877  3E71
11878  3E72
11879  3E73
11880  3E74
11881  3E75
11882  3E76
11883  3E77
11884  3E78
11885  3E79
11886  3E7A
11887  3E7B
11888  3E7C
11889  3E7D
11890  3E7E
11891  3E7F
11892  3E80
11893  3E81
11894  3E82
11895  3E83
11896  3E84
11897  3E85
11898  3E86
11899  3E87
11900  3E88
11901  3E89
11902  3E8A
11903  3E8B
11904  3E8C
11905  3E8D
11906  3E8E
11907  3E8F
11908  3E90
11909  3E91
11910  3E92
11911  3E93
11912  3E94
11913  3E95
11914  3E96
11915  3E97
11916  3E98
11917  3E99
11918  3E9A
11919  3E9B
11920  3E9C
11921  3E9D
11922  3E9E
11923  3E9F
11924  3EA0
11925  3EA1
11926  3EA2
11927  3EA3
11928  3EA4
11929  3EA5
11930  3EA6
11931  3EA7
11932  3EA8
11933  3EA9
11934  3EAA
11935  3EAB
11936  3EAC
11937  3EAD
11938  3EAE
11939  3EAF
11940  3EB0
11941  3EB1
11942  3EB2
11943  3EB3
11944  3EB4
11945  3EB5
11946  3EB6
11947  3EB7
11948  3EB8
11949  3EB9
11950  3EBA
11951  3EBB
11952  3EBC
11953  3EBD
11954  3EBE
11955  3EBF
11956  3EC0
11957  3EC1
11958  3EC2
11959  3EC3
11960  3EC4
11961  3EC5
11962  3EC6
11963  3EC7
11964  3EC8
11965  3EC9
11966  3ECA
11967  3ECB
11968  3ECC
11969  3ECD
11970  3ECE
11971  3ECF
11972  3ED0
11973  3ED1
11974  3ED2
11975  3ED3
11976  3ED4
11977  3ED5
11978  3ED6
11979  3ED7
11980  3ED8
11981  3ED9
11982  3EDA
11983  3EDB
11984  3EDC
11985  3EDD
11986  3EDE
11987  3EDF
11988  3EE0
11989  3EE1
11990  3EE2
11991  3EE3
11992  3EE4
11993  3EE5
11994  3EE6
11995  3EE7
11996  3EE8
11997  3EE9
11998  3EEA
11999  3EEB
12000  3EEC
12001  3EED
12002  3EEE
12003  3EEF
12004  3EF0
12005  3EF1
12006  3EF2
12007  3EF3
12008  3EF4
12009  3EF5
12010  3EF6
12011  3EF7
12012  3EF8
12013  3EF9
12014  3EFA
12015  3EFB
12016  3EFC
12017  3EFD
12018  3EFE
12019  3EFF
12020  3F00
12021  3F01
12022  3F02
12023  3F03
12024  3F04
12025  3F05
12026  3F06
12027  3F07
12028  3F08
12029  3F09
12030  3F0A
12031  3F0B
12032  3F0C
12033  3F0D
12034  3F0E
12035  3F0F
12036  3F10
12037  3F11
12038  3F12
12039  3F13
12040  3F14
12041  3F15
12042  3F16
12043  3F17
12044  3F18
12045  3F19
12046  3F1A
12047  3F1B
12048  3F1C
12049  3F1D
12050  3F1E
12051  3F1F
12052  3F20
12053  3F21
12054  3F22
12055  3F23
12056  3F24
12057  3F25
12058  3F26
12059  3F27
12060  3F28
12061  3F29
12062  3F2A
12063  3F2B
12064  3F2C
12065  3F2D
12066  3F2E
12067  3F2F
12068  3F30
12069  3F31
12070  3F32
12071  3F33
12072  3F34
12073  3F35
12074  3F36
12075  3F37
12076  3F38
12077  3F39
12078  3F3A
12079  3F3B
12080  3F3C
12081  3F3D
12082  3F3E
12083  3F3F
12084  3F40
12085  3F41
12086  3F42
12087  3F43
12088  3F44
12089  3F45
12090  3F46
12091  3F47
12092  3F48
12093  3F49
12094  3F4A
12095  3F4B
12096  3F4C
12097  3F4D
12098  3F4E
12099  3F4F
12100  3F50
12101  3F51
12102  3F52
12103  3F53
12104  3F54
12105  3F55
12106  3F56
12107  3F57
12108  3F58
12109  3F59
12110  3F5A
12111  3F5B
12112  3F5C
12113  3F5D
12114  3F5E
12115  3F5F
12116  3F60
12117  3F61
12118  3F62
12119  3F63
12120  3F64
12121  3F65
12122  3F66
12123  3F67
12124  3F68
12125  3F69
12126  3F6A
12127  3F6B
12128  3F6C
12129  3F6D
12130  3F6E
12131  3F6F
12132  3F70
12133  3F71
12134  3F72
12135  3F73
12136  3F74
12137  3F75
12138  3F76
12139  3F77
12140  3F78
12141  3F79
12142  3F7A
12143  3F7B
12144  3F7C
12145  3F7D
12146  3F7E
12147  3F7F
12148  3F80
12149  3F81
12150  3F82
12151  3F83
12152  3F84
12153  3F85
12154  3F86
12155  3F87
12156  3F88
12157  3F89
12158  3F8A
12159  3F8B
12160  3F8C
12161  3F8D
12162  3F8E
12163  3F8F
12164  3F90
12165  3F91
12166  3F92
12167  3F93
12168  3F94
12169  3F95
12170  3F96
12171  3F97
12172  3F98
12173  3F99
12174  3F9A
12175  3F9B
12176  3F9C
12177  3F9D
12178  3F9E
12179  3F9F
12180  3FA0
12181  3FA1
12182  3FA2
12183  3FA3
12184  3FA4
12185  3FA5
12186  3FA6
12187  3FA7
12188  3FA8
12189  3FA9
12190  3FAA
12191  3FAB
12192  3FAC
12193  3FAD
12194  3FAE
12195  3FAF
12196  3FB0
12197  3FB1
12198  3FB2
12199  3FB3
12200  3FB4
12201  3FB5
12202  3FB6
12203  3FB7
12204  3FB8
12205  3FB9
12206  3FBA
12207  3FBB
12208  3FBC
12209  3FBD
12210  3FBE
12211  3FBF
12212  3FC0
12213  3FC1
12214  3FC2
12215  3FC3
12216  3FC4
12217  3FC5
12218  3FC6
12219  3FC7
12220  3FC8
12221  3FC9
12222  3FCA
12223  3FCB
12224  3FCC
12225  3FCD
12226  3FCE
12227  3FCF
12228  3FD0
12229  3FD1
12230  3FD2
12231  3FD3
12232  3FD4
12233  3FD5
12234  3FD6
12235  3FD7
12236  3FD8
12237  3FD9
12238  3FDA
12239  3FDB
12240  3FDC
12241  3FDD
12242  3FDE
12243  3FDF
12244  3FE0
12245  3FE1
12246  3FE2
12247  3FE3
12248  3FE4
12249  3FE5
12250  3FE6
12251  3FE7
12252  3FE8
12253  3FE9
12254  3FEA
12255  3FEB
12256  3FEC
12257  3FED
12258  3FEE
12259  3FEF
12260  3FF0
12261  3FF1
12262  3FF2
12263  3FF3
12264  3FF4
12265  3FF5
12266  3FF6
12267  3FF7
12268  3FF8
12269  3FF9
12270  3FFA
12271  3FFB
12272  3FFC
12273  3FFD
12274  3FFE
12275  3FFF
12276  4000
12277  4001
12278  4002
12279  4003
12280  4004
12281  4005
12282  4006
12283  4007
12284  4008
12285  4009
12286  400A
12287  400B
12288  400C
12289  400D
12290  400E
12291  400F
12292  4010
12293  4011
12294  4012
12295  4013
12296  4014
12297  4015
12298  4016
12299  4017
12300  4018
12301  4019
12302  401A
12303  401B
12304  401C
12305  401D
12306  401E
12307  401F
12308  4020
12309  4021
12310  4022
12311  4023
12312  4024
12313  4025
12314  4026
12315  4027
12316  4028
12317  4029
12318  402A
12319  402B
12320  402C
12321  402D
12322  402E
12323  402F
12324  4030
12325  4031
12326  4032
12327  4033
12328  4034
12329  4035
12330  4036
12331  4037
12332  4038
12333  4039
12334  403A
12335  403B
12336  403C
12337  403D
12338  403E
12339  403F
12340  4040
12341  4041
12342  4042
12343  4043
12344  4044
12345  4045
12346  4046
12347  4047
12348  4048
12349  4049
12350  404A
12351  404B
12352  404C
12353  404D
12354  404E
12355  404F
12356  4050
12357  4051
12358  4052
12359  4053
12360  4054
12361  4055
12362  4056
12363  4057
12364  4058
12365  4059
12366  405A
12367  405B
12368  405C
12369  405D
12370  405E
12371  405F
12372  4060
12373  4061
12374  4062
12375  4063
12376  4064
12377  4065
12378  4066
12379  4067
12380  4068
12381  4069
12382  406A
12383  406B
12384  406C
12385  406D
12386  406E
12387  406F
12388  4070
12389  4071
12390  4072
12391  4073
12392  4074
12393  4075
12394  4076
12395  4077
12396  4078
12397  4079
12398  407A
12399  407B
12400  407C
12401  407D
12402  407E
12403  407F
12404  4080
12405  4081
12406  4082
12407  4083
12408  4084
12409  4085
12410  4086
12411  4087
12412  4088
12413  4089
12414  408A
12415  408B
12416  408C
12417  408D
12418  408E
12419  408F
12420  4090
12421  4091
12422  4092
12423  4093
12424  4094
12425  4095
12426  4096
12427  4097
12428  4098
12429  4099
12430  409A
12431  409B
12432  409C
12433  409D
12434  409E
12435  409F
12436  40A0
12437  40A1
12438  40A2
12439  40A3
12440  40A4
12441  40A5
12442  40A6
12443  40A7
12444  40A8
12445  40A9
12446  40AA
12447  40AB
12448  40AC
12449  40AD
12450  40AE
12451  40AF
12452  40B0
12453  40B1
12454  40B2
12455  40B3
12456  40B4
12457  40B5
12458  40B6
12459  40B7
12460  40B8
12461  40B9
12462  40BA
12463  40BB
12464  40BC
12465  40BD
12466  40BE
12467  40BF
12468  40C0
12469  40C1
12470  40C2
12471  40C3
12472  40C4
12473  40C5
12474  40C6
12475  40C7
12476  40C8
12477  40C9
12478  40CA
12479  40CB
12480  40CC
12481  40CD
12482  40CE
12483  40CF
12484  40D0
12485  40D1
12486  40D2
12487  40D3
12488  40D4
12489  40D5
12490  40D6
12491  40D7
12492  40D8
12493  40D9
12494  40DA
12495  40DB
12496  40DC
12497  40DD
12498  40DE
12499  40DF
12500  40E0
12501  40E1
12502  40E2
12503  40E3
12504  40E4
12505  40E5
12506  40E6
12507  40E7
12508  40E8
12509  40E9
12510  40EA
12511  40EB
12512  40EC
12513  40ED
12514  40EE
12515  40EF
12516  40F0
12517  40F1
12518  40F2
12519  40F3
12520  40F4
12521  40F5
12522  40F6
12523  40F7
12524  40F8
12525  40F9
12526  40FA
12527  40FB
12528  40FC
12529  40FD
12530  40FE
12531  40FF
12532  4100
12533  4101
12534  4102
12535  4103
12536  4104
12537  4105
12538  4106
12539  4107
12540  4108
12541  4109
12542  410A
12543  410B
12544  410C
12545  410D
12546  410E
12547  410F
12548  4110
12549  4111
12550  4112
12551  4113
12552  4114
12553  4115
12554  4116
12555  4117
12556  4118
12557  4119
12558  411A
12559  411B
12560  411C
12561  411D
12562  411E
12563  411F
12564  4120
12565  4121
12566  4122
12567  4123
12568  4124
12569  4125
12570  4126
12571  4127
12572  4128
12573  4129
12574  412A
12575  412B
12576  412C
12577  412D
12578  412E
12579  412F
12580  4130
12581  4131
12582  4132
12583  4133
12584  4134
12585  4135
12586  4136
12587  4137
12588  4138
12589  4139
12590  413A
12591  413B
12592  413C
12593  413D
12594  413E
12595  413F
12596  4140
12597  4141
12598  4142
12599  4143
12600  4144
12601  4145
12602  4146
12603  4147
12604  4148
12605  4149
12606  414A
12607  414B
12608  414C
12609  414D
12610  414E
12611  414F
12612  4150
12613  4151
12614  4152
12615  4153
12616  4154
12617  4155
12618  4156
12619  4157
12620  4158
12621  4159
12622  415A
12623  415B
12624  415C
12625  415D
12626  415E
12627  415F
12628  4160
12629  4161
12630  4162
12631  4163
12632  4164
12633  4165
12634  4166
12635  4167
12636  4168
12637  4169
12638  416A
12639  416B
12640  416C
12641  416D
12642  416E
12643  416F
12644  4170
12645  4171
12646  4172
12647  4173
12648  4174
12649  4175
12650  4176
12651  4177
12652  4178
12653  4179
12654  417A
12655  417B
12656  417C
12657  417D
12658  417E
12659  417F
12660  4180
12661  4181
12662  4182
12663  4183
12664  4184
12665  4185
12666  4186
12667  4187
12668  4188
12669  4189
12670  418A
12671  418B
12672  418C
12673  418D
12674  418E
12675  418F
12676  4190
12677  4191
12678  4192
12679  4193
12680  4194
12681  4195
12682  4196
12683  4197
12684  4198
12685  4199
12686  419A
12687  419B
12688  419C
12689  419D
12690  419E
12691  419F
12692  41A0
12693  41A1
12694  41A2
12695  41A3
12696  41A4
12697  41A5
12698  41A6
12699  41A7
12700  41A8
12701  41A9
12702  41AA
12703  41AB
12704  41AC
12705  41AD
12706  41AE
12707  41AF
12708  41B0
12709  41B1
12710  41B2
12711  41B3
12712  41B4
12713  41B5
12714  41B6
12715  41B7
12716  41B8
12717  41B9
12718  41BA
12719  41BB
12720  41BC
12721  41BD
12722  41BE
12723  41BF
12724  41C0
12725  41C1
12726  41C2
12727  41C3
12728  41C4
12729  41C5
12730  41C6
12731  41C7
12732  41C8
12733  41C9
12734  41CA
12735  41CB
12736  41CC
12737  41CD
12738  41CE
12739  41CF
12740  41D0
12741  41D1
12742  41D2
12743  41D3
12744  41D4
12745  41D5
12746  41D6
12747  41D7
12748  41D8
12749  41D9
12750  41DA
12751  41DB
12752  41DC
12753  41DD
12754  41DE
12755  41DF
12756  41E0
12757  41E1
12758  41E2
12759  41E3
12760  41E4
12761  41E5
12762  41E6
12763  41E7
12764  41E8
12765  41E9
12766  41EA
12767  41EB
12768  41EC
12769  41ED
12770  41EE
12771  41EF
12772  41F0
12773  41F1
12774  41F2
12775  41F3
12776  41F4
12777  41F5
12778  41F6
12779  41F7
12780  41F8
12781  41F9
12782  41FA
12783  41FB
12784  41FC
12785  41FD
12786  41FE
12787  41FF
12788  4200
12789  4201
12790  4202
12791  4203
12792  4204
12793  4205
12794  4206
12795  4207
12796  4208
12797  4209
12798  420A
12799  420B
12800  420C
12801  420D
12802  420E
12803  420F
12804  4210
12805  4211
12806  4212
12807  4213
12808  4214
12809  4215
12810  4216
12811  4217
12812  4218
12813  4219
12814  421A
12815  421B
12816  421C
12817  421D
12818  421E
12819  421F
12820  4220
12821  4221
12822  4222
12823  4223
12824  4224
12825  4225
12826  4226
12827  4227
12828  4228
12829  4229
12830  422A
12831  422B
12832  422C
12833  422D
12834  422E
12835  422F
12836  4230
12837  4231
12838  4232
12839  4233
12840  4234
12841  4235
12842  4236
12843  4237
12844  4238
12845  4239
12846  423A
12847  423B
12848  423C
12849  423D
12850  423E
12851  423F
12852  4240
12853  4241
12854  4242
12855  4243
12856  4244
12857  4245
12858  4246
12859  4247
12860  4248
12861  4249
12862  424A
12863  424B
12864  424C
12865  424D
12866  424E
12867  424F
12868  4250
12869  4251
12870  4252
12871  4253
12872  4254
12873  4255
12874  4256
12875  4257
12876  4258
12877  4259
12878  425A
12879  425B
12880  425C
12881  425D
12882  425E
12883  425F
12884  4260
12885  4261
12886  4262
12887  4263
12888  4264
12889  4265
12890  4266
12891  4267
12892  4268
12893  4269
12894  426A
12895  426B
12896  426C
12897  426D
12898  426E
12899  426F
12900  4270
12901  4271
12902  4272
12903  4273
12904  4274
12905  4275
12906  4276
12907  4277
12908  4278
12909  4279
12910  427A
12911  427B
12912  427C
12913  427D
12914  427E
12915  427F
12916  4280
12917  4281
12918  4282
12919  4283
12920  4284
12921  4285
12922  4286
12923  4287
12924  4288
12925  4289
12926  428A
12927  428B
12928  428C
12929  428D
12930  428E
12931  428F
12932  4290
12933  4291
12934  4292
12935  4293
12936  4294
12937  4295
12938  4296
12939  4297
12940  4298
12941  4299
12942  429A
12943  429B
12944  429C
12945  429D
12946  429E
12947  429F
12948  42A0
12949  42A1
12950  42A2
12951  42A3
12952  42A4
12953  42A5
12954  42A6
12955  42A7
12956  42A8
12957  42A9
12958  42AA
12959  42AB
12960  42AC
12961  42AD
12962  42AE
12963  42AF
12964  42B0
12965  42B1
12966  42B2
12967  42B3
12968  42B4
12969  42B5
12970  42B6
12971  42B7
12972  42B8
12973  42B9
12974  42BA
12975  42BB
12976  42BC
12977  42BD
12978  42BE
12979  42BF
12980  42C0
12981  42C1
12982  42C2
12983  42C3
12984  42C4
12985  42C5
12986  42C6
12987  42C7
12988  42C8
12989  42C9
12990  42CA
12991  42CB
12992  42CC
12993  42CD
12994  42CE
12995  42CF
12996  42D0
12997  42D1
12998  42D2
12999  42D3
13000  42D4
13001  42D5
13002  42D6
13003  42D7
13004  42D8
13005  42D9
13006  42DA
13007  42DB
13008  42DC
13009  42DD
13010  42DE
13011  42DF
13012  42E0
13013  42E1
13014  42E2
13015  42E3
13016  42E4
13017  42E5
13018  42E6
13019  42E7
13020  42E8
13021  42E9
13022  42EA
13023  42EB
13024  42EC
13025  42ED
13026  42EE
13027  42EF
13028  42F0
13029  42F1
13030  42F2
13031  42F3
13032  42F4
13033  42F5
13034  42F6
13035  42F7
13036  42F8
13037  42F9
13038  42FA
13039  42FB
13040  42FC
13041  42FD
13042  42FE
13043  42FF
13044  4300
13045  4301
13046  4302
13047  4303
13048  4304
13049  4305
13050  4306
13051  4307
13052  4308
13053  4309
13054  430A
13055  430B
13056  430C
13057  430D
13058  430E
13059  430F
13060  4310
13061  4311
13062  4312
13063  4313
13064  4314
13065  4315
13066  4316
13067  4317
13068  4318
13069  4319
13070  431A
13071  431B
13072  431C
13073  431D
13074  431E
13075  431F
13076  4320
13077  4321
13078  4322
13079  4323
13080  4324
13081  4325
13082  4326
13083  4327
13084  4328
13085  4329
13086  432A
13087  432B
13088  432C
13089  432D
13090  432E
13091  432F
13092  4330
13093  4331
13094  4332
13095  4333
13096  4334
13097  4335
13098  4336
13099  4337
13100  4338
13101  4339
13102  433A
13103  433B
13104  433C
13105  433D
13106  433E
13107  433F
13108  4340
13109  4341
13110  4342
13111  4343
13112  4344
13113  4345
13114  4346
13115  4347
13116  4348
13117  4349
13118  434A
13119  434B
13120  434C
13121  434D
13122  434E
13123  434F
13124  4350
13125  4351
13126  4352
13127  4353
13128  4354
13129  4355
13130  4356
13131  4357
13132  4358
13133  4359
13134  435A
13135  435B
13136  435C
13137  435D
13138  435E
13139  435F
13140  4360
13141  4361
13142  4362
13143  4363
13144  4364
13145  4365
13146  4366
13147  4367
13148  4368
13149  4369
13150  436A
13151  436B
13152  436C
13153  436D
13154  436E
13155  436F
13156  4370
13157  4371
13158  4372
13159  4373
13160  4374
13161  4375
13162  4376
13163  4377
13164  4378
13165  4379
13166  437A
13167  437B
13168  437C
13169  437D
13170  437E
13171  437F
13172  4380
13173  4381
13174  4382
13175  4383
13176  4384
13177  4385
13178  4386
13179  4387
13180  4388
13181  4389
13182  438A
13183  438B
13184  438C
13185  438D
13186  438E
13187  438F
13188  4390
13189  4391
13190  4392
13191  4393
13192  4394
13193  4395
13194  4396
13195  4397
13196  4398
13197  4399
13198  439A
13199  439B
13200  439C
13201  439D
13202  439E
13203  439F
13204  43A0
13205  43A1
13206  43A2
13207  43A3
13208  43A4
13209  43A5
13210  43A6
13211  43A7
13212  43A8
13213  43A9
13214  43AA
13215  43AB
13216  43AC
13217  43AD
13218  43AE
13219  43AF
13220  43B0
13221  43B1
13222  43B2
13223  43B3
13224  43B4
13225  43B5
13226  43B6
13227  43B7
13228  43B8
13229  43B9
13230  43BA
13231  43BB
13232  43BC
13233  43BD
13234  43BE
13235  43BF
13236  43C0
13237  43C1
13238  43C2
13239  43C3
13240  43C4
13241  43C5
13242  43C6
13243  43C7
13244  43C8
13245  43C9
13246  43CA
13247  43CB
13248  43CC
13249  43CD
13250  43CE
13251  43CF
13252  43D0
13253  43D1
13254  43D2
13255  43D3
13256  43D4
13257  43D5
13258  43D6
13259  43D7
13260  43D8
13261  43D9
13262  43DA
13263  43DB
13264  43DC
13265  43DD
13266  43DE
13267  43DF
13268  43E0
13269  43E1
13270  43E2
13271  43E3
13272  43E4
13273  43E5
13274  43E6
13275  43E7
13276  43E8
13277  43E9
13278  43EA
13279  43EB
13280  43EC
13281  43ED
13282  43EE
13283  43EF
13284  43F0
13285  43F1
13286  43F2
13287  43F3
13288  43F4
13289  43F5
13290  43F6
13291  43F7
13292  43F8
13293  43F9
13294  43FA
13295  43FB
13296  43FC
13297  43FD
13298  43FE
13299  43FF
13300  4400
13301  4401
13302  4402
13303  4403
13304  4404
13305  4405
13306  4406
13307  4407
13308  4408
13309  4409
13310  440A
13311  440B
13312  440C
13313  440D
13314  440E
13315  440F
13316  4410
13317  4411
13318  4412
13319  4413
13320  4414
13321  4415
13322  4416
13323  4417
13324  4418
13325  4419
13326  441A
13327  441B
13328  441C
13329  441D
13330  441E
13331  441F
13332  4420
13333  4421
13334  4422
13335  4423
13336  4424
13337  4425
13338  4426
13339  4427
13340  4428
13341  4429
13342  442A
13343  442B
13344  442C
13345  442D
13346  442E
13347  442F
13348  4430
13349  4431
13350  4432
13351  4433
13352  4434
13353  4435
13354  4436
13355  4437
13356  4438
13357  4439
13358  443A
13359  443B
13360  443C
13361  443D
13362  443E
13363  443F
13364  4440
13365  4441
13366  4442
13367  4443
13368  4444
13369  4445
13370  4446
13371  4447
13372  4448
13373  4449
13374  444A
13375  444B
13376  444C
13377  444D
13378  444E
13379  444F
13380  4450
13381  4451
13382  4452
13383  4453
13384  4454
13385  4455
13386  4456
13387  4457
13388  4458
13389  4459
13390  445A
13391  445B
13392  445C
13393  445D
13394  445E
13395  445F
13396  4460
13397  4461
13398  4462
13399  4463
13400  4464
13401  4465
13402  4466
13403  4467
13404  4468
13405  4469
13406  446A
13407  446B
13408  446C
13409  446D
13410  446E
13411  446F
13412  4470
13413  4471
13414  4472
13415  4473
13416  4474
13417  4475
13418  4476
13419  4477
13420  4478
13421  4479
13422  447A
13423  447B
13424  447C
13425  447D
13426  447E
13427  447F
13428  4480
13429  4481
13430  4482
13431  4483
13432  4484
13433  4485
13434  4486
13435  4487
13436  4488
13437  4489
13438  448A
13439  448B
13440  448C
13441  448D
13442  448E
13443  448F
13444  4490
13445  4491
13446  4492
13447  4493
13448  4494
13449  4495
13450  4496
13451  4497
13452  4498
13453  4499
13454  449A
13455  449B
13456  449C
13457  449D
13458  449E
13459  449F
13460  44A0
13461  44A1
13462  44A2
13463  44A3
13464  44A4
13465  44A5
13466  44A6
13467  44A7
13468  44A8
13469  44A9
13470  44AA
13471  44AB
13472  44AC
13473  44AD
13474  44AE
13475  44AF
13476  44B0
13477  44B1
13478  44B2
13479  44B3
13480  44B4
13481  44B5
13482  44B6
13483  44B7
13484  44B8
13485  44B9
13486  44BA
13487  44BB
13488  44BC
13489  44BD
13490  44BE
13491  44BF
13492  44C0
13493  44C1
13494  44C2
13495  44C3
13496  44C4
13497  44C5
13498  44C6
13499  44C7
13500  44C8
13501  44C9
13502  44CA
13503  44CB
13504  44CC
13505  44CD
13506  44CE
13507  44CF
13508  44D0
13509  44D1
13510  44D2
13511  44D3
13512  44D4
13513  44D5
13514  44D6
13515  44D7
13516  44D8
13517  44D9
13518  44DA
13519  44DB
13520  44DC
13521  44DD
13522  44DE
13523  44DF
13524  44E0
13525  44E1
13526  44E2
13527  44E3
13528  44E4
13529  44E5
13530  44E6
13531  44E7
13532  44E8
13533  44E9
13534  44EA
13535  44EB
13536  44EC
13537  44ED
13538  44EE
13539  44EF
13540  44F0
13541  44F1
13542  44F2
13543  44F3
13544  44F4
13545  44F5
13546  44F6
13547  44F7
13548  44F8
13549  44F9
13550  44FA
13551  44FB
13552  44FC
13553  44FD
13554  44FE
13555  44FF
13556  4500
13557  4501
13558  4502
13559  4503
13560  4504
13561  4505
13562  4506
13563  4507
13564  4508
13565  4509
13566  450A
13567  450B
13568  450C
13569  450D
13570  450E
13571  450F
13572  4510
13573  4511
13574  4512
13575  4513
13576  4514
13577  4515
13578  4516
13579  4517
13580  4518
13581  4519
13582  451A
13583  451B
13584  451C
13585  451D
13586  451E
13587  451F
13588  4520
13589  4521
13590  4522
13591  4523
13592  4524
13593  4525
13594  4526
13595  4527
13596  4528
13597  4529
13598  452A
13599  452B
13600  452C
13601  452D
13602  452E
13603  452F
13604  4530
13605  4531
13606  4532
13607  4533
13608  4534
13609  4535
13610  4536
13611  4537
13612  4538
13613  4539
13614  453A
13615  453B
13616  453C
13617  453D
13618  453E
13619  453F
13620  4540
13621  4541
13622  4542
13623  4543
13624  4544
13625  4545
13626  4546
13627  4547
13628  4548
13629  4549
13630  454A
13631  454B
13632  454C
13633  454D
13634  454E
13635  454F
13636  4550
13637  4551
13638  4552
13639  4553
13640  4554
13641  4555
13642  4556
13643  4557
13644  4558
13645  4559
13646  455A
13647  455B
13648  455C
13649  455D
13650  455E
13651  455F
13652  4560
13653  4561
13654  4562
13655  4563
13656  4564
13657  4565
13658  4566
13659  4567
13660  4568
13661  4569
13662  456A
13663  456B
13664  456C
13665  456D
13666  456E
13667  456F
13668  4570
13669  4571
13670  4572
13671  4573
13672  4574
13673  4575
13674  4576
13675  4577
13676  4578
13677  4579
13678  457A
13679  457B
13680  457C
13681  457D
13682  457E
13683  457F
13684  4580
13685  4581
13686  4582
13687  4583
13688  4584
13689  4585
13690  4586
13691  4587
13692  4588
13693  4589
13694  458A
13695  458B
13696  458C
13697  458D
13698  458E
13699  458F
13700  4590
13701  4591
13702  4592
13703  4593
13704  4594
13705  4595
13706  4596
13707  4597
13708  4598
13709  4599
13710  459A
13711  459B
13712  459C
13713  459D
13714  459E
13715  459F
13716  45A0
13717  45A1
13718  45A2
13719  45A3
13720  45A4
13721  45A5
13722  45A6
13723  45A7
13724  45A8
13725  45A9
13726  45AA
13727  45AB
13728  45AC
13729  45AD
13730  45AE
13731  45AF
13732  45B0
13733  45B1
13734  45B2
13735  45B3
13736  45B4
13737  45B5
13738  45B6
13739  45B7
13740  45B8
13741  45B9
13742  45BA
13743  45BB
13744  45BC
13745  45BD
13746  45BE
13747  45BF
13748  45C0
13749  45C1
13750  45C2
13751  45C3
13752  45C4
13753  45C5
13754  45C6
13755  45C7
13756  45C8
13757  45C9
13758  45CA
13759  45CB
13760  45CC
13761  45CD
13762  45CE
13763  45CF
13764  45D0
13765  45D1
13766  45D2
13767  45D3
13768  45D4
13769  45D5
13770  45D6
13771  45D7
13772  45D8
13773  45D9
13774  45DA
13775  45DB
13776  45DC
13777  45DD
13778  45DE
13779  45DF
13780  45E0
13781  45E1
13782  45E2
13783  45E3
13784  45E4
13785  45E5
13786  45E6
13787  45E7
13788  45E8
13789  45E9
13790  45EA
13791  45EB
13792  45EC
13793  45ED
13794  45EE
13795  45EF
13796  45F0
13797  45F1
13798  45F2
13799  45F3
13800  45F4
13801  45F5
13802  45F6
13803  45F7
13804  45F8
13805  45F9
13806  45FA
13807  45FB
13808  45FC
13809  45FD
13810  45FE
13811  45FF
13812  4600
13813  4601
13814  4602
13815  4603
13816  4604
13817  4605
13818  4606
13819  4607
13820  4608
13821  4609
13822  460A
13823  460B
13824  460C
13825  460D
13826  460E
13827  460F
13828  4610
13829  4611
13830  4612
13831  4613
13832  4614
13833  4615
13834  4616
13835  4617
13836  4618
13837  4619
13838  461A
13839  461B
13840  461C
13841  461D
13842  461E
13843  461F
13844  4620
13845  4621
13846  4622
13847  4623
13848  4624
13849  4625
13850  4626
13851  4627
13852  4628
13853  4629
13854  462A
13855  462B
13856  462C
13857  462D
13858  462E
13859  462F
13860  4630
13861  4631
13862  4632
13863  4633
13864  4634
13865  4635
13866  4636
13867  4637
13868  4638
13869  4639
13870  463A
13871  463B
13872  463C
13873  463D
13874  463E
13875  463F
13876  4640
13877  4641
13878  4642
13879  4643
13880  4644
13881  4645
13882  4646
13883  4647
13884  4648
13885  4649
13886  464A
13887  464B
13888  464C
13889  464D
13890  464E
13891  464F
13892  4650
13893  4651
13894  4652
13895  4653
13896  4654
13897  4655
13898  4656
13899  4657
13900  4658
13901  4659
13902  465A
13903  465B
13904  465C
13905  465D
13906  465E
13907  465F
13908  4660
13909  4661
13910  4662
13911  4663
13912  4664
13913  4665
13914  4666
13915  4667
13916  4668
13917  4669
13918  466A
13919  466B
13920  466C
13921  466D
13922  466E
13923  466F
13924  4670
13925  4671
13926  4672
13927  4673
13928  4674
13929  4675
13930  4676
13931  4677
13932  4678
13933  4679
13934  467A
13935  467B
13936  467C
13937  467D
13938  467E
13939  467F
13940  4680
13941  4681
13942  4682
13943  4683
13944  4684
13945  4685
13946  4686
13947  4687
13948  4688
13949  4689
13950  468A
13951  468B
13952  468C
13953  468D
13954  468E
13955  468F
13956  4690
13957  4691
13958  4692
13959  4693
13960  4694
13961  4695
13962  4696
13963  4697
13964  4698
13965  4699
13966  469A
13967  469B
13968  469C
13969  469D
13970  469E
13971  469F
13972  46A0
13973  46A1
13974  46A2
13975  46A3
13976  46A4
13977  46A5
13978  46A6
13979  46A7
13980  46A8
13981  46A9
13982  46AA
13983  46AB
13984  46AC
13985  46AD
13986  46AE
13987  46AF
13988  46B0
13989  46B1
13990  46B2
13991  46B3
13992  46B4
13993  46B5
13994  46B6
13995  46B7
13996  46B8
13997  46B9
13998  46BA
13999  46BB
14000  46BC
14001  46BD
14002  46BE
14003  46BF
14004  46C0
14005  46C1
14006  46C2
14007  46C3
14008  46C4
14009  46C5
14010  46C6
14011  46C7
14012  46C8
14013  46C9
14014  46CA
14015  46CB
14016  46CC
14017  46CD
14018  46CE
14019  46CF
14020  46D0
14021  46D1
14022  46D2
14023  46D3
14024  46D4
14025  46D5
14026  46D6
14027  46D7
14028  46D8
14029  46D9
14030  46DA
14031  46DB
14032  46DC
14033  46DD
14034  46DE
14035  46DF
14036  46E0
14037  46E1
14038  46E2
14039  46E3
14040  46E4
14041  46E5
14042  46E6
14043  46E7
14044  46E8
14045  46E9
14046  46EA
14047  46EB
14048  46EC
14049  46ED
14050  46EE
14051  46EF
14052  46F0
14053  46F1
14054  46F2
14055  46F3
14056  46F4
14057  46F5
14058  46F6
14059  46F7
14060  46F8
14061  46F9
14062  46FA
14063  46FB
14064  46FC
14065  46FD
14066  46FE
14067  46FF
14068  4700
14069  4701
14070  4702
14071  4703
14072  4704
14073  4705
14074  4706
14075  4707
14076  4708
14077  4709
14078  470A
14079  470B
14080  470C
14081  470D
14082  470E
14083  470F
14084  4710
14085  4711
14086  4712
14087  4713
14088  4714
14089  4715
14090  4716
14091  4717
14092  4718
14093  4719
14094  471A
14095  471B
14096  471C
14097  471D
14098  471E
14099  471F
14100  4720
14101  4721
14102  4722
14103  4723
14104  4724
14105  4725
14106  4726
14107  4727
14108  4728
14109  4729
14110  472A
14111  472B
14112  472C
14113  472D
14114  472E
14115  472F
14116  4730
14117  4731
14118  4732
14119  4733
14120  4734
14121  4735
14122  4736
14123  4737
14124  4738
14125  4739
14126  473A
14127  473B
14128  473C
14129  473D
14130  473E
14131  473F
14132  4740
14133  4741
14134  4742
14135  4743
14136  4744
14137  4745
14138  4746
14139  4747
14140  4748
14141  4749
14142  474A
14143  474B
14144  474C
14145  474D
14146  474E
14147  474F
14148  4750
14149  4751
14150  4752
14151  4753
14152  4754
14153  4755
14154  4756
14155  4757
14156  4758
14157  4759
14158  475A
14159  475B
14160  475C
14161  475D
14162  475E
14163  475F
14164  4760
14165  4761
14166  4762
14167  4763
14168  4764
14169  4765
14170  4766
14171  4767
14172  4768
14173  4769
14174  476A
14175  476B
14176  476C
14177  476D
14178  476E
14179  476F
14180  4770
14181  4771
14182  4772
14183  4773
14184  4774
14185  4775
14186  4776
14187  4777
14188  4778
14189  4779
14190  477A
14191  477B
14192  477C
14193  477D
14194  477E
14195  477F
14196  4780
14197  4781
14198  4782
14199  4783
14200  4784
14201  4785
14202  4786
14203  4787
14204  4788
14205  4789
14206  478A
14207  478B
14208  478C
14209  478D
14210  478E
14211  478F
14212  4790
14213  4791
14214  4792
14215  4793
14216  4794
14217  4795
14218  4796
14219  4797
14220  4798
14221  4799
14222  479A
14223  479B
14224  479C
14225  479D
14226  479E
14227  479F
14228  47A0
14229  47A1
14230  47A2
14231  47A3
14232  47A4
14233  47A5
14234  47A6
14235  47A7
14236  47A8
14237  47A9
14238  47AA
14239  47AB
14240  47AC
14241  47AD
14242  47AE
14243  47AF
14244  47B0
14245  47B1
14246  47B2
14247  47B3
14248  47B4
14249  47B5
14250  47B6
14251  47B7
14252  47B8
14253  47B9
14254  47BA
14255  47BB
14256  47BC
14257  47BD
14258  47BE
14259  47BF
14260  47C0
14261  47C1
14262  47C2
14263  47C3
14264  47C4
14265  47C5
14266  47C6
14267  47C7
14268  47C8
14269  47C9
14270  47CA
14271  47CB
14272  47CC
14273  47CD
14274  47CE
14275  47CF
14276  47D0
14277  47D1
14278  47D2
14279  47D3
14280  47D4
14281  47D5
14282  47D6
14283  47D7
14284  47D8
14285  47D9
14286  47DA
14287  47DB
14288  47DC
14289  47DD
14290  47DE
14291  47DF
14292  47E0
14293  47E1
14294  47E2
14295  47E3
14296  47E4
14297  47E5
14298  47E6
14299  47E7
14300  47E8
14301  47E9
14302  47EA
14303  47EB
14304  47EC
14305  47ED
14306  47EE
14307  47EF
14308  47F0
14309  47F1
14310  47F2
14311  47F3
14312  47F4
14313  47F5
14314  47F6
14315  47F7
14316  47F8
14317  47F9
14318  47FA
14319  47FB
14320  47FC
14321  47FD
14322  47FE
14323  47FF
14324  4800
14325  4801
14326  4802
14327  4803
14328  4804
14329  4805
14330  4806
14331  4807
14332  4808
14333  4809
14334  480A
14335  480B
14336  480C
14337  480D
14338  480E
14339  480F
14340  4810
14341  4811
14342  4812
14343  4813
14344  4814
14345  4815
14346  4816
14347  4817
14348  4818
14349  4819
14350  481A
14351  481B
14352  481C
14353  481D
14354  481E
14355  481F
14356  4820
14357  4821
14358  4822
14359  4823
14360  4824
14361  4825
14362  4826
14363  4827
14364  4828
14365  4829
14366  482A
14367  482B
14368  482C
14369  482D
14370  482E
14371  482F
14372  4830
14373  4831
14374  4832
14375  4833
14376  4834
14377  4835
14378  4836
14379  4837
14380  4838
14381  4839
14382  483A
14383  483B
14384  483C
14385  483D
14386  483E
14387  483F
14388  4840
14389  4841
14390  4842
14391  4843
14392  4844
14393  4845
14394  4846
14395  4847
14396  4848
14397  4849
14398  484A
14399  484B
14400  484C
14401  484D
14402  484E
14403  484F
14404  4850
14405  4851
14406  4852
14407  4853
14408  4854
14409  4855
14410  4856
14411  4857
14412  4858
14413  4859
14414  485A
14415  485B
14416  485C
14417  485D
14418  485E
14419  485F
14420  4860
14421  4861
14422  4862
14423  4863
14424  4864
14425  4865
14426  4866
14427  4867
14428  4868
14429  4869
14430  486A
14431  486B
14432  486C
14433  486D
14434  486E
14435  486F
14436  4870
14437  4871
14438  4872
14439  4873
14440  4874
14441  4875
14442  4876
14443  4877
14444  4878
14445  4879
14446  487A
14447  487B
14448  487C
14449  487D
14450  487E
14451  487F
14452  4880
14453  4881
14454  4882
14455  4883
14456  4884
14457  4885
14458  4886
14459  4887
14460  4888
14461  4889
14462  488A
14463  488B
14464  488C
14465  488D
14466  488E
14467  488F
14468  4890
14469  4891
14470  4892
14471  4893
14472  4894
14473  4895
14474  4896
14475  4897
14476  4898
14477  4899
14478  489A
14479  489B
14480  489C
14481  489D
14482  489E
14483  489F
14484  48A0
14485  48A1
14486  48A2
14487  48A3
14488  48A4
14489  48A5
14490  48A6
14491  48A7
14492  48A8
14493  48A9
14494  48AA
14495  48AB
14496  48AC
14497  48AD
14498  48AE
14499  48AF
14500  48B0
14501  48B1
14502  48B2
14503  48B3
14504  48B4
14505  48B5
14506  48B6
14507  48B7
14508  48B8
14509  48B9
14510  48BA
14511  48BB
14512  48BC
14513  48BD
14514  48BE
14515  48BF
14516  48C0
14517  48C1
14518  48C2
14519  48C3
14520  48C4
14521  48C5
14522  48C6
14523  48C7
14524  48C8
14525  48C9
14526  48CA
14527  48CB
14528  48CC
14529  48CD
14530  48CE
14531  48CF
14532  48D0
14533  48D1
14534  48D2
14535  48D3
14536  48D4
14537  48D5
14538  48D6
14539  48D7
14540  48D8
14541  48D9
14542  48DA
14543  48DB
14544  48DC
14545  48DD
14546  48DE
14547  48DF
14548  48E0
14549  48E1
14550  48E2
14551  48E3
14552  48E4
14553  48E5
14554  48E6
14555  48E7
14556  48E8
14557  48E9
14558  48EA
14559  48EB
14560  48EC
14561  48ED
14562  48EE
14563  48EF
14564  48F0
14565  48F1
14566  48F2
14567  48F3
14568  48F4
14569  48F5
14570  48F6
14571  48F7
14572  48F8
14573  48F9
14574  48FA
14575  48FB
14576  48FC
14577  48FD
14578  48FE
14579  48FF
14580  4900
14581  4901
14582  4902
14583  4903
14584  4904
14585  4905
14586  4906
14587  4907
14588  4908
14589  4909
14590  490A
14591  490B
14592  490C
14593  490D
14594  490E
14595  490F
14596  4910
14597  4911
14598  4912
14599  4913
14600  4914
14601  4915
14602  4916
14603  4917
14604  4918
14605  4919
14606  491A
14607  491B
14608  491C
14609  491D
14610  491E
14611  491F
14612  4920
14613  4921
14614  4922
14615  4923
14616  4924
14617  4925
14618  4926
14619  4927
14620  4928
14621  4929
14622  492A
14623  492B
14624  492C
14625  492D
14626  492E
14627  492F
14628  4930
14629  4931
14630  4932
14631  4933
14632  4934
14633  4935
14634  4936
14635  4937
14636  4938
14637  4939
14638  493A
14639  493B
14640  493C
14641  493D
14642  493E
14643  493F
14644  4940
14645  4941
14646  4942
14647  4943
14648  4944
14649  4945
14650  4946
14651  4947
14652  4948
14653  4949
14654  494A
14655  494B
14656  494C
14657  494D
14658  494E
14659  494F
14660  4950
14661  4951
14662  4952
14663  4953
14664  4954
14665  4955
14666  4956
14667  4957
14668  4958
14669  4959
14670  495A
14671  495B
14672  495C
14673  495D
14674  495E
14675  495F
14676  4960
14677  4961
14678  4962
14679  4963
14680  4964
14681  4965
14682  4966
14683  4967
14684  4968
14685  4969
14686  496A
14687  496B
14688  496C
14689  496D
14690  496E
14691  496F
14692  4970
14693  4971
14694  4972
14695  4973
14696  4974
14697  4975
14698  4976
14699  4977
14700  4978
14701  4979
14702  497A
14703  497B
14704  497C
14705  497D
14706  497E
14707  497F
14708  4980
14709  4981
14710  4982
14711  4983
14712  4984
14713  4985
14714  4986
14715  4987
14716  4988
14717  4989
14718  498A
14719  498B
14720  498C
14721  498D
14722  498E
14723  498F
14724  4990
14725  4991
14726  4992
14727  4993
14728  4994
14729  4995
14730  4996
14731  4997
14732  4998
14733  4999
14734  499A
14735  499B
14736  499C
14737  499D
14738  499E
14739  499F
14740  49A0
14741  49A1
14742  49A2
14743  49A3
14744  49A4
14745  49A5
14746  49A6
14747  49A7
14748  49A8
14749  49A9
14750  49AA
14751  49AB
14752  49AC
14753  49AD
14754  49AE
14755  49AF
14756  49B0
14757  49B1
14758  49B2
14759  49B3
14760  49B4
14761  49B5
14762  49B6
14763  49B7
14764  49B8
14765  49B9
14766  49BA
14767  49BB
14768  49BC
14769  49BD
14770  49BE
14771  49BF
14772  49C0
14773  49C1
14774  49C2
14775  49C3
14776  49C4
14777  49C5
14778  49C6
14779  49C7
14780  49C8
14781  49C9
14782  49CA
14783  49CB
14784  49CC
14785  49CD
14786  49CE
14787  49CF
14788  49D0
14789  49D1
14790  49D2
14791  49D3
14792  49D4
14793  49D5
14794  49D6
14795  49D7
14796  49D8
14797  49D9
14798  49DA
14799  49DB
14800  49DC
14801  49DD
14802  49DE
14803  49DF
14804  49E0
14805  49E1
14806  49E2
14807  49E3
14808  49E4
14809  49E5
14810  49E6
14811  49E7
14812  49E8
14813  49E9
14814  49EA
14815  49EB
14816  49EC
14817  49ED
14818  49EE
14819  49EF
14820  49F0
14821  49F1
14822  49F2
14823  49F3
14824  49F4
14825  49F5
14826  49F6
14827  49F7
14828  49F8
14829  49F9
14830  49FA
14831  49FB
14832  49FC
14833  49FD
14834  49FE
14835  49FF
14836  4A00
14837  4A01
14838  4A02
14839  4A03
14840  4A04
14841  4A05
14842  4A06
14843  4A07
14844  4A08
14845  4A09
14846  4A0A
14847  4A0B
14848  4A0C
14849  4A0D
14850  4A0E
14851  4A0F
14852  4A10
14853  4A11
14854  4A12
14855  4A13
14856  4A14
14857  4A15
14858  4A16
14859  4A17
14860  4A18
14861  4A19
14862  4A1A
14863  4A1B
14864  4A1C
14865  4A1D
14866  4A1E
14867  4A1F
14868  4A20
14869  4A21
14870  4A22
14871  4A23
14872  4A24
14873  4A25
14874  4A26
14875  4A27
14876  4A28
14877  4A29
14878  4A2A
14879  4A2B
14880  4A2C
14881  4A2D
14882  4A2E
14883  4A2F
14884  4A30
14885  4A31
14886  4A32
14887  4A33
14888  4A34
14889  4A35
14890  4A36
14891  4A37
14892  4A38
14893  4A39
14894  4A3A
14895  4A3B
14896  4A3C
14897  4A3D
14898  4A3E
14899  4A3F
14900  4A40
14901  4A41
14902  4A42
14903  4A43
14904  4A44
14905  4A45
14906  4A46
14907  4A47
14908  4A48
14909  4A49
14910  4A4A
14911  4A4B
14912  4A4C
14913  4A4D
14914  4A4E
14915  4A4F
14916  4A50
14917  4A51
14918  4A52
14919  4A53
14920  4A54
14921  4A55
14922  4A56
14923  4A57
14924  4A58
14925  4A59
14926  4A5A
14927  4A5B
14928  4A5C
14929  4A5D
14930  4A5E
14931  4A5F
14932  4A60
14933  4A61
14934  4A62
14935  4A63
14936  4A64
14937  4A65
14938  4A66
14939  4A67
14940  4A68
14941  4A69
14942  4A6A
14943  4A6B
14944  4A6C
14945  4A6D
14946  4A6E
14947  4A6F
14948  4A70
14949  4A71
14950  4A72
14951  4A73
14952  4A74
14953  4A75
14954  4A76
14955  4A77
14956  4A78
14957  4A79
14958  4A7A
14959  4A7B
14960  4A7C
14961  4A7D
14962  4A7E
14963  4A7F
14964  4A80
14965  4A81
14966  4A82
14967  4A83
14968  4A84
14969  4A85
14970  4A86
14971  4A87
14972  4A88
14973  4A89
14974  4A8A
14975  4A8B
14976  4A8C
14977  4A8D
14978  4A8E
14979  4A8F
14980  4A90
14981  4A91
14982  4A92
14983  4A93
14984  4A94
14985  4A95
14986  4A96
14987  4A97
14988  4A98
14989  4A99
14990  4A9A
14991  4A9B
14992  4A9C
14993  4A9D
14994  4A9E
14995  4A9F
14996  4AA0
14997  4AA1
14998  4AA2
14999  4AA3
15000  4AA4
15001  4AA5
15002  4AA6
15003  4AA7
15004  4AA8
15005  4AA9
15006  4AAA
15007  4AAB
15008  4AAC
15009  4AAD
15010  4AAE
15011  4AAF
15012  4AB0
15013  4AB1
15014  4AB2
15015  4AB3
15016  4AB4
15017  4AB5
15018  4AB6
15019  4AB7
15020  4AB8
15021  4AB9
15022  4ABA
15023  4ABB
15024  4ABC
15025  4ABD
15026  4ABE
15027  4ABF
15028  4AC0
15029  4AC1
15030  4AC2
15031  4AC3
15032  4AC4
15033  4AC5
15034  4AC6
15035  4AC7
15036  4AC8
15037  4AC9
15038  4ACA
15039  4ACB
15040  4ACC
15041  4ACD
15042  4ACE
15043  4ACF
15044  4AD0
15045  4AD1
15046  4AD2
15047  4AD3
15048  4AD4
15049  4AD5
15050  4AD6
15051  4AD7
15052  4AD8
15053  4AD9
15054  4ADA
15055  4ADB
15056  4ADC
15057  4ADD
15058  4ADE
15059  4ADF
15060  4AE0
15061  4AE1
15062  4AE2
15063  4AE3
15064  4AE4
15065  4AE5
15066  4AE6
15067  4AE7
15068  4AE8
15069  4AE9
15070  4AEA
15071  4AEB
15072  4AEC
15073  4AED
15074  4AEE
15075  4AEF
15076  4AF0
15077  4AF1
15078  4AF2
15079  4AF3
15080  4AF4
15081  4AF5
15082  4AF6
15083  4AF7
15084  4AF8
15085  4AF9
15086  4AFA
15087  4AFB
15088  4AFC
15089  4AFD
15090  4AFE
15091  4AFF
15092  4B00
15093  4B01
15094  4B02
15095  4B03
15096  4B04
15097  4B05
15098  4B06
15099  4B07
15100  4B08
15101  4B09
15102  4B0A
15103  4B0B
15104  4B0C
15105  4B0D
15106  4B0E
15107  4B0F
15108  4B10
15109  4B11
15110  4B12
15111  4B13
15112  4B14
15113  4B15
15114  4B16
15115  4B17
15116  4B18
15117  4B19
15118  4B1A
15119  4B1B
15120  4B1C
15121  4B1D
15122  4B1E
15123  4B1F
15124  4B20
15125  4B21
15126  4B22
15127  4B23
15128  4B24
15129  4B25
15130  4B26
15131  4B27
15132  4B28
15133  4B29
15134  4B2A
15135  4B2B
15136  4B2C
15137  4B2D
15138  4B2E
15139  4B2F
15140  4B30
15141  4B31
15142  4B32
15143  4B33
15144  4B34
15145  4B35
15146  4B36
15147  4B37
15148  4B38
15149  4B39
15150  4B3A
15151  4B3B
15152  4B3C
15153  4B3D
15154  4B3E
15155  4B3F
15156  4B40
15157  4B41
15158  4B42
15159  4B43
15160  4B44
15161  4B45
15162  4B46
15163  4B47
15164  4B48
15165  4B49
15166  4B4A
15167  4B4B
15168  4B4C
15169  4B4D
15170  4B4E
15171  4B4F
15172  4B50
15173  4B51
15174  4B52
15175  4B53
15176  4B54
15177  4B55
15178  4B56
15179  4B57
15180  4B58
15181  4B59
15182  4B5A
15183  4B5B
15184  4B5C
15185  4B5D
15186  4B5E
15187  4B5F
15188  4B60
15189  4B61
15190  4B62
15191  4B63
15192  4B64
15193  4B65
15194  4B66
15195  4B67
15196  4B68
15197  4B69
15198  4B6A
15199  4B6B
15200  4B6C
15201  4B6D
15202  4B6E
15203  4B6F
15204  4B70
15205  4B71
15206  4B72
15207  4B73
15208  4B74
15209  4B75
15210  4B76
15211  4B77
15212  4B78
15213  4B79
15214  4B7A
15215  4B7B
15216  4B7C
15217  4B7D
15218  4B7E
15219  4B7F
15220  4B80
15221  4B81
15222  4B82
15223  4B83
15224  4B84
15225  4B85
15226  4B86
15227  4B87
15228  4B88
15229  4B89
15230  4B8A
15231  4B8B
15232  4B8C
15233  4B8D
15234  4B8E
15235  4B8F
15236  4B90
15237  4B91
15238  4B92
15239  4B93
15240  4B94
15241  4B95
15242  4B96
15243  4B97
15244  4B98
15245  4B99
15246  4B9A
15247  4B9B
15248  4B9C
15249  4B9D
15250  4B9E
15251  4B9F
15252  4BA0
15253  4BA1
15254  4BA2
15255  4BA3
15256  4BA4
15257  4BA5
15258  4BA6
15259  4BA7
15260  4BA8
15261  4BA9
15262  4BAA
15263  4BAB
15264  4BAC
15265  4BAD
15266  4BAE
15267  4BAF
15268  4BB0
15269  4BB1
15270  4BB2
15271  4BB3
15272  4BB4
15273  4BB5
15274  4BB6
15275  4BB7
15276  4BB8
15277  4BB9
15278  4BBA
15279  4BBB
15280  4BBC
15281  4BBD
15282  4BBE
15283  4BBF
15284  4BC0
15285  4BC1
15286  4BC2
15287  4BC3
15288  4BC4
15289  4BC5
15290  4BC6
15291  4BC7
15292  4BC8
15293  4BC9
15294  4BCA
15295  4BCB
15296  4BCC
15297  4BCD
015298  000549        
015299  000550  var hFonts[53] ;
015300  000551  var stringsCV[53] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
15301  2654
15302  2655
15303  2656
15304  2657
15305  2658
15306  2659
15307  265A
15308  265B
15309  265C
15310  265D
15311  265E
15312  265F
15313  2660
15314  2661
15315  2662
15316  2663
15317  2664
15318  2665
15319  2666
15320  2667
15321  2668
15322  2669
15323  266A
15324  266B
15325  266C
15326  266D
15327  266E
15328  266F
15329  2670
15330  2671
15331  2672
15332  2673
15333  2674
15334  2675
15335  2676
15336  2677
15337  2678
15338  2679
15339  267A
15340  267B
15341  267C
15342  267D
15343  267E
15344  267F
15345  2680
15346  2681
15347  2682
15348  2683
15349  2684
15350  2685
15351  2686
15352  2687
15353  2688
15354  2689
15355  268A
15356  268B
15357  268C
15358  268D
15359  268E
15360  268F
15361  2690
15362  2691
15363  2692
15364  2693
15365  2694
15366  2695
15367  2696
15368  2697
15369  2698
15370  2699
15371  269A
15372  269B
15373  269C
15374  269D
15375  269E
15376  269F
15377  26A0
15378  26A1
15379  26A2
15380  26A3
15381  26A4
15382  26A5
15383  26A6
15384  26A7
15385  26A8
15386  26A9
15387  26AA
15388  26AB
15389  26AC
15390  26AD
15391  26AE
15392  26AF
15393  26B0
15394  26B1
15395  26B2
15396  26B3
15397  26B4
15398  26B5
15399  26B6
15400  26B7
15401  26B8
15402  26B9
15403  26BA
15404  26BB
15405  26BC
15406  26BD
015407  000552  // Start P2.inc
015408  000553  var oObjects[MaxTotObjects+1] ;                 // address of objects
015409  000554  var CurrentForm ;
015410  000555  var TouchXpos, TouchYpos ;
015411  000556  var InputType, TouchState, CurInputData, pInputIndex ;
015412  000557  var comRX[40], cmd[CMDLenMAX] ;
015413  000558        
015414  000559  var InputCS, OutputCS ;
015415  000560        
015416  000561        
015417  000562        
015418  000563  func seroutCS(var op)
015419  000564      serout(op) ;
015420  000565      OutputCS ^= op ;
015421  000566  endfunc
015422  000567        
015423  000568  func nak0()
015424  000569      serout(NAK) ;
015425  000570      InputCS := 0 ;
015426  000571  endfunc
015427  000572        
015428  000573  func seroutOcs()
015429  000574      serout(OutputCS) ;
015430  000575      OutputCS := 0 ;
015431  000576  endfunc
015432  000577        
015433  000578  func SendReport(var id, var objt, var objn, var val)
015434  000579      seroutCS(id) ;
015435  000580      seroutCS(objt) ;
015436  000581      seroutCS(objn) ;
015437  000582      seroutCS(val >> 8) ; // first 8 bits
015438  000583      seroutCS(val) ;
015439  000584      seroutOcs() ;
015440  000585  endfunc
015441  000586        
015442  000587        
015443  000588  func ReadObject(var ObjectType, var ObjectIdx)
015444  000589      var j, k, Objects ;
015445  000590      Objects := *(oObjects+ObjectType) ;
015446  000591        
015447  000592      j := 2 + ObjectIdx * 2 + Objects ;
015448  000593       if (ObjectType == tForm)
015449  000594          k := CurrentForm ;
015450  000595      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
015451  000596          k := img_GetWord(hndl, *j, IMAGE_TAG2);
015452  000597      else if (ObjectType == tStrings)
015453  000598          k := stringsCV[ObjectIdx];
015454  000599          else
015455  000600          k := img_GetWord(hndl, *j, IMAGE_INDEX);
015456  000601          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
015457  000602                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
015458  000603      endif
015459  000604      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
015460  000605  endfunc
015461  000606        
015462  000607        
015463  000608  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
015464  000609      var i, j, k, Objects ;
015465  000610      ObjectType &= 0x3f ;
015466  000611      if (ObjectType == tForm)
015467  000612          ActivateForm(ObjectIdx) ;
015468  000613      else
015469  000614          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
015470  000615          i := *(Objects) ;
015471  000616          switch (ObjectType)
015472  000617              case tWinButton :
015473  000618                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
015474  000619                  break ;
015475  000620              case tUserButton :
015476  000621                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
015477  000622                  break ;
015478  000623              default : j := -1 ;
015479  000624          endswitch
015480  000625          if (j != -1)
015481  000626              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
015482  000627              NewVal := NewVal << 1 ;
015483  000628              if (OVF())      // button group index change
015484  000629                  if (*(j+InputData+Ofs_IPD_P1))
015485  000630                      k &= 1 ;    // mask off old group index for momentary
015486  000631                  else
015487  000632                      k &= 3 ;    // mask off old group index for toggle
015488  000633                  endif
015489  000634              else            // normal set
015490  000635                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
015491  000636                  k &= 0xfffc ;    // retain only group index for state set
015492  000637              endif
015493  000638              NewVal |= k ;
015494  000639          endif
015495  000640           if (ObjectType == tLeddigits)
015496  000641              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
015497  000642              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015498  000643          else if (ObjectType == tStrings)
015499  000644              PrintStrings(ObjectIdx, NewVal, 0);
015500  000645          else
015501  000646              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
015502  000647              img_Show(hndl, i) ; // will only display if form is current
015503  000648          endif
015504  000649      endif
015505  000650  endfunc
015506  000651        
015507  000652  func TurnOffButtons(var group)
015508  000653      var j, k, l;
015509  000654      for (j := 0; j < nInputs; j++)
015510  000655          k := j*IPDatasize ;
015511  000656          if (*(InputData+k+Ofs_IPD_P2) == group)
015512  000657              l := -1 ;
015513  000658               if (*(InputData+k) == tWinButton)
015514  000659                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015515  000660                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
015516  000661                  img_Show(hndl, l);      // only shows on current form
015517  000662              else if (*(InputData+k) == tUserButton)
015518  000663                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015519  000664                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
015520  000665                  img_Show(hndl, l);      // only shows on current form
015521  000666              endif
015522  000667          endif
015523  000668      next
015524  000669  endfunc
015525  000670        
015526  000671        
015527  000672  // WARNING, this code will crash if newval exceeds maximum displayable number
015528  000673  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
015529  000674      var i, j, k, l, lb, newval ;
015530  000675      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
015531  000676      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
015532  000677      i := -1 ;
015533  000678      j := *(typeptr) ;
015534  000679      repeat
015535  000680          typeptr += 2 ;
015536  000681          i++ ;
015537  000682          until (*(typeptr) == imgidx);
015538  000683      j := setptr + i*10 ;
015539  000684        
015540  000685      imgidx++ ;
015541  000686      l := 1 ;
015542  000687      for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
015543  000688          l *= 10 ;
015544  000689      next
015545  000690      lb := *(j+Ofs_Digits_LeadingBlanks) ;
015546  000691      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
015547  000692          k := newval / l ;
015548  000693          newval -= k * l ;
015549  000694          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
015550  000695              if (k == 0)
015551  000696                  k := 10 ;
015552  000697              else
015553  000698                  lb := 0 ;
015554  000699              endif
015555  000700          endif
015556  000701          l /= 10 ;
015557  000702          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
015558  000703          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
015559  000704          img_Show(hndl, imgidx);
015560  000705      next
015561  000706  endfunc
015562  000707        
015563  000708        
015564  000709  func ActivateForm(var newform)
015565  000710      var i, j, *p ;
015566  000711        
015567  000712      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
015568  000713          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
015569  000714              if (img_GetWord(hndl, i, IMAGE_TAG))
015570  000715                  img_Disable(hndl,i) ;
015571  000716              endif
015572  000717          next
015573  000718      endif
015574  000719      CurrentForm := newform ;
015575  000720      // display newform image or clear to image color
015576  000721      if (FormBGcolors[CurrentForm] != ColorBGimage)
015577  000722          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
015578  000723          gfx_Cls() ;
015579  000724          DoGFXObjects() ;                                    // display GFX 'widgets'
015580  000725      endif
015581  000726        
015582  000727      // enable inputs
015583  000728      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
015584  000729          j := img_GetWord(hndl, i, IMAGE_TAG) ;
015585  000730          if (j)
015586  000731              j-- ;
015587  000732              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
015588  000733              //if (j != tKeyboard)
015589  000734              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
015590  000735                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
015591  000736              endif
015592  000737              img_Show(hndl,i) ; // show initialy, if required
015593  000738              if (j == tForm)
015594  000739                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
015595  000740              else if (j == tLeddigits)
015596  000741                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015597  000742              endif
015598  000743          endif
015599  000744      next
015600  000745      for (i := 0; i < nStrings; i++)
015601  000746          if (stringsCV[i] != -1)
015602  000747              WriteObject(tStrings, i, stringsCV[i]) ;
015603  000748          endif
015604  000749      next
015605  000750        
015606  000751  endfunc
015607  000752        
015608  000753  func UpdateObjects(var newval)
015609  000754      var IPidx, otherOBJ ;
015610  000755      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
015611  000756        
015612  000757          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
015613  000758              img_Show(hndl, *(pInputIndex));      // only shows on current form
015614  000759          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
015615  000760              if (*(CurInputData+Ofs_IPD_P1))
015616  000761                  newval &= 1;
015617  000762              else
015618  000763                  newval &= 3;
015619  000764              endif
015620  000765              if (newval > 1) newval := 1;
015621  000766          endif
015622  000767          IPidx := *(CurInputData+TouchState) ;
015623  000768          while(IPidx != 0)
015624  000769              otherOBJ := IPidx + InputData;
015625  000770              if (*(otherOBJ) == OT_REPORT)
015626  000771          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
015627  000772              else if (*(otherOBJ) == OT_MAGIC)
015628  000773                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
015629  000774                  IPidx(newval) ;
015630  000775              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
015631  000776                  if (*(otherOBJ) == OT_ACTIVATE)
015632  000777                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
015633  000778                      InputType := tForm ;
015634  000779                  else if (*(otherOBJ) == OT_SETCONST)
015635  000780                      newval := *(otherOBJ+Ofs_IPD_P3) ;
015636  000781                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015637  000782                  else if (*(otherOBJ) == OT_SETANOTHER)
015638  000783                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015639  000784                  else if (*(otherOBJ) == OT_PREVFRAME)
015640  000785                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
015641  000786                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
015642  000787                      endif
015643  000788                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015644  000789                  else if (*(otherOBJ) == OT_NEXTFRAME)
015645  000790                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
015646  000791                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
015647  000792                      endif
015648  000793                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015649  000794                  else if (*(otherOBJ) == OT_PREVSTRING)
015650  000795                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
015651  000796                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
015652  000797                      endif
015653  000798                  else if (*(otherOBJ) == OT_NEXTSTRING)
015654  000799                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
015655  000800                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
015656  000801                      endif
015657  000802                  endif
015658  000803              endif
015659  000804              IPidx := *(otherOBJ+TouchState) ;
015660  000805          wend
015661  000806      endif
015662  000807  endfunc
015663  000808        
015664  000809  // End P2.inc
015665  000810  func DoGFXObjects()
015666  000811  endfunc
015667  000812        
015668  000813  // Start P3.inc
015669  000814  func main()
015670  000815      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
015671  000816        
015672  000817      putstr("Mounting...\n");
015673  000818      if (!(file_Mount()))
015674  000819          while(!(file_Mount()))
015675  000820              putstr("Drive not mounted...");
015676  000821              pause(200);
015677  000822              gfx_Cls();
015678  000823              pause(200);
015679  000824          wend
015680  000825      endif
015681  000826  //    gfx_MoveTo(0, 0);
015682  000827  //    print(mem_Heap()," ") ;
015683  000828  //    gfx_TransparentColour(0x0020);
015684  000829  //    gfx_Transparency(ON);
015685  000830        
015686  000831      gfx_ScreenMode(LANDSCAPE) ;
015687  000832        
015688  000833      // open image control
015689  000834      hndl := file_LoadImageControl("REPRAP~2.dat", "REPRAP~2.gci", 1);
015690  000835        
015691  000836      // init 'constants'
015692  000837  // End P3.inc
015693  000838        
015694  000839      oObjects[tDipSwitch] := oDipSwitchs ;
015695  000840      oObjects[tKnob] := oKnobs ;
015696  000841      oObjects[tRockerSwitch] := oRockerSwitchs ;
015697  000842      oObjects[tRotarySwitch] := oRotarySwitchs ;
015698  000843      oObjects[tGSlider] := oGSliders ;
015699  000844      oObjects[tTrackbar] := oTrackbars ;
015700  000845      oObjects[tWinButton] := oWinButtons ;
015701  000846      oObjects[tAngularmeter] := oAngularmeters ;
015702  000847      oObjects[tCoolgauge] := oCoolgauges ;
015703  000848      oObjects[tCustomdigits] := oCustomdigitss ;
015704  000849      oObjects[tForm] := oForms ;
015705  000850      oObjects[tGauge] := oGauges ;
015706  000851      oObjects[tImage] := oImages ;
015707  000852      oObjects[tKeyboard] := oKeyboards ;
015708  000853      oObjects[tLed] := oLeds ;
015709  000854      oObjects[tLeddigits] := oLeddigitss ;
015710  000855      oObjects[tMeter] := oMeters ;
015711  000856      oObjects[tStrings] := oStringss ;
015712  000857      oObjects[tThermometer] := oThermometers ;
015713  000858      oObjects[tUserled] := oUserleds ;
015714  000859      oObjects[tVideo] := oVideos ;
015715  000860      oObjects[tStaticText] := oStaticTexts ;
015716  000861      oObjects[tSounds] := oSoundss ;
015717  000862      oObjects[tTimer] := oTimers ;
015718  000863      oObjects[tSpectrum] := oSpectrums ;
015719  000864      oObjects[tTank] := oTanks ;
015720  000865      oObjects[tUserImages] := oUserImagess ;
015721  000866      oObjects[tPinOutput] := oPinOutputs ;
015722  000867      oObjects[tPinInput] := oPinInputs ;
015723  000868      oObjects[t4Dbutton] := o4Dbuttons ;
015724  000869      oObjects[tAniButton] := oAniButtons ;
015725  000870      oObjects[tColorPicker] := oColorPickers ;
015726  000871      oObjects[tUserButton] := oUserButtons ;
015727  000872      hFonts[0] := file_LoadImageControl("REPRAP~2.d03", "REPRAP~2.g03", 1)  ;
015728  000873      hFonts[1] := file_LoadImageControl("REPRAP~2.d01", "REPRAP~2.g01", 1)  ;
015729  000874      hFonts[2] := file_LoadImageControl("REPRAP~2.d02", "REPRAP~2.g02", 1)  ;
015730  000875      hFonts[3] := FONT3 ;
015731  000876      hFonts[4] := FONT3 ;
015732  000877      hFonts[5] := FONT3 ;
015733  000878      hFonts[6] := FONT3 ;
015734  000879      hFonts[11] := file_LoadImageControl("REPRAP~2.d05", "REPRAP~2.g05", 1)  ;
015735  000880      hFonts[12] := FONT3 ;
015736  000881      hFonts[13] := file_LoadImageControl("REPRAP~2.d07", "REPRAP~2.g07", 1)  ;
015737  000882      hFonts[14] := FONT3 ;
015738  000883      hFonts[15] := FONT3 ;
015739  000884      hFonts[16] := FONT3 ;
015740  000885      hFonts[20] := FONT3 ;
015741  000886      hFonts[21] := FONT3 ;
015742  000887      hFonts[22] := FONT3 ;
015743  000888      hFonts[23] := FONT3 ;
015744  000889      hFonts[24] := FONT3 ;
015745  000890      hFonts[28] := FONT3 ;
015746  000891      hFonts[33] := file_LoadImageControl("REPRAP~2.d06", "REPRAP~2.g06", 1)  ;
015747  000892      hFonts[35] := FONT3 ;
015748  000893      hFonts[37] := file_LoadImageControl("REPRAP~2.d04", "REPRAP~2.g04", 1)  ;
015749  000894      hFonts[46] := file_LoadImageControl("REPRAP~2.d08", "REPRAP~2.g08", 1)  ;
015750  000895      hFonts[49] := file_LoadImageControl("REPRAP~2.d09", "REPRAP~2.g09", 1)  ;
015751  000896      hFonts[51] := FONT3 ;
015752  000897      hFonts[52] := FONT3 ;
015753  000898      hFonts[7] := hFonts[37] ;
015754  000899      hFonts[8] := hFonts[37] ;
015755  000900      hFonts[9] := hFonts[0] ;
015756  000901      hFonts[10] := hFonts[11] ;
015757  000902      hFonts[17] := hFonts[11] ;
015758  000903      hFonts[18] := hFonts[11] ;
015759  000904      hFonts[19] := hFonts[11] ;
015760  000905      hFonts[25] := hFonts[11] ;
015761  000906      hFonts[26] := hFonts[11] ;
015762  000907      hFonts[27] := hFonts[11] ;
015763  000908      hFonts[29] := hFonts[11] ;
015764  000909      hFonts[30] := hFonts[11] ;
015765  000910      hFonts[31] := hFonts[1] ;
015766  000911      hFonts[32] := hFonts[1] ;
015767  000912      hFonts[34] := hFonts[0] ;
015768  000913      hFonts[36] := hFonts[0] ;
015769  000914      hFonts[38] := hFonts[37] ;
015770  000915      hFonts[39] := hFonts[37] ;
015771  000916      hFonts[40] := hFonts[0] ;
015772  000917      hFonts[41] := hFonts[0] ;
015773  000918      hFonts[42] := hFonts[0] ;
015774  000919      hFonts[43] := hFonts[37] ;
015775  000920      hFonts[44] := hFonts[37] ;
015776  000921      hFonts[45] := hFonts[37] ;
015777  000922      hFonts[47] := hFonts[46] ;
015778  000923      hFonts[48] := hFonts[46] ;
015779  000924      hFonts[50] := hFonts[49] ;
015780  000925  // Start P4.inc
015781  000926      hstrings := file_Open("REPRAP~2.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
015782  000927      // init comms
015783  000928      com_Init(comRX,CMDLenMAX,0);
015784  000929      com_SetBaud(COM0,19886);
015785  000930      com_TXbuffer(comTX, 100, 0);
015786  000931      snd_BufSize(2) ;
015787  000932      // tag 'real' objects
015788  000933      for (i := 0; i <= MaxTotObjects; i++)
015789  000934          if (   (i != tSounds)
015790  000935              && (i != tTimer)
015791  000936              && (i != tPinOutput)
015792  000937              && (i != tPinInput) )
015793  000938              TouchXpos := oObjects[i] ;
015794  000939              TouchYpos := *(TouchXpos) ;
015795  000940              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
015796  000941                  oldn := *(TouchXpos+ImageTouched*2) ;
015797  000942                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
015798  000943                  if (oldn != -1)
015799  000944                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
015800  000945                      img_Disable(hndl, oldn) ;
015801  000946                  endif
015802  000947              next
015803  000948          endif
015804  000949      next
015805  000950        
015806  000951      // display initial form
015807  000952      CurrentForm := -1 ;
015808  000953      ActivateForm(0) ; // need to change this according to first actual form
015809  000954        
015810  000955  // End P4.inc
015811  000956  // Start P5.inc
015812  000957      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
015813  000958      oldn := -1 ;
015814  000959      repeat
015815  000960        
015816  000961          // check comms for command, how to NAK invalid command
015817  000962          if (com_Count() != 0)
015818  000963              i := serin() ;
015819  000964              InputCS ^= i ;               // update checksum
015820  000965              if (   (cmdi > 2)
015821  000966                  && (cmd[0] == WRITE_STRU) )
015822  000967                  j := (cmdi-1) >> 1 + 2 ;
015823  000968                  if (j == CMDLenMAX)    // max length exceeded
015824  000969                      nak0() ;
015825  000970                      cmdi := -1 ;
015826  000971                  else if (cmdi & 1)
015827  000972                      cmd[j] := i ;
015828  000973                      if (cmd[2] == 0)    // if string complete
015829  000974                          if (InputCS)
015830  000975                              nak0() ;
015831  000976                          else
015832  000977                              if (cmd[0] == WRITE_STRU)
015833  000978                              cmd[j] := 0 ;                     // terminate it
015834  000979                              PrintStrings(cmd[1], &cmd[3], 1) ;
015835  000980                              serout(ACK) ;
015836  000981                              else
015837  000982                              endif
015838  000983                          endif
015839  000984                          cmdi := -1 ;
015840  000985                      endif
015841  000986                  else
015842  000987                      cmd[j] := cmd[j] << 8 + i ;
015843  000988                      cmd[2]-- ;          // dec length
015844  000989                  endif
015845  000990                  cmdi++ ;
015846  000991              else // not unicode string
015847  000992                  cmd[cmdi++] := i ;
015848  000993                   if (cmd[0] == WRITE_STR)                  // Ansi String
015849  000994                      if (cmdi == CMDLenMAX)      // max length exceeded
015850  000995                          nak0() ;
015851  000996                          cmdi := 0 ;
015852  000997                      else if (cmdi > 2)
015853  000998                          if (cmd[2] == -1)
015854  000999                              if (InputCS)
015855  001000                                  nak0() ;
015856  001001                              else
015857  001002                                  if (cmd[0] == WRITE_STR)
015858  001003                                  cmd[cmdi-1] := 0 ;                     // terminate it
015859  001004                                  PrintStrings(cmd[1], &cmd[3], 1) ;
015860  001005                                  serout(ACK) ;
015861  001006                                  else
015862  001007                                  endif
015863  001008                              endif
015864  001009                              cmdi := 0 ;
015865  001010                          else
015866  001011                              cmd[2]-- ;          // dec length
015867  001012                          endif
015868  001013                      endif
015869  001014                  else if (   (cmd[0] == READ_OBJ)
015870  001015                           && (cmdi == 4)         )
015871  001016                      if (InputCS)
015872  001017                          nak0() ;
015873  001018                      else
015874  001019                          ReadObject(cmd[1], cmd[2]) ;
015875  001020                      endif
015876  001021                      cmdi := 0 ;
015877  001022                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
015878  001023                           && (cmdi == 6)          )
015879  001024                      if (InputCS)
015880  001025                          nak0() ;
015881  001026                      else
015882  001027                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
015883  001028                          serout(ACK) ;
015884  001029                      endif
015885  001030                      cmdi := 0 ;
015886  001031                  else if (   (cmd[0] == WRITE_CONTRAST)
015887  001032                           && (cmdi == 3)         )
015888  001033                      if (InputCS)
015889  001034                          nak0() ;
015890  001035                      else
015891  001036                          gfx_Contrast(cmd[1]) ;
015892  001037                          serout(ACK) ;
015893  001038                      endif
015894  001039                      cmdi := 0 ;
015895  001040                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
015896  001041                      nak0() ;
015897  001042                      cmdi := 0 ;
015898  001043                  endif
015899  001044              endif   // not unicode string
015900  001045          endif   // a character is available
015901  001046        
015902  001047        
015903  001048      // touch code processing
015904  001049        
015905  001050          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
015906  001051          ImageTouched := img_Touched(hndl,-1) ;
015907  001052          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
015908  001053              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
015909  001054                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
015910  001055              endif
015911  001056              if (TouchStatus != TOUCH_RELEASED)        // if not released
015912  001057                  if (oldn != -1)
015913  001058                      ImageTouched := oldn ;
015914  001059                  else
015915  001060                      if (oldn != ImageTouched)
015916  001061                  oldn := ImageTouched ;
015917  001062                          TouchStatus := TOUCH_PRESSED ;
015918  001063                      endif
015919  001064                  endif
015920  001065                  TouchXpos  := touch_Get(TOUCH_GETX);
015921  001066                  TouchYpos  := touch_Get(TOUCH_GETY);
015922  001067                  TouchState := Ofs_IPD_DOWN ;
015923  001068              else
015924  001069                  ImageTouched := oldn ;                     // simulate release of what we touched
015925  001070                  oldn := -1 ;                    // prevent double release
015926  001071                  TouchState := Ofs_IPD_RELEASE ;
015927  001072              endif
015928  001073              if (ImageTouched != -1)
015929  001074                          CurInputData := InputControls[ImageTouched] + InputData;
015930  001075                          InputType := *(CurInputData) ;
015931  001076                          i := InputType ;
015932  001077                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
015933  001078                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
015934  001079              endif
015935  001080          endif
015936  001081   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
015937  001082        
015938  001083          sys_EventsResume() ;
015939  001084      forever
015940  001085        
015941  001086  cDipswitch:
015942  001087        
015943  001088  cKnob:
015944  001089        
015945  001090  cRockerswitch:
015946  001091        
015947  001092  cRotaryswitch:
015948  001093        
015949  001094  cSlider:
015950  001095  cTrackbar:
015951  001096        
015952  001097  c4DButton:
015953  001098  cUserButton:
015954  001099      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
015955  001100      goto gbutton ;
015956  001101  cWinbutton:
015957  001102      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
015958  001103  gbutton:
015959  001104      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
015960  001105      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
015961  001106          if (TouchStatus == TOUCH_RELEASED)
015962  001107              i &= 0xfffe ;
015963  001108              TouchState == Ofs_IPD_DOWN ;
015964  001109          else
015965  001110              i |= 1 ;
015966  001111              TouchState == Ofs_IPD_RELEASE ;
015967  001112          endif
015968  001113      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
015969  001114          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
015970  001115              if ((i & 3) == 3)
015971  001116                  i &= 0xfffc ;
015972  001117              else
015973  001118                  i++ ;
015974  001119              endif
015975  001120          else
015976  001121              i |= 1 ;                                      // make down regardless of current state
015977  001122          endif
015978  001123      else                        // group action, up all other buttons on touch press, reports 0 for button down
015979  001124          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
015980  001125              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
015981  001126          endif
015982  001127          i := (i & 0xfffc) | 2 ;
015983  001128      endif
015984  001129        
015985  001130      UpdateObjects(i) ;
015986  001131  endsub ;
015987  001132        
015988  001133  cAniButton:
015989  001134        
015990  001135  cColorPicker:
015991  001136        
015992  001137  endfunc
015993  001138  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 774 file:RepRap_Touchv1.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 710 file:RepRap_Touchv1.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       12813  0x0000320d (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 138)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (usage 3)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS    2803  0x00000af3 (const ??? 0)  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  378  0x0000017a (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 33)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                298  0x0000012a (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         294  0x00000126 (mem) word (global)  (usage 27)
CurrentForm                          284  0x0000011c (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (usage 3)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (usage 18)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       12181  0x00002f95 (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 30)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (usage 51)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                        9591  0x00002577FormBGcolors                        9591  0x00002577 (mem) word[41] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                          89  0x00000059FormEndIndex                          89  0x00000059 (mem) word[41] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[41] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[53] (global)  (usage 243)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             214  0x000000d6 (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm0                                 0  0x00000000 (const ??? 0)  (usage 3)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                               96  0x00000060 (const ??? 0)  (usage 3)
iForm2                                 4  0x00000004 (const ??? 0)  (usage 3)
iForm28                              106  0x0000006a (const ??? 0)  (usage 3)
iForm29                              111  0x0000006f (const ??? 0)  (usage 3)
iForm4                                10  0x0000000a (const ??? 0)  (usage 3)
iForm5                                16  0x00000010 (const ??? 0)  (usage 3)
iForm9                                42  0x0000002a (const ??? 0)  (usage 3)
iiLeddigits0                          31  0x0000001f (const ??? 0)  (not used)
iiLeddigits1                          33  0x00000021 (const ??? 0)  (not used)
iiLeddigits2                          35  0x00000023 (const ??? 0)  (not used)
iImage0                              153  0x00000099 (const ??? 0)  (usage 3)
iLeddigits0                           30  0x0000001e (const ??? 0)  (usage 3)
iLeddigits1                           32  0x00000020 (const ??? 0)  (usage 3)
iLeddigits2                           34  0x00000022 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        171  0x000000abInputControls                        171  0x000000ab (mem) word[195] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
InputCS                              538  0x0000021a (mem) word (global)  (usage 21)
InputData                            561  0x00000231InputData                            561  0x00000231 (mem) word[3509] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 30)
InputType                            290  0x00000122 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                          80  0x00000050 (const ??? 0)  (usage 3)
iStatictext1                          36  0x00000024 (const ??? 0)  (usage 3)
iStatictext10                         56  0x00000038 (const ??? 0)  (usage 3)
iStatictext15                         85  0x00000055 (const ??? 0)  (usage 3)
iStatictext2                          37  0x00000025 (const ??? 0)  (usage 3)
iStatictext3                         129  0x00000081 (const ??? 0)  (usage 3)
iStatictext4                          38  0x00000026 (const ??? 0)  (usage 3)
iStatictext5                         140  0x0000008c (const ??? 0)  (usage 3)
iStatictext6                         144  0x00000090 (const ??? 0)  (usage 3)
iStatictext7                         145  0x00000091 (const ??? 0)  (usage 3)
iStatictext8                         146  0x00000092 (const ??? 0)  (usage 3)
iStatictext9                          52  0x00000034 (const ??? 0)  (usage 3)
iStrings0                           7579  0x00001d9biStrings0                           7579  0x00001d9b (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings1                           7605  0x00001db5iStrings1                           7605  0x00001db5 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings10                          7839  0x00001e9fiStrings10                          7839  0x00001e9f (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings11                          7865  0x00001eb9iStrings11                          7865  0x00001eb9 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings12                          7891  0x00001ed3iStrings12                          7891  0x00001ed3 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings13                          7917  0x00001eediStrings13                          7917  0x00001eed (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings14                          7943  0x00001f07iStrings14                          7943  0x00001f07 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings15                          7969  0x00001f21iStrings15                          7969  0x00001f21 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings16                          7995  0x00001f3biStrings16                          7995  0x00001f3b (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings17                          8021  0x00001f55iStrings17                          8021  0x00001f55 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings18                          8047  0x00001f6fiStrings18                          8047  0x00001f6f (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings19                          8073  0x00001f89iStrings19                          8073  0x00001f89 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings2                           7631  0x00001dcfiStrings2                           7631  0x00001dcf (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings20                          8099  0x00001fa3iStrings20                          8099  0x00001fa3 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings21                          8125  0x00001fbdiStrings21                          8125  0x00001fbd (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings22                          8151  0x00001fd7iStrings22                          8151  0x00001fd7 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings23                          8177  0x00001ff1iStrings23                          8177  0x00001ff1 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings24                          8203  0x0000200biStrings24                          8203  0x0000200b (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings25                          8229  0x00002025iStrings25                          8229  0x00002025 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings26                          8255  0x0000203fiStrings26                          8255  0x0000203f (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings27                          8281  0x00002059iStrings27                          8281  0x00002059 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings28                          8307  0x00002073iStrings28                          8307  0x00002073 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings29                          8333  0x0000208diStrings29                          8333  0x0000208d (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings3                           7657  0x00001de9iStrings3                           7657  0x00001de9 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings30                          8359  0x000020a7iStrings30                          8359  0x000020a7 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings31                          8385  0x000020c1iStrings31                          8385  0x000020c1 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings32                          8411  0x000020dbiStrings32                          8411  0x000020db (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings33                          8437  0x000020f5iStrings33                          8437  0x000020f5 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings34                          8463  0x0000210fiStrings34                          8463  0x0000210f (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings35                          8489  0x00002129iStrings35                          8489  0x00002129 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings36                          8515  0x00002143iStrings36                          8515  0x00002143 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings37                          8541  0x0000215diStrings37                          8541  0x0000215d (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings38                          8567  0x00002177iStrings38                          8567  0x00002177 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings39                          8593  0x00002191iStrings39                          8593  0x00002191 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings4                           7683  0x00001e03iStrings4                           7683  0x00001e03 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings40                          8619  0x000021abiStrings40                          8619  0x000021ab (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings41                          8645  0x000021c5iStrings41                          8645  0x000021c5 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings42                          8671  0x000021dfiStrings42                          8671  0x000021df (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings43                          8697  0x000021f9iStrings43                          8697  0x000021f9 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings44                          8723  0x00002213iStrings44                          8723  0x00002213 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings45                          8749  0x0000222diStrings45                          8749  0x0000222d (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings46                          8775  0x00002247iStrings46                          8775  0x00002247 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings47                          8801  0x00002261iStrings47                          8801  0x00002261 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings48                          8827  0x0000227biStrings48                          8827  0x0000227b (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings49                          8853  0x00002295iStrings49                          8853  0x00002295 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings5                           7709  0x00001e1diStrings5                           7709  0x00001e1d (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings50                          8879  0x000022afiStrings50                          8879  0x000022af (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings51                          8905  0x000022c9iStrings51                          8905  0x000022c9 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings52                          8931  0x000022e3iStrings52                          8931  0x000022e3 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings6                           7735  0x00001e37iStrings6                           7735  0x00001e37 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings7                           7761  0x00001e51iStrings7                           7761  0x00001e51 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings8                           7787  0x00001e6biStrings8                           7787  0x00001e6b (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings9                           7813  0x00001e85iStrings9                           7813  0x00001e85 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          19  0x00000013 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                         15  0x0000000f (const ??? 0)  (usage 3)
iUserbutton100                        94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton101                        95  0x0000005f (const ??? 0)  (usage 3)
iUserbutton102                       130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton103                       131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton104                       132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton105                       133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton106                       134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton107                       135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton108                       136  0x00000088 (const ??? 0)  (usage 3)
iUserbutton109                       137  0x00000089 (const ??? 0)  (usage 3)
iUserbutton11                        107  0x0000006b (const ??? 0)  (usage 3)
iUserbutton110                       138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton111                       139  0x0000008b (const ??? 0)  (usage 3)
iUserbutton112                       141  0x0000008d (const ??? 0)  (usage 3)
iUserbutton113                       142  0x0000008e (const ??? 0)  (usage 3)
iUserbutton114                       143  0x0000008f (const ??? 0)  (usage 3)
iUserbutton115                       147  0x00000093 (const ??? 0)  (usage 3)
iUserbutton116                       148  0x00000094 (const ??? 0)  (usage 3)
iUserbutton117                       149  0x00000095 (const ??? 0)  (usage 3)
iUserbutton118                        79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton12                         17  0x00000011 (const ??? 0)  (usage 3)
iUserbutton120                       166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton121                       167  0x000000a7 (const ??? 0)  (usage 3)
iUserbutton122                       168  0x000000a8 (const ??? 0)  (usage 3)
iUserbutton123                       169  0x000000a9 (const ??? 0)  (usage 3)
iUserbutton124                       170  0x000000aa (const ??? 0)  (usage 3)
iUserbutton125                       171  0x000000ab (const ??? 0)  (usage 3)
iUserbutton126                       172  0x000000ac (const ??? 0)  (usage 3)
iUserbutton127                       174  0x000000ae (const ??? 0)  (usage 3)
iUserbutton128                       175  0x000000af (const ??? 0)  (usage 3)
iUserbutton129                       176  0x000000b0 (const ??? 0)  (usage 3)
iUserbutton13                         18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton130                       177  0x000000b1 (const ??? 0)  (usage 3)
iUserbutton131                       178  0x000000b2 (const ??? 0)  (usage 3)
iUserbutton132                       179  0x000000b3 (const ??? 0)  (usage 3)
iUserbutton133                       180  0x000000b4 (const ??? 0)  (usage 3)
iUserbutton134                       181  0x000000b5 (const ??? 0)  (usage 3)
iUserbutton135                       182  0x000000b6 (const ??? 0)  (usage 3)
iUserbutton136                       183  0x000000b7 (const ??? 0)  (usage 3)
iUserbutton137                       184  0x000000b8 (const ??? 0)  (usage 3)
iUserbutton138                       185  0x000000b9 (const ??? 0)  (usage 3)
iUserbutton139                       186  0x000000ba (const ??? 0)  (usage 3)
iUserbutton14                          7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton140                       187  0x000000bb (const ??? 0)  (usage 3)
iUserbutton141                       188  0x000000bc (const ??? 0)  (usage 3)
iUserbutton142                       189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton143                       190  0x000000be (const ??? 0)  (usage 3)
iUserbutton144                       191  0x000000bf (const ??? 0)  (usage 3)
iUserbutton145                       192  0x000000c0 (const ??? 0)  (usage 3)
iUserbutton146                       193  0x000000c1 (const ??? 0)  (usage 3)
iUserbutton147                       194  0x000000c2 (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton16                         45  0x0000002d (const ??? 0)  (usage 3)
iUserbutton17                         53  0x00000035 (const ??? 0)  (usage 3)
iUserbutton18                         43  0x0000002b (const ??? 0)  (usage 3)
iUserbutton19                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton2                          20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton20                         84  0x00000054 (const ??? 0)  (usage 3)
iUserbutton21                         86  0x00000056 (const ??? 0)  (usage 3)
iUserbutton22                         87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton23                         97  0x00000061 (const ??? 0)  (usage 3)
iUserbutton24                         98  0x00000062 (const ??? 0)  (usage 3)
iUserbutton25                         99  0x00000063 (const ??? 0)  (usage 3)
iUserbutton26                         46  0x0000002e (const ??? 0)  (usage 3)
iUserbutton27                         47  0x0000002f (const ??? 0)  (usage 3)
iUserbutton28                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton29                         49  0x00000031 (const ??? 0)  (usage 3)
iUserbutton3                          29  0x0000001d (const ??? 0)  (usage 3)
iUserbutton30                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton31                         51  0x00000033 (const ??? 0)  (usage 3)
iUserbutton32                         54  0x00000036 (const ??? 0)  (usage 3)
iUserbutton33                         55  0x00000037 (const ??? 0)  (usage 3)
iUserbutton34                        151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton35                         57  0x00000039 (const ??? 0)  (usage 3)
iUserbutton36                         58  0x0000003a (const ??? 0)  (usage 3)
iUserbutton37                         59  0x0000003b (const ??? 0)  (usage 3)
iUserbutton38                         62  0x0000003e (const ??? 0)  (usage 3)
iUserbutton39                         60  0x0000003c (const ??? 0)  (usage 3)
iUserbutton4                           5  0x00000005 (const ??? 0)  (usage 3)
iUserbutton40                         61  0x0000003d (const ??? 0)  (usage 3)
iUserbutton41                        154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton42                        155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton43                        156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton44                        157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton45                        158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton46                        159  0x0000009f (const ??? 0)  (usage 3)
iUserbutton47                        160  0x000000a0 (const ??? 0)  (usage 3)
iUserbutton48                        161  0x000000a1 (const ??? 0)  (usage 3)
iUserbutton49                        152  0x00000098 (const ??? 0)  (usage 3)
iUserbutton5                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton50                         21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton51                         88  0x00000058 (const ??? 0)  (usage 3)
iUserbutton52                         64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton53                         69  0x00000045 (const ??? 0)  (usage 3)
iUserbutton54                         65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton55                         71  0x00000047 (const ??? 0)  (usage 3)
iUserbutton56                         72  0x00000048 (const ??? 0)  (usage 3)
iUserbutton57                         73  0x00000049 (const ??? 0)  (usage 3)
iUserbutton58                         74  0x0000004a (const ??? 0)  (usage 3)
iUserbutton59                         75  0x0000004b (const ??? 0)  (usage 3)
iUserbutton6                          11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton60                         76  0x0000004c (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton63                         39  0x00000027 (const ??? 0)  (usage 3)
iUserbutton64                        163  0x000000a3 (const ??? 0)  (usage 3)
iUserbutton65                        164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton66                         77  0x0000004d (const ??? 0)  (usage 3)
iUserbutton68                         78  0x0000004e (const ??? 0)  (usage 3)
iUserbutton69                         81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton7                          12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton70                        165  0x000000a5 (const ??? 0)  (usage 3)
iUserbutton71                         82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton72                         89  0x00000059 (const ??? 0)  (usage 3)
iUserbutton73                        100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton74                         83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton75                         66  0x00000042 (const ??? 0)  (usage 3)
iUserbutton76                         67  0x00000043 (const ??? 0)  (usage 3)
iUserbutton77                         68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton78                        101  0x00000065 (const ??? 0)  (usage 3)
iUserbutton79                        102  0x00000066 (const ??? 0)  (usage 3)
iUserbutton8                          13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton80                        103  0x00000067 (const ??? 0)  (usage 3)
iUserbutton81                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton82                        105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton83                        108  0x0000006c (const ??? 0)  (usage 3)
iUserbutton84                        112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton85                        113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton86                        114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton87                        115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton88                        116  0x00000074 (const ??? 0)  (usage 3)
iUserbutton89                        117  0x00000075 (const ??? 0)  (usage 3)
iUserbutton9                          14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton90                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton91                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton92                        110  0x0000006e (const ??? 0)  (usage 3)
iUserbutton93                        121  0x00000079 (const ??? 0)  (usage 3)
iUserbutton94                        123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton95                        127  0x0000007f (const ??? 0)  (usage 3)
iUserbutton96                         90  0x0000005a (const ??? 0)  (usage 3)
iUserbutton97                         91  0x0000005b (const ??? 0)  (usage 3)
iUserbutton98                         92  0x0000005c (const ??? 0)  (usage 3)
iUserbutton99                         93  0x0000005d (const ??? 0)  (usage 3)
iUserimages0                         109  0x0000006d (const ??? 0)  (usage 3)
iUserimages1                          63  0x0000003f (const ??? 0)  (usage 3)
iUserimages10                        173  0x000000ad (const ??? 0)  (usage 3)
iUserimages2                          70  0x00000046 (const ??? 0)  (usage 3)
iUserimages3                         120  0x00000078 (const ??? 0)  (usage 3)
iUserimages4                         124  0x0000007c (const ??? 0)  (usage 3)
iUserimages5                         126  0x0000007e (const ??? 0)  (usage 3)
iUserimages6                         150  0x00000096 (const ??? 0)  (usage 3)
iUserimages7                         122  0x0000007a (const ??? 0)  (usage 3)
iUserimages8                         125  0x0000007d (const ??? 0)  (usage 3)
iUserimages9                         128  0x00000080 (const ??? 0)  (usage 3)
iVideo0                                9  0x00000009 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                           22  0x00000016 (const ??? 0)  (usage 3)
iWinbutton1                           23  0x00000017 (const ??? 0)  (usage 3)
iWinbutton2                           24  0x00000018 (const ??? 0)  (usage 3)
iWinbutton3                           25  0x00000019 (const ??? 0)  (usage 3)
iWinbutton4                           26  0x0000001a (const ??? 0)  (usage 3)
iWinbutton5                           40  0x00000028 (const ??? 0)  (usage 3)
iWinbutton6                           41  0x00000029 (const ??? 0)  (usage 3)
iWinbutton7                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton8                           28  0x0000001c (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 9673  0x000025c9kKeyboardKeystrokes                 9673  0x000025c9 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   13159  0x00003367 (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                               10159  0x000027af (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               14281  0x000037c9 (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              319  0x0000013f (const dword)  (usage 3)
nObjects                             195  0x000000c3 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              53  0x00000035 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                          9281  0x00002441o4Dbuttons                          9281  0x00002441 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAngularmeters                      8989  0x0000231doAngularmeters                      8989  0x0000231d (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAniButtons                         9283  0x00002443oAniButtons                         9283  0x00002443 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       9285  0x00002445oColorPickers                       9285  0x00002445 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCoolgauges                         8991  0x0000231foCoolgauges                         8991  0x0000231f (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCustomdigitss                      8993  0x00002321oCustomdigitss                      8993  0x00002321 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oDipSwitchs                         8957  0x000022fdoDipSwitchs                         8957  0x000022fd (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              8995  0x00002323oForms                              8995  0x00002323 (mem) word[42] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 15)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                             9079  0x00002377oGauges                             9079  0x00002377 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGSliders                           8965  0x00002305oGSliders                           8965  0x00002305 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oImages                             9081  0x00002379oImages                             9081  0x00002379 (mem) word[2] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKeyboards                          9085  0x0000237doKeyboards                          9085  0x0000237d (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKnobs                              8959  0x000022ffoKnobs                              8959  0x000022ff (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLedDigitsn                         9677  0x000025cdoLedDigitsn                         9677  0x000025cd (mem) word[15] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
oLeddigitss                         9089  0x00002381oLeddigitss                         9089  0x00002381 (mem) word[4] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
oLeds                               9087  0x0000237foLeds                               9087  0x0000237f (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             9097  0x00002389oMeters                             9097  0x00002389 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             216  0x000000d8 (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                          9279  0x0000243foPinInputs                          9279  0x0000243f (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oPinOutputs                         9589  0x00002575oPinOutputs                         9589  0x00002575 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      8961  0x00002301oRockerSwitchs                      8961  0x00002301 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oRotarySwitchs                      8963  0x00002303oRotarySwitchs                      8963  0x00002303 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oScopes                             9251  0x00002423oScopes                             9251  0x00002423 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
oSoundss                            9587  0x00002573oSoundss                            9587  0x00002573 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oSpectrums                          9249  0x00002421oSpectrums                          9249  0x00002421 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStaticTexts                        9215  0x000023ffoStaticTexts                        9215  0x000023ff (mem) word[17] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStringss                           9099  0x0000238boStringss                           9099  0x0000238b (mem) word[54] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 84)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 414)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              9253  0x00002425oTanks                              9253  0x00002425 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oThermometers                       9207  0x000023f7oThermometers                       9207  0x000023f7 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTimers                             9585  0x00002571oTimers                             9585  0x00002571 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTrackbars                          8967  0x00002307oTrackbars                          8967  0x00002307 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserButtons                        9287  0x00002447oUserButtons                        9287  0x00002447 (mem) word[149] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
oUserImagess                        9255  0x00002427oUserImagess                        9255  0x00002427 (mem) word[12] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserleds                           9209  0x000023f9oUserleds                           9209  0x000023f9 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             540  0x0000021c (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                             9211  0x000023fboVideos                             9211  0x000023fb (mem) word[2] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                         8969  0x00002309oWinButtons                         8969  0x00002309 (mem) word[10] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          296  0x00000128 (mem) word (global)  (usage 18)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       14316  0x000037ec (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         14028  0x000036cc (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                   9675  0x000025cbrKeyboardRoutines                   9675  0x000025cb (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         14214  0x00003786 (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           14297  0x000037d9 (User func) args[1] r=0  (usage 15)
seroutOcs                          14264  0x000037b8 (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           7  0x00000007 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      3072  0x00000c00 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                         15  0x0000000f (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         33  0x00000021 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         15  0x0000000f (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                          4  0x00000004 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                    24064  0x00005e00 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                         23  0x00000017 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                         24  0x00000018 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     6656  0x00001a00 (const dword)  (usage 3)
Strings17Count                         1  0x00000001 (const dword)  (not used)
Strings17Size                         65  0x00000041 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                    20480  0x00005000 (const dword)  (usage 3)
Strings18Count                         1  0x00000001 (const dword)  (not used)
Strings18Size                         42  0x0000002a (const dword)  (usage 3)
Strings18StartH                        0  0x00000000 (const dword)  (usage 3)
Strings18StartL                    20992  0x00005200 (const dword)  (usage 3)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                         45  0x0000002d (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                    21504  0x00005400 (const dword)  (usage 3)
Strings1Count                          0  0x00000000 (const dword)  (not used)
Strings1Size                           1  0x00000001 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                         0  0x00000000 (const dword)  (usage 3)
Strings20Count                         1  0x00000001 (const dword)  (not used)
Strings20Size                         35  0x00000023 (const dword)  (usage 3)
Strings20StartH                        0  0x00000000 (const dword)  (usage 3)
Strings20StartL                     1024  0x00000400 (const dword)  (usage 3)
Strings21Count                         1  0x00000001 (const dword)  (not used)
Strings21Size                         35  0x00000023 (const dword)  (usage 3)
Strings21StartH                        0  0x00000000 (const dword)  (usage 3)
Strings21StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings22Count                         1  0x00000001 (const dword)  (not used)
Strings22Size                         20  0x00000014 (const dword)  (usage 3)
Strings22StartH                        0  0x00000000 (const dword)  (usage 3)
Strings22StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings23Count                         1  0x00000001 (const dword)  (not used)
Strings23Size                         17  0x00000011 (const dword)  (usage 3)
Strings23StartH                        0  0x00000000 (const dword)  (usage 3)
Strings23StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings24Count                         1  0x00000001 (const dword)  (not used)
Strings24Size                         26  0x0000001a (const dword)  (usage 3)
Strings24StartH                        0  0x00000000 (const dword)  (usage 3)
Strings24StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings25Count                         1  0x00000001 (const dword)  (not used)
Strings25Size                         10  0x0000000a (const dword)  (usage 3)
Strings25StartH                        0  0x00000000 (const dword)  (usage 3)
Strings25StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings26Count                         1  0x00000001 (const dword)  (not used)
Strings26Size                         10  0x0000000a (const dword)  (usage 3)
Strings26StartH                        0  0x00000000 (const dword)  (usage 3)
Strings26StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings27Count                         1  0x00000001 (const dword)  (not used)
Strings27Size                         11  0x0000000b (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings28Count                         1  0x00000001 (const dword)  (not used)
Strings28Size                         40  0x00000028 (const dword)  (usage 3)
Strings28StartH                        0  0x00000000 (const dword)  (usage 3)
Strings28StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                         65  0x00000041 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    22016  0x00005600 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      2560  0x00000a00 (const dword)  (usage 3)
Strings30Count                         1  0x00000001 (const dword)  (not used)
Strings30Size                         45  0x0000002d (const dword)  (usage 3)
Strings30StartH                        0  0x00000000 (const dword)  (usage 3)
Strings30StartL                    22528  0x00005800 (const dword)  (usage 3)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          7  0x00000007 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    23040  0x00005a00 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                         19  0x00000013 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    23552  0x00005c00 (const dword)  (usage 3)
Strings33Count                         1  0x00000001 (const dword)  (not used)
Strings33Size                         33  0x00000021 (const dword)  (usage 3)
Strings33StartH                        0  0x00000000 (const dword)  (usage 3)
Strings33StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings34Count                         0  0x00000000 (const dword)  (not used)
Strings34Size                          1  0x00000001 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings35Count                         1  0x00000001 (const dword)  (not used)
Strings35Size                         36  0x00000024 (const dword)  (usage 3)
Strings35StartH                        0  0x00000000 (const dword)  (usage 3)
Strings35StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings36Count                         0  0x00000000 (const dword)  (not used)
Strings36Size                          1  0x00000001 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings37Count                         0  0x00000000 (const dword)  (not used)
Strings37Size                          1  0x00000001 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings38Count                         0  0x00000000 (const dword)  (not used)
Strings38Size                          1  0x00000001 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                    15360  0x00003c00 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings3Count                          1  0x00000001 (const dword)  (not used)
Strings3Size                          18  0x00000012 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                       512  0x00000200 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                          7  0x00000007 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings41Count                         1  0x00000001 (const dword)  (not used)
Strings41Size                          7  0x00000007 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings42Count                         1  0x00000001 (const dword)  (not used)
Strings42Size                          7  0x00000007 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                    17408  0x00004400 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    17920  0x00004600 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    18432  0x00004800 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    18944  0x00004a00 (const dword)  (usage 3)
Strings46Count                         0  0x00000000 (const dword)  (not used)
Strings46Size                          1  0x00000001 (const dword)  (usage 3)
Strings46StartH                        0  0x00000000 (const dword)  (usage 3)
Strings46StartL                    24576  0x00006000 (const dword)  (usage 3)
Strings47Count                         0  0x00000000 (const dword)  (not used)
Strings47Size                          1  0x00000001 (const dword)  (usage 3)
Strings47StartH                        0  0x00000000 (const dword)  (usage 3)
Strings47StartL                    25088  0x00006200 (const dword)  (usage 3)
Strings48Count                         1  0x00000001 (const dword)  (not used)
Strings48Size                          3  0x00000003 (const dword)  (usage 3)
Strings48StartH                        0  0x00000000 (const dword)  (usage 3)
Strings48StartL                    25600  0x00006400 (const dword)  (usage 3)
Strings49Count                         1  0x00000001 (const dword)  (not used)
Strings49Size                         17  0x00000011 (const dword)  (usage 3)
Strings49StartH                        0  0x00000000 (const dword)  (usage 3)
Strings49StartL                    26112  0x00006600 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings50Count                         1  0x00000001 (const dword)  (not used)
Strings50Size                         20  0x00000014 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    26624  0x00006800 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    19456  0x00004c00 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    19968  0x00004e00 (const dword)  (usage 3)
Strings5Count                          1  0x00000001 (const dword)  (not used)
Strings5Size                          37  0x00000025 (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                     11776  0x00002e00 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          31  0x0000001f (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      2048  0x00000800 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                     14336  0x00003800 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                     14848  0x00003a00 (const dword)  (usage 3)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      3584  0x00000e00 (const dword)  (usage 3)
stringsCV                            108  0x0000006c (mem) word[53] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           292  0x00000124 (mem) word (global)  (usage 24)
TouchXpos                            286  0x0000011e (mem) word (global)  (usage 12)
TouchYpos                            288  0x00000120 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     13473  0x000034a1 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 453)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 45)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      12182  0x00002f96 (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 156)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        13673  0x00003569 (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
