file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318        
003998  004319  //------------------------------------------------------------------------------
003999  004320  // FILEIO Error Code Constants
004000  004321  //------------------------------------------------------------------------------
004001  004322  #CONST
004002  004348  #END
004003  004349        
004004  004350  //------------------------------------------------------------------------------
004005  004351  // DISK struct offsets
004006  004352  //------------------------------------------------------------------------------
004007  004353  #CONST
004008  004370  #END
004009  004371        
004010  004372  //------------------------------------------------------------------------------
004011  004373  // FILE struct offsets
004012  004374  //------------------------------------------------------------------------------
004013  004375  #CONST
004014  004394  #END
004015  004395        
004016  004396        
004017  004397  //------------------------------------------------------------------//
004018  004398  //        Sound Class Services
004019  004399  //------------------------------------------------------------------//
004020  004400        
004021  004401  func snd_Volume("var"), 0;
004022  004402  // Syntax: snd_Volume("var");
004023  004403  // Usage : snd_Volume(30);
004024  004404  // Notes : set sound playback volume.  Var must
004025  004405  //       : be in the range from 8 (min volume)
004026  004406  //       : to 127 (max volume). If var is less
004027  004407  //       : than 8 volume is set to 8, and if
004028  004408  //       : var > 127 it is set to 127.
004029  004409        
004030  004410  func snd_Pitch("pitch"), 1;
004031  004411  // func snd_Pitch("freq"), 1;
004032  004412  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004033  004413  // Notes : sets the samples playback rate to a different frequency
004034  004414  //       : The minimum value is 4khz
004035  004415  //       : Setting the pitch to zero restores the original sample rate
004036  004416  //       : Return value is the samples original sample rate.
004037  004417        
004038  004418  func snd_BufSize("var"), 0;
004039  004419  // Syntax: snd_BufSize("var");
004040  004420  // Usage : snd_BufSize(2);
004041  004421  // Notes : specify the a memory chunk size for the wavefile buffer.
004042  004422  //       : default size 1024 bytes.
004043  004423  //       : 0 = 1024 bytes (default)
004044  004424  //       : 1 = 2048 bytes
004045  004425  //       : 2 = 4096 bytes
004046  004426  //       : 3 = 8192 bytes
004047  004427        
004048  004428  func snd_Stop(), 0;
004049  004429  // Syntax: snd_Stop();
004050  004430  // Usage : snd_Stop();
004051  004431  // Notes : stop any sound that is playing, releasing
004052  004432  //       : buffers and closes any open wav file.
004053  004433        
004054  004434  func snd_Pause(), 0;
004055  004435  // Syntax: snd_Pause();
004056  004436  // Usage : snd_Pause();
004057  004437  // Notes : pauses any sound that is playing, does nothing
004058  004438  //       : until sound is resumed with snd_Continue().
004059  004439  //       : The sample cam be terminated with snd_Stop.
004060  004440  //       : buffers and closes any open wav file.
004061  004441        
004062  004442  func snd_Continue(), 0;
004063  004443  // Syntax: snd_Continue();
004064  004444  // Usage : snd_Continue();
004065  004445  // Notes : resume any sound that is paused by snd_Pause.
004066  004446        
004067  004447  func snd_Playing(), 1;
004068  004448  // Syntax: snd_Playing();
004069  004449  // Usage : r := snd_Playing();
004070  004450  // Notes : returns 0 if sound has finished playing,
004071  004451  //       : else return number of 512 byte blocks to go.
004072  004452        
004073  004453  func snd_Freq("Freq", "Duration"), 1;
004074  004454  // Syntax: snd_Freq("Freq", "Duration");
004075  004455  // Usage : r := snd_Freq(1000, 2000);
004076  004456  // Notes : Returns 0 if note cannot be played because a wav file is playing
004077  004457  //       : else return True.
004078  004458  //       : Minimum Freq is 20
004079  004459  //       : This will produce a pure Square wave and is designed for driving
004080  004460  //       : Piezo transducers which require this sort of drive. It can also be
004081  004461  //       : used to drive the amp on displays with audio.
004082  004462        
004083  004463        
004084  004464  func __reserved60(), 0; // do not remove
004085  004465  func __reserved61(), 0; // do not remove
004086  004466  func __reserved62(), 0; // do not remove
004087  004467        
004088  004468  //=========================================================================================================
004089  004469  // String functions
004090  004470  //=========================================================================================================
004091  004471        
004092  004472  func str_Ptr("&var"), 1;
004093  004473  // Syntax: str_Ptr(&var);
004094  004474  // Usage : p := str_Ptr(&var);
004095  004475  // Notes : return a byte pointer to a word region
004096  004476        
004097  004477  func str_GetD("&ptr", "&var"), 1;
004098  004478  // Syntax: str_GetD(&ptr, &var);
004099  004479  // Usage : ok := str_GetD(&ptr, &var);
004100  004480  // Notes : convert number in a string to DWORD ( myvar[2] )
004101  004481  //       : returns true if function succeeds, advancing ptr
004102  004482        
004103  004483  func str_GetW("&ptr", "&var"), 1;
004104  004484  // Syntax: str_GetW(&ptr, &var);
004105  004485  // Usage : ok := str_GetW(&ptr, &var);
004106  004486  // Notes : convert number in a string to WORD ( myvar )
004107  004487  //       : returns true if function succeeds, advancing ptr
004108  004488        
004109  004489  func str_GetHexW("&ptr", "&var"), 1;
004110  004490  // Syntax: str_GetHexW(&ptr, &var);
004111  004491  // Usage : ok := str_GetHexW(&ptr, &var);
004112  004492  // Notes : convert HEX number in a string to WORD ( myvar )
004113  004493  //       : returns true if function succeeds, advancing ptr
004114  004494        
004115  004495  func str_GetC("&ptr", "&var"), 1;
004116  004496  // Syntax: str_GetC(&ptr, &var);
004117  004497  // Usage : ok := str_GetC(&ptr, &var);
004118  004498  // Notes : get a valid ascii char in a string to WORD ( myvar )
004119  004499  //       : returns true if function succeeds, advancing ptr
004120  004500        
004121  004501  func str_GetByte("ptr"), 1;
004122  004502  // Syntax: str_GetByte(ptr);
004123  004503  // Usage : myvar := str_GetByte(ptr);
004124  004504  // Notes : get a byte to myvar
004125  004505  //       : returns value
004126  004506        
004127  004507  func str_GetWord("ptr"), 1;
004128  004508  // Syntax: GetWord(ptr);
004129  004509  // Usage : GetWord(ptr);
004130  004510  // Notes : get a word to myvar
004131  004511  //       : returns value
004132  004512        
004133  004513  func str_PutByte("ptr","val"), 0;
004134  004514  // Syntax: str_PutByte(ptr);
004135  004515  // Usage : myvar := str_PutByte(ptr);
004136  004516  // Notes : put a byte at ptr
004137  004517  //       : returns value
004138  004518        
004139  004519  func str_PutWord("ptr","val"), 0;
004140  004520  // Syntax: str_PutWord("ptr","val");
004141  004521  // Usage : str_PutWord(p,100);
004142  004522  // Notes : put word 100 at current pointer location
004143  004523  //       : returns value
004144  004524        
004145  004525  func str_Match("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Match(&ptr, *str);
004147  004527  // Usage : r := str_Match(&p, "hello");
004148  004528  // Notes : Case sensitive match
004149  004529  //       : returns true if function succeded, andvancing pointer to position past
004150  004530  //       : the matched item. Note that any whitespace characters are skipped
004151  004531  //       : in the source string prior to the test.
004152  004532        
004153  004533  func str_MatchI("&ptr", "*str"), 1;
004154  004534  // Syntax: str_MatchI(&ptr, *str);
004155  004535  // Usage : r := str_MatchI(&p, "hello");
004156  004536  // Notes : Case insensitive match
004157  004537  //       : returns true if function succeded, andvancing pointer to position past
004158  004538  //       : the matched item. Note that any whitespace characters are skipped
004159  004539  //       : in the source string prior to the test.
004160  004540        
004161  004541  func str_Find("&ptr", "*str"), 1;
004162  004542  // Syntax: str_Find(&ptr, *str);
004163  004543  // Usage : n := str_Find(&p, "hello");
004164  004544  // Notes : given the address of a pointer to a source string as the
004165  004545  //       : first argument, and a pointer to a test string as the second
004166  004546  //       : argument, attempt to find the position of the matching string
004167  004547  //       : in the source string. The test is performed with case sensitivity.
004168  004548  //       : return 0 if not found, else returns the address of the first
004169  004549  //       : character of the match. NB:- The source pointer is not altered.
004170  004550        
004171  004551  func str_FindI("&ptr", "*str"), 1;
004172  004552  // Syntax: str_Find(&ptr, *str);
004173  004553  // Usage : n := str_Find(&p, "hello");
004174  004554  // Notes : given the address of a pointer to a source string as the
004175  004555  //       : first argument, and a pointer to a test string as the second
004176  004556  //       : argument, attempt to find the position of the matching string
004177  004557  //       : in the source string. The test is performed with no case
004178  004558  //       : sensitivity, eg upper and lower case chars are accepted.
004179  004559  //       : return 0 if not found, else returns the address of the first
004180  004560  //       : character of the match. NB:- The source pointer is not altered.
004181  004561        
004182  004562  func str_Length("ptr"), 1;
004183  004563  // Syntax: str_Length(ptr);
004184  004564  // Usage : len := str_Ptr(mystring);
004185  004565  // Notes : return the length of a byte aligned string excluding terminator
004186  004566        
004187  004567  func str_Printf("&ptr", "*format"), 1;
004188  004568  // Syntax: str_Printf("&ptr", "*format");
004189  004569  // Usage : r := str_Printf(&p, "hello");
004190  004570  // Notes : refer to documentation
004191  004571  //       :
004192  004572        
004193  004573  func str_Cat("dest","src"), 1;
004194  004574  // Syntax: str_Append("&dest","&src");
004195  004575  // Usage : str_Append(&buf,"Hello");
004196  004576  // Notes : Appends a copy of the source string to the destination string.
004197  004577  //       : The terminating null character in destination is overwritten by
004198  004578  //       : the first character of source, and a new null-character is appended
004199  004579  //       : at the end of the new string formed by the concatenation of both in destination.
004200  004580  //       : returns destination.
004201  004581        
004202  004582  func str_CatN("dest","src","count"), 1;
004203  004583  // Syntax: str_Append("&dest","&src","count");
004204  004584  // Usage : str_Append(&buf,"Monday",3);
004205  004585  // Notes : Appends a copy of the source string to the destination string.
004206  004586  //       : The number of characters copied is limited by "count".
004207  004587  //       : The terminating null character in destination is overwritten by
004208  004588  //       : the first character of source, and a new null-character is appended
004209  004589  //       : at the end of the new string formed by the concatenation of both in destination.
004210  004590  //       : returns destination.
004211  004591        
004212  004592        
004213  004593  func str_ByteMove("src", "dest", "count"), 1;
004214  004594  // Syntax   : str_ByteMove(src, dest, bytecount);
004215  004595  // Input    : STR *source points to byte aligned source.
004216  004596  //          : STR *dest   points to byte aligned destination.
004217  004597  //          : VAR count   number of bytes to transfer.
004218  004598  // Usage    : nextpos := str_ByteMove(s, d, 100);
004219  004599  // Notes    : copy bytes from "src" to "dest", stopping only
004220  004600  //          : when "count" is exhausted.
004221  004601  //          : No terminator is appended, it is purely a
004222  004602  //          : byte copy, and any zeroes encountered will
004223  004603  //          : also be copied.
004224  004604  // Returns  : returns a pointer to the end of the destination
004225  004605  //          : (which is "dest" + "count")
004226  004606        
004227  004607        
004228  004608  func str_Copy("dest", "src"), 1;
004229  004609  // Syntax   : str_Copy(dest, src);
004230  004610  // Input    : STR *dest   points to byte aligned destination.
004231  004611  //          : STR *source points to byte aligned source.
004232  004612  // Usage    : nextplace := str_Copy(d, s);
004233  004613  // Notes    : copy a string from "src" to "dest", stopping only
004234  004614  //          : when the end of source string "src" is encountered
004235  004615  //          : (0x00 terminator).
004236  004616  //          : The terminator is always appended, even if "src" is
004237  004617  //          : an empty string.
004238  004618  // Returns  : returns a pointer to the 0x00 string terminator at
004239  004619  //          : end of "dest" (which is "dest" + str_Length(src); )
004240  004620        
004241  004621        
004242  004622  func str_CopyN("dest", "src", "count"), 1;
004243  004623  // Syntax   : str_CopyN(dest, src, bytecount);
004244  004624  // Input    : STR *dest   points to byte aligned destination.
004245  004625  //          : STR *source points to byte aligned source.
004246  004626  //          : VAR count   max number of chars to copy.
004247  004627  // Usage    : nextplace := str_CopyN(d, s, 100);
004248  004628  // Notes    : copy a string from "src" to "dest", stopping only
004249  004629  //          : when "count" is exhausted, or end of source
004250  004630  //          : string "str" is encountered (0x00 string terminator).
004251  004631  //          : The terminator is always appended, even if
004252  004632  //          : "count" is zero, or "src" is a null string.
004253  004633  // Returns  : returns a pointer to the 0x00 string terminator
004254  004634  //          : (which is "dest" + whatever was copied)
004255  004635        
004256  004636        
004257  004637  func __reserved63(), 0; // do not remove
004258  004638  func __reserved64(), 0; // do not remove
004259  004639  func __reserved65(), 0; // do not remove
004260  004640  func __reserved66(), 0; // do not remove
004261  004641        
004262  004642  //=========================================================================================================
004263  004643  // FLASH memory functions
004264  004644  //=========================================================================================================
004265  004645  func flash_GetByte("bank", "ptr"), 1;
004266  004646  // Syntax   : flash_GetByte(bank, ptr);
004267  004647  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004268  004648  // Notes    : Reads a single byte from any flash location.
004269  004649  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004270  004650  //          : which is the header signature for a valid program.
004271  004651  // Returns  : the byte value from the location
004272  004652        
004273  004653        
004274  004654  func flash_GetWord("bank", "ptr"), 1;
004275  004655  // Syntax   : flash_GetWord(bank, ptr);
004276  004656  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004277  004657  // Notes    : Reads a single word from any flash location.
004278  004658  //          : The pointer is byte aligned.
004279  004659  //          : If the bank is read protected, only the first word can be read
004280  004660  //          : which is the header signature for a valid program (0xAA55).
004281  004661  // Returns  : the byte value from the location
004282  004662        
004283  004663        
004284  004664  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004285  004665  // Syntax   : flash_Copy(bank, ptr);
004286  004666  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004287  004667  // Notes    : Copies bytes from any flash locations to a user buffer.
004288  004668  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004289  004669  //          : If the bank is read protected, 0 bytes will be read
004290  004670  //          : which is the header signature for a valid program (0xAA55).
004291  004671  // Returns  : the count of bytes transferred.
004292  004672        
004293  004673        
004294  004674  func flash_Run("bank"), 1;
004295  004675  // Syntax    : flash_Run(bankx);
004296  004676  // Usage     : res := flash_Run(FLASHBANK_5);
004297  004677  // Notes     : Restarts the processor, running code from the required
004298  004678  //           : flash bank. bank may be a variable, or one of the
004299  004679  //           : pre-defined constants:-
004300  004680  //           :    FLASHBANK_0                 //0x00
004301  004681  //           :    FLASHBANK_1                 //0x01
004302  004682  //           :    FLASHBANK_2                 //0x02
004303  004683  //           :    FLASHBANK_3                 //0x03
004304  004684  //           :    FLASHBANK_4                 //0x04
004305  004685  //           :    FLASHBANK_5                 //0x05
004306  004686  // returns    : This function should net return as it restarts
004307  004687  //        : the processor and jumps to the required bank,
004308  004688  //        : If it does return, -1 indicates incorrect/invalid
004309  004689  //        : bank number, and -2 indicates no valid program
004310  004690  //        : in the selected bank.
004311  004691        
004312  004692  func flash_Bank(), 1;
004313  004693  // Syntax   : flash_Bank();
004314  004694  // Usage    : myvar := flash_Bank();
004315  004695  // Notes    : Identifies which flash bank the code is running from.
004316  004696  // Returns  : The FLASH bank that code is currently running from, 0-5.
004317  004697        
004318  004698        
004319  004699  func flash_EraseBank("bank", "confirmation"), 1;
004320  004700  // Syntax   : flash_EraseBank(bank, confirmation);
004321  004701  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004322  004702  // Notes    : This function should be used with extreme caution.
004323  004703  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004324  004704  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004325  004705  //          : a protected bank will not be erased, and function will return with 0
004326  004706  //          : If the destination bank is the same as the execution bank, the processor will reset
004327  004707  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004328  004708  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004329  004709  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004330  004710  // Returns  : returns true if the function succeeded
004331  004711  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004332  004712        
004333  004713  func flash_LoadFile("bank", "filename"), 1;
004334  004714  // Syntax   : flash_LoadFile(bank, ptr);
004335  004715  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004336  004716  // Notes    : Copies a file from uSD to the required flashbank.
004337  004717  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004338  004718  // Returns  : returns true if the function succeeded.
004339  004719        
004340  004720        
004341  004721  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004342  004722  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004343  004723  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004344  004724  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004345  004725  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004346  004726  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004347  004727  // Returns  : returns true if the function succeeded.
004348  004728        
004349  004729        
004350  004730  func flash_putstr("bank", "ptr"), 1;
004351  004731  // Syntax   : flash_putstr(bank, ptr);
004352  004732  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004353  004733  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004354  004734  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004355  004735  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004356  004736        
004357  004737  func flash_Blit16("bank", "offset", "count"), 1;
004358  004738  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004359  004739  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004360  004740  // Notes    : Blit an image to a GRAM window from FLASH storage.
004361  004741  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004362  004742  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004363  004743        
004364  004744  func flash_Blit8("bank", "offset", "count"), 1;
004365  004745  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004366  004746  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004367  004747  // Notes    : Blit an image to a GRAM window from FLASH storage.
004368  004748  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004369  004749  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004370  004750        
004371  004751  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004372  004752  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004373  004753  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004374  004754  // Notes    : Blit an image to a GRAM window from FLASH storage.
004375  004755  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004376  004756  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004377  004757        
004378  004758  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004379  004759  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004380  004760  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004381  004761  // Notes    : Blit an image to a GRAM window from FLASH storage.
004382  004762  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004383  004763  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004384  004764        
004385  004765  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004386  004766  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004387  004767  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004388  004768  // Notes    : Blit an image to a GRAM window from FLASH storage.
004389  004769  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004390  004770  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004391  004771        
004392  004772  func flash_Exec("bank", "arglistptr"), 1;
004393  004773  // Syntax: res := flash_Exec("bank","arglistptr");
004394  004774  // Usage : res := flash_Exec("bank","arglistptr");
004395  004775  // Notes : returns like a function, current program
004396  004776  //       : calling program is kept active and control returns to it.
004397  004777  //       : If arglistptr is 0, no arguments are passed, else
004398  004778  //       : arglist points to an array, the first element being
004399  004779  //       : the number of elements in the array.
004400  004780  //       : func 'main' in the called bank accepts the arguments.
004401  004781  // WARNING Not currently implemented!
004402  004782        
004403  004783        
004404  004784  func __reserved68(), 0; // do not remove
004405  004785  func __reserved69(), 0; // do not remove
004406  004786  func __reserved70(), 0; // do not remove
004407  004787        
004408  004788  //=========================================================================================================
004409  004789  // I/O and hardware functions
004410  004790  //=========================================================================================================
004411  004791        
004412  004792        
004413  004793        
004414  004794        
004415  004795  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004416  004796  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004417  004797  // Syntax: pin_Pulseout(pin, value);
004418  004798  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004419  004799  // Notes : only available on PA0 to PA9
004420  004800  //       : Invert the state of an output for "value" milliseconds.
004421  004801  //       : pulseout is non blocking, that is, code execution may continue while
004422  004802  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004423  004803  //       : If not already an output, pin is automatically made a push/pull output,
004424  004804  //       : and the last state of its output latch will determine pulse polarity.
004425  004805  //       : It's its open drain state is not altered if the pin was already an output.
004426  004806  //       : If pulseout is called while pulseout is still active, the pulse timer
004427  004807  //       : will simply be updated with the new "value" and the pulse will continue
004428  004808  //       : with the extended value.
004429  004809  //       : returns true if the pin number is legal (usually ignored)
004430  004810        
004431  004811        
004432  004812  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004433  004813  // Syntax: pin_Counter(pin, mode, userfunc);
004434  004814  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004435  004815  // Notes : only available on PA4 to PA9
004436  004816  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004437  004817  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004438  004818  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004439  004819  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004440  004820  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004441  004821  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004442  004822  //       : The pin may be configured as an input or output, the function behaves the same.
004443  004823  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004444  004824  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004445  004825  //       : "mode" has the following effect:-
004446  004826  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004447  004827  //       : mode COUNT_RISE(1) = increment on every rising edge
004448  004828  //       : mode COUNT_FALL(2) = increment on every falling edge
004449  004829  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004450  004830        
004451  004831  //------------------------------------------------------------------//
004452  004832  // pin counter mode constants                                       //
004453  004833  //------------------------------------------------------------------//
004454  004834  #CONST
004455  004839  #END
004456  004840        
004457  004841  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004458  004842  // Syntax: Qencoder1(pinA, pinB, mode);
004459  004843  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004460  004844  // Notes : not available on pins PA14 and PA15
004461  004845  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004462  004846  //       : or written to at any time with peekW and pokeW using the following constants:-
004463  004847  //       : It is necessary to configure the pins first, depending on your requirements, eg
004464  004848  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004465  004849  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004466  004850  //       : Returns true if the pin numbers are legal (usually ignored)
004467  004851  //    QEN1_COUNTER_LO
004468  004852  //    QEN1_COUNTER_HI
004469  004853  //    QEN1_DELTA This is reset to 0 when read
004470  004854        
004471  004855  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004472  004856  // Syntax: Qencoder2(pinA, pinB, mode);
004473  004857  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004474  004858  // Notes : not available on pins PA14 and PA15
004475  004859  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004476  004860  //       : or written to at any time with peekW and pokeW using the following constants:-
004477  004861  //       : It is necessary to configure the pins first, depending on your requirements, eg
004478  004862  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004479  004863  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004480  004864  //       : Returns true if the pin numbers are legal (usually ignored)
004481  004865  //    QEN2_COUNTER_LO
004482  004866  //    QEN2_COUNTER_HI
004483  004867  //    QEN2_DELTA This is reset to 0 when read
004484  004868        
004485  004869        
004486  004870  func Qencoder1Reset(), 0;
004487  004871  // Syntax: Qencoder1Reset();
004488  004872  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004489  004873  // Notes :
004490  004874  //    QEN1_COUNTER_LO is reset to zero
004491  004875  //    QEN1_COUNTER_HI is reset to zero
004492  004876  //    QEN1_DELTA is reset to zero
004493  004877        
004494  004878  func Qencoder2Reset(), 0;
004495  004879  // Syntax: Qencoder2Reset();
004496  004880  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004497  004881  // Notes :
004498  004882  //    QEN2_COUNTER_LO is reset to zero
004499  004883  //    QEN2_COUNTER_HI is reset to zero
004500  004884  //    QEN2_DELTA is reset to zero
004501  004885        
004502  004886        
004503  004887  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004504  004888  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004505  004889  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004506  004890  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004507  004891  //       : Invert the state of an output at a "freq" freuency "count" times.
004508  004892  //       : PulseoutCount is non blocking, that is, code execution may continue while
004509  004893  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004510  004894  //       : If not already an output, pin is automatically made a push/pull output,
004511  004895  //       : and the last state of its output latch will determine pulse polarity.
004512  004896  //       : It's its open drain state is not altered if the pin was already an output.
004513  004897  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004514  004898  //       : will simply have the new "value" added to it.
004515  004899  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004516  004900  //       : returns true if the pin number is legal (usually ignored)
004517  004901        
004518  004902  func __reserved72(), 0; // do not remove
004519  004903        
004520  004904  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004521  004905  // Syntax: pwm_Init(pin, value);
004522  004906  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004523  004907  // Notes : only available on PA4 to PA9
004524  004908  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004525  004909  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004526  004910  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004527  004911  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004528  004912  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004529  004913  //       :                    : Repetition rate ~50hz or 20ms
004530  004914  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004531  004915  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004532  004916  //       : pwm_Init is non blocking and the pwm continues until turn off
004533  004917  //       : Returns true if the pin number is legal (usually ignored)
004534  004918        
004535  004919  //------------------------------------------------------------------------------
004536  004920  // PWM Constants
004537  004921  //------------------------------------------------------------------------------
004538  004922  #CONST
004539  004927  #END
004540  004928        
004541  004929  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004542  004930  // Syntax   : OW_Reset(PA0);
004543  004931  // Usage    : OW_Reset(PA0);
004544  004932  // Notes    : Only available on PA0 to PA13
004545  004933  //          : Resets  ONEWIRE device
004546  004934  //          : Returns the status, 0 = ACK.
004547  004935  //          :
004548  004936        
004549  004937  func OW_Read("pin"), 1;                              // read data from 1wire bus
004550  004938  // Syntax   : OW_Read(PA0);
004551  004939  // Usage    : arg1 := OW_Read(PA0);
004552  004940  // Notes    : Only available on PA0 to PA13
004553  004941  //          : Reads value of the ONEWIRE pin
004554  004942  //          : that was previously selected for ONEWIRE comms.
004555  004943  //          :
004556  004944  //          : pin = 0 : the next byte from the ONEWIRE bus
004557  004945        
004558  004946  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004559  004947  // Syntax   : OW_Read9(PA0);
004560  004948  // Usage    : OW_Read9(PA0);
004561  004949  // Notes    : Only available on PA0 to PA13
004562  004950  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004563  004951  //          : that was previously selected for ONEWIRE comms.
004564  004952  //          :
004565  004953  //          : read the 9 bits from the ONEWIRE bus
004566  004954        
004567  004955  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004568  004956  // Syntax   : OW_Write(PA0, arg);
004569  004957  // Usage    : OW_Write(PA0, arg);
004570  004958  // Notes    : Only available on PA0 to PA13
004571  004959  //          : Sends ONEWIRE data on the appropriate
004572  004960  //          : pin that was previously  selected as ONEWIRE comms.
004573  004961  //          :
004574  004962  //          : write arg to the ONEWIRE bus
004575  004963        
004576  004964  func __reserved77(), 0; // do not remove
004577  004965  func __reserved78(), 0; // do not remove
004578  004966        
004579  004967  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004580  004968  // Syntax: sys_GetDateVar(&year, &month, &day);
004581  004969  // Usage : sys_GetDateVar(&year, &month, &day);
004582  004970  // Notes : Retrieves the date values into variables
004583  004971        
004584  004972  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004585  004973  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004974  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004587  004975  // Notes : Retrieves the time values into variables
004588  004976        
004589  004977  func sys_PmmC(), 0;
004590  004978  // Syntax: sys_PmmC();
004591  004979  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004592  004980  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004593  004981  //       : Can be captured to a buffer using the to( function
004594  004982  //       : Returns nothing.
004595  004983        
004596  004984  func sys_Driver(), 0;
004597  004985  // Syntax: sys_Driver();
004598  004986  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004599  004987  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004600  004988  //       : Can be captured to a buffer using the to( function
004601  004989  //       : Returns nothing.
004602  004990        
004603  004991  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004604  004992  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004605  004993  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004606  004994  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004607  004995  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004608  004996  //       : elements in each buffer. This will need to be greater than "width" for negative
004609  004997  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004610  004998  //       : pass 0 as the address for any unused traces
004611  004999  //       : X position is incremented each point by "xstep" pixels.
004612  005000  //       : Y values are derived from a Y buffer "newy" (signed values).
004613  005001  //       : 2 buffers need to be supplied, "newy" contains new
004614  005002  //       : points to be drawn, "oldy" contains most recent set
004615  005003  //       : of points to be un-drawn. After the waveform is drawn,
004616  005004  //       : "newy" buffer is automatically copied to "oldy" buffer.
004617  005005        
004618  005006        
004619  005007  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004620  005008  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004621  005009  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004622  005010  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004623  005011  //       : and calls "COMPLETEfunction" when done.
004624  005012  //       : "rate" is samples in 100 of samples per second
004625  005013  //       : Any unused IOx pins should have their buffer addresses set to 0
004626  005014  //       : For performance reasons samples are taken in chunks of 32, thus if you
004627  005015  //       : request 33 samples there will be a delay of 31 samples before
004628  005016  //       : "COMPLETEfunction" is called
004629  005017  //       : If Touch is enabled this function should be called no more than once per
004630  005018  //       : millisecond, otherwise touch behaviour could be eratic.
004631  005019        
004632  005020        
004633  005021  func sys_ErrorMessage("msgnum"), 1;
004634  005022        
004635  005023  //==============================//
004636  005024  // NeoPixel specific functions  //
004637  005025  //==============================//
004638  005026        
004639  005027  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004640  005028  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004641  005029  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004642  005030  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004643  005031  //       : data        : Address of data to be sent
004644  005032  //       : size        : number of colour 'sets' to follow
004645  005033  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004646  005034  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004647  005035  //       : Repeat      : Number of times to repeat the colours between first and last
004648  005036  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004649  005037  //       : Returns true if the pin number is legal (usually ignored)
004650  005038  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004651  005039  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004652  005040        
004653  005041  // NeoPixel related constants
004654  005042  #CONST
004655  005046  #END
004656  005047        
004657  005048  func __reserved85(), 0; // do not remove
004658  005049  func __reserved86(), 0; // do not remove
004659  005050        
004660  005051  //==============================================//
004661  005052  // spi flash device specific functions          //
004662  005053  //==============================================//
004663  005054        
004664  005055  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004665  005056  // Syntax   : spiflash_SIG("spi#","enablepin");
004666  005057  // Usage    : var := spiflash_SIG(SPI1, PA0);
004667  005058  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004668  005059  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004669  005060  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004670  005061  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004671  005062  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004672  005063  //          : byte is ignored.
004673  005064        
004674  005065  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004675  005066  // Syntax   : spiflash_ID("spi#","enablepin");
004676  005067  // Usage    : var := spiflash_ID(SPI1, PA0);
004677  005068  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004678  005069  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004679  005070  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004680  005071  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004681  005072  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004682  005073  //          : contains capacity. Refer to the device data sheet for further information.
004683  005074        
004684  005075  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004685  005076  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004686  005077  // Usage    : spiflash_BulkErase(SPI1, PA0);
004687  005078  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004688  005079  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004689  005080  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004690  005081  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004691  005082  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004692  005083  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004693  005084        
004694  005085  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004695  005086  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004696  005087  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004697  005088  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004698  005089  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004699  005090  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004700  005091  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004701  005092  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004702  005093  //          : blockAddress The address of the 64k FLASH block to be erased.
004703  005094  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004704  005095  //          : can take up to 3 milliseconds.
004705  005096        
004706  005097  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004707  005098  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004708  005099  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004709  005100  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004710  005101        
004711  005102  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004712  005103  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004713  005104  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004714  005105  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004715  005106  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004716  005107  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004717  005108  //       : returns number of characters read
004718  005109  //       : if "dest" is zero, data is read direct to GRAM window
004719  005110  //       :
004720  005111        
004721  005112  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004722  005113  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004723  005114  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004724  005115  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004725  005116  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004726  005117  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004727  005118  //       : returns number of bytes written
004728  005119  //       :
004729  005120        
004730  005121  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004731  005122  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004732  005123  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004733  005124  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004734  005125  //       : The image is displayed at x,y (with respect to top left corner).
004735  005126        
004736  005127  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004737  005128  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004738  005129  // Usage : spiflash_PutC('x', SPI1, PA0);
004739  005130  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004740  005131  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004741  005132  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004742  005133        
004743  005134  func spiflash_GetC("spi#", "enablepin"), 1;
004744  005135  // Syntax: spiflash_GetC("spi#", "enablepin");
004745  005136  // Usage : mychar := fgetC(SPI1, PA0);
004746  005137  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004747  005138  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004748  005139  //       : by subsequent reads or writes.
004749  005140  //       : returns next char from file
004750  005141        
004751  005142  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004752  005143  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004753  005144  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004754  005145  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004755  005146  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004756  005147  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004757  005148        
004758  005149  func spiflash_GetW("spi#", "enablepin"), 1;
004759  005150  // Syntax: spiflash_GetW("spi#", "enablepin");
004760  005151  // Usage : myword := fgetW(SPI1, PA0);
004761  005152  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004762  005153  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004763  005154  //       : by subsequent reads or writes.
004764  005155  // Notes : returns next word in file
004765  005156        
004766  005157  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004767  005158  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004768  005159  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004769  005160  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004770  005161  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004771  005162  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004772  005163  //       : returns number of characters written
004773  005164  //       :
004774  005165        
004775  005166  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004776  005167  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004777  005168  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004778  005169  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004779  005170  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004780  005171  //       : by subsequent reads or writes.
004781  005172  //       : returns pointer to string or null if failed.
004782  005173  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004783  005174  //       : NB:- only reads up to "size-1" characters into "string"
004784  005175  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004785  005176  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004786  005177  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004787  005178  //       : C] It reaches the end of file
004788  005179  //       : D] A read error occurs.
004789  005180        
004790  005181  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004791  005182  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004792  005183  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004793  005184  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004794  005185  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004795  005186  //       : return a function pointer to the allocation.
004796  005187  //       : The function can then be invoked just like any other
004797  005188  //       : function would be called via a function pointer.
004798  005189  //       : Parameters may be passed to it in a conventional way.
004799  005190  //       : The function may be discarded at any time when no
004800  005191  //       : longer required, thus freeing its memory resources.
004801  005192  //       : The loaded function can be discarded with mem_Free(..)
004802  005193  //       : eg:
004803  005194  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004804  005195  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004805  005196  //       : then elsewhere in your program:-
004806  005197  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004807  005198  //       : if(res == QUIT_APPLICATION) goto exitApp;
004808  005199  //       : Later in your program, when popupWindow is no longer
004809  005200  //       : required for the application:-
004810  005201  //       : res := mem_Free(popupWindow);
004811  005202  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004812  005203  //       : The callers stack is shared by the loaded function,
004813  005204  //       : however any global variables in the loaded function
004814  005205  //       : are private to that function.
004815  005206  //
004816  005207        
004817  005208  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004818  005209  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004819  005210  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004820  005211  // Notes : current program releases any allocated memory but
004821  005212  //       : retains the stack and global memory.
004822  005213  //       : If arglistptr is 0, no arguments are passed, else
004823  005214  //       : arglist points to an array, the first element being
004824  005215  //       : the number of elements in the array.
004825  005216  //       : func 'main' in the called program accepts
004826  005217  //       : the arguments, if any. The arguments can only
004827  005218  //       : be passed by value, no pointers or references can be
004828  005219  //       : used as all memory is cleared before the file
004829  005220  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004830  005221  //       : for functions that can pass by reference.
004831  005222        
004832  005223  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004833  005224  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004834  005225  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004835  005226  // Notes : returns like a function, current program
004836  005227  //       : calling program is kept active and control returns to it.
004837  005228  //       : If arglistptr is 0, no arguments are passed, else
004838  005229  //       : arglist points to an array, the first element being
004839  005230  //       : the number of elements in the array.
004840  005231  //       : func 'main' in the called program accepts the arguments.
004841  005232  //       : This function is similar to spiflash_LoadFunction(...), however,
004842  005233  //       : the function argument list is passed by pointer, and
004843  005234  //       : the memory consumed by the function is released as
004844  005235  //       : soon as the function completes.
004845  005236        
004846  005237  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004847  005238  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004848  005239  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004849  005240  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004850  005241  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004851  005242  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004852  005243  //       : Returns NULL if function fails.
004853  005244  //       : Returns a handle (pointer to the memory allocation) to the
004854  005245  //       : image control list that has been created.
004855  005246        
004856  005247  // Notes : This function Calculates the size of a chunk of memory required for
004857  005248  //       : a image list and populates it from the image control file ("*.dat")
004858  005249  //       : therefore, when imagelist is no longer required, you must de-allocate
004859  005250  //       : the image list memory by using eg:- mem_Free(hImagelist);
004860  005251  //       : to restore the heap.
004861  005252  //       :
004862  005253        
004863  005254  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004864  005255  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004865  005256  // Usage : spiflash_PlayWAV(SPI1, PA0);
004866  005257  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004867  005258  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004868  005259  //       : or writes.
004869  005260  //       : This function automatically grabs a chunk
004870  005261  //       : of memory for a file buffer, and a wave
004871  005262  //       : buffer. The minimum memory requirement is
004872  005263  //       : about 580 bytes for the disk io service and
004873  005264  //       : a minimum wave buffer size of 1024. The size
004874  005265  //       : of the wave buffer allocation
004875  005266  //       : can be increased by the snd_BufSize function.
004876  005267  //       : The default size 1024 bytes.
004877  005268  //       : NB the memory is only required during the
004878  005269  //       : duration of play, and is automatically
004879  005270  //       : released while not in use.
004880  005271  //       : See the Sound Class services for other associated controls.
004881  005272  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004882  005273  //       : If errors occured, the folling is returned
004883  005274  //       : -7  : Insufficient memory available for WAV buffer and file
004884  005275  //       : -6  : cant play this rate
004885  005276  //       : -5  : no data chunk found in first rsector
004886  005277  //       : -4  : no format data
004887  005278  //       : -3  : no wave chunk signature
004888  005279  //       : -2  : bad wave file format
004889  005280  //       : -1  : file not found
004890  005281        
004891  005282  //==============================================//
004892  005283  // more com functions                           //
004893  005284  //==============================================//
004894  005285        
004895  005286  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004896  005287  // Syntax   : com1_TXblock("buf", "bufsize");
004897  005288  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004898  005289  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004899  005290  //          : if a transmit buffer is active and space is available this function will return almost
004900  005291  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004901  005292        
004902  005293  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004903  005294  // Syntax   : com1_RXblock("buf", "bufsize");
004904  005295  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004905  005296  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004906  005297  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004907  005298  //          : immediately otherwise it will block until until the required bytes are received.
004908  005299        
004909  005300  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004910  005301  // Syntax   : com_TXblock("buf", "bufsize");
004911  005302  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004912  005303  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004913  005304  //          : if a transmit buffer is active and space is available this function will return almost
004914  005305  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004915  005306        
004916  005307  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004917  005308  // Syntax   : com_RXblock("buf", "bufsize");
004918  005309  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004919  005310  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004920  005311  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004921  005312  //          : immediately otherwise it will block until until the required bytes are received.
004922  005313        
004923  005314  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004924  005315  // Syntax   : com_TXblock("buf", "bufsize");
004925  005316  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004926  005317  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004927  005318  //          : if a transmit buffer is active and space is available this function will return almost
004928  005319  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004929  005320        
004930  005321  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004931  005322  // Syntax   : com_RXblock("buf", "bufsize");
004932  005323  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004933  005324  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004934  005325  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004935  005326  //          : immediately otherwise it will block until until the required bytes are received.
004936  005327        
004937  005328  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004938  005329  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004939  005330  // Usage : disp_BlitPixelsFromCOM1();
004940  005331  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004941  005332  //       : display from the specified com port.
004942  005333        
004943  005334  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004944  005335  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004945  005336  // Usage : disp_BlitPixelsFromCOM2();
004946  005337  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004947  005338  //       : display from the specified com port.
004948  005339        
004949  005340  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004950  005341  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004951  005342  // Usage : disp_BlitPixelsFromCOM3();
004952  005343  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004953  005344  //       : display from the specified com port.
004954  005345        
004955  005346        
004956  005347  //==============================================//
004957  005348  // crc generation functions                     //
004958  005349  //==============================================//
004959  005350        
004960  005351  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004961  005352  // *Notes   : (if you calculate all of the incoming data
004962  005353  //          : INCLUDING the CRC, the result should be 0x00
004963  005354  //          : This is equivalent to simple addition of all bytes
004964  005355  //          : and returning the negated sum an 8 bit value.
004965  005356  //          : For the standard test string "123456789",
004966  005357  //          : crc_CSUM_8 will return 0x0023.
004967  005358        
004968  005359        
004969  005360  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004970  005361  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004971  005362  //          : (if you calculate all of the incoming data
004972  005363  //          : INCLUDING the CRC, the result should be 0x0000
004973  005364  //          : For the standard test string "123456789",
004974  005365  //          : crc_16 will return 0xBB3D.
004975  005366        
004976  005367        
004977  005368  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004978  005369  // *Notes   : (if you calculate all of the incoming data
004979  005370  //          : INCLUDING the CRC, the result should be 0x0000
004980  005371  //          : For the standard test string "123456789",
004981  005372  //          : crc_MODBUS will return 0x4B37.
004982  005373        
004983  005374        
004984  005375  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004985  005376  // *Notes   : (if you calculate all of the incoming data
004986  005377  //          : INCLUDING the CRC, the result should be 0x0000
004987  005378  //          : For the standard test string "123456789",
004988  005379  //          : crc_CCITT will return the following:-
004989  005380  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004990  005381  //          : seed = 0xFFFF, result = 0x29B1
004991  005382  //          : seed = 0x1D0F, result = 0xE5CC
004992  005383        
004993  005384        
004994  005385  //------------------------------------------------------------------//
004995  005386  // CONSTANTS
004996  005387  //------------------------------------------------------------------//
004997  005388        
004998  005389  #CONST
004999  005393  #END
005000  005394        
005001  005395  // timebase constants for timebase_init
005002  005396  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005003  005397  #CONST
005004  005408  #END
005005  005409        
005006  005410        
005007  005411  // generic constants
005008  005412  #CONST
005009  005420  #END
005010  005421        
005011  005422        
005012  005423        
005013  005424  //gfx_Get() related constants
005014  005425  #CONST
005015  005434  #END
005016  005435        
005017  005436        
005018  005437        
005019  005438        
005020  005439  #CONST
005021  005452  #END
005022  005453        
005023  005454        
005024  005455  #CONST
005025  005480  #END
005026  005481        
005027  005482        
005028  005483        
005029  005484        
005030  005485  // timer control  related constants
005031  005486  #CONST
005032  005495  #END
005033  005496        
005034  005497        
005035  005498        
005036  005499  //------------------------------------------------------------------------------
005037  005500  // system WORD variables accesible with peekW and pokeW or pointer access
005038  005501  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005039  005502  // can also be accessed with peekW and pokeW
005040  005503  //------------------------------------------------------------------------------
005041  005504        
005042  005505  #CONST
005043  005600  #END
005044  005601        
005045  005602  #CONST
005046  005767  #END
005047  005768        
005048  005769        
005049  005770        
005050  005771  //==================================================================================================
005051  005772        
005052  005773        
005053  005774        
005054  000013      #ENDIF
005055  000014        
005056  000015        
005057  000016  //===========================================================================================
005058  000017        
005059  000018        
005060  000002        
005061  000003  // generated 13/10/2015 8:57:28
005062  000004        
005063  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005064  000006  #inherit "4DGL_16bitColours.fnc"
005065  000006  #inherit "4DGL_16bitColours.fnc"
005066  000004  */
005067  000005        
005068  000006        
005069  000007        
005070  000008  #CONST
005071  000149  #END
005072  000150        
005073  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005074  000008  #inherit "VisualConst.inc"
005075  000008  #inherit "VisualConst.inc"
005076  000001  // Line Patterns
005077  000002  #constant  LPCOARSE    0xF0F0
005078  000002  #constant  LPCOARSE    0xF0F0
005079  000003  #constant  LPMEDIUM    0x3333
005080  000003  #constant  LPMEDIUM    0x3333
005081  000004  #constant  LPFINE      0xAAAA
005082  000004  #constant  LPFINE      0xAAAA
005083  000005  #constant  LPDASHDOT   0x03CF
005084  000005  #constant  LPDASHDOT   0x03CF
005085  000006  #constant  LPDASHDOTDOT 0x0333
005086  000006  #constant  LPDASHDOTDOT 0x0333
005087  000007  #constant  LPSOLID     0x0000
005088  000007  #constant  LPSOLID     0x0000
005089  000009        
005090  000010        
file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1Const.inc

005091  000011  #inherit "RepRap_Touchv1Const.inc"
005092  000011  #inherit "RepRap_Touchv1Const.inc"
005093  000001  // File generated 13/10/2015 8:57:08
005094  000002  // Warning! This is a generated file, any manual changes will be
005095  000003  // lost during the next generation.
005096  000004        
005097  000005  #constant  Strings3Count    0
005098  000005  #constant  Strings3Count    0
005099  000006  #constant  Strings3Size     1
005100  000006  #constant  Strings3Size     1
005101  000007  #constant  Strings1Count    1
005102  000007  #constant  Strings1Count    1
005103  000008  #constant  Strings1Size     30
005104  000008  #constant  Strings1Size     30
005105  000009  #constant  Strings4Count    1
005106  000009  #constant  Strings4Count    1
005107  000010  #constant  Strings4Size     25
005108  000010  #constant  Strings4Size     25
005109  000011  #constant  Strings6Count    1
005110  000011  #constant  Strings6Count    1
005111  000012  #constant  Strings6Size     31
005112  000012  #constant  Strings6Size     31
005113  000013  #constant  Strings2Count    0
005114  000013  #constant  Strings2Count    0
005115  000014  #constant  Strings2Size     1
005116  000014  #constant  Strings2Size     1
005117  000015  #constant  Strings0Count    1
005118  000015  #constant  Strings0Count    1
005119  000016  #constant  Strings0Size     7
005120  000016  #constant  Strings0Size     7
005121  000017  #constant  Strings9Count    0
005122  000017  #constant  Strings9Count    0
005123  000018  #constant  Strings9Size     1
005124  000018  #constant  Strings9Size     1
005125  000019  #constant  Strings34Count    0
005126  000019  #constant  Strings34Count    0
005127  000020  #constant  Strings34Size     1
005128  000020  #constant  Strings34Size     1
005129  000021  #constant  Strings36Count    0
005130  000021  #constant  Strings36Count    0
005131  000022  #constant  Strings36Size     1
005132  000022  #constant  Strings36Size     1
005133  000023  #constant  Strings37Count    0
005134  000023  #constant  Strings37Count    0
005135  000024  #constant  Strings37Size     1
005136  000024  #constant  Strings37Size     1
005137  000025  #constant  Strings12Count    1
005138  000025  #constant  Strings12Count    1
005139  000026  #constant  Strings12Size     14
005140  000026  #constant  Strings12Size     14
005141  000027  #constant  Strings16Count    0
005142  000027  #constant  Strings16Count    0
005143  000028  #constant  Strings16Size     1
005144  000028  #constant  Strings16Size     1
005145  000029  #constant  Strings11Count    1
005146  000029  #constant  Strings11Count    1
005147  000030  #constant  Strings11Size     73
005148  000030  #constant  Strings11Size     73
005149  000031  #constant  Strings7Count    0
005150  000031  #constant  Strings7Count    0
005151  000032  #constant  Strings7Size     1
005152  000032  #constant  Strings7Size     1
005153  000033  #constant  Strings8Count    0
005154  000033  #constant  Strings8Count    0
005155  000034  #constant  Strings8Size     1
005156  000034  #constant  Strings8Size     1
005157  000035  #constant  Strings38Count    0
005158  000035  #constant  Strings38Count    0
005159  000036  #constant  Strings38Size     1
005160  000036  #constant  Strings38Size     1
005161  000037  #constant  Strings39Count    0
005162  000037  #constant  Strings39Count    0
005163  000038  #constant  Strings39Size     1
005164  000038  #constant  Strings39Size     1
005165  000039  #constant  Strings40Count    1
005166  000039  #constant  Strings40Count    1
005167  000040  #constant  Strings40Size     7
005168  000040  #constant  Strings40Size     7
005169  000041  #constant  Strings41Count    1
005170  000041  #constant  Strings41Count    1
005171  000042  #constant  Strings41Size     7
005172  000042  #constant  Strings41Size     7
005173  000043  #constant  Strings42Count    1
005174  000043  #constant  Strings42Count    1
005175  000044  #constant  Strings42Size     7
005176  000044  #constant  Strings42Size     7
005177  000045  #constant  Strings43Count    0
005178  000045  #constant  Strings43Count    0
005179  000046  #constant  Strings43Size     1
005180  000046  #constant  Strings43Size     1
005181  000047  #constant  Strings44Count    0
005182  000047  #constant  Strings44Count    0
005183  000048  #constant  Strings44Size     1
005184  000048  #constant  Strings44Size     1
005185  000049  #constant  Strings45Count    0
005186  000049  #constant  Strings45Count    0
005187  000050  #constant  Strings45Size     1
005188  000050  #constant  Strings45Size     1
005189  000051  #constant  Strings51Count    0
005190  000051  #constant  Strings51Count    0
005191  000052  #constant  Strings51Size     1
005192  000052  #constant  Strings51Size     1
005193  000053  #constant  Strings52Count    0
005194  000053  #constant  Strings52Count    0
005195  000054  #constant  Strings52Size     1
005196  000054  #constant  Strings52Size     1
005197  000055  #constant  Strings29Count    1
005198  000055  #constant  Strings29Count    1
005199  000056  #constant  Strings29Size     53
005200  000056  #constant  Strings29Size     53
005201  000057  #constant  Strings31Count    1
005202  000057  #constant  Strings31Count    1
005203  000058  #constant  Strings31Size     7
005204  000058  #constant  Strings31Size     7
005205  000059  #constant  Strings32Count    1
005206  000059  #constant  Strings32Count    1
005207  000060  #constant  Strings32Size     19
005208  000060  #constant  Strings32Size     19
005209  000061  #constant  Strings50Count    0
005210  000061  #constant  Strings50Count    0
005211  000062  #constant  Strings50Size     1
005212  000062  #constant  Strings50Size     1
005213  000063  #constant  Strings53Count    1
005214  000063  #constant  Strings53Count    1
005215  000064  #constant  Strings53Size     67
005216  000064  #constant  Strings53Size     67
005217  000065  #constant  Strings5Count    0
005218  000065  #constant  Strings5Count    0
005219  000066  #constant  Strings5Size     1
005220  000066  #constant  Strings5Size     1
005221  000067  #constant  Strings10Count    1
005222  000067  #constant  Strings10Count    1
005223  000068  #constant  Strings10Size     5
005224  000068  #constant  Strings10Size     5
005225  000069  #constant  Strings17Count    0
005226  000069  #constant  Strings17Count    0
005227  000070  #constant  Strings17Size     1
005228  000070  #constant  Strings17Size     1
005229  000071  // object indexes into ImageControl
005230  000072  #CONST
005231  000325  #END
005232  000326        
005233  000327  #constant  Strings13Size     0
005234  000327  #constant  Strings13Size     0
005235  000328  #constant  Strings13StartH   0
005236  000328  #constant  Strings13StartH   0
005237  000329  #constant  Strings13StartL   0
005238  000329  #constant  Strings13StartL   0
005239  000330  #constant  Strings14Size     0
005240  000330  #constant  Strings14Size     0
005241  000331  #constant  Strings14StartH   0
005242  000331  #constant  Strings14StartH   0
005243  000332  #constant  Strings14StartL   0
005244  000332  #constant  Strings14StartL   0
005245  000333  #constant  Strings15Size     0
005246  000333  #constant  Strings15Size     0
005247  000334  #constant  Strings15StartH   0
005248  000334  #constant  Strings15StartH   0
005249  000335  #constant  Strings15StartL   0
005250  000335  #constant  Strings15StartL   0
005251  000336  #constant  Strings18Size     0
005252  000336  #constant  Strings18Size     0
005253  000337  #constant  Strings18StartH   0
005254  000337  #constant  Strings18StartH   0
005255  000338  #constant  Strings18StartL   0
005256  000338  #constant  Strings18StartL   0
005257  000339  #constant  Strings19Size     0
005258  000339  #constant  Strings19Size     0
005259  000340  #constant  Strings19StartH   0
005260  000340  #constant  Strings19StartH   0
005261  000341  #constant  Strings19StartL   0
005262  000341  #constant  Strings19StartL   0
005263  000342  #constant  Strings20Size     0
005264  000342  #constant  Strings20Size     0
005265  000343  #constant  Strings20StartH   0
005266  000343  #constant  Strings20StartH   0
005267  000344  #constant  Strings20StartL   0
005268  000344  #constant  Strings20StartL   0
005269  000345  #constant  Strings21Size     0
005270  000345  #constant  Strings21Size     0
005271  000346  #constant  Strings21StartH   0
005272  000346  #constant  Strings21StartH   0
005273  000347  #constant  Strings21StartL   0
005274  000347  #constant  Strings21StartL   0
005275  000348  #constant  Strings22Size     0
005276  000348  #constant  Strings22Size     0
005277  000349  #constant  Strings22StartH   0
005278  000349  #constant  Strings22StartH   0
005279  000350  #constant  Strings22StartL   0
005280  000350  #constant  Strings22StartL   0
005281  000351  #constant  Strings23Size     0
005282  000351  #constant  Strings23Size     0
005283  000352  #constant  Strings23StartH   0
005284  000352  #constant  Strings23StartH   0
005285  000353  #constant  Strings23StartL   0
005286  000353  #constant  Strings23StartL   0
005287  000354  #constant  Strings24Size     0
005288  000354  #constant  Strings24Size     0
005289  000355  #constant  Strings24StartH   0
005290  000355  #constant  Strings24StartH   0
005291  000356  #constant  Strings24StartL   0
005292  000356  #constant  Strings24StartL   0
005293  000357  #constant  Strings25Size     0
005294  000357  #constant  Strings25Size     0
005295  000358  #constant  Strings25StartH   0
005296  000358  #constant  Strings25StartH   0
005297  000359  #constant  Strings25StartL   0
005298  000359  #constant  Strings25StartL   0
005299  000360  #constant  Strings26Size     0
005300  000360  #constant  Strings26Size     0
005301  000361  #constant  Strings26StartH   0
005302  000361  #constant  Strings26StartH   0
005303  000362  #constant  Strings26StartL   0
005304  000362  #constant  Strings26StartL   0
005305  000363  #constant  Strings27Size     0
005306  000363  #constant  Strings27Size     0
005307  000364  #constant  Strings27StartH   0
005308  000364  #constant  Strings27StartH   0
005309  000365  #constant  Strings27StartL   0
005310  000365  #constant  Strings27StartL   0
005311  000366  #constant  Strings28Size     0
005312  000366  #constant  Strings28Size     0
005313  000367  #constant  Strings28StartH   0
005314  000367  #constant  Strings28StartH   0
005315  000368  #constant  Strings28StartL   0
005316  000368  #constant  Strings28StartL   0
005317  000369  #constant  Strings30Size     0
005318  000369  #constant  Strings30Size     0
005319  000370  #constant  Strings30StartH   0
005320  000370  #constant  Strings30StartH   0
005321  000371  #constant  Strings30StartL   0
005322  000371  #constant  Strings30StartL   0
005323  000372  #constant  Strings33Size     0
005324  000372  #constant  Strings33Size     0
005325  000373  #constant  Strings33StartH   0
005326  000373  #constant  Strings33StartH   0
005327  000374  #constant  Strings33StartL   0
005328  000374  #constant  Strings33StartL   0
005329  000375  #constant  Strings35Size     0
005330  000375  #constant  Strings35Size     0
005331  000376  #constant  Strings35StartH   0
005332  000376  #constant  Strings35StartH   0
005333  000377  #constant  Strings35StartL   0
005334  000377  #constant  Strings35StartL   0
005335  000378  #constant  Strings46Size     0
005336  000378  #constant  Strings46Size     0
005337  000379  #constant  Strings46StartH   0
005338  000379  #constant  Strings46StartH   0
005339  000380  #constant  Strings46StartL   0
005340  000380  #constant  Strings46StartL   0
005341  000381  #constant  Strings47Size     0
005342  000381  #constant  Strings47Size     0
005343  000382  #constant  Strings47StartH   0
005344  000382  #constant  Strings47StartH   0
005345  000383  #constant  Strings47StartL   0
005346  000383  #constant  Strings47StartL   0
005347  000384  #constant  Strings48Size     0
005348  000384  #constant  Strings48Size     0
005349  000385  #constant  Strings48StartH   0
005350  000385  #constant  Strings48StartH   0
005351  000386  #constant  Strings48StartL   0
005352  000386  #constant  Strings48StartL   0
005353  000387  #constant  Strings49Size     0
005354  000387  #constant  Strings49Size     0
005355  000388  #constant  Strings49StartH   0
005356  000388  #constant  Strings49StartH   0
005357  000389  #constant  Strings49StartL   0
005358  000389  #constant  Strings49StartL   0
005359  000390  #constant  Strings3StartH   0x0
005360  000390  #constant  Strings3StartH   0x0
005361  000391  #constant  Strings3StartL   0x0
005362  000391  #constant  Strings3StartL   0x0
005363  000392  #constant  Strings1StartH   0x0
005364  000392  #constant  Strings1StartH   0x0
005365  000393  #constant  Strings1StartL   0x200
005366  000393  #constant  Strings1StartL   0x200
005367  000394  #constant  Strings4StartH   0x0
005368  000394  #constant  Strings4StartH   0x0
005369  000395  #constant  Strings4StartL   0x400
005370  000395  #constant  Strings4StartL   0x400
005371  000396  #constant  Strings6StartH   0x0
005372  000396  #constant  Strings6StartH   0x0
005373  000397  #constant  Strings6StartL   0x600
005374  000397  #constant  Strings6StartL   0x600
005375  000398  #constant  Strings2StartH   0x0
005376  000398  #constant  Strings2StartH   0x0
005377  000399  #constant  Strings2StartL   0x800
005378  000399  #constant  Strings2StartL   0x800
005379  000400  #constant  Strings0StartH   0x0
005380  000400  #constant  Strings0StartH   0x0
005381  000401  #constant  Strings0StartL   0xA00
005382  000401  #constant  Strings0StartL   0xA00
005383  000402  #constant  Strings9StartH   0x0
005384  000402  #constant  Strings9StartH   0x0
005385  000403  #constant  Strings9StartL   0xC00
005386  000403  #constant  Strings9StartL   0xC00
005387  000404  #constant  Strings34StartH   0x0
005388  000404  #constant  Strings34StartH   0x0
005389  000405  #constant  Strings34StartL   0xE00
005390  000405  #constant  Strings34StartL   0xE00
005391  000406  #constant  Strings36StartH   0x0
005392  000406  #constant  Strings36StartH   0x0
005393  000407  #constant  Strings36StartL   0x1000
005394  000407  #constant  Strings36StartL   0x1000
005395  000408  #constant  Strings37StartH   0x0
005396  000408  #constant  Strings37StartH   0x0
005397  000409  #constant  Strings37StartL   0x1200
005398  000409  #constant  Strings37StartL   0x1200
005399  000410  #constant  Strings12StartH   0x0
005400  000410  #constant  Strings12StartH   0x0
005401  000411  #constant  Strings12StartL   0x1400
005402  000411  #constant  Strings12StartL   0x1400
005403  000412  #constant  Strings16StartH   0x0
005404  000412  #constant  Strings16StartH   0x0
005405  000413  #constant  Strings16StartL   0x1600
005406  000413  #constant  Strings16StartL   0x1600
005407  000414  #constant  Strings11StartH   0x0
005408  000414  #constant  Strings11StartH   0x0
005409  000415  #constant  Strings11StartL   0x1800
005410  000415  #constant  Strings11StartL   0x1800
005411  000416  #constant  Strings7StartH   0x0
005412  000416  #constant  Strings7StartH   0x0
005413  000417  #constant  Strings7StartL   0x1A00
005414  000417  #constant  Strings7StartL   0x1A00
005415  000418  #constant  Strings8StartH   0x0
005416  000418  #constant  Strings8StartH   0x0
005417  000419  #constant  Strings8StartL   0x1C00
005418  000419  #constant  Strings8StartL   0x1C00
005419  000420  #constant  Strings38StartH   0x0
005420  000420  #constant  Strings38StartH   0x0
005421  000421  #constant  Strings38StartL   0x1E00
005422  000421  #constant  Strings38StartL   0x1E00
005423  000422  #constant  Strings39StartH   0x0
005424  000422  #constant  Strings39StartH   0x0
005425  000423  #constant  Strings39StartL   0x2000
005426  000423  #constant  Strings39StartL   0x2000
005427  000424  #constant  Strings40StartH   0x0
005428  000424  #constant  Strings40StartH   0x0
005429  000425  #constant  Strings40StartL   0x2200
005430  000425  #constant  Strings40StartL   0x2200
005431  000426  #constant  Strings41StartH   0x0
005432  000426  #constant  Strings41StartH   0x0
005433  000427  #constant  Strings41StartL   0x2400
005434  000427  #constant  Strings41StartL   0x2400
005435  000428  #constant  Strings42StartH   0x0
005436  000428  #constant  Strings42StartH   0x0
005437  000429  #constant  Strings42StartL   0x2600
005438  000429  #constant  Strings42StartL   0x2600
005439  000430  #constant  Strings43StartH   0x0
005440  000430  #constant  Strings43StartH   0x0
005441  000431  #constant  Strings43StartL   0x2800
005442  000431  #constant  Strings43StartL   0x2800
005443  000432  #constant  Strings44StartH   0x0
005444  000432  #constant  Strings44StartH   0x0
005445  000433  #constant  Strings44StartL   0x2A00
005446  000433  #constant  Strings44StartL   0x2A00
005447  000434  #constant  Strings45StartH   0x0
005448  000434  #constant  Strings45StartH   0x0
005449  000435  #constant  Strings45StartL   0x2C00
005450  000435  #constant  Strings45StartL   0x2C00
005451  000436  #constant  Strings51StartH   0x0
005452  000436  #constant  Strings51StartH   0x0
005453  000437  #constant  Strings51StartL   0x2E00
005454  000437  #constant  Strings51StartL   0x2E00
005455  000438  #constant  Strings52StartH   0x0
005456  000438  #constant  Strings52StartH   0x0
005457  000439  #constant  Strings52StartL   0x3000
005458  000439  #constant  Strings52StartL   0x3000
005459  000440  #constant  Strings29StartH   0x0
005460  000440  #constant  Strings29StartH   0x0
005461  000441  #constant  Strings29StartL   0x3200
005462  000441  #constant  Strings29StartL   0x3200
005463  000442  #constant  Strings31StartH   0x0
005464  000442  #constant  Strings31StartH   0x0
005465  000443  #constant  Strings31StartL   0x3400
005466  000443  #constant  Strings31StartL   0x3400
005467  000444  #constant  Strings32StartH   0x0
005468  000444  #constant  Strings32StartH   0x0
005469  000445  #constant  Strings32StartL   0x3600
005470  000445  #constant  Strings32StartL   0x3600
005471  000446  #constant  Strings50StartH   0x0
005472  000446  #constant  Strings50StartH   0x0
005473  000447  #constant  Strings50StartL   0x3800
005474  000447  #constant  Strings50StartL   0x3800
005475  000448  #constant  Strings53StartH   0x0
005476  000448  #constant  Strings53StartH   0x0
005477  000449  #constant  Strings53StartL   0x3A00
005478  000449  #constant  Strings53StartL   0x3A00
005479  000450  #constant  Strings5StartH   0x0
005480  000450  #constant  Strings5StartH   0x0
005481  000451  #constant  Strings5StartL   0x3C00
005482  000451  #constant  Strings5StartL   0x3C00
005483  000452  #constant  Strings10StartH   0x0
005484  000452  #constant  Strings10StartH   0x0
005485  000453  #constant  Strings10StartL   0x3E00
005486  000453  #constant  Strings10StartL   0x3E00
005487  000454  #constant  Strings17StartH   0x0
005488  000454  #constant  Strings17StartH   0x0
005489  000455  #constant  Strings17StartL   0x4000
005490  000455  #constant  Strings17StartL   0x4000
005491  000456  #IFNOT EXISTS NOGLOBALS
005492  000457  var hndl ;
005493  000458  #ENDIF
005494  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005495  000013  #inherit "CLPrintStrings.inc"
005496  000013  #inherit "CLPrintStrings.inc"
005497  000001  func PrintStrings(var ID, var *msgid, var String)
005498  000002      var StringID, i, ch, offs32[2], res32[2];
005499  000003      StringID := oStringss[1+ID] ;
005500  000004      if (String)
005501  000005          stringsCV[ID] := -1 ;
005502  000006      else
005503  000007          stringsCV[ID] := msgid ;
005504  000008      endif
005505  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005506  000010      txt_FontID(hFonts[ID]) ;
005507  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005508  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005509  000013        
005510  000014      if (*(StringID + Ofs_String_Transparent))
005511  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005512  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005513  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005514  000018      else
005515  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005516  000020          gfx_Clipping(ON) ;
005517  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005518  000022          gfx_Clipping(OFF) ;
005519  000023        
005520  000024      endif
005521  000025        
005522  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005523  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005524  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005525  000029        
005526  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005527  000031        
005528  000032      if (String)
005529  000033          i := 0 ;
005530  000034          ch := msgid[i++] ;
005531  000035          while (ch != 0)
005532  000036              putch(ch) ;
005533  000037              ch := msgid[i++] ;
005534  000038          wend
005535  000039      else
005536  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005537  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005538  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005539  000043          uadd_3232(res32,res32,offs32) ;
005540  000044          file_Seek(hstrings, res32[1], res32[0]);
005541  000045          repeat
005542  000046              if (*(StringID + Ofs_String_Ansi))
005543  000047                  ch := file_GetC(hstrings) ;
005544  000048              else
005545  000049                  ch := file_GetW(hstrings) ;
005546  000050              endif
005547  000051              putch(ch) ;
005548  000052          until (ch == 0) ;
005549  000053      endif
005550  000054        
005551  000055  endfunc
005552  000056        
005553  000014        
005554  000015  #constant IPDatasize 22
005555  000015  #constant IPDatasize 22
005556  000016        
005557  000017  #CONST
005558  000021  #END
005559  000022        
005560  000023  #CONST
005561  000130  #END
005562  000131        
005563  000540  #END
5564  2424
5565  2425
5566  2426
5567  2427
5568  2428
5569  2429
5570  242A
5571  242B
5572  242C
5573  242D
5574  242E
5575  242F
5576  2430
5577  2431
5578  2432
5579  2433
5580  2434
5581  2435
5582  2436
5583  2437
5584  2438
5585  2439
5586  243A
5587  243B
5588  243C
5589  243D
5590  243E
5591  243F
5592  2440
5593  2441
5594  2442
5595  2443
5596  2444
5597  2445
5598  2446
5599  2447
5600  2448
5601  2449
5602  244A
5603  244B
5604  244C
5605  244D
5606  244E
5607  244F
5608  2450
5609  2451
5610  2452
5611  2453
5612  2454
5613  2455
5614  2456
5615  2457
5616  2458
5617  2459
5618  245A
5619  245B
5620  245C
5621  245D
5622  245E
5623  245F
5624  2460
5625  2461
5626  2462
5627  2463
5628  2464
5629  2465
5630  2466
5631  2467
5632  2468
5633  2469
5634  246A
5635  246B
5636  246C
5637  246D
5638  246E
5639  246F
5640  2470
5641  2471
5642  2472
5643  2473
5644  2474
5645  2475
5646  2476
5647  2477
5648  2478
5649  2479
5650  247A
5651  247B
5652  247C
5653  247D
5654  247E
5655  247F
5656  2480
5657  2481
5658  2482
5659  2483
5660  2484
5661  2485
5662  2486
5663  2487
5664  2488
5665  2489
5666  248A
5667  248B
5668  248C
5669  248D
5670  248E
5671  248F
5672  2490
5673  2491
5674  2492
5675  2493
5676  2494
5677  2495
5678  2496
5679  2497
5680  2498
5681  2499
5682  249A
5683  249B
5684  249C
5685  249D
5686  249E
5687  249F
5688  24A0
5689  24A1
5690  24A2
5691  24A3
5692  24A4
5693  24A5
5694  24A6
5695  24A7
5696  24A8
5697  24A9
5698  24AA
5699  24AB
5700  24AC
5701  24AD
5702  24AE
5703  24AF
5704  24B0
5705  24B1
5706  24B2
5707  24B3
5708  24B4
5709  24B5
5710  24B6
5711  24B7
5712  24B8
5713  24B9
5714  24BA
5715  24BB
5716  24BC
5717  24BD
5718  24BE
5719  24BF
5720  24C0
5721  24C1
5722  24C2
5723  24C3
5724  24C4
5725  24C5
5726  24C6
5727  24C7
5728  24C8
5729  24C9
5730  24CA
5731  24CB
5732  24CC
5733  24CD
5734  24CE
5735  24CF
5736  24D0
5737  24D1
5738  24D2
5739  24D3
5740  24D4
5741  24D5
5742  24D6
5743  24D7
5744  24D8
5745  24D9
5746  24DA
5747  24DB
5748  24DC
5749  24DD
5750  24DE
5751  24DF
5752  24E0
5753  24E1
5754  24E2
5755  24E3
5756  24E4
5757  24E5
5758  24E6
5759  24E7
5760  24E8
5761  24E9
5762  24EA
5763  24EB
5764  24EC
5765  24ED
5766  24EE
5767  24EF
5768  24F0
5769  24F1
5770  24F2
5771  24F3
5772  24F4
5773  24F5
5774  24F6
5775  24F7
5776  24F8
5777  24F9
5778  24FA
5779  24FB
5780  24FC
5781  24FD
5782  24FE
5783  24FF
5784  2500
5785  2501
5786  2502
5787  2503
5788  2504
5789  2505
5790  2506
5791  2507
5792  2508
5793  2509
5794  250A
5795  250B
5796  250C
5797  250D
5798  250E
5799  250F
5800  2510
5801  2511
5802  2512
5803  2513
5804  2514
5805  2515
5806  2516
5807  2517
5808  2518
5809  2519
5810  251A
5811  251B
5812  251C
5813  251D
5814  251E
5815  251F
5816  2520
5817  2521
5818  2522
5819  2523
5820  2524
5821  2525
5822  2526
5823  2527
5824  2528
5825  2529
5826  252A
5827  252B
5828  252C
5829  252D
5830  252E
5831  252F
5832  2530
5833  2531
5834  2532
5835  2533
5836  2534
5837  2535
5838  2536
5839  2537
5840  2538
5841  2539
5842  253A
5843  253B
5844  253C
5845  253D
5846  253E
5847  253F
5848  2540
5849  2541
5850  2542
5851  2543
5852  2544
5853  2545
5854  2546
5855  2547
5856  2548
5857  2549
5858  254A
5859  254B
5860  254C
5861  254D
5862  254E
5863  254F
5864  2550
5865  2551
5866  2552
5867  2553
5868  2554
5869  2555
5870  2556
5871  2557
5872  2558
5873  2559
5874  255A
5875  255B
5876  255C
5877  255D
5878  255E
5879  255F
5880  2560
5881  2561
5882  2562
5883  2563
5884  2564
5885  2565
5886  2566
5887  2567
5888  2568
5889  2569
5890  256A
5891  256B
5892  256C
5893  256D
5894  256E
5895  256F
5896  2570
5897  2571
5898  2572
5899  2573
5900  2574
5901  2575
5902  2576
5903  2577
5904  2578
5905  2579
5906  257A
5907  257B
5908  257C
5909  257D
5910  257E
5911  257F
5912  2580
5913  2581
5914  2582
5915  2583
5916  2584
5917  2585
5918  2586
5919  2587
5920  2588
5921  2589
5922  258A
5923  258B
5924  258C
5925  258D
5926  258E
5927  258F
5928  2590
5929  2591
5930  2592
5931  2593
5932  2594
5933  2595
5934  2596
5935  2597
5936  2598
5937  2599
5938  259A
5939  259B
5940  259C
5941  259D
5942  259E
5943  259F
5944  25A0
5945  25A1
5946  25A2
5947  25A3
5948  25A4
5949  25A5
5950  25A6
5951  25A7
5952  25A8
5953  25A9
5954  25AA
5955  25AB
5956  25AC
5957  25AD
5958  25AE
5959  25AF
5960  25B0
5961  25B1
5962  25B2
5963  25B3
5964  25B4
5965  25B5
5966  25B6
5967  25B7
5968  25B8
5969  25B9
5970  25BA
5971  25BB
5972  25BC
5973  25BD
5974  25BE
5975  25BF
5976  25C0
5977  25C1
5978  25C2
5979  25C3
5980  25C4
5981  25C5
5982  25C6
5983  25C7
5984  25C8
5985  25C9
5986  25CA
5987  25CB
5988  25CC
5989  25CD
5990  25CE
5991  25CF
5992  25D0
5993  25D1
5994  25D2
5995  25D3
5996  25D4
5997  25D5
5998  25D6
5999  25D7
6000  25D8
6001  25D9
6002  25DA
6003  25DB
6004  25DC
6005  25DD
6006  25DE
6007  25DF
6008  25E0
6009  25E1
6010  25E2
6011  25E3
6012  25E4
6013  25E5
6014  25E6
6015  25E7
6016  25E8
6017  25E9
6018  25EA
6019  25EB
6020  25EC
6021  25ED
6022  25EE
6023  25EF
6024  25F0
6025  25F1
6026  25F2
6027  25F3
6028  25F4
6029  25F5
6030  25F6
6031  25F7
6032  25F8
6033  25F9
6034  25FA
6035  25FB
6036  25FC
6037  25FD
6038  25FE
6039  25FF
6040  2600
6041  2601
6042  2602
6043  2603
6044  2604
6045  2605
6046  2606
6047  2607
6048  2608
6049  2609
6050  260A
6051  260B
6052  260C
6053  260D
6054  260E
6055  260F
6056  2610
6057  2611
6058  2612
6059  2613
6060  2614
6061  2615
6062  2616
6063  2617
6064  2618
6065  2619
6066  261A
6067  261B
6068  261C
6069  261D
6070  261E
6071  261F
6072  2620
6073  2621
6074  2622
6075  2623
6076  2624
6077  2625
6078  2626
6079  2627
6080  2628
6081  2629
6082  262A
6083  262B
6084  262C
6085  262D
6086  262E
6087  262F
6088  2630
6089  2631
6090  2632
6091  2633
6092  2634
6093  2635
6094  2636
6095  2637
6096  2638
6097  2639
6098  263A
6099  263B
6100  263C
6101  263D
6102  263E
6103  263F
6104  2640
6105  2641
6106  2642
6107  2643
6108  2644
6109  2645
6110  2646
6111  2647
6112  2648
6113  2649
6114  264A
6115  264B
6116  264C
6117  264D
6118  264E
6119  264F
6120  2650
6121  2651
6122  2652
6123  2653
6124  2654
6125  2655
6126  2656
6127  2657
6128  2658
6129  2659
6130  265A
6131  265B
6132  265C
6133  265D
6134  265E
6135  265F
6136  2660
6137  2661
6138  2662
6139  2663
6140  2664
6141  2665
6142  2666
6143  2667
6144  2668
6145  2669
6146  266A
6147  266B
6148  266C
6149  266D
6150  266E
6151  266F
6152  2670
6153  2671
6154  2672
6155  2673
6156  2674
6157  2675
6158  2676
6159  2677
6160  2678
6161  2679
6162  267A
6163  267B
6164  267C
6165  267D
6166  267E
6167  267F
6168  2680
6169  2681
6170  2682
6171  2683
6172  2684
6173  2685
6174  2686
6175  2687
6176  2688
6177  2689
6178  268A
6179  268B
6180  268C
6181  268D
6182  268E
6183  268F
6184  2690
6185  2691
6186  2692
6187  2693
6188  2694
6189  2695
6190  2696
6191  2697
6192  2698
6193  2699
6194  269A
6195  269B
6196  269C
6197  269D
6198  269E
6199  269F
6200  26A0
6201  26A1
6202  26A2
6203  26A3
6204  26A4
6205  26A5
6206  26A6
6207  26A7
6208  26A8
6209  26A9
6210  26AA
6211  26AB
6212  26AC
6213  26AD
6214  26AE
6215  26AF
6216  26B0
6217  26B1
6218  26B2
6219  26B3
6220  26B4
6221  26B5
6222  26B6
6223  26B7
6224  26B8
6225  26B9
6226  26BA
6227  26BB
6228  26BC
6229  26BD
6230  26BE
6231  26BF
6232  26C0
6233  26C1
6234  26C2
6235  26C3
6236  26C4
6237  26C5
6238  26C6
6239  26C7
6240  26C8
6241  26C9
6242  26CA
6243  26CB
6244  26CC
6245  26CD
6246  26CE
6247  26CF
6248  26D0
6249  26D1
6250  26D2
6251  26D3
6252  26D4
6253  26D5
6254  26D6
6255  26D7
6256  26D8
6257  26D9
6258  26DA
6259  26DB
6260  26DC
6261  26DD
6262  26DE
6263  26DF
6264  26E0
6265  26E1
6266  26E2
6267  26E3
6268  26E4
6269  26E5
6270  26E6
6271  26E7
6272  26E8
6273  26E9
6274  26EA
6275  26EB
6276  26EC
6277  26ED
6278  26EE
6279  26EF
6280  26F0
6281  26F1
6282  26F2
6283  26F3
6284  26F4
6285  26F5
6286  26F6
6287  26F7
6288  26F8
6289  26F9
6290  26FA
6291  26FB
6292  26FC
6293  26FD
6294  26FE
6295  26FF
6296  2700
6297  2701
6298  2702
6299  2703
6300  2704
6301  2705
6302  2706
6303  2707
6304  2708
6305  2709
6306  270A
6307  270B
6308  270C
6309  270D
6310  270E
6311  270F
6312  2710
6313  2711
6314  2712
6315  2713
6316  2714
6317  2715
6318  2716
6319  2717
6320  2718
6321  2719
6322  271A
6323  271B
6324  271C
6325  271D
6326  271E
6327  271F
6328  2720
6329  2721
6330  2722
6331  2723
6332  2724
6333  2725
6334  2726
6335  2727
6336  2728
6337  2729
6338  272A
6339  272B
6340  272C
6341  272D
6342  272E
6343  272F
6344  2730
6345  2731
6346  2732
6347  2733
6348  2734
6349  2735
6350  2736
6351  2737
6352  2738
6353  2739
6354  273A
6355  273B
6356  273C
6357  273D
6358  273E
6359  273F
6360  2740
6361  2741
6362  2742
6363  2743
6364  2744
6365  2745
6366  2746
6367  2747
6368  2748
6369  2749
6370  274A
6371  274B
6372  274C
6373  274D
6374  274E
6375  274F
6376  2750
6377  2751
6378  2752
6379  2753
6380  2754
6381  2755
6382  2756
6383  2757
6384  2758
6385  2759
6386  275A
6387  275B
6388  275C
6389  275D
6390  275E
6391  275F
6392  2760
6393  2761
6394  2762
6395  2763
6396  2764
6397  2765
6398  2766
6399  2767
6400  2768
6401  2769
6402  276A
6403  276B
6404  276C
6405  276D
6406  276E
6407  276F
6408  2770
6409  2771
6410  2772
6411  2773
6412  2774
6413  2775
6414  2776
6415  2777
6416  2778
6417  2779
6418  277A
6419  277B
6420  277C
6421  277D
6422  277E
6423  277F
6424  2780
6425  2781
6426  2782
6427  2783
6428  2784
6429  2785
6430  2786
6431  2787
6432  2788
6433  2789
6434  278A
6435  278B
6436  278C
6437  278D
6438  278E
6439  278F
6440  2790
6441  2791
6442  2792
6443  2793
6444  2794
6445  2795
6446  2796
6447  2797
6448  2798
6449  2799
6450  279A
6451  279B
6452  279C
6453  279D
6454  279E
6455  279F
6456  27A0
6457  27A1
6458  27A2
6459  27A3
6460  27A4
6461  27A5
6462  27A6
6463  27A7
6464  27A8
6465  27A9
6466  27AA
6467  27AB
6468  27AC
6469  27AD
6470  27AE
6471  27AF
6472  27B0
6473  27B1
6474  27B2
6475  27B3
6476  27B4
6477  27B5
6478  27B6
6479  27B7
6480  27B8
6481  27B9
6482  27BA
6483  27BB
6484  27BC
6485  27BD
6486  27BE
6487  27BF
6488  27C0
6489  27C1
6490  27C2
6491  27C3
6492  27C4
6493  27C5
6494  27C6
6495  27C7
6496  27C8
6497  27C9
6498  27CA
6499  27CB
6500  27CC
6501  27CD
6502  27CE
6503  27CF
6504  27D0
6505  27D1
6506  27D2
6507  27D3
6508  27D4
6509  27D5
6510  27D6
6511  27D7
6512  27D8
6513  27D9
6514  27DA
6515  27DB
6516  27DC
6517  27DD
6518  27DE
6519  27DF
6520  27E0
6521  27E1
6522  27E2
6523  27E3
6524  27E4
6525  27E5
6526  27E6
6527  27E7
6528  27E8
6529  27E9
6530  27EA
6531  27EB
6532  27EC
6533  27ED
6534  27EE
6535  27EF
6536  27F0
6537  27F1
6538  27F2
6539  27F3
6540  27F4
6541  27F5
6542  27F6
6543  27F7
6544  27F8
6545  27F9
6546  27FA
6547  27FB
6548  27FC
6549  27FD
6550  27FE
6551  27FF
6552  2800
6553  2801
6554  2802
6555  2803
6556  2804
6557  2805
6558  2806
6559  2807
6560  2808
6561  2809
6562  280A
6563  280B
6564  280C
6565  280D
6566  280E
6567  280F
6568  2810
6569  2811
6570  2812
6571  2813
6572  2814
6573  2815
6574  2816
6575  2817
6576  2818
6577  2819
6578  281A
6579  281B
6580  281C
6581  281D
6582  281E
6583  281F
6584  2820
6585  2821
6586  2822
6587  2823
6588  2824
6589  2825
6590  2826
6591  2827
6592  2828
6593  2829
6594  282A
6595  282B
6596  282C
6597  282D
6598  282E
6599  282F
6600  2830
6601  2831
6602  2832
6603  2833
6604  2834
6605  2835
6606  2836
6607  2837
6608  2838
6609  2839
6610  283A
6611  283B
6612  283C
6613  283D
6614  283E
6615  283F
6616  2840
6617  2841
6618  2842
6619  2843
6620  2844
6621  2845
6622  2846
6623  2847
6624  2848
6625  2849
6626  284A
6627  284B
6628  284C
6629  284D
6630  284E
6631  284F
6632  2850
6633  2851
6634  2852
6635  2853
6636  2854
6637  2855
6638  2856
6639  2857
6640  2858
6641  2859
6642  285A
6643  285B
6644  285C
6645  285D
6646  285E
6647  285F
6648  2860
6649  2861
6650  2862
6651  2863
6652  2864
6653  2865
6654  2866
6655  2867
6656  2868
6657  2869
6658  286A
6659  286B
6660  286C
6661  286D
6662  286E
6663  286F
6664  2870
6665  2871
6666  2872
6667  2873
6668  2874
6669  2875
6670  2876
6671  2877
6672  2878
6673  2879
6674  287A
6675  287B
6676  287C
6677  287D
6678  287E
6679  287F
6680  2880
6681  2881
6682  2882
6683  2883
6684  2884
6685  2885
6686  2886
6687  2887
6688  2888
6689  2889
6690  288A
6691  288B
6692  288C
6693  288D
6694  288E
6695  288F
6696  2890
6697  2891
6698  2892
6699  2893
6700  2894
6701  2895
6702  2896
6703  2897
6704  2898
6705  2899
6706  289A
6707  289B
6708  289C
6709  289D
6710  289E
6711  289F
6712  28A0
6713  28A1
6714  28A2
6715  28A3
6716  28A4
6717  28A5
6718  28A6
6719  28A7
6720  28A8
6721  28A9
6722  28AA
6723  28AB
6724  28AC
6725  28AD
6726  28AE
6727  28AF
6728  28B0
6729  28B1
6730  28B2
6731  28B3
6732  28B4
6733  28B5
6734  28B6
6735  28B7
6736  28B8
6737  28B9
6738  28BA
6739  28BB
6740  28BC
6741  28BD
6742  28BE
6743  28BF
6744  28C0
6745  28C1
6746  28C2
6747  28C3
6748  28C4
6749  28C5
6750  28C6
6751  28C7
6752  28C8
6753  28C9
6754  28CA
6755  28CB
6756  28CC
6757  28CD
6758  28CE
6759  28CF
6760  28D0
6761  28D1
6762  28D2
6763  28D3
6764  28D4
6765  28D5
6766  28D6
6767  28D7
6768  28D8
6769  28D9
6770  28DA
6771  28DB
6772  28DC
6773  28DD
6774  28DE
6775  28DF
6776  28E0
6777  28E1
6778  28E2
6779  28E3
6780  28E4
6781  28E5
6782  28E6
6783  28E7
6784  28E8
6785  28E9
6786  28EA
6787  28EB
6788  28EC
6789  28ED
6790  28EE
6791  28EF
6792  28F0
6793  28F1
6794  28F2
6795  28F3
6796  28F4
6797  28F5
6798  28F6
6799  28F7
6800  28F8
6801  28F9
6802  28FA
6803  28FB
6804  28FC
6805  28FD
6806  28FE
6807  28FF
6808  2900
6809  2901
6810  2902
6811  2903
6812  2904
6813  2905
6814  2906
6815  2907
6816  2908
6817  2909
6818  290A
6819  290B
6820  290C
6821  290D
6822  290E
6823  290F
6824  2910
6825  2911
6826  2912
6827  2913
6828  2914
6829  2915
6830  2916
6831  2917
6832  2918
6833  2919
6834  291A
6835  291B
6836  291C
6837  291D
6838  291E
6839  291F
6840  2920
6841  2921
6842  2922
6843  2923
6844  2924
6845  2925
6846  2926
6847  2927
6848  2928
6849  2929
6850  292A
6851  292B
6852  292C
6853  292D
6854  292E
6855  292F
6856  2930
6857  2931
6858  2932
6859  2933
6860  2934
6861  2935
6862  2936
6863  2937
6864  2938
6865  2939
6866  293A
6867  293B
6868  293C
6869  293D
6870  293E
6871  293F
6872  2940
6873  2941
6874  2942
6875  2943
6876  2944
6877  2945
6878  2946
6879  2947
6880  2948
6881  2949
6882  294A
6883  294B
6884  294C
6885  294D
6886  294E
6887  294F
6888  2950
6889  2951
6890  2952
6891  2953
6892  2954
6893  2955
6894  2956
6895  2957
6896  2958
6897  2959
6898  295A
6899  295B
6900  295C
6901  295D
6902  295E
6903  295F
6904  2960
6905  2961
6906  2962
6907  2963
6908  2964
6909  2965
6910  2966
6911  2967
6912  2968
6913  2969
6914  296A
6915  296B
6916  296C
6917  296D
6918  296E
6919  296F
6920  2970
6921  2971
6922  2972
6923  2973
6924  2974
6925  2975
6926  2976
6927  2977
6928  2978
6929  2979
6930  297A
6931  297B
6932  297C
6933  297D
6934  297E
6935  297F
6936  2980
6937  2981
6938  2982
6939  2983
6940  2984
6941  2985
6942  2986
6943  2987
6944  2988
6945  2989
6946  298A
6947  298B
6948  298C
6949  298D
6950  298E
6951  298F
6952  2990
6953  2991
6954  2992
6955  2993
6956  2994
6957  2995
6958  2996
6959  2997
6960  2998
6961  2999
6962  299A
6963  299B
6964  299C
6965  299D
6966  299E
6967  299F
6968  29A0
6969  29A1
6970  29A2
6971  29A3
6972  29A4
6973  29A5
6974  29A6
6975  29A7
6976  29A8
6977  29A9
6978  29AA
6979  29AB
6980  29AC
6981  29AD
6982  29AE
6983  29AF
6984  29B0
6985  29B1
6986  29B2
6987  29B3
6988  29B4
6989  29B5
6990  29B6
6991  29B7
6992  29B8
6993  29B9
6994  29BA
6995  29BB
6996  29BC
6997  29BD
6998  29BE
6999  29BF
7000  29C0
7001  29C1
7002  29C2
7003  29C3
7004  29C4
7005  29C5
7006  29C6
7007  29C7
7008  29C8
7009  29C9
7010  29CA
7011  29CB
7012  29CC
7013  29CD
7014  29CE
7015  29CF
7016  29D0
7017  29D1
7018  29D2
7019  29D3
7020  29D4
7021  29D5
7022  29D6
7023  29D7
7024  29D8
7025  29D9
7026  29DA
7027  29DB
7028  29DC
7029  29DD
7030  29DE
7031  29DF
7032  29E0
7033  29E1
7034  29E2
7035  29E3
7036  29E4
7037  29E5
7038  29E6
7039  29E7
7040  29E8
7041  29E9
7042  29EA
7043  29EB
7044  29EC
7045  29ED
7046  29EE
7047  29EF
7048  29F0
7049  29F1
7050  29F2
7051  29F3
7052  29F4
7053  29F5
7054  29F6
7055  29F7
7056  29F8
7057  29F9
7058  29FA
7059  29FB
7060  29FC
7061  29FD
7062  29FE
7063  29FF
7064  2A00
7065  2A01
7066  2A02
7067  2A03
7068  2A04
7069  2A05
7070  2A06
7071  2A07
7072  2A08
7073  2A09
7074  2A0A
7075  2A0B
7076  2A0C
7077  2A0D
7078  2A0E
7079  2A0F
7080  2A10
7081  2A11
7082  2A12
7083  2A13
7084  2A14
7085  2A15
7086  2A16
7087  2A17
7088  2A18
7089  2A19
7090  2A1A
7091  2A1B
7092  2A1C
7093  2A1D
7094  2A1E
7095  2A1F
7096  2A20
7097  2A21
7098  2A22
7099  2A23
7100  2A24
7101  2A25
7102  2A26
7103  2A27
7104  2A28
7105  2A29
7106  2A2A
7107  2A2B
7108  2A2C
7109  2A2D
7110  2A2E
7111  2A2F
7112  2A30
7113  2A31
7114  2A32
7115  2A33
7116  2A34
7117  2A35
7118  2A36
7119  2A37
7120  2A38
7121  2A39
7122  2A3A
7123  2A3B
7124  2A3C
7125  2A3D
7126  2A3E
7127  2A3F
7128  2A40
7129  2A41
7130  2A42
7131  2A43
7132  2A44
7133  2A45
7134  2A46
7135  2A47
7136  2A48
7137  2A49
7138  2A4A
7139  2A4B
7140  2A4C
7141  2A4D
7142  2A4E
7143  2A4F
7144  2A50
7145  2A51
7146  2A52
7147  2A53
7148  2A54
7149  2A55
7150  2A56
7151  2A57
7152  2A58
7153  2A59
7154  2A5A
7155  2A5B
7156  2A5C
7157  2A5D
7158  2A5E
7159  2A5F
7160  2A60
7161  2A61
7162  2A62
7163  2A63
7164  2A64
7165  2A65
7166  2A66
7167  2A67
7168  2A68
7169  2A69
7170  2A6A
7171  2A6B
7172  2A6C
7173  2A6D
7174  2A6E
7175  2A6F
7176  2A70
7177  2A71
7178  2A72
7179  2A73
7180  2A74
7181  2A75
7182  2A76
7183  2A77
7184  2A78
7185  2A79
7186  2A7A
7187  2A7B
7188  2A7C
7189  2A7D
7190  2A7E
7191  2A7F
7192  2A80
7193  2A81
7194  2A82
7195  2A83
7196  2A84
7197  2A85
7198  2A86
7199  2A87
7200  2A88
7201  2A89
7202  2A8A
7203  2A8B
7204  2A8C
7205  2A8D
7206  2A8E
7207  2A8F
7208  2A90
7209  2A91
7210  2A92
7211  2A93
7212  2A94
7213  2A95
7214  2A96
7215  2A97
7216  2A98
7217  2A99
7218  2A9A
7219  2A9B
7220  2A9C
7221  2A9D
7222  2A9E
7223  2A9F
7224  2AA0
7225  2AA1
7226  2AA2
7227  2AA3
7228  2AA4
7229  2AA5
7230  2AA6
7231  2AA7
7232  2AA8
7233  2AA9
7234  2AAA
7235  2AAB
7236  2AAC
7237  2AAD
7238  2AAE
7239  2AAF
7240  2AB0
7241  2AB1
7242  2AB2
7243  2AB3
7244  2AB4
7245  2AB5
7246  2AB6
7247  2AB7
7248  2AB8
7249  2AB9
7250  2ABA
7251  2ABB
7252  2ABC
7253  2ABD
7254  2ABE
7255  2ABF
7256  2AC0
7257  2AC1
7258  2AC2
7259  2AC3
7260  2AC4
7261  2AC5
7262  2AC6
7263  2AC7
7264  2AC8
7265  2AC9
7266  2ACA
7267  2ACB
7268  2ACC
7269  2ACD
7270  2ACE
7271  2ACF
7272  2AD0
7273  2AD1
7274  2AD2
7275  2AD3
7276  2AD4
7277  2AD5
7278  2AD6
7279  2AD7
7280  2AD8
7281  2AD9
7282  2ADA
7283  2ADB
7284  2ADC
7285  2ADD
7286  2ADE
7287  2ADF
7288  2AE0
7289  2AE1
7290  2AE2
7291  2AE3
7292  2AE4
7293  2AE5
7294  2AE6
7295  2AE7
7296  2AE8
7297  2AE9
7298  2AEA
7299  2AEB
7300  2AEC
7301  2AED
7302  2AEE
7303  2AEF
7304  2AF0
7305  2AF1
7306  2AF2
7307  2AF3
7308  2AF4
7309  2AF5
7310  2AF6
7311  2AF7
7312  2AF8
7313  2AF9
7314  2AFA
7315  2AFB
7316  2AFC
7317  2AFD
7318  2AFE
7319  2AFF
7320  2B00
7321  2B01
7322  2B02
7323  2B03
7324  2B04
7325  2B05
7326  2B06
7327  2B07
7328  2B08
7329  2B09
7330  2B0A
7331  2B0B
7332  2B0C
7333  2B0D
7334  2B0E
7335  2B0F
7336  2B10
7337  2B11
7338  2B12
7339  2B13
7340  2B14
7341  2B15
7342  2B16
7343  2B17
7344  2B18
7345  2B19
7346  2B1A
7347  2B1B
7348  2B1C
7349  2B1D
7350  2B1E
7351  2B1F
7352  2B20
7353  2B21
7354  2B22
7355  2B23
7356  2B24
7357  2B25
7358  2B26
7359  2B27
7360  2B28
7361  2B29
7362  2B2A
7363  2B2B
7364  2B2C
7365  2B2D
7366  2B2E
7367  2B2F
7368  2B30
7369  2B31
7370  2B32
7371  2B33
7372  2B34
7373  2B35
7374  2B36
7375  2B37
7376  2B38
7377  2B39
7378  2B3A
7379  2B3B
7380  2B3C
7381  2B3D
7382  2B3E
7383  2B3F
7384  2B40
7385  2B41
7386  2B42
7387  2B43
7388  2B44
7389  2B45
7390  2B46
7391  2B47
7392  2B48
7393  2B49
7394  2B4A
7395  2B4B
7396  2B4C
7397  2B4D
7398  2B4E
7399  2B4F
7400  2B50
7401  2B51
7402  2B52
7403  2B53
7404  2B54
7405  2B55
7406  2B56
7407  2B57
7408  2B58
7409  2B59
7410  2B5A
7411  2B5B
7412  2B5C
7413  2B5D
7414  2B5E
7415  2B5F
7416  2B60
7417  2B61
7418  2B62
7419  2B63
7420  2B64
7421  2B65
7422  2B66
7423  2B67
7424  2B68
7425  2B69
7426  2B6A
7427  2B6B
7428  2B6C
7429  2B6D
7430  2B6E
7431  2B6F
7432  2B70
7433  2B71
7434  2B72
7435  2B73
7436  2B74
7437  2B75
7438  2B76
7439  2B77
7440  2B78
7441  2B79
7442  2B7A
7443  2B7B
7444  2B7C
7445  2B7D
7446  2B7E
7447  2B7F
7448  2B80
7449  2B81
7450  2B82
7451  2B83
7452  2B84
7453  2B85
7454  2B86
7455  2B87
7456  2B88
7457  2B89
7458  2B8A
7459  2B8B
7460  2B8C
7461  2B8D
7462  2B8E
7463  2B8F
7464  2B90
7465  2B91
7466  2B92
7467  2B93
7468  2B94
7469  2B95
7470  2B96
7471  2B97
7472  2B98
7473  2B99
7474  2B9A
7475  2B9B
7476  2B9C
7477  2B9D
7478  2B9E
7479  2B9F
7480  2BA0
7481  2BA1
7482  2BA2
7483  2BA3
7484  2BA4
7485  2BA5
7486  2BA6
7487  2BA7
7488  2BA8
7489  2BA9
7490  2BAA
7491  2BAB
7492  2BAC
7493  2BAD
7494  2BAE
7495  2BAF
7496  2BB0
7497  2BB1
7498  2BB2
7499  2BB3
7500  2BB4
7501  2BB5
7502  2BB6
7503  2BB7
7504  2BB8
7505  2BB9
7506  2BBA
7507  2BBB
7508  2BBC
7509  2BBD
7510  2BBE
7511  2BBF
7512  2BC0
7513  2BC1
7514  2BC2
7515  2BC3
7516  2BC4
7517  2BC5
7518  2BC6
7519  2BC7
7520  2BC8
7521  2BC9
7522  2BCA
7523  2BCB
7524  2BCC
7525  2BCD
7526  2BCE
7527  2BCF
7528  2BD0
7529  2BD1
7530  2BD2
7531  2BD3
7532  2BD4
7533  2BD5
7534  2BD6
7535  2BD7
7536  2BD8
7537  2BD9
7538  2BDA
7539  2BDB
7540  2BDC
7541  2BDD
7542  2BDE
7543  2BDF
7544  2BE0
7545  2BE1
7546  2BE2
7547  2BE3
7548  2BE4
7549  2BE5
7550  2BE6
7551  2BE7
7552  2BE8
7553  2BE9
7554  2BEA
7555  2BEB
7556  2BEC
7557  2BED
7558  2BEE
7559  2BEF
7560  2BF0
7561  2BF1
7562  2BF2
7563  2BF3
7564  2BF4
7565  2BF5
7566  2BF6
7567  2BF7
7568  2BF8
7569  2BF9
7570  2BFA
7571  2BFB
7572  2BFC
7573  2BFD
7574  2BFE
7575  2BFF
7576  2C00
7577  2C01
7578  2C02
7579  2C03
7580  2C04
7581  2C05
7582  2C06
7583  2C07
7584  2C08
7585  2C09
7586  2C0A
7587  2C0B
7588  2C0C
7589  2C0D
7590  2C0E
7591  2C0F
7592  2C10
7593  2C11
7594  2C12
7595  2C13
7596  2C14
7597  2C15
7598  2C16
7599  2C17
7600  2C18
7601  2C19
7602  2C1A
7603  2C1B
7604  2C1C
7605  2C1D
7606  2C1E
7607  2C1F
7608  2C20
7609  2C21
7610  2C22
7611  2C23
7612  2C24
7613  2C25
7614  2C26
7615  2C27
7616  2C28
7617  2C29
7618  2C2A
7619  2C2B
7620  2C2C
7621  2C2D
7622  2C2E
7623  2C2F
7624  2C30
7625  2C31
7626  2C32
7627  2C33
7628  2C34
7629  2C35
7630  2C36
7631  2C37
7632  2C38
7633  2C39
7634  2C3A
7635  2C3B
7636  2C3C
7637  2C3D
7638  2C3E
7639  2C3F
7640  2C40
7641  2C41
7642  2C42
7643  2C43
7644  2C44
7645  2C45
7646  2C46
7647  2C47
7648  2C48
7649  2C49
7650  2C4A
7651  2C4B
7652  2C4C
7653  2C4D
7654  2C4E
7655  2C4F
7656  2C50
7657  2C51
7658  2C52
7659  2C53
7660  2C54
7661  2C55
7662  2C56
7663  2C57
7664  2C58
7665  2C59
7666  2C5A
7667  2C5B
7668  2C5C
7669  2C5D
7670  2C5E
7671  2C5F
7672  2C60
7673  2C61
7674  2C62
7675  2C63
7676  2C64
7677  2C65
7678  2C66
7679  2C67
7680  2C68
7681  2C69
7682  2C6A
7683  2C6B
7684  2C6C
7685  2C6D
7686  2C6E
7687  2C6F
7688  2C70
7689  2C71
7690  2C72
7691  2C73
7692  2C74
7693  2C75
7694  2C76
7695  2C77
7696  2C78
7697  2C79
7698  2C7A
7699  2C7B
7700  2C7C
7701  2C7D
7702  2C7E
7703  2C7F
7704  2C80
7705  2C81
7706  2C82
7707  2C83
7708  2C84
7709  2C85
7710  2C86
7711  2C87
7712  2C88
7713  2C89
7714  2C8A
7715  2C8B
7716  2C8C
7717  2C8D
7718  2C8E
7719  2C8F
7720  2C90
7721  2C91
7722  2C92
7723  2C93
7724  2C94
7725  2C95
7726  2C96
7727  2C97
7728  2C98
7729  2C99
7730  2C9A
7731  2C9B
7732  2C9C
7733  2C9D
7734  2C9E
7735  2C9F
7736  2CA0
7737  2CA1
7738  2CA2
7739  2CA3
7740  2CA4
7741  2CA5
7742  2CA6
7743  2CA7
7744  2CA8
7745  2CA9
7746  2CAA
7747  2CAB
7748  2CAC
7749  2CAD
7750  2CAE
7751  2CAF
7752  2CB0
7753  2CB1
7754  2CB2
7755  2CB3
7756  2CB4
7757  2CB5
7758  2CB6
7759  2CB7
7760  2CB8
7761  2CB9
7762  2CBA
7763  2CBB
7764  2CBC
7765  2CBD
7766  2CBE
7767  2CBF
7768  2CC0
7769  2CC1
7770  2CC2
7771  2CC3
7772  2CC4
7773  2CC5
7774  2CC6
7775  2CC7
7776  2CC8
7777  2CC9
7778  2CCA
7779  2CCB
7780  2CCC
7781  2CCD
7782  2CCE
7783  2CCF
7784  2CD0
7785  2CD1
7786  2CD2
7787  2CD3
7788  2CD4
7789  2CD5
7790  2CD6
7791  2CD7
7792  2CD8
7793  2CD9
7794  2CDA
7795  2CDB
7796  2CDC
7797  2CDD
7798  2CDE
7799  2CDF
7800  2CE0
7801  2CE1
7802  2CE2
7803  2CE3
7804  2CE4
7805  2CE5
7806  2CE6
7807  2CE7
7808  2CE8
7809  2CE9
7810  2CEA
7811  2CEB
7812  2CEC
7813  2CED
7814  2CEE
7815  2CEF
7816  2CF0
7817  2CF1
7818  2CF2
7819  2CF3
7820  2CF4
7821  2CF5
7822  2CF6
7823  2CF7
7824  2CF8
7825  2CF9
7826  2CFA
7827  2CFB
7828  2CFC
7829  2CFD
7830  2CFE
7831  2CFF
7832  2D00
7833  2D01
7834  2D02
7835  2D03
7836  2D04
7837  2D05
7838  2D06
7839  2D07
7840  2D08
7841  2D09
7842  2D0A
7843  2D0B
7844  2D0C
7845  2D0D
7846  2D0E
7847  2D0F
7848  2D10
7849  2D11
7850  2D12
7851  2D13
7852  2D14
7853  2D15
7854  2D16
7855  2D17
7856  2D18
7857  2D19
7858  2D1A
7859  2D1B
7860  2D1C
7861  2D1D
7862  2D1E
7863  2D1F
7864  2D20
7865  2D21
7866  2D22
7867  2D23
7868  2D24
7869  2D25
7870  2D26
7871  2D27
7872  2D28
7873  2D29
7874  2D2A
7875  2D2B
7876  2D2C
7877  2D2D
7878  2D2E
7879  2D2F
7880  2D30
7881  2D31
7882  2D32
7883  2D33
7884  2D34
7885  2D35
7886  2D36
7887  2D37
7888  2D38
7889  2D39
7890  2D3A
7891  2D3B
7892  2D3C
7893  2D3D
7894  2D3E
7895  2D3F
7896  2D40
7897  2D41
7898  2D42
7899  2D43
7900  2D44
7901  2D45
7902  2D46
7903  2D47
7904  2D48
7905  2D49
7906  2D4A
7907  2D4B
7908  2D4C
7909  2D4D
7910  2D4E
7911  2D4F
7912  2D50
7913  2D51
7914  2D52
7915  2D53
7916  2D54
7917  2D55
7918  2D56
7919  2D57
7920  2D58
7921  2D59
7922  2D5A
7923  2D5B
7924  2D5C
7925  2D5D
7926  2D5E
7927  2D5F
7928  2D60
7929  2D61
7930  2D62
7931  2D63
7932  2D64
7933  2D65
7934  2D66
7935  2D67
7936  2D68
7937  2D69
7938  2D6A
7939  2D6B
7940  2D6C
7941  2D6D
7942  2D6E
7943  2D6F
7944  2D70
7945  2D71
7946  2D72
7947  2D73
7948  2D74
7949  2D75
7950  2D76
7951  2D77
7952  2D78
7953  2D79
7954  2D7A
7955  2D7B
7956  2D7C
7957  2D7D
7958  2D7E
7959  2D7F
7960  2D80
7961  2D81
7962  2D82
7963  2D83
7964  2D84
7965  2D85
7966  2D86
7967  2D87
7968  2D88
7969  2D89
7970  2D8A
7971  2D8B
7972  2D8C
7973  2D8D
7974  2D8E
7975  2D8F
7976  2D90
7977  2D91
7978  2D92
7979  2D93
7980  2D94
7981  2D95
7982  2D96
7983  2D97
7984  2D98
7985  2D99
7986  2D9A
7987  2D9B
7988  2D9C
7989  2D9D
7990  2D9E
7991  2D9F
7992  2DA0
7993  2DA1
7994  2DA2
7995  2DA3
7996  2DA4
7997  2DA5
7998  2DA6
7999  2DA7
8000  2DA8
8001  2DA9
8002  2DAA
8003  2DAB
8004  2DAC
8005  2DAD
8006  2DAE
8007  2DAF
8008  2DB0
8009  2DB1
8010  2DB2
8011  2DB3
8012  2DB4
8013  2DB5
8014  2DB6
8015  2DB7
8016  2DB8
8017  2DB9
8018  2DBA
8019  2DBB
8020  2DBC
8021  2DBD
8022  2DBE
8023  2DBF
8024  2DC0
8025  2DC1
8026  2DC2
8027  2DC3
8028  2DC4
8029  2DC5
8030  2DC6
8031  2DC7
8032  2DC8
8033  2DC9
8034  2DCA
8035  2DCB
8036  2DCC
8037  2DCD
8038  2DCE
8039  2DCF
8040  2DD0
8041  2DD1
8042  2DD2
8043  2DD3
8044  2DD4
8045  2DD5
8046  2DD6
8047  2DD7
8048  2DD8
8049  2DD9
8050  2DDA
8051  2DDB
8052  2DDC
8053  2DDD
8054  2DDE
8055  2DDF
8056  2DE0
8057  2DE1
8058  2DE2
8059  2DE3
8060  2DE4
8061  2DE5
8062  2DE6
8063  2DE7
8064  2DE8
8065  2DE9
8066  2DEA
8067  2DEB
8068  2DEC
8069  2DED
8070  2DEE
8071  2DEF
8072  2DF0
8073  2DF1
8074  2DF2
8075  2DF3
8076  2DF4
8077  2DF5
8078  2DF6
8079  2DF7
8080  2DF8
8081  2DF9
8082  2DFA
8083  2DFB
8084  2DFC
8085  2DFD
8086  2DFE
8087  2DFF
8088  2E00
8089  2E01
8090  2E02
8091  2E03
8092  2E04
8093  2E05
8094  2E06
8095  2E07
8096  2E08
8097  2E09
8098  2E0A
8099  2E0B
8100  2E0C
8101  2E0D
8102  2E0E
8103  2E0F
8104  2E10
8105  2E11
8106  2E12
8107  2E13
8108  2E14
8109  2E15
8110  2E16
8111  2E17
8112  2E18
8113  2E19
8114  2E1A
8115  2E1B
8116  2E1C
8117  2E1D
8118  2E1E
8119  2E1F
8120  2E20
8121  2E21
8122  2E22
8123  2E23
8124  2E24
8125  2E25
8126  2E26
8127  2E27
8128  2E28
8129  2E29
8130  2E2A
8131  2E2B
8132  2E2C
8133  2E2D
8134  2E2E
8135  2E2F
8136  2E30
8137  2E31
8138  2E32
8139  2E33
8140  2E34
8141  2E35
8142  2E36
8143  2E37
8144  2E38
8145  2E39
8146  2E3A
8147  2E3B
8148  2E3C
8149  2E3D
8150  2E3E
8151  2E3F
8152  2E40
8153  2E41
8154  2E42
8155  2E43
8156  2E44
8157  2E45
8158  2E46
8159  2E47
8160  2E48
8161  2E49
8162  2E4A
8163  2E4B
8164  2E4C
8165  2E4D
8166  2E4E
8167  2E4F
8168  2E50
8169  2E51
8170  2E52
8171  2E53
8172  2E54
8173  2E55
8174  2E56
8175  2E57
8176  2E58
8177  2E59
8178  2E5A
8179  2E5B
8180  2E5C
8181  2E5D
8182  2E5E
8183  2E5F
8184  2E60
8185  2E61
8186  2E62
8187  2E63
8188  2E64
8189  2E65
8190  2E66
8191  2E67
8192  2E68
8193  2E69
8194  2E6A
8195  2E6B
8196  2E6C
8197  2E6D
8198  2E6E
8199  2E6F
8200  2E70
8201  2E71
8202  2E72
8203  2E73
8204  2E74
8205  2E75
8206  2E76
8207  2E77
8208  2E78
8209  2E79
8210  2E7A
8211  2E7B
8212  2E7C
8213  2E7D
8214  2E7E
8215  2E7F
8216  2E80
8217  2E81
8218  2E82
8219  2E83
8220  2E84
8221  2E85
8222  2E86
8223  2E87
8224  2E88
8225  2E89
8226  2E8A
8227  2E8B
8228  2E8C
8229  2E8D
8230  2E8E
8231  2E8F
8232  2E90
8233  2E91
8234  2E92
8235  2E93
8236  2E94
8237  2E95
8238  2E96
8239  2E97
8240  2E98
8241  2E99
8242  2E9A
8243  2E9B
8244  2E9C
8245  2E9D
8246  2E9E
8247  2E9F
8248  2EA0
8249  2EA1
8250  2EA2
8251  2EA3
8252  2EA4
8253  2EA5
8254  2EA6
8255  2EA7
8256  2EA8
8257  2EA9
8258  2EAA
8259  2EAB
8260  2EAC
8261  2EAD
8262  2EAE
8263  2EAF
8264  2EB0
8265  2EB1
8266  2EB2
8267  2EB3
8268  2EB4
8269  2EB5
8270  2EB6
8271  2EB7
8272  2EB8
8273  2EB9
8274  2EBA
8275  2EBB
8276  2EBC
8277  2EBD
8278  2EBE
8279  2EBF
8280  2EC0
8281  2EC1
8282  2EC2
8283  2EC3
8284  2EC4
8285  2EC5
8286  2EC6
8287  2EC7
8288  2EC8
8289  2EC9
8290  2ECA
8291  2ECB
8292  2ECC
8293  2ECD
8294  2ECE
8295  2ECF
8296  2ED0
8297  2ED1
8298  2ED2
8299  2ED3
8300  2ED4
8301  2ED5
8302  2ED6
8303  2ED7
8304  2ED8
8305  2ED9
8306  2EDA
8307  2EDB
8308  2EDC
8309  2EDD
8310  2EDE
8311  2EDF
8312  2EE0
8313  2EE1
8314  2EE2
8315  2EE3
8316  2EE4
8317  2EE5
8318  2EE6
8319  2EE7
8320  2EE8
8321  2EE9
8322  2EEA
8323  2EEB
8324  2EEC
8325  2EED
8326  2EEE
8327  2EEF
8328  2EF0
8329  2EF1
8330  2EF2
8331  2EF3
8332  2EF4
8333  2EF5
8334  2EF6
8335  2EF7
8336  2EF8
8337  2EF9
8338  2EFA
8339  2EFB
8340  2EFC
8341  2EFD
8342  2EFE
8343  2EFF
8344  2F00
8345  2F01
8346  2F02
8347  2F03
8348  2F04
8349  2F05
8350  2F06
8351  2F07
8352  2F08
8353  2F09
8354  2F0A
8355  2F0B
8356  2F0C
8357  2F0D
8358  2F0E
8359  2F0F
8360  2F10
8361  2F11
8362  2F12
8363  2F13
8364  2F14
8365  2F15
8366  2F16
8367  2F17
8368  2F18
8369  2F19
8370  2F1A
8371  2F1B
8372  2F1C
8373  2F1D
8374  2F1E
8375  2F1F
8376  2F20
8377  2F21
8378  2F22
8379  2F23
8380  2F24
8381  2F25
8382  2F26
8383  2F27
8384  2F28
8385  2F29
8386  2F2A
8387  2F2B
8388  2F2C
8389  2F2D
8390  2F2E
8391  2F2F
8392  2F30
8393  2F31
8394  2F32
8395  2F33
8396  2F34
8397  2F35
8398  2F36
8399  2F37
8400  2F38
8401  2F39
8402  2F3A
8403  2F3B
8404  2F3C
8405  2F3D
8406  2F3E
8407  2F3F
8408  2F40
8409  2F41
8410  2F42
8411  2F43
8412  2F44
8413  2F45
8414  2F46
8415  2F47
8416  2F48
8417  2F49
8418  2F4A
8419  2F4B
8420  2F4C
8421  2F4D
8422  2F4E
8423  2F4F
8424  2F50
8425  2F51
8426  2F52
8427  2F53
8428  2F54
8429  2F55
8430  2F56
8431  2F57
8432  2F58
8433  2F59
8434  2F5A
8435  2F5B
8436  2F5C
8437  2F5D
8438  2F5E
8439  2F5F
8440  2F60
8441  2F61
8442  2F62
8443  2F63
8444  2F64
8445  2F65
8446  2F66
8447  2F67
8448  2F68
8449  2F69
8450  2F6A
8451  2F6B
8452  2F6C
8453  2F6D
8454  2F6E
8455  2F6F
8456  2F70
8457  2F71
8458  2F72
8459  2F73
8460  2F74
8461  2F75
8462  2F76
8463  2F77
8464  2F78
8465  2F79
8466  2F7A
8467  2F7B
8468  2F7C
8469  2F7D
8470  2F7E
8471  2F7F
8472  2F80
8473  2F81
8474  2F82
8475  2F83
8476  2F84
8477  2F85
8478  2F86
8479  2F87
8480  2F88
8481  2F89
8482  2F8A
8483  2F8B
8484  2F8C
8485  2F8D
8486  2F8E
8487  2F8F
8488  2F90
8489  2F91
8490  2F92
8491  2F93
8492  2F94
8493  2F95
8494  2F96
8495  2F97
8496  2F98
8497  2F99
8498  2F9A
8499  2F9B
8500  2F9C
8501  2F9D
8502  2F9E
8503  2F9F
8504  2FA0
8505  2FA1
8506  2FA2
8507  2FA3
8508  2FA4
8509  2FA5
8510  2FA6
8511  2FA7
8512  2FA8
8513  2FA9
8514  2FAA
8515  2FAB
8516  2FAC
8517  2FAD
8518  2FAE
8519  2FAF
8520  2FB0
8521  2FB1
8522  2FB2
8523  2FB3
8524  2FB4
8525  2FB5
8526  2FB6
8527  2FB7
8528  2FB8
8529  2FB9
8530  2FBA
8531  2FBB
8532  2FBC
8533  2FBD
8534  2FBE
8535  2FBF
8536  2FC0
8537  2FC1
8538  2FC2
8539  2FC3
8540  2FC4
8541  2FC5
8542  2FC6
8543  2FC7
8544  2FC8
8545  2FC9
8546  2FCA
8547  2FCB
8548  2FCC
8549  2FCD
8550  2FCE
8551  2FCF
8552  2FD0
8553  2FD1
8554  2FD2
8555  2FD3
8556  2FD4
8557  2FD5
8558  2FD6
8559  2FD7
8560  2FD8
8561  2FD9
8562  2FDA
8563  2FDB
8564  2FDC
8565  2FDD
8566  2FDE
8567  2FDF
8568  2FE0
8569  2FE1
8570  2FE2
8571  2FE3
8572  2FE4
8573  2FE5
8574  2FE6
8575  2FE7
8576  2FE8
8577  2FE9
8578  2FEA
8579  2FEB
8580  2FEC
8581  2FED
8582  2FEE
8583  2FEF
8584  2FF0
8585  2FF1
8586  2FF2
8587  2FF3
8588  2FF4
8589  2FF5
8590  2FF6
8591  2FF7
8592  2FF8
8593  2FF9
8594  2FFA
8595  2FFB
8596  2FFC
8597  2FFD
8598  2FFE
8599  2FFF
8600  3000
8601  3001
8602  3002
8603  3003
8604  3004
8605  3005
8606  3006
8607  3007
8608  3008
8609  3009
8610  300A
8611  300B
8612  300C
8613  300D
8614  300E
8615  300F
8616  3010
8617  3011
8618  3012
8619  3013
8620  3014
8621  3015
8622  3016
8623  3017
8624  3018
8625  3019
8626  301A
8627  301B
8628  301C
8629  301D
8630  301E
8631  301F
8632  3020
8633  3021
8634  3022
8635  3023
8636  3024
8637  3025
8638  3026
8639  3027
8640  3028
8641  3029
8642  302A
8643  302B
8644  302C
8645  302D
8646  302E
8647  302F
8648  3030
8649  3031
8650  3032
8651  3033
8652  3034
8653  3035
8654  3036
8655  3037
8656  3038
8657  3039
8658  303A
8659  303B
8660  303C
8661  303D
8662  303E
8663  303F
8664  3040
8665  3041
8666  3042
8667  3043
8668  3044
8669  3045
8670  3046
8671  3047
8672  3048
8673  3049
8674  304A
8675  304B
8676  304C
8677  304D
8678  304E
8679  304F
8680  3050
8681  3051
8682  3052
8683  3053
8684  3054
8685  3055
8686  3056
8687  3057
8688  3058
8689  3059
8690  305A
8691  305B
8692  305C
8693  305D
8694  305E
8695  305F
8696  3060
8697  3061
8698  3062
8699  3063
8700  3064
8701  3065
8702  3066
8703  3067
8704  3068
8705  3069
8706  306A
8707  306B
8708  306C
8709  306D
8710  306E
8711  306F
8712  3070
8713  3071
8714  3072
8715  3073
8716  3074
8717  3075
8718  3076
8719  3077
8720  3078
8721  3079
8722  307A
8723  307B
8724  307C
8725  307D
8726  307E
8727  307F
8728  3080
8729  3081
8730  3082
8731  3083
8732  3084
8733  3085
8734  3086
8735  3087
8736  3088
8737  3089
8738  308A
8739  308B
8740  308C
8741  308D
8742  308E
8743  308F
8744  3090
8745  3091
8746  3092
8747  3093
8748  3094
8749  3095
8750  3096
8751  3097
8752  3098
8753  3099
8754  309A
8755  309B
8756  309C
8757  309D
8758  309E
8759  309F
8760  30A0
8761  30A1
8762  30A2
8763  30A3
8764  30A4
8765  30A5
8766  30A6
8767  30A7
8768  30A8
8769  30A9
8770  30AA
8771  30AB
8772  30AC
8773  30AD
8774  30AE
8775  30AF
8776  30B0
8777  30B1
8778  30B2
8779  30B3
8780  30B4
8781  30B5
8782  30B6
8783  30B7
8784  30B8
8785  30B9
8786  30BA
8787  30BB
8788  30BC
8789  30BD
8790  30BE
8791  30BF
8792  30C0
8793  30C1
8794  30C2
8795  30C3
8796  30C4
8797  30C5
8798  30C6
8799  30C7
8800  30C8
8801  30C9
8802  30CA
8803  30CB
8804  30CC
8805  30CD
8806  30CE
8807  30CF
8808  30D0
8809  30D1
8810  30D2
8811  30D3
8812  30D4
8813  30D5
8814  30D6
8815  30D7
8816  30D8
8817  30D9
8818  30DA
8819  30DB
8820  30DC
8821  30DD
8822  30DE
8823  30DF
8824  30E0
8825  30E1
8826  30E2
8827  30E3
8828  30E4
8829  30E5
8830  30E6
8831  30E7
8832  30E8
8833  30E9
8834  30EA
8835  30EB
8836  30EC
8837  30ED
8838  30EE
8839  30EF
8840  30F0
8841  30F1
8842  30F2
8843  30F3
8844  30F4
8845  30F5
8846  30F6
8847  30F7
8848  30F8
8849  30F9
8850  30FA
8851  30FB
8852  30FC
8853  30FD
8854  30FE
8855  30FF
8856  3100
8857  3101
8858  3102
8859  3103
8860  3104
8861  3105
8862  3106
8863  3107
8864  3108
8865  3109
8866  310A
8867  310B
8868  310C
8869  310D
8870  310E
8871  310F
8872  3110
8873  3111
8874  3112
8875  3113
8876  3114
8877  3115
8878  3116
8879  3117
8880  3118
8881  3119
8882  311A
8883  311B
8884  311C
8885  311D
8886  311E
8887  311F
8888  3120
8889  3121
8890  3122
8891  3123
8892  3124
8893  3125
8894  3126
8895  3127
8896  3128
8897  3129
8898  312A
8899  312B
8900  312C
8901  312D
8902  312E
8903  312F
8904  3130
8905  3131
8906  3132
8907  3133
8908  3134
8909  3135
8910  3136
8911  3137
8912  3138
8913  3139
8914  313A
8915  313B
8916  313C
8917  313D
8918  313E
8919  313F
8920  3140
8921  3141
8922  3142
8923  3143
8924  3144
8925  3145
8926  3146
8927  3147
8928  3148
8929  3149
8930  314A
8931  314B
8932  314C
8933  314D
8934  314E
8935  314F
8936  3150
8937  3151
8938  3152
8939  3153
8940  3154
8941  3155
8942  3156
8943  3157
8944  3158
8945  3159
8946  315A
8947  315B
8948  315C
8949  315D
8950  315E
8951  315F
8952  3160
8953  3161
8954  3162
8955  3163
8956  3164
8957  3165
8958  3166
8959  3167
8960  3168
8961  3169
8962  316A
8963  316B
8964  316C
8965  316D
8966  316E
8967  316F
8968  3170
8969  3171
8970  3172
8971  3173
8972  3174
8973  3175
8974  3176
8975  3177
8976  3178
8977  3179
8978  317A
8979  317B
8980  317C
8981  317D
8982  317E
8983  317F
8984  3180
8985  3181
8986  3182
8987  3183
8988  3184
8989  3185
8990  3186
8991  3187
8992  3188
8993  3189
8994  318A
8995  318B
8996  318C
8997  318D
8998  318E
8999  318F
9000  3190
9001  3191
9002  3192
9003  3193
9004  3194
9005  3195
9006  3196
9007  3197
9008  3198
9009  3199
9010  319A
9011  319B
9012  319C
9013  319D
9014  319E
9015  319F
9016  31A0
9017  31A1
9018  31A2
9019  31A3
9020  31A4
9021  31A5
9022  31A6
9023  31A7
9024  31A8
9025  31A9
9026  31AA
9027  31AB
9028  31AC
9029  31AD
9030  31AE
9031  31AF
9032  31B0
9033  31B1
9034  31B2
9035  31B3
9036  31B4
9037  31B5
9038  31B6
9039  31B7
9040  31B8
9041  31B9
9042  31BA
9043  31BB
9044  31BC
9045  31BD
9046  31BE
9047  31BF
9048  31C0
9049  31C1
9050  31C2
9051  31C3
9052  31C4
9053  31C5
9054  31C6
9055  31C7
9056  31C8
9057  31C9
9058  31CA
9059  31CB
9060  31CC
9061  31CD
9062  31CE
9063  31CF
9064  31D0
9065  31D1
9066  31D2
9067  31D3
9068  31D4
9069  31D5
9070  31D6
9071  31D7
9072  31D8
9073  31D9
9074  31DA
9075  31DB
9076  31DC
9077  31DD
9078  31DE
9079  31DF
9080  31E0
9081  31E1
9082  31E2
9083  31E3
9084  31E4
9085  31E5
9086  31E6
9087  31E7
9088  31E8
9089  31E9
9090  31EA
9091  31EB
9092  31EC
9093  31ED
9094  31EE
9095  31EF
9096  31F0
9097  31F1
9098  31F2
9099  31F3
9100  31F4
9101  31F5
9102  31F6
9103  31F7
9104  31F8
9105  31F9
9106  31FA
9107  31FB
9108  31FC
9109  31FD
9110  31FE
9111  31FF
9112  3200
9113  3201
9114  3202
9115  3203
9116  3204
9117  3205
9118  3206
9119  3207
9120  3208
9121  3209
9122  320A
9123  320B
9124  320C
9125  320D
9126  320E
9127  320F
9128  3210
9129  3211
9130  3212
9131  3213
9132  3214
9133  3215
9134  3216
9135  3217
9136  3218
9137  3219
9138  321A
9139  321B
9140  321C
9141  321D
9142  321E
9143  321F
9144  3220
9145  3221
9146  3222
9147  3223
9148  3224
9149  3225
9150  3226
9151  3227
9152  3228
9153  3229
9154  322A
9155  322B
9156  322C
9157  322D
9158  322E
9159  322F
9160  3230
9161  3231
9162  3232
9163  3233
9164  3234
9165  3235
9166  3236
9167  3237
9168  3238
9169  3239
9170  323A
9171  323B
9172  323C
9173  323D
9174  323E
9175  323F
9176  3240
9177  3241
9178  3242
9179  3243
9180  3244
9181  3245
9182  3246
9183  3247
9184  3248
9185  3249
9186  324A
9187  324B
9188  324C
9189  324D
9190  324E
9191  324F
9192  3250
9193  3251
9194  3252
9195  3253
9196  3254
9197  3255
9198  3256
9199  3257
9200  3258
9201  3259
9202  325A
9203  325B
9204  325C
9205  325D
9206  325E
9207  325F
9208  3260
9209  3261
9210  3262
9211  3263
9212  3264
9213  3265
9214  3266
9215  3267
9216  3268
9217  3269
9218  326A
9219  326B
9220  326C
9221  326D
9222  326E
9223  326F
9224  3270
9225  3271
9226  3272
9227  3273
9228  3274
9229  3275
9230  3276
9231  3277
9232  3278
9233  3279
9234  327A
9235  327B
9236  327C
9237  327D
9238  327E
9239  327F
9240  3280
9241  3281
9242  3282
9243  3283
9244  3284
9245  3285
9246  3286
9247  3287
9248  3288
9249  3289
9250  328A
9251  328B
9252  328C
9253  328D
9254  328E
9255  328F
9256  3290
9257  3291
9258  3292
9259  3293
9260  3294
9261  3295
9262  3296
9263  3297
9264  3298
9265  3299
9266  329A
9267  329B
9268  329C
9269  329D
9270  329E
9271  329F
9272  32A0
9273  32A1
9274  32A2
9275  32A3
9276  32A4
9277  32A5
9278  32A6
9279  32A7
9280  32A8
9281  32A9
9282  32AA
9283  32AB
9284  32AC
9285  32AD
9286  32AE
9287  32AF
9288  32B0
9289  32B1
9290  32B2
9291  32B3
9292  32B4
9293  32B5
9294  32B6
9295  32B7
9296  32B8
9297  32B9
9298  32BA
9299  32BB
9300  32BC
9301  32BD
9302  32BE
9303  32BF
9304  32C0
9305  32C1
9306  32C2
9307  32C3
9308  32C4
9309  32C5
9310  32C6
9311  32C7
9312  32C8
9313  32C9
9314  32CA
9315  32CB
9316  32CC
9317  32CD
9318  32CE
9319  32CF
9320  32D0
9321  32D1
9322  32D2
9323  32D3
9324  32D4
9325  32D5
9326  32D6
9327  32D7
9328  32D8
9329  32D9
9330  32DA
9331  32DB
9332  32DC
9333  32DD
9334  32DE
9335  32DF
9336  32E0
9337  32E1
9338  32E2
9339  32E3
9340  32E4
9341  32E5
9342  32E6
9343  32E7
9344  32E8
9345  32E9
9346  32EA
9347  32EB
9348  32EC
9349  32ED
9350  32EE
9351  32EF
9352  32F0
9353  32F1
9354  32F2
9355  32F3
9356  32F4
9357  32F5
9358  32F6
9359  32F7
9360  32F8
9361  32F9
9362  32FA
9363  32FB
9364  32FC
9365  32FD
9366  32FE
9367  32FF
9368  3300
9369  3301
9370  3302
9371  3303
9372  3304
9373  3305
9374  3306
9375  3307
9376  3308
9377  3309
9378  330A
9379  330B
9380  330C
9381  330D
9382  330E
9383  330F
9384  3310
9385  3311
9386  3312
9387  3313
9388  3314
9389  3315
9390  3316
9391  3317
9392  3318
9393  3319
9394  331A
9395  331B
9396  331C
9397  331D
9398  331E
9399  331F
9400  3320
9401  3321
9402  3322
9403  3323
9404  3324
9405  3325
9406  3326
9407  3327
9408  3328
9409  3329
9410  332A
9411  332B
9412  332C
9413  332D
9414  332E
9415  332F
9416  3330
9417  3331
9418  3332
9419  3333
9420  3334
9421  3335
9422  3336
9423  3337
9424  3338
9425  3339
9426  333A
9427  333B
9428  333C
9429  333D
9430  333E
9431  333F
9432  3340
9433  3341
9434  3342
9435  3343
9436  3344
9437  3345
9438  3346
9439  3347
9440  3348
9441  3349
9442  334A
9443  334B
9444  334C
9445  334D
9446  334E
9447  334F
9448  3350
9449  3351
9450  3352
9451  3353
9452  3354
9453  3355
9454  3356
9455  3357
9456  3358
9457  3359
9458  335A
9459  335B
9460  335C
9461  335D
9462  335E
9463  335F
9464  3360
9465  3361
9466  3362
9467  3363
9468  3364
9469  3365
9470  3366
9471  3367
9472  3368
9473  3369
9474  336A
9475  336B
9476  336C
9477  336D
9478  336E
9479  336F
9480  3370
9481  3371
9482  3372
9483  3373
9484  3374
9485  3375
9486  3376
9487  3377
9488  3378
9489  3379
9490  337A
9491  337B
9492  337C
9493  337D
9494  337E
9495  337F
9496  3380
9497  3381
9498  3382
9499  3383
9500  3384
9501  3385
9502  3386
9503  3387
9504  3388
9505  3389
9506  338A
9507  338B
9508  338C
9509  338D
9510  338E
9511  338F
9512  3390
9513  3391
9514  3392
9515  3393
9516  3394
9517  3395
9518  3396
9519  3397
9520  3398
9521  3399
9522  339A
9523  339B
9524  339C
9525  339D
9526  339E
9527  339F
9528  33A0
9529  33A1
9530  33A2
9531  33A3
9532  33A4
9533  33A5
9534  33A6
9535  33A7
9536  33A8
9537  33A9
9538  33AA
9539  33AB
9540  33AC
9541  33AD
9542  33AE
9543  33AF
9544  33B0
9545  33B1
9546  33B2
9547  33B3
9548  33B4
9549  33B5
9550  33B6
9551  33B7
9552  33B8
9553  33B9
9554  33BA
9555  33BB
9556  33BC
9557  33BD
9558  33BE
9559  33BF
9560  33C0
9561  33C1
9562  33C2
9563  33C3
9564  33C4
9565  33C5
9566  33C6
9567  33C7
9568  33C8
9569  33C9
9570  33CA
9571  33CB
9572  33CC
9573  33CD
9574  33CE
9575  33CF
9576  33D0
9577  33D1
9578  33D2
9579  33D3
9580  33D4
9581  33D5
9582  33D6
9583  33D7
9584  33D8
9585  33D9
9586  33DA
9587  33DB
9588  33DC
9589  33DD
9590  33DE
9591  33DF
9592  33E0
9593  33E1
9594  33E2
9595  33E3
9596  33E4
9597  33E5
9598  33E6
9599  33E7
9600  33E8
9601  33E9
9602  33EA
9603  33EB
9604  33EC
9605  33ED
9606  33EE
9607  33EF
9608  33F0
9609  33F1
9610  33F2
9611  33F3
9612  33F4
9613  33F5
9614  33F6
9615  33F7
9616  33F8
9617  33F9
9618  33FA
9619  33FB
9620  33FC
9621  33FD
9622  33FE
9623  33FF
9624  3400
9625  3401
9626  3402
9627  3403
9628  3404
9629  3405
9630  3406
9631  3407
9632  3408
9633  3409
9634  340A
9635  340B
9636  340C
9637  340D
9638  340E
9639  340F
9640  3410
9641  3411
9642  3412
9643  3413
9644  3414
9645  3415
9646  3416
9647  3417
9648  3418
9649  3419
9650  341A
9651  341B
9652  341C
9653  341D
9654  341E
9655  341F
9656  3420
9657  3421
9658  3422
9659  3423
9660  3424
9661  3425
9662  3426
9663  3427
9664  3428
9665  3429
9666  342A
9667  342B
9668  342C
9669  342D
9670  342E
9671  342F
9672  3430
9673  3431
9674  3432
9675  3433
9676  3434
9677  3435
9678  3436
9679  3437
9680  3438
9681  3439
9682  343A
9683  343B
9684  343C
9685  343D
9686  343E
9687  343F
9688  3440
9689  3441
9690  3442
9691  3443
9692  3444
9693  3445
9694  3446
9695  3447
9696  3448
9697  3449
9698  344A
9699  344B
9700  344C
9701  344D
9702  344E
9703  344F
9704  3450
9705  3451
9706  3452
9707  3453
9708  3454
9709  3455
9710  3456
9711  3457
9712  3458
9713  3459
9714  345A
9715  345B
9716  345C
9717  345D
9718  345E
9719  345F
9720  3460
9721  3461
9722  3462
9723  3463
9724  3464
9725  3465
9726  3466
9727  3467
9728  3468
9729  3469
9730  346A
9731  346B
9732  346C
9733  346D
9734  346E
9735  346F
9736  3470
9737  3471
9738  3472
9739  3473
9740  3474
9741  3475
9742  3476
9743  3477
9744  3478
9745  3479
9746  347A
9747  347B
9748  347C
9749  347D
9750  347E
9751  347F
9752  3480
9753  3481
9754  3482
9755  3483
9756  3484
9757  3485
9758  3486
9759  3487
9760  3488
9761  3489
9762  348A
9763  348B
9764  348C
9765  348D
9766  348E
9767  348F
9768  3490
9769  3491
9770  3492
9771  3493
9772  3494
9773  3495
9774  3496
9775  3497
9776  3498
9777  3499
9778  349A
9779  349B
9780  349C
9781  349D
9782  349E
9783  349F
9784  34A0
9785  34A1
9786  34A2
9787  34A3
9788  34A4
9789  34A5
9790  34A6
9791  34A7
9792  34A8
9793  34A9
9794  34AA
9795  34AB
9796  34AC
9797  34AD
9798  34AE
9799  34AF
9800  34B0
9801  34B1
9802  34B2
9803  34B3
9804  34B4
9805  34B5
9806  34B6
9807  34B7
9808  34B8
9809  34B9
9810  34BA
9811  34BB
9812  34BC
9813  34BD
9814  34BE
9815  34BF
9816  34C0
9817  34C1
9818  34C2
9819  34C3
9820  34C4
9821  34C5
9822  34C6
9823  34C7
9824  34C8
9825  34C9
9826  34CA
9827  34CB
9828  34CC
9829  34CD
9830  34CE
9831  34CF
9832  34D0
9833  34D1
9834  34D2
9835  34D3
9836  34D4
9837  34D5
9838  34D6
9839  34D7
9840  34D8
9841  34D9
9842  34DA
9843  34DB
9844  34DC
9845  34DD
9846  34DE
9847  34DF
9848  34E0
9849  34E1
9850  34E2
9851  34E3
9852  34E4
9853  34E5
9854  34E6
9855  34E7
9856  34E8
9857  34E9
9858  34EA
9859  34EB
9860  34EC
9861  34ED
9862  34EE
9863  34EF
9864  34F0
9865  34F1
9866  34F2
9867  34F3
9868  34F4
9869  34F5
9870  34F6
9871  34F7
9872  34F8
9873  34F9
9874  34FA
9875  34FB
9876  34FC
9877  34FD
9878  34FE
9879  34FF
9880  3500
9881  3501
9882  3502
9883  3503
9884  3504
9885  3505
9886  3506
9887  3507
9888  3508
9889  3509
9890  350A
9891  350B
9892  350C
9893  350D
9894  350E
9895  350F
9896  3510
9897  3511
9898  3512
9899  3513
9900  3514
9901  3515
9902  3516
9903  3517
9904  3518
9905  3519
9906  351A
9907  351B
9908  351C
9909  351D
9910  351E
9911  351F
9912  3520
9913  3521
9914  3522
9915  3523
9916  3524
9917  3525
9918  3526
9919  3527
9920  3528
9921  3529
9922  352A
9923  352B
9924  352C
9925  352D
9926  352E
9927  352F
9928  3530
9929  3531
9930  3532
9931  3533
9932  3534
9933  3535
9934  3536
9935  3537
9936  3538
9937  3539
9938  353A
9939  353B
9940  353C
9941  353D
9942  353E
9943  353F
9944  3540
9945  3541
9946  3542
9947  3543
9948  3544
9949  3545
9950  3546
9951  3547
9952  3548
9953  3549
9954  354A
9955  354B
9956  354C
9957  354D
9958  354E
9959  354F
9960  3550
9961  3551
9962  3552
9963  3553
9964  3554
9965  3555
9966  3556
9967  3557
9968  3558
9969  3559
9970  355A
9971  355B
9972  355C
9973  355D
9974  355E
9975  355F
9976  3560
9977  3561
9978  3562
9979  3563
9980  3564
9981  3565
9982  3566
9983  3567
9984  3568
9985  3569
9986  356A
9987  356B
9988  356C
9989  356D
9990  356E
9991  356F
9992  3570
9993  3571
9994  3572
9995  3573
9996  3574
9997  3575
9998  3576
9999  3577
10000  3578
10001  3579
10002  357A
10003  357B
10004  357C
10005  357D
10006  357E
10007  357F
10008  3580
10009  3581
10010  3582
10011  3583
10012  3584
10013  3585
10014  3586
10015  3587
10016  3588
10017  3589
10018  358A
10019  358B
10020  358C
10021  358D
10022  358E
10023  358F
10024  3590
10025  3591
10026  3592
10027  3593
10028  3594
10029  3595
10030  3596
10031  3597
10032  3598
10033  3599
10034  359A
10035  359B
10036  359C
10037  359D
10038  359E
10039  359F
10040  35A0
10041  35A1
10042  35A2
10043  35A3
10044  35A4
10045  35A5
10046  35A6
10047  35A7
10048  35A8
10049  35A9
10050  35AA
10051  35AB
10052  35AC
10053  35AD
10054  35AE
10055  35AF
10056  35B0
10057  35B1
10058  35B2
10059  35B3
10060  35B4
10061  35B5
10062  35B6
10063  35B7
10064  35B8
10065  35B9
10066  35BA
10067  35BB
10068  35BC
10069  35BD
10070  35BE
10071  35BF
10072  35C0
10073  35C1
10074  35C2
10075  35C3
10076  35C4
10077  35C5
10078  35C6
10079  35C7
10080  35C8
10081  35C9
10082  35CA
10083  35CB
10084  35CC
10085  35CD
10086  35CE
10087  35CF
10088  35D0
10089  35D1
10090  35D2
10091  35D3
10092  35D4
10093  35D5
10094  35D6
10095  35D7
10096  35D8
10097  35D9
10098  35DA
10099  35DB
10100  35DC
10101  35DD
10102  35DE
10103  35DF
10104  35E0
10105  35E1
10106  35E2
10107  35E3
10108  35E4
10109  35E5
10110  35E6
10111  35E7
10112  35E8
10113  35E9
10114  35EA
10115  35EB
10116  35EC
10117  35ED
10118  35EE
10119  35EF
10120  35F0
10121  35F1
10122  35F2
10123  35F3
10124  35F4
10125  35F5
10126  35F6
10127  35F7
10128  35F8
10129  35F9
10130  35FA
10131  35FB
10132  35FC
10133  35FD
10134  35FE
10135  35FF
10136  3600
10137  3601
10138  3602
10139  3603
10140  3604
10141  3605
10142  3606
10143  3607
10144  3608
10145  3609
10146  360A
10147  360B
10148  360C
10149  360D
10150  360E
10151  360F
10152  3610
10153  3611
10154  3612
10155  3613
10156  3614
10157  3615
10158  3616
10159  3617
10160  3618
10161  3619
10162  361A
10163  361B
10164  361C
10165  361D
10166  361E
10167  361F
10168  3620
10169  3621
10170  3622
10171  3623
10172  3624
10173  3625
10174  3626
10175  3627
10176  3628
10177  3629
10178  362A
10179  362B
10180  362C
10181  362D
10182  362E
10183  362F
10184  3630
10185  3631
10186  3632
10187  3633
10188  3634
10189  3635
10190  3636
10191  3637
10192  3638
10193  3639
10194  363A
10195  363B
10196  363C
10197  363D
10198  363E
10199  363F
10200  3640
10201  3641
10202  3642
10203  3643
10204  3644
10205  3645
10206  3646
10207  3647
10208  3648
10209  3649
10210  364A
10211  364B
10212  364C
10213  364D
10214  364E
10215  364F
10216  3650
10217  3651
10218  3652
10219  3653
10220  3654
10221  3655
10222  3656
10223  3657
10224  3658
10225  3659
10226  365A
10227  365B
10228  365C
10229  365D
10230  365E
10231  365F
10232  3660
10233  3661
10234  3662
10235  3663
10236  3664
10237  3665
10238  3666
10239  3667
10240  3668
10241  3669
10242  366A
10243  366B
10244  366C
10245  366D
10246  366E
10247  366F
10248  3670
10249  3671
10250  3672
10251  3673
10252  3674
10253  3675
10254  3676
10255  3677
10256  3678
10257  3679
10258  367A
10259  367B
10260  367C
10261  367D
10262  367E
10263  367F
10264  3680
10265  3681
10266  3682
10267  3683
10268  3684
10269  3685
10270  3686
10271  3687
10272  3688
10273  3689
10274  368A
10275  368B
10276  368C
10277  368D
10278  368E
10279  368F
10280  3690
10281  3691
10282  3692
10283  3693
10284  3694
10285  3695
10286  3696
10287  3697
10288  3698
10289  3699
10290  369A
10291  369B
10292  369C
10293  369D
10294  369E
10295  369F
10296  36A0
10297  36A1
10298  36A2
10299  36A3
10300  36A4
10301  36A5
10302  36A6
10303  36A7
10304  36A8
10305  36A9
10306  36AA
10307  36AB
10308  36AC
10309  36AD
10310  36AE
10311  36AF
10312  36B0
10313  36B1
10314  36B2
10315  36B3
10316  36B4
10317  36B5
10318  36B6
10319  36B7
10320  36B8
10321  36B9
10322  36BA
10323  36BB
10324  36BC
10325  36BD
10326  36BE
10327  36BF
10328  36C0
10329  36C1
10330  36C2
10331  36C3
10332  36C4
10333  36C5
10334  36C6
10335  36C7
10336  36C8
10337  36C9
10338  36CA
10339  36CB
10340  36CC
10341  36CD
10342  36CE
10343  36CF
10344  36D0
10345  36D1
10346  36D2
10347  36D3
10348  36D4
10349  36D5
10350  36D6
10351  36D7
10352  36D8
10353  36D9
10354  36DA
10355  36DB
10356  36DC
10357  36DD
10358  36DE
10359  36DF
10360  36E0
10361  36E1
10362  36E2
10363  36E3
10364  36E4
10365  36E5
10366  36E6
10367  36E7
10368  36E8
10369  36E9
10370  36EA
10371  36EB
10372  36EC
10373  36ED
10374  36EE
10375  36EF
10376  36F0
10377  36F1
10378  36F2
10379  36F3
10380  36F4
10381  36F5
10382  36F6
10383  36F7
10384  36F8
10385  36F9
10386  36FA
10387  36FB
10388  36FC
10389  36FD
10390  36FE
10391  36FF
10392  3700
10393  3701
10394  3702
10395  3703
10396  3704
10397  3705
10398  3706
10399  3707
10400  3708
10401  3709
10402  370A
10403  370B
10404  370C
10405  370D
10406  370E
10407  370F
10408  3710
10409  3711
10410  3712
10411  3713
10412  3714
10413  3715
10414  3716
10415  3717
10416  3718
10417  3719
10418  371A
10419  371B
10420  371C
10421  371D
10422  371E
10423  371F
10424  3720
10425  3721
10426  3722
10427  3723
10428  3724
10429  3725
10430  3726
10431  3727
10432  3728
10433  3729
10434  372A
10435  372B
10436  372C
10437  372D
10438  372E
10439  372F
10440  3730
10441  3731
10442  3732
10443  3733
10444  3734
10445  3735
10446  3736
10447  3737
10448  3738
10449  3739
10450  373A
10451  373B
10452  373C
10453  373D
10454  373E
10455  373F
10456  3740
10457  3741
10458  3742
10459  3743
10460  3744
10461  3745
10462  3746
10463  3747
10464  3748
10465  3749
10466  374A
10467  374B
10468  374C
10469  374D
10470  374E
10471  374F
10472  3750
10473  3751
10474  3752
10475  3753
10476  3754
10477  3755
10478  3756
10479  3757
10480  3758
10481  3759
10482  375A
10483  375B
10484  375C
10485  375D
10486  375E
10487  375F
10488  3760
10489  3761
10490  3762
10491  3763
10492  3764
10493  3765
10494  3766
10495  3767
10496  3768
10497  3769
10498  376A
10499  376B
10500  376C
10501  376D
10502  376E
10503  376F
10504  3770
10505  3771
10506  3772
10507  3773
10508  3774
10509  3775
10510  3776
10511  3777
10512  3778
10513  3779
10514  377A
10515  377B
10516  377C
10517  377D
10518  377E
10519  377F
10520  3780
10521  3781
10522  3782
10523  3783
10524  3784
10525  3785
10526  3786
10527  3787
10528  3788
10529  3789
10530  378A
10531  378B
10532  378C
10533  378D
10534  378E
10535  378F
10536  3790
10537  3791
10538  3792
10539  3793
10540  3794
10541  3795
10542  3796
10543  3797
10544  3798
10545  3799
10546  379A
10547  379B
10548  379C
10549  379D
10550  379E
10551  379F
10552  37A0
10553  37A1
10554  37A2
10555  37A3
10556  37A4
10557  37A5
10558  37A6
10559  37A7
10560  37A8
10561  37A9
10562  37AA
10563  37AB
10564  37AC
10565  37AD
10566  37AE
10567  37AF
10568  37B0
10569  37B1
10570  37B2
10571  37B3
10572  37B4
10573  37B5
10574  37B6
10575  37B7
10576  37B8
10577  37B9
10578  37BA
10579  37BB
10580  37BC
10581  37BD
10582  37BE
10583  37BF
10584  37C0
10585  37C1
10586  37C2
10587  37C3
10588  37C4
10589  37C5
10590  37C6
10591  37C7
10592  37C8
10593  37C9
10594  37CA
10595  37CB
10596  37CC
10597  37CD
10598  37CE
10599  37CF
10600  37D0
10601  37D1
10602  37D2
10603  37D3
10604  37D4
10605  37D5
10606  37D6
10607  37D7
10608  37D8
10609  37D9
10610  37DA
10611  37DB
10612  37DC
10613  37DD
10614  37DE
10615  37DF
10616  37E0
10617  37E1
10618  37E2
10619  37E3
10620  37E4
10621  37E5
10622  37E6
10623  37E7
10624  37E8
10625  37E9
10626  37EA
10627  37EB
10628  37EC
10629  37ED
10630  37EE
10631  37EF
10632  37F0
10633  37F1
10634  37F2
10635  37F3
10636  37F4
10637  37F5
10638  37F6
10639  37F7
10640  37F8
10641  37F9
10642  37FA
10643  37FB
10644  37FC
10645  37FD
10646  37FE
10647  37FF
10648  3800
10649  3801
10650  3802
10651  3803
10652  3804
10653  3805
10654  3806
10655  3807
10656  3808
10657  3809
10658  380A
10659  380B
10660  380C
10661  380D
10662  380E
10663  380F
10664  3810
10665  3811
10666  3812
10667  3813
10668  3814
10669  3815
10670  3816
10671  3817
10672  3818
10673  3819
10674  381A
10675  381B
10676  381C
10677  381D
10678  381E
10679  381F
10680  3820
10681  3821
10682  3822
10683  3823
10684  3824
10685  3825
10686  3826
10687  3827
10688  3828
10689  3829
10690  382A
10691  382B
10692  382C
10693  382D
10694  382E
10695  382F
10696  3830
10697  3831
10698  3832
10699  3833
10700  3834
10701  3835
10702  3836
10703  3837
10704  3838
10705  3839
10706  383A
10707  383B
10708  383C
10709  383D
10710  383E
10711  383F
10712  3840
10713  3841
10714  3842
10715  3843
10716  3844
10717  3845
10718  3846
10719  3847
10720  3848
10721  3849
10722  384A
10723  384B
10724  384C
10725  384D
10726  384E
10727  384F
10728  3850
10729  3851
10730  3852
10731  3853
10732  3854
10733  3855
10734  3856
10735  3857
10736  3858
10737  3859
10738  385A
10739  385B
10740  385C
10741  385D
10742  385E
10743  385F
10744  3860
10745  3861
10746  3862
10747  3863
10748  3864
10749  3865
10750  3866
10751  3867
10752  3868
10753  3869
10754  386A
10755  386B
10756  386C
10757  386D
10758  386E
10759  386F
10760  3870
10761  3871
10762  3872
10763  3873
10764  3874
10765  3875
10766  3876
10767  3877
10768  3878
10769  3879
10770  387A
10771  387B
10772  387C
10773  387D
10774  387E
10775  387F
10776  3880
10777  3881
10778  3882
10779  3883
10780  3884
10781  3885
10782  3886
10783  3887
10784  3888
10785  3889
10786  388A
10787  388B
10788  388C
10789  388D
10790  388E
10791  388F
10792  3890
10793  3891
10794  3892
10795  3893
10796  3894
10797  3895
10798  3896
10799  3897
10800  3898
10801  3899
10802  389A
10803  389B
10804  389C
10805  389D
10806  389E
10807  389F
10808  38A0
10809  38A1
10810  38A2
10811  38A3
10812  38A4
10813  38A5
10814  38A6
10815  38A7
10816  38A8
10817  38A9
10818  38AA
10819  38AB
10820  38AC
10821  38AD
10822  38AE
10823  38AF
10824  38B0
10825  38B1
10826  38B2
10827  38B3
10828  38B4
10829  38B5
10830  38B6
10831  38B7
10832  38B8
10833  38B9
10834  38BA
10835  38BB
10836  38BC
10837  38BD
10838  38BE
10839  38BF
10840  38C0
10841  38C1
10842  38C2
10843  38C3
10844  38C4
10845  38C5
10846  38C6
10847  38C7
10848  38C8
10849  38C9
10850  38CA
10851  38CB
10852  38CC
10853  38CD
10854  38CE
10855  38CF
10856  38D0
10857  38D1
10858  38D2
10859  38D3
10860  38D4
10861  38D5
10862  38D6
10863  38D7
10864  38D8
10865  38D9
10866  38DA
10867  38DB
10868  38DC
10869  38DD
10870  38DE
10871  38DF
10872  38E0
10873  38E1
10874  38E2
10875  38E3
10876  38E4
10877  38E5
10878  38E6
10879  38E7
10880  38E8
10881  38E9
10882  38EA
10883  38EB
10884  38EC
10885  38ED
10886  38EE
10887  38EF
10888  38F0
10889  38F1
10890  38F2
10891  38F3
10892  38F4
10893  38F5
10894  38F6
10895  38F7
10896  38F8
10897  38F9
10898  38FA
10899  38FB
10900  38FC
10901  38FD
10902  38FE
10903  38FF
10904  3900
10905  3901
10906  3902
10907  3903
10908  3904
10909  3905
10910  3906
10911  3907
10912  3908
10913  3909
10914  390A
10915  390B
10916  390C
10917  390D
10918  390E
10919  390F
10920  3910
10921  3911
10922  3912
10923  3913
10924  3914
10925  3915
10926  3916
10927  3917
10928  3918
10929  3919
10930  391A
10931  391B
10932  391C
10933  391D
10934  391E
10935  391F
10936  3920
10937  3921
10938  3922
10939  3923
10940  3924
10941  3925
10942  3926
10943  3927
10944  3928
10945  3929
10946  392A
10947  392B
10948  392C
10949  392D
10950  392E
10951  392F
10952  3930
10953  3931
10954  3932
10955  3933
10956  3934
10957  3935
10958  3936
10959  3937
10960  3938
10961  3939
10962  393A
10963  393B
10964  393C
10965  393D
10966  393E
10967  393F
10968  3940
10969  3941
10970  3942
10971  3943
10972  3944
10973  3945
10974  3946
10975  3947
10976  3948
10977  3949
10978  394A
10979  394B
10980  394C
10981  394D
10982  394E
10983  394F
10984  3950
10985  3951
10986  3952
10987  3953
10988  3954
10989  3955
10990  3956
10991  3957
10992  3958
10993  3959
10994  395A
10995  395B
10996  395C
10997  395D
10998  395E
10999  395F
11000  3960
11001  3961
11002  3962
11003  3963
11004  3964
11005  3965
11006  3966
11007  3967
11008  3968
11009  3969
11010  396A
11011  396B
11012  396C
11013  396D
11014  396E
11015  396F
11016  3970
11017  3971
11018  3972
11019  3973
11020  3974
11021  3975
11022  3976
11023  3977
11024  3978
11025  3979
11026  397A
11027  397B
11028  397C
11029  397D
11030  397E
11031  397F
11032  3980
11033  3981
11034  3982
11035  3983
11036  3984
11037  3985
11038  3986
11039  3987
11040  3988
11041  3989
11042  398A
11043  398B
11044  398C
11045  398D
11046  398E
11047  398F
11048  3990
11049  3991
11050  3992
11051  3993
11052  3994
11053  3995
11054  3996
11055  3997
11056  3998
11057  3999
11058  399A
11059  399B
11060  399C
11061  399D
11062  399E
11063  399F
11064  39A0
11065  39A1
11066  39A2
11067  39A3
11068  39A4
11069  39A5
11070  39A6
11071  39A7
11072  39A8
11073  39A9
11074  39AA
11075  39AB
11076  39AC
11077  39AD
11078  39AE
11079  39AF
11080  39B0
11081  39B1
11082  39B2
11083  39B3
11084  39B4
11085  39B5
11086  39B6
11087  39B7
11088  39B8
11089  39B9
11090  39BA
11091  39BB
11092  39BC
11093  39BD
11094  39BE
11095  39BF
11096  39C0
11097  39C1
11098  39C2
11099  39C3
11100  39C4
11101  39C5
11102  39C6
11103  39C7
11104  39C8
11105  39C9
11106  39CA
11107  39CB
11108  39CC
11109  39CD
11110  39CE
11111  39CF
11112  39D0
11113  39D1
11114  39D2
11115  39D3
11116  39D4
11117  39D5
11118  39D6
11119  39D7
11120  39D8
11121  39D9
11122  39DA
11123  39DB
11124  39DC
11125  39DD
11126  39DE
11127  39DF
11128  39E0
11129  39E1
11130  39E2
11131  39E3
11132  39E4
11133  39E5
11134  39E6
11135  39E7
11136  39E8
11137  39E9
11138  39EA
11139  39EB
11140  39EC
11141  39ED
11142  39EE
11143  39EF
11144  39F0
11145  39F1
11146  39F2
11147  39F3
11148  39F4
11149  39F5
11150  39F6
11151  39F7
11152  39F8
11153  39F9
11154  39FA
11155  39FB
11156  39FC
11157  39FD
11158  39FE
11159  39FF
11160  3A00
11161  3A01
11162  3A02
11163  3A03
11164  3A04
11165  3A05
11166  3A06
11167  3A07
11168  3A08
11169  3A09
11170  3A0A
11171  3A0B
11172  3A0C
11173  3A0D
11174  3A0E
11175  3A0F
11176  3A10
11177  3A11
11178  3A12
11179  3A13
11180  3A14
11181  3A15
11182  3A16
11183  3A17
11184  3A18
11185  3A19
11186  3A1A
11187  3A1B
11188  3A1C
11189  3A1D
11190  3A1E
11191  3A1F
11192  3A20
11193  3A21
11194  3A22
11195  3A23
11196  3A24
11197  3A25
11198  3A26
11199  3A27
11200  3A28
11201  3A29
11202  3A2A
11203  3A2B
11204  3A2C
11205  3A2D
11206  3A2E
11207  3A2F
11208  3A30
11209  3A31
11210  3A32
11211  3A33
11212  3A34
11213  3A35
11214  3A36
11215  3A37
11216  3A38
11217  3A39
11218  3A3A
11219  3A3B
11220  3A3C
11221  3A3D
11222  3A3E
11223  3A3F
11224  3A40
11225  3A41
11226  3A42
11227  3A43
11228  3A44
11229  3A45
11230  3A46
11231  3A47
11232  3A48
11233  3A49
11234  3A4A
11235  3A4B
11236  3A4C
11237  3A4D
11238  3A4E
11239  3A4F
11240  3A50
11241  3A51
11242  3A52
11243  3A53
11244  3A54
11245  3A55
11246  3A56
11247  3A57
11248  3A58
11249  3A59
11250  3A5A
11251  3A5B
11252  3A5C
11253  3A5D
11254  3A5E
11255  3A5F
11256  3A60
11257  3A61
11258  3A62
11259  3A63
11260  3A64
11261  3A65
11262  3A66
11263  3A67
11264  3A68
11265  3A69
11266  3A6A
11267  3A6B
11268  3A6C
11269  3A6D
11270  3A6E
11271  3A6F
11272  3A70
11273  3A71
11274  3A72
11275  3A73
11276  3A74
11277  3A75
11278  3A76
11279  3A77
11280  3A78
11281  3A79
11282  3A7A
11283  3A7B
11284  3A7C
11285  3A7D
11286  3A7E
11287  3A7F
11288  3A80
11289  3A81
11290  3A82
11291  3A83
11292  3A84
11293  3A85
11294  3A86
11295  3A87
11296  3A88
11297  3A89
11298  3A8A
11299  3A8B
11300  3A8C
11301  3A8D
11302  3A8E
11303  3A8F
11304  3A90
11305  3A91
11306  3A92
11307  3A93
11308  3A94
11309  3A95
11310  3A96
11311  3A97
11312  3A98
11313  3A99
11314  3A9A
11315  3A9B
11316  3A9C
11317  3A9D
11318  3A9E
11319  3A9F
11320  3AA0
11321  3AA1
11322  3AA2
11323  3AA3
11324  3AA4
11325  3AA5
11326  3AA6
11327  3AA7
11328  3AA8
11329  3AA9
11330  3AAA
11331  3AAB
11332  3AAC
11333  3AAD
11334  3AAE
11335  3AAF
11336  3AB0
11337  3AB1
11338  3AB2
11339  3AB3
11340  3AB4
11341  3AB5
11342  3AB6
11343  3AB7
11344  3AB8
11345  3AB9
11346  3ABA
11347  3ABB
11348  3ABC
11349  3ABD
11350  3ABE
11351  3ABF
11352  3AC0
11353  3AC1
11354  3AC2
11355  3AC3
11356  3AC4
11357  3AC5
11358  3AC6
11359  3AC7
11360  3AC8
11361  3AC9
11362  3ACA
11363  3ACB
11364  3ACC
11365  3ACD
11366  3ACE
11367  3ACF
11368  3AD0
11369  3AD1
11370  3AD2
11371  3AD3
11372  3AD4
11373  3AD5
11374  3AD6
11375  3AD7
11376  3AD8
11377  3AD9
11378  3ADA
11379  3ADB
11380  3ADC
11381  3ADD
11382  3ADE
11383  3ADF
11384  3AE0
11385  3AE1
11386  3AE2
11387  3AE3
11388  3AE4
11389  3AE5
11390  3AE6
11391  3AE7
11392  3AE8
11393  3AE9
11394  3AEA
11395  3AEB
11396  3AEC
11397  3AED
11398  3AEE
11399  3AEF
11400  3AF0
11401  3AF1
11402  3AF2
11403  3AF3
11404  3AF4
11405  3AF5
11406  3AF6
11407  3AF7
11408  3AF8
11409  3AF9
11410  3AFA
11411  3AFB
11412  3AFC
11413  3AFD
11414  3AFE
11415  3AFF
11416  3B00
11417  3B01
11418  3B02
11419  3B03
11420  3B04
11421  3B05
11422  3B06
11423  3B07
11424  3B08
11425  3B09
11426  3B0A
11427  3B0B
11428  3B0C
11429  3B0D
11430  3B0E
11431  3B0F
11432  3B10
11433  3B11
11434  3B12
11435  3B13
11436  3B14
11437  3B15
11438  3B16
11439  3B17
11440  3B18
11441  3B19
11442  3B1A
11443  3B1B
11444  3B1C
11445  3B1D
11446  3B1E
11447  3B1F
11448  3B20
11449  3B21
11450  3B22
11451  3B23
11452  3B24
11453  3B25
11454  3B26
11455  3B27
11456  3B28
11457  3B29
11458  3B2A
11459  3B2B
11460  3B2C
11461  3B2D
11462  3B2E
11463  3B2F
11464  3B30
11465  3B31
11466  3B32
11467  3B33
11468  3B34
11469  3B35
11470  3B36
11471  3B37
11472  3B38
11473  3B39
11474  3B3A
11475  3B3B
11476  3B3C
11477  3B3D
11478  3B3E
11479  3B3F
11480  3B40
11481  3B41
11482  3B42
11483  3B43
11484  3B44
11485  3B45
11486  3B46
11487  3B47
11488  3B48
11489  3B49
11490  3B4A
11491  3B4B
11492  3B4C
11493  3B4D
11494  3B4E
11495  3B4F
11496  3B50
11497  3B51
11498  3B52
11499  3B53
11500  3B54
11501  3B55
11502  3B56
11503  3B57
11504  3B58
11505  3B59
11506  3B5A
11507  3B5B
11508  3B5C
11509  3B5D
11510  3B5E
11511  3B5F
11512  3B60
11513  3B61
11514  3B62
11515  3B63
11516  3B64
11517  3B65
11518  3B66
11519  3B67
11520  3B68
11521  3B69
11522  3B6A
11523  3B6B
11524  3B6C
11525  3B6D
11526  3B6E
11527  3B6F
11528  3B70
11529  3B71
11530  3B72
11531  3B73
11532  3B74
11533  3B75
11534  3B76
11535  3B77
11536  3B78
11537  3B79
11538  3B7A
11539  3B7B
11540  3B7C
11541  3B7D
11542  3B7E
11543  3B7F
11544  3B80
11545  3B81
11546  3B82
11547  3B83
11548  3B84
11549  3B85
11550  3B86
11551  3B87
11552  3B88
11553  3B89
11554  3B8A
11555  3B8B
11556  3B8C
11557  3B8D
11558  3B8E
11559  3B8F
11560  3B90
11561  3B91
11562  3B92
11563  3B93
11564  3B94
11565  3B95
11566  3B96
11567  3B97
11568  3B98
11569  3B99
11570  3B9A
11571  3B9B
11572  3B9C
11573  3B9D
11574  3B9E
11575  3B9F
11576  3BA0
11577  3BA1
11578  3BA2
11579  3BA3
11580  3BA4
11581  3BA5
11582  3BA6
11583  3BA7
11584  3BA8
11585  3BA9
11586  3BAA
11587  3BAB
11588  3BAC
11589  3BAD
11590  3BAE
11591  3BAF
11592  3BB0
11593  3BB1
11594  3BB2
11595  3BB3
11596  3BB4
11597  3BB5
11598  3BB6
11599  3BB7
11600  3BB8
11601  3BB9
11602  3BBA
11603  3BBB
11604  3BBC
11605  3BBD
11606  3BBE
11607  3BBF
11608  3BC0
11609  3BC1
11610  3BC2
11611  3BC3
11612  3BC4
11613  3BC5
11614  3BC6
11615  3BC7
11616  3BC8
11617  3BC9
11618  3BCA
11619  3BCB
11620  3BCC
11621  3BCD
11622  3BCE
11623  3BCF
11624  3BD0
11625  3BD1
11626  3BD2
11627  3BD3
11628  3BD4
11629  3BD5
11630  3BD6
11631  3BD7
11632  3BD8
11633  3BD9
11634  3BDA
11635  3BDB
11636  3BDC
11637  3BDD
11638  3BDE
11639  3BDF
11640  3BE0
11641  3BE1
11642  3BE2
11643  3BE3
11644  3BE4
11645  3BE5
11646  3BE6
11647  3BE7
11648  3BE8
11649  3BE9
11650  3BEA
11651  3BEB
11652  3BEC
11653  3BED
11654  3BEE
11655  3BEF
11656  3BF0
11657  3BF1
11658  3BF2
11659  3BF3
11660  3BF4
11661  3BF5
11662  3BF6
11663  3BF7
11664  3BF8
11665  3BF9
11666  3BFA
11667  3BFB
11668  3BFC
11669  3BFD
11670  3BFE
11671  3BFF
11672  3C00
11673  3C01
11674  3C02
11675  3C03
11676  3C04
11677  3C05
11678  3C06
11679  3C07
11680  3C08
11681  3C09
11682  3C0A
11683  3C0B
11684  3C0C
11685  3C0D
11686  3C0E
11687  3C0F
11688  3C10
11689  3C11
11690  3C12
11691  3C13
11692  3C14
11693  3C15
11694  3C16
11695  3C17
11696  3C18
11697  3C19
11698  3C1A
11699  3C1B
11700  3C1C
11701  3C1D
11702  3C1E
11703  3C1F
11704  3C20
11705  3C21
11706  3C22
11707  3C23
11708  3C24
11709  3C25
11710  3C26
11711  3C27
11712  3C28
11713  3C29
11714  3C2A
11715  3C2B
11716  3C2C
11717  3C2D
11718  3C2E
11719  3C2F
11720  3C30
11721  3C31
11722  3C32
11723  3C33
11724  3C34
11725  3C35
11726  3C36
11727  3C37
11728  3C38
11729  3C39
11730  3C3A
11731  3C3B
11732  3C3C
11733  3C3D
11734  3C3E
11735  3C3F
11736  3C40
11737  3C41
11738  3C42
11739  3C43
11740  3C44
11741  3C45
11742  3C46
11743  3C47
11744  3C48
11745  3C49
11746  3C4A
11747  3C4B
11748  3C4C
11749  3C4D
11750  3C4E
11751  3C4F
11752  3C50
11753  3C51
11754  3C52
11755  3C53
11756  3C54
11757  3C55
11758  3C56
11759  3C57
11760  3C58
11761  3C59
11762  3C5A
11763  3C5B
11764  3C5C
11765  3C5D
11766  3C5E
11767  3C5F
11768  3C60
11769  3C61
11770  3C62
11771  3C63
11772  3C64
11773  3C65
11774  3C66
11775  3C67
11776  3C68
11777  3C69
11778  3C6A
11779  3C6B
11780  3C6C
11781  3C6D
11782  3C6E
11783  3C6F
11784  3C70
11785  3C71
11786  3C72
11787  3C73
11788  3C74
11789  3C75
11790  3C76
11791  3C77
11792  3C78
11793  3C79
11794  3C7A
11795  3C7B
11796  3C7C
11797  3C7D
11798  3C7E
11799  3C7F
11800  3C80
11801  3C81
11802  3C82
11803  3C83
11804  3C84
11805  3C85
11806  3C86
11807  3C87
11808  3C88
11809  3C89
11810  3C8A
11811  3C8B
11812  3C8C
11813  3C8D
11814  3C8E
11815  3C8F
11816  3C90
11817  3C91
11818  3C92
11819  3C93
11820  3C94
11821  3C95
11822  3C96
11823  3C97
11824  3C98
11825  3C99
11826  3C9A
11827  3C9B
11828  3C9C
11829  3C9D
11830  3C9E
11831  3C9F
11832  3CA0
11833  3CA1
11834  3CA2
11835  3CA3
11836  3CA4
11837  3CA5
11838  3CA6
11839  3CA7
11840  3CA8
11841  3CA9
11842  3CAA
11843  3CAB
11844  3CAC
11845  3CAD
11846  3CAE
11847  3CAF
11848  3CB0
11849  3CB1
11850  3CB2
11851  3CB3
11852  3CB4
11853  3CB5
11854  3CB6
11855  3CB7
11856  3CB8
11857  3CB9
11858  3CBA
11859  3CBB
11860  3CBC
11861  3CBD
11862  3CBE
11863  3CBF
11864  3CC0
11865  3CC1
11866  3CC2
11867  3CC3
11868  3CC4
11869  3CC5
11870  3CC6
11871  3CC7
11872  3CC8
11873  3CC9
11874  3CCA
11875  3CCB
11876  3CCC
11877  3CCD
11878  3CCE
11879  3CCF
11880  3CD0
11881  3CD1
11882  3CD2
11883  3CD3
11884  3CD4
11885  3CD5
11886  3CD6
11887  3CD7
11888  3CD8
11889  3CD9
11890  3CDA
11891  3CDB
11892  3CDC
11893  3CDD
11894  3CDE
11895  3CDF
11896  3CE0
11897  3CE1
11898  3CE2
11899  3CE3
11900  3CE4
11901  3CE5
11902  3CE6
11903  3CE7
11904  3CE8
11905  3CE9
11906  3CEA
11907  3CEB
11908  3CEC
11909  3CED
11910  3CEE
11911  3CEF
11912  3CF0
11913  3CF1
11914  3CF2
11915  3CF3
11916  3CF4
11917  3CF5
11918  3CF6
11919  3CF7
11920  3CF8
11921  3CF9
11922  3CFA
11923  3CFB
11924  3CFC
11925  3CFD
11926  3CFE
11927  3CFF
11928  3D00
11929  3D01
11930  3D02
11931  3D03
11932  3D04
11933  3D05
11934  3D06
11935  3D07
11936  3D08
11937  3D09
11938  3D0A
11939  3D0B
11940  3D0C
11941  3D0D
11942  3D0E
11943  3D0F
11944  3D10
11945  3D11
11946  3D12
11947  3D13
11948  3D14
11949  3D15
11950  3D16
11951  3D17
11952  3D18
11953  3D19
11954  3D1A
11955  3D1B
11956  3D1C
11957  3D1D
11958  3D1E
11959  3D1F
11960  3D20
11961  3D21
11962  3D22
11963  3D23
11964  3D24
11965  3D25
11966  3D26
11967  3D27
11968  3D28
11969  3D29
11970  3D2A
11971  3D2B
11972  3D2C
11973  3D2D
11974  3D2E
11975  3D2F
11976  3D30
11977  3D31
11978  3D32
11979  3D33
11980  3D34
11981  3D35
11982  3D36
11983  3D37
11984  3D38
11985  3D39
11986  3D3A
11987  3D3B
11988  3D3C
11989  3D3D
11990  3D3E
11991  3D3F
11992  3D40
11993  3D41
11994  3D42
11995  3D43
11996  3D44
11997  3D45
11998  3D46
11999  3D47
12000  3D48
12001  3D49
12002  3D4A
12003  3D4B
12004  3D4C
12005  3D4D
12006  3D4E
12007  3D4F
12008  3D50
12009  3D51
12010  3D52
12011  3D53
12012  3D54
12013  3D55
12014  3D56
12015  3D57
12016  3D58
12017  3D59
12018  3D5A
12019  3D5B
12020  3D5C
12021  3D5D
12022  3D5E
12023  3D5F
12024  3D60
12025  3D61
12026  3D62
12027  3D63
12028  3D64
12029  3D65
12030  3D66
12031  3D67
12032  3D68
12033  3D69
12034  3D6A
12035  3D6B
12036  3D6C
12037  3D6D
12038  3D6E
12039  3D6F
12040  3D70
12041  3D71
12042  3D72
12043  3D73
12044  3D74
12045  3D75
12046  3D76
12047  3D77
12048  3D78
12049  3D79
12050  3D7A
12051  3D7B
12052  3D7C
12053  3D7D
12054  3D7E
12055  3D7F
12056  3D80
12057  3D81
12058  3D82
12059  3D83
12060  3D84
12061  3D85
12062  3D86
12063  3D87
12064  3D88
12065  3D89
12066  3D8A
12067  3D8B
12068  3D8C
12069  3D8D
12070  3D8E
12071  3D8F
12072  3D90
12073  3D91
12074  3D92
12075  3D93
12076  3D94
12077  3D95
12078  3D96
12079  3D97
12080  3D98
12081  3D99
12082  3D9A
12083  3D9B
12084  3D9C
12085  3D9D
12086  3D9E
12087  3D9F
12088  3DA0
12089  3DA1
12090  3DA2
12091  3DA3
12092  3DA4
12093  3DA5
12094  3DA6
12095  3DA7
12096  3DA8
12097  3DA9
12098  3DAA
12099  3DAB
12100  3DAC
12101  3DAD
12102  3DAE
12103  3DAF
12104  3DB0
12105  3DB1
12106  3DB2
12107  3DB3
12108  3DB4
12109  3DB5
12110  3DB6
12111  3DB7
12112  3DB8
12113  3DB9
12114  3DBA
12115  3DBB
12116  3DBC
12117  3DBD
12118  3DBE
12119  3DBF
12120  3DC0
12121  3DC1
12122  3DC2
12123  3DC3
12124  3DC4
12125  3DC5
12126  3DC6
12127  3DC7
12128  3DC8
12129  3DC9
12130  3DCA
12131  3DCB
12132  3DCC
12133  3DCD
12134  3DCE
12135  3DCF
12136  3DD0
12137  3DD1
12138  3DD2
12139  3DD3
12140  3DD4
12141  3DD5
12142  3DD6
12143  3DD7
12144  3DD8
12145  3DD9
12146  3DDA
12147  3DDB
12148  3DDC
12149  3DDD
12150  3DDE
12151  3DDF
12152  3DE0
12153  3DE1
12154  3DE2
12155  3DE3
12156  3DE4
12157  3DE5
12158  3DE6
12159  3DE7
12160  3DE8
12161  3DE9
12162  3DEA
12163  3DEB
12164  3DEC
12165  3DED
12166  3DEE
12167  3DEF
12168  3DF0
12169  3DF1
12170  3DF2
12171  3DF3
12172  3DF4
12173  3DF5
12174  3DF6
12175  3DF7
12176  3DF8
12177  3DF9
12178  3DFA
12179  3DFB
12180  3DFC
12181  3DFD
12182  3DFE
12183  3DFF
12184  3E00
12185  3E01
12186  3E02
12187  3E03
12188  3E04
12189  3E05
12190  3E06
12191  3E07
12192  3E08
12193  3E09
12194  3E0A
12195  3E0B
12196  3E0C
12197  3E0D
12198  3E0E
12199  3E0F
12200  3E10
12201  3E11
12202  3E12
12203  3E13
12204  3E14
12205  3E15
12206  3E16
12207  3E17
12208  3E18
12209  3E19
12210  3E1A
12211  3E1B
12212  3E1C
12213  3E1D
12214  3E1E
12215  3E1F
12216  3E20
12217  3E21
12218  3E22
12219  3E23
12220  3E24
12221  3E25
12222  3E26
12223  3E27
12224  3E28
12225  3E29
12226  3E2A
12227  3E2B
12228  3E2C
12229  3E2D
12230  3E2E
12231  3E2F
12232  3E30
12233  3E31
12234  3E32
12235  3E33
12236  3E34
12237  3E35
12238  3E36
12239  3E37
12240  3E38
12241  3E39
12242  3E3A
12243  3E3B
12244  3E3C
12245  3E3D
12246  3E3E
12247  3E3F
12248  3E40
12249  3E41
12250  3E42
12251  3E43
12252  3E44
12253  3E45
12254  3E46
12255  3E47
12256  3E48
12257  3E49
12258  3E4A
12259  3E4B
12260  3E4C
12261  3E4D
12262  3E4E
12263  3E4F
12264  3E50
12265  3E51
12266  3E52
12267  3E53
12268  3E54
12269  3E55
12270  3E56
12271  3E57
12272  3E58
12273  3E59
12274  3E5A
12275  3E5B
12276  3E5C
12277  3E5D
12278  3E5E
12279  3E5F
12280  3E60
12281  3E61
12282  3E62
12283  3E63
12284  3E64
12285  3E65
12286  3E66
12287  3E67
12288  3E68
12289  3E69
12290  3E6A
12291  3E6B
12292  3E6C
12293  3E6D
12294  3E6E
12295  3E6F
12296  3E70
12297  3E71
12298  3E72
12299  3E73
12300  3E74
12301  3E75
12302  3E76
12303  3E77
12304  3E78
12305  3E79
12306  3E7A
12307  3E7B
12308  3E7C
12309  3E7D
12310  3E7E
12311  3E7F
12312  3E80
12313  3E81
12314  3E82
12315  3E83
12316  3E84
12317  3E85
12318  3E86
12319  3E87
12320  3E88
12321  3E89
12322  3E8A
12323  3E8B
12324  3E8C
12325  3E8D
12326  3E8E
12327  3E8F
12328  3E90
12329  3E91
12330  3E92
12331  3E93
12332  3E94
12333  3E95
12334  3E96
12335  3E97
12336  3E98
12337  3E99
12338  3E9A
12339  3E9B
12340  3E9C
12341  3E9D
12342  3E9E
12343  3E9F
12344  3EA0
12345  3EA1
12346  3EA2
12347  3EA3
12348  3EA4
12349  3EA5
12350  3EA6
12351  3EA7
12352  3EA8
12353  3EA9
12354  3EAA
12355  3EAB
12356  3EAC
12357  3EAD
12358  3EAE
12359  3EAF
12360  3EB0
12361  3EB1
12362  3EB2
12363  3EB3
12364  3EB4
12365  3EB5
12366  3EB6
12367  3EB7
12368  3EB8
12369  3EB9
12370  3EBA
12371  3EBB
12372  3EBC
12373  3EBD
12374  3EBE
12375  3EBF
12376  3EC0
12377  3EC1
12378  3EC2
12379  3EC3
12380  3EC4
12381  3EC5
12382  3EC6
12383  3EC7
12384  3EC8
12385  3EC9
12386  3ECA
12387  3ECB
12388  3ECC
12389  3ECD
12390  3ECE
12391  3ECF
12392  3ED0
12393  3ED1
12394  3ED2
12395  3ED3
12396  3ED4
12397  3ED5
12398  3ED6
12399  3ED7
12400  3ED8
12401  3ED9
12402  3EDA
12403  3EDB
12404  3EDC
12405  3EDD
12406  3EDE
12407  3EDF
12408  3EE0
12409  3EE1
12410  3EE2
12411  3EE3
12412  3EE4
12413  3EE5
12414  3EE6
12415  3EE7
12416  3EE8
12417  3EE9
12418  3EEA
12419  3EEB
12420  3EEC
12421  3EED
12422  3EEE
12423  3EEF
12424  3EF0
12425  3EF1
12426  3EF2
12427  3EF3
12428  3EF4
12429  3EF5
12430  3EF6
12431  3EF7
12432  3EF8
12433  3EF9
12434  3EFA
12435  3EFB
12436  3EFC
12437  3EFD
12438  3EFE
12439  3EFF
12440  3F00
12441  3F01
12442  3F02
12443  3F03
12444  3F04
12445  3F05
12446  3F06
12447  3F07
12448  3F08
12449  3F09
12450  3F0A
12451  3F0B
12452  3F0C
12453  3F0D
12454  3F0E
12455  3F0F
12456  3F10
12457  3F11
12458  3F12
12459  3F13
12460  3F14
12461  3F15
12462  3F16
12463  3F17
12464  3F18
12465  3F19
12466  3F1A
12467  3F1B
12468  3F1C
12469  3F1D
12470  3F1E
12471  3F1F
12472  3F20
12473  3F21
12474  3F22
12475  3F23
12476  3F24
12477  3F25
12478  3F26
12479  3F27
12480  3F28
12481  3F29
12482  3F2A
12483  3F2B
12484  3F2C
12485  3F2D
12486  3F2E
12487  3F2F
12488  3F30
12489  3F31
12490  3F32
12491  3F33
12492  3F34
12493  3F35
12494  3F36
12495  3F37
12496  3F38
12497  3F39
12498  3F3A
12499  3F3B
12500  3F3C
12501  3F3D
12502  3F3E
12503  3F3F
12504  3F40
12505  3F41
12506  3F42
12507  3F43
12508  3F44
12509  3F45
12510  3F46
12511  3F47
12512  3F48
12513  3F49
12514  3F4A
12515  3F4B
12516  3F4C
12517  3F4D
12518  3F4E
12519  3F4F
12520  3F50
12521  3F51
12522  3F52
12523  3F53
12524  3F54
12525  3F55
12526  3F56
12527  3F57
12528  3F58
12529  3F59
12530  3F5A
12531  3F5B
12532  3F5C
12533  3F5D
12534  3F5E
12535  3F5F
12536  3F60
12537  3F61
12538  3F62
12539  3F63
12540  3F64
12541  3F65
12542  3F66
12543  3F67
12544  3F68
12545  3F69
12546  3F6A
12547  3F6B
12548  3F6C
12549  3F6D
12550  3F6E
12551  3F6F
12552  3F70
12553  3F71
12554  3F72
12555  3F73
12556  3F74
12557  3F75
12558  3F76
12559  3F77
12560  3F78
12561  3F79
12562  3F7A
12563  3F7B
12564  3F7C
12565  3F7D
12566  3F7E
12567  3F7F
12568  3F80
12569  3F81
12570  3F82
12571  3F83
12572  3F84
12573  3F85
12574  3F86
12575  3F87
12576  3F88
12577  3F89
12578  3F8A
12579  3F8B
12580  3F8C
12581  3F8D
12582  3F8E
12583  3F8F
12584  3F90
12585  3F91
12586  3F92
12587  3F93
12588  3F94
12589  3F95
12590  3F96
12591  3F97
12592  3F98
12593  3F99
12594  3F9A
12595  3F9B
12596  3F9C
12597  3F9D
12598  3F9E
12599  3F9F
12600  3FA0
12601  3FA1
12602  3FA2
12603  3FA3
12604  3FA4
12605  3FA5
12606  3FA6
12607  3FA7
12608  3FA8
12609  3FA9
12610  3FAA
12611  3FAB
12612  3FAC
12613  3FAD
12614  3FAE
12615  3FAF
12616  3FB0
12617  3FB1
12618  3FB2
12619  3FB3
12620  3FB4
12621  3FB5
12622  3FB6
12623  3FB7
12624  3FB8
12625  3FB9
12626  3FBA
12627  3FBB
12628  3FBC
12629  3FBD
12630  3FBE
12631  3FBF
12632  3FC0
12633  3FC1
12634  3FC2
12635  3FC3
12636  3FC4
12637  3FC5
12638  3FC6
12639  3FC7
12640  3FC8
12641  3FC9
12642  3FCA
12643  3FCB
12644  3FCC
12645  3FCD
12646  3FCE
12647  3FCF
12648  3FD0
12649  3FD1
12650  3FD2
12651  3FD3
12652  3FD4
12653  3FD5
12654  3FD6
12655  3FD7
12656  3FD8
12657  3FD9
12658  3FDA
12659  3FDB
12660  3FDC
12661  3FDD
12662  3FDE
12663  3FDF
12664  3FE0
12665  3FE1
12666  3FE2
12667  3FE3
12668  3FE4
12669  3FE5
12670  3FE6
12671  3FE7
12672  3FE8
12673  3FE9
12674  3FEA
12675  3FEB
12676  3FEC
12677  3FED
12678  3FEE
12679  3FEF
12680  3FF0
12681  3FF1
12682  3FF2
12683  3FF3
12684  3FF4
12685  3FF5
12686  3FF6
12687  3FF7
12688  3FF8
12689  3FF9
12690  3FFA
12691  3FFB
12692  3FFC
12693  3FFD
12694  3FFE
12695  3FFF
12696  4000
12697  4001
12698  4002
12699  4003
12700  4004
12701  4005
12702  4006
12703  4007
12704  4008
12705  4009
12706  400A
12707  400B
12708  400C
12709  400D
12710  400E
12711  400F
12712  4010
12713  4011
12714  4012
12715  4013
12716  4014
12717  4015
12718  4016
12719  4017
12720  4018
12721  4019
12722  401A
12723  401B
12724  401C
12725  401D
12726  401E
12727  401F
12728  4020
12729  4021
12730  4022
12731  4023
12732  4024
12733  4025
12734  4026
12735  4027
12736  4028
12737  4029
12738  402A
12739  402B
12740  402C
12741  402D
12742  402E
12743  402F
12744  4030
12745  4031
12746  4032
12747  4033
12748  4034
12749  4035
12750  4036
12751  4037
12752  4038
12753  4039
12754  403A
12755  403B
12756  403C
12757  403D
12758  403E
12759  403F
12760  4040
12761  4041
12762  4042
12763  4043
12764  4044
12765  4045
12766  4046
12767  4047
12768  4048
12769  4049
12770  404A
12771  404B
12772  404C
12773  404D
12774  404E
12775  404F
12776  4050
12777  4051
12778  4052
12779  4053
12780  4054
12781  4055
12782  4056
12783  4057
12784  4058
12785  4059
12786  405A
12787  405B
12788  405C
12789  405D
12790  405E
12791  405F
12792  4060
12793  4061
12794  4062
12795  4063
12796  4064
12797  4065
12798  4066
12799  4067
12800  4068
12801  4069
12802  406A
12803  406B
12804  406C
12805  406D
12806  406E
12807  406F
12808  4070
12809  4071
12810  4072
12811  4073
12812  4074
12813  4075
12814  4076
12815  4077
12816  4078
12817  4079
12818  407A
12819  407B
12820  407C
12821  407D
12822  407E
12823  407F
12824  4080
12825  4081
12826  4082
12827  4083
12828  4084
12829  4085
12830  4086
12831  4087
12832  4088
12833  4089
12834  408A
12835  408B
12836  408C
12837  408D
12838  408E
12839  408F
12840  4090
12841  4091
12842  4092
12843  4093
12844  4094
12845  4095
12846  4096
12847  4097
12848  4098
12849  4099
12850  409A
12851  409B
12852  409C
12853  409D
12854  409E
12855  409F
12856  40A0
12857  40A1
12858  40A2
12859  40A3
12860  40A4
12861  40A5
12862  40A6
12863  40A7
12864  40A8
12865  40A9
12866  40AA
12867  40AB
12868  40AC
12869  40AD
12870  40AE
12871  40AF
12872  40B0
12873  40B1
12874  40B2
12875  40B3
12876  40B4
12877  40B5
12878  40B6
12879  40B7
12880  40B8
12881  40B9
12882  40BA
12883  40BB
12884  40BC
12885  40BD
12886  40BE
12887  40BF
12888  40C0
12889  40C1
12890  40C2
12891  40C3
12892  40C4
12893  40C5
12894  40C6
12895  40C7
12896  40C8
12897  40C9
12898  40CA
12899  40CB
12900  40CC
12901  40CD
12902  40CE
12903  40CF
12904  40D0
12905  40D1
12906  40D2
12907  40D3
12908  40D4
12909  40D5
12910  40D6
12911  40D7
12912  40D8
12913  40D9
12914  40DA
12915  40DB
12916  40DC
12917  40DD
12918  40DE
12919  40DF
12920  40E0
12921  40E1
12922  40E2
12923  40E3
12924  40E4
12925  40E5
12926  40E6
12927  40E7
12928  40E8
12929  40E9
12930  40EA
12931  40EB
12932  40EC
12933  40ED
12934  40EE
12935  40EF
12936  40F0
12937  40F1
12938  40F2
12939  40F3
12940  40F4
12941  40F5
12942  40F6
12943  40F7
12944  40F8
12945  40F9
12946  40FA
12947  40FB
12948  40FC
12949  40FD
12950  40FE
12951  40FF
12952  4100
12953  4101
12954  4102
12955  4103
12956  4104
12957  4105
12958  4106
12959  4107
12960  4108
12961  4109
12962  410A
12963  410B
12964  410C
12965  410D
12966  410E
12967  410F
12968  4110
12969  4111
12970  4112
12971  4113
12972  4114
12973  4115
12974  4116
12975  4117
12976  4118
12977  4119
12978  411A
12979  411B
12980  411C
12981  411D
12982  411E
12983  411F
12984  4120
12985  4121
12986  4122
12987  4123
12988  4124
12989  4125
12990  4126
12991  4127
12992  4128
12993  4129
12994  412A
12995  412B
12996  412C
12997  412D
12998  412E
12999  412F
13000  4130
13001  4131
13002  4132
13003  4133
13004  4134
13005  4135
13006  4136
13007  4137
13008  4138
13009  4139
13010  413A
13011  413B
13012  413C
13013  413D
13014  413E
13015  413F
13016  4140
13017  4141
13018  4142
13019  4143
13020  4144
13021  4145
13022  4146
13023  4147
13024  4148
13025  4149
13026  414A
13027  414B
13028  414C
13029  414D
13030  414E
13031  414F
13032  4150
13033  4151
13034  4152
13035  4153
13036  4154
13037  4155
13038  4156
13039  4157
13040  4158
13041  4159
13042  415A
13043  415B
13044  415C
13045  415D
13046  415E
13047  415F
13048  4160
13049  4161
13050  4162
13051  4163
13052  4164
13053  4165
13054  4166
13055  4167
13056  4168
13057  4169
13058  416A
13059  416B
13060  416C
13061  416D
13062  416E
13063  416F
13064  4170
13065  4171
13066  4172
13067  4173
13068  4174
13069  4175
13070  4176
13071  4177
13072  4178
13073  4179
13074  417A
13075  417B
13076  417C
13077  417D
13078  417E
13079  417F
13080  4180
13081  4181
13082  4182
13083  4183
13084  4184
13085  4185
13086  4186
13087  4187
13088  4188
13089  4189
13090  418A
13091  418B
13092  418C
13093  418D
13094  418E
13095  418F
13096  4190
13097  4191
13098  4192
13099  4193
13100  4194
13101  4195
13102  4196
13103  4197
13104  4198
13105  4199
13106  419A
13107  419B
13108  419C
13109  419D
13110  419E
13111  419F
13112  41A0
13113  41A1
13114  41A2
13115  41A3
13116  41A4
13117  41A5
13118  41A6
13119  41A7
13120  41A8
13121  41A9
13122  41AA
13123  41AB
13124  41AC
13125  41AD
13126  41AE
13127  41AF
13128  41B0
13129  41B1
13130  41B2
13131  41B3
13132  41B4
13133  41B5
13134  41B6
13135  41B7
13136  41B8
13137  41B9
13138  41BA
13139  41BB
13140  41BC
13141  41BD
13142  41BE
13143  41BF
13144  41C0
13145  41C1
13146  41C2
13147  41C3
13148  41C4
13149  41C5
13150  41C6
13151  41C7
13152  41C8
13153  41C9
13154  41CA
13155  41CB
13156  41CC
13157  41CD
13158  41CE
13159  41CF
13160  41D0
13161  41D1
13162  41D2
13163  41D3
13164  41D4
13165  41D5
13166  41D6
13167  41D7
13168  41D8
13169  41D9
13170  41DA
13171  41DB
13172  41DC
13173  41DD
13174  41DE
13175  41DF
13176  41E0
13177  41E1
13178  41E2
13179  41E3
13180  41E4
13181  41E5
13182  41E6
13183  41E7
13184  41E8
13185  41E9
13186  41EA
13187  41EB
13188  41EC
13189  41ED
13190  41EE
13191  41EF
13192  41F0
13193  41F1
13194  41F2
13195  41F3
13196  41F4
13197  41F5
13198  41F6
13199  41F7
13200  41F8
13201  41F9
13202  41FA
13203  41FB
13204  41FC
13205  41FD
13206  41FE
13207  41FF
13208  4200
13209  4201
13210  4202
13211  4203
13212  4204
13213  4205
13214  4206
13215  4207
13216  4208
13217  4209
13218  420A
13219  420B
13220  420C
13221  420D
13222  420E
13223  420F
13224  4210
13225  4211
13226  4212
13227  4213
13228  4214
13229  4215
13230  4216
13231  4217
13232  4218
13233  4219
13234  421A
13235  421B
13236  421C
13237  421D
13238  421E
13239  421F
13240  4220
13241  4221
13242  4222
13243  4223
13244  4224
13245  4225
13246  4226
13247  4227
13248  4228
13249  4229
13250  422A
13251  422B
13252  422C
13253  422D
13254  422E
13255  422F
13256  4230
13257  4231
13258  4232
13259  4233
13260  4234
13261  4235
13262  4236
13263  4237
13264  4238
13265  4239
13266  423A
13267  423B
13268  423C
13269  423D
13270  423E
13271  423F
13272  4240
13273  4241
13274  4242
13275  4243
13276  4244
13277  4245
13278  4246
13279  4247
13280  4248
13281  4249
13282  424A
13283  424B
13284  424C
13285  424D
13286  424E
13287  424F
13288  4250
13289  4251
13290  4252
13291  4253
13292  4254
13293  4255
13294  4256
13295  4257
13296  4258
13297  4259
13298  425A
13299  425B
13300  425C
13301  425D
13302  425E
13303  425F
13304  4260
13305  4261
13306  4262
13307  4263
13308  4264
13309  4265
13310  4266
13311  4267
13312  4268
13313  4269
13314  426A
13315  426B
13316  426C
13317  426D
13318  426E
13319  426F
13320  4270
13321  4271
13322  4272
13323  4273
13324  4274
13325  4275
13326  4276
13327  4277
13328  4278
13329  4279
13330  427A
13331  427B
13332  427C
13333  427D
13334  427E
13335  427F
13336  4280
13337  4281
13338  4282
13339  4283
13340  4284
13341  4285
13342  4286
13343  4287
13344  4288
13345  4289
13346  428A
13347  428B
13348  428C
13349  428D
13350  428E
13351  428F
13352  4290
13353  4291
13354  4292
13355  4293
13356  4294
13357  4295
13358  4296
13359  4297
13360  4298
13361  4299
13362  429A
13363  429B
13364  429C
13365  429D
13366  429E
13367  429F
13368  42A0
13369  42A1
13370  42A2
13371  42A3
13372  42A4
13373  42A5
13374  42A6
13375  42A7
13376  42A8
13377  42A9
13378  42AA
13379  42AB
13380  42AC
13381  42AD
13382  42AE
13383  42AF
13384  42B0
13385  42B1
13386  42B2
13387  42B3
13388  42B4
13389  42B5
13390  42B6
13391  42B7
13392  42B8
13393  42B9
13394  42BA
13395  42BB
13396  42BC
13397  42BD
13398  42BE
13399  42BF
13400  42C0
13401  42C1
13402  42C2
13403  42C3
13404  42C4
13405  42C5
13406  42C6
13407  42C7
13408  42C8
13409  42C9
13410  42CA
13411  42CB
13412  42CC
13413  42CD
13414  42CE
13415  42CF
13416  42D0
13417  42D1
13418  42D2
13419  42D3
13420  42D4
13421  42D5
13422  42D6
13423  42D7
13424  42D8
13425  42D9
13426  42DA
13427  42DB
13428  42DC
13429  42DD
13430  42DE
13431  42DF
13432  42E0
13433  42E1
13434  42E2
13435  42E3
13436  42E4
13437  42E5
13438  42E6
13439  42E7
13440  42E8
13441  42E9
13442  42EA
13443  42EB
13444  42EC
13445  42ED
13446  42EE
13447  42EF
13448  42F0
13449  42F1
13450  42F2
13451  42F3
13452  42F4
13453  42F5
13454  42F6
13455  42F7
13456  42F8
13457  42F9
13458  42FA
13459  42FB
13460  42FC
13461  42FD
13462  42FE
13463  42FF
13464  4300
13465  4301
13466  4302
13467  4303
13468  4304
13469  4305
13470  4306
13471  4307
13472  4308
13473  4309
13474  430A
13475  430B
13476  430C
13477  430D
13478  430E
13479  430F
13480  4310
13481  4311
13482  4312
13483  4313
13484  4314
13485  4315
13486  4316
13487  4317
13488  4318
13489  4319
13490  431A
13491  431B
13492  431C
13493  431D
13494  431E
13495  431F
13496  4320
13497  4321
13498  4322
13499  4323
13500  4324
13501  4325
13502  4326
13503  4327
13504  4328
13505  4329
13506  432A
13507  432B
13508  432C
13509  432D
13510  432E
13511  432F
13512  4330
13513  4331
13514  4332
13515  4333
13516  4334
13517  4335
13518  4336
13519  4337
13520  4338
13521  4339
13522  433A
13523  433B
13524  433C
13525  433D
13526  433E
13527  433F
13528  4340
13529  4341
13530  4342
13531  4343
13532  4344
13533  4345
13534  4346
13535  4347
13536  4348
13537  4349
13538  434A
13539  434B
13540  434C
13541  434D
13542  434E
13543  434F
13544  4350
13545  4351
13546  4352
13547  4353
13548  4354
13549  4355
13550  4356
13551  4357
13552  4358
13553  4359
13554  435A
13555  435B
13556  435C
13557  435D
13558  435E
13559  435F
13560  4360
13561  4361
13562  4362
13563  4363
13564  4364
13565  4365
13566  4366
13567  4367
13568  4368
13569  4369
13570  436A
13571  436B
13572  436C
13573  436D
13574  436E
13575  436F
13576  4370
13577  4371
13578  4372
13579  4373
13580  4374
13581  4375
13582  4376
13583  4377
13584  4378
13585  4379
13586  437A
13587  437B
13588  437C
13589  437D
13590  437E
13591  437F
13592  4380
13593  4381
13594  4382
13595  4383
13596  4384
13597  4385
13598  4386
13599  4387
13600  4388
13601  4389
13602  438A
13603  438B
13604  438C
13605  438D
13606  438E
13607  438F
13608  4390
13609  4391
13610  4392
13611  4393
13612  4394
13613  4395
13614  4396
13615  4397
13616  4398
13617  4399
13618  439A
13619  439B
13620  439C
13621  439D
13622  439E
13623  439F
13624  43A0
13625  43A1
13626  43A2
13627  43A3
13628  43A4
13629  43A5
13630  43A6
13631  43A7
13632  43A8
13633  43A9
13634  43AA
13635  43AB
13636  43AC
13637  43AD
13638  43AE
13639  43AF
13640  43B0
13641  43B1
13642  43B2
13643  43B3
13644  43B4
13645  43B5
13646  43B6
13647  43B7
13648  43B8
13649  43B9
13650  43BA
13651  43BB
13652  43BC
13653  43BD
13654  43BE
13655  43BF
13656  43C0
13657  43C1
13658  43C2
13659  43C3
13660  43C4
13661  43C5
13662  43C6
13663  43C7
13664  43C8
13665  43C9
13666  43CA
13667  43CB
13668  43CC
13669  43CD
13670  43CE
13671  43CF
13672  43D0
13673  43D1
13674  43D2
13675  43D3
13676  43D4
13677  43D5
13678  43D6
13679  43D7
13680  43D8
13681  43D9
13682  43DA
13683  43DB
13684  43DC
13685  43DD
13686  43DE
13687  43DF
13688  43E0
13689  43E1
13690  43E2
13691  43E3
13692  43E4
13693  43E5
13694  43E6
13695  43E7
13696  43E8
13697  43E9
13698  43EA
13699  43EB
13700  43EC
13701  43ED
13702  43EE
13703  43EF
13704  43F0
13705  43F1
13706  43F2
13707  43F3
13708  43F4
13709  43F5
13710  43F6
13711  43F7
13712  43F8
13713  43F9
13714  43FA
13715  43FB
13716  43FC
13717  43FD
13718  43FE
13719  43FF
13720  4400
13721  4401
13722  4402
13723  4403
13724  4404
13725  4405
13726  4406
13727  4407
13728  4408
13729  4409
13730  440A
13731  440B
13732  440C
13733  440D
13734  440E
13735  440F
13736  4410
13737  4411
13738  4412
13739  4413
13740  4414
13741  4415
13742  4416
13743  4417
13744  4418
13745  4419
13746  441A
13747  441B
13748  441C
13749  441D
13750  441E
13751  441F
13752  4420
13753  4421
13754  4422
13755  4423
13756  4424
13757  4425
13758  4426
13759  4427
13760  4428
13761  4429
13762  442A
13763  442B
13764  442C
13765  442D
13766  442E
13767  442F
13768  4430
13769  4431
13770  4432
13771  4433
13772  4434
13773  4435
13774  4436
13775  4437
13776  4438
13777  4439
13778  443A
13779  443B
13780  443C
13781  443D
13782  443E
13783  443F
13784  4440
13785  4441
13786  4442
13787  4443
13788  4444
13789  4445
13790  4446
13791  4447
13792  4448
13793  4449
13794  444A
13795  444B
13796  444C
13797  444D
13798  444E
13799  444F
13800  4450
13801  4451
13802  4452
13803  4453
13804  4454
13805  4455
13806  4456
13807  4457
13808  4458
13809  4459
13810  445A
13811  445B
13812  445C
13813  445D
13814  445E
13815  445F
13816  4460
13817  4461
13818  4462
13819  4463
13820  4464
13821  4465
13822  4466
13823  4467
13824  4468
13825  4469
13826  446A
13827  446B
13828  446C
13829  446D
13830  446E
13831  446F
13832  4470
13833  4471
13834  4472
13835  4473
13836  4474
13837  4475
13838  4476
13839  4477
13840  4478
13841  4479
13842  447A
13843  447B
13844  447C
13845  447D
13846  447E
13847  447F
13848  4480
13849  4481
13850  4482
13851  4483
13852  4484
13853  4485
13854  4486
13855  4487
13856  4488
13857  4489
13858  448A
13859  448B
13860  448C
13861  448D
13862  448E
13863  448F
13864  4490
13865  4491
13866  4492
13867  4493
13868  4494
13869  4495
13870  4496
13871  4497
13872  4498
13873  4499
13874  449A
13875  449B
13876  449C
13877  449D
13878  449E
13879  449F
13880  44A0
13881  44A1
13882  44A2
13883  44A3
13884  44A4
13885  44A5
13886  44A6
13887  44A7
13888  44A8
13889  44A9
13890  44AA
13891  44AB
13892  44AC
13893  44AD
13894  44AE
13895  44AF
13896  44B0
13897  44B1
13898  44B2
13899  44B3
13900  44B4
13901  44B5
13902  44B6
13903  44B7
13904  44B8
13905  44B9
13906  44BA
13907  44BB
13908  44BC
13909  44BD
13910  44BE
13911  44BF
13912  44C0
13913  44C1
13914  44C2
13915  44C3
13916  44C4
13917  44C5
13918  44C6
13919  44C7
13920  44C8
13921  44C9
13922  44CA
13923  44CB
13924  44CC
13925  44CD
13926  44CE
13927  44CF
13928  44D0
13929  44D1
13930  44D2
13931  44D3
13932  44D4
13933  44D5
13934  44D6
13935  44D7
13936  44D8
13937  44D9
13938  44DA
13939  44DB
13940  44DC
13941  44DD
13942  44DE
13943  44DF
13944  44E0
13945  44E1
13946  44E2
13947  44E3
13948  44E4
13949  44E5
13950  44E6
13951  44E7
13952  44E8
13953  44E9
13954  44EA
13955  44EB
13956  44EC
13957  44ED
13958  44EE
13959  44EF
13960  44F0
13961  44F1
13962  44F2
13963  44F3
13964  44F4
13965  44F5
13966  44F6
13967  44F7
13968  44F8
13969  44F9
13970  44FA
13971  44FB
13972  44FC
13973  44FD
13974  44FE
13975  44FF
13976  4500
13977  4501
13978  4502
13979  4503
13980  4504
13981  4505
13982  4506
13983  4507
13984  4508
13985  4509
13986  450A
13987  450B
13988  450C
13989  450D
13990  450E
13991  450F
13992  4510
13993  4511
13994  4512
13995  4513
13996  4514
13997  4515
13998  4516
13999  4517
14000  4518
14001  4519
14002  451A
14003  451B
14004  451C
14005  451D
14006  451E
14007  451F
14008  4520
14009  4521
14010  4522
14011  4523
14012  4524
14013  4525
14014  4526
14015  4527
14016  4528
14017  4529
14018  452A
14019  452B
14020  452C
14021  452D
14022  452E
14023  452F
14024  4530
14025  4531
14026  4532
14027  4533
14028  4534
14029  4535
14030  4536
14031  4537
14032  4538
14033  4539
14034  453A
14035  453B
14036  453C
14037  453D
14038  453E
14039  453F
14040  4540
14041  4541
14042  4542
14043  4543
14044  4544
14045  4545
14046  4546
14047  4547
14048  4548
14049  4549
14050  454A
14051  454B
14052  454C
14053  454D
14054  454E
14055  454F
14056  4550
14057  4551
14058  4552
14059  4553
14060  4554
14061  4555
14062  4556
14063  4557
14064  4558
14065  4559
14066  455A
14067  455B
14068  455C
14069  455D
14070  455E
14071  455F
14072  4560
14073  4561
14074  4562
14075  4563
14076  4564
14077  4565
14078  4566
14079  4567
14080  4568
14081  4569
14082  456A
14083  456B
14084  456C
14085  456D
14086  456E
14087  456F
14088  4570
14089  4571
14090  4572
14091  4573
14092  4574
14093  4575
14094  4576
14095  4577
14096  4578
14097  4579
14098  457A
14099  457B
14100  457C
14101  457D
14102  457E
14103  457F
14104  4580
14105  4581
14106  4582
14107  4583
14108  4584
14109  4585
14110  4586
14111  4587
14112  4588
14113  4589
14114  458A
14115  458B
14116  458C
14117  458D
14118  458E
14119  458F
14120  4590
14121  4591
14122  4592
14123  4593
14124  4594
14125  4595
14126  4596
14127  4597
14128  4598
14129  4599
14130  459A
14131  459B
14132  459C
14133  459D
14134  459E
14135  459F
14136  45A0
14137  45A1
14138  45A2
14139  45A3
14140  45A4
14141  45A5
14142  45A6
14143  45A7
14144  45A8
14145  45A9
14146  45AA
14147  45AB
14148  45AC
14149  45AD
14150  45AE
14151  45AF
14152  45B0
14153  45B1
14154  45B2
14155  45B3
14156  45B4
14157  45B5
14158  45B6
14159  45B7
14160  45B8
14161  45B9
14162  45BA
14163  45BB
14164  45BC
14165  45BD
14166  45BE
14167  45BF
14168  45C0
14169  45C1
14170  45C2
14171  45C3
14172  45C4
14173  45C5
14174  45C6
14175  45C7
14176  45C8
14177  45C9
14178  45CA
14179  45CB
14180  45CC
14181  45CD
14182  45CE
14183  45CF
14184  45D0
14185  45D1
14186  45D2
14187  45D3
14188  45D4
14189  45D5
14190  45D6
14191  45D7
14192  45D8
14193  45D9
14194  45DA
14195  45DB
14196  45DC
14197  45DD
14198  45DE
14199  45DF
14200  45E0
14201  45E1
14202  45E2
14203  45E3
14204  45E4
14205  45E5
14206  45E6
14207  45E7
14208  45E8
14209  45E9
14210  45EA
14211  45EB
14212  45EC
14213  45ED
14214  45EE
14215  45EF
14216  45F0
14217  45F1
14218  45F2
14219  45F3
14220  45F4
14221  45F5
14222  45F6
14223  45F7
14224  45F8
14225  45F9
14226  45FA
14227  45FB
14228  45FC
14229  45FD
14230  45FE
14231  45FF
14232  4600
14233  4601
14234  4602
14235  4603
14236  4604
14237  4605
14238  4606
14239  4607
14240  4608
14241  4609
14242  460A
14243  460B
14244  460C
14245  460D
14246  460E
14247  460F
14248  4610
14249  4611
14250  4612
14251  4613
14252  4614
14253  4615
14254  4616
14255  4617
14256  4618
14257  4619
14258  461A
14259  461B
14260  461C
14261  461D
14262  461E
14263  461F
14264  4620
14265  4621
14266  4622
14267  4623
14268  4624
14269  4625
14270  4626
14271  4627
14272  4628
14273  4629
14274  462A
14275  462B
14276  462C
14277  462D
14278  462E
14279  462F
14280  4630
14281  4631
14282  4632
14283  4633
14284  4634
14285  4635
14286  4636
14287  4637
14288  4638
14289  4639
14290  463A
14291  463B
14292  463C
14293  463D
14294  463E
14295  463F
14296  4640
14297  4641
14298  4642
14299  4643
14300  4644
14301  4645
14302  4646
14303  4647
14304  4648
14305  4649
14306  464A
14307  464B
14308  464C
14309  464D
14310  464E
14311  464F
14312  4650
14313  4651
14314  4652
14315  4653
14316  4654
14317  4655
14318  4656
14319  4657
14320  4658
14321  4659
14322  465A
14323  465B
14324  465C
14325  465D
14326  465E
14327  465F
14328  4660
14329  4661
14330  4662
14331  4663
14332  4664
14333  4665
14334  4666
14335  4667
14336  4668
14337  4669
14338  466A
14339  466B
14340  466C
14341  466D
14342  466E
14343  466F
14344  4670
14345  4671
14346  4672
14347  4673
14348  4674
14349  4675
14350  4676
14351  4677
14352  4678
14353  4679
14354  467A
14355  467B
14356  467C
14357  467D
14358  467E
14359  467F
14360  4680
14361  4681
14362  4682
14363  4683
14364  4684
14365  4685
14366  4686
14367  4687
14368  4688
14369  4689
14370  468A
14371  468B
14372  468C
14373  468D
14374  468E
14375  468F
14376  4690
14377  4691
14378  4692
14379  4693
14380  4694
14381  4695
14382  4696
14383  4697
14384  4698
14385  4699
14386  469A
14387  469B
14388  469C
14389  469D
14390  469E
14391  469F
14392  46A0
14393  46A1
14394  46A2
14395  46A3
14396  46A4
14397  46A5
14398  46A6
14399  46A7
14400  46A8
14401  46A9
14402  46AA
14403  46AB
14404  46AC
14405  46AD
14406  46AE
14407  46AF
14408  46B0
14409  46B1
14410  46B2
14411  46B3
14412  46B4
14413  46B5
14414  46B6
14415  46B7
14416  46B8
14417  46B9
14418  46BA
14419  46BB
14420  46BC
14421  46BD
14422  46BE
14423  46BF
14424  46C0
14425  46C1
14426  46C2
14427  46C3
14428  46C4
14429  46C5
14430  46C6
14431  46C7
14432  46C8
14433  46C9
14434  46CA
14435  46CB
14436  46CC
14437  46CD
14438  46CE
14439  46CF
14440  46D0
14441  46D1
14442  46D2
14443  46D3
14444  46D4
14445  46D5
14446  46D6
14447  46D7
14448  46D8
14449  46D9
14450  46DA
14451  46DB
14452  46DC
14453  46DD
14454  46DE
14455  46DF
14456  46E0
14457  46E1
14458  46E2
14459  46E3
14460  46E4
14461  46E5
14462  46E6
14463  46E7
14464  46E8
14465  46E9
14466  46EA
14467  46EB
14468  46EC
14469  46ED
14470  46EE
14471  46EF
14472  46F0
14473  46F1
14474  46F2
14475  46F3
14476  46F4
14477  46F5
14478  46F6
14479  46F7
14480  46F8
14481  46F9
14482  46FA
14483  46FB
14484  46FC
14485  46FD
14486  46FE
14487  46FF
14488  4700
14489  4701
14490  4702
14491  4703
14492  4704
14493  4705
14494  4706
14495  4707
14496  4708
14497  4709
14498  470A
14499  470B
14500  470C
14501  470D
14502  470E
14503  470F
14504  4710
14505  4711
14506  4712
14507  4713
14508  4714
14509  4715
14510  4716
14511  4717
14512  4718
14513  4719
14514  471A
14515  471B
14516  471C
14517  471D
14518  471E
14519  471F
14520  4720
14521  4721
14522  4722
14523  4723
14524  4724
14525  4725
14526  4726
14527  4727
14528  4728
14529  4729
14530  472A
14531  472B
14532  472C
14533  472D
14534  472E
14535  472F
14536  4730
14537  4731
14538  4732
14539  4733
14540  4734
14541  4735
14542  4736
14543  4737
14544  4738
14545  4739
14546  473A
14547  473B
14548  473C
14549  473D
14550  473E
14551  473F
14552  4740
14553  4741
14554  4742
14555  4743
14556  4744
14557  4745
14558  4746
14559  4747
14560  4748
14561  4749
14562  474A
14563  474B
14564  474C
14565  474D
14566  474E
14567  474F
14568  4750
14569  4751
14570  4752
14571  4753
14572  4754
14573  4755
14574  4756
14575  4757
14576  4758
14577  4759
14578  475A
14579  475B
14580  475C
14581  475D
14582  475E
14583  475F
14584  4760
14585  4761
14586  4762
14587  4763
14588  4764
14589  4765
14590  4766
14591  4767
14592  4768
14593  4769
14594  476A
14595  476B
14596  476C
14597  476D
14598  476E
14599  476F
14600  4770
14601  4771
14602  4772
14603  4773
14604  4774
14605  4775
14606  4776
14607  4777
14608  4778
14609  4779
14610  477A
14611  477B
14612  477C
14613  477D
14614  477E
14615  477F
14616  4780
14617  4781
14618  4782
14619  4783
14620  4784
14621  4785
14622  4786
14623  4787
14624  4788
14625  4789
14626  478A
14627  478B
14628  478C
14629  478D
14630  478E
14631  478F
14632  4790
14633  4791
14634  4792
14635  4793
14636  4794
14637  4795
14638  4796
14639  4797
14640  4798
14641  4799
14642  479A
14643  479B
14644  479C
14645  479D
14646  479E
14647  479F
14648  47A0
14649  47A1
14650  47A2
14651  47A3
14652  47A4
14653  47A5
14654  47A6
14655  47A7
14656  47A8
14657  47A9
14658  47AA
14659  47AB
14660  47AC
14661  47AD
14662  47AE
14663  47AF
14664  47B0
14665  47B1
14666  47B2
14667  47B3
14668  47B4
14669  47B5
14670  47B6
14671  47B7
14672  47B8
14673  47B9
14674  47BA
14675  47BB
14676  47BC
14677  47BD
14678  47BE
14679  47BF
14680  47C0
14681  47C1
14682  47C2
14683  47C3
14684  47C4
14685  47C5
14686  47C6
14687  47C7
14688  47C8
14689  47C9
14690  47CA
14691  47CB
14692  47CC
14693  47CD
14694  47CE
14695  47CF
14696  47D0
14697  47D1
14698  47D2
14699  47D3
14700  47D4
14701  47D5
14702  47D6
14703  47D7
14704  47D8
14705  47D9
14706  47DA
14707  47DB
14708  47DC
14709  47DD
14710  47DE
14711  47DF
14712  47E0
14713  47E1
14714  47E2
14715  47E3
14716  47E4
14717  47E5
14718  47E6
14719  47E7
14720  47E8
14721  47E9
14722  47EA
14723  47EB
14724  47EC
14725  47ED
14726  47EE
14727  47EF
14728  47F0
14729  47F1
14730  47F2
14731  47F3
14732  47F4
14733  47F5
14734  47F6
14735  47F7
14736  47F8
14737  47F9
14738  47FA
14739  47FB
14740  47FC
14741  47FD
14742  47FE
14743  47FF
14744  4800
14745  4801
14746  4802
14747  4803
14748  4804
14749  4805
14750  4806
14751  4807
14752  4808
14753  4809
14754  480A
14755  480B
14756  480C
14757  480D
14758  480E
14759  480F
14760  4810
14761  4811
14762  4812
14763  4813
14764  4814
14765  4815
14766  4816
14767  4817
14768  4818
14769  4819
14770  481A
14771  481B
14772  481C
14773  481D
14774  481E
14775  481F
14776  4820
14777  4821
14778  4822
14779  4823
14780  4824
14781  4825
14782  4826
14783  4827
14784  4828
14785  4829
14786  482A
14787  482B
14788  482C
14789  482D
14790  482E
14791  482F
14792  4830
14793  4831
14794  4832
14795  4833
14796  4834
14797  4835
14798  4836
14799  4837
14800  4838
14801  4839
14802  483A
14803  483B
14804  483C
14805  483D
14806  483E
14807  483F
14808  4840
14809  4841
014810  000541        
014811  000542  var hFonts[54] ;
014812  000543  var stringsCV[54] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
14813  2490
14814  2491
14815  2492
14816  2493
14817  2494
14818  2495
14819  2496
14820  2497
14821  2498
14822  2499
14823  249A
14824  249B
14825  249C
14826  249D
14827  249E
14828  249F
14829  24A0
14830  24A1
14831  24A2
14832  24A3
14833  24A4
14834  24A5
14835  24A6
14836  24A7
14837  24A8
14838  24A9
14839  24AA
14840  24AB
14841  24AC
14842  24AD
14843  24AE
14844  24AF
14845  24B0
14846  24B1
14847  24B2
14848  24B3
14849  24B4
14850  24B5
14851  24B6
14852  24B7
14853  24B8
14854  24B9
14855  24BA
14856  24BB
14857  24BC
14858  24BD
14859  24BE
14860  24BF
14861  24C0
14862  24C1
14863  24C2
14864  24C3
14865  24C4
14866  24C5
14867  24C6
14868  24C7
14869  24C8
14870  24C9
14871  24CA
14872  24CB
14873  24CC
14874  24CD
14875  24CE
14876  24CF
14877  24D0
14878  24D1
14879  24D2
14880  24D3
14881  24D4
14882  24D5
14883  24D6
14884  24D7
14885  24D8
14886  24D9
14887  24DA
14888  24DB
14889  24DC
14890  24DD
14891  24DE
14892  24DF
14893  24E0
14894  24E1
14895  24E2
14896  24E3
14897  24E4
14898  24E5
14899  24E6
14900  24E7
14901  24E8
14902  24E9
14903  24EA
14904  24EB
14905  24EC
14906  24ED
14907  24EE
14908  24EF
14909  24F0
14910  24F1
14911  24F2
14912  24F3
14913  24F4
14914  24F5
14915  24F6
14916  24F7
14917  24F8
14918  24F9
14919  24FA
14920  24FB
014921  000544  // Start P2.inc
014922  000545  var oObjects[MaxTotObjects+1] ;                 // address of objects
014923  000546  var CurrentForm ;
014924  000547  var TouchXpos, TouchYpos ;
014925  000548  var InputType, TouchState, CurInputData, pInputIndex ;
014926  000549  var comRX[40], cmd[CMDLenMAX] ;
014927  000550        
014928  000551  var InputCS, OutputCS ;
014929  000552        
014930  000553        
014931  000554        
014932  000555  func seroutCS(var op)
014933  000556      serout(op) ;
014934  000557      OutputCS ^= op ;
014935  000558  endfunc
014936  000559        
014937  000560  func nak0()
014938  000561      serout(NAK) ;
014939  000562      InputCS := 0 ;
014940  000563  endfunc
014941  000564        
014942  000565  func seroutOcs()
014943  000566      serout(OutputCS) ;
014944  000567      OutputCS := 0 ;
014945  000568  endfunc
014946  000569        
014947  000570  func SendReport(var id, var objt, var objn, var val)
014948  000571      seroutCS(id) ;
014949  000572      seroutCS(objt) ;
014950  000573      seroutCS(objn) ;
014951  000574      seroutCS(val >> 8) ; // first 8 bits
014952  000575      seroutCS(val) ;
014953  000576      seroutOcs() ;
014954  000577  endfunc
014955  000578        
014956  000579        
014957  000580  func ReadObject(var ObjectType, var ObjectIdx)
014958  000581      var j, k, Objects ;
014959  000582      Objects := *(oObjects+ObjectType) ;
014960  000583        
014961  000584      j := 2 + ObjectIdx * 2 + Objects ;
014962  000585       if (ObjectType == tForm)
014963  000586          k := CurrentForm ;
014964  000587      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
014965  000588          k := img_GetWord(hndl, *j, IMAGE_TAG2);
014966  000589      else if (ObjectType == tStrings)
014967  000590          k := stringsCV[ObjectIdx];
014968  000591          else
014969  000592          k := img_GetWord(hndl, *j, IMAGE_INDEX);
014970  000593          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
014971  000594                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
014972  000595      endif
014973  000596      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
014974  000597  endfunc
014975  000598        
014976  000599        
014977  000600  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
014978  000601      var i, j, k, Objects ;
014979  000602      ObjectType &= 0x3f ;
014980  000603      if (ObjectType == tForm)
014981  000604          ActivateForm(ObjectIdx) ;
014982  000605      else
014983  000606          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
014984  000607          i := *(Objects) ;
014985  000608          switch (ObjectType)
014986  000609              case tWinButton :
014987  000610                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
014988  000611                  break ;
014989  000612              case tUserButton :
014990  000613                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
014991  000614                  break ;
014992  000615              default : j := -1 ;
014993  000616          endswitch
014994  000617          if (j != -1)
014995  000618              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
014996  000619              NewVal := NewVal << 1 ;
014997  000620              if (OVF())      // button group index change
014998  000621                  if (*(j+InputData+Ofs_IPD_P1))
014999  000622                      k &= 1 ;    // mask off old group index for momentary
015000  000623                  else
015001  000624                      k &= 3 ;    // mask off old group index for toggle
015002  000625                  endif
015003  000626              else            // normal set
015004  000627                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
015005  000628                  k &= 0xfffc ;    // retain only group index for state set
015006  000629              endif
015007  000630              NewVal |= k ;
015008  000631          endif
015009  000632           if (ObjectType == tLeddigits)
015010  000633              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
015011  000634              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015012  000635          else if (ObjectType == tStrings)
015013  000636              PrintStrings(ObjectIdx, NewVal, 0);
015014  000637          else
015015  000638              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
015016  000639              img_Show(hndl, i) ; // will only display if form is current
015017  000640          endif
015018  000641      endif
015019  000642  endfunc
015020  000643        
015021  000644  func TurnOffButtons(var group)
015022  000645      var j, k, l;
015023  000646      for (j := 0; j < nInputs; j++)
015024  000647          k := j*IPDatasize ;
015025  000648          if (*(InputData+k+Ofs_IPD_P2) == group)
015026  000649              l := -1 ;
015027  000650               if (*(InputData+k) == tWinButton)
015028  000651                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015029  000652                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
015030  000653                  img_Show(hndl, l);      // only shows on current form
015031  000654              else if (*(InputData+k) == tUserButton)
015032  000655                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015033  000656                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
015034  000657                  img_Show(hndl, l);      // only shows on current form
015035  000658              endif
015036  000659          endif
015037  000660      next
015038  000661  endfunc
015039  000662        
015040  000663        
015041  000664  // WARNING, this code will crash if newval exceeds maximum displayable number
015042  000665  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
015043  000666      var i, j, k, l, lb, newval ;
015044  000667      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
015045  000668      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
015046  000669      i := -1 ;
015047  000670      j := *(typeptr) ;
015048  000671      repeat
015049  000672          typeptr += 2 ;
015050  000673          i++ ;
015051  000674          until (*(typeptr) == imgidx);
015052  000675      j := setptr + i*10 ;
015053  000676        
015054  000677      imgidx++ ;
015055  000678      l := 1 ;
015056  000679      for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
015057  000680          l *= 10 ;
015058  000681      next
015059  000682      lb := *(j+Ofs_Digits_LeadingBlanks) ;
015060  000683      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
015061  000684          k := newval / l ;
015062  000685          newval -= k * l ;
015063  000686          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
015064  000687              if (k == 0)
015065  000688                  k := 10 ;
015066  000689              else
015067  000690                  lb := 0 ;
015068  000691              endif
015069  000692          endif
015070  000693          l /= 10 ;
015071  000694          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
015072  000695          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
015073  000696          img_Show(hndl, imgidx);
015074  000697      next
015075  000698  endfunc
015076  000699        
015077  000700        
015078  000701  func ActivateForm(var newform)
015079  000702      var i, j, *p ;
015080  000703        
015081  000704      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
015082  000705          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
015083  000706              if (img_GetWord(hndl, i, IMAGE_TAG))
015084  000707                  img_Disable(hndl,i) ;
015085  000708              endif
015086  000709          next
015087  000710      endif
015088  000711      CurrentForm := newform ;
015089  000712      // display newform image or clear to image color
015090  000713      if (FormBGcolors[CurrentForm] != ColorBGimage)
015091  000714          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
015092  000715          gfx_Cls() ;
015093  000716          DoGFXObjects() ;                                    // display GFX 'widgets'
015094  000717      endif
015095  000718        
015096  000719      // enable inputs
015097  000720      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
015098  000721          j := img_GetWord(hndl, i, IMAGE_TAG) ;
015099  000722          if (j)
015100  000723              j-- ;
015101  000724              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
015102  000725              //if (j != tKeyboard)
015103  000726              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
015104  000727                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
015105  000728              endif
015106  000729              img_Show(hndl,i) ; // show initialy, if required
015107  000730              if (j == tForm)
015108  000731                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
015109  000732              else if (j == tLeddigits)
015110  000733                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015111  000734              endif
015112  000735          endif
015113  000736      next
015114  000737      for (i := 0; i < nStrings; i++)
015115  000738          if (stringsCV[i] != -1)
015116  000739              WriteObject(tStrings, i, stringsCV[i]) ;
015117  000740          endif
015118  000741      next
015119  000742        
015120  000743  endfunc
015121  000744        
015122  000745  func UpdateObjects(var newval)
015123  000746      var IPidx, otherOBJ ;
015124  000747      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
015125  000748        
015126  000749          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
015127  000750              img_Show(hndl, *(pInputIndex));      // only shows on current form
015128  000751          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
015129  000752              if (*(CurInputData+Ofs_IPD_P1))
015130  000753                  newval &= 1;
015131  000754              else
015132  000755                  newval &= 3;
015133  000756              endif
015134  000757              if (newval > 1) newval := 1;
015135  000758          endif
015136  000759          IPidx := *(CurInputData+TouchState) ;
015137  000760          while(IPidx != 0)
015138  000761              otherOBJ := IPidx + InputData;
015139  000762              if (*(otherOBJ) == OT_REPORT)
015140  000763          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
015141  000764              else if (*(otherOBJ) == OT_MAGIC)
015142  000765                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
015143  000766                  IPidx(newval) ;
015144  000767              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
015145  000768                  if (*(otherOBJ) == OT_ACTIVATE)
015146  000769                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
015147  000770                      InputType := tForm ;
015148  000771                  else if (*(otherOBJ) == OT_SETCONST)
015149  000772                      newval := *(otherOBJ+Ofs_IPD_P3) ;
015150  000773                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015151  000774                  else if (*(otherOBJ) == OT_SETANOTHER)
015152  000775                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015153  000776                  else if (*(otherOBJ) == OT_PREVFRAME)
015154  000777                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
015155  000778                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
015156  000779                      endif
015157  000780                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015158  000781                  else if (*(otherOBJ) == OT_NEXTFRAME)
015159  000782                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
015160  000783                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
015161  000784                      endif
015162  000785                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015163  000786                  else if (*(otherOBJ) == OT_PREVSTRING)
015164  000787                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
015165  000788                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
015166  000789                      endif
015167  000790                  else if (*(otherOBJ) == OT_NEXTSTRING)
015168  000791                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
015169  000792                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
015170  000793                      endif
015171  000794                  endif
015172  000795              endif
015173  000796              IPidx := *(otherOBJ+TouchState) ;
015174  000797          wend
015175  000798      endif
015176  000799  endfunc
015177  000800        
015178  000801  // End P2.inc
015179  000802  func DoGFXObjects()
015180  000803  endfunc
015181  000804        
015182  000805  // Start P3.inc
015183  000806  func main()
015184  000807      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
015185  000808        
015186  000809      putstr("Mounting...\n");
015187  000810      if (!(file_Mount()))
015188  000811          while(!(file_Mount()))
015189  000812              putstr("Drive not mounted...");
015190  000813              pause(200);
015191  000814              gfx_Cls();
015192  000815              pause(200);
015193  000816          wend
015194  000817      endif
015195  000818  //    gfx_MoveTo(0, 0);
015196  000819  //    print(mem_Heap()," ") ;
015197  000820  //    gfx_TransparentColour(0x0020);
015198  000821  //    gfx_Transparency(ON);
015199  000822        
015200  000823      gfx_ScreenMode(LANDSCAPE) ;
015201  000824        
015202  000825      // open image control
015203  000826      hndl := file_LoadImageControl("RepRap_T.dat", "RepRap_T.gci", 1);
015204  000827        
015205  000828      // init 'constants'
015206  000829  // End P3.inc
015207  000830        
015208  000831      oObjects[tDipSwitch] := oDipSwitchs ;
015209  000832      oObjects[tKnob] := oKnobs ;
015210  000833      oObjects[tRockerSwitch] := oRockerSwitchs ;
015211  000834      oObjects[tRotarySwitch] := oRotarySwitchs ;
015212  000835      oObjects[tGSlider] := oGSliders ;
015213  000836      oObjects[tTrackbar] := oTrackbars ;
015214  000837      oObjects[tWinButton] := oWinButtons ;
015215  000838      oObjects[tAngularmeter] := oAngularmeters ;
015216  000839      oObjects[tCoolgauge] := oCoolgauges ;
015217  000840      oObjects[tCustomdigits] := oCustomdigitss ;
015218  000841      oObjects[tForm] := oForms ;
015219  000842      oObjects[tGauge] := oGauges ;
015220  000843      oObjects[tImage] := oImages ;
015221  000844      oObjects[tKeyboard] := oKeyboards ;
015222  000845      oObjects[tLed] := oLeds ;
015223  000846      oObjects[tLeddigits] := oLeddigitss ;
015224  000847      oObjects[tMeter] := oMeters ;
015225  000848      oObjects[tStrings] := oStringss ;
015226  000849      oObjects[tThermometer] := oThermometers ;
015227  000850      oObjects[tUserled] := oUserleds ;
015228  000851      oObjects[tVideo] := oVideos ;
015229  000852      oObjects[tStaticText] := oStaticTexts ;
015230  000853      oObjects[tSounds] := oSoundss ;
015231  000854      oObjects[tTimer] := oTimers ;
015232  000855      oObjects[tSpectrum] := oSpectrums ;
015233  000856      oObjects[tTank] := oTanks ;
015234  000857      oObjects[tUserImages] := oUserImagess ;
015235  000858      oObjects[tPinOutput] := oPinOutputs ;
015236  000859      oObjects[tPinInput] := oPinInputs ;
015237  000860      oObjects[t4Dbutton] := o4Dbuttons ;
015238  000861      oObjects[tAniButton] := oAniButtons ;
015239  000862      oObjects[tColorPicker] := oColorPickers ;
015240  000863      oObjects[tUserButton] := oUserButtons ;
015241  000864      hFonts[0] := file_LoadImageControl("RepRap_T.d04", "RepRap_T.g04", 1)  ;
015242  000865      hFonts[1] := file_LoadImageControl("RepRap_T.d02", "RepRap_T.g02", 1)  ;
015243  000866      hFonts[2] := file_LoadImageControl("RepRap_T.d03", "RepRap_T.g03", 1)  ;
015244  000867      hFonts[3] := file_LoadImageControl("RepRap_T.d01", "RepRap_T.g01", 1)  ;
015245  000868      hFonts[4] := FONT3 ;
015246  000869      hFonts[5] := file_LoadImageControl("RepRap_T.d0@", "RepRap_T.g0@", 1)  ;
015247  000870      hFonts[6] := FONT3 ;
015248  000871      hFonts[10] := file_LoadImageControl("RepRap_T.d0B", "RepRap_T.g0B", 1)  ;
015249  000872      hFonts[11] := file_LoadImageControl("RepRap_T.d07", "RepRap_T.g07", 1)  ;
015250  000873      hFonts[12] := file_LoadImageControl("RepRap_T.d06", "RepRap_T.g06", 1)  ;
015251  000874      hFonts[16] := FONT3 ;
015252  000875      hFonts[17] := file_LoadImageControl("RepRap_T.d0C", "RepRap_T.g0C", 1)  ;
015253  000876      hFonts[31] := file_LoadImageControl("RepRap_T.d08", "RepRap_T.g08", 1)  ;
015254  000877      hFonts[37] := file_LoadImageControl("RepRap_T.d05", "RepRap_T.g05", 1)  ;
015255  000878      hFonts[50] := file_LoadImageControl("RepRap_T.d09", "RepRap_T.g09", 1)  ;
015256  000879      hFonts[51] := FONT3 ;
015257  000880      hFonts[52] := FONT3 ;
015258  000881      hFonts[7] := hFonts[37] ;
015259  000882      hFonts[8] := hFonts[37] ;
015260  000883      hFonts[9] := hFonts[0] ;
015261  000884      hFonts[29] := hFonts[11] ;
015262  000885      hFonts[32] := hFonts[31] ;
015263  000886      hFonts[34] := hFonts[0] ;
015264  000887      hFonts[36] := hFonts[0] ;
015265  000888      hFonts[38] := hFonts[37] ;
015266  000889      hFonts[39] := hFonts[37] ;
015267  000890      hFonts[40] := hFonts[0] ;
015268  000891      hFonts[41] := hFonts[0] ;
015269  000892      hFonts[42] := hFonts[0] ;
015270  000893      hFonts[43] := hFonts[37] ;
015271  000894      hFonts[44] := hFonts[37] ;
015272  000895      hFonts[45] := hFonts[37] ;
015273  000896      hFonts[53] := hFonts[50] ;
015274  000897      WriteObject(tUserButton, 155, 1) ;
015275  000898  // Start P4.inc
015276  000899      hstrings := file_Open("RepRap_T.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
015277  000900      // init comms
015278  000901      com_Init(comRX,CMDLenMAX,0);
015279  000902      com_SetBaud(COM0,19886);
015280  000903      com_TXbuffer(comTX, 100, 0);
015281  000904      snd_BufSize(2) ;
015282  000905      // tag 'real' objects
015283  000906      for (i := 0; i <= MaxTotObjects; i++)
015284  000907          if (   (i != tSounds)
015285  000908              && (i != tTimer)
015286  000909              && (i != tPinOutput)
015287  000910              && (i != tPinInput) )
015288  000911              TouchXpos := oObjects[i] ;
015289  000912              TouchYpos := *(TouchXpos) ;
015290  000913              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
015291  000914                  oldn := *(TouchXpos+ImageTouched*2) ;
015292  000915                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
015293  000916                  if (oldn != -1)
015294  000917                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
015295  000918                      img_Disable(hndl, oldn) ;
015296  000919                  endif
015297  000920              next
015298  000921          endif
015299  000922      next
015300  000923        
015301  000924      // display initial form
015302  000925      CurrentForm := -1 ;
015303  000926      ActivateForm(0) ; // need to change this according to first actual form
015304  000927        
015305  000928  // End P4.inc
015306  000929  // Start P5.inc
015307  000930      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
015308  000931      oldn := -1 ;
015309  000932      repeat
015310  000933        
015311  000934          // check comms for command, how to NAK invalid command
015312  000935          if (com_Count() != 0)
015313  000936              i := serin() ;
015314  000937              InputCS ^= i ;               // update checksum
015315  000938              if (   (cmdi > 2)
015316  000939                  && (cmd[0] == WRITE_STRU) )
015317  000940                  j := (cmdi-1) >> 1 + 2 ;
015318  000941                  if (j == CMDLenMAX)    // max length exceeded
015319  000942                      nak0() ;
015320  000943                      cmdi := -1 ;
015321  000944                  else if (cmdi & 1)
015322  000945                      cmd[j] := i ;
015323  000946                      if (cmd[2] == 0)    // if string complete
015324  000947                          if (InputCS)
015325  000948                              nak0() ;
015326  000949                          else
015327  000950                              if (cmd[0] == WRITE_STRU)
015328  000951                              cmd[j] := 0 ;                     // terminate it
015329  000952                              PrintStrings(cmd[1], &cmd[3], 1) ;
015330  000953                              serout(ACK) ;
015331  000954                              else
015332  000955                              endif
015333  000956                          endif
015334  000957                          cmdi := -1 ;
015335  000958                      endif
015336  000959                  else
015337  000960                      cmd[j] := cmd[j] << 8 + i ;
015338  000961                      cmd[2]-- ;          // dec length
015339  000962                  endif
015340  000963                  cmdi++ ;
015341  000964              else // not unicode string
015342  000965                  cmd[cmdi++] := i ;
015343  000966                   if (cmd[0] == WRITE_STR)                  // Ansi String
015344  000967                      if (cmdi == CMDLenMAX)      // max length exceeded
015345  000968                          nak0() ;
015346  000969                          cmdi := 0 ;
015347  000970                      else if (cmdi > 2)
015348  000971                          if (cmd[2] == -1)
015349  000972                              if (InputCS)
015350  000973                                  nak0() ;
015351  000974                              else
015352  000975                                  if (cmd[0] == WRITE_STR)
015353  000976                                  cmd[cmdi-1] := 0 ;                     // terminate it
015354  000977                                  PrintStrings(cmd[1], &cmd[3], 1) ;
015355  000978                                  serout(ACK) ;
015356  000979                                  else
015357  000980                                  endif
015358  000981                              endif
015359  000982                              cmdi := 0 ;
015360  000983                          else
015361  000984                              cmd[2]-- ;          // dec length
015362  000985                          endif
015363  000986                      endif
015364  000987                  else if (   (cmd[0] == READ_OBJ)
015365  000988                           && (cmdi == 4)         )
015366  000989                      if (InputCS)
015367  000990                          nak0() ;
015368  000991                      else
015369  000992                          ReadObject(cmd[1], cmd[2]) ;
015370  000993                      endif
015371  000994                      cmdi := 0 ;
015372  000995                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
015373  000996                           && (cmdi == 6)          )
015374  000997                      if (InputCS)
015375  000998                          nak0() ;
015376  000999                      else
015377  001000                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
015378  001001                          serout(ACK) ;
015379  001002                      endif
015380  001003                      cmdi := 0 ;
015381  001004                  else if (   (cmd[0] == WRITE_CONTRAST)
015382  001005                           && (cmdi == 3)         )
015383  001006                      if (InputCS)
015384  001007                          nak0() ;
015385  001008                      else
015386  001009                          gfx_Contrast(cmd[1]) ;
015387  001010                          serout(ACK) ;
015388  001011                      endif
015389  001012                      cmdi := 0 ;
015390  001013                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
015391  001014                      nak0() ;
015392  001015                      cmdi := 0 ;
015393  001016                  endif
015394  001017              endif   // not unicode string
015395  001018          endif   // a character is available
015396  001019        
015397  001020        
015398  001021      // touch code processing
015399  001022        
015400  001023          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
015401  001024          ImageTouched := img_Touched(hndl,-1) ;
015402  001025          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
015403  001026              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
015404  001027                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
015405  001028              endif
015406  001029              if (TouchStatus != TOUCH_RELEASED)        // if not released
015407  001030                  if (oldn != -1)
015408  001031                      ImageTouched := oldn ;
015409  001032                  else
015410  001033                      if (oldn != ImageTouched)
015411  001034                  oldn := ImageTouched ;
015412  001035                          TouchStatus := TOUCH_PRESSED ;
015413  001036                      endif
015414  001037                  endif
015415  001038                  TouchXpos  := touch_Get(TOUCH_GETX);
015416  001039                  TouchYpos  := touch_Get(TOUCH_GETY);
015417  001040                  TouchState := Ofs_IPD_DOWN ;
015418  001041              else
015419  001042                  ImageTouched := oldn ;                     // simulate release of what we touched
015420  001043                  oldn := -1 ;                    // prevent double release
015421  001044                  TouchState := Ofs_IPD_RELEASE ;
015422  001045              endif
015423  001046              if (ImageTouched != -1)
015424  001047                          CurInputData := InputControls[ImageTouched] + InputData;
015425  001048                          InputType := *(CurInputData) ;
015426  001049                          i := InputType ;
015427  001050                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
015428  001051                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
015429  001052              endif
015430  001053          endif
015431  001054   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
015432  001055        
015433  001056          sys_EventsResume() ;
015434  001057      forever
015435  001058        
015436  001059  cDipswitch:
015437  001060        
015438  001061  cKnob:
015439  001062        
015440  001063  cRockerswitch:
015441  001064        
015442  001065  cRotaryswitch:
015443  001066        
015444  001067  cSlider:
015445  001068  cTrackbar:
015446  001069        
015447  001070  c4DButton:
015448  001071  cUserButton:
015449  001072      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
015450  001073      goto gbutton ;
015451  001074  cWinbutton:
015452  001075      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
015453  001076  gbutton:
015454  001077      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
015455  001078      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
015456  001079          if (TouchStatus == TOUCH_RELEASED)
015457  001080              i &= 0xfffe ;
015458  001081              TouchState == Ofs_IPD_DOWN ;
015459  001082          else
015460  001083              i |= 1 ;
015461  001084              TouchState == Ofs_IPD_RELEASE ;
015462  001085          endif
015463  001086      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
015464  001087          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
015465  001088              if ((i & 3) == 3)
015466  001089                  i &= 0xfffc ;
015467  001090              else
015468  001091                  i++ ;
015469  001092              endif
015470  001093          else
015471  001094              i |= 1 ;                                      // make down regardless of current state
015472  001095          endif
015473  001096      else                        // group action, up all other buttons on touch press, reports 0 for button down
015474  001097          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
015475  001098              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
015476  001099          endif
015477  001100          i := (i & 0xfffc) | 2 ;
015478  001101      endif
015479  001102        
015480  001103      UpdateObjects(i) ;
015481  001104  endsub ;
015482  001105        
015483  001106  cAniButton:
015484  001107        
015485  001108  cColorPicker:
015486  001109        
015487  001110  endfunc
015488  001111  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 766 file:RepRap_Touchv1.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 702 file:RepRap_Touchv1.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       12364  0x0000304c (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 90)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (not used)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  382  0x0000017e (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 123)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                302  0x0000012e (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         298  0x0000012a (mem) word (global)  (usage 27)
CurrentForm                          288  0x00000120 (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (not used)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (usage 6)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       11732  0x00002dd4 (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 39)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (usage 15)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                        9119  0x0000239fFormBGcolors                        9119  0x0000239f (mem) word[50] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                         107  0x0000006bFormEndIndex                         107  0x0000006b (mem) word[50] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[50] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[54] (global)  (usage 150)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             218  0x000000da (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm0                                 0  0x00000000 (const ??? 0)  (usage 3)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                               91  0x0000005b (const ??? 0)  (usage 3)
iForm11                               77  0x0000004d (const ??? 0)  (usage 3)
iForm12                               46  0x0000002e (const ??? 0)  (usage 3)
iForm14                               47  0x0000002f (const ??? 0)  (usage 3)
iForm16                              154  0x0000009a (const ??? 0)  (usage 3)
iForm18                              159  0x0000009f (const ??? 0)  (usage 3)
iForm19                               54  0x00000036 (const ??? 0)  (usage 3)
iForm2                                 4  0x00000004 (const ??? 0)  (usage 3)
iForm20                               57  0x00000039 (const ??? 0)  (usage 3)
iForm21                               61  0x0000003d (const ??? 0)  (usage 3)
iForm22                              207  0x000000cf (const ??? 0)  (usage 3)
iForm23                               65  0x00000041 (const ??? 0)  (usage 3)
iForm24                               69  0x00000045 (const ??? 0)  (usage 3)
iForm26                               73  0x00000049 (const ??? 0)  (usage 3)
iForm27                               79  0x0000004f (const ??? 0)  (usage 3)
iForm28                              101  0x00000065 (const ??? 0)  (usage 3)
iForm29                              108  0x0000006c (const ??? 0)  (usage 3)
iForm30                              117  0x00000075 (const ??? 0)  (usage 3)
iForm31                              121  0x00000079 (const ??? 0)  (usage 3)
iForm32                              125  0x0000007d (const ??? 0)  (usage 3)
iForm33                              129  0x00000081 (const ??? 0)  (usage 3)
iForm34                              141  0x0000008d (const ??? 0)  (usage 3)
iForm35                              145  0x00000091 (const ??? 0)  (usage 3)
iForm36                              211  0x000000d3 (const ??? 0)  (usage 3)
iForm37                              213  0x000000d5 (const ??? 0)  (usage 3)
iForm38                              161  0x000000a1 (const ??? 0)  (usage 3)
iForm39                              216  0x000000d8 (const ??? 0)  (usage 3)
iForm4                                 9  0x00000009 (const ??? 0)  (usage 3)
iForm40                              172  0x000000ac (const ??? 0)  (usage 3)
iForm41                              175  0x000000af (const ??? 0)  (usage 3)
iForm42                              220  0x000000dc (const ??? 0)  (usage 3)
iForm45                              224  0x000000e0 (const ??? 0)  (usage 3)
iForm46                              228  0x000000e4 (const ??? 0)  (usage 3)
iForm5                                14  0x0000000e (const ??? 0)  (usage 3)
iForm6                                17  0x00000011 (const ??? 0)  (usage 3)
iForm7                               149  0x00000095 (const ??? 0)  (usage 3)
iForm9                                42  0x0000002a (const ??? 0)  (usage 3)
iiLeddigits0                          31  0x0000001f (const ??? 0)  (not used)
iiLeddigits1                          33  0x00000021 (const ??? 0)  (not used)
iiLeddigits2                          35  0x00000023 (const ??? 0)  (not used)
iLeddigits0                           30  0x0000001e (const ??? 0)  (usage 3)
iLeddigits1                           32  0x00000020 (const ??? 0)  (usage 3)
iLeddigits2                           34  0x00000022 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        207  0x000000cfInputControls                        207  0x000000cf (mem) word[250] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
InputCS                              542  0x0000021e (mem) word (global)  (usage 21)
InputData                            707  0x000002c3InputData                            707  0x000002c3 (mem) word[3410] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 30)
InputType                            294  0x00000126 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                          70  0x00000046 (const ??? 0)  (usage 3)
iStatictext1                          36  0x00000024 (const ??? 0)  (usage 3)
iStatictext10                         51  0x00000033 (const ??? 0)  (usage 3)
iStatictext11                        178  0x000000b2 (const ??? 0)  (usage 3)
iStatictext12                        190  0x000000be (const ??? 0)  (usage 3)
iStatictext13                        174  0x000000ae (const ??? 0)  (usage 3)
iStatictext14                        234  0x000000ea (const ??? 0)  (usage 3)
iStatictext15                        192  0x000000c0 (const ??? 0)  (usage 3)
iStatictext16                        198  0x000000c6 (const ??? 0)  (usage 3)
iStatictext17                        196  0x000000c4 (const ??? 0)  (usage 3)
iStatictext18                        202  0x000000ca (const ??? 0)  (usage 3)
iStatictext19                         53  0x00000035 (const ??? 0)  (usage 3)
iStatictext2                          37  0x00000025 (const ??? 0)  (usage 3)
iStatictext20                        204  0x000000cc (const ??? 0)  (usage 3)
iStatictext21                        205  0x000000cd (const ??? 0)  (usage 3)
iStatictext22                        197  0x000000c5 (const ??? 0)  (usage 3)
iStatictext23                        203  0x000000cb (const ??? 0)  (usage 3)
iStatictext24                        232  0x000000e8 (const ??? 0)  (usage 3)
iStatictext25                        239  0x000000ef (const ??? 0)  (usage 3)
iStatictext26                        240  0x000000f0 (const ??? 0)  (usage 3)
iStatictext27                        245  0x000000f5 (const ??? 0)  (usage 3)
iStatictext28                        246  0x000000f6 (const ??? 0)  (usage 3)
iStatictext29                        250  0x000000fa (const ??? 0)  (usage 3)
iStatictext3                          76  0x0000004c (const ??? 0)  (usage 3)
iStatictext30                        251  0x000000fb (const ??? 0)  (usage 3)
iStatictext4                          38  0x00000026 (const ??? 0)  (usage 3)
iStatictext5                         157  0x0000009d (const ??? 0)  (usage 3)
iStatictext6                         173  0x000000ad (const ??? 0)  (usage 3)
iStatictext7                         152  0x00000098 (const ??? 0)  (usage 3)
iStatictext8                          63  0x0000003f (const ??? 0)  (usage 3)
iStatictext9                          52  0x00000034 (const ??? 0)  (usage 3)
iStrings0                           7527  0x00001d67iStrings0                           7527  0x00001d67 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings1                           7553  0x00001d81iStrings1                           7553  0x00001d81 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings10                          7787  0x00001e6biStrings10                          7787  0x00001e6b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings11                          7813  0x00001e85iStrings11                          7813  0x00001e85 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings12                          7839  0x00001e9fiStrings12                          7839  0x00001e9f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings16                          7865  0x00001eb9iStrings16                          7865  0x00001eb9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings17                          7891  0x00001ed3iStrings17                          7891  0x00001ed3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings2                           7579  0x00001d9biStrings2                           7579  0x00001d9b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings29                          7917  0x00001eediStrings29                          7917  0x00001eed (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings3                           7605  0x00001db5iStrings3                           7605  0x00001db5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings31                          7943  0x00001f07iStrings31                          7943  0x00001f07 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings32                          7969  0x00001f21iStrings32                          7969  0x00001f21 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings34                          7995  0x00001f3biStrings34                          7995  0x00001f3b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings36                          8021  0x00001f55iStrings36                          8021  0x00001f55 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings37                          8047  0x00001f6fiStrings37                          8047  0x00001f6f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings38                          8073  0x00001f89iStrings38                          8073  0x00001f89 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings39                          8099  0x00001fa3iStrings39                          8099  0x00001fa3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings4                           7631  0x00001dcfiStrings4                           7631  0x00001dcf (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings40                          8125  0x00001fbdiStrings40                          8125  0x00001fbd (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings41                          8151  0x00001fd7iStrings41                          8151  0x00001fd7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings42                          8177  0x00001ff1iStrings42                          8177  0x00001ff1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings43                          8203  0x0000200biStrings43                          8203  0x0000200b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings44                          8229  0x00002025iStrings44                          8229  0x00002025 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings45                          8255  0x0000203fiStrings45                          8255  0x0000203f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings5                           7657  0x00001de9iStrings5                           7657  0x00001de9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings50                          8281  0x00002059iStrings50                          8281  0x00002059 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings51                          8307  0x00002073iStrings51                          8307  0x00002073 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings52                          8333  0x0000208diStrings52                          8333  0x0000208d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings53                          8359  0x000020a7iStrings53                          8359  0x000020a7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings6                           7683  0x00001e03iStrings6                           7683  0x00001e03 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings7                           7709  0x00001e1diStrings7                           7709  0x00001e1d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings8                           7735  0x00001e37iStrings8                           7735  0x00001e37 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings9                           7761  0x00001e51iStrings9                           7761  0x00001e51 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                        153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton100                        88  0x00000058 (const ??? 0)  (usage 3)
iUserbutton101                        89  0x00000059 (const ??? 0)  (usage 3)
iUserbutton102                       130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton103                       131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton104                       132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton105                       133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton106                       134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton107                       135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton108                       136  0x00000088 (const ??? 0)  (usage 3)
iUserbutton109                       137  0x00000089 (const ??? 0)  (usage 3)
iUserbutton11                        102  0x00000066 (const ??? 0)  (usage 3)
iUserbutton110                       138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton111                       139  0x0000008b (const ??? 0)  (usage 3)
iUserbutton112                       142  0x0000008e (const ??? 0)  (usage 3)
iUserbutton113                       143  0x0000008f (const ??? 0)  (usage 3)
iUserbutton114                       144  0x00000090 (const ??? 0)  (usage 3)
iUserbutton115                       146  0x00000092 (const ??? 0)  (usage 3)
iUserbutton116                       147  0x00000093 (const ??? 0)  (usage 3)
iUserbutton117                       148  0x00000094 (const ??? 0)  (usage 3)
iUserbutton118                        68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton119                       243  0x000000f3 (const ??? 0)  (usage 3)
iUserbutton12                         15  0x0000000f (const ??? 0)  (usage 3)
iUserbutton120                       165  0x000000a5 (const ??? 0)  (usage 3)
iUserbutton121                       166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton122                       167  0x000000a7 (const ??? 0)  (usage 3)
iUserbutton123                       168  0x000000a8 (const ??? 0)  (usage 3)
iUserbutton124                       169  0x000000a9 (const ??? 0)  (usage 3)
iUserbutton125                       170  0x000000aa (const ??? 0)  (usage 3)
iUserbutton126                       171  0x000000ab (const ??? 0)  (usage 3)
iUserbutton127                       244  0x000000f4 (const ??? 0)  (usage 3)
iUserbutton128                       247  0x000000f7 (const ??? 0)  (usage 3)
iUserbutton129                       248  0x000000f8 (const ??? 0)  (usage 3)
iUserbutton13                         16  0x00000010 (const ??? 0)  (usage 3)
iUserbutton130                       249  0x000000f9 (const ??? 0)  (usage 3)
iUserbutton131                       238  0x000000ee (const ??? 0)  (usage 3)
iUserbutton14                          7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton151                       183  0x000000b7 (const ??? 0)  (usage 3)
iUserbutton152                       184  0x000000b8 (const ??? 0)  (usage 3)
iUserbutton153                       185  0x000000b9 (const ??? 0)  (usage 3)
iUserbutton154                       186  0x000000ba (const ??? 0)  (usage 3)
iUserbutton155                       187  0x000000bb (const ??? 0)  (usage 3)
iUserbutton156                       188  0x000000bc (const ??? 0)  (usage 3)
iUserbutton157                       189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton158                       158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton159                        21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton16                         45  0x0000002d (const ??? 0)  (usage 3)
iUserbutton160                       191  0x000000bf (const ??? 0)  (usage 3)
iUserbutton17                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton18                         43  0x0000002b (const ??? 0)  (usage 3)
iUserbutton19                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton2                          19  0x00000013 (const ??? 0)  (usage 3)
iUserbutton20                         90  0x0000005a (const ??? 0)  (usage 3)
iUserbutton21                         80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton22                         81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton23                         92  0x0000005c (const ??? 0)  (usage 3)
iUserbutton24                         93  0x0000005d (const ??? 0)  (usage 3)
iUserbutton25                         94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton26                        140  0x0000008c (const ??? 0)  (usage 3)
iUserbutton27                        193  0x000000c1 (const ??? 0)  (usage 3)
iUserbutton28                        194  0x000000c2 (const ??? 0)  (usage 3)
iUserbutton29                        195  0x000000c3 (const ??? 0)  (usage 3)
iUserbutton3                          29  0x0000001d (const ??? 0)  (usage 3)
iUserbutton30                        199  0x000000c7 (const ??? 0)  (usage 3)
iUserbutton31                        200  0x000000c8 (const ??? 0)  (usage 3)
iUserbutton32                         49  0x00000031 (const ??? 0)  (usage 3)
iUserbutton33                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton34                        179  0x000000b3 (const ??? 0)  (usage 3)
iUserbutton35                        201  0x000000c9 (const ??? 0)  (usage 3)
iUserbutton36                        206  0x000000ce (const ??? 0)  (usage 3)
iUserbutton37                        212  0x000000d4 (const ??? 0)  (usage 3)
iUserbutton38                        215  0x000000d7 (const ??? 0)  (usage 3)
iUserbutton39                        209  0x000000d1 (const ??? 0)  (usage 3)
iUserbutton4                           5  0x00000005 (const ??? 0)  (usage 3)
iUserbutton40                        218  0x000000da (const ??? 0)  (usage 3)
iUserbutton41                        155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton42                        222  0x000000de (const ??? 0)  (usage 3)
iUserbutton43                        235  0x000000eb (const ??? 0)  (usage 3)
iUserbutton44                        226  0x000000e2 (const ??? 0)  (usage 3)
iUserbutton45                        160  0x000000a0 (const ??? 0)  (usage 3)
iUserbutton46                        230  0x000000e6 (const ??? 0)  (usage 3)
iUserbutton47                        236  0x000000ec (const ??? 0)  (usage 3)
iUserbutton48                        237  0x000000ed (const ??? 0)  (usage 3)
iUserbutton49                        151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton5                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton50                         20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton51                         82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton52                         55  0x00000037 (const ??? 0)  (usage 3)
iUserbutton53                         62  0x0000003e (const ??? 0)  (usage 3)
iUserbutton54                        231  0x000000e7 (const ??? 0)  (usage 3)
iUserbutton55                        219  0x000000db (const ??? 0)  (usage 3)
iUserbutton56                        223  0x000000df (const ??? 0)  (usage 3)
iUserbutton57                        227  0x000000e3 (const ??? 0)  (usage 3)
iUserbutton58                        233  0x000000e9 (const ??? 0)  (usage 3)
iUserbutton59                        210  0x000000d2 (const ??? 0)  (usage 3)
iUserbutton6                          10  0x0000000a (const ??? 0)  (usage 3)
iUserbutton60                        241  0x000000f1 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        242  0x000000f2 (const ??? 0)  (usage 3)
iUserbutton63                         39  0x00000027 (const ??? 0)  (usage 3)
iUserbutton64                        162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton65                        163  0x000000a3 (const ??? 0)  (usage 3)
iUserbutton66                         66  0x00000042 (const ??? 0)  (usage 3)
iUserbutton67                        176  0x000000b0 (const ??? 0)  (usage 3)
iUserbutton68                         67  0x00000043 (const ??? 0)  (usage 3)
iUserbutton69                         71  0x00000047 (const ??? 0)  (usage 3)
iUserbutton7                          11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton70                        164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton71                         74  0x0000004a (const ??? 0)  (usage 3)
iUserbutton72                         83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton73                         95  0x0000005f (const ??? 0)  (usage 3)
iUserbutton74                        180  0x000000b4 (const ??? 0)  (usage 3)
iUserbutton75                         58  0x0000003a (const ??? 0)  (usage 3)
iUserbutton76                         59  0x0000003b (const ??? 0)  (usage 3)
iUserbutton77                         60  0x0000003c (const ??? 0)  (usage 3)
iUserbutton78                         96  0x00000060 (const ??? 0)  (usage 3)
iUserbutton79                         97  0x00000061 (const ??? 0)  (usage 3)
iUserbutton8                          12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton80                         98  0x00000062 (const ??? 0)  (usage 3)
iUserbutton81                         99  0x00000063 (const ??? 0)  (usage 3)
iUserbutton82                        100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton83                        103  0x00000067 (const ??? 0)  (usage 3)
iUserbutton84                        109  0x0000006d (const ??? 0)  (usage 3)
iUserbutton85                        110  0x0000006e (const ??? 0)  (usage 3)
iUserbutton86                        111  0x0000006f (const ??? 0)  (usage 3)
iUserbutton87                        112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton88                        113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton89                        114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton9                          13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton90                        115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton91                        116  0x00000074 (const ??? 0)  (usage 3)
iUserbutton92                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton93                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton94                        122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton95                        126  0x0000007e (const ??? 0)  (usage 3)
iUserbutton96                         84  0x00000054 (const ??? 0)  (usage 3)
iUserbutton97                         85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton98                         86  0x00000056 (const ??? 0)  (usage 3)
iUserbutton99                         87  0x00000057 (const ??? 0)  (usage 3)
iUserimages0                         105  0x00000069 (const ??? 0)  (usage 3)
iUserimages1                          56  0x00000038 (const ??? 0)  (usage 3)
iUserimages10                         75  0x0000004b (const ??? 0)  (usage 3)
iUserimages11                        177  0x000000b1 (const ??? 0)  (usage 3)
iUserimages12                        156  0x0000009c (const ??? 0)  (usage 3)
iUserimages13                         64  0x00000040 (const ??? 0)  (usage 3)
iUserimages14                        106  0x0000006a (const ??? 0)  (usage 3)
iUserimages15                        107  0x0000006b (const ??? 0)  (usage 3)
iUserimages16                         72  0x00000048 (const ??? 0)  (usage 3)
iUserimages17                        181  0x000000b5 (const ??? 0)  (usage 3)
iUserimages18                        182  0x000000b6 (const ??? 0)  (usage 3)
iUserimages19                        208  0x000000d0 (const ??? 0)  (usage 3)
iUserimages2                          78  0x0000004e (const ??? 0)  (usage 3)
iUserimages20                        214  0x000000d6 (const ??? 0)  (usage 3)
iUserimages21                        217  0x000000d9 (const ??? 0)  (usage 3)
iUserimages22                        221  0x000000dd (const ??? 0)  (usage 3)
iUserimages23                        225  0x000000e1 (const ??? 0)  (usage 3)
iUserimages24                        229  0x000000e5 (const ??? 0)  (usage 3)
iUserimages3                         118  0x00000076 (const ??? 0)  (usage 3)
iUserimages4                         123  0x0000007b (const ??? 0)  (usage 3)
iUserimages5                         127  0x0000007f (const ??? 0)  (usage 3)
iUserimages6                         150  0x00000096 (const ??? 0)  (usage 3)
iUserimages7                         120  0x00000078 (const ??? 0)  (usage 3)
iUserimages8                         124  0x0000007c (const ??? 0)  (usage 3)
iUserimages9                         128  0x00000080 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                           22  0x00000016 (const ??? 0)  (usage 3)
iWinbutton1                           23  0x00000017 (const ??? 0)  (usage 3)
iWinbutton2                           24  0x00000018 (const ??? 0)  (usage 3)
iWinbutton3                           25  0x00000019 (const ??? 0)  (usage 3)
iWinbutton4                           26  0x0000001a (const ??? 0)  (usage 3)
iWinbutton5                           40  0x00000028 (const ??? 0)  (usage 3)
iWinbutton6                           41  0x00000029 (const ??? 0)  (usage 3)
iWinbutton7                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton8                           28  0x0000001c (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 9219  0x00002403kKeyboardKeystrokes                 9219  0x00002403 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   12710  0x000031a6 (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                                9785  0x00002639 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               13832  0x00003608 (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              310  0x00000136 (const dword)  (usage 3)
nObjects                             252  0x000000fc (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              54  0x00000036 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                          8783  0x0000224fo4Dbuttons                          8783  0x0000224f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAngularmeters                      8417  0x000020e1oAngularmeters                      8417  0x000020e1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAniButtons                         8785  0x00002251oAniButtons                         8785  0x00002251 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       8787  0x00002253oColorPickers                       8787  0x00002253 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCoolgauges                         8419  0x000020e3oCoolgauges                         8419  0x000020e3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCustomdigitss                      8421  0x000020e5oCustomdigitss                      8421  0x000020e5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oDipSwitchs                         8385  0x000020c1oDipSwitchs                         8385  0x000020c1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              8423  0x000020e7oForms                              8423  0x000020e7 (mem) word[51] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 15)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                             8525  0x0000214doGauges                             8525  0x0000214d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGSliders                           8393  0x000020c9oGSliders                           8393  0x000020c9 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oImages                             8527  0x0000214foImages                             8527  0x0000214f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKeyboards                          8529  0x00002151oKeyboards                          8529  0x00002151 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKnobs                              8387  0x000020c3oKnobs                              8387  0x000020c3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLedDigitsn                         9223  0x00002407oLedDigitsn                         9223  0x00002407 (mem) word[15] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
oLeddigitss                         8533  0x00002155oLeddigitss                         8533  0x00002155 (mem) word[4] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
oLeds                               8531  0x00002153oLeds                               8531  0x00002153 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             8541  0x0000215doMeters                             8541  0x0000215d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             220  0x000000dc (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                          8781  0x0000224doPinInputs                          8781  0x0000224d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oPinOutputs                         9117  0x0000239doPinOutputs                         9117  0x0000239d (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      8389  0x000020c5oRockerSwitchs                      8389  0x000020c5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oRotarySwitchs                      8391  0x000020c7oRotarySwitchs                      8391  0x000020c7 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oScopes                             8725  0x00002215oScopes                             8725  0x00002215 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
oSoundss                            9115  0x0000239boSoundss                            9115  0x0000239b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oSpectrums                          8723  0x00002213oSpectrums                          8723  0x00002213 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStaticTexts                        8659  0x000021d3oStaticTexts                        8659  0x000021d3 (mem) word[32] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStringss                           8543  0x0000215foStringss                           8543  0x0000215f (mem) word[55] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 90)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 393)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              8727  0x00002217oTanks                              8727  0x00002217 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oThermometers                       8653  0x000021cdoThermometers                       8653  0x000021cd (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTimers                             9113  0x00002399oTimers                             9113  0x00002399 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTrackbars                          8395  0x000020cboTrackbars                          8395  0x000020cb (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserButtons                        8789  0x00002255oUserButtons                        8789  0x00002255 (mem) word[162] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
oUserImagess                        8729  0x00002219oUserImagess                        8729  0x00002219 (mem) word[26] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserleds                           8655  0x000021cfoUserleds                           8655  0x000021cf (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             544  0x00000220 (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                             8657  0x000021d1oVideos                             8657  0x000021d1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                         8397  0x000020cdoWinButtons                         8397  0x000020cd (mem) word[10] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          300  0x0000012c (mem) word (global)  (usage 18)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       13867  0x0000362b (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         13579  0x0000350b (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                   9221  0x00002405rKeyboardRoutines                   9221  0x00002405 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         13765  0x000035c5 (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           13848  0x00003618 (User func) args[1] r=0  (usage 15)
seroutOcs                          13815  0x000035f7 (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           7  0x00000007 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      2560  0x00000a00 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                          5  0x00000005 (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         73  0x00000049 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         14  0x0000000e (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings13Size                          0  0x00000000 (const dword)  (not used)
Strings13StartH                        0  0x00000000 (const dword)  (not used)
Strings13StartL                        0  0x00000000 (const dword)  (not used)
Strings14Size                          0  0x00000000 (const dword)  (not used)
Strings14StartH                        0  0x00000000 (const dword)  (not used)
Strings14StartL                        0  0x00000000 (const dword)  (not used)
Strings15Size                          0  0x00000000 (const dword)  (not used)
Strings15StartH                        0  0x00000000 (const dword)  (not used)
Strings15StartL                        0  0x00000000 (const dword)  (not used)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings17Count                         0  0x00000000 (const dword)  (not used)
Strings17Size                          1  0x00000001 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings18Size                          0  0x00000000 (const dword)  (not used)
Strings18StartH                        0  0x00000000 (const dword)  (not used)
Strings18StartL                        0  0x00000000 (const dword)  (not used)
Strings19Size                          0  0x00000000 (const dword)  (not used)
Strings19StartH                        0  0x00000000 (const dword)  (not used)
Strings19StartL                        0  0x00000000 (const dword)  (not used)
Strings1Count                          1  0x00000001 (const dword)  (not used)
Strings1Size                          30  0x0000001e (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                       512  0x00000200 (const dword)  (usage 3)
Strings20Size                          0  0x00000000 (const dword)  (not used)
Strings20StartH                        0  0x00000000 (const dword)  (not used)
Strings20StartL                        0  0x00000000 (const dword)  (not used)
Strings21Size                          0  0x00000000 (const dword)  (not used)
Strings21StartH                        0  0x00000000 (const dword)  (not used)
Strings21StartL                        0  0x00000000 (const dword)  (not used)
Strings22Size                          0  0x00000000 (const dword)  (not used)
Strings22StartH                        0  0x00000000 (const dword)  (not used)
Strings22StartL                        0  0x00000000 (const dword)  (not used)
Strings23Size                          0  0x00000000 (const dword)  (not used)
Strings23StartH                        0  0x00000000 (const dword)  (not used)
Strings23StartL                        0  0x00000000 (const dword)  (not used)
Strings24Size                          0  0x00000000 (const dword)  (not used)
Strings24StartH                        0  0x00000000 (const dword)  (not used)
Strings24StartL                        0  0x00000000 (const dword)  (not used)
Strings25Size                          0  0x00000000 (const dword)  (not used)
Strings25StartH                        0  0x00000000 (const dword)  (not used)
Strings25StartL                        0  0x00000000 (const dword)  (not used)
Strings26Size                          0  0x00000000 (const dword)  (not used)
Strings26StartH                        0  0x00000000 (const dword)  (not used)
Strings26StartL                        0  0x00000000 (const dword)  (not used)
Strings27Size                          0  0x00000000 (const dword)  (not used)
Strings27StartH                        0  0x00000000 (const dword)  (not used)
Strings27StartL                        0  0x00000000 (const dword)  (not used)
Strings28Size                          0  0x00000000 (const dword)  (not used)
Strings28StartH                        0  0x00000000 (const dword)  (not used)
Strings28StartL                        0  0x00000000 (const dword)  (not used)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                         53  0x00000035 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      2048  0x00000800 (const dword)  (usage 3)
Strings30Size                          0  0x00000000 (const dword)  (not used)
Strings30StartH                        0  0x00000000 (const dword)  (not used)
Strings30StartL                        0  0x00000000 (const dword)  (not used)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          7  0x00000007 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                         19  0x00000013 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings33Size                          0  0x00000000 (const dword)  (not used)
Strings33StartH                        0  0x00000000 (const dword)  (not used)
Strings33StartL                        0  0x00000000 (const dword)  (not used)
Strings34Count                         0  0x00000000 (const dword)  (not used)
Strings34Size                          1  0x00000001 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     3584  0x00000e00 (const dword)  (usage 3)
Strings35Size                          0  0x00000000 (const dword)  (not used)
Strings35StartH                        0  0x00000000 (const dword)  (not used)
Strings35StartL                        0  0x00000000 (const dword)  (not used)
Strings36Count                         0  0x00000000 (const dword)  (not used)
Strings36Size                          1  0x00000001 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings37Count                         0  0x00000000 (const dword)  (not used)
Strings37Size                          1  0x00000001 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings38Count                         0  0x00000000 (const dword)  (not used)
Strings38Size                          1  0x00000001 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings3Count                          0  0x00000000 (const dword)  (not used)
Strings3Size                           1  0x00000001 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                         0  0x00000000 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                          7  0x00000007 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings41Count                         1  0x00000001 (const dword)  (not used)
Strings41Size                          7  0x00000007 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings42Count                         1  0x00000001 (const dword)  (not used)
Strings42Size                          7  0x00000007 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings46Size                          0  0x00000000 (const dword)  (not used)
Strings46StartH                        0  0x00000000 (const dword)  (not used)
Strings46StartL                        0  0x00000000 (const dword)  (not used)
Strings47Size                          0  0x00000000 (const dword)  (not used)
Strings47StartH                        0  0x00000000 (const dword)  (not used)
Strings47StartL                        0  0x00000000 (const dword)  (not used)
Strings48Size                          0  0x00000000 (const dword)  (not used)
Strings48StartH                        0  0x00000000 (const dword)  (not used)
Strings48StartL                        0  0x00000000 (const dword)  (not used)
Strings49Size                          0  0x00000000 (const dword)  (not used)
Strings49StartH                        0  0x00000000 (const dword)  (not used)
Strings49StartL                        0  0x00000000 (const dword)  (not used)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings50Count                         0  0x00000000 (const dword)  (not used)
Strings50Size                          1  0x00000001 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    14336  0x00003800 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    11776  0x00002e00 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings53Count                         1  0x00000001 (const dword)  (not used)
Strings53Size                         67  0x00000043 (const dword)  (usage 3)
Strings53StartH                        0  0x00000000 (const dword)  (usage 3)
Strings53StartL                    14848  0x00003a00 (const dword)  (usage 3)
Strings5Count                          0  0x00000000 (const dword)  (not used)
Strings5Size                           1  0x00000001 (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                     15360  0x00003c00 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          31  0x0000001f (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                      6656  0x00001a00 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                      7168  0x00001c00 (const dword)  (usage 3)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      3072  0x00000c00 (const dword)  (usage 3)
stringsCV                            110  0x0000006e (mem) word[54] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           296  0x00000128 (mem) word (global)  (usage 24)
TouchXpos                            290  0x00000122 (mem) word (global)  (usage 12)
TouchYpos                            292  0x00000124 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     13024  0x000032e0 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 444)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 45)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      11733  0x00002dd5 (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS    2803  0x00000af3 (const ??? 0)  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 96)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        13224  0x000033a8 (User func) args[3] r=0  (usage 27)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
