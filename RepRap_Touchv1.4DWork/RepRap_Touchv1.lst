file C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318        
003998  004319  //------------------------------------------------------------------------------
003999  004320  // FILEIO Error Code Constants
004000  004321  //------------------------------------------------------------------------------
004001  004322  #CONST
004002  004348  #END
004003  004349        
004004  004350  //------------------------------------------------------------------------------
004005  004351  // DISK struct offsets
004006  004352  //------------------------------------------------------------------------------
004007  004353  #CONST
004008  004370  #END
004009  004371        
004010  004372  //------------------------------------------------------------------------------
004011  004373  // FILE struct offsets
004012  004374  //------------------------------------------------------------------------------
004013  004375  #CONST
004014  004394  #END
004015  004395        
004016  004396        
004017  004397  //------------------------------------------------------------------//
004018  004398  //        Sound Class Services
004019  004399  //------------------------------------------------------------------//
004020  004400        
004021  004401  func snd_Volume("var"), 0;
004022  004402  // Syntax: snd_Volume("var");
004023  004403  // Usage : snd_Volume(30);
004024  004404  // Notes : set sound playback volume.  Var must
004025  004405  //       : be in the range from 8 (min volume)
004026  004406  //       : to 127 (max volume). If var is less
004027  004407  //       : than 8 volume is set to 8, and if
004028  004408  //       : var > 127 it is set to 127.
004029  004409        
004030  004410  func snd_Pitch("pitch"), 1;
004031  004411  // func snd_Pitch("freq"), 1;
004032  004412  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004033  004413  // Notes : sets the samples playback rate to a different frequency
004034  004414  //       : The minimum value is 4khz
004035  004415  //       : Setting the pitch to zero restores the original sample rate
004036  004416  //       : Return value is the samples original sample rate.
004037  004417        
004038  004418  func snd_BufSize("var"), 0;
004039  004419  // Syntax: snd_BufSize("var");
004040  004420  // Usage : snd_BufSize(2);
004041  004421  // Notes : specify the a memory chunk size for the wavefile buffer.
004042  004422  //       : default size 1024 bytes.
004043  004423  //       : 0 = 1024 bytes (default)
004044  004424  //       : 1 = 2048 bytes
004045  004425  //       : 2 = 4096 bytes
004046  004426  //       : 3 = 8192 bytes
004047  004427        
004048  004428  func snd_Stop(), 0;
004049  004429  // Syntax: snd_Stop();
004050  004430  // Usage : snd_Stop();
004051  004431  // Notes : stop any sound that is playing, releasing
004052  004432  //       : buffers and closes any open wav file.
004053  004433        
004054  004434  func snd_Pause(), 0;
004055  004435  // Syntax: snd_Pause();
004056  004436  // Usage : snd_Pause();
004057  004437  // Notes : pauses any sound that is playing, does nothing
004058  004438  //       : until sound is resumed with snd_Continue().
004059  004439  //       : The sample cam be terminated with snd_Stop.
004060  004440  //       : buffers and closes any open wav file.
004061  004441        
004062  004442  func snd_Continue(), 0;
004063  004443  // Syntax: snd_Continue();
004064  004444  // Usage : snd_Continue();
004065  004445  // Notes : resume any sound that is paused by snd_Pause.
004066  004446        
004067  004447  func snd_Playing(), 1;
004068  004448  // Syntax: snd_Playing();
004069  004449  // Usage : r := snd_Playing();
004070  004450  // Notes : returns 0 if sound has finished playing,
004071  004451  //       : else return number of 512 byte blocks to go.
004072  004452        
004073  004453  func snd_Freq("Freq", "Duration"), 1;
004074  004454  // Syntax: snd_Freq("Freq", "Duration");
004075  004455  // Usage : r := snd_Freq(1000, 2000);
004076  004456  // Notes : Returns 0 if note cannot be played because a wav file is playing
004077  004457  //       : else return True.
004078  004458  //       : Minimum Freq is 20
004079  004459  //       : This will produce a pure Square wave and is designed for driving
004080  004460  //       : Piezo transducers which require this sort of drive. It can also be
004081  004461  //       : used to drive the amp on displays with audio.
004082  004462        
004083  004463        
004084  004464  func __reserved60(), 0; // do not remove
004085  004465  func __reserved61(), 0; // do not remove
004086  004466  func __reserved62(), 0; // do not remove
004087  004467        
004088  004468  //=========================================================================================================
004089  004469  // String functions
004090  004470  //=========================================================================================================
004091  004471        
004092  004472  func str_Ptr("&var"), 1;
004093  004473  // Syntax: str_Ptr(&var);
004094  004474  // Usage : p := str_Ptr(&var);
004095  004475  // Notes : return a byte pointer to a word region
004096  004476        
004097  004477  func str_GetD("&ptr", "&var"), 1;
004098  004478  // Syntax: str_GetD(&ptr, &var);
004099  004479  // Usage : ok := str_GetD(&ptr, &var);
004100  004480  // Notes : convert number in a string to DWORD ( myvar[2] )
004101  004481  //       : returns true if function succeeds, advancing ptr
004102  004482        
004103  004483  func str_GetW("&ptr", "&var"), 1;
004104  004484  // Syntax: str_GetW(&ptr, &var);
004105  004485  // Usage : ok := str_GetW(&ptr, &var);
004106  004486  // Notes : convert number in a string to WORD ( myvar )
004107  004487  //       : returns true if function succeeds, advancing ptr
004108  004488        
004109  004489  func str_GetHexW("&ptr", "&var"), 1;
004110  004490  // Syntax: str_GetHexW(&ptr, &var);
004111  004491  // Usage : ok := str_GetHexW(&ptr, &var);
004112  004492  // Notes : convert HEX number in a string to WORD ( myvar )
004113  004493  //       : returns true if function succeeds, advancing ptr
004114  004494        
004115  004495  func str_GetC("&ptr", "&var"), 1;
004116  004496  // Syntax: str_GetC(&ptr, &var);
004117  004497  // Usage : ok := str_GetC(&ptr, &var);
004118  004498  // Notes : get a valid ascii char in a string to WORD ( myvar )
004119  004499  //       : returns true if function succeeds, advancing ptr
004120  004500        
004121  004501  func str_GetByte("ptr"), 1;
004122  004502  // Syntax: str_GetByte(ptr);
004123  004503  // Usage : myvar := str_GetByte(ptr);
004124  004504  // Notes : get a byte to myvar
004125  004505  //       : returns value
004126  004506        
004127  004507  func str_GetWord("ptr"), 1;
004128  004508  // Syntax: GetWord(ptr);
004129  004509  // Usage : GetWord(ptr);
004130  004510  // Notes : get a word to myvar
004131  004511  //       : returns value
004132  004512        
004133  004513  func str_PutByte("ptr","val"), 0;
004134  004514  // Syntax: str_PutByte(ptr);
004135  004515  // Usage : myvar := str_PutByte(ptr);
004136  004516  // Notes : put a byte at ptr
004137  004517  //       : returns value
004138  004518        
004139  004519  func str_PutWord("ptr","val"), 0;
004140  004520  // Syntax: str_PutWord("ptr","val");
004141  004521  // Usage : str_PutWord(p,100);
004142  004522  // Notes : put word 100 at current pointer location
004143  004523  //       : returns value
004144  004524        
004145  004525  func str_Match("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Match(&ptr, *str);
004147  004527  // Usage : r := str_Match(&p, "hello");
004148  004528  // Notes : Case sensitive match
004149  004529  //       : returns true if function succeded, andvancing pointer to position past
004150  004530  //       : the matched item. Note that any whitespace characters are skipped
004151  004531  //       : in the source string prior to the test.
004152  004532        
004153  004533  func str_MatchI("&ptr", "*str"), 1;
004154  004534  // Syntax: str_MatchI(&ptr, *str);
004155  004535  // Usage : r := str_MatchI(&p, "hello");
004156  004536  // Notes : Case insensitive match
004157  004537  //       : returns true if function succeded, andvancing pointer to position past
004158  004538  //       : the matched item. Note that any whitespace characters are skipped
004159  004539  //       : in the source string prior to the test.
004160  004540        
004161  004541  func str_Find("&ptr", "*str"), 1;
004162  004542  // Syntax: str_Find(&ptr, *str);
004163  004543  // Usage : n := str_Find(&p, "hello");
004164  004544  // Notes : given the address of a pointer to a source string as the
004165  004545  //       : first argument, and a pointer to a test string as the second
004166  004546  //       : argument, attempt to find the position of the matching string
004167  004547  //       : in the source string. The test is performed with case sensitivity.
004168  004548  //       : return 0 if not found, else returns the address of the first
004169  004549  //       : character of the match. NB:- The source pointer is not altered.
004170  004550        
004171  004551  func str_FindI("&ptr", "*str"), 1;
004172  004552  // Syntax: str_Find(&ptr, *str);
004173  004553  // Usage : n := str_Find(&p, "hello");
004174  004554  // Notes : given the address of a pointer to a source string as the
004175  004555  //       : first argument, and a pointer to a test string as the second
004176  004556  //       : argument, attempt to find the position of the matching string
004177  004557  //       : in the source string. The test is performed with no case
004178  004558  //       : sensitivity, eg upper and lower case chars are accepted.
004179  004559  //       : return 0 if not found, else returns the address of the first
004180  004560  //       : character of the match. NB:- The source pointer is not altered.
004181  004561        
004182  004562  func str_Length("ptr"), 1;
004183  004563  // Syntax: str_Length(ptr);
004184  004564  // Usage : len := str_Ptr(mystring);
004185  004565  // Notes : return the length of a byte aligned string excluding terminator
004186  004566        
004187  004567  func str_Printf("&ptr", "*format"), 1;
004188  004568  // Syntax: str_Printf("&ptr", "*format");
004189  004569  // Usage : r := str_Printf(&p, "hello");
004190  004570  // Notes : refer to documentation
004191  004571  //       :
004192  004572        
004193  004573  func str_Cat("dest","src"), 1;
004194  004574  // Syntax: str_Append("&dest","&src");
004195  004575  // Usage : str_Append(&buf,"Hello");
004196  004576  // Notes : Appends a copy of the source string to the destination string.
004197  004577  //       : The terminating null character in destination is overwritten by
004198  004578  //       : the first character of source, and a new null-character is appended
004199  004579  //       : at the end of the new string formed by the concatenation of both in destination.
004200  004580  //       : returns destination.
004201  004581        
004202  004582  func str_CatN("dest","src","count"), 1;
004203  004583  // Syntax: str_Append("&dest","&src","count");
004204  004584  // Usage : str_Append(&buf,"Monday",3);
004205  004585  // Notes : Appends a copy of the source string to the destination string.
004206  004586  //       : The number of characters copied is limited by "count".
004207  004587  //       : The terminating null character in destination is overwritten by
004208  004588  //       : the first character of source, and a new null-character is appended
004209  004589  //       : at the end of the new string formed by the concatenation of both in destination.
004210  004590  //       : returns destination.
004211  004591        
004212  004592        
004213  004593  func str_ByteMove("src", "dest", "count"), 1;
004214  004594  // Syntax   : str_ByteMove(src, dest, bytecount);
004215  004595  // Input    : STR *source points to byte aligned source.
004216  004596  //          : STR *dest   points to byte aligned destination.
004217  004597  //          : VAR count   number of bytes to transfer.
004218  004598  // Usage    : nextpos := str_ByteMove(s, d, 100);
004219  004599  // Notes    : copy bytes from "src" to "dest", stopping only
004220  004600  //          : when "count" is exhausted.
004221  004601  //          : No terminator is appended, it is purely a
004222  004602  //          : byte copy, and any zeroes encountered will
004223  004603  //          : also be copied.
004224  004604  // Returns  : returns a pointer to the end of the destination
004225  004605  //          : (which is "dest" + "count")
004226  004606        
004227  004607        
004228  004608  func str_Copy("dest", "src"), 1;
004229  004609  // Syntax   : str_Copy(dest, src);
004230  004610  // Input    : STR *dest   points to byte aligned destination.
004231  004611  //          : STR *source points to byte aligned source.
004232  004612  // Usage    : nextplace := str_Copy(d, s);
004233  004613  // Notes    : copy a string from "src" to "dest", stopping only
004234  004614  //          : when the end of source string "src" is encountered
004235  004615  //          : (0x00 terminator).
004236  004616  //          : The terminator is always appended, even if "src" is
004237  004617  //          : an empty string.
004238  004618  // Returns  : returns a pointer to the 0x00 string terminator at
004239  004619  //          : end of "dest" (which is "dest" + str_Length(src); )
004240  004620        
004241  004621        
004242  004622  func str_CopyN("dest", "src", "count"), 1;
004243  004623  // Syntax   : str_CopyN(dest, src, bytecount);
004244  004624  // Input    : STR *dest   points to byte aligned destination.
004245  004625  //          : STR *source points to byte aligned source.
004246  004626  //          : VAR count   max number of chars to copy.
004247  004627  // Usage    : nextplace := str_CopyN(d, s, 100);
004248  004628  // Notes    : copy a string from "src" to "dest", stopping only
004249  004629  //          : when "count" is exhausted, or end of source
004250  004630  //          : string "str" is encountered (0x00 string terminator).
004251  004631  //          : The terminator is always appended, even if
004252  004632  //          : "count" is zero, or "src" is a null string.
004253  004633  // Returns  : returns a pointer to the 0x00 string terminator
004254  004634  //          : (which is "dest" + whatever was copied)
004255  004635        
004256  004636        
004257  004637  func __reserved63(), 0; // do not remove
004258  004638  func __reserved64(), 0; // do not remove
004259  004639  func __reserved65(), 0; // do not remove
004260  004640  func __reserved66(), 0; // do not remove
004261  004641        
004262  004642  //=========================================================================================================
004263  004643  // FLASH memory functions
004264  004644  //=========================================================================================================
004265  004645  func flash_GetByte("bank", "ptr"), 1;
004266  004646  // Syntax   : flash_GetByte(bank, ptr);
004267  004647  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004268  004648  // Notes    : Reads a single byte from any flash location.
004269  004649  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004270  004650  //          : which is the header signature for a valid program.
004271  004651  // Returns  : the byte value from the location
004272  004652        
004273  004653        
004274  004654  func flash_GetWord("bank", "ptr"), 1;
004275  004655  // Syntax   : flash_GetWord(bank, ptr);
004276  004656  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004277  004657  // Notes    : Reads a single word from any flash location.
004278  004658  //          : The pointer is byte aligned.
004279  004659  //          : If the bank is read protected, only the first word can be read
004280  004660  //          : which is the header signature for a valid program (0xAA55).
004281  004661  // Returns  : the byte value from the location
004282  004662        
004283  004663        
004284  004664  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004285  004665  // Syntax   : flash_Copy(bank, ptr);
004286  004666  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004287  004667  // Notes    : Copies bytes from any flash locations to a user buffer.
004288  004668  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004289  004669  //          : If the bank is read protected, 0 bytes will be read
004290  004670  //          : which is the header signature for a valid program (0xAA55).
004291  004671  // Returns  : the count of bytes transferred.
004292  004672        
004293  004673        
004294  004674  func flash_Run("bank"), 1;
004295  004675  // Syntax    : flash_Run(bankx);
004296  004676  // Usage     : res := flash_Run(FLASHBANK_5);
004297  004677  // Notes     : Restarts the processor, running code from the required
004298  004678  //           : flash bank. bank may be a variable, or one of the
004299  004679  //           : pre-defined constants:-
004300  004680  //           :    FLASHBANK_0                 //0x00
004301  004681  //           :    FLASHBANK_1                 //0x01
004302  004682  //           :    FLASHBANK_2                 //0x02
004303  004683  //           :    FLASHBANK_3                 //0x03
004304  004684  //           :    FLASHBANK_4                 //0x04
004305  004685  //           :    FLASHBANK_5                 //0x05
004306  004686  // returns    : This function should net return as it restarts
004307  004687  //        : the processor and jumps to the required bank,
004308  004688  //        : If it does return, -1 indicates incorrect/invalid
004309  004689  //        : bank number, and -2 indicates no valid program
004310  004690  //        : in the selected bank.
004311  004691        
004312  004692  func flash_Bank(), 1;
004313  004693  // Syntax   : flash_Bank();
004314  004694  // Usage    : myvar := flash_Bank();
004315  004695  // Notes    : Identifies which flash bank the code is running from.
004316  004696  // Returns  : The FLASH bank that code is currently running from, 0-5.
004317  004697        
004318  004698        
004319  004699  func flash_EraseBank("bank", "confirmation"), 1;
004320  004700  // Syntax   : flash_EraseBank(bank, confirmation);
004321  004701  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004322  004702  // Notes    : This function should be used with extreme caution.
004323  004703  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004324  004704  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004325  004705  //          : a protected bank will not be erased, and function will return with 0
004326  004706  //          : If the destination bank is the same as the execution bank, the processor will reset
004327  004707  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004328  004708  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004329  004709  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004330  004710  // Returns  : returns true if the function succeeded
004331  004711  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004332  004712        
004333  004713  func flash_LoadFile("bank", "filename"), 1;
004334  004714  // Syntax   : flash_LoadFile(bank, ptr);
004335  004715  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004336  004716  // Notes    : Copies a file from uSD to the required flashbank.
004337  004717  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004338  004718  // Returns  : returns true if the function succeeded.
004339  004719        
004340  004720        
004341  004721  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004342  004722  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004343  004723  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004344  004724  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004345  004725  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004346  004726  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004347  004727  // Returns  : returns true if the function succeeded.
004348  004728        
004349  004729        
004350  004730  func flash_putstr("bank", "ptr"), 1;
004351  004731  // Syntax   : flash_putstr(bank, ptr);
004352  004732  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004353  004733  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004354  004734  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004355  004735  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004356  004736        
004357  004737  func flash_Blit16("bank", "offset", "count"), 1;
004358  004738  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004359  004739  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004360  004740  // Notes    : Blit an image to a GRAM window from FLASH storage.
004361  004741  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004362  004742  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004363  004743        
004364  004744  func flash_Blit8("bank", "offset", "count"), 1;
004365  004745  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004366  004746  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004367  004747  // Notes    : Blit an image to a GRAM window from FLASH storage.
004368  004748  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004369  004749  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004370  004750        
004371  004751  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004372  004752  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004373  004753  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004374  004754  // Notes    : Blit an image to a GRAM window from FLASH storage.
004375  004755  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004376  004756  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004377  004757        
004378  004758  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004379  004759  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004380  004760  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004381  004761  // Notes    : Blit an image to a GRAM window from FLASH storage.
004382  004762  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004383  004763  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004384  004764        
004385  004765  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004386  004766  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004387  004767  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004388  004768  // Notes    : Blit an image to a GRAM window from FLASH storage.
004389  004769  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004390  004770  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004391  004771        
004392  004772  func flash_Exec("bank", "arglistptr"), 1;
004393  004773  // Syntax: res := flash_Exec("bank","arglistptr");
004394  004774  // Usage : res := flash_Exec("bank","arglistptr");
004395  004775  // Notes : returns like a function, current program
004396  004776  //       : calling program is kept active and control returns to it.
004397  004777  //       : If arglistptr is 0, no arguments are passed, else
004398  004778  //       : arglist points to an array, the first element being
004399  004779  //       : the number of elements in the array.
004400  004780  //       : func 'main' in the called bank accepts the arguments.
004401  004781  // WARNING Not currently implemented!
004402  004782        
004403  004783        
004404  004784  func __reserved68(), 0; // do not remove
004405  004785  func __reserved69(), 0; // do not remove
004406  004786  func __reserved70(), 0; // do not remove
004407  004787        
004408  004788  //=========================================================================================================
004409  004789  // I/O and hardware functions
004410  004790  //=========================================================================================================
004411  004791        
004412  004792        
004413  004793        
004414  004794        
004415  004795  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004416  004796  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004417  004797  // Syntax: pin_Pulseout(pin, value);
004418  004798  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004419  004799  // Notes : only available on PA0 to PA9
004420  004800  //       : Invert the state of an output for "value" milliseconds.
004421  004801  //       : pulseout is non blocking, that is, code execution may continue while
004422  004802  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004423  004803  //       : If not already an output, pin is automatically made a push/pull output,
004424  004804  //       : and the last state of its output latch will determine pulse polarity.
004425  004805  //       : It's its open drain state is not altered if the pin was already an output.
004426  004806  //       : If pulseout is called while pulseout is still active, the pulse timer
004427  004807  //       : will simply be updated with the new "value" and the pulse will continue
004428  004808  //       : with the extended value.
004429  004809  //       : returns true if the pin number is legal (usually ignored)
004430  004810        
004431  004811        
004432  004812  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004433  004813  // Syntax: pin_Counter(pin, mode, userfunc);
004434  004814  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004435  004815  // Notes : only available on PA4 to PA9
004436  004816  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004437  004817  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004438  004818  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004439  004819  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004440  004820  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004441  004821  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004442  004822  //       : The pin may be configured as an input or output, the function behaves the same.
004443  004823  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004444  004824  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004445  004825  //       : "mode" has the following effect:-
004446  004826  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004447  004827  //       : mode COUNT_RISE(1) = increment on every rising edge
004448  004828  //       : mode COUNT_FALL(2) = increment on every falling edge
004449  004829  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004450  004830        
004451  004831  //------------------------------------------------------------------//
004452  004832  // pin counter mode constants                                       //
004453  004833  //------------------------------------------------------------------//
004454  004834  #CONST
004455  004839  #END
004456  004840        
004457  004841  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004458  004842  // Syntax: Qencoder1(pinA, pinB, mode);
004459  004843  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004460  004844  // Notes : not available on pins PA14 and PA15
004461  004845  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004462  004846  //       : or written to at any time with peekW and pokeW using the following constants:-
004463  004847  //       : It is necessary to configure the pins first, depending on your requirements, eg
004464  004848  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004465  004849  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004466  004850  //       : Returns true if the pin numbers are legal (usually ignored)
004467  004851  //    QEN1_COUNTER_LO
004468  004852  //    QEN1_COUNTER_HI
004469  004853  //    QEN1_DELTA This is reset to 0 when read
004470  004854        
004471  004855  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004472  004856  // Syntax: Qencoder2(pinA, pinB, mode);
004473  004857  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004474  004858  // Notes : not available on pins PA14 and PA15
004475  004859  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004476  004860  //       : or written to at any time with peekW and pokeW using the following constants:-
004477  004861  //       : It is necessary to configure the pins first, depending on your requirements, eg
004478  004862  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004479  004863  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004480  004864  //       : Returns true if the pin numbers are legal (usually ignored)
004481  004865  //    QEN2_COUNTER_LO
004482  004866  //    QEN2_COUNTER_HI
004483  004867  //    QEN2_DELTA This is reset to 0 when read
004484  004868        
004485  004869        
004486  004870  func Qencoder1Reset(), 0;
004487  004871  // Syntax: Qencoder1Reset();
004488  004872  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004489  004873  // Notes :
004490  004874  //    QEN1_COUNTER_LO is reset to zero
004491  004875  //    QEN1_COUNTER_HI is reset to zero
004492  004876  //    QEN1_DELTA is reset to zero
004493  004877        
004494  004878  func Qencoder2Reset(), 0;
004495  004879  // Syntax: Qencoder2Reset();
004496  004880  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004497  004881  // Notes :
004498  004882  //    QEN2_COUNTER_LO is reset to zero
004499  004883  //    QEN2_COUNTER_HI is reset to zero
004500  004884  //    QEN2_DELTA is reset to zero
004501  004885        
004502  004886        
004503  004887  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004504  004888  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004505  004889  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004506  004890  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004507  004891  //       : Invert the state of an output at a "freq" freuency "count" times.
004508  004892  //       : PulseoutCount is non blocking, that is, code execution may continue while
004509  004893  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004510  004894  //       : If not already an output, pin is automatically made a push/pull output,
004511  004895  //       : and the last state of its output latch will determine pulse polarity.
004512  004896  //       : It's its open drain state is not altered if the pin was already an output.
004513  004897  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004514  004898  //       : will simply have the new "value" added to it.
004515  004899  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004516  004900  //       : returns true if the pin number is legal (usually ignored)
004517  004901        
004518  004902  func __reserved72(), 0; // do not remove
004519  004903        
004520  004904  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004521  004905  // Syntax: pwm_Init(pin, value);
004522  004906  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004523  004907  // Notes : only available on PA4 to PA9
004524  004908  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004525  004909  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004526  004910  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004527  004911  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004528  004912  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004529  004913  //       :                    : Repetition rate ~50hz or 20ms
004530  004914  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004531  004915  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004532  004916  //       : pwm_Init is non blocking and the pwm continues until turn off
004533  004917  //       : Returns true if the pin number is legal (usually ignored)
004534  004918        
004535  004919  //------------------------------------------------------------------------------
004536  004920  // PWM Constants
004537  004921  //------------------------------------------------------------------------------
004538  004922  #CONST
004539  004927  #END
004540  004928        
004541  004929  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004542  004930  // Syntax   : OW_Reset(PA0);
004543  004931  // Usage    : OW_Reset(PA0);
004544  004932  // Notes    : Only available on PA0 to PA13
004545  004933  //          : Resets  ONEWIRE device
004546  004934  //          : Returns the status, 0 = ACK.
004547  004935  //          :
004548  004936        
004549  004937  func OW_Read("pin"), 1;                              // read data from 1wire bus
004550  004938  // Syntax   : OW_Read(PA0);
004551  004939  // Usage    : arg1 := OW_Read(PA0);
004552  004940  // Notes    : Only available on PA0 to PA13
004553  004941  //          : Reads value of the ONEWIRE pin
004554  004942  //          : that was previously selected for ONEWIRE comms.
004555  004943  //          :
004556  004944  //          : pin = 0 : the next byte from the ONEWIRE bus
004557  004945        
004558  004946  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004559  004947  // Syntax   : OW_Read9(PA0);
004560  004948  // Usage    : OW_Read9(PA0);
004561  004949  // Notes    : Only available on PA0 to PA13
004562  004950  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004563  004951  //          : that was previously selected for ONEWIRE comms.
004564  004952  //          :
004565  004953  //          : read the 9 bits from the ONEWIRE bus
004566  004954        
004567  004955  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004568  004956  // Syntax   : OW_Write(PA0, arg);
004569  004957  // Usage    : OW_Write(PA0, arg);
004570  004958  // Notes    : Only available on PA0 to PA13
004571  004959  //          : Sends ONEWIRE data on the appropriate
004572  004960  //          : pin that was previously  selected as ONEWIRE comms.
004573  004961  //          :
004574  004962  //          : write arg to the ONEWIRE bus
004575  004963        
004576  004964  func __reserved77(), 0; // do not remove
004577  004965  func __reserved78(), 0; // do not remove
004578  004966        
004579  004967  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004580  004968  // Syntax: sys_GetDateVar(&year, &month, &day);
004581  004969  // Usage : sys_GetDateVar(&year, &month, &day);
004582  004970  // Notes : Retrieves the date values into variables
004583  004971        
004584  004972  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004585  004973  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004974  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004587  004975  // Notes : Retrieves the time values into variables
004588  004976        
004589  004977  func sys_PmmC(), 0;
004590  004978  // Syntax: sys_PmmC();
004591  004979  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004592  004980  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004593  004981  //       : Can be captured to a buffer using the to( function
004594  004982  //       : Returns nothing.
004595  004983        
004596  004984  func sys_Driver(), 0;
004597  004985  // Syntax: sys_Driver();
004598  004986  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004599  004987  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004600  004988  //       : Can be captured to a buffer using the to( function
004601  004989  //       : Returns nothing.
004602  004990        
004603  004991  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004604  004992  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004605  004993  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004606  004994  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004607  004995  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004608  004996  //       : elements in each buffer. This will need to be greater than "width" for negative
004609  004997  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004610  004998  //       : pass 0 as the address for any unused traces
004611  004999  //       : X position is incremented each point by "xstep" pixels.
004612  005000  //       : Y values are derived from a Y buffer "newy" (signed values).
004613  005001  //       : 2 buffers need to be supplied, "newy" contains new
004614  005002  //       : points to be drawn, "oldy" contains most recent set
004615  005003  //       : of points to be un-drawn. After the waveform is drawn,
004616  005004  //       : "newy" buffer is automatically copied to "oldy" buffer.
004617  005005        
004618  005006        
004619  005007  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004620  005008  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004621  005009  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004622  005010  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004623  005011  //       : and calls "COMPLETEfunction" when done.
004624  005012  //       : "rate" is samples in 100 of samples per second
004625  005013  //       : Any unused IOx pins should have their buffer addresses set to 0
004626  005014  //       : For performance reasons samples are taken in chunks of 32, thus if you
004627  005015  //       : request 33 samples there will be a delay of 31 samples before
004628  005016  //       : "COMPLETEfunction" is called
004629  005017  //       : If Touch is enabled this function should be called no more than once per
004630  005018  //       : millisecond, otherwise touch behaviour could be eratic.
004631  005019        
004632  005020        
004633  005021  func sys_ErrorMessage("msgnum"), 1;
004634  005022        
004635  005023  //==============================//
004636  005024  // NeoPixel specific functions  //
004637  005025  //==============================//
004638  005026        
004639  005027  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004640  005028  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004641  005029  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004642  005030  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004643  005031  //       : data        : Address of data to be sent
004644  005032  //       : size        : number of colour 'sets' to follow
004645  005033  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004646  005034  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004647  005035  //       : Repeat      : Number of times to repeat the colours between first and last
004648  005036  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004649  005037  //       : Returns true if the pin number is legal (usually ignored)
004650  005038  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004651  005039  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004652  005040        
004653  005041  // NeoPixel related constants
004654  005042  #CONST
004655  005046  #END
004656  005047        
004657  005048  func __reserved85(), 0; // do not remove
004658  005049  func __reserved86(), 0; // do not remove
004659  005050        
004660  005051  //==============================================//
004661  005052  // spi flash device specific functions          //
004662  005053  //==============================================//
004663  005054        
004664  005055  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004665  005056  // Syntax   : spiflash_SIG("spi#","enablepin");
004666  005057  // Usage    : var := spiflash_SIG(SPI1, PA0);
004667  005058  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004668  005059  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004669  005060  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004670  005061  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004671  005062  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004672  005063  //          : byte is ignored.
004673  005064        
004674  005065  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004675  005066  // Syntax   : spiflash_ID("spi#","enablepin");
004676  005067  // Usage    : var := spiflash_ID(SPI1, PA0);
004677  005068  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004678  005069  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004679  005070  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004680  005071  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004681  005072  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004682  005073  //          : contains capacity. Refer to the device data sheet for further information.
004683  005074        
004684  005075  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004685  005076  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004686  005077  // Usage    : spiflash_BulkErase(SPI1, PA0);
004687  005078  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004688  005079  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004689  005080  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004690  005081  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004691  005082  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004692  005083  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004693  005084        
004694  005085  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004695  005086  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004696  005087  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004697  005088  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004698  005089  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004699  005090  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004700  005091  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004701  005092  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004702  005093  //          : blockAddress The address of the 64k FLASH block to be erased.
004703  005094  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004704  005095  //          : can take up to 3 milliseconds.
004705  005096        
004706  005097  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004707  005098  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004708  005099  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004709  005100  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004710  005101        
004711  005102  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004712  005103  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004713  005104  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004714  005105  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004715  005106  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004716  005107  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004717  005108  //       : returns number of characters read
004718  005109  //       : if "dest" is zero, data is read direct to GRAM window
004719  005110  //       :
004720  005111        
004721  005112  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004722  005113  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004723  005114  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004724  005115  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004725  005116  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004726  005117  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004727  005118  //       : returns number of bytes written
004728  005119  //       :
004729  005120        
004730  005121  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004731  005122  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004732  005123  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004733  005124  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004734  005125  //       : The image is displayed at x,y (with respect to top left corner).
004735  005126        
004736  005127  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004737  005128  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004738  005129  // Usage : spiflash_PutC('x', SPI1, PA0);
004739  005130  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004740  005131  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004741  005132  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004742  005133        
004743  005134  func spiflash_GetC("spi#", "enablepin"), 1;
004744  005135  // Syntax: spiflash_GetC("spi#", "enablepin");
004745  005136  // Usage : mychar := fgetC(SPI1, PA0);
004746  005137  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004747  005138  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004748  005139  //       : by subsequent reads or writes.
004749  005140  //       : returns next char from file
004750  005141        
004751  005142  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004752  005143  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004753  005144  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004754  005145  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004755  005146  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004756  005147  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004757  005148        
004758  005149  func spiflash_GetW("spi#", "enablepin"), 1;
004759  005150  // Syntax: spiflash_GetW("spi#", "enablepin");
004760  005151  // Usage : myword := fgetW(SPI1, PA0);
004761  005152  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004762  005153  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004763  005154  //       : by subsequent reads or writes.
004764  005155  // Notes : returns next word in file
004765  005156        
004766  005157  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004767  005158  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004768  005159  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004769  005160  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004770  005161  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004771  005162  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004772  005163  //       : returns number of characters written
004773  005164  //       :
004774  005165        
004775  005166  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004776  005167  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004777  005168  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004778  005169  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004779  005170  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004780  005171  //       : by subsequent reads or writes.
004781  005172  //       : returns pointer to string or null if failed.
004782  005173  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004783  005174  //       : NB:- only reads up to "size-1" characters into "string"
004784  005175  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004785  005176  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004786  005177  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004787  005178  //       : C] It reaches the end of file
004788  005179  //       : D] A read error occurs.
004789  005180        
004790  005181  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004791  005182  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004792  005183  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004793  005184  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004794  005185  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004795  005186  //       : return a function pointer to the allocation.
004796  005187  //       : The function can then be invoked just like any other
004797  005188  //       : function would be called via a function pointer.
004798  005189  //       : Parameters may be passed to it in a conventional way.
004799  005190  //       : The function may be discarded at any time when no
004800  005191  //       : longer required, thus freeing its memory resources.
004801  005192  //       : The loaded function can be discarded with mem_Free(..)
004802  005193  //       : eg:
004803  005194  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004804  005195  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004805  005196  //       : then elsewhere in your program:-
004806  005197  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004807  005198  //       : if(res == QUIT_APPLICATION) goto exitApp;
004808  005199  //       : Later in your program, when popupWindow is no longer
004809  005200  //       : required for the application:-
004810  005201  //       : res := mem_Free(popupWindow);
004811  005202  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004812  005203  //       : The callers stack is shared by the loaded function,
004813  005204  //       : however any global variables in the loaded function
004814  005205  //       : are private to that function.
004815  005206  //
004816  005207        
004817  005208  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004818  005209  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004819  005210  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004820  005211  // Notes : current program releases any allocated memory but
004821  005212  //       : retains the stack and global memory.
004822  005213  //       : If arglistptr is 0, no arguments are passed, else
004823  005214  //       : arglist points to an array, the first element being
004824  005215  //       : the number of elements in the array.
004825  005216  //       : func 'main' in the called program accepts
004826  005217  //       : the arguments, if any. The arguments can only
004827  005218  //       : be passed by value, no pointers or references can be
004828  005219  //       : used as all memory is cleared before the file
004829  005220  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004830  005221  //       : for functions that can pass by reference.
004831  005222        
004832  005223  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004833  005224  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004834  005225  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004835  005226  // Notes : returns like a function, current program
004836  005227  //       : calling program is kept active and control returns to it.
004837  005228  //       : If arglistptr is 0, no arguments are passed, else
004838  005229  //       : arglist points to an array, the first element being
004839  005230  //       : the number of elements in the array.
004840  005231  //       : func 'main' in the called program accepts the arguments.
004841  005232  //       : This function is similar to spiflash_LoadFunction(...), however,
004842  005233  //       : the function argument list is passed by pointer, and
004843  005234  //       : the memory consumed by the function is released as
004844  005235  //       : soon as the function completes.
004845  005236        
004846  005237  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004847  005238  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004848  005239  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004849  005240  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004850  005241  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004851  005242  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004852  005243  //       : Returns NULL if function fails.
004853  005244  //       : Returns a handle (pointer to the memory allocation) to the
004854  005245  //       : image control list that has been created.
004855  005246        
004856  005247  // Notes : This function Calculates the size of a chunk of memory required for
004857  005248  //       : a image list and populates it from the image control file ("*.dat")
004858  005249  //       : therefore, when imagelist is no longer required, you must de-allocate
004859  005250  //       : the image list memory by using eg:- mem_Free(hImagelist);
004860  005251  //       : to restore the heap.
004861  005252  //       :
004862  005253        
004863  005254  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004864  005255  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004865  005256  // Usage : spiflash_PlayWAV(SPI1, PA0);
004866  005257  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004867  005258  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004868  005259  //       : or writes.
004869  005260  //       : This function automatically grabs a chunk
004870  005261  //       : of memory for a file buffer, and a wave
004871  005262  //       : buffer. The minimum memory requirement is
004872  005263  //       : about 580 bytes for the disk io service and
004873  005264  //       : a minimum wave buffer size of 1024. The size
004874  005265  //       : of the wave buffer allocation
004875  005266  //       : can be increased by the snd_BufSize function.
004876  005267  //       : The default size 1024 bytes.
004877  005268  //       : NB the memory is only required during the
004878  005269  //       : duration of play, and is automatically
004879  005270  //       : released while not in use.
004880  005271  //       : See the Sound Class services for other associated controls.
004881  005272  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004882  005273  //       : If errors occured, the folling is returned
004883  005274  //       : -7  : Insufficient memory available for WAV buffer and file
004884  005275  //       : -6  : cant play this rate
004885  005276  //       : -5  : no data chunk found in first rsector
004886  005277  //       : -4  : no format data
004887  005278  //       : -3  : no wave chunk signature
004888  005279  //       : -2  : bad wave file format
004889  005280  //       : -1  : file not found
004890  005281        
004891  005282  //==============================================//
004892  005283  // more com functions                           //
004893  005284  //==============================================//
004894  005285        
004895  005286  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004896  005287  // Syntax   : com1_TXblock("buf", "bufsize");
004897  005288  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004898  005289  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004899  005290  //          : if a transmit buffer is active and space is available this function will return almost
004900  005291  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004901  005292        
004902  005293  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004903  005294  // Syntax   : com1_RXblock("buf", "bufsize");
004904  005295  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004905  005296  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004906  005297  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004907  005298  //          : immediately otherwise it will block until until the required bytes are received.
004908  005299        
004909  005300  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004910  005301  // Syntax   : com_TXblock("buf", "bufsize");
004911  005302  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004912  005303  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004913  005304  //          : if a transmit buffer is active and space is available this function will return almost
004914  005305  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004915  005306        
004916  005307  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004917  005308  // Syntax   : com_RXblock("buf", "bufsize");
004918  005309  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004919  005310  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004920  005311  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004921  005312  //          : immediately otherwise it will block until until the required bytes are received.
004922  005313        
004923  005314  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004924  005315  // Syntax   : com_TXblock("buf", "bufsize");
004925  005316  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004926  005317  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004927  005318  //          : if a transmit buffer is active and space is available this function will return almost
004928  005319  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004929  005320        
004930  005321  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004931  005322  // Syntax   : com_RXblock("buf", "bufsize");
004932  005323  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004933  005324  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004934  005325  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004935  005326  //          : immediately otherwise it will block until until the required bytes are received.
004936  005327        
004937  005328  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004938  005329  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004939  005330  // Usage : disp_BlitPixelsFromCOM1();
004940  005331  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004941  005332  //       : display from the specified com port.
004942  005333        
004943  005334  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004944  005335  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004945  005336  // Usage : disp_BlitPixelsFromCOM2();
004946  005337  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004947  005338  //       : display from the specified com port.
004948  005339        
004949  005340  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004950  005341  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004951  005342  // Usage : disp_BlitPixelsFromCOM3();
004952  005343  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004953  005344  //       : display from the specified com port.
004954  005345        
004955  005346        
004956  005347  //==============================================//
004957  005348  // crc generation functions                     //
004958  005349  //==============================================//
004959  005350        
004960  005351  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004961  005352  // *Notes   : (if you calculate all of the incoming data
004962  005353  //          : INCLUDING the CRC, the result should be 0x00
004963  005354  //          : This is equivalent to simple addition of all bytes
004964  005355  //          : and returning the negated sum an 8 bit value.
004965  005356  //          : For the standard test string "123456789",
004966  005357  //          : crc_CSUM_8 will return 0x0023.
004967  005358        
004968  005359        
004969  005360  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004970  005361  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004971  005362  //          : (if you calculate all of the incoming data
004972  005363  //          : INCLUDING the CRC, the result should be 0x0000
004973  005364  //          : For the standard test string "123456789",
004974  005365  //          : crc_16 will return 0xBB3D.
004975  005366        
004976  005367        
004977  005368  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004978  005369  // *Notes   : (if you calculate all of the incoming data
004979  005370  //          : INCLUDING the CRC, the result should be 0x0000
004980  005371  //          : For the standard test string "123456789",
004981  005372  //          : crc_MODBUS will return 0x4B37.
004982  005373        
004983  005374        
004984  005375  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004985  005376  // *Notes   : (if you calculate all of the incoming data
004986  005377  //          : INCLUDING the CRC, the result should be 0x0000
004987  005378  //          : For the standard test string "123456789",
004988  005379  //          : crc_CCITT will return the following:-
004989  005380  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004990  005381  //          : seed = 0xFFFF, result = 0x29B1
004991  005382  //          : seed = 0x1D0F, result = 0xE5CC
004992  005383        
004993  005384        
004994  005385  //------------------------------------------------------------------//
004995  005386  // CONSTANTS
004996  005387  //------------------------------------------------------------------//
004997  005388        
004998  005389  #CONST
004999  005393  #END
005000  005394        
005001  005395  // timebase constants for timebase_init
005002  005396  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005003  005397  #CONST
005004  005408  #END
005005  005409        
005006  005410        
005007  005411  // generic constants
005008  005412  #CONST
005009  005420  #END
005010  005421        
005011  005422        
005012  005423        
005013  005424  //gfx_Get() related constants
005014  005425  #CONST
005015  005434  #END
005016  005435        
005017  005436        
005018  005437        
005019  005438        
005020  005439  #CONST
005021  005452  #END
005022  005453        
005023  005454        
005024  005455  #CONST
005025  005480  #END
005026  005481        
005027  005482        
005028  005483        
005029  005484        
005030  005485  // timer control  related constants
005031  005486  #CONST
005032  005495  #END
005033  005496        
005034  005497        
005035  005498        
005036  005499  //------------------------------------------------------------------------------
005037  005500  // system WORD variables accesible with peekW and pokeW or pointer access
005038  005501  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005039  005502  // can also be accessed with peekW and pokeW
005040  005503  //------------------------------------------------------------------------------
005041  005504        
005042  005505  #CONST
005043  005600  #END
005044  005601        
005045  005602  #CONST
005046  005767  #END
005047  005768        
005048  005769        
005049  005770        
005050  005771  //==================================================================================================
005051  005772        
005052  005773        
005053  005774        
005054  000013      #ENDIF
005055  000014        
005056  000015        
005057  000016  //===========================================================================================
005058  000017        
005059  000018        
005060  000002        
005061  000003  // generated 11/06/2015 12:18:06
005062  000004        
005063  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005064  000006  #inherit "4DGL_16bitColours.fnc"
005065  000006  #inherit "4DGL_16bitColours.fnc"
005066  000004  */
005067  000005        
005068  000006        
005069  000007        
005070  000008  #CONST
005071  000149  #END
005072  000150        
005073  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005074  000008  #inherit "VisualConst.inc"
005075  000008  #inherit "VisualConst.inc"
005076  000001  // Line Patterns
005077  000002  #constant  LPCOARSE    0xF0F0
005078  000002  #constant  LPCOARSE    0xF0F0
005079  000003  #constant  LPMEDIUM    0x3333
005080  000003  #constant  LPMEDIUM    0x3333
005081  000004  #constant  LPFINE      0xAAAA
005082  000004  #constant  LPFINE      0xAAAA
005083  000005  #constant  LPDASHDOT   0x03CF
005084  000005  #constant  LPDASHDOT   0x03CF
005085  000006  #constant  LPDASHDOTDOT 0x0333
005086  000006  #constant  LPDASHDOTDOT 0x0333
005087  000007  #constant  LPSOLID     0x0000
005088  000007  #constant  LPSOLID     0x0000
005089  000009        
005090  000010        
file C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1Const.inc

005091  000011  #inherit "RepRap_Touchv1Const.inc"
005092  000011  #inherit "RepRap_Touchv1Const.inc"
005093  000001  // File generated 11/06/2015 12:17:49
005094  000002  // Warning! This is a generated file, any manual changes will be
005095  000003  // lost during the next generation.
005096  000004        
005097  000005  #constant  Strings1Count    0
005098  000005  #constant  Strings1Count    0
005099  000006  #constant  Strings1Size     1
005100  000006  #constant  Strings1Size     1
005101  000007  #constant  Strings3Count    1
005102  000007  #constant  Strings3Count    1
005103  000008  #constant  Strings3Size     18
005104  000008  #constant  Strings3Size     18
005105  000009  #constant  Strings20Count    1
005106  000009  #constant  Strings20Count    1
005107  000010  #constant  Strings20Size     25
005108  000010  #constant  Strings20Size     25
005109  000011  #constant  Strings4Count    1
005110  000011  #constant  Strings4Count    1
005111  000012  #constant  Strings4Size     25
005112  000012  #constant  Strings4Size     25
005113  000013  #constant  Strings6Count    1
005114  000013  #constant  Strings6Count    1
005115  000014  #constant  Strings6Size     31
005116  000014  #constant  Strings6Size     31
005117  000015  #constant  Strings2Count    0
005118  000015  #constant  Strings2Count    0
005119  000016  #constant  Strings2Size     1
005120  000016  #constant  Strings2Size     1
005121  000017  #constant  Strings0Count    1
005122  000017  #constant  Strings0Count    1
005123  000018  #constant  Strings0Size     7
005124  000018  #constant  Strings0Size     7
005125  000019  #constant  Strings9Count    0
005126  000019  #constant  Strings9Count    0
005127  000020  #constant  Strings9Size     1
005128  000020  #constant  Strings9Size     1
005129  000021  #constant  Strings34Count    0
005130  000021  #constant  Strings34Count    0
005131  000022  #constant  Strings34Size     1
005132  000022  #constant  Strings34Size     1
005133  000023  #constant  Strings36Count    0
005134  000023  #constant  Strings36Count    0
005135  000024  #constant  Strings36Size     1
005136  000024  #constant  Strings36Size     1
005137  000025  #constant  Strings37Count    0
005138  000025  #constant  Strings37Count    0
005139  000026  #constant  Strings37Size     1
005140  000026  #constant  Strings37Size     1
005141  000027  #constant  Strings12Count    1
005142  000027  #constant  Strings12Count    1
005143  000028  #constant  Strings12Size     19
005144  000028  #constant  Strings12Size     19
005145  000029  #constant  Strings14Count    1
005146  000029  #constant  Strings14Count    1
005147  000030  #constant  Strings14Size     23
005148  000030  #constant  Strings14Size     23
005149  000031  #constant  Strings16Count    1
005150  000031  #constant  Strings16Count    1
005151  000032  #constant  Strings16Size     31
005152  000032  #constant  Strings16Size     31
005153  000033  #constant  Strings15Count    1
005154  000033  #constant  Strings15Count    1
005155  000034  #constant  Strings15Size     24
005156  000034  #constant  Strings15Size     24
005157  000035  #constant  Strings17Count    1
005158  000035  #constant  Strings17Count    1
005159  000036  #constant  Strings17Size     33
005160  000036  #constant  Strings17Size     33
005161  000037  #constant  Strings18Count    1
005162  000037  #constant  Strings18Count    1
005163  000038  #constant  Strings18Size     32
005164  000038  #constant  Strings18Size     32
005165  000039  #constant  Strings19Count    1
005166  000039  #constant  Strings19Count    1
005167  000040  #constant  Strings19Size     29
005168  000040  #constant  Strings19Size     29
005169  000041  #constant  Strings21Count    1
005170  000041  #constant  Strings21Count    1
005171  000042  #constant  Strings21Size     35
005172  000042  #constant  Strings21Size     35
005173  000043  #constant  Strings11Count    1
005174  000043  #constant  Strings11Count    1
005175  000044  #constant  Strings11Size     33
005176  000044  #constant  Strings11Size     33
005177  000045  #constant  Strings22Count    1
005178  000045  #constant  Strings22Count    1
005179  000046  #constant  Strings22Size     20
005180  000046  #constant  Strings22Size     20
005181  000047  #constant  Strings23Count    1
005182  000047  #constant  Strings23Count    1
005183  000048  #constant  Strings23Size     16
005184  000048  #constant  Strings23Size     16
005185  000049  #constant  Strings24Count    1
005186  000049  #constant  Strings24Count    1
005187  000050  #constant  Strings24Size     26
005188  000050  #constant  Strings24Size     26
005189  000051  #constant  Strings25Count    1
005190  000051  #constant  Strings25Count    1
005191  000052  #constant  Strings25Size     10
005192  000052  #constant  Strings25Size     10
005193  000053  #constant  Strings26Count    1
005194  000053  #constant  Strings26Count    1
005195  000054  #constant  Strings26Size     10
005196  000054  #constant  Strings26Size     10
005197  000055  #constant  Strings27Count    1
005198  000055  #constant  Strings27Count    1
005199  000056  #constant  Strings27Size     11
005200  000056  #constant  Strings27Size     11
005201  000057  #constant  Strings5Count    1
005202  000057  #constant  Strings5Count    1
005203  000058  #constant  Strings5Size     37
005204  000058  #constant  Strings5Size     37
005205  000059  #constant  Strings28Count    1
005206  000059  #constant  Strings28Count    1
005207  000060  #constant  Strings28Size     40
005208  000060  #constant  Strings28Size     40
005209  000061  #constant  Strings29Count    1
005210  000061  #constant  Strings29Count    1
005211  000062  #constant  Strings29Size     32
005212  000062  #constant  Strings29Size     32
005213  000063  #constant  Strings30Count    0
005214  000063  #constant  Strings30Count    0
005215  000064  #constant  Strings30Size     1
005216  000064  #constant  Strings30Size     1
005217  000065  #constant  Strings31Count    0
005218  000065  #constant  Strings31Count    0
005219  000066  #constant  Strings31Size     1
005220  000066  #constant  Strings31Size     1
005221  000067  #constant  Strings32Count    0
005222  000067  #constant  Strings32Count    0
005223  000068  #constant  Strings32Size     1
005224  000068  #constant  Strings32Size     1
005225  000069  #constant  Strings35Count    1
005226  000069  #constant  Strings35Count    1
005227  000070  #constant  Strings35Size     36
005228  000070  #constant  Strings35Size     36
005229  000071  #constant  Strings10Count    1
005230  000071  #constant  Strings10Count    1
005231  000072  #constant  Strings10Size     15
005232  000072  #constant  Strings10Size     15
005233  000073  #constant  Strings7Count    0
005234  000073  #constant  Strings7Count    0
005235  000074  #constant  Strings7Size     1
005236  000074  #constant  Strings7Size     1
005237  000075  #constant  Strings8Count    0
005238  000075  #constant  Strings8Count    0
005239  000076  #constant  Strings8Size     1
005240  000076  #constant  Strings8Size     1
005241  000077  #constant  Strings38Count    0
005242  000077  #constant  Strings38Count    0
005243  000078  #constant  Strings38Size     1
005244  000078  #constant  Strings38Size     1
005245  000079  #constant  Strings39Count    0
005246  000079  #constant  Strings39Count    0
005247  000080  #constant  Strings39Size     1
005248  000080  #constant  Strings39Size     1
005249  000081  #constant  Strings40Count    1
005250  000081  #constant  Strings40Count    1
005251  000082  #constant  Strings40Size     7
005252  000082  #constant  Strings40Size     7
005253  000083  #constant  Strings41Count    1
005254  000083  #constant  Strings41Count    1
005255  000084  #constant  Strings41Size     7
005256  000084  #constant  Strings41Size     7
005257  000085  #constant  Strings42Count    1
005258  000085  #constant  Strings42Count    1
005259  000086  #constant  Strings42Size     7
005260  000086  #constant  Strings42Size     7
005261  000087  #constant  Strings43Count    0
005262  000087  #constant  Strings43Count    0
005263  000088  #constant  Strings43Size     1
005264  000088  #constant  Strings43Size     1
005265  000089  #constant  Strings44Count    0
005266  000089  #constant  Strings44Count    0
005267  000090  #constant  Strings44Size     1
005268  000090  #constant  Strings44Size     1
005269  000091  #constant  Strings45Count    0
005270  000091  #constant  Strings45Count    0
005271  000092  #constant  Strings45Size     1
005272  000092  #constant  Strings45Size     1
005273  000093  #constant  Strings13Count    1
005274  000093  #constant  Strings13Count    1
005275  000094  #constant  Strings13Size     8
005276  000094  #constant  Strings13Size     8
005277  000095  #constant  Strings48Count    1
005278  000095  #constant  Strings48Count    1
005279  000096  #constant  Strings48Size     10
005280  000096  #constant  Strings48Size     10
005281  000097  #constant  Strings46Count    1
005282  000097  #constant  Strings46Count    1
005283  000098  #constant  Strings46Size     8
005284  000098  #constant  Strings46Size     8
005285  000099  #constant  Strings49Count    1
005286  000099  #constant  Strings49Count    1
005287  000100  #constant  Strings49Size     10
005288  000100  #constant  Strings49Size     10
005289  000101  #constant  Strings47Count    1
005290  000101  #constant  Strings47Count    1
005291  000102  #constant  Strings47Size     8
005292  000102  #constant  Strings47Size     8
005293  000103  #constant  Strings50Count    1
005294  000103  #constant  Strings50Count    1
005295  000104  #constant  Strings50Size     10
005296  000104  #constant  Strings50Size     10
005297  000105  #constant  Strings51Count    0
005298  000105  #constant  Strings51Count    0
005299  000106  #constant  Strings51Size     1
005300  000106  #constant  Strings51Size     1
005301  000107  #constant  Strings52Count    0
005302  000107  #constant  Strings52Count    0
005303  000108  #constant  Strings52Size     1
005304  000108  #constant  Strings52Size     1
005305  000109  // object indexes into ImageControl
005306  000110  #CONST
005307  000287  #END
005308  000288        
005309  000289  #constant  Strings33Size     0
005310  000289  #constant  Strings33Size     0
005311  000290  #constant  Strings33StartH   0
005312  000290  #constant  Strings33StartH   0
005313  000291  #constant  Strings33StartL   0
005314  000291  #constant  Strings33StartL   0
005315  000292  #constant  Strings1StartH   0x0
005316  000292  #constant  Strings1StartH   0x0
005317  000293  #constant  Strings1StartL   0x0
005318  000293  #constant  Strings1StartL   0x0
005319  000294  #constant  Strings3StartH   0x0
005320  000294  #constant  Strings3StartH   0x0
005321  000295  #constant  Strings3StartL   0x200
005322  000295  #constant  Strings3StartL   0x200
005323  000296  #constant  Strings20StartH   0x0
005324  000296  #constant  Strings20StartH   0x0
005325  000297  #constant  Strings20StartL   0x400
005326  000297  #constant  Strings20StartL   0x400
005327  000298  #constant  Strings4StartH   0x0
005328  000298  #constant  Strings4StartH   0x0
005329  000299  #constant  Strings4StartL   0x600
005330  000299  #constant  Strings4StartL   0x600
005331  000300  #constant  Strings6StartH   0x0
005332  000300  #constant  Strings6StartH   0x0
005333  000301  #constant  Strings6StartL   0x800
005334  000301  #constant  Strings6StartL   0x800
005335  000302  #constant  Strings2StartH   0x0
005336  000302  #constant  Strings2StartH   0x0
005337  000303  #constant  Strings2StartL   0xA00
005338  000303  #constant  Strings2StartL   0xA00
005339  000304  #constant  Strings0StartH   0x0
005340  000304  #constant  Strings0StartH   0x0
005341  000305  #constant  Strings0StartL   0xC00
005342  000305  #constant  Strings0StartL   0xC00
005343  000306  #constant  Strings9StartH   0x0
005344  000306  #constant  Strings9StartH   0x0
005345  000307  #constant  Strings9StartL   0xE00
005346  000307  #constant  Strings9StartL   0xE00
005347  000308  #constant  Strings34StartH   0x0
005348  000308  #constant  Strings34StartH   0x0
005349  000309  #constant  Strings34StartL   0x1000
005350  000309  #constant  Strings34StartL   0x1000
005351  000310  #constant  Strings36StartH   0x0
005352  000310  #constant  Strings36StartH   0x0
005353  000311  #constant  Strings36StartL   0x1200
005354  000311  #constant  Strings36StartL   0x1200
005355  000312  #constant  Strings37StartH   0x0
005356  000312  #constant  Strings37StartH   0x0
005357  000313  #constant  Strings37StartL   0x1400
005358  000313  #constant  Strings37StartL   0x1400
005359  000314  #constant  Strings12StartH   0x0
005360  000314  #constant  Strings12StartH   0x0
005361  000315  #constant  Strings12StartL   0x1600
005362  000315  #constant  Strings12StartL   0x1600
005363  000316  #constant  Strings14StartH   0x0
005364  000316  #constant  Strings14StartH   0x0
005365  000317  #constant  Strings14StartL   0x1800
005366  000317  #constant  Strings14StartL   0x1800
005367  000318  #constant  Strings16StartH   0x0
005368  000318  #constant  Strings16StartH   0x0
005369  000319  #constant  Strings16StartL   0x1A00
005370  000319  #constant  Strings16StartL   0x1A00
005371  000320  #constant  Strings15StartH   0x0
005372  000320  #constant  Strings15StartH   0x0
005373  000321  #constant  Strings15StartL   0x1C00
005374  000321  #constant  Strings15StartL   0x1C00
005375  000322  #constant  Strings17StartH   0x0
005376  000322  #constant  Strings17StartH   0x0
005377  000323  #constant  Strings17StartL   0x1E00
005378  000323  #constant  Strings17StartL   0x1E00
005379  000324  #constant  Strings18StartH   0x0
005380  000324  #constant  Strings18StartH   0x0
005381  000325  #constant  Strings18StartL   0x2000
005382  000325  #constant  Strings18StartL   0x2000
005383  000326  #constant  Strings19StartH   0x0
005384  000326  #constant  Strings19StartH   0x0
005385  000327  #constant  Strings19StartL   0x2200
005386  000327  #constant  Strings19StartL   0x2200
005387  000328  #constant  Strings21StartH   0x0
005388  000328  #constant  Strings21StartH   0x0
005389  000329  #constant  Strings21StartL   0x2400
005390  000329  #constant  Strings21StartL   0x2400
005391  000330  #constant  Strings11StartH   0x0
005392  000330  #constant  Strings11StartH   0x0
005393  000331  #constant  Strings11StartL   0x2600
005394  000331  #constant  Strings11StartL   0x2600
005395  000332  #constant  Strings22StartH   0x0
005396  000332  #constant  Strings22StartH   0x0
005397  000333  #constant  Strings22StartL   0x2800
005398  000333  #constant  Strings22StartL   0x2800
005399  000334  #constant  Strings23StartH   0x0
005400  000334  #constant  Strings23StartH   0x0
005401  000335  #constant  Strings23StartL   0x2A00
005402  000335  #constant  Strings23StartL   0x2A00
005403  000336  #constant  Strings24StartH   0x0
005404  000336  #constant  Strings24StartH   0x0
005405  000337  #constant  Strings24StartL   0x2C00
005406  000337  #constant  Strings24StartL   0x2C00
005407  000338  #constant  Strings25StartH   0x0
005408  000338  #constant  Strings25StartH   0x0
005409  000339  #constant  Strings25StartL   0x2E00
005410  000339  #constant  Strings25StartL   0x2E00
005411  000340  #constant  Strings26StartH   0x0
005412  000340  #constant  Strings26StartH   0x0
005413  000341  #constant  Strings26StartL   0x3000
005414  000341  #constant  Strings26StartL   0x3000
005415  000342  #constant  Strings27StartH   0x0
005416  000342  #constant  Strings27StartH   0x0
005417  000343  #constant  Strings27StartL   0x3200
005418  000343  #constant  Strings27StartL   0x3200
005419  000344  #constant  Strings5StartH   0x0
005420  000344  #constant  Strings5StartH   0x0
005421  000345  #constant  Strings5StartL   0x3400
005422  000345  #constant  Strings5StartL   0x3400
005423  000346  #constant  Strings28StartH   0x0
005424  000346  #constant  Strings28StartH   0x0
005425  000347  #constant  Strings28StartL   0x3600
005426  000347  #constant  Strings28StartL   0x3600
005427  000348  #constant  Strings29StartH   0x0
005428  000348  #constant  Strings29StartH   0x0
005429  000349  #constant  Strings29StartL   0x3800
005430  000349  #constant  Strings29StartL   0x3800
005431  000350  #constant  Strings30StartH   0x0
005432  000350  #constant  Strings30StartH   0x0
005433  000351  #constant  Strings30StartL   0x3A00
005434  000351  #constant  Strings30StartL   0x3A00
005435  000352  #constant  Strings31StartH   0x0
005436  000352  #constant  Strings31StartH   0x0
005437  000353  #constant  Strings31StartL   0x3C00
005438  000353  #constant  Strings31StartL   0x3C00
005439  000354  #constant  Strings32StartH   0x0
005440  000354  #constant  Strings32StartH   0x0
005441  000355  #constant  Strings32StartL   0x3E00
005442  000355  #constant  Strings32StartL   0x3E00
005443  000356  #constant  Strings35StartH   0x0
005444  000356  #constant  Strings35StartH   0x0
005445  000357  #constant  Strings35StartL   0x4000
005446  000357  #constant  Strings35StartL   0x4000
005447  000358  #constant  Strings10StartH   0x0
005448  000358  #constant  Strings10StartH   0x0
005449  000359  #constant  Strings10StartL   0x4200
005450  000359  #constant  Strings10StartL   0x4200
005451  000360  #constant  Strings7StartH   0x0
005452  000360  #constant  Strings7StartH   0x0
005453  000361  #constant  Strings7StartL   0x4400
005454  000361  #constant  Strings7StartL   0x4400
005455  000362  #constant  Strings8StartH   0x0
005456  000362  #constant  Strings8StartH   0x0
005457  000363  #constant  Strings8StartL   0x4600
005458  000363  #constant  Strings8StartL   0x4600
005459  000364  #constant  Strings38StartH   0x0
005460  000364  #constant  Strings38StartH   0x0
005461  000365  #constant  Strings38StartL   0x4800
005462  000365  #constant  Strings38StartL   0x4800
005463  000366  #constant  Strings39StartH   0x0
005464  000366  #constant  Strings39StartH   0x0
005465  000367  #constant  Strings39StartL   0x4A00
005466  000367  #constant  Strings39StartL   0x4A00
005467  000368  #constant  Strings40StartH   0x0
005468  000368  #constant  Strings40StartH   0x0
005469  000369  #constant  Strings40StartL   0x4C00
005470  000369  #constant  Strings40StartL   0x4C00
005471  000370  #constant  Strings41StartH   0x0
005472  000370  #constant  Strings41StartH   0x0
005473  000371  #constant  Strings41StartL   0x4E00
005474  000371  #constant  Strings41StartL   0x4E00
005475  000372  #constant  Strings42StartH   0x0
005476  000372  #constant  Strings42StartH   0x0
005477  000373  #constant  Strings42StartL   0x5000
005478  000373  #constant  Strings42StartL   0x5000
005479  000374  #constant  Strings43StartH   0x0
005480  000374  #constant  Strings43StartH   0x0
005481  000375  #constant  Strings43StartL   0x5200
005482  000375  #constant  Strings43StartL   0x5200
005483  000376  #constant  Strings44StartH   0x0
005484  000376  #constant  Strings44StartH   0x0
005485  000377  #constant  Strings44StartL   0x5400
005486  000377  #constant  Strings44StartL   0x5400
005487  000378  #constant  Strings45StartH   0x0
005488  000378  #constant  Strings45StartH   0x0
005489  000379  #constant  Strings45StartL   0x5600
005490  000379  #constant  Strings45StartL   0x5600
005491  000380  #constant  Strings13StartH   0x0
005492  000380  #constant  Strings13StartH   0x0
005493  000381  #constant  Strings13StartL   0x5800
005494  000381  #constant  Strings13StartL   0x5800
005495  000382  #constant  Strings48StartH   0x0
005496  000382  #constant  Strings48StartH   0x0
005497  000383  #constant  Strings48StartL   0x5A00
005498  000383  #constant  Strings48StartL   0x5A00
005499  000384  #constant  Strings46StartH   0x0
005500  000384  #constant  Strings46StartH   0x0
005501  000385  #constant  Strings46StartL   0x5C00
005502  000385  #constant  Strings46StartL   0x5C00
005503  000386  #constant  Strings49StartH   0x0
005504  000386  #constant  Strings49StartH   0x0
005505  000387  #constant  Strings49StartL   0x5E00
005506  000387  #constant  Strings49StartL   0x5E00
005507  000388  #constant  Strings47StartH   0x0
005508  000388  #constant  Strings47StartH   0x0
005509  000389  #constant  Strings47StartL   0x6000
005510  000389  #constant  Strings47StartL   0x6000
005511  000390  #constant  Strings50StartH   0x0
005512  000390  #constant  Strings50StartH   0x0
005513  000391  #constant  Strings50StartL   0x6200
005514  000391  #constant  Strings50StartL   0x6200
005515  000392  #constant  Strings51StartH   0x0
005516  000392  #constant  Strings51StartH   0x0
005517  000393  #constant  Strings51StartL   0x6400
005518  000393  #constant  Strings51StartL   0x6400
005519  000394  #constant  Strings52StartH   0x0
005520  000394  #constant  Strings52StartH   0x0
005521  000395  #constant  Strings52StartL   0x6600
005522  000395  #constant  Strings52StartL   0x6600
005523  000396  #IFNOT EXISTS NOGLOBALS
005524  000397  var hndl ;
005525  000398  #ENDIF
005526  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005527  000013  #inherit "CLPrintStrings.inc"
005528  000013  #inherit "CLPrintStrings.inc"
005529  000001  func PrintStrings(var ID, var *msgid, var String)
005530  000002      var StringID, i, ch, offs32[2], res32[2];
005531  000003      StringID := oStringss[1+ID] ;
005532  000004      if (String)
005533  000005          stringsCV[ID] := -1 ;
005534  000006      else
005535  000007          stringsCV[ID] := msgid ;
005536  000008      endif
005537  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005538  000010      txt_FontID(hFonts[ID]) ;
005539  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005540  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005541  000013        
005542  000014      if (*(StringID + Ofs_String_Transparent))
005543  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005544  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005545  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005546  000018      else
005547  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005548  000020          gfx_Clipping(ON) ;
005549  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005550  000022          gfx_Clipping(OFF) ;
005551  000023        
005552  000024      endif
005553  000025        
005554  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005555  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005556  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005557  000029        
005558  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005559  000031        
005560  000032      if (String)
005561  000033          i := 0 ;
005562  000034          ch := msgid[i++] ;
005563  000035          while (ch != 0)
005564  000036              putch(ch) ;
005565  000037              ch := msgid[i++] ;
005566  000038          wend
005567  000039      else
005568  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005569  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005570  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005571  000043          uadd_3232(res32,res32,offs32) ;
005572  000044          file_Seek(hstrings, res32[1], res32[0]);
005573  000045          repeat
005574  000046              if (*(StringID + Ofs_String_Ansi))
005575  000047                  ch := file_GetC(hstrings) ;
005576  000048              else
005577  000049                  ch := file_GetW(hstrings) ;
005578  000050              endif
005579  000051              putch(ch) ;
005580  000052          until (ch == 0) ;
005581  000053      endif
005582  000054        
005583  000055  endfunc
005584  000056        
005585  000014        
005586  000015  #constant IPDatasize 22
005587  000015  #constant IPDatasize 22
005588  000016        
005589  000017  #CONST
005590  000021  #END
005591  000022        
005592  000023  #CONST
005593  000130  #END
005594  000131        
005595  000518  #END
5596  2204
5597  2205
5598  2206
5599  2207
5600  2208
5601  2209
5602  220A
5603  220B
5604  220C
5605  220D
5606  220E
5607  220F
5608  2210
5609  2211
5610  2212
5611  2213
5612  2214
5613  2215
5614  2216
5615  2217
5616  2218
5617  2219
5618  221A
5619  221B
5620  221C
5621  221D
5622  221E
5623  221F
5624  2220
5625  2221
5626  2222
5627  2223
5628  2224
5629  2225
5630  2226
5631  2227
5632  2228
5633  2229
5634  222A
5635  222B
5636  222C
5637  222D
5638  222E
5639  222F
5640  2230
5641  2231
5642  2232
5643  2233
5644  2234
5645  2235
5646  2236
5647  2237
5648  2238
5649  2239
5650  223A
5651  223B
5652  223C
5653  223D
5654  223E
5655  223F
5656  2240
5657  2241
5658  2242
5659  2243
5660  2244
5661  2245
5662  2246
5663  2247
5664  2248
5665  2249
5666  224A
5667  224B
5668  224C
5669  224D
5670  224E
5671  224F
5672  2250
5673  2251
5674  2252
5675  2253
5676  2254
5677  2255
5678  2256
5679  2257
5680  2258
5681  2259
5682  225A
5683  225B
5684  225C
5685  225D
5686  225E
5687  225F
5688  2260
5689  2261
5690  2262
5691  2263
5692  2264
5693  2265
5694  2266
5695  2267
5696  2268
5697  2269
5698  226A
5699  226B
5700  226C
5701  226D
5702  226E
5703  226F
5704  2270
5705  2271
5706  2272
5707  2273
5708  2274
5709  2275
5710  2276
5711  2277
5712  2278
5713  2279
5714  227A
5715  227B
5716  227C
5717  227D
5718  227E
5719  227F
5720  2280
5721  2281
5722  2282
5723  2283
5724  2284
5725  2285
5726  2286
5727  2287
5728  2288
5729  2289
5730  228A
5731  228B
5732  228C
5733  228D
5734  228E
5735  228F
5736  2290
5737  2291
5738  2292
5739  2293
5740  2294
5741  2295
5742  2296
5743  2297
5744  2298
5745  2299
5746  229A
5747  229B
5748  229C
5749  229D
5750  229E
5751  229F
5752  22A0
5753  22A1
5754  22A2
5755  22A3
5756  22A4
5757  22A5
5758  22A6
5759  22A7
5760  22A8
5761  22A9
5762  22AA
5763  22AB
5764  22AC
5765  22AD
5766  22AE
5767  22AF
5768  22B0
5769  22B1
5770  22B2
5771  22B3
5772  22B4
5773  22B5
5774  22B6
5775  22B7
5776  22B8
5777  22B9
5778  22BA
5779  22BB
5780  22BC
5781  22BD
5782  22BE
5783  22BF
5784  22C0
5785  22C1
5786  22C2
5787  22C3
5788  22C4
5789  22C5
5790  22C6
5791  22C7
5792  22C8
5793  22C9
5794  22CA
5795  22CB
5796  22CC
5797  22CD
5798  22CE
5799  22CF
5800  22D0
5801  22D1
5802  22D2
5803  22D3
5804  22D4
5805  22D5
5806  22D6
5807  22D7
5808  22D8
5809  22D9
5810  22DA
5811  22DB
5812  22DC
5813  22DD
5814  22DE
5815  22DF
5816  22E0
5817  22E1
5818  22E2
5819  22E3
5820  22E4
5821  22E5
5822  22E6
5823  22E7
5824  22E8
5825  22E9
5826  22EA
5827  22EB
5828  22EC
5829  22ED
5830  22EE
5831  22EF
5832  22F0
5833  22F1
5834  22F2
5835  22F3
5836  22F4
5837  22F5
5838  22F6
5839  22F7
5840  22F8
5841  22F9
5842  22FA
5843  22FB
5844  22FC
5845  22FD
5846  22FE
5847  22FF
5848  2300
5849  2301
5850  2302
5851  2303
5852  2304
5853  2305
5854  2306
5855  2307
5856  2308
5857  2309
5858  230A
5859  230B
5860  230C
5861  230D
5862  230E
5863  230F
5864  2310
5865  2311
5866  2312
5867  2313
5868  2314
5869  2315
5870  2316
5871  2317
5872  2318
5873  2319
5874  231A
5875  231B
5876  231C
5877  231D
5878  231E
5879  231F
5880  2320
5881  2321
5882  2322
5883  2323
5884  2324
5885  2325
5886  2326
5887  2327
5888  2328
5889  2329
5890  232A
5891  232B
5892  232C
5893  232D
5894  232E
5895  232F
5896  2330
5897  2331
5898  2332
5899  2333
5900  2334
5901  2335
5902  2336
5903  2337
5904  2338
5905  2339
5906  233A
5907  233B
5908  233C
5909  233D
5910  233E
5911  233F
5912  2340
5913  2341
5914  2342
5915  2343
5916  2344
5917  2345
5918  2346
5919  2347
5920  2348
5921  2349
5922  234A
5923  234B
5924  234C
5925  234D
5926  234E
5927  234F
5928  2350
5929  2351
5930  2352
5931  2353
5932  2354
5933  2355
5934  2356
5935  2357
5936  2358
5937  2359
5938  235A
5939  235B
5940  235C
5941  235D
5942  235E
5943  235F
5944  2360
5945  2361
5946  2362
5947  2363
5948  2364
5949  2365
5950  2366
5951  2367
5952  2368
5953  2369
5954  236A
5955  236B
5956  236C
5957  236D
5958  236E
5959  236F
5960  2370
5961  2371
5962  2372
5963  2373
5964  2374
5965  2375
5966  2376
5967  2377
5968  2378
5969  2379
5970  237A
5971  237B
5972  237C
5973  237D
5974  237E
5975  237F
5976  2380
5977  2381
5978  2382
5979  2383
5980  2384
5981  2385
5982  2386
5983  2387
5984  2388
5985  2389
5986  238A
5987  238B
5988  238C
5989  238D
5990  238E
5991  238F
5992  2390
5993  2391
5994  2392
5995  2393
5996  2394
5997  2395
5998  2396
5999  2397
6000  2398
6001  2399
6002  239A
6003  239B
6004  239C
6005  239D
6006  239E
6007  239F
6008  23A0
6009  23A1
6010  23A2
6011  23A3
6012  23A4
6013  23A5
6014  23A6
6015  23A7
6016  23A8
6017  23A9
6018  23AA
6019  23AB
6020  23AC
6021  23AD
6022  23AE
6023  23AF
6024  23B0
6025  23B1
6026  23B2
6027  23B3
6028  23B4
6029  23B5
6030  23B6
6031  23B7
6032  23B8
6033  23B9
6034  23BA
6035  23BB
6036  23BC
6037  23BD
6038  23BE
6039  23BF
6040  23C0
6041  23C1
6042  23C2
6043  23C3
6044  23C4
6045  23C5
6046  23C6
6047  23C7
6048  23C8
6049  23C9
6050  23CA
6051  23CB
6052  23CC
6053  23CD
6054  23CE
6055  23CF
6056  23D0
6057  23D1
6058  23D2
6059  23D3
6060  23D4
6061  23D5
6062  23D6
6063  23D7
6064  23D8
6065  23D9
6066  23DA
6067  23DB
6068  23DC
6069  23DD
6070  23DE
6071  23DF
6072  23E0
6073  23E1
6074  23E2
6075  23E3
6076  23E4
6077  23E5
6078  23E6
6079  23E7
6080  23E8
6081  23E9
6082  23EA
6083  23EB
6084  23EC
6085  23ED
6086  23EE
6087  23EF
6088  23F0
6089  23F1
6090  23F2
6091  23F3
6092  23F4
6093  23F5
6094  23F6
6095  23F7
6096  23F8
6097  23F9
6098  23FA
6099  23FB
6100  23FC
6101  23FD
6102  23FE
6103  23FF
6104  2400
6105  2401
6106  2402
6107  2403
6108  2404
6109  2405
6110  2406
6111  2407
6112  2408
6113  2409
6114  240A
6115  240B
6116  240C
6117  240D
6118  240E
6119  240F
6120  2410
6121  2411
6122  2412
6123  2413
6124  2414
6125  2415
6126  2416
6127  2417
6128  2418
6129  2419
6130  241A
6131  241B
6132  241C
6133  241D
6134  241E
6135  241F
6136  2420
6137  2421
6138  2422
6139  2423
6140  2424
6141  2425
6142  2426
6143  2427
6144  2428
6145  2429
6146  242A
6147  242B
6148  242C
6149  242D
6150  242E
6151  242F
6152  2430
6153  2431
6154  2432
6155  2433
6156  2434
6157  2435
6158  2436
6159  2437
6160  2438
6161  2439
6162  243A
6163  243B
6164  243C
6165  243D
6166  243E
6167  243F
6168  2440
6169  2441
6170  2442
6171  2443
6172  2444
6173  2445
6174  2446
6175  2447
6176  2448
6177  2449
6178  244A
6179  244B
6180  244C
6181  244D
6182  244E
6183  244F
6184  2450
6185  2451
6186  2452
6187  2453
6188  2454
6189  2455
6190  2456
6191  2457
6192  2458
6193  2459
6194  245A
6195  245B
6196  245C
6197  245D
6198  245E
6199  245F
6200  2460
6201  2461
6202  2462
6203  2463
6204  2464
6205  2465
6206  2466
6207  2467
6208  2468
6209  2469
6210  246A
6211  246B
6212  246C
6213  246D
6214  246E
6215  246F
6216  2470
6217  2471
6218  2472
6219  2473
6220  2474
6221  2475
6222  2476
6223  2477
6224  2478
6225  2479
6226  247A
6227  247B
6228  247C
6229  247D
6230  247E
6231  247F
6232  2480
6233  2481
6234  2482
6235  2483
6236  2484
6237  2485
6238  2486
6239  2487
6240  2488
6241  2489
6242  248A
6243  248B
6244  248C
6245  248D
6246  248E
6247  248F
6248  2490
6249  2491
6250  2492
6251  2493
6252  2494
6253  2495
6254  2496
6255  2497
6256  2498
6257  2499
6258  249A
6259  249B
6260  249C
6261  249D
6262  249E
6263  249F
6264  24A0
6265  24A1
6266  24A2
6267  24A3
6268  24A4
6269  24A5
6270  24A6
6271  24A7
6272  24A8
6273  24A9
6274  24AA
6275  24AB
6276  24AC
6277  24AD
6278  24AE
6279  24AF
6280  24B0
6281  24B1
6282  24B2
6283  24B3
6284  24B4
6285  24B5
6286  24B6
6287  24B7
6288  24B8
6289  24B9
6290  24BA
6291  24BB
6292  24BC
6293  24BD
6294  24BE
6295  24BF
6296  24C0
6297  24C1
6298  24C2
6299  24C3
6300  24C4
6301  24C5
6302  24C6
6303  24C7
6304  24C8
6305  24C9
6306  24CA
6307  24CB
6308  24CC
6309  24CD
6310  24CE
6311  24CF
6312  24D0
6313  24D1
6314  24D2
6315  24D3
6316  24D4
6317  24D5
6318  24D6
6319  24D7
6320  24D8
6321  24D9
6322  24DA
6323  24DB
6324  24DC
6325  24DD
6326  24DE
6327  24DF
6328  24E0
6329  24E1
6330  24E2
6331  24E3
6332  24E4
6333  24E5
6334  24E6
6335  24E7
6336  24E8
6337  24E9
6338  24EA
6339  24EB
6340  24EC
6341  24ED
6342  24EE
6343  24EF
6344  24F0
6345  24F1
6346  24F2
6347  24F3
6348  24F4
6349  24F5
6350  24F6
6351  24F7
6352  24F8
6353  24F9
6354  24FA
6355  24FB
6356  24FC
6357  24FD
6358  24FE
6359  24FF
6360  2500
6361  2501
6362  2502
6363  2503
6364  2504
6365  2505
6366  2506
6367  2507
6368  2508
6369  2509
6370  250A
6371  250B
6372  250C
6373  250D
6374  250E
6375  250F
6376  2510
6377  2511
6378  2512
6379  2513
6380  2514
6381  2515
6382  2516
6383  2517
6384  2518
6385  2519
6386  251A
6387  251B
6388  251C
6389  251D
6390  251E
6391  251F
6392  2520
6393  2521
6394  2522
6395  2523
6396  2524
6397  2525
6398  2526
6399  2527
6400  2528
6401  2529
6402  252A
6403  252B
6404  252C
6405  252D
6406  252E
6407  252F
6408  2530
6409  2531
6410  2532
6411  2533
6412  2534
6413  2535
6414  2536
6415  2537
6416  2538
6417  2539
6418  253A
6419  253B
6420  253C
6421  253D
6422  253E
6423  253F
6424  2540
6425  2541
6426  2542
6427  2543
6428  2544
6429  2545
6430  2546
6431  2547
6432  2548
6433  2549
6434  254A
6435  254B
6436  254C
6437  254D
6438  254E
6439  254F
6440  2550
6441  2551
6442  2552
6443  2553
6444  2554
6445  2555
6446  2556
6447  2557
6448  2558
6449  2559
6450  255A
6451  255B
6452  255C
6453  255D
6454  255E
6455  255F
6456  2560
6457  2561
6458  2562
6459  2563
6460  2564
6461  2565
6462  2566
6463  2567
6464  2568
6465  2569
6466  256A
6467  256B
6468  256C
6469  256D
6470  256E
6471  256F
6472  2570
6473  2571
6474  2572
6475  2573
6476  2574
6477  2575
6478  2576
6479  2577
6480  2578
6481  2579
6482  257A
6483  257B
6484  257C
6485  257D
6486  257E
6487  257F
6488  2580
6489  2581
6490  2582
6491  2583
6492  2584
6493  2585
6494  2586
6495  2587
6496  2588
6497  2589
6498  258A
6499  258B
6500  258C
6501  258D
6502  258E
6503  258F
6504  2590
6505  2591
6506  2592
6507  2593
6508  2594
6509  2595
6510  2596
6511  2597
6512  2598
6513  2599
6514  259A
6515  259B
6516  259C
6517  259D
6518  259E
6519  259F
6520  25A0
6521  25A1
6522  25A2
6523  25A3
6524  25A4
6525  25A5
6526  25A6
6527  25A7
6528  25A8
6529  25A9
6530  25AA
6531  25AB
6532  25AC
6533  25AD
6534  25AE
6535  25AF
6536  25B0
6537  25B1
6538  25B2
6539  25B3
6540  25B4
6541  25B5
6542  25B6
6543  25B7
6544  25B8
6545  25B9
6546  25BA
6547  25BB
6548  25BC
6549  25BD
6550  25BE
6551  25BF
6552  25C0
6553  25C1
6554  25C2
6555  25C3
6556  25C4
6557  25C5
6558  25C6
6559  25C7
6560  25C8
6561  25C9
6562  25CA
6563  25CB
6564  25CC
6565  25CD
6566  25CE
6567  25CF
6568  25D0
6569  25D1
6570  25D2
6571  25D3
6572  25D4
6573  25D5
6574  25D6
6575  25D7
6576  25D8
6577  25D9
6578  25DA
6579  25DB
6580  25DC
6581  25DD
6582  25DE
6583  25DF
6584  25E0
6585  25E1
6586  25E2
6587  25E3
6588  25E4
6589  25E5
6590  25E6
6591  25E7
6592  25E8
6593  25E9
6594  25EA
6595  25EB
6596  25EC
6597  25ED
6598  25EE
6599  25EF
6600  25F0
6601  25F1
6602  25F2
6603  25F3
6604  25F4
6605  25F5
6606  25F6
6607  25F7
6608  25F8
6609  25F9
6610  25FA
6611  25FB
6612  25FC
6613  25FD
6614  25FE
6615  25FF
6616  2600
6617  2601
6618  2602
6619  2603
6620  2604
6621  2605
6622  2606
6623  2607
6624  2608
6625  2609
6626  260A
6627  260B
6628  260C
6629  260D
6630  260E
6631  260F
6632  2610
6633  2611
6634  2612
6635  2613
6636  2614
6637  2615
6638  2616
6639  2617
6640  2618
6641  2619
6642  261A
6643  261B
6644  261C
6645  261D
6646  261E
6647  261F
6648  2620
6649  2621
6650  2622
6651  2623
6652  2624
6653  2625
6654  2626
6655  2627
6656  2628
6657  2629
6658  262A
6659  262B
6660  262C
6661  262D
6662  262E
6663  262F
6664  2630
6665  2631
6666  2632
6667  2633
6668  2634
6669  2635
6670  2636
6671  2637
6672  2638
6673  2639
6674  263A
6675  263B
6676  263C
6677  263D
6678  263E
6679  263F
6680  2640
6681  2641
6682  2642
6683  2643
6684  2644
6685  2645
6686  2646
6687  2647
6688  2648
6689  2649
6690  264A
6691  264B
6692  264C
6693  264D
6694  264E
6695  264F
6696  2650
6697  2651
6698  2652
6699  2653
6700  2654
6701  2655
6702  2656
6703  2657
6704  2658
6705  2659
6706  265A
6707  265B
6708  265C
6709  265D
6710  265E
6711  265F
6712  2660
6713  2661
6714  2662
6715  2663
6716  2664
6717  2665
6718  2666
6719  2667
6720  2668
6721  2669
6722  266A
6723  266B
6724  266C
6725  266D
6726  266E
6727  266F
6728  2670
6729  2671
6730  2672
6731  2673
6732  2674
6733  2675
6734  2676
6735  2677
6736  2678
6737  2679
6738  267A
6739  267B
6740  267C
6741  267D
6742  267E
6743  267F
6744  2680
6745  2681
6746  2682
6747  2683
6748  2684
6749  2685
6750  2686
6751  2687
6752  2688
6753  2689
6754  268A
6755  268B
6756  268C
6757  268D
6758  268E
6759  268F
6760  2690
6761  2691
6762  2692
6763  2693
6764  2694
6765  2695
6766  2696
6767  2697
6768  2698
6769  2699
6770  269A
6771  269B
6772  269C
6773  269D
6774  269E
6775  269F
6776  26A0
6777  26A1
6778  26A2
6779  26A3
6780  26A4
6781  26A5
6782  26A6
6783  26A7
6784  26A8
6785  26A9
6786  26AA
6787  26AB
6788  26AC
6789  26AD
6790  26AE
6791  26AF
6792  26B0
6793  26B1
6794  26B2
6795  26B3
6796  26B4
6797  26B5
6798  26B6
6799  26B7
6800  26B8
6801  26B9
6802  26BA
6803  26BB
6804  26BC
6805  26BD
6806  26BE
6807  26BF
6808  26C0
6809  26C1
6810  26C2
6811  26C3
6812  26C4
6813  26C5
6814  26C6
6815  26C7
6816  26C8
6817  26C9
6818  26CA
6819  26CB
6820  26CC
6821  26CD
6822  26CE
6823  26CF
6824  26D0
6825  26D1
6826  26D2
6827  26D3
6828  26D4
6829  26D5
6830  26D6
6831  26D7
6832  26D8
6833  26D9
6834  26DA
6835  26DB
6836  26DC
6837  26DD
6838  26DE
6839  26DF
6840  26E0
6841  26E1
6842  26E2
6843  26E3
6844  26E4
6845  26E5
6846  26E6
6847  26E7
6848  26E8
6849  26E9
6850  26EA
6851  26EB
6852  26EC
6853  26ED
6854  26EE
6855  26EF
6856  26F0
6857  26F1
6858  26F2
6859  26F3
6860  26F4
6861  26F5
6862  26F6
6863  26F7
6864  26F8
6865  26F9
6866  26FA
6867  26FB
6868  26FC
6869  26FD
6870  26FE
6871  26FF
6872  2700
6873  2701
6874  2702
6875  2703
6876  2704
6877  2705
6878  2706
6879  2707
6880  2708
6881  2709
6882  270A
6883  270B
6884  270C
6885  270D
6886  270E
6887  270F
6888  2710
6889  2711
6890  2712
6891  2713
6892  2714
6893  2715
6894  2716
6895  2717
6896  2718
6897  2719
6898  271A
6899  271B
6900  271C
6901  271D
6902  271E
6903  271F
6904  2720
6905  2721
6906  2722
6907  2723
6908  2724
6909  2725
6910  2726
6911  2727
6912  2728
6913  2729
6914  272A
6915  272B
6916  272C
6917  272D
6918  272E
6919  272F
6920  2730
6921  2731
6922  2732
6923  2733
6924  2734
6925  2735
6926  2736
6927  2737
6928  2738
6929  2739
6930  273A
6931  273B
6932  273C
6933  273D
6934  273E
6935  273F
6936  2740
6937  2741
6938  2742
6939  2743
6940  2744
6941  2745
6942  2746
6943  2747
6944  2748
6945  2749
6946  274A
6947  274B
6948  274C
6949  274D
6950  274E
6951  274F
6952  2750
6953  2751
6954  2752
6955  2753
6956  2754
6957  2755
6958  2756
6959  2757
6960  2758
6961  2759
6962  275A
6963  275B
6964  275C
6965  275D
6966  275E
6967  275F
6968  2760
6969  2761
6970  2762
6971  2763
6972  2764
6973  2765
6974  2766
6975  2767
6976  2768
6977  2769
6978  276A
6979  276B
6980  276C
6981  276D
6982  276E
6983  276F
6984  2770
6985  2771
6986  2772
6987  2773
6988  2774
6989  2775
6990  2776
6991  2777
6992  2778
6993  2779
6994  277A
6995  277B
6996  277C
6997  277D
6998  277E
6999  277F
7000  2780
7001  2781
7002  2782
7003  2783
7004  2784
7005  2785
7006  2786
7007  2787
7008  2788
7009  2789
7010  278A
7011  278B
7012  278C
7013  278D
7014  278E
7015  278F
7016  2790
7017  2791
7018  2792
7019  2793
7020  2794
7021  2795
7022  2796
7023  2797
7024  2798
7025  2799
7026  279A
7027  279B
7028  279C
7029  279D
7030  279E
7031  279F
7032  27A0
7033  27A1
7034  27A2
7035  27A3
7036  27A4
7037  27A5
7038  27A6
7039  27A7
7040  27A8
7041  27A9
7042  27AA
7043  27AB
7044  27AC
7045  27AD
7046  27AE
7047  27AF
7048  27B0
7049  27B1
7050  27B2
7051  27B3
7052  27B4
7053  27B5
7054  27B6
7055  27B7
7056  27B8
7057  27B9
7058  27BA
7059  27BB
7060  27BC
7061  27BD
7062  27BE
7063  27BF
7064  27C0
7065  27C1
7066  27C2
7067  27C3
7068  27C4
7069  27C5
7070  27C6
7071  27C7
7072  27C8
7073  27C9
7074  27CA
7075  27CB
7076  27CC
7077  27CD
7078  27CE
7079  27CF
7080  27D0
7081  27D1
7082  27D2
7083  27D3
7084  27D4
7085  27D5
7086  27D6
7087  27D7
7088  27D8
7089  27D9
7090  27DA
7091  27DB
7092  27DC
7093  27DD
7094  27DE
7095  27DF
7096  27E0
7097  27E1
7098  27E2
7099  27E3
7100  27E4
7101  27E5
7102  27E6
7103  27E7
7104  27E8
7105  27E9
7106  27EA
7107  27EB
7108  27EC
7109  27ED
7110  27EE
7111  27EF
7112  27F0
7113  27F1
7114  27F2
7115  27F3
7116  27F4
7117  27F5
7118  27F6
7119  27F7
7120  27F8
7121  27F9
7122  27FA
7123  27FB
7124  27FC
7125  27FD
7126  27FE
7127  27FF
7128  2800
7129  2801
7130  2802
7131  2803
7132  2804
7133  2805
7134  2806
7135  2807
7136  2808
7137  2809
7138  280A
7139  280B
7140  280C
7141  280D
7142  280E
7143  280F
7144  2810
7145  2811
7146  2812
7147  2813
7148  2814
7149  2815
7150  2816
7151  2817
7152  2818
7153  2819
7154  281A
7155  281B
7156  281C
7157  281D
7158  281E
7159  281F
7160  2820
7161  2821
7162  2822
7163  2823
7164  2824
7165  2825
7166  2826
7167  2827
7168  2828
7169  2829
7170  282A
7171  282B
7172  282C
7173  282D
7174  282E
7175  282F
7176  2830
7177  2831
7178  2832
7179  2833
7180  2834
7181  2835
7182  2836
7183  2837
7184  2838
7185  2839
7186  283A
7187  283B
7188  283C
7189  283D
7190  283E
7191  283F
7192  2840
7193  2841
7194  2842
7195  2843
7196  2844
7197  2845
7198  2846
7199  2847
7200  2848
7201  2849
7202  284A
7203  284B
7204  284C
7205  284D
7206  284E
7207  284F
7208  2850
7209  2851
7210  2852
7211  2853
7212  2854
7213  2855
7214  2856
7215  2857
7216  2858
7217  2859
7218  285A
7219  285B
7220  285C
7221  285D
7222  285E
7223  285F
7224  2860
7225  2861
7226  2862
7227  2863
7228  2864
7229  2865
7230  2866
7231  2867
7232  2868
7233  2869
7234  286A
7235  286B
7236  286C
7237  286D
7238  286E
7239  286F
7240  2870
7241  2871
7242  2872
7243  2873
7244  2874
7245  2875
7246  2876
7247  2877
7248  2878
7249  2879
7250  287A
7251  287B
7252  287C
7253  287D
7254  287E
7255  287F
7256  2880
7257  2881
7258  2882
7259  2883
7260  2884
7261  2885
7262  2886
7263  2887
7264  2888
7265  2889
7266  288A
7267  288B
7268  288C
7269  288D
7270  288E
7271  288F
7272  2890
7273  2891
7274  2892
7275  2893
7276  2894
7277  2895
7278  2896
7279  2897
7280  2898
7281  2899
7282  289A
7283  289B
7284  289C
7285  289D
7286  289E
7287  289F
7288  28A0
7289  28A1
7290  28A2
7291  28A3
7292  28A4
7293  28A5
7294  28A6
7295  28A7
7296  28A8
7297  28A9
7298  28AA
7299  28AB
7300  28AC
7301  28AD
7302  28AE
7303  28AF
7304  28B0
7305  28B1
7306  28B2
7307  28B3
7308  28B4
7309  28B5
7310  28B6
7311  28B7
7312  28B8
7313  28B9
7314  28BA
7315  28BB
7316  28BC
7317  28BD
7318  28BE
7319  28BF
7320  28C0
7321  28C1
7322  28C2
7323  28C3
7324  28C4
7325  28C5
7326  28C6
7327  28C7
7328  28C8
7329  28C9
7330  28CA
7331  28CB
7332  28CC
7333  28CD
7334  28CE
7335  28CF
7336  28D0
7337  28D1
7338  28D2
7339  28D3
7340  28D4
7341  28D5
7342  28D6
7343  28D7
7344  28D8
7345  28D9
7346  28DA
7347  28DB
7348  28DC
7349  28DD
7350  28DE
7351  28DF
7352  28E0
7353  28E1
7354  28E2
7355  28E3
7356  28E4
7357  28E5
7358  28E6
7359  28E7
7360  28E8
7361  28E9
7362  28EA
7363  28EB
7364  28EC
7365  28ED
7366  28EE
7367  28EF
7368  28F0
7369  28F1
7370  28F2
7371  28F3
7372  28F4
7373  28F5
7374  28F6
7375  28F7
7376  28F8
7377  28F9
7378  28FA
7379  28FB
7380  28FC
7381  28FD
7382  28FE
7383  28FF
7384  2900
7385  2901
7386  2902
7387  2903
7388  2904
7389  2905
7390  2906
7391  2907
7392  2908
7393  2909
7394  290A
7395  290B
7396  290C
7397  290D
7398  290E
7399  290F
7400  2910
7401  2911
7402  2912
7403  2913
7404  2914
7405  2915
7406  2916
7407  2917
7408  2918
7409  2919
7410  291A
7411  291B
7412  291C
7413  291D
7414  291E
7415  291F
7416  2920
7417  2921
7418  2922
7419  2923
7420  2924
7421  2925
7422  2926
7423  2927
7424  2928
7425  2929
7426  292A
7427  292B
7428  292C
7429  292D
7430  292E
7431  292F
7432  2930
7433  2931
7434  2932
7435  2933
7436  2934
7437  2935
7438  2936
7439  2937
7440  2938
7441  2939
7442  293A
7443  293B
7444  293C
7445  293D
7446  293E
7447  293F
7448  2940
7449  2941
7450  2942
7451  2943
7452  2944
7453  2945
7454  2946
7455  2947
7456  2948
7457  2949
7458  294A
7459  294B
7460  294C
7461  294D
7462  294E
7463  294F
7464  2950
7465  2951
7466  2952
7467  2953
7468  2954
7469  2955
7470  2956
7471  2957
7472  2958
7473  2959
7474  295A
7475  295B
7476  295C
7477  295D
7478  295E
7479  295F
7480  2960
7481  2961
7482  2962
7483  2963
7484  2964
7485  2965
7486  2966
7487  2967
7488  2968
7489  2969
7490  296A
7491  296B
7492  296C
7493  296D
7494  296E
7495  296F
7496  2970
7497  2971
7498  2972
7499  2973
7500  2974
7501  2975
7502  2976
7503  2977
7504  2978
7505  2979
7506  297A
7507  297B
7508  297C
7509  297D
7510  297E
7511  297F
7512  2980
7513  2981
7514  2982
7515  2983
7516  2984
7517  2985
7518  2986
7519  2987
7520  2988
7521  2989
7522  298A
7523  298B
7524  298C
7525  298D
7526  298E
7527  298F
7528  2990
7529  2991
7530  2992
7531  2993
7532  2994
7533  2995
7534  2996
7535  2997
7536  2998
7537  2999
7538  299A
7539  299B
7540  299C
7541  299D
7542  299E
7543  299F
7544  29A0
7545  29A1
7546  29A2
7547  29A3
7548  29A4
7549  29A5
7550  29A6
7551  29A7
7552  29A8
7553  29A9
7554  29AA
7555  29AB
7556  29AC
7557  29AD
7558  29AE
7559  29AF
7560  29B0
7561  29B1
7562  29B2
7563  29B3
7564  29B4
7565  29B5
7566  29B6
7567  29B7
7568  29B8
7569  29B9
7570  29BA
7571  29BB
7572  29BC
7573  29BD
7574  29BE
7575  29BF
7576  29C0
7577  29C1
7578  29C2
7579  29C3
7580  29C4
7581  29C5
7582  29C6
7583  29C7
7584  29C8
7585  29C9
7586  29CA
7587  29CB
7588  29CC
7589  29CD
7590  29CE
7591  29CF
7592  29D0
7593  29D1
7594  29D2
7595  29D3
7596  29D4
7597  29D5
7598  29D6
7599  29D7
7600  29D8
7601  29D9
7602  29DA
7603  29DB
7604  29DC
7605  29DD
7606  29DE
7607  29DF
7608  29E0
7609  29E1
7610  29E2
7611  29E3
7612  29E4
7613  29E5
7614  29E6
7615  29E7
7616  29E8
7617  29E9
7618  29EA
7619  29EB
7620  29EC
7621  29ED
7622  29EE
7623  29EF
7624  29F0
7625  29F1
7626  29F2
7627  29F3
7628  29F4
7629  29F5
7630  29F6
7631  29F7
7632  29F8
7633  29F9
7634  29FA
7635  29FB
7636  29FC
7637  29FD
7638  29FE
7639  29FF
7640  2A00
7641  2A01
7642  2A02
7643  2A03
7644  2A04
7645  2A05
7646  2A06
7647  2A07
7648  2A08
7649  2A09
7650  2A0A
7651  2A0B
7652  2A0C
7653  2A0D
7654  2A0E
7655  2A0F
7656  2A10
7657  2A11
7658  2A12
7659  2A13
7660  2A14
7661  2A15
7662  2A16
7663  2A17
7664  2A18
7665  2A19
7666  2A1A
7667  2A1B
7668  2A1C
7669  2A1D
7670  2A1E
7671  2A1F
7672  2A20
7673  2A21
7674  2A22
7675  2A23
7676  2A24
7677  2A25
7678  2A26
7679  2A27
7680  2A28
7681  2A29
7682  2A2A
7683  2A2B
7684  2A2C
7685  2A2D
7686  2A2E
7687  2A2F
7688  2A30
7689  2A31
7690  2A32
7691  2A33
7692  2A34
7693  2A35
7694  2A36
7695  2A37
7696  2A38
7697  2A39
7698  2A3A
7699  2A3B
7700  2A3C
7701  2A3D
7702  2A3E
7703  2A3F
7704  2A40
7705  2A41
7706  2A42
7707  2A43
7708  2A44
7709  2A45
7710  2A46
7711  2A47
7712  2A48
7713  2A49
7714  2A4A
7715  2A4B
7716  2A4C
7717  2A4D
7718  2A4E
7719  2A4F
7720  2A50
7721  2A51
7722  2A52
7723  2A53
7724  2A54
7725  2A55
7726  2A56
7727  2A57
7728  2A58
7729  2A59
7730  2A5A
7731  2A5B
7732  2A5C
7733  2A5D
7734  2A5E
7735  2A5F
7736  2A60
7737  2A61
7738  2A62
7739  2A63
7740  2A64
7741  2A65
7742  2A66
7743  2A67
7744  2A68
7745  2A69
7746  2A6A
7747  2A6B
7748  2A6C
7749  2A6D
7750  2A6E
7751  2A6F
7752  2A70
7753  2A71
7754  2A72
7755  2A73
7756  2A74
7757  2A75
7758  2A76
7759  2A77
7760  2A78
7761  2A79
7762  2A7A
7763  2A7B
7764  2A7C
7765  2A7D
7766  2A7E
7767  2A7F
7768  2A80
7769  2A81
7770  2A82
7771  2A83
7772  2A84
7773  2A85
7774  2A86
7775  2A87
7776  2A88
7777  2A89
7778  2A8A
7779  2A8B
7780  2A8C
7781  2A8D
7782  2A8E
7783  2A8F
7784  2A90
7785  2A91
7786  2A92
7787  2A93
7788  2A94
7789  2A95
7790  2A96
7791  2A97
7792  2A98
7793  2A99
7794  2A9A
7795  2A9B
7796  2A9C
7797  2A9D
7798  2A9E
7799  2A9F
7800  2AA0
7801  2AA1
7802  2AA2
7803  2AA3
7804  2AA4
7805  2AA5
7806  2AA6
7807  2AA7
7808  2AA8
7809  2AA9
7810  2AAA
7811  2AAB
7812  2AAC
7813  2AAD
7814  2AAE
7815  2AAF
7816  2AB0
7817  2AB1
7818  2AB2
7819  2AB3
7820  2AB4
7821  2AB5
7822  2AB6
7823  2AB7
7824  2AB8
7825  2AB9
7826  2ABA
7827  2ABB
7828  2ABC
7829  2ABD
7830  2ABE
7831  2ABF
7832  2AC0
7833  2AC1
7834  2AC2
7835  2AC3
7836  2AC4
7837  2AC5
7838  2AC6
7839  2AC7
7840  2AC8
7841  2AC9
7842  2ACA
7843  2ACB
7844  2ACC
7845  2ACD
7846  2ACE
7847  2ACF
7848  2AD0
7849  2AD1
7850  2AD2
7851  2AD3
7852  2AD4
7853  2AD5
7854  2AD6
7855  2AD7
7856  2AD8
7857  2AD9
7858  2ADA
7859  2ADB
7860  2ADC
7861  2ADD
7862  2ADE
7863  2ADF
7864  2AE0
7865  2AE1
7866  2AE2
7867  2AE3
7868  2AE4
7869  2AE5
7870  2AE6
7871  2AE7
7872  2AE8
7873  2AE9
7874  2AEA
7875  2AEB
7876  2AEC
7877  2AED
7878  2AEE
7879  2AEF
7880  2AF0
7881  2AF1
7882  2AF2
7883  2AF3
7884  2AF4
7885  2AF5
7886  2AF6
7887  2AF7
7888  2AF8
7889  2AF9
7890  2AFA
7891  2AFB
7892  2AFC
7893  2AFD
7894  2AFE
7895  2AFF
7896  2B00
7897  2B01
7898  2B02
7899  2B03
7900  2B04
7901  2B05
7902  2B06
7903  2B07
7904  2B08
7905  2B09
7906  2B0A
7907  2B0B
7908  2B0C
7909  2B0D
7910  2B0E
7911  2B0F
7912  2B10
7913  2B11
7914  2B12
7915  2B13
7916  2B14
7917  2B15
7918  2B16
7919  2B17
7920  2B18
7921  2B19
7922  2B1A
7923  2B1B
7924  2B1C
7925  2B1D
7926  2B1E
7927  2B1F
7928  2B20
7929  2B21
7930  2B22
7931  2B23
7932  2B24
7933  2B25
7934  2B26
7935  2B27
7936  2B28
7937  2B29
7938  2B2A
7939  2B2B
7940  2B2C
7941  2B2D
7942  2B2E
7943  2B2F
7944  2B30
7945  2B31
7946  2B32
7947  2B33
7948  2B34
7949  2B35
7950  2B36
7951  2B37
7952  2B38
7953  2B39
7954  2B3A
7955  2B3B
7956  2B3C
7957  2B3D
7958  2B3E
7959  2B3F
7960  2B40
7961  2B41
7962  2B42
7963  2B43
7964  2B44
7965  2B45
7966  2B46
7967  2B47
7968  2B48
7969  2B49
7970  2B4A
7971  2B4B
7972  2B4C
7973  2B4D
7974  2B4E
7975  2B4F
7976  2B50
7977  2B51
7978  2B52
7979  2B53
7980  2B54
7981  2B55
7982  2B56
7983  2B57
7984  2B58
7985  2B59
7986  2B5A
7987  2B5B
7988  2B5C
7989  2B5D
7990  2B5E
7991  2B5F
7992  2B60
7993  2B61
7994  2B62
7995  2B63
7996  2B64
7997  2B65
7998  2B66
7999  2B67
8000  2B68
8001  2B69
8002  2B6A
8003  2B6B
8004  2B6C
8005  2B6D
8006  2B6E
8007  2B6F
8008  2B70
8009  2B71
8010  2B72
8011  2B73
8012  2B74
8013  2B75
8014  2B76
8015  2B77
8016  2B78
8017  2B79
8018  2B7A
8019  2B7B
8020  2B7C
8021  2B7D
8022  2B7E
8023  2B7F
8024  2B80
8025  2B81
8026  2B82
8027  2B83
8028  2B84
8029  2B85
8030  2B86
8031  2B87
8032  2B88
8033  2B89
8034  2B8A
8035  2B8B
8036  2B8C
8037  2B8D
8038  2B8E
8039  2B8F
8040  2B90
8041  2B91
8042  2B92
8043  2B93
8044  2B94
8045  2B95
8046  2B96
8047  2B97
8048  2B98
8049  2B99
8050  2B9A
8051  2B9B
8052  2B9C
8053  2B9D
8054  2B9E
8055  2B9F
8056  2BA0
8057  2BA1
8058  2BA2
8059  2BA3
8060  2BA4
8061  2BA5
8062  2BA6
8063  2BA7
8064  2BA8
8065  2BA9
8066  2BAA
8067  2BAB
8068  2BAC
8069  2BAD
8070  2BAE
8071  2BAF
8072  2BB0
8073  2BB1
8074  2BB2
8075  2BB3
8076  2BB4
8077  2BB5
8078  2BB6
8079  2BB7
8080  2BB8
8081  2BB9
8082  2BBA
8083  2BBB
8084  2BBC
8085  2BBD
8086  2BBE
8087  2BBF
8088  2BC0
8089  2BC1
8090  2BC2
8091  2BC3
8092  2BC4
8093  2BC5
8094  2BC6
8095  2BC7
8096  2BC8
8097  2BC9
8098  2BCA
8099  2BCB
8100  2BCC
8101  2BCD
8102  2BCE
8103  2BCF
8104  2BD0
8105  2BD1
8106  2BD2
8107  2BD3
8108  2BD4
8109  2BD5
8110  2BD6
8111  2BD7
8112  2BD8
8113  2BD9
8114  2BDA
8115  2BDB
8116  2BDC
8117  2BDD
8118  2BDE
8119  2BDF
8120  2BE0
8121  2BE1
8122  2BE2
8123  2BE3
8124  2BE4
8125  2BE5
8126  2BE6
8127  2BE7
8128  2BE8
8129  2BE9
8130  2BEA
8131  2BEB
8132  2BEC
8133  2BED
8134  2BEE
8135  2BEF
8136  2BF0
8137  2BF1
8138  2BF2
8139  2BF3
8140  2BF4
8141  2BF5
8142  2BF6
8143  2BF7
8144  2BF8
8145  2BF9
8146  2BFA
8147  2BFB
8148  2BFC
8149  2BFD
8150  2BFE
8151  2BFF
8152  2C00
8153  2C01
8154  2C02
8155  2C03
8156  2C04
8157  2C05
8158  2C06
8159  2C07
8160  2C08
8161  2C09
8162  2C0A
8163  2C0B
8164  2C0C
8165  2C0D
8166  2C0E
8167  2C0F
8168  2C10
8169  2C11
8170  2C12
8171  2C13
8172  2C14
8173  2C15
8174  2C16
8175  2C17
8176  2C18
8177  2C19
8178  2C1A
8179  2C1B
8180  2C1C
8181  2C1D
8182  2C1E
8183  2C1F
8184  2C20
8185  2C21
8186  2C22
8187  2C23
8188  2C24
8189  2C25
8190  2C26
8191  2C27
8192  2C28
8193  2C29
8194  2C2A
8195  2C2B
8196  2C2C
8197  2C2D
8198  2C2E
8199  2C2F
8200  2C30
8201  2C31
8202  2C32
8203  2C33
8204  2C34
8205  2C35
8206  2C36
8207  2C37
8208  2C38
8209  2C39
8210  2C3A
8211  2C3B
8212  2C3C
8213  2C3D
8214  2C3E
8215  2C3F
8216  2C40
8217  2C41
8218  2C42
8219  2C43
8220  2C44
8221  2C45
8222  2C46
8223  2C47
8224  2C48
8225  2C49
8226  2C4A
8227  2C4B
8228  2C4C
8229  2C4D
8230  2C4E
8231  2C4F
8232  2C50
8233  2C51
8234  2C52
8235  2C53
8236  2C54
8237  2C55
8238  2C56
8239  2C57
8240  2C58
8241  2C59
8242  2C5A
8243  2C5B
8244  2C5C
8245  2C5D
8246  2C5E
8247  2C5F
8248  2C60
8249  2C61
8250  2C62
8251  2C63
8252  2C64
8253  2C65
8254  2C66
8255  2C67
8256  2C68
8257  2C69
8258  2C6A
8259  2C6B
8260  2C6C
8261  2C6D
8262  2C6E
8263  2C6F
8264  2C70
8265  2C71
8266  2C72
8267  2C73
8268  2C74
8269  2C75
8270  2C76
8271  2C77
8272  2C78
8273  2C79
8274  2C7A
8275  2C7B
8276  2C7C
8277  2C7D
8278  2C7E
8279  2C7F
8280  2C80
8281  2C81
8282  2C82
8283  2C83
8284  2C84
8285  2C85
8286  2C86
8287  2C87
8288  2C88
8289  2C89
8290  2C8A
8291  2C8B
8292  2C8C
8293  2C8D
8294  2C8E
8295  2C8F
8296  2C90
8297  2C91
8298  2C92
8299  2C93
8300  2C94
8301  2C95
8302  2C96
8303  2C97
8304  2C98
8305  2C99
8306  2C9A
8307  2C9B
8308  2C9C
8309  2C9D
8310  2C9E
8311  2C9F
8312  2CA0
8313  2CA1
8314  2CA2
8315  2CA3
8316  2CA4
8317  2CA5
8318  2CA6
8319  2CA7
8320  2CA8
8321  2CA9
8322  2CAA
8323  2CAB
8324  2CAC
8325  2CAD
8326  2CAE
8327  2CAF
8328  2CB0
8329  2CB1
8330  2CB2
8331  2CB3
8332  2CB4
8333  2CB5
8334  2CB6
8335  2CB7
8336  2CB8
8337  2CB9
8338  2CBA
8339  2CBB
8340  2CBC
8341  2CBD
8342  2CBE
8343  2CBF
8344  2CC0
8345  2CC1
8346  2CC2
8347  2CC3
8348  2CC4
8349  2CC5
8350  2CC6
8351  2CC7
8352  2CC8
8353  2CC9
8354  2CCA
8355  2CCB
8356  2CCC
8357  2CCD
8358  2CCE
8359  2CCF
8360  2CD0
8361  2CD1
8362  2CD2
8363  2CD3
8364  2CD4
8365  2CD5
8366  2CD6
8367  2CD7
8368  2CD8
8369  2CD9
8370  2CDA
8371  2CDB
8372  2CDC
8373  2CDD
8374  2CDE
8375  2CDF
8376  2CE0
8377  2CE1
8378  2CE2
8379  2CE3
8380  2CE4
8381  2CE5
8382  2CE6
8383  2CE7
8384  2CE8
8385  2CE9
8386  2CEA
8387  2CEB
8388  2CEC
8389  2CED
8390  2CEE
8391  2CEF
8392  2CF0
8393  2CF1
8394  2CF2
8395  2CF3
8396  2CF4
8397  2CF5
8398  2CF6
8399  2CF7
8400  2CF8
8401  2CF9
8402  2CFA
8403  2CFB
8404  2CFC
8405  2CFD
8406  2CFE
8407  2CFF
8408  2D00
8409  2D01
8410  2D02
8411  2D03
8412  2D04
8413  2D05
8414  2D06
8415  2D07
8416  2D08
8417  2D09
8418  2D0A
8419  2D0B
8420  2D0C
8421  2D0D
8422  2D0E
8423  2D0F
8424  2D10
8425  2D11
8426  2D12
8427  2D13
8428  2D14
8429  2D15
8430  2D16
8431  2D17
8432  2D18
8433  2D19
8434  2D1A
8435  2D1B
8436  2D1C
8437  2D1D
8438  2D1E
8439  2D1F
8440  2D20
8441  2D21
8442  2D22
8443  2D23
8444  2D24
8445  2D25
8446  2D26
8447  2D27
8448  2D28
8449  2D29
8450  2D2A
8451  2D2B
8452  2D2C
8453  2D2D
8454  2D2E
8455  2D2F
8456  2D30
8457  2D31
8458  2D32
8459  2D33
8460  2D34
8461  2D35
8462  2D36
8463  2D37
8464  2D38
8465  2D39
8466  2D3A
8467  2D3B
8468  2D3C
8469  2D3D
8470  2D3E
8471  2D3F
8472  2D40
8473  2D41
8474  2D42
8475  2D43
8476  2D44
8477  2D45
8478  2D46
8479  2D47
8480  2D48
8481  2D49
8482  2D4A
8483  2D4B
8484  2D4C
8485  2D4D
8486  2D4E
8487  2D4F
8488  2D50
8489  2D51
8490  2D52
8491  2D53
8492  2D54
8493  2D55
8494  2D56
8495  2D57
8496  2D58
8497  2D59
8498  2D5A
8499  2D5B
8500  2D5C
8501  2D5D
8502  2D5E
8503  2D5F
8504  2D60
8505  2D61
8506  2D62
8507  2D63
8508  2D64
8509  2D65
8510  2D66
8511  2D67
8512  2D68
8513  2D69
8514  2D6A
8515  2D6B
8516  2D6C
8517  2D6D
8518  2D6E
8519  2D6F
8520  2D70
8521  2D71
8522  2D72
8523  2D73
8524  2D74
8525  2D75
8526  2D76
8527  2D77
8528  2D78
8529  2D79
8530  2D7A
8531  2D7B
8532  2D7C
8533  2D7D
8534  2D7E
8535  2D7F
8536  2D80
8537  2D81
8538  2D82
8539  2D83
8540  2D84
8541  2D85
8542  2D86
8543  2D87
8544  2D88
8545  2D89
8546  2D8A
8547  2D8B
8548  2D8C
8549  2D8D
8550  2D8E
8551  2D8F
8552  2D90
8553  2D91
8554  2D92
8555  2D93
8556  2D94
8557  2D95
8558  2D96
8559  2D97
8560  2D98
8561  2D99
8562  2D9A
8563  2D9B
8564  2D9C
8565  2D9D
8566  2D9E
8567  2D9F
8568  2DA0
8569  2DA1
8570  2DA2
8571  2DA3
8572  2DA4
8573  2DA5
8574  2DA6
8575  2DA7
8576  2DA8
8577  2DA9
8578  2DAA
8579  2DAB
8580  2DAC
8581  2DAD
8582  2DAE
8583  2DAF
8584  2DB0
8585  2DB1
8586  2DB2
8587  2DB3
8588  2DB4
8589  2DB5
8590  2DB6
8591  2DB7
8592  2DB8
8593  2DB9
8594  2DBA
8595  2DBB
8596  2DBC
8597  2DBD
8598  2DBE
8599  2DBF
8600  2DC0
8601  2DC1
8602  2DC2
8603  2DC3
8604  2DC4
8605  2DC5
8606  2DC6
8607  2DC7
8608  2DC8
8609  2DC9
8610  2DCA
8611  2DCB
8612  2DCC
8613  2DCD
8614  2DCE
8615  2DCF
8616  2DD0
8617  2DD1
8618  2DD2
8619  2DD3
8620  2DD4
8621  2DD5
8622  2DD6
8623  2DD7
8624  2DD8
8625  2DD9
8626  2DDA
8627  2DDB
8628  2DDC
8629  2DDD
8630  2DDE
8631  2DDF
8632  2DE0
8633  2DE1
8634  2DE2
8635  2DE3
8636  2DE4
8637  2DE5
8638  2DE6
8639  2DE7
8640  2DE8
8641  2DE9
8642  2DEA
8643  2DEB
8644  2DEC
8645  2DED
8646  2DEE
8647  2DEF
8648  2DF0
8649  2DF1
8650  2DF2
8651  2DF3
8652  2DF4
8653  2DF5
8654  2DF6
8655  2DF7
8656  2DF8
8657  2DF9
8658  2DFA
8659  2DFB
8660  2DFC
8661  2DFD
8662  2DFE
8663  2DFF
8664  2E00
8665  2E01
8666  2E02
8667  2E03
8668  2E04
8669  2E05
8670  2E06
8671  2E07
8672  2E08
8673  2E09
8674  2E0A
8675  2E0B
8676  2E0C
8677  2E0D
8678  2E0E
8679  2E0F
8680  2E10
8681  2E11
8682  2E12
8683  2E13
8684  2E14
8685  2E15
8686  2E16
8687  2E17
8688  2E18
8689  2E19
8690  2E1A
8691  2E1B
8692  2E1C
8693  2E1D
8694  2E1E
8695  2E1F
8696  2E20
8697  2E21
8698  2E22
8699  2E23
8700  2E24
8701  2E25
8702  2E26
8703  2E27
8704  2E28
8705  2E29
8706  2E2A
8707  2E2B
8708  2E2C
8709  2E2D
8710  2E2E
8711  2E2F
8712  2E30
8713  2E31
8714  2E32
8715  2E33
8716  2E34
8717  2E35
8718  2E36
8719  2E37
8720  2E38
8721  2E39
8722  2E3A
8723  2E3B
8724  2E3C
8725  2E3D
8726  2E3E
8727  2E3F
8728  2E40
8729  2E41
8730  2E42
8731  2E43
8732  2E44
8733  2E45
8734  2E46
8735  2E47
8736  2E48
8737  2E49
8738  2E4A
8739  2E4B
8740  2E4C
8741  2E4D
8742  2E4E
8743  2E4F
8744  2E50
8745  2E51
8746  2E52
8747  2E53
8748  2E54
8749  2E55
8750  2E56
8751  2E57
8752  2E58
8753  2E59
8754  2E5A
8755  2E5B
8756  2E5C
8757  2E5D
8758  2E5E
8759  2E5F
8760  2E60
8761  2E61
8762  2E62
8763  2E63
8764  2E64
8765  2E65
8766  2E66
8767  2E67
8768  2E68
8769  2E69
8770  2E6A
8771  2E6B
8772  2E6C
8773  2E6D
8774  2E6E
8775  2E6F
8776  2E70
8777  2E71
8778  2E72
8779  2E73
8780  2E74
8781  2E75
8782  2E76
8783  2E77
8784  2E78
8785  2E79
8786  2E7A
8787  2E7B
8788  2E7C
8789  2E7D
8790  2E7E
8791  2E7F
8792  2E80
8793  2E81
8794  2E82
8795  2E83
8796  2E84
8797  2E85
8798  2E86
8799  2E87
8800  2E88
8801  2E89
8802  2E8A
8803  2E8B
8804  2E8C
8805  2E8D
8806  2E8E
8807  2E8F
8808  2E90
8809  2E91
8810  2E92
8811  2E93
8812  2E94
8813  2E95
8814  2E96
8815  2E97
8816  2E98
8817  2E99
8818  2E9A
8819  2E9B
8820  2E9C
8821  2E9D
8822  2E9E
8823  2E9F
8824  2EA0
8825  2EA1
8826  2EA2
8827  2EA3
8828  2EA4
8829  2EA5
8830  2EA6
8831  2EA7
8832  2EA8
8833  2EA9
8834  2EAA
8835  2EAB
8836  2EAC
8837  2EAD
8838  2EAE
8839  2EAF
8840  2EB0
8841  2EB1
8842  2EB2
8843  2EB3
8844  2EB4
8845  2EB5
8846  2EB6
8847  2EB7
8848  2EB8
8849  2EB9
8850  2EBA
8851  2EBB
8852  2EBC
8853  2EBD
8854  2EBE
8855  2EBF
8856  2EC0
8857  2EC1
8858  2EC2
8859  2EC3
8860  2EC4
8861  2EC5
8862  2EC6
8863  2EC7
8864  2EC8
8865  2EC9
8866  2ECA
8867  2ECB
8868  2ECC
8869  2ECD
8870  2ECE
8871  2ECF
8872  2ED0
8873  2ED1
8874  2ED2
8875  2ED3
8876  2ED4
8877  2ED5
8878  2ED6
8879  2ED7
8880  2ED8
8881  2ED9
8882  2EDA
8883  2EDB
8884  2EDC
8885  2EDD
8886  2EDE
8887  2EDF
8888  2EE0
8889  2EE1
8890  2EE2
8891  2EE3
8892  2EE4
8893  2EE5
8894  2EE6
8895  2EE7
8896  2EE8
8897  2EE9
8898  2EEA
8899  2EEB
8900  2EEC
8901  2EED
8902  2EEE
8903  2EEF
8904  2EF0
8905  2EF1
8906  2EF2
8907  2EF3
8908  2EF4
8909  2EF5
8910  2EF6
8911  2EF7
8912  2EF8
8913  2EF9
8914  2EFA
8915  2EFB
8916  2EFC
8917  2EFD
8918  2EFE
8919  2EFF
8920  2F00
8921  2F01
8922  2F02
8923  2F03
8924  2F04
8925  2F05
8926  2F06
8927  2F07
8928  2F08
8929  2F09
8930  2F0A
8931  2F0B
8932  2F0C
8933  2F0D
8934  2F0E
8935  2F0F
8936  2F10
8937  2F11
8938  2F12
8939  2F13
8940  2F14
8941  2F15
8942  2F16
8943  2F17
8944  2F18
8945  2F19
8946  2F1A
8947  2F1B
8948  2F1C
8949  2F1D
8950  2F1E
8951  2F1F
8952  2F20
8953  2F21
8954  2F22
8955  2F23
8956  2F24
8957  2F25
8958  2F26
8959  2F27
8960  2F28
8961  2F29
8962  2F2A
8963  2F2B
8964  2F2C
8965  2F2D
8966  2F2E
8967  2F2F
8968  2F30
8969  2F31
8970  2F32
8971  2F33
8972  2F34
8973  2F35
8974  2F36
8975  2F37
8976  2F38
8977  2F39
8978  2F3A
8979  2F3B
8980  2F3C
8981  2F3D
8982  2F3E
8983  2F3F
8984  2F40
8985  2F41
8986  2F42
8987  2F43
8988  2F44
8989  2F45
8990  2F46
8991  2F47
8992  2F48
8993  2F49
8994  2F4A
8995  2F4B
8996  2F4C
8997  2F4D
8998  2F4E
8999  2F4F
9000  2F50
9001  2F51
9002  2F52
9003  2F53
9004  2F54
9005  2F55
9006  2F56
9007  2F57
9008  2F58
9009  2F59
9010  2F5A
9011  2F5B
9012  2F5C
9013  2F5D
9014  2F5E
9015  2F5F
9016  2F60
9017  2F61
9018  2F62
9019  2F63
9020  2F64
9021  2F65
9022  2F66
9023  2F67
9024  2F68
9025  2F69
9026  2F6A
9027  2F6B
9028  2F6C
9029  2F6D
9030  2F6E
9031  2F6F
9032  2F70
9033  2F71
9034  2F72
9035  2F73
9036  2F74
9037  2F75
9038  2F76
9039  2F77
9040  2F78
9041  2F79
9042  2F7A
9043  2F7B
9044  2F7C
9045  2F7D
9046  2F7E
9047  2F7F
9048  2F80
9049  2F81
9050  2F82
9051  2F83
9052  2F84
9053  2F85
9054  2F86
9055  2F87
9056  2F88
9057  2F89
9058  2F8A
9059  2F8B
9060  2F8C
9061  2F8D
9062  2F8E
9063  2F8F
9064  2F90
9065  2F91
9066  2F92
9067  2F93
9068  2F94
9069  2F95
9070  2F96
9071  2F97
9072  2F98
9073  2F99
9074  2F9A
9075  2F9B
9076  2F9C
9077  2F9D
9078  2F9E
9079  2F9F
9080  2FA0
9081  2FA1
9082  2FA2
9083  2FA3
9084  2FA4
9085  2FA5
9086  2FA6
9087  2FA7
9088  2FA8
9089  2FA9
9090  2FAA
9091  2FAB
9092  2FAC
9093  2FAD
9094  2FAE
9095  2FAF
9096  2FB0
9097  2FB1
9098  2FB2
9099  2FB3
9100  2FB4
9101  2FB5
9102  2FB6
9103  2FB7
9104  2FB8
9105  2FB9
9106  2FBA
9107  2FBB
9108  2FBC
9109  2FBD
9110  2FBE
9111  2FBF
9112  2FC0
9113  2FC1
9114  2FC2
9115  2FC3
9116  2FC4
9117  2FC5
9118  2FC6
9119  2FC7
9120  2FC8
9121  2FC9
9122  2FCA
9123  2FCB
9124  2FCC
9125  2FCD
9126  2FCE
9127  2FCF
9128  2FD0
9129  2FD1
9130  2FD2
9131  2FD3
9132  2FD4
9133  2FD5
9134  2FD6
9135  2FD7
9136  2FD8
9137  2FD9
9138  2FDA
9139  2FDB
9140  2FDC
9141  2FDD
9142  2FDE
9143  2FDF
9144  2FE0
9145  2FE1
9146  2FE2
9147  2FE3
9148  2FE4
9149  2FE5
9150  2FE6
9151  2FE7
9152  2FE8
9153  2FE9
9154  2FEA
9155  2FEB
9156  2FEC
9157  2FED
9158  2FEE
9159  2FEF
9160  2FF0
9161  2FF1
9162  2FF2
9163  2FF3
9164  2FF4
9165  2FF5
9166  2FF6
9167  2FF7
9168  2FF8
9169  2FF9
9170  2FFA
9171  2FFB
9172  2FFC
9173  2FFD
9174  2FFE
9175  2FFF
9176  3000
9177  3001
9178  3002
9179  3003
9180  3004
9181  3005
9182  3006
9183  3007
9184  3008
9185  3009
9186  300A
9187  300B
9188  300C
9189  300D
9190  300E
9191  300F
9192  3010
9193  3011
9194  3012
9195  3013
9196  3014
9197  3015
9198  3016
9199  3017
9200  3018
9201  3019
9202  301A
9203  301B
9204  301C
9205  301D
9206  301E
9207  301F
9208  3020
9209  3021
9210  3022
9211  3023
9212  3024
9213  3025
9214  3026
9215  3027
9216  3028
9217  3029
9218  302A
9219  302B
9220  302C
9221  302D
9222  302E
9223  302F
9224  3030
9225  3031
9226  3032
9227  3033
9228  3034
9229  3035
9230  3036
9231  3037
9232  3038
9233  3039
9234  303A
9235  303B
9236  303C
9237  303D
9238  303E
9239  303F
9240  3040
9241  3041
9242  3042
9243  3043
9244  3044
9245  3045
9246  3046
9247  3047
9248  3048
9249  3049
9250  304A
9251  304B
9252  304C
9253  304D
9254  304E
9255  304F
9256  3050
9257  3051
9258  3052
9259  3053
9260  3054
9261  3055
9262  3056
9263  3057
9264  3058
9265  3059
9266  305A
9267  305B
9268  305C
9269  305D
9270  305E
9271  305F
9272  3060
9273  3061
9274  3062
9275  3063
9276  3064
9277  3065
9278  3066
9279  3067
9280  3068
9281  3069
9282  306A
9283  306B
9284  306C
9285  306D
9286  306E
9287  306F
9288  3070
9289  3071
9290  3072
9291  3073
9292  3074
9293  3075
9294  3076
9295  3077
9296  3078
9297  3079
9298  307A
9299  307B
9300  307C
9301  307D
9302  307E
9303  307F
9304  3080
9305  3081
9306  3082
9307  3083
9308  3084
9309  3085
9310  3086
9311  3087
9312  3088
9313  3089
9314  308A
9315  308B
9316  308C
9317  308D
9318  308E
9319  308F
9320  3090
9321  3091
9322  3092
9323  3093
9324  3094
9325  3095
9326  3096
9327  3097
9328  3098
9329  3099
9330  309A
9331  309B
9332  309C
9333  309D
9334  309E
9335  309F
9336  30A0
9337  30A1
9338  30A2
9339  30A3
9340  30A4
9341  30A5
9342  30A6
9343  30A7
9344  30A8
9345  30A9
9346  30AA
9347  30AB
9348  30AC
9349  30AD
9350  30AE
9351  30AF
9352  30B0
9353  30B1
9354  30B2
9355  30B3
9356  30B4
9357  30B5
9358  30B6
9359  30B7
9360  30B8
9361  30B9
9362  30BA
9363  30BB
9364  30BC
9365  30BD
9366  30BE
9367  30BF
9368  30C0
9369  30C1
9370  30C2
9371  30C3
9372  30C4
9373  30C5
9374  30C6
9375  30C7
9376  30C8
9377  30C9
9378  30CA
9379  30CB
9380  30CC
9381  30CD
9382  30CE
9383  30CF
9384  30D0
9385  30D1
9386  30D2
9387  30D3
9388  30D4
9389  30D5
9390  30D6
9391  30D7
9392  30D8
9393  30D9
9394  30DA
9395  30DB
9396  30DC
9397  30DD
9398  30DE
9399  30DF
9400  30E0
9401  30E1
9402  30E2
9403  30E3
9404  30E4
9405  30E5
9406  30E6
9407  30E7
9408  30E8
9409  30E9
9410  30EA
9411  30EB
9412  30EC
9413  30ED
9414  30EE
9415  30EF
9416  30F0
9417  30F1
9418  30F2
9419  30F3
9420  30F4
9421  30F5
9422  30F6
9423  30F7
9424  30F8
9425  30F9
9426  30FA
9427  30FB
9428  30FC
9429  30FD
9430  30FE
9431  30FF
9432  3100
9433  3101
9434  3102
9435  3103
9436  3104
9437  3105
9438  3106
9439  3107
9440  3108
9441  3109
9442  310A
9443  310B
9444  310C
9445  310D
9446  310E
9447  310F
9448  3110
9449  3111
9450  3112
9451  3113
9452  3114
9453  3115
9454  3116
9455  3117
9456  3118
9457  3119
9458  311A
9459  311B
9460  311C
9461  311D
9462  311E
9463  311F
9464  3120
9465  3121
9466  3122
9467  3123
9468  3124
9469  3125
9470  3126
9471  3127
9472  3128
9473  3129
9474  312A
9475  312B
9476  312C
9477  312D
9478  312E
9479  312F
9480  3130
9481  3131
9482  3132
9483  3133
9484  3134
9485  3135
9486  3136
9487  3137
9488  3138
9489  3139
9490  313A
9491  313B
9492  313C
9493  313D
9494  313E
9495  313F
9496  3140
9497  3141
9498  3142
9499  3143
9500  3144
9501  3145
9502  3146
9503  3147
9504  3148
9505  3149
9506  314A
9507  314B
9508  314C
9509  314D
9510  314E
9511  314F
9512  3150
9513  3151
9514  3152
9515  3153
9516  3154
9517  3155
9518  3156
9519  3157
9520  3158
9521  3159
9522  315A
9523  315B
9524  315C
9525  315D
9526  315E
9527  315F
9528  3160
9529  3161
9530  3162
9531  3163
9532  3164
9533  3165
9534  3166
9535  3167
9536  3168
9537  3169
9538  316A
9539  316B
9540  316C
9541  316D
9542  316E
9543  316F
9544  3170
9545  3171
9546  3172
9547  3173
9548  3174
9549  3175
9550  3176
9551  3177
9552  3178
9553  3179
9554  317A
9555  317B
9556  317C
9557  317D
9558  317E
9559  317F
9560  3180
9561  3181
9562  3182
9563  3183
9564  3184
9565  3185
9566  3186
9567  3187
9568  3188
9569  3189
9570  318A
9571  318B
9572  318C
9573  318D
9574  318E
9575  318F
9576  3190
9577  3191
9578  3192
9579  3193
9580  3194
9581  3195
9582  3196
9583  3197
9584  3198
9585  3199
9586  319A
9587  319B
9588  319C
9589  319D
9590  319E
9591  319F
9592  31A0
9593  31A1
9594  31A2
9595  31A3
9596  31A4
9597  31A5
9598  31A6
9599  31A7
9600  31A8
9601  31A9
9602  31AA
9603  31AB
9604  31AC
9605  31AD
9606  31AE
9607  31AF
9608  31B0
9609  31B1
9610  31B2
9611  31B3
9612  31B4
9613  31B5
9614  31B6
9615  31B7
9616  31B8
9617  31B9
9618  31BA
9619  31BB
9620  31BC
9621  31BD
9622  31BE
9623  31BF
9624  31C0
9625  31C1
9626  31C2
9627  31C3
9628  31C4
9629  31C5
9630  31C6
9631  31C7
9632  31C8
9633  31C9
9634  31CA
9635  31CB
9636  31CC
9637  31CD
9638  31CE
9639  31CF
9640  31D0
9641  31D1
9642  31D2
9643  31D3
9644  31D4
9645  31D5
9646  31D6
9647  31D7
9648  31D8
9649  31D9
9650  31DA
9651  31DB
9652  31DC
9653  31DD
9654  31DE
9655  31DF
9656  31E0
9657  31E1
9658  31E2
9659  31E3
9660  31E4
9661  31E5
9662  31E6
9663  31E7
9664  31E8
9665  31E9
9666  31EA
9667  31EB
9668  31EC
9669  31ED
9670  31EE
9671  31EF
9672  31F0
9673  31F1
9674  31F2
9675  31F3
9676  31F4
9677  31F5
9678  31F6
9679  31F7
9680  31F8
9681  31F9
9682  31FA
9683  31FB
9684  31FC
9685  31FD
9686  31FE
9687  31FF
9688  3200
9689  3201
9690  3202
9691  3203
9692  3204
9693  3205
9694  3206
9695  3207
9696  3208
9697  3209
9698  320A
9699  320B
9700  320C
9701  320D
9702  320E
9703  320F
9704  3210
9705  3211
9706  3212
9707  3213
9708  3214
9709  3215
9710  3216
9711  3217
9712  3218
9713  3219
9714  321A
9715  321B
9716  321C
9717  321D
9718  321E
9719  321F
9720  3220
9721  3221
9722  3222
9723  3223
9724  3224
9725  3225
9726  3226
9727  3227
9728  3228
9729  3229
9730  322A
9731  322B
9732  322C
9733  322D
9734  322E
9735  322F
9736  3230
9737  3231
9738  3232
9739  3233
9740  3234
9741  3235
9742  3236
9743  3237
9744  3238
9745  3239
9746  323A
9747  323B
9748  323C
9749  323D
9750  323E
9751  323F
9752  3240
9753  3241
9754  3242
9755  3243
9756  3244
9757  3245
9758  3246
9759  3247
9760  3248
9761  3249
9762  324A
9763  324B
9764  324C
9765  324D
9766  324E
9767  324F
9768  3250
9769  3251
9770  3252
9771  3253
9772  3254
9773  3255
9774  3256
9775  3257
9776  3258
9777  3259
9778  325A
9779  325B
9780  325C
9781  325D
9782  325E
9783  325F
9784  3260
9785  3261
9786  3262
9787  3263
9788  3264
9789  3265
9790  3266
9791  3267
9792  3268
9793  3269
9794  326A
9795  326B
9796  326C
9797  326D
9798  326E
9799  326F
9800  3270
9801  3271
9802  3272
9803  3273
9804  3274
9805  3275
9806  3276
9807  3277
9808  3278
9809  3279
9810  327A
9811  327B
9812  327C
9813  327D
9814  327E
9815  327F
9816  3280
9817  3281
9818  3282
9819  3283
9820  3284
9821  3285
9822  3286
9823  3287
9824  3288
9825  3289
9826  328A
9827  328B
9828  328C
9829  328D
9830  328E
9831  328F
9832  3290
9833  3291
9834  3292
9835  3293
9836  3294
9837  3295
9838  3296
9839  3297
9840  3298
9841  3299
9842  329A
9843  329B
9844  329C
9845  329D
9846  329E
9847  329F
9848  32A0
9849  32A1
9850  32A2
9851  32A3
9852  32A4
9853  32A5
9854  32A6
9855  32A7
9856  32A8
9857  32A9
9858  32AA
9859  32AB
9860  32AC
9861  32AD
9862  32AE
9863  32AF
9864  32B0
9865  32B1
9866  32B2
9867  32B3
9868  32B4
9869  32B5
9870  32B6
9871  32B7
9872  32B8
9873  32B9
9874  32BA
9875  32BB
9876  32BC
9877  32BD
9878  32BE
9879  32BF
9880  32C0
9881  32C1
9882  32C2
9883  32C3
9884  32C4
9885  32C5
9886  32C6
9887  32C7
9888  32C8
9889  32C9
9890  32CA
9891  32CB
9892  32CC
9893  32CD
9894  32CE
9895  32CF
9896  32D0
9897  32D1
9898  32D2
9899  32D3
9900  32D4
9901  32D5
9902  32D6
9903  32D7
9904  32D8
9905  32D9
9906  32DA
9907  32DB
9908  32DC
9909  32DD
9910  32DE
9911  32DF
9912  32E0
9913  32E1
9914  32E2
9915  32E3
9916  32E4
9917  32E5
9918  32E6
9919  32E7
9920  32E8
9921  32E9
9922  32EA
9923  32EB
9924  32EC
9925  32ED
9926  32EE
9927  32EF
9928  32F0
9929  32F1
9930  32F2
9931  32F3
9932  32F4
9933  32F5
9934  32F6
9935  32F7
9936  32F8
9937  32F9
9938  32FA
9939  32FB
9940  32FC
9941  32FD
9942  32FE
9943  32FF
9944  3300
9945  3301
9946  3302
9947  3303
9948  3304
9949  3305
9950  3306
9951  3307
9952  3308
9953  3309
9954  330A
9955  330B
9956  330C
9957  330D
9958  330E
9959  330F
9960  3310
9961  3311
9962  3312
9963  3313
9964  3314
9965  3315
9966  3316
9967  3317
9968  3318
9969  3319
9970  331A
9971  331B
9972  331C
9973  331D
9974  331E
9975  331F
9976  3320
9977  3321
9978  3322
9979  3323
9980  3324
9981  3325
9982  3326
9983  3327
9984  3328
9985  3329
9986  332A
9987  332B
9988  332C
9989  332D
9990  332E
9991  332F
9992  3330
9993  3331
9994  3332
9995  3333
9996  3334
9997  3335
9998  3336
9999  3337
10000  3338
10001  3339
10002  333A
10003  333B
10004  333C
10005  333D
10006  333E
10007  333F
10008  3340
10009  3341
10010  3342
10011  3343
10012  3344
10013  3345
10014  3346
10015  3347
10016  3348
10017  3349
10018  334A
10019  334B
10020  334C
10021  334D
10022  334E
10023  334F
10024  3350
10025  3351
10026  3352
10027  3353
10028  3354
10029  3355
10030  3356
10031  3357
10032  3358
10033  3359
10034  335A
10035  335B
10036  335C
10037  335D
10038  335E
10039  335F
10040  3360
10041  3361
10042  3362
10043  3363
10044  3364
10045  3365
10046  3366
10047  3367
10048  3368
10049  3369
10050  336A
10051  336B
10052  336C
10053  336D
10054  336E
10055  336F
10056  3370
10057  3371
10058  3372
10059  3373
10060  3374
10061  3375
10062  3376
10063  3377
10064  3378
10065  3379
10066  337A
10067  337B
10068  337C
10069  337D
10070  337E
10071  337F
10072  3380
10073  3381
10074  3382
10075  3383
10076  3384
10077  3385
10078  3386
10079  3387
10080  3388
10081  3389
10082  338A
10083  338B
10084  338C
10085  338D
10086  338E
10087  338F
10088  3390
10089  3391
10090  3392
10091  3393
10092  3394
10093  3395
10094  3396
10095  3397
10096  3398
10097  3399
10098  339A
10099  339B
10100  339C
10101  339D
10102  339E
10103  339F
10104  33A0
10105  33A1
10106  33A2
10107  33A3
10108  33A4
10109  33A5
10110  33A6
10111  33A7
10112  33A8
10113  33A9
10114  33AA
10115  33AB
10116  33AC
10117  33AD
10118  33AE
10119  33AF
10120  33B0
10121  33B1
10122  33B2
10123  33B3
10124  33B4
10125  33B5
10126  33B6
10127  33B7
10128  33B8
10129  33B9
10130  33BA
10131  33BB
10132  33BC
10133  33BD
10134  33BE
10135  33BF
10136  33C0
10137  33C1
10138  33C2
10139  33C3
10140  33C4
10141  33C5
10142  33C6
10143  33C7
10144  33C8
10145  33C9
10146  33CA
10147  33CB
10148  33CC
10149  33CD
10150  33CE
10151  33CF
10152  33D0
10153  33D1
10154  33D2
10155  33D3
10156  33D4
10157  33D5
10158  33D6
10159  33D7
10160  33D8
10161  33D9
10162  33DA
10163  33DB
10164  33DC
10165  33DD
10166  33DE
10167  33DF
10168  33E0
10169  33E1
10170  33E2
10171  33E3
10172  33E4
10173  33E5
10174  33E6
10175  33E7
10176  33E8
10177  33E9
10178  33EA
10179  33EB
10180  33EC
10181  33ED
10182  33EE
10183  33EF
10184  33F0
10185  33F1
10186  33F2
10187  33F3
10188  33F4
10189  33F5
10190  33F6
10191  33F7
10192  33F8
10193  33F9
10194  33FA
10195  33FB
10196  33FC
10197  33FD
10198  33FE
10199  33FF
10200  3400
10201  3401
10202  3402
10203  3403
10204  3404
10205  3405
10206  3406
10207  3407
10208  3408
10209  3409
10210  340A
10211  340B
10212  340C
10213  340D
10214  340E
10215  340F
10216  3410
10217  3411
10218  3412
10219  3413
10220  3414
10221  3415
10222  3416
10223  3417
10224  3418
10225  3419
10226  341A
10227  341B
10228  341C
10229  341D
10230  341E
10231  341F
10232  3420
10233  3421
10234  3422
10235  3423
10236  3424
10237  3425
10238  3426
10239  3427
10240  3428
10241  3429
10242  342A
10243  342B
10244  342C
10245  342D
10246  342E
10247  342F
10248  3430
10249  3431
10250  3432
10251  3433
10252  3434
10253  3435
10254  3436
10255  3437
10256  3438
10257  3439
10258  343A
10259  343B
10260  343C
10261  343D
10262  343E
10263  343F
10264  3440
10265  3441
10266  3442
10267  3443
10268  3444
10269  3445
10270  3446
10271  3447
10272  3448
10273  3449
10274  344A
10275  344B
10276  344C
10277  344D
10278  344E
10279  344F
10280  3450
10281  3451
10282  3452
10283  3453
10284  3454
10285  3455
10286  3456
10287  3457
10288  3458
10289  3459
10290  345A
10291  345B
10292  345C
10293  345D
10294  345E
10295  345F
10296  3460
10297  3461
10298  3462
10299  3463
10300  3464
10301  3465
10302  3466
10303  3467
10304  3468
10305  3469
10306  346A
10307  346B
10308  346C
10309  346D
10310  346E
10311  346F
10312  3470
10313  3471
10314  3472
10315  3473
10316  3474
10317  3475
10318  3476
10319  3477
10320  3478
10321  3479
10322  347A
10323  347B
10324  347C
10325  347D
10326  347E
10327  347F
10328  3480
10329  3481
10330  3482
10331  3483
10332  3484
10333  3485
10334  3486
10335  3487
10336  3488
10337  3489
10338  348A
10339  348B
10340  348C
10341  348D
10342  348E
10343  348F
10344  3490
10345  3491
10346  3492
10347  3493
10348  3494
10349  3495
10350  3496
10351  3497
10352  3498
10353  3499
10354  349A
10355  349B
10356  349C
10357  349D
10358  349E
10359  349F
10360  34A0
10361  34A1
10362  34A2
10363  34A3
10364  34A4
10365  34A5
10366  34A6
10367  34A7
10368  34A8
10369  34A9
10370  34AA
10371  34AB
10372  34AC
10373  34AD
10374  34AE
10375  34AF
10376  34B0
10377  34B1
10378  34B2
10379  34B3
10380  34B4
10381  34B5
10382  34B6
10383  34B7
10384  34B8
10385  34B9
10386  34BA
10387  34BB
10388  34BC
10389  34BD
10390  34BE
10391  34BF
10392  34C0
10393  34C1
10394  34C2
10395  34C3
10396  34C4
10397  34C5
10398  34C6
10399  34C7
10400  34C8
10401  34C9
10402  34CA
10403  34CB
10404  34CC
10405  34CD
10406  34CE
10407  34CF
10408  34D0
10409  34D1
10410  34D2
10411  34D3
10412  34D4
10413  34D5
10414  34D6
10415  34D7
10416  34D8
10417  34D9
10418  34DA
10419  34DB
10420  34DC
10421  34DD
10422  34DE
10423  34DF
10424  34E0
10425  34E1
10426  34E2
10427  34E3
10428  34E4
10429  34E5
10430  34E6
10431  34E7
10432  34E8
10433  34E9
10434  34EA
10435  34EB
10436  34EC
10437  34ED
10438  34EE
10439  34EF
10440  34F0
10441  34F1
10442  34F2
10443  34F3
10444  34F4
10445  34F5
10446  34F6
10447  34F7
10448  34F8
10449  34F9
10450  34FA
10451  34FB
10452  34FC
10453  34FD
10454  34FE
10455  34FF
10456  3500
10457  3501
10458  3502
10459  3503
10460  3504
10461  3505
10462  3506
10463  3507
10464  3508
10465  3509
10466  350A
10467  350B
10468  350C
10469  350D
10470  350E
10471  350F
10472  3510
10473  3511
10474  3512
10475  3513
10476  3514
10477  3515
10478  3516
10479  3517
10480  3518
10481  3519
10482  351A
10483  351B
10484  351C
10485  351D
10486  351E
10487  351F
10488  3520
10489  3521
10490  3522
10491  3523
10492  3524
10493  3525
10494  3526
10495  3527
10496  3528
10497  3529
10498  352A
10499  352B
10500  352C
10501  352D
10502  352E
10503  352F
10504  3530
10505  3531
10506  3532
10507  3533
10508  3534
10509  3535
10510  3536
10511  3537
10512  3538
10513  3539
10514  353A
10515  353B
10516  353C
10517  353D
10518  353E
10519  353F
10520  3540
10521  3541
10522  3542
10523  3543
10524  3544
10525  3545
10526  3546
10527  3547
10528  3548
10529  3549
10530  354A
10531  354B
10532  354C
10533  354D
10534  354E
10535  354F
10536  3550
10537  3551
10538  3552
10539  3553
10540  3554
10541  3555
10542  3556
10543  3557
10544  3558
10545  3559
10546  355A
10547  355B
10548  355C
10549  355D
10550  355E
10551  355F
10552  3560
10553  3561
10554  3562
10555  3563
10556  3564
10557  3565
10558  3566
10559  3567
10560  3568
10561  3569
10562  356A
10563  356B
10564  356C
10565  356D
10566  356E
10567  356F
10568  3570
10569  3571
10570  3572
10571  3573
10572  3574
10573  3575
10574  3576
10575  3577
10576  3578
10577  3579
10578  357A
10579  357B
10580  357C
10581  357D
10582  357E
10583  357F
10584  3580
10585  3581
10586  3582
10587  3583
10588  3584
10589  3585
10590  3586
10591  3587
10592  3588
10593  3589
10594  358A
10595  358B
10596  358C
10597  358D
10598  358E
10599  358F
10600  3590
10601  3591
10602  3592
10603  3593
10604  3594
10605  3595
10606  3596
10607  3597
10608  3598
10609  3599
10610  359A
10611  359B
10612  359C
10613  359D
10614  359E
10615  359F
10616  35A0
10617  35A1
10618  35A2
10619  35A3
10620  35A4
10621  35A5
10622  35A6
10623  35A7
10624  35A8
10625  35A9
10626  35AA
10627  35AB
10628  35AC
10629  35AD
10630  35AE
10631  35AF
10632  35B0
10633  35B1
10634  35B2
10635  35B3
10636  35B4
10637  35B5
10638  35B6
10639  35B7
10640  35B8
10641  35B9
10642  35BA
10643  35BB
10644  35BC
10645  35BD
10646  35BE
10647  35BF
10648  35C0
10649  35C1
10650  35C2
10651  35C3
10652  35C4
10653  35C5
10654  35C6
10655  35C7
10656  35C8
10657  35C9
10658  35CA
10659  35CB
10660  35CC
10661  35CD
10662  35CE
10663  35CF
10664  35D0
10665  35D1
10666  35D2
10667  35D3
10668  35D4
10669  35D5
10670  35D6
10671  35D7
10672  35D8
10673  35D9
10674  35DA
10675  35DB
10676  35DC
10677  35DD
10678  35DE
10679  35DF
10680  35E0
10681  35E1
10682  35E2
10683  35E3
10684  35E4
10685  35E5
10686  35E6
10687  35E7
10688  35E8
10689  35E9
10690  35EA
10691  35EB
10692  35EC
10693  35ED
10694  35EE
10695  35EF
10696  35F0
10697  35F1
10698  35F2
10699  35F3
10700  35F4
10701  35F5
10702  35F6
10703  35F7
10704  35F8
10705  35F9
10706  35FA
10707  35FB
10708  35FC
10709  35FD
10710  35FE
10711  35FF
10712  3600
10713  3601
10714  3602
10715  3603
10716  3604
10717  3605
10718  3606
10719  3607
10720  3608
10721  3609
10722  360A
10723  360B
10724  360C
10725  360D
10726  360E
10727  360F
10728  3610
10729  3611
10730  3612
10731  3613
10732  3614
10733  3615
10734  3616
10735  3617
10736  3618
10737  3619
10738  361A
10739  361B
10740  361C
10741  361D
10742  361E
10743  361F
10744  3620
10745  3621
10746  3622
10747  3623
10748  3624
10749  3625
10750  3626
10751  3627
10752  3628
10753  3629
10754  362A
10755  362B
10756  362C
10757  362D
10758  362E
10759  362F
10760  3630
10761  3631
10762  3632
10763  3633
10764  3634
10765  3635
10766  3636
10767  3637
10768  3638
10769  3639
10770  363A
10771  363B
10772  363C
10773  363D
10774  363E
10775  363F
10776  3640
10777  3641
10778  3642
10779  3643
10780  3644
10781  3645
10782  3646
10783  3647
10784  3648
10785  3649
10786  364A
10787  364B
10788  364C
10789  364D
10790  364E
10791  364F
10792  3650
10793  3651
10794  3652
10795  3653
10796  3654
10797  3655
10798  3656
10799  3657
10800  3658
10801  3659
10802  365A
10803  365B
10804  365C
10805  365D
10806  365E
10807  365F
10808  3660
10809  3661
10810  3662
10811  3663
10812  3664
10813  3665
10814  3666
10815  3667
10816  3668
10817  3669
10818  366A
10819  366B
10820  366C
10821  366D
10822  366E
10823  366F
10824  3670
10825  3671
10826  3672
10827  3673
10828  3674
10829  3675
10830  3676
10831  3677
10832  3678
10833  3679
10834  367A
10835  367B
10836  367C
10837  367D
10838  367E
10839  367F
10840  3680
10841  3681
10842  3682
10843  3683
10844  3684
10845  3685
10846  3686
10847  3687
10848  3688
10849  3689
10850  368A
10851  368B
10852  368C
10853  368D
10854  368E
10855  368F
10856  3690
10857  3691
10858  3692
10859  3693
10860  3694
10861  3695
10862  3696
10863  3697
10864  3698
10865  3699
10866  369A
10867  369B
10868  369C
10869  369D
10870  369E
10871  369F
10872  36A0
10873  36A1
10874  36A2
10875  36A3
10876  36A4
10877  36A5
10878  36A6
10879  36A7
10880  36A8
10881  36A9
10882  36AA
10883  36AB
10884  36AC
10885  36AD
10886  36AE
10887  36AF
10888  36B0
10889  36B1
10890  36B2
10891  36B3
10892  36B4
10893  36B5
10894  36B6
10895  36B7
10896  36B8
10897  36B9
10898  36BA
10899  36BB
10900  36BC
10901  36BD
10902  36BE
10903  36BF
10904  36C0
10905  36C1
10906  36C2
10907  36C3
10908  36C4
10909  36C5
10910  36C6
10911  36C7
10912  36C8
10913  36C9
10914  36CA
10915  36CB
10916  36CC
10917  36CD
10918  36CE
10919  36CF
10920  36D0
10921  36D1
10922  36D2
10923  36D3
10924  36D4
10925  36D5
10926  36D6
10927  36D7
10928  36D8
10929  36D9
10930  36DA
10931  36DB
10932  36DC
10933  36DD
10934  36DE
10935  36DF
10936  36E0
10937  36E1
10938  36E2
10939  36E3
10940  36E4
10941  36E5
10942  36E6
10943  36E7
10944  36E8
10945  36E9
10946  36EA
10947  36EB
10948  36EC
10949  36ED
10950  36EE
10951  36EF
10952  36F0
10953  36F1
10954  36F2
10955  36F3
10956  36F4
10957  36F5
10958  36F6
10959  36F7
10960  36F8
10961  36F9
10962  36FA
10963  36FB
10964  36FC
10965  36FD
10966  36FE
10967  36FF
10968  3700
10969  3701
10970  3702
10971  3703
10972  3704
10973  3705
10974  3706
10975  3707
10976  3708
10977  3709
10978  370A
10979  370B
10980  370C
10981  370D
10982  370E
10983  370F
10984  3710
10985  3711
10986  3712
10987  3713
10988  3714
10989  3715
10990  3716
10991  3717
10992  3718
10993  3719
10994  371A
10995  371B
10996  371C
10997  371D
10998  371E
10999  371F
11000  3720
11001  3721
11002  3722
11003  3723
11004  3724
11005  3725
11006  3726
11007  3727
11008  3728
11009  3729
11010  372A
11011  372B
11012  372C
11013  372D
11014  372E
11015  372F
11016  3730
11017  3731
11018  3732
11019  3733
11020  3734
11021  3735
11022  3736
11023  3737
11024  3738
11025  3739
11026  373A
11027  373B
11028  373C
11029  373D
11030  373E
11031  373F
11032  3740
11033  3741
11034  3742
11035  3743
11036  3744
11037  3745
11038  3746
11039  3747
11040  3748
11041  3749
11042  374A
11043  374B
11044  374C
11045  374D
11046  374E
11047  374F
11048  3750
11049  3751
11050  3752
11051  3753
11052  3754
11053  3755
11054  3756
11055  3757
11056  3758
11057  3759
11058  375A
11059  375B
11060  375C
11061  375D
11062  375E
11063  375F
11064  3760
11065  3761
11066  3762
11067  3763
11068  3764
11069  3765
11070  3766
11071  3767
11072  3768
11073  3769
11074  376A
11075  376B
11076  376C
11077  376D
11078  376E
11079  376F
11080  3770
11081  3771
11082  3772
11083  3773
11084  3774
11085  3775
11086  3776
11087  3777
11088  3778
11089  3779
11090  377A
11091  377B
11092  377C
11093  377D
11094  377E
11095  377F
11096  3780
11097  3781
11098  3782
11099  3783
11100  3784
11101  3785
11102  3786
11103  3787
11104  3788
11105  3789
11106  378A
11107  378B
11108  378C
11109  378D
11110  378E
11111  378F
11112  3790
11113  3791
11114  3792
11115  3793
11116  3794
11117  3795
11118  3796
11119  3797
11120  3798
11121  3799
11122  379A
11123  379B
11124  379C
11125  379D
11126  379E
11127  379F
11128  37A0
11129  37A1
11130  37A2
11131  37A3
11132  37A4
11133  37A5
11134  37A6
11135  37A7
11136  37A8
11137  37A9
11138  37AA
11139  37AB
11140  37AC
11141  37AD
11142  37AE
11143  37AF
11144  37B0
11145  37B1
11146  37B2
11147  37B3
11148  37B4
11149  37B5
11150  37B6
11151  37B7
11152  37B8
11153  37B9
11154  37BA
11155  37BB
11156  37BC
11157  37BD
11158  37BE
11159  37BF
11160  37C0
11161  37C1
11162  37C2
11163  37C3
11164  37C4
11165  37C5
11166  37C6
11167  37C7
11168  37C8
11169  37C9
11170  37CA
11171  37CB
11172  37CC
11173  37CD
11174  37CE
11175  37CF
11176  37D0
11177  37D1
11178  37D2
11179  37D3
11180  37D4
11181  37D5
11182  37D6
11183  37D7
11184  37D8
11185  37D9
11186  37DA
11187  37DB
11188  37DC
11189  37DD
11190  37DE
11191  37DF
11192  37E0
11193  37E1
11194  37E2
11195  37E3
11196  37E4
11197  37E5
11198  37E6
11199  37E7
11200  37E8
11201  37E9
11202  37EA
11203  37EB
11204  37EC
11205  37ED
11206  37EE
11207  37EF
11208  37F0
11209  37F1
11210  37F2
11211  37F3
11212  37F4
11213  37F5
11214  37F6
11215  37F7
11216  37F8
11217  37F9
11218  37FA
11219  37FB
11220  37FC
11221  37FD
11222  37FE
11223  37FF
11224  3800
11225  3801
11226  3802
11227  3803
11228  3804
11229  3805
11230  3806
11231  3807
11232  3808
11233  3809
11234  380A
11235  380B
11236  380C
11237  380D
11238  380E
11239  380F
11240  3810
11241  3811
11242  3812
11243  3813
11244  3814
11245  3815
11246  3816
11247  3817
11248  3818
11249  3819
11250  381A
11251  381B
11252  381C
11253  381D
11254  381E
11255  381F
11256  3820
11257  3821
11258  3822
11259  3823
11260  3824
11261  3825
11262  3826
11263  3827
11264  3828
11265  3829
11266  382A
11267  382B
11268  382C
11269  382D
11270  382E
11271  382F
11272  3830
11273  3831
11274  3832
11275  3833
11276  3834
11277  3835
11278  3836
11279  3837
11280  3838
11281  3839
11282  383A
11283  383B
11284  383C
11285  383D
11286  383E
11287  383F
11288  3840
11289  3841
11290  3842
11291  3843
11292  3844
11293  3845
11294  3846
11295  3847
11296  3848
11297  3849
11298  384A
11299  384B
11300  384C
11301  384D
11302  384E
11303  384F
11304  3850
11305  3851
11306  3852
11307  3853
11308  3854
11309  3855
11310  3856
11311  3857
11312  3858
11313  3859
11314  385A
11315  385B
11316  385C
11317  385D
11318  385E
11319  385F
11320  3860
11321  3861
11322  3862
11323  3863
11324  3864
11325  3865
11326  3866
11327  3867
11328  3868
11329  3869
11330  386A
11331  386B
11332  386C
11333  386D
11334  386E
11335  386F
11336  3870
11337  3871
11338  3872
11339  3873
11340  3874
11341  3875
11342  3876
11343  3877
11344  3878
11345  3879
11346  387A
11347  387B
11348  387C
11349  387D
11350  387E
11351  387F
11352  3880
11353  3881
11354  3882
11355  3883
11356  3884
11357  3885
11358  3886
11359  3887
11360  3888
11361  3889
11362  388A
11363  388B
11364  388C
11365  388D
11366  388E
11367  388F
11368  3890
11369  3891
11370  3892
11371  3893
11372  3894
11373  3895
11374  3896
11375  3897
11376  3898
11377  3899
11378  389A
11379  389B
11380  389C
11381  389D
11382  389E
11383  389F
11384  38A0
11385  38A1
11386  38A2
11387  38A3
11388  38A4
11389  38A5
11390  38A6
11391  38A7
11392  38A8
11393  38A9
11394  38AA
11395  38AB
11396  38AC
11397  38AD
11398  38AE
11399  38AF
11400  38B0
11401  38B1
11402  38B2
11403  38B3
11404  38B4
11405  38B5
11406  38B6
11407  38B7
11408  38B8
11409  38B9
11410  38BA
11411  38BB
11412  38BC
11413  38BD
11414  38BE
11415  38BF
11416  38C0
11417  38C1
11418  38C2
11419  38C3
11420  38C4
11421  38C5
11422  38C6
11423  38C7
11424  38C8
11425  38C9
11426  38CA
11427  38CB
11428  38CC
11429  38CD
11430  38CE
11431  38CF
11432  38D0
11433  38D1
11434  38D2
11435  38D3
11436  38D4
11437  38D5
11438  38D6
11439  38D7
11440  38D8
11441  38D9
11442  38DA
11443  38DB
11444  38DC
11445  38DD
11446  38DE
11447  38DF
11448  38E0
11449  38E1
11450  38E2
11451  38E3
11452  38E4
11453  38E5
11454  38E6
11455  38E7
11456  38E8
11457  38E9
11458  38EA
11459  38EB
11460  38EC
11461  38ED
11462  38EE
11463  38EF
11464  38F0
11465  38F1
11466  38F2
11467  38F3
11468  38F4
11469  38F5
11470  38F6
11471  38F7
11472  38F8
11473  38F9
11474  38FA
11475  38FB
11476  38FC
11477  38FD
11478  38FE
11479  38FF
11480  3900
11481  3901
11482  3902
11483  3903
11484  3904
11485  3905
11486  3906
11487  3907
11488  3908
11489  3909
11490  390A
11491  390B
11492  390C
11493  390D
11494  390E
11495  390F
11496  3910
11497  3911
11498  3912
11499  3913
11500  3914
11501  3915
11502  3916
11503  3917
11504  3918
11505  3919
11506  391A
11507  391B
11508  391C
11509  391D
11510  391E
11511  391F
11512  3920
11513  3921
11514  3922
11515  3923
11516  3924
11517  3925
11518  3926
11519  3927
11520  3928
11521  3929
11522  392A
11523  392B
11524  392C
11525  392D
11526  392E
11527  392F
11528  3930
11529  3931
11530  3932
11531  3933
11532  3934
11533  3935
11534  3936
11535  3937
11536  3938
11537  3939
11538  393A
11539  393B
11540  393C
11541  393D
11542  393E
11543  393F
11544  3940
11545  3941
11546  3942
11547  3943
11548  3944
11549  3945
11550  3946
11551  3947
11552  3948
11553  3949
11554  394A
11555  394B
11556  394C
11557  394D
11558  394E
11559  394F
11560  3950
11561  3951
11562  3952
11563  3953
11564  3954
11565  3955
11566  3956
11567  3957
11568  3958
11569  3959
11570  395A
11571  395B
11572  395C
11573  395D
11574  395E
11575  395F
11576  3960
11577  3961
11578  3962
11579  3963
11580  3964
11581  3965
11582  3966
11583  3967
11584  3968
11585  3969
11586  396A
11587  396B
11588  396C
11589  396D
11590  396E
11591  396F
11592  3970
11593  3971
11594  3972
11595  3973
11596  3974
11597  3975
11598  3976
11599  3977
11600  3978
11601  3979
11602  397A
11603  397B
11604  397C
11605  397D
11606  397E
11607  397F
11608  3980
11609  3981
11610  3982
11611  3983
11612  3984
11613  3985
11614  3986
11615  3987
11616  3988
11617  3989
11618  398A
11619  398B
11620  398C
11621  398D
11622  398E
11623  398F
11624  3990
11625  3991
11626  3992
11627  3993
11628  3994
11629  3995
11630  3996
11631  3997
11632  3998
11633  3999
11634  399A
11635  399B
11636  399C
11637  399D
11638  399E
11639  399F
11640  39A0
11641  39A1
11642  39A2
11643  39A3
11644  39A4
11645  39A5
11646  39A6
11647  39A7
11648  39A8
11649  39A9
11650  39AA
11651  39AB
11652  39AC
11653  39AD
11654  39AE
11655  39AF
11656  39B0
11657  39B1
11658  39B2
11659  39B3
11660  39B4
11661  39B5
11662  39B6
11663  39B7
11664  39B8
11665  39B9
11666  39BA
11667  39BB
11668  39BC
11669  39BD
11670  39BE
11671  39BF
11672  39C0
11673  39C1
11674  39C2
11675  39C3
11676  39C4
11677  39C5
11678  39C6
11679  39C7
11680  39C8
11681  39C9
11682  39CA
11683  39CB
11684  39CC
11685  39CD
11686  39CE
11687  39CF
11688  39D0
11689  39D1
11690  39D2
11691  39D3
11692  39D4
11693  39D5
11694  39D6
11695  39D7
11696  39D8
11697  39D9
11698  39DA
11699  39DB
11700  39DC
11701  39DD
11702  39DE
11703  39DF
11704  39E0
11705  39E1
11706  39E2
11707  39E3
11708  39E4
11709  39E5
11710  39E6
11711  39E7
11712  39E8
11713  39E9
11714  39EA
11715  39EB
11716  39EC
11717  39ED
11718  39EE
11719  39EF
11720  39F0
11721  39F1
11722  39F2
11723  39F3
11724  39F4
11725  39F5
11726  39F6
11727  39F7
11728  39F8
11729  39F9
11730  39FA
11731  39FB
11732  39FC
11733  39FD
11734  39FE
11735  39FF
11736  3A00
11737  3A01
11738  3A02
11739  3A03
11740  3A04
11741  3A05
11742  3A06
11743  3A07
11744  3A08
11745  3A09
11746  3A0A
11747  3A0B
11748  3A0C
11749  3A0D
11750  3A0E
11751  3A0F
11752  3A10
11753  3A11
11754  3A12
11755  3A13
11756  3A14
11757  3A15
11758  3A16
11759  3A17
11760  3A18
11761  3A19
11762  3A1A
11763  3A1B
11764  3A1C
11765  3A1D
11766  3A1E
11767  3A1F
11768  3A20
11769  3A21
11770  3A22
11771  3A23
11772  3A24
11773  3A25
11774  3A26
11775  3A27
11776  3A28
11777  3A29
11778  3A2A
11779  3A2B
11780  3A2C
11781  3A2D
11782  3A2E
11783  3A2F
11784  3A30
11785  3A31
11786  3A32
11787  3A33
11788  3A34
11789  3A35
11790  3A36
11791  3A37
11792  3A38
11793  3A39
11794  3A3A
11795  3A3B
11796  3A3C
11797  3A3D
11798  3A3E
11799  3A3F
11800  3A40
11801  3A41
11802  3A42
11803  3A43
11804  3A44
11805  3A45
11806  3A46
11807  3A47
11808  3A48
11809  3A49
11810  3A4A
11811  3A4B
11812  3A4C
11813  3A4D
11814  3A4E
11815  3A4F
11816  3A50
11817  3A51
11818  3A52
11819  3A53
11820  3A54
11821  3A55
11822  3A56
11823  3A57
11824  3A58
11825  3A59
11826  3A5A
11827  3A5B
11828  3A5C
11829  3A5D
11830  3A5E
11831  3A5F
11832  3A60
11833  3A61
11834  3A62
11835  3A63
11836  3A64
11837  3A65
11838  3A66
11839  3A67
11840  3A68
11841  3A69
11842  3A6A
11843  3A6B
11844  3A6C
11845  3A6D
11846  3A6E
11847  3A6F
11848  3A70
11849  3A71
11850  3A72
11851  3A73
11852  3A74
11853  3A75
11854  3A76
11855  3A77
11856  3A78
11857  3A79
11858  3A7A
11859  3A7B
11860  3A7C
11861  3A7D
11862  3A7E
11863  3A7F
11864  3A80
11865  3A81
11866  3A82
11867  3A83
11868  3A84
11869  3A85
11870  3A86
11871  3A87
11872  3A88
11873  3A89
11874  3A8A
11875  3A8B
11876  3A8C
11877  3A8D
11878  3A8E
11879  3A8F
11880  3A90
11881  3A91
11882  3A92
11883  3A93
11884  3A94
11885  3A95
11886  3A96
11887  3A97
11888  3A98
11889  3A99
11890  3A9A
11891  3A9B
11892  3A9C
11893  3A9D
11894  3A9E
11895  3A9F
11896  3AA0
11897  3AA1
11898  3AA2
11899  3AA3
11900  3AA4
11901  3AA5
11902  3AA6
11903  3AA7
11904  3AA8
11905  3AA9
11906  3AAA
11907  3AAB
11908  3AAC
11909  3AAD
11910  3AAE
11911  3AAF
11912  3AB0
11913  3AB1
11914  3AB2
11915  3AB3
11916  3AB4
11917  3AB5
11918  3AB6
11919  3AB7
11920  3AB8
11921  3AB9
11922  3ABA
11923  3ABB
11924  3ABC
11925  3ABD
11926  3ABE
11927  3ABF
11928  3AC0
11929  3AC1
11930  3AC2
11931  3AC3
11932  3AC4
11933  3AC5
11934  3AC6
11935  3AC7
11936  3AC8
11937  3AC9
11938  3ACA
11939  3ACB
11940  3ACC
11941  3ACD
11942  3ACE
11943  3ACF
11944  3AD0
11945  3AD1
11946  3AD2
11947  3AD3
11948  3AD4
11949  3AD5
11950  3AD6
11951  3AD7
11952  3AD8
11953  3AD9
11954  3ADA
11955  3ADB
11956  3ADC
11957  3ADD
11958  3ADE
11959  3ADF
11960  3AE0
11961  3AE1
11962  3AE2
11963  3AE3
11964  3AE4
11965  3AE5
11966  3AE6
11967  3AE7
11968  3AE8
11969  3AE9
11970  3AEA
11971  3AEB
11972  3AEC
11973  3AED
11974  3AEE
11975  3AEF
11976  3AF0
11977  3AF1
11978  3AF2
11979  3AF3
11980  3AF4
11981  3AF5
11982  3AF6
11983  3AF7
11984  3AF8
11985  3AF9
11986  3AFA
11987  3AFB
11988  3AFC
11989  3AFD
11990  3AFE
11991  3AFF
11992  3B00
11993  3B01
11994  3B02
11995  3B03
11996  3B04
11997  3B05
11998  3B06
11999  3B07
12000  3B08
12001  3B09
12002  3B0A
12003  3B0B
12004  3B0C
12005  3B0D
12006  3B0E
12007  3B0F
12008  3B10
12009  3B11
12010  3B12
12011  3B13
12012  3B14
12013  3B15
12014  3B16
12015  3B17
12016  3B18
12017  3B19
12018  3B1A
12019  3B1B
12020  3B1C
12021  3B1D
12022  3B1E
12023  3B1F
12024  3B20
12025  3B21
12026  3B22
12027  3B23
12028  3B24
12029  3B25
12030  3B26
12031  3B27
12032  3B28
12033  3B29
12034  3B2A
12035  3B2B
12036  3B2C
12037  3B2D
12038  3B2E
12039  3B2F
12040  3B30
12041  3B31
12042  3B32
12043  3B33
12044  3B34
12045  3B35
12046  3B36
12047  3B37
12048  3B38
12049  3B39
12050  3B3A
12051  3B3B
12052  3B3C
12053  3B3D
12054  3B3E
12055  3B3F
12056  3B40
12057  3B41
12058  3B42
12059  3B43
12060  3B44
12061  3B45
12062  3B46
12063  3B47
12064  3B48
12065  3B49
12066  3B4A
12067  3B4B
12068  3B4C
12069  3B4D
12070  3B4E
12071  3B4F
12072  3B50
12073  3B51
12074  3B52
12075  3B53
12076  3B54
12077  3B55
12078  3B56
12079  3B57
12080  3B58
12081  3B59
12082  3B5A
12083  3B5B
12084  3B5C
12085  3B5D
12086  3B5E
12087  3B5F
12088  3B60
12089  3B61
12090  3B62
12091  3B63
12092  3B64
12093  3B65
12094  3B66
12095  3B67
12096  3B68
12097  3B69
12098  3B6A
12099  3B6B
12100  3B6C
12101  3B6D
12102  3B6E
12103  3B6F
12104  3B70
12105  3B71
12106  3B72
12107  3B73
12108  3B74
12109  3B75
12110  3B76
12111  3B77
12112  3B78
12113  3B79
12114  3B7A
12115  3B7B
12116  3B7C
12117  3B7D
12118  3B7E
12119  3B7F
12120  3B80
12121  3B81
12122  3B82
12123  3B83
12124  3B84
12125  3B85
12126  3B86
12127  3B87
12128  3B88
12129  3B89
12130  3B8A
12131  3B8B
12132  3B8C
12133  3B8D
12134  3B8E
12135  3B8F
12136  3B90
12137  3B91
12138  3B92
12139  3B93
12140  3B94
12141  3B95
12142  3B96
12143  3B97
12144  3B98
12145  3B99
12146  3B9A
12147  3B9B
12148  3B9C
12149  3B9D
12150  3B9E
12151  3B9F
12152  3BA0
12153  3BA1
12154  3BA2
12155  3BA3
12156  3BA4
12157  3BA5
12158  3BA6
12159  3BA7
12160  3BA8
12161  3BA9
12162  3BAA
12163  3BAB
12164  3BAC
12165  3BAD
12166  3BAE
12167  3BAF
12168  3BB0
12169  3BB1
12170  3BB2
12171  3BB3
12172  3BB4
12173  3BB5
12174  3BB6
12175  3BB7
12176  3BB8
12177  3BB9
12178  3BBA
12179  3BBB
12180  3BBC
12181  3BBD
12182  3BBE
12183  3BBF
12184  3BC0
12185  3BC1
12186  3BC2
12187  3BC3
12188  3BC4
12189  3BC5
12190  3BC6
12191  3BC7
12192  3BC8
12193  3BC9
12194  3BCA
12195  3BCB
12196  3BCC
12197  3BCD
12198  3BCE
12199  3BCF
12200  3BD0
12201  3BD1
12202  3BD2
12203  3BD3
12204  3BD4
12205  3BD5
12206  3BD6
12207  3BD7
12208  3BD8
12209  3BD9
12210  3BDA
12211  3BDB
12212  3BDC
12213  3BDD
12214  3BDE
12215  3BDF
12216  3BE0
12217  3BE1
12218  3BE2
12219  3BE3
12220  3BE4
12221  3BE5
12222  3BE6
12223  3BE7
12224  3BE8
12225  3BE9
12226  3BEA
12227  3BEB
12228  3BEC
12229  3BED
12230  3BEE
12231  3BEF
12232  3BF0
12233  3BF1
12234  3BF2
12235  3BF3
12236  3BF4
12237  3BF5
12238  3BF6
12239  3BF7
12240  3BF8
12241  3BF9
12242  3BFA
12243  3BFB
12244  3BFC
12245  3BFD
12246  3BFE
12247  3BFF
12248  3C00
12249  3C01
12250  3C02
12251  3C03
12252  3C04
12253  3C05
12254  3C06
12255  3C07
12256  3C08
12257  3C09
12258  3C0A
12259  3C0B
12260  3C0C
12261  3C0D
12262  3C0E
12263  3C0F
12264  3C10
12265  3C11
12266  3C12
12267  3C13
12268  3C14
12269  3C15
12270  3C16
12271  3C17
12272  3C18
12273  3C19
12274  3C1A
12275  3C1B
12276  3C1C
12277  3C1D
12278  3C1E
12279  3C1F
12280  3C20
12281  3C21
12282  3C22
12283  3C23
12284  3C24
12285  3C25
12286  3C26
12287  3C27
12288  3C28
12289  3C29
12290  3C2A
12291  3C2B
12292  3C2C
12293  3C2D
12294  3C2E
12295  3C2F
12296  3C30
12297  3C31
12298  3C32
12299  3C33
12300  3C34
12301  3C35
12302  3C36
12303  3C37
12304  3C38
12305  3C39
12306  3C3A
12307  3C3B
12308  3C3C
12309  3C3D
12310  3C3E
12311  3C3F
12312  3C40
12313  3C41
12314  3C42
12315  3C43
12316  3C44
12317  3C45
12318  3C46
12319  3C47
12320  3C48
12321  3C49
12322  3C4A
12323  3C4B
12324  3C4C
12325  3C4D
12326  3C4E
12327  3C4F
12328  3C50
12329  3C51
12330  3C52
12331  3C53
12332  3C54
12333  3C55
12334  3C56
12335  3C57
12336  3C58
12337  3C59
12338  3C5A
12339  3C5B
12340  3C5C
12341  3C5D
12342  3C5E
12343  3C5F
12344  3C60
12345  3C61
12346  3C62
12347  3C63
12348  3C64
12349  3C65
12350  3C66
12351  3C67
12352  3C68
12353  3C69
12354  3C6A
12355  3C6B
12356  3C6C
12357  3C6D
12358  3C6E
12359  3C6F
12360  3C70
12361  3C71
12362  3C72
12363  3C73
12364  3C74
12365  3C75
12366  3C76
12367  3C77
12368  3C78
12369  3C79
12370  3C7A
12371  3C7B
12372  3C7C
12373  3C7D
12374  3C7E
12375  3C7F
12376  3C80
12377  3C81
12378  3C82
12379  3C83
12380  3C84
12381  3C85
12382  3C86
12383  3C87
12384  3C88
12385  3C89
12386  3C8A
12387  3C8B
12388  3C8C
12389  3C8D
12390  3C8E
12391  3C8F
12392  3C90
12393  3C91
12394  3C92
12395  3C93
12396  3C94
12397  3C95
12398  3C96
12399  3C97
12400  3C98
12401  3C99
12402  3C9A
12403  3C9B
12404  3C9C
12405  3C9D
12406  3C9E
12407  3C9F
12408  3CA0
12409  3CA1
12410  3CA2
12411  3CA3
12412  3CA4
12413  3CA5
12414  3CA6
12415  3CA7
12416  3CA8
12417  3CA9
12418  3CAA
12419  3CAB
12420  3CAC
12421  3CAD
12422  3CAE
12423  3CAF
12424  3CB0
12425  3CB1
12426  3CB2
12427  3CB3
12428  3CB4
12429  3CB5
12430  3CB6
12431  3CB7
12432  3CB8
12433  3CB9
12434  3CBA
12435  3CBB
12436  3CBC
12437  3CBD
12438  3CBE
12439  3CBF
12440  3CC0
12441  3CC1
12442  3CC2
12443  3CC3
12444  3CC4
12445  3CC5
12446  3CC6
12447  3CC7
12448  3CC8
12449  3CC9
12450  3CCA
12451  3CCB
12452  3CCC
12453  3CCD
12454  3CCE
12455  3CCF
12456  3CD0
12457  3CD1
12458  3CD2
12459  3CD3
12460  3CD4
12461  3CD5
12462  3CD6
12463  3CD7
12464  3CD8
12465  3CD9
12466  3CDA
12467  3CDB
12468  3CDC
12469  3CDD
12470  3CDE
12471  3CDF
12472  3CE0
12473  3CE1
12474  3CE2
12475  3CE3
12476  3CE4
12477  3CE5
12478  3CE6
12479  3CE7
12480  3CE8
12481  3CE9
12482  3CEA
12483  3CEB
12484  3CEC
12485  3CED
12486  3CEE
12487  3CEF
12488  3CF0
12489  3CF1
12490  3CF2
12491  3CF3
12492  3CF4
12493  3CF5
12494  3CF6
12495  3CF7
12496  3CF8
12497  3CF9
12498  3CFA
12499  3CFB
12500  3CFC
12501  3CFD
12502  3CFE
12503  3CFF
12504  3D00
12505  3D01
12506  3D02
12507  3D03
12508  3D04
12509  3D05
12510  3D06
12511  3D07
12512  3D08
12513  3D09
12514  3D0A
12515  3D0B
12516  3D0C
12517  3D0D
12518  3D0E
12519  3D0F
12520  3D10
12521  3D11
12522  3D12
12523  3D13
12524  3D14
12525  3D15
12526  3D16
12527  3D17
12528  3D18
12529  3D19
12530  3D1A
12531  3D1B
12532  3D1C
12533  3D1D
12534  3D1E
12535  3D1F
12536  3D20
12537  3D21
12538  3D22
12539  3D23
12540  3D24
12541  3D25
12542  3D26
12543  3D27
12544  3D28
12545  3D29
12546  3D2A
12547  3D2B
12548  3D2C
12549  3D2D
12550  3D2E
12551  3D2F
12552  3D30
12553  3D31
12554  3D32
12555  3D33
12556  3D34
12557  3D35
12558  3D36
12559  3D37
12560  3D38
12561  3D39
12562  3D3A
12563  3D3B
12564  3D3C
12565  3D3D
12566  3D3E
12567  3D3F
12568  3D40
12569  3D41
12570  3D42
12571  3D43
12572  3D44
12573  3D45
12574  3D46
12575  3D47
12576  3D48
12577  3D49
12578  3D4A
12579  3D4B
12580  3D4C
12581  3D4D
12582  3D4E
12583  3D4F
12584  3D50
12585  3D51
12586  3D52
12587  3D53
12588  3D54
12589  3D55
12590  3D56
12591  3D57
12592  3D58
12593  3D59
12594  3D5A
12595  3D5B
12596  3D5C
12597  3D5D
12598  3D5E
12599  3D5F
12600  3D60
12601  3D61
12602  3D62
12603  3D63
12604  3D64
12605  3D65
12606  3D66
12607  3D67
12608  3D68
12609  3D69
12610  3D6A
12611  3D6B
12612  3D6C
12613  3D6D
12614  3D6E
12615  3D6F
12616  3D70
12617  3D71
12618  3D72
12619  3D73
12620  3D74
12621  3D75
12622  3D76
12623  3D77
12624  3D78
12625  3D79
12626  3D7A
12627  3D7B
12628  3D7C
12629  3D7D
12630  3D7E
12631  3D7F
12632  3D80
12633  3D81
12634  3D82
12635  3D83
12636  3D84
12637  3D85
12638  3D86
12639  3D87
12640  3D88
12641  3D89
12642  3D8A
12643  3D8B
12644  3D8C
12645  3D8D
12646  3D8E
12647  3D8F
12648  3D90
12649  3D91
12650  3D92
12651  3D93
12652  3D94
12653  3D95
12654  3D96
12655  3D97
12656  3D98
12657  3D99
12658  3D9A
12659  3D9B
12660  3D9C
12661  3D9D
12662  3D9E
12663  3D9F
12664  3DA0
12665  3DA1
12666  3DA2
12667  3DA3
12668  3DA4
12669  3DA5
12670  3DA6
12671  3DA7
12672  3DA8
12673  3DA9
12674  3DAA
12675  3DAB
12676  3DAC
12677  3DAD
12678  3DAE
12679  3DAF
12680  3DB0
12681  3DB1
12682  3DB2
12683  3DB3
12684  3DB4
12685  3DB5
12686  3DB6
12687  3DB7
12688  3DB8
12689  3DB9
12690  3DBA
12691  3DBB
12692  3DBC
12693  3DBD
12694  3DBE
12695  3DBF
12696  3DC0
12697  3DC1
12698  3DC2
12699  3DC3
12700  3DC4
12701  3DC5
12702  3DC6
12703  3DC7
12704  3DC8
12705  3DC9
12706  3DCA
12707  3DCB
12708  3DCC
12709  3DCD
12710  3DCE
12711  3DCF
12712  3DD0
12713  3DD1
12714  3DD2
12715  3DD3
12716  3DD4
12717  3DD5
12718  3DD6
12719  3DD7
12720  3DD8
12721  3DD9
12722  3DDA
12723  3DDB
12724  3DDC
12725  3DDD
12726  3DDE
12727  3DDF
12728  3DE0
12729  3DE1
12730  3DE2
12731  3DE3
12732  3DE4
12733  3DE5
12734  3DE6
12735  3DE7
12736  3DE8
12737  3DE9
12738  3DEA
12739  3DEB
12740  3DEC
12741  3DED
12742  3DEE
12743  3DEF
12744  3DF0
12745  3DF1
12746  3DF2
12747  3DF3
12748  3DF4
12749  3DF5
12750  3DF6
12751  3DF7
12752  3DF8
12753  3DF9
12754  3DFA
12755  3DFB
12756  3DFC
12757  3DFD
12758  3DFE
12759  3DFF
12760  3E00
12761  3E01
12762  3E02
12763  3E03
12764  3E04
12765  3E05
12766  3E06
12767  3E07
12768  3E08
12769  3E09
12770  3E0A
12771  3E0B
12772  3E0C
12773  3E0D
12774  3E0E
12775  3E0F
12776  3E10
12777  3E11
12778  3E12
12779  3E13
12780  3E14
12781  3E15
12782  3E16
12783  3E17
12784  3E18
12785  3E19
12786  3E1A
12787  3E1B
12788  3E1C
12789  3E1D
12790  3E1E
12791  3E1F
12792  3E20
12793  3E21
12794  3E22
12795  3E23
12796  3E24
12797  3E25
12798  3E26
12799  3E27
12800  3E28
12801  3E29
12802  3E2A
12803  3E2B
12804  3E2C
12805  3E2D
12806  3E2E
12807  3E2F
12808  3E30
12809  3E31
12810  3E32
12811  3E33
12812  3E34
12813  3E35
12814  3E36
12815  3E37
12816  3E38
12817  3E39
12818  3E3A
12819  3E3B
12820  3E3C
12821  3E3D
12822  3E3E
12823  3E3F
12824  3E40
12825  3E41
12826  3E42
12827  3E43
12828  3E44
12829  3E45
12830  3E46
12831  3E47
12832  3E48
12833  3E49
12834  3E4A
12835  3E4B
12836  3E4C
12837  3E4D
12838  3E4E
12839  3E4F
12840  3E50
12841  3E51
12842  3E52
12843  3E53
12844  3E54
12845  3E55
12846  3E56
12847  3E57
12848  3E58
12849  3E59
12850  3E5A
12851  3E5B
12852  3E5C
12853  3E5D
12854  3E5E
12855  3E5F
12856  3E60
12857  3E61
12858  3E62
12859  3E63
12860  3E64
12861  3E65
12862  3E66
12863  3E67
12864  3E68
12865  3E69
12866  3E6A
12867  3E6B
12868  3E6C
12869  3E6D
12870  3E6E
12871  3E6F
12872  3E70
12873  3E71
12874  3E72
12875  3E73
12876  3E74
12877  3E75
12878  3E76
12879  3E77
12880  3E78
12881  3E79
12882  3E7A
12883  3E7B
12884  3E7C
12885  3E7D
12886  3E7E
12887  3E7F
12888  3E80
12889  3E81
12890  3E82
12891  3E83
12892  3E84
12893  3E85
12894  3E86
12895  3E87
12896  3E88
12897  3E89
12898  3E8A
12899  3E8B
12900  3E8C
12901  3E8D
12902  3E8E
12903  3E8F
12904  3E90
12905  3E91
12906  3E92
12907  3E93
12908  3E94
12909  3E95
12910  3E96
12911  3E97
12912  3E98
12913  3E99
12914  3E9A
12915  3E9B
12916  3E9C
12917  3E9D
12918  3E9E
12919  3E9F
12920  3EA0
12921  3EA1
12922  3EA2
12923  3EA3
12924  3EA4
12925  3EA5
12926  3EA6
12927  3EA7
12928  3EA8
12929  3EA9
12930  3EAA
12931  3EAB
12932  3EAC
12933  3EAD
12934  3EAE
12935  3EAF
12936  3EB0
12937  3EB1
12938  3EB2
12939  3EB3
12940  3EB4
12941  3EB5
12942  3EB6
12943  3EB7
12944  3EB8
12945  3EB9
12946  3EBA
12947  3EBB
12948  3EBC
12949  3EBD
12950  3EBE
12951  3EBF
12952  3EC0
12953  3EC1
12954  3EC2
12955  3EC3
12956  3EC4
12957  3EC5
12958  3EC6
12959  3EC7
12960  3EC8
12961  3EC9
12962  3ECA
12963  3ECB
12964  3ECC
12965  3ECD
12966  3ECE
12967  3ECF
12968  3ED0
12969  3ED1
12970  3ED2
12971  3ED3
12972  3ED4
12973  3ED5
12974  3ED6
12975  3ED7
12976  3ED8
12977  3ED9
12978  3EDA
12979  3EDB
12980  3EDC
12981  3EDD
12982  3EDE
12983  3EDF
12984  3EE0
12985  3EE1
12986  3EE2
12987  3EE3
12988  3EE4
12989  3EE5
12990  3EE6
12991  3EE7
12992  3EE8
12993  3EE9
12994  3EEA
12995  3EEB
12996  3EEC
12997  3EED
12998  3EEE
12999  3EEF
13000  3EF0
13001  3EF1
13002  3EF2
13003  3EF3
13004  3EF4
13005  3EF5
13006  3EF6
13007  3EF7
13008  3EF8
13009  3EF9
13010  3EFA
13011  3EFB
13012  3EFC
13013  3EFD
13014  3EFE
13015  3EFF
13016  3F00
13017  3F01
13018  3F02
13019  3F03
13020  3F04
13021  3F05
13022  3F06
13023  3F07
13024  3F08
13025  3F09
13026  3F0A
13027  3F0B
13028  3F0C
13029  3F0D
13030  3F0E
13031  3F0F
13032  3F10
13033  3F11
13034  3F12
13035  3F13
13036  3F14
13037  3F15
13038  3F16
13039  3F17
13040  3F18
13041  3F19
13042  3F1A
13043  3F1B
13044  3F1C
13045  3F1D
13046  3F1E
13047  3F1F
13048  3F20
13049  3F21
13050  3F22
13051  3F23
13052  3F24
13053  3F25
13054  3F26
13055  3F27
13056  3F28
13057  3F29
13058  3F2A
13059  3F2B
13060  3F2C
13061  3F2D
13062  3F2E
13063  3F2F
13064  3F30
13065  3F31
13066  3F32
13067  3F33
13068  3F34
13069  3F35
13070  3F36
13071  3F37
13072  3F38
13073  3F39
13074  3F3A
13075  3F3B
13076  3F3C
13077  3F3D
13078  3F3E
13079  3F3F
13080  3F40
13081  3F41
13082  3F42
13083  3F43
13084  3F44
13085  3F45
13086  3F46
13087  3F47
13088  3F48
13089  3F49
13090  3F4A
13091  3F4B
13092  3F4C
13093  3F4D
13094  3F4E
13095  3F4F
13096  3F50
13097  3F51
13098  3F52
13099  3F53
13100  3F54
13101  3F55
13102  3F56
13103  3F57
13104  3F58
13105  3F59
13106  3F5A
13107  3F5B
13108  3F5C
13109  3F5D
13110  3F5E
13111  3F5F
13112  3F60
13113  3F61
13114  3F62
13115  3F63
13116  3F64
13117  3F65
13118  3F66
13119  3F67
13120  3F68
13121  3F69
13122  3F6A
13123  3F6B
13124  3F6C
13125  3F6D
13126  3F6E
13127  3F6F
13128  3F70
13129  3F71
13130  3F72
13131  3F73
13132  3F74
13133  3F75
13134  3F76
13135  3F77
13136  3F78
13137  3F79
13138  3F7A
13139  3F7B
13140  3F7C
13141  3F7D
13142  3F7E
13143  3F7F
13144  3F80
13145  3F81
13146  3F82
13147  3F83
13148  3F84
13149  3F85
13150  3F86
13151  3F87
13152  3F88
13153  3F89
13154  3F8A
13155  3F8B
13156  3F8C
13157  3F8D
13158  3F8E
13159  3F8F
13160  3F90
13161  3F91
13162  3F92
13163  3F93
13164  3F94
13165  3F95
13166  3F96
13167  3F97
13168  3F98
13169  3F99
13170  3F9A
13171  3F9B
13172  3F9C
13173  3F9D
13174  3F9E
13175  3F9F
13176  3FA0
13177  3FA1
13178  3FA2
13179  3FA3
13180  3FA4
13181  3FA5
13182  3FA6
13183  3FA7
13184  3FA8
13185  3FA9
13186  3FAA
13187  3FAB
13188  3FAC
13189  3FAD
13190  3FAE
13191  3FAF
13192  3FB0
13193  3FB1
13194  3FB2
13195  3FB3
13196  3FB4
13197  3FB5
13198  3FB6
13199  3FB7
13200  3FB8
13201  3FB9
13202  3FBA
13203  3FBB
13204  3FBC
13205  3FBD
13206  3FBE
13207  3FBF
13208  3FC0
13209  3FC1
13210  3FC2
13211  3FC3
13212  3FC4
13213  3FC5
13214  3FC6
13215  3FC7
13216  3FC8
13217  3FC9
13218  3FCA
13219  3FCB
13220  3FCC
13221  3FCD
13222  3FCE
13223  3FCF
13224  3FD0
13225  3FD1
13226  3FD2
13227  3FD3
13228  3FD4
13229  3FD5
13230  3FD6
13231  3FD7
13232  3FD8
13233  3FD9
13234  3FDA
13235  3FDB
13236  3FDC
13237  3FDD
13238  3FDE
13239  3FDF
13240  3FE0
13241  3FE1
13242  3FE2
13243  3FE3
13244  3FE4
13245  3FE5
13246  3FE6
13247  3FE7
13248  3FE8
13249  3FE9
13250  3FEA
13251  3FEB
13252  3FEC
13253  3FED
13254  3FEE
13255  3FEF
13256  3FF0
13257  3FF1
13258  3FF2
13259  3FF3
13260  3FF4
13261  3FF5
13262  3FF6
13263  3FF7
13264  3FF8
13265  3FF9
13266  3FFA
13267  3FFB
13268  3FFC
13269  3FFD
13270  3FFE
13271  3FFF
13272  4000
13273  4001
13274  4002
13275  4003
13276  4004
13277  4005
13278  4006
13279  4007
13280  4008
13281  4009
13282  400A
13283  400B
13284  400C
13285  400D
13286  400E
13287  400F
13288  4010
13289  4011
13290  4012
13291  4013
13292  4014
13293  4015
13294  4016
13295  4017
13296  4018
13297  4019
13298  401A
13299  401B
13300  401C
13301  401D
13302  401E
13303  401F
13304  4020
13305  4021
13306  4022
13307  4023
13308  4024
13309  4025
13310  4026
13311  4027
13312  4028
13313  4029
13314  402A
13315  402B
13316  402C
13317  402D
13318  402E
13319  402F
13320  4030
13321  4031
13322  4032
13323  4033
13324  4034
13325  4035
13326  4036
13327  4037
13328  4038
13329  4039
13330  403A
13331  403B
13332  403C
13333  403D
13334  403E
13335  403F
13336  4040
13337  4041
13338  4042
13339  4043
13340  4044
13341  4045
13342  4046
13343  4047
13344  4048
13345  4049
13346  404A
13347  404B
13348  404C
13349  404D
13350  404E
13351  404F
13352  4050
13353  4051
13354  4052
13355  4053
13356  4054
13357  4055
13358  4056
13359  4057
13360  4058
13361  4059
13362  405A
13363  405B
13364  405C
13365  405D
13366  405E
13367  405F
13368  4060
13369  4061
13370  4062
13371  4063
13372  4064
13373  4065
13374  4066
13375  4067
13376  4068
13377  4069
13378  406A
13379  406B
13380  406C
13381  406D
13382  406E
13383  406F
13384  4070
13385  4071
13386  4072
13387  4073
13388  4074
13389  4075
13390  4076
13391  4077
13392  4078
13393  4079
13394  407A
13395  407B
13396  407C
13397  407D
13398  407E
13399  407F
13400  4080
13401  4081
13402  4082
13403  4083
13404  4084
13405  4085
13406  4086
13407  4087
13408  4088
13409  4089
13410  408A
13411  408B
13412  408C
13413  408D
13414  408E
13415  408F
13416  4090
13417  4091
13418  4092
13419  4093
13420  4094
13421  4095
13422  4096
13423  4097
13424  4098
13425  4099
13426  409A
13427  409B
13428  409C
13429  409D
13430  409E
13431  409F
13432  40A0
13433  40A1
13434  40A2
13435  40A3
13436  40A4
13437  40A5
13438  40A6
13439  40A7
13440  40A8
13441  40A9
13442  40AA
13443  40AB
13444  40AC
13445  40AD
13446  40AE
13447  40AF
13448  40B0
13449  40B1
13450  40B2
13451  40B3
13452  40B4
13453  40B5
13454  40B6
13455  40B7
13456  40B8
13457  40B9
13458  40BA
13459  40BB
13460  40BC
13461  40BD
13462  40BE
13463  40BF
13464  40C0
13465  40C1
13466  40C2
13467  40C3
13468  40C4
13469  40C5
13470  40C6
13471  40C7
13472  40C8
13473  40C9
13474  40CA
13475  40CB
13476  40CC
13477  40CD
13478  40CE
13479  40CF
13480  40D0
13481  40D1
13482  40D2
13483  40D3
13484  40D4
13485  40D5
13486  40D6
13487  40D7
13488  40D8
13489  40D9
13490  40DA
13491  40DB
13492  40DC
13493  40DD
13494  40DE
13495  40DF
13496  40E0
13497  40E1
13498  40E2
13499  40E3
13500  40E4
13501  40E5
13502  40E6
13503  40E7
13504  40E8
13505  40E9
13506  40EA
13507  40EB
13508  40EC
13509  40ED
13510  40EE
13511  40EF
13512  40F0
13513  40F1
13514  40F2
13515  40F3
13516  40F4
13517  40F5
13518  40F6
13519  40F7
13520  40F8
13521  40F9
13522  40FA
13523  40FB
13524  40FC
13525  40FD
13526  40FE
13527  40FF
13528  4100
13529  4101
13530  4102
13531  4103
13532  4104
13533  4105
13534  4106
13535  4107
13536  4108
13537  4109
13538  410A
13539  410B
13540  410C
13541  410D
13542  410E
13543  410F
13544  4110
13545  4111
13546  4112
13547  4113
13548  4114
13549  4115
13550  4116
13551  4117
13552  4118
13553  4119
13554  411A
13555  411B
13556  411C
13557  411D
13558  411E
13559  411F
13560  4120
13561  4121
13562  4122
13563  4123
13564  4124
13565  4125
13566  4126
13567  4127
13568  4128
13569  4129
13570  412A
13571  412B
13572  412C
13573  412D
13574  412E
13575  412F
13576  4130
13577  4131
13578  4132
13579  4133
13580  4134
13581  4135
13582  4136
13583  4137
13584  4138
13585  4139
13586  413A
13587  413B
13588  413C
13589  413D
13590  413E
13591  413F
13592  4140
13593  4141
13594  4142
13595  4143
13596  4144
13597  4145
13598  4146
13599  4147
13600  4148
13601  4149
13602  414A
13603  414B
13604  414C
13605  414D
13606  414E
13607  414F
13608  4150
13609  4151
13610  4152
13611  4153
13612  4154
13613  4155
13614  4156
13615  4157
13616  4158
13617  4159
13618  415A
13619  415B
13620  415C
13621  415D
13622  415E
13623  415F
13624  4160
13625  4161
13626  4162
13627  4163
13628  4164
13629  4165
13630  4166
13631  4167
13632  4168
13633  4169
13634  416A
13635  416B
13636  416C
13637  416D
13638  416E
13639  416F
13640  4170
13641  4171
13642  4172
13643  4173
13644  4174
13645  4175
13646  4176
13647  4177
13648  4178
13649  4179
13650  417A
13651  417B
13652  417C
13653  417D
13654  417E
13655  417F
13656  4180
13657  4181
13658  4182
13659  4183
13660  4184
13661  4185
13662  4186
13663  4187
13664  4188
13665  4189
13666  418A
13667  418B
13668  418C
13669  418D
13670  418E
13671  418F
13672  4190
13673  4191
13674  4192
13675  4193
13676  4194
13677  4195
13678  4196
13679  4197
13680  4198
13681  4199
13682  419A
13683  419B
13684  419C
13685  419D
13686  419E
13687  419F
13688  41A0
13689  41A1
13690  41A2
13691  41A3
13692  41A4
13693  41A5
13694  41A6
13695  41A7
13696  41A8
13697  41A9
13698  41AA
13699  41AB
13700  41AC
13701  41AD
13702  41AE
13703  41AF
13704  41B0
13705  41B1
13706  41B2
13707  41B3
13708  41B4
13709  41B5
13710  41B6
13711  41B7
13712  41B8
13713  41B9
13714  41BA
13715  41BB
13716  41BC
13717  41BD
13718  41BE
13719  41BF
13720  41C0
13721  41C1
13722  41C2
13723  41C3
13724  41C4
13725  41C5
13726  41C6
13727  41C7
13728  41C8
13729  41C9
13730  41CA
13731  41CB
13732  41CC
13733  41CD
13734  41CE
13735  41CF
13736  41D0
13737  41D1
13738  41D2
13739  41D3
13740  41D4
13741  41D5
13742  41D6
13743  41D7
13744  41D8
13745  41D9
13746  41DA
13747  41DB
13748  41DC
13749  41DD
13750  41DE
13751  41DF
13752  41E0
13753  41E1
13754  41E2
13755  41E3
13756  41E4
13757  41E5
13758  41E6
13759  41E7
13760  41E8
13761  41E9
13762  41EA
13763  41EB
13764  41EC
13765  41ED
13766  41EE
13767  41EF
13768  41F0
13769  41F1
13770  41F2
13771  41F3
13772  41F4
13773  41F5
13774  41F6
13775  41F7
13776  41F8
13777  41F9
13778  41FA
13779  41FB
13780  41FC
13781  41FD
13782  41FE
13783  41FF
13784  4200
13785  4201
13786  4202
13787  4203
13788  4204
13789  4205
13790  4206
13791  4207
13792  4208
13793  4209
13794  420A
13795  420B
13796  420C
13797  420D
13798  420E
13799  420F
13800  4210
13801  4211
13802  4212
13803  4213
13804  4214
13805  4215
13806  4216
13807  4217
13808  4218
13809  4219
13810  421A
13811  421B
13812  421C
13813  421D
13814  421E
13815  421F
13816  4220
13817  4221
13818  4222
13819  4223
13820  4224
13821  4225
13822  4226
13823  4227
13824  4228
13825  4229
13826  422A
13827  422B
13828  422C
13829  422D
13830  422E
13831  422F
13832  4230
13833  4231
13834  4232
13835  4233
13836  4234
13837  4235
13838  4236
13839  4237
13840  4238
13841  4239
13842  423A
13843  423B
13844  423C
13845  423D
13846  423E
13847  423F
13848  4240
13849  4241
13850  4242
13851  4243
13852  4244
13853  4245
13854  4246
13855  4247
13856  4248
13857  4249
13858  424A
13859  424B
13860  424C
13861  424D
13862  424E
13863  424F
13864  4250
13865  4251
13866  4252
13867  4253
13868  4254
13869  4255
13870  4256
13871  4257
13872  4258
13873  4259
13874  425A
13875  425B
13876  425C
13877  425D
13878  425E
13879  425F
13880  4260
13881  4261
13882  4262
13883  4263
13884  4264
13885  4265
13886  4266
13887  4267
13888  4268
13889  4269
13890  426A
13891  426B
13892  426C
13893  426D
13894  426E
13895  426F
13896  4270
13897  4271
13898  4272
13899  4273
13900  4274
13901  4275
13902  4276
13903  4277
13904  4278
13905  4279
13906  427A
13907  427B
13908  427C
13909  427D
13910  427E
13911  427F
13912  4280
13913  4281
13914  4282
13915  4283
13916  4284
13917  4285
13918  4286
13919  4287
13920  4288
13921  4289
13922  428A
13923  428B
13924  428C
13925  428D
13926  428E
13927  428F
13928  4290
13929  4291
13930  4292
13931  4293
13932  4294
13933  4295
13934  4296
13935  4297
13936  4298
13937  4299
13938  429A
13939  429B
13940  429C
13941  429D
13942  429E
13943  429F
13944  42A0
13945  42A1
13946  42A2
13947  42A3
13948  42A4
13949  42A5
13950  42A6
13951  42A7
13952  42A8
13953  42A9
13954  42AA
13955  42AB
13956  42AC
13957  42AD
13958  42AE
13959  42AF
13960  42B0
13961  42B1
13962  42B2
13963  42B3
13964  42B4
13965  42B5
13966  42B6
13967  42B7
13968  42B8
13969  42B9
13970  42BA
13971  42BB
13972  42BC
13973  42BD
13974  42BE
13975  42BF
13976  42C0
13977  42C1
13978  42C2
13979  42C3
13980  42C4
13981  42C5
13982  42C6
13983  42C7
13984  42C8
13985  42C9
13986  42CA
13987  42CB
13988  42CC
13989  42CD
13990  42CE
13991  42CF
13992  42D0
13993  42D1
13994  42D2
13995  42D3
13996  42D4
13997  42D5
13998  42D6
13999  42D7
14000  42D8
14001  42D9
14002  42DA
14003  42DB
14004  42DC
14005  42DD
14006  42DE
14007  42DF
14008  42E0
14009  42E1
14010  42E2
14011  42E3
14012  42E4
14013  42E5
14014  42E6
14015  42E7
14016  42E8
14017  42E9
14018  42EA
14019  42EB
14020  42EC
14021  42ED
14022  42EE
14023  42EF
14024  42F0
14025  42F1
14026  42F2
14027  42F3
14028  42F4
14029  42F5
14030  42F6
14031  42F7
14032  42F8
14033  42F9
14034  42FA
14035  42FB
14036  42FC
14037  42FD
14038  42FE
14039  42FF
14040  4300
14041  4301
14042  4302
14043  4303
14044  4304
14045  4305
14046  4306
14047  4307
14048  4308
14049  4309
14050  430A
14051  430B
14052  430C
14053  430D
14054  430E
14055  430F
14056  4310
14057  4311
14058  4312
14059  4313
14060  4314
14061  4315
14062  4316
14063  4317
14064  4318
14065  4319
14066  431A
14067  431B
14068  431C
14069  431D
14070  431E
14071  431F
14072  4320
14073  4321
14074  4322
14075  4323
14076  4324
14077  4325
14078  4326
14079  4327
14080  4328
14081  4329
14082  432A
14083  432B
14084  432C
14085  432D
14086  432E
14087  432F
14088  4330
14089  4331
14090  4332
14091  4333
14092  4334
14093  4335
14094  4336
14095  4337
14096  4338
14097  4339
14098  433A
14099  433B
14100  433C
14101  433D
14102  433E
14103  433F
14104  4340
14105  4341
14106  4342
14107  4343
14108  4344
14109  4345
14110  4346
14111  4347
14112  4348
14113  4349
14114  434A
14115  434B
14116  434C
14117  434D
14118  434E
14119  434F
14120  4350
14121  4351
14122  4352
14123  4353
14124  4354
14125  4355
14126  4356
14127  4357
14128  4358
14129  4359
14130  435A
14131  435B
14132  435C
14133  435D
14134  435E
14135  435F
14136  4360
14137  4361
14138  4362
14139  4363
14140  4364
14141  4365
14142  4366
14143  4367
14144  4368
14145  4369
14146  436A
14147  436B
14148  436C
14149  436D
14150  436E
14151  436F
14152  4370
14153  4371
14154  4372
14155  4373
14156  4374
14157  4375
14158  4376
14159  4377
14160  4378
14161  4379
14162  437A
14163  437B
14164  437C
14165  437D
14166  437E
14167  437F
14168  4380
14169  4381
14170  4382
14171  4383
14172  4384
14173  4385
14174  4386
14175  4387
14176  4388
14177  4389
14178  438A
14179  438B
14180  438C
14181  438D
14182  438E
14183  438F
14184  4390
14185  4391
14186  4392
14187  4393
14188  4394
14189  4395
14190  4396
14191  4397
14192  4398
14193  4399
14194  439A
14195  439B
14196  439C
14197  439D
14198  439E
14199  439F
14200  43A0
14201  43A1
14202  43A2
14203  43A3
14204  43A4
14205  43A5
14206  43A6
14207  43A7
14208  43A8
14209  43A9
14210  43AA
14211  43AB
14212  43AC
14213  43AD
14214  43AE
14215  43AF
14216  43B0
14217  43B1
14218  43B2
14219  43B3
14220  43B4
14221  43B5
14222  43B6
14223  43B7
14224  43B8
14225  43B9
14226  43BA
14227  43BB
14228  43BC
14229  43BD
14230  43BE
14231  43BF
14232  43C0
14233  43C1
14234  43C2
14235  43C3
14236  43C4
14237  43C5
14238  43C6
14239  43C7
14240  43C8
14241  43C9
14242  43CA
14243  43CB
14244  43CC
14245  43CD
14246  43CE
14247  43CF
14248  43D0
14249  43D1
14250  43D2
14251  43D3
14252  43D4
14253  43D5
14254  43D6
14255  43D7
14256  43D8
14257  43D9
14258  43DA
14259  43DB
14260  43DC
14261  43DD
14262  43DE
14263  43DF
14264  43E0
14265  43E1
14266  43E2
14267  43E3
14268  43E4
14269  43E5
14270  43E6
14271  43E7
14272  43E8
14273  43E9
14274  43EA
14275  43EB
14276  43EC
14277  43ED
14278  43EE
14279  43EF
14280  43F0
14281  43F1
14282  43F2
14283  43F3
14284  43F4
14285  43F5
14286  43F6
14287  43F7
14288  43F8
14289  43F9
14290  43FA
14291  43FB
14292  43FC
14293  43FD
14294  43FE
14295  43FF
14296  4400
14297  4401
014298  000519        
014299  000520  var hFonts[53] ;
014300  000521  var stringsCV[53] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
14301  226E
14302  226F
14303  2270
14304  2271
14305  2272
14306  2273
14307  2274
14308  2275
14309  2276
14310  2277
14311  2278
14312  2279
14313  227A
14314  227B
14315  227C
14316  227D
14317  227E
14318  227F
14319  2280
14320  2281
14321  2282
14322  2283
14323  2284
14324  2285
14325  2286
14326  2287
14327  2288
14328  2289
14329  228A
14330  228B
14331  228C
14332  228D
14333  228E
14334  228F
14335  2290
14336  2291
14337  2292
14338  2293
14339  2294
14340  2295
14341  2296
14342  2297
14343  2298
14344  2299
14345  229A
14346  229B
14347  229C
14348  229D
14349  229E
14350  229F
14351  22A0
14352  22A1
14353  22A2
14354  22A3
14355  22A4
14356  22A5
14357  22A6
14358  22A7
14359  22A8
14360  22A9
14361  22AA
14362  22AB
14363  22AC
14364  22AD
14365  22AE
14366  22AF
14367  22B0
14368  22B1
14369  22B2
14370  22B3
14371  22B4
14372  22B5
14373  22B6
14374  22B7
14375  22B8
14376  22B9
14377  22BA
14378  22BB
14379  22BC
14380  22BD
14381  22BE
14382  22BF
14383  22C0
14384  22C1
14385  22C2
14386  22C3
14387  22C4
14388  22C5
14389  22C6
14390  22C7
14391  22C8
14392  22C9
14393  22CA
14394  22CB
14395  22CC
14396  22CD
14397  22CE
14398  22CF
14399  22D0
14400  22D1
14401  22D2
14402  22D3
14403  22D4
14404  22D5
14405  22D6
14406  22D7
014407  000522  // Start P2.inc
014408  000523  var oObjects[MaxTotObjects+1] ;                 // address of objects
014409  000524  var CurrentForm ;
014410  000525  var TouchXpos, TouchYpos ;
014411  000526  var InputType, TouchState, CurInputData, pInputIndex ;
014412  000527  var comRX[40], cmd[CMDLenMAX] ;
014413  000528        
014414  000529  var InputCS, OutputCS ;
014415  000530        
014416  000531        
014417  000532        
014418  000533  func seroutCS(var op)
014419  000534      serout(op) ;
014420  000535      OutputCS ^= op ;
014421  000536  endfunc
014422  000537        
014423  000538  func nak0()
014424  000539      serout(NAK) ;
014425  000540      InputCS := 0 ;
014426  000541  endfunc
014427  000542        
014428  000543  func seroutOcs()
014429  000544      serout(OutputCS) ;
014430  000545      OutputCS := 0 ;
014431  000546  endfunc
014432  000547        
014433  000548  func SendReport(var id, var objt, var objn, var val)
014434  000549      seroutCS(id) ;
014435  000550      seroutCS(objt) ;
014436  000551      seroutCS(objn) ;
014437  000552      seroutCS(val >> 8) ; // first 8 bits
014438  000553      seroutCS(val) ;
014439  000554      seroutOcs() ;
014440  000555  endfunc
014441  000556        
014442  000557        
014443  000558  func ReadObject(var ObjectType, var ObjectIdx)
014444  000559      var j, k, Objects ;
014445  000560      Objects := *(oObjects+ObjectType) ;
014446  000561        
014447  000562      j := 2 + ObjectIdx * 2 + Objects ;
014448  000563       if (ObjectType == tForm)
014449  000564          k := CurrentForm ;
014450  000565      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
014451  000566          k := img_GetWord(hndl, *j, IMAGE_TAG2);
014452  000567      else if (ObjectType == tStrings)
014453  000568          k := stringsCV[ObjectIdx];
014454  000569          else
014455  000570          k := img_GetWord(hndl, *j, IMAGE_INDEX);
014456  000571          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
014457  000572                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
014458  000573      endif
014459  000574      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
014460  000575  endfunc
014461  000576        
014462  000577        
014463  000578  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
014464  000579      var i, j, k, Objects ;
014465  000580      ObjectType &= 0x3f ;
014466  000581      if (ObjectType == tForm)
014467  000582          ActivateForm(ObjectIdx) ;
014468  000583      else
014469  000584          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
014470  000585          i := *(Objects) ;
014471  000586          switch (ObjectType)
014472  000587              case tWinButton :
014473  000588                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
014474  000589                  break ;
014475  000590              case tUserButton :
014476  000591                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
014477  000592                  break ;
014478  000593              default : j := -1 ;
014479  000594          endswitch
014480  000595          if (j != -1)
014481  000596              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
014482  000597              NewVal := NewVal << 1 ;
014483  000598              if (OVF())      // button group index change
014484  000599                  if (*(j+InputData+Ofs_IPD_P1))
014485  000600                      k &= 1 ;    // mask off old group index for momentary
014486  000601                  else
014487  000602                      k &= 3 ;    // mask off old group index for toggle
014488  000603                  endif
014489  000604              else            // normal set
014490  000605                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
014491  000606                  k &= 0xfffc ;    // retain only group index for state set
014492  000607              endif
014493  000608              NewVal |= k ;
014494  000609          endif
014495  000610           if (ObjectType == tLeddigits)
014496  000611              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
014497  000612              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
014498  000613          else if (ObjectType == tStrings)
014499  000614              PrintStrings(ObjectIdx, NewVal, 0);
014500  000615          else
014501  000616              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
014502  000617              img_Show(hndl, i) ; // will only display if form is current
014503  000618          endif
014504  000619      endif
014505  000620  endfunc
014506  000621        
014507  000622  func TurnOffButtons(var group)
014508  000623      var j, k, l;
014509  000624      for (j := 0; j < nInputs; j++)
014510  000625          k := j*IPDatasize ;
014511  000626          if (*(InputData+k+Ofs_IPD_P2) == group)
014512  000627              l := -1 ;
014513  000628               if (*(InputData+k) == tWinButton)
014514  000629                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
014515  000630                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
014516  000631                  img_Show(hndl, l);      // only shows on current form
014517  000632              else if (*(InputData+k) == tUserButton)
014518  000633                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
014519  000634                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
014520  000635                  img_Show(hndl, l);      // only shows on current form
014521  000636              endif
014522  000637          endif
014523  000638      next
014524  000639  endfunc
014525  000640        
014526  000641        
014527  000642  // WARNING, this code will crash if newval exceeds maximum displayable number
014528  000643  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
014529  000644      var i, j, k, l, lb, newval ;
014530  000645      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
014531  000646      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
014532  000647      i := -1 ;
014533  000648      j := *(typeptr) ;
014534  000649      repeat
014535  000650          typeptr += 2 ;
014536  000651          i++ ;
014537  000652          until (*(typeptr) == imgidx);
014538  000653      j := setptr + i*10 ;
014539  000654        
014540  000655      imgidx++ ;
014541  000656      l := 1 ;
014542  000657      for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
014543  000658          l *= 10 ;
014544  000659      next
014545  000660      lb := *(j+Ofs_Digits_LeadingBlanks) ;
014546  000661      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
014547  000662          k := newval / l ;
014548  000663          newval -= k * l ;
014549  000664          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
014550  000665              if (k == 0)
014551  000666                  k := 10 ;
014552  000667              else
014553  000668                  lb := 0 ;
014554  000669              endif
014555  000670          endif
014556  000671          l /= 10 ;
014557  000672          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
014558  000673          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
014559  000674          img_Show(hndl, imgidx);
014560  000675      next
014561  000676  endfunc
014562  000677        
014563  000678        
014564  000679  func ActivateForm(var newform)
014565  000680      var i, j, *p ;
014566  000681        
014567  000682      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
014568  000683          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
014569  000684              if (img_GetWord(hndl, i, IMAGE_TAG))
014570  000685                  img_Disable(hndl,i) ;
014571  000686              endif
014572  000687          next
014573  000688      endif
014574  000689      CurrentForm := newform ;
014575  000690      // display newform image or clear to image color
014576  000691      if (FormBGcolors[CurrentForm] != ColorBGimage)
014577  000692          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
014578  000693          gfx_Cls() ;
014579  000694          DoGFXObjects() ;                                    // display GFX 'widgets'
014580  000695      endif
014581  000696        
014582  000697      // enable inputs
014583  000698      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
014584  000699          j := img_GetWord(hndl, i, IMAGE_TAG) ;
014585  000700          if (j)
014586  000701              j-- ;
014587  000702              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
014588  000703              //if (j != tKeyboard)
014589  000704              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
014590  000705                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
014591  000706              endif
014592  000707              img_Show(hndl,i) ; // show initialy, if required
014593  000708              if (j == tForm)
014594  000709                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
014595  000710              else if (j == tLeddigits)
014596  000711                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
014597  000712              endif
014598  000713          endif
014599  000714      next
014600  000715      for (i := 0; i < nStrings; i++)
014601  000716          if (stringsCV[i] != -1)
014602  000717              WriteObject(tStrings, i, stringsCV[i]) ;
014603  000718          endif
014604  000719      next
014605  000720        
014606  000721  endfunc
014607  000722        
014608  000723  func UpdateObjects(var newval)
014609  000724      var IPidx, otherOBJ ;
014610  000725      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
014611  000726        
014612  000727          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
014613  000728              img_Show(hndl, *(pInputIndex));      // only shows on current form
014614  000729          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
014615  000730              if (*(CurInputData+Ofs_IPD_P1))
014616  000731                  newval &= 1;
014617  000732              else
014618  000733                  newval &= 3;
014619  000734              endif
014620  000735              if (newval > 1) newval := 1;
014621  000736          endif
014622  000737          IPidx := *(CurInputData+TouchState) ;
014623  000738          while(IPidx != 0)
014624  000739              otherOBJ := IPidx + InputData;
014625  000740              if (*(otherOBJ) == OT_REPORT)
014626  000741          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
014627  000742              else if (*(otherOBJ) == OT_MAGIC)
014628  000743                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
014629  000744                  IPidx(newval) ;
014630  000745              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
014631  000746                  if (*(otherOBJ) == OT_ACTIVATE)
014632  000747                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
014633  000748                      InputType := tForm ;
014634  000749                  else if (*(otherOBJ) == OT_SETCONST)
014635  000750                      newval := *(otherOBJ+Ofs_IPD_P3) ;
014636  000751                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
014637  000752                  else if (*(otherOBJ) == OT_SETANOTHER)
014638  000753                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
014639  000754                  else if (*(otherOBJ) == OT_PREVFRAME)
014640  000755                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
014641  000756                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
014642  000757                      endif
014643  000758                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
014644  000759                  else if (*(otherOBJ) == OT_NEXTFRAME)
014645  000760                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
014646  000761                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
014647  000762                      endif
014648  000763                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
014649  000764                  else if (*(otherOBJ) == OT_PREVSTRING)
014650  000765                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
014651  000766                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
014652  000767                      endif
014653  000768                  else if (*(otherOBJ) == OT_NEXTSTRING)
014654  000769                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
014655  000770                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
014656  000771                      endif
014657  000772                  endif
014658  000773              endif
014659  000774              IPidx := *(otherOBJ+TouchState) ;
014660  000775          wend
014661  000776      endif
014662  000777  endfunc
014663  000778        
014664  000779  // End P2.inc
014665  000780  func DoGFXObjects()
014666  000781  endfunc
014667  000782        
014668  000783  // Start P3.inc
014669  000784  func main()
014670  000785      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
014671  000786        
014672  000787      putstr("Mounting...\n");
014673  000788      if (!(file_Mount()))
014674  000789          while(!(file_Mount()))
014675  000790              putstr("Drive not mounted...");
014676  000791              pause(200);
014677  000792              gfx_Cls();
014678  000793              pause(200);
014679  000794          wend
014680  000795      endif
014681  000796  //    gfx_MoveTo(0, 0);
014682  000797  //    print(mem_Heap()," ") ;
014683  000798  //    gfx_TransparentColour(0x0020);
014684  000799  //    gfx_Transparency(ON);
014685  000800        
014686  000801      gfx_ScreenMode(LANDSCAPE) ;
014687  000802        
014688  000803      // open image control
014689  000804      hndl := file_LoadImageControl("REPRAP~2.dat", "REPRAP~2.gci", 1);
014690  000805        
014691  000806      // init 'constants'
014692  000807  // End P3.inc
014693  000808        
014694  000809      oObjects[tDipSwitch] := oDipSwitchs ;
014695  000810      oObjects[tKnob] := oKnobs ;
014696  000811      oObjects[tRockerSwitch] := oRockerSwitchs ;
014697  000812      oObjects[tRotarySwitch] := oRotarySwitchs ;
014698  000813      oObjects[tGSlider] := oGSliders ;
014699  000814      oObjects[tTrackbar] := oTrackbars ;
014700  000815      oObjects[tWinButton] := oWinButtons ;
014701  000816      oObjects[tAngularmeter] := oAngularmeters ;
014702  000817      oObjects[tCoolgauge] := oCoolgauges ;
014703  000818      oObjects[tCustomdigits] := oCustomdigitss ;
014704  000819      oObjects[tForm] := oForms ;
014705  000820      oObjects[tGauge] := oGauges ;
014706  000821      oObjects[tImage] := oImages ;
014707  000822      oObjects[tKeyboard] := oKeyboards ;
014708  000823      oObjects[tLed] := oLeds ;
014709  000824      oObjects[tLeddigits] := oLeddigitss ;
014710  000825      oObjects[tMeter] := oMeters ;
014711  000826      oObjects[tStrings] := oStringss ;
014712  000827      oObjects[tThermometer] := oThermometers ;
014713  000828      oObjects[tUserled] := oUserleds ;
014714  000829      oObjects[tVideo] := oVideos ;
014715  000830      oObjects[tStaticText] := oStaticTexts ;
014716  000831      oObjects[tSounds] := oSoundss ;
014717  000832      oObjects[tTimer] := oTimers ;
014718  000833      oObjects[tSpectrum] := oSpectrums ;
014719  000834      oObjects[tTank] := oTanks ;
014720  000835      oObjects[tUserImages] := oUserImagess ;
014721  000836      oObjects[tPinOutput] := oPinOutputs ;
014722  000837      oObjects[tPinInput] := oPinInputs ;
014723  000838      oObjects[t4Dbutton] := o4Dbuttons ;
014724  000839      oObjects[tAniButton] := oAniButtons ;
014725  000840      oObjects[tColorPicker] := oColorPickers ;
014726  000841      oObjects[tUserButton] := oUserButtons ;
014727  000842      hFonts[0] := file_LoadImageControl("REPRAP~2.d03", "REPRAP~2.g03", 1)  ;
014728  000843      hFonts[1] := file_LoadImageControl("REPRAP~2.d01", "REPRAP~2.g01", 1)  ;
014729  000844      hFonts[2] := file_LoadImageControl("REPRAP~2.d02", "REPRAP~2.g02", 1)  ;
014730  000845      hFonts[3] := FONT3 ;
014731  000846      hFonts[4] := FONT3 ;
014732  000847      hFonts[5] := FONT3 ;
014733  000848      hFonts[6] := FONT3 ;
014734  000849      hFonts[11] := file_LoadImageControl("REPRAP~2.d05", "REPRAP~2.g05", 1)  ;
014735  000850      hFonts[12] := FONT3 ;
014736  000851      hFonts[13] := file_LoadImageControl("REPRAP~2.d06", "REPRAP~2.g06", 1)  ;
014737  000852      hFonts[14] := FONT3 ;
014738  000853      hFonts[15] := FONT3 ;
014739  000854      hFonts[16] := FONT3 ;
014740  000855      hFonts[17] := FONT3 ;
014741  000856      hFonts[18] := FONT3 ;
014742  000857      hFonts[19] := FONT3 ;
014743  000858      hFonts[20] := FONT3 ;
014744  000859      hFonts[21] := FONT3 ;
014745  000860      hFonts[22] := FONT3 ;
014746  000861      hFonts[23] := FONT3 ;
014747  000862      hFonts[24] := FONT3 ;
014748  000863      hFonts[28] := FONT3 ;
014749  000864      hFonts[29] := FONT3 ;
014750  000865      hFonts[30] := FONT3 ;
014751  000866      hFonts[31] := FONT3 ;
014752  000867      hFonts[32] := FONT3 ;
014753  000868      hFonts[35] := FONT3 ;
014754  000869      hFonts[37] := file_LoadImageControl("REPRAP~2.d04", "REPRAP~2.g04", 1)  ;
014755  000870      hFonts[51] := FONT3 ;
014756  000871      hFonts[52] := FONT3 ;
014757  000872      hFonts[7] := hFonts[37] ;
014758  000873      hFonts[8] := hFonts[37] ;
014759  000874      hFonts[9] := hFonts[0] ;
014760  000875      hFonts[10] := hFonts[11] ;
014761  000876      hFonts[25] := hFonts[11] ;
014762  000877      hFonts[26] := hFonts[11] ;
014763  000878      hFonts[27] := hFonts[11] ;
014764  000879      hFonts[34] := hFonts[0] ;
014765  000880      hFonts[36] := hFonts[0] ;
014766  000881      hFonts[38] := hFonts[37] ;
014767  000882      hFonts[39] := hFonts[37] ;
014768  000883      hFonts[40] := hFonts[0] ;
014769  000884      hFonts[41] := hFonts[0] ;
014770  000885      hFonts[42] := hFonts[0] ;
014771  000886      hFonts[43] := hFonts[37] ;
014772  000887      hFonts[44] := hFonts[37] ;
014773  000888      hFonts[45] := hFonts[37] ;
014774  000889      hFonts[46] := hFonts[13] ;
014775  000890      hFonts[47] := hFonts[13] ;
014776  000891      hFonts[48] := hFonts[13] ;
014777  000892      hFonts[49] := hFonts[13] ;
014778  000893      hFonts[50] := hFonts[13] ;
014779  000894  // Start P4.inc
014780  000895      hstrings := file_Open("REPRAP~2.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
014781  000896      // init comms
014782  000897      com_Init(comRX,CMDLenMAX,0);
014783  000898      com_SetBaud(COM0,19886);
014784  000899      com_TXbuffer(comTX, 100, 0);
014785  000900      snd_BufSize(2) ;
014786  000901      // tag 'real' objects
014787  000902      for (i := 0; i <= MaxTotObjects; i++)
014788  000903          if (   (i != tSounds)
014789  000904              && (i != tTimer)
014790  000905              && (i != tPinOutput)
014791  000906              && (i != tPinInput) )
014792  000907              TouchXpos := oObjects[i] ;
014793  000908              TouchYpos := *(TouchXpos) ;
014794  000909              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
014795  000910                  oldn := *(TouchXpos+ImageTouched*2) ;
014796  000911                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
014797  000912                  if (oldn != -1)
014798  000913                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
014799  000914                      img_Disable(hndl, oldn) ;
014800  000915                  endif
014801  000916              next
014802  000917          endif
014803  000918      next
014804  000919        
014805  000920      // display initial form
014806  000921      CurrentForm := -1 ;
014807  000922      ActivateForm(0) ; // need to change this according to first actual form
014808  000923        
014809  000924  // End P4.inc
014810  000925  // Start P5.inc
014811  000926      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
014812  000927      oldn := -1 ;
014813  000928      repeat
014814  000929        
014815  000930          // check comms for command, how to NAK invalid command
014816  000931          if (com_Count() != 0)
014817  000932              i := serin() ;
014818  000933              InputCS ^= i ;               // update checksum
014819  000934              if (   (cmdi > 2)
014820  000935                  && (cmd[0] == WRITE_STRU) )
014821  000936                  j := (cmdi-1) >> 1 + 2 ;
014822  000937                  if (j == CMDLenMAX)    // max length exceeded
014823  000938                      nak0() ;
014824  000939                      cmdi := -1 ;
014825  000940                  else if (cmdi & 1)
014826  000941                      cmd[j] := i ;
014827  000942                      if (cmd[2] == 0)    // if string complete
014828  000943                          if (InputCS)
014829  000944                              nak0() ;
014830  000945                          else
014831  000946                              if (cmd[0] == WRITE_STRU)
014832  000947                              cmd[j] := 0 ;                     // terminate it
014833  000948                              PrintStrings(cmd[1], &cmd[3], 1) ;
014834  000949                              serout(ACK) ;
014835  000950                              else
014836  000951                              endif
014837  000952                          endif
014838  000953                          cmdi := -1 ;
014839  000954                      endif
014840  000955                  else
014841  000956                      cmd[j] := cmd[j] << 8 + i ;
014842  000957                      cmd[2]-- ;          // dec length
014843  000958                  endif
014844  000959                  cmdi++ ;
014845  000960              else // not unicode string
014846  000961                  cmd[cmdi++] := i ;
014847  000962                   if (cmd[0] == WRITE_STR)                  // Ansi String
014848  000963                      if (cmdi == CMDLenMAX)      // max length exceeded
014849  000964                          nak0() ;
014850  000965                          cmdi := 0 ;
014851  000966                      else if (cmdi > 2)
014852  000967                          if (cmd[2] == -1)
014853  000968                              if (InputCS)
014854  000969                                  nak0() ;
014855  000970                              else
014856  000971                                  if (cmd[0] == WRITE_STR)
014857  000972                                  cmd[cmdi-1] := 0 ;                     // terminate it
014858  000973                                  PrintStrings(cmd[1], &cmd[3], 1) ;
014859  000974                                  serout(ACK) ;
014860  000975                                  else
014861  000976                                  endif
014862  000977                              endif
014863  000978                              cmdi := 0 ;
014864  000979                          else
014865  000980                              cmd[2]-- ;          // dec length
014866  000981                          endif
014867  000982                      endif
014868  000983                  else if (   (cmd[0] == READ_OBJ)
014869  000984                           && (cmdi == 4)         )
014870  000985                      if (InputCS)
014871  000986                          nak0() ;
014872  000987                      else
014873  000988                          ReadObject(cmd[1], cmd[2]) ;
014874  000989                      endif
014875  000990                      cmdi := 0 ;
014876  000991                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
014877  000992                           && (cmdi == 6)          )
014878  000993                      if (InputCS)
014879  000994                          nak0() ;
014880  000995                      else
014881  000996                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
014882  000997                          serout(ACK) ;
014883  000998                      endif
014884  000999                      cmdi := 0 ;
014885  001000                  else if (   (cmd[0] == WRITE_CONTRAST)
014886  001001                           && (cmdi == 3)         )
014887  001002                      if (InputCS)
014888  001003                          nak0() ;
014889  001004                      else
014890  001005                          gfx_Contrast(cmd[1]) ;
014891  001006                          serout(ACK) ;
014892  001007                      endif
014893  001008                      cmdi := 0 ;
014894  001009                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
014895  001010                      nak0() ;
014896  001011                      cmdi := 0 ;
014897  001012                  endif
014898  001013              endif   // not unicode string
014899  001014          endif   // a character is available
014900  001015        
014901  001016        
014902  001017      // touch code processing
014903  001018        
014904  001019          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
014905  001020          ImageTouched := img_Touched(hndl,-1) ;
014906  001021          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
014907  001022              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
014908  001023                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
014909  001024              endif
014910  001025              if (TouchStatus != TOUCH_RELEASED)        // if not released
014911  001026                  if (oldn != -1)
014912  001027                      ImageTouched := oldn ;
014913  001028                  else
014914  001029                      if (oldn != ImageTouched)
014915  001030                  oldn := ImageTouched ;
014916  001031                          TouchStatus := TOUCH_PRESSED ;
014917  001032                      endif
014918  001033                  endif
014919  001034                  TouchXpos  := touch_Get(TOUCH_GETX);
014920  001035                  TouchYpos  := touch_Get(TOUCH_GETY);
014921  001036                  TouchState := Ofs_IPD_DOWN ;
014922  001037              else
014923  001038                  ImageTouched := oldn ;                     // simulate release of what we touched
014924  001039                  oldn := -1 ;                    // prevent double release
014925  001040                  TouchState := Ofs_IPD_RELEASE ;
014926  001041              endif
014927  001042              if (ImageTouched != -1)
014928  001043                          CurInputData := InputControls[ImageTouched] + InputData;
014929  001044                          InputType := *(CurInputData) ;
014930  001045                          i := InputType ;
014931  001046                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
014932  001047                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
014933  001048              endif
014934  001049          endif
014935  001050   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
014936  001051        
014937  001052          sys_EventsResume() ;
014938  001053      forever
014939  001054        
014940  001055  cDipswitch:
014941  001056        
014942  001057  cKnob:
014943  001058        
014944  001059  cRockerswitch:
014945  001060        
014946  001061  cRotaryswitch:
014947  001062        
014948  001063  cSlider:
014949  001064  cTrackbar:
014950  001065        
014951  001066  c4DButton:
014952  001067  cUserButton:
014953  001068      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
014954  001069      goto gbutton ;
014955  001070  cWinbutton:
014956  001071      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
014957  001072  gbutton:
014958  001073      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
014959  001074      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
014960  001075          if (TouchStatus == TOUCH_RELEASED)
014961  001076              i &= 0xfffe ;
014962  001077              TouchState == Ofs_IPD_DOWN ;
014963  001078          else
014964  001079              i |= 1 ;
014965  001080              TouchState == Ofs_IPD_RELEASE ;
014966  001081          endif
014967  001082      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
014968  001083          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
014969  001084              if ((i & 3) == 3)
014970  001085                  i &= 0xfffc ;
014971  001086              else
014972  001087                  i++ ;
014973  001088              endif
014974  001089          else
014975  001090              i |= 1 ;                                      // make down regardless of current state
014976  001091          endif
014977  001092      else                        // group action, up all other buttons on touch press, reports 0 for button down
014978  001093          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
014979  001094              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
014980  001095          endif
014981  001096          i := (i & 0xfffc) | 2 ;
014982  001097      endif
014983  001098        
014984  001099      UpdateObjects(i) ;
014985  001100  endsub ;
014986  001101        
014987  001102  cAniButton:
014988  001103        
014989  001104  cColorPicker:
014990  001105        
014991  001106  endfunc
014992  001107  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 744 file:RepRap_Touchv1.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 680 file:RepRap_Touchv1.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       11698  0x00002db2 (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 147)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (usage 6)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS    2803  0x00000af3 (const ??? 0)  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  378  0x0000017a (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 33)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                298  0x0000012a (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         294  0x00000126 (mem) word (global)  (usage 27)
CurrentForm                          284  0x0000011c (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (usage 6)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (usage 3)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       11066  0x00002b3a (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 21)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (usage 72)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                        8413  0x000020ddFormBGcolors                        8413  0x000020dd (mem) word[36] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                          79  0x0000004fFormEndIndex                          79  0x0000004f (mem) word[36] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[36] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[53] (global)  (usage 225)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             214  0x000000d6 (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm0                                 0  0x00000000 (const ??? 0)  (usage 3)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                              125  0x0000007d (const ??? 0)  (usage 3)
iForm2                                 4  0x00000004 (const ??? 0)  (usage 3)
iForm28                              135  0x00000087 (const ??? 0)  (usage 3)
iForm29                              140  0x0000008c (const ??? 0)  (usage 3)
iForm4                                10  0x0000000a (const ??? 0)  (usage 3)
iForm5                                16  0x00000010 (const ??? 0)  (usage 3)
iForm9                                47  0x0000002f (const ??? 0)  (usage 3)
iiLeddigits0                          36  0x00000024 (const ??? 0)  (not used)
iiLeddigits1                          38  0x00000026 (const ??? 0)  (not used)
iiLeddigits18                         58  0x0000003a (const ??? 0)  (not used)
iiLeddigits19                         70  0x00000046 (const ??? 0)  (not used)
iiLeddigits2                          40  0x00000028 (const ??? 0)  (not used)
iiLeddigits20                         78  0x0000004e (const ??? 0)  (not used)
iiLeddigits21                         84  0x00000054 (const ??? 0)  (not used)
iLeddigits0                           35  0x00000023 (const ??? 0)  (usage 3)
iLeddigits1                           37  0x00000025 (const ??? 0)  (usage 3)
iLeddigits18                          57  0x00000039 (const ??? 0)  (usage 3)
iLeddigits19                          69  0x00000045 (const ??? 0)  (usage 3)
iLeddigits2                           39  0x00000027 (const ??? 0)  (usage 3)
iLeddigits20                          77  0x0000004d (const ??? 0)  (usage 3)
iLeddigits21                          83  0x00000053 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        151  0x00000097InputControls                        151  0x00000097 (mem) word[176] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
InputCS                              538  0x0000021a (mem) word (global)  (usage 21)
InputData                            503  0x000001f7InputData                            503  0x000001f7 (mem) word[2970] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 30)
InputType                            290  0x00000122 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                         104  0x00000068 (const ??? 0)  (usage 3)
iStatictext1                          41  0x00000029 (const ??? 0)  (usage 3)
iStatictext15                        114  0x00000072 (const ??? 0)  (usage 3)
iStatictext2                          42  0x0000002a (const ??? 0)  (usage 3)
iStatictext20                         62  0x0000003e (const ??? 0)  (usage 3)
iStatictext21                         71  0x00000047 (const ??? 0)  (usage 3)
iStatictext22                         79  0x0000004f (const ??? 0)  (usage 3)
iStatictext24                        106  0x0000006a (const ??? 0)  (usage 3)
iStatictext25                        107  0x0000006b (const ??? 0)  (usage 3)
iStatictext26                        108  0x0000006c (const ??? 0)  (usage 3)
iStatictext27                        109  0x0000006d (const ??? 0)  (usage 3)
iStatictext3                         155  0x0000009b (const ??? 0)  (usage 3)
iStatictext4                          43  0x0000002b (const ??? 0)  (usage 3)
iStatictext5                         166  0x000000a6 (const ??? 0)  (usage 3)
iStatictext6                         170  0x000000aa (const ??? 0)  (usage 3)
iStatictext7                         171  0x000000ab (const ??? 0)  (usage 3)
iStatictext8                         172  0x000000ac (const ??? 0)  (usage 3)
iStrings0                           6443  0x0000192biStrings0                           6443  0x0000192b (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings1                           6469  0x00001945iStrings1                           6469  0x00001945 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings10                          6703  0x00001a2fiStrings10                          6703  0x00001a2f (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings11                          6729  0x00001a49iStrings11                          6729  0x00001a49 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings12                          6755  0x00001a63iStrings12                          6755  0x00001a63 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings13                          6781  0x00001a7diStrings13                          6781  0x00001a7d (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings14                          6807  0x00001a97iStrings14                          6807  0x00001a97 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings15                          6833  0x00001ab1iStrings15                          6833  0x00001ab1 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings16                          6859  0x00001acbiStrings16                          6859  0x00001acb (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings17                          6885  0x00001ae5iStrings17                          6885  0x00001ae5 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings18                          6911  0x00001affiStrings18                          6911  0x00001aff (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings19                          6937  0x00001b19iStrings19                          6937  0x00001b19 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings2                           6495  0x0000195fiStrings2                           6495  0x0000195f (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings20                          6963  0x00001b33iStrings20                          6963  0x00001b33 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings21                          6989  0x00001b4diStrings21                          6989  0x00001b4d (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings22                          7015  0x00001b67iStrings22                          7015  0x00001b67 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings23                          7041  0x00001b81iStrings23                          7041  0x00001b81 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings24                          7067  0x00001b9biStrings24                          7067  0x00001b9b (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings25                          7093  0x00001bb5iStrings25                          7093  0x00001bb5 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings26                          7119  0x00001bcfiStrings26                          7119  0x00001bcf (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings27                          7145  0x00001be9iStrings27                          7145  0x00001be9 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings28                          7171  0x00001c03iStrings28                          7171  0x00001c03 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings29                          7197  0x00001c1diStrings29                          7197  0x00001c1d (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings3                           6521  0x00001979iStrings3                           6521  0x00001979 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings30                          7223  0x00001c37iStrings30                          7223  0x00001c37 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings31                          7249  0x00001c51iStrings31                          7249  0x00001c51 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings32                          7275  0x00001c6biStrings32                          7275  0x00001c6b (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings34                          7301  0x00001c85iStrings34                          7301  0x00001c85 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings35                          7327  0x00001c9fiStrings35                          7327  0x00001c9f (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings36                          7353  0x00001cb9iStrings36                          7353  0x00001cb9 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings37                          7379  0x00001cd3iStrings37                          7379  0x00001cd3 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings38                          7405  0x00001cediStrings38                          7405  0x00001ced (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings39                          7431  0x00001d07iStrings39                          7431  0x00001d07 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings4                           6547  0x00001993iStrings4                           6547  0x00001993 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings40                          7457  0x00001d21iStrings40                          7457  0x00001d21 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings41                          7483  0x00001d3biStrings41                          7483  0x00001d3b (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings42                          7509  0x00001d55iStrings42                          7509  0x00001d55 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings43                          7535  0x00001d6fiStrings43                          7535  0x00001d6f (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings44                          7561  0x00001d89iStrings44                          7561  0x00001d89 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings45                          7587  0x00001da3iStrings45                          7587  0x00001da3 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings46                          7613  0x00001dbdiStrings46                          7613  0x00001dbd (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings47                          7639  0x00001dd7iStrings47                          7639  0x00001dd7 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings48                          7665  0x00001df1iStrings48                          7665  0x00001df1 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings49                          7691  0x00001e0biStrings49                          7691  0x00001e0b (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings5                           6573  0x000019adiStrings5                           6573  0x000019ad (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings50                          7717  0x00001e25iStrings50                          7717  0x00001e25 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings51                          7743  0x00001e3fiStrings51                          7743  0x00001e3f (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings52                          7769  0x00001e59iStrings52                          7769  0x00001e59 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings6                           6599  0x000019c7iStrings6                           6599  0x000019c7 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings7                           6625  0x000019e1iStrings7                           6625  0x000019e1 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings8                           6651  0x000019fbiStrings8                           6651  0x000019fb (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings9                           6677  0x00001a15iStrings9                           6677  0x00001a15 (mem) word[13] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          19  0x00000013 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                         15  0x0000000f (const ??? 0)  (usage 3)
iUserbutton100                       123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton101                       124  0x0000007c (const ??? 0)  (usage 3)
iUserbutton102                       156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton103                       157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton104                       158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton105                       159  0x0000009f (const ??? 0)  (usage 3)
iUserbutton106                       160  0x000000a0 (const ??? 0)  (usage 3)
iUserbutton107                       161  0x000000a1 (const ??? 0)  (usage 3)
iUserbutton108                       162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton109                       163  0x000000a3 (const ??? 0)  (usage 3)
iUserbutton11                        136  0x00000088 (const ??? 0)  (usage 3)
iUserbutton110                       164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton111                       165  0x000000a5 (const ??? 0)  (usage 3)
iUserbutton112                       167  0x000000a7 (const ??? 0)  (usage 3)
iUserbutton113                       168  0x000000a8 (const ??? 0)  (usage 3)
iUserbutton114                       169  0x000000a9 (const ??? 0)  (usage 3)
iUserbutton115                       173  0x000000ad (const ??? 0)  (usage 3)
iUserbutton116                       174  0x000000ae (const ??? 0)  (usage 3)
iUserbutton117                       175  0x000000af (const ??? 0)  (usage 3)
iUserbutton118                       102  0x00000066 (const ??? 0)  (usage 3)
iUserbutton119                       103  0x00000067 (const ??? 0)  (usage 3)
iUserbutton12                         17  0x00000011 (const ??? 0)  (usage 3)
iUserbutton13                         18  0x00000012 (const ??? 0)  (usage 3)
iUserbutton14                          7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton16                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton17                         24  0x00000018 (const ??? 0)  (usage 3)
iUserbutton18                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton19                         49  0x00000031 (const ??? 0)  (usage 3)
iUserbutton2                          20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton20                        113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton21                        115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton22                        116  0x00000074 (const ??? 0)  (usage 3)
iUserbutton23                        126  0x0000007e (const ??? 0)  (usage 3)
iUserbutton24                        127  0x0000007f (const ??? 0)  (usage 3)
iUserbutton25                        128  0x00000080 (const ??? 0)  (usage 3)
iUserbutton26                         51  0x00000033 (const ??? 0)  (usage 3)
iUserbutton27                         52  0x00000034 (const ??? 0)  (usage 3)
iUserbutton28                         53  0x00000035 (const ??? 0)  (usage 3)
iUserbutton29                         54  0x00000036 (const ??? 0)  (usage 3)
iUserbutton3                          34  0x00000022 (const ??? 0)  (usage 3)
iUserbutton30                         55  0x00000037 (const ??? 0)  (usage 3)
iUserbutton31                         56  0x00000038 (const ??? 0)  (usage 3)
iUserbutton32                         59  0x0000003b (const ??? 0)  (usage 3)
iUserbutton33                         60  0x0000003c (const ??? 0)  (usage 3)
iUserbutton34                         61  0x0000003d (const ??? 0)  (usage 3)
iUserbutton35                         63  0x0000003f (const ??? 0)  (usage 3)
iUserbutton36                         64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton37                         65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton38                         68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton39                         66  0x00000042 (const ??? 0)  (usage 3)
iUserbutton4                           5  0x00000005 (const ??? 0)  (usage 3)
iUserbutton40                         67  0x00000043 (const ??? 0)  (usage 3)
iUserbutton41                         72  0x00000048 (const ??? 0)  (usage 3)
iUserbutton42                         73  0x00000049 (const ??? 0)  (usage 3)
iUserbutton43                         74  0x0000004a (const ??? 0)  (usage 3)
iUserbutton44                         80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton45                         85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton46                         75  0x0000004b (const ??? 0)  (usage 3)
iUserbutton47                         81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton48                         76  0x0000004c (const ??? 0)  (usage 3)
iUserbutton49                         82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton5                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton50                         21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton51                        117  0x00000075 (const ??? 0)  (usage 3)
iUserbutton52                         87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton53                         91  0x0000005b (const ??? 0)  (usage 3)
iUserbutton54                         22  0x00000016 (const ??? 0)  (usage 3)
iUserbutton55                         93  0x0000005d (const ??? 0)  (usage 3)
iUserbutton56                         94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton57                         95  0x0000005f (const ??? 0)  (usage 3)
iUserbutton58                         96  0x00000060 (const ??? 0)  (usage 3)
iUserbutton59                         97  0x00000061 (const ??? 0)  (usage 3)
iUserbutton6                          11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton60                         98  0x00000062 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                         23  0x00000017 (const ??? 0)  (usage 3)
iUserbutton63                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton64                         25  0x00000019 (const ??? 0)  (usage 3)
iUserbutton65                         26  0x0000001a (const ??? 0)  (usage 3)
iUserbutton66                         99  0x00000063 (const ??? 0)  (usage 3)
iUserbutton67                        100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton68                        101  0x00000065 (const ??? 0)  (usage 3)
iUserbutton69                        105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton7                          12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton70                        110  0x0000006e (const ??? 0)  (usage 3)
iUserbutton71                        111  0x0000006f (const ??? 0)  (usage 3)
iUserbutton72                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton73                        129  0x00000081 (const ??? 0)  (usage 3)
iUserbutton74                        112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton75                         88  0x00000058 (const ??? 0)  (usage 3)
iUserbutton76                         89  0x00000059 (const ??? 0)  (usage 3)
iUserbutton77                         90  0x0000005a (const ??? 0)  (usage 3)
iUserbutton78                        130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton79                        131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton8                          13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton80                        132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton81                        133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton82                        134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton83                        137  0x00000089 (const ??? 0)  (usage 3)
iUserbutton84                        141  0x0000008d (const ??? 0)  (usage 3)
iUserbutton85                        142  0x0000008e (const ??? 0)  (usage 3)
iUserbutton86                        143  0x0000008f (const ??? 0)  (usage 3)
iUserbutton87                        144  0x00000090 (const ??? 0)  (usage 3)
iUserbutton88                        145  0x00000091 (const ??? 0)  (usage 3)
iUserbutton89                        146  0x00000092 (const ??? 0)  (usage 3)
iUserbutton9                          14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton90                        147  0x00000093 (const ??? 0)  (usage 3)
iUserbutton91                        148  0x00000094 (const ??? 0)  (usage 3)
iUserbutton92                        139  0x0000008b (const ??? 0)  (usage 3)
iUserbutton93                        150  0x00000096 (const ??? 0)  (usage 3)
iUserbutton94                        151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton95                        154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton96                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton97                        120  0x00000078 (const ??? 0)  (usage 3)
iUserbutton98                        121  0x00000079 (const ??? 0)  (usage 3)
iUserbutton99                        122  0x0000007a (const ??? 0)  (usage 3)
iUserimages0                         138  0x0000008a (const ??? 0)  (usage 3)
iUserimages1                          86  0x00000056 (const ??? 0)  (usage 3)
iUserimages2                          92  0x0000005c (const ??? 0)  (usage 3)
iUserimages3                         149  0x00000095 (const ??? 0)  (usage 3)
iUserimages4                         152  0x00000098 (const ??? 0)  (usage 3)
iUserimages5                         153  0x00000099 (const ??? 0)  (usage 3)
iVideo0                                9  0x00000009 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton1                           28  0x0000001c (const ??? 0)  (usage 3)
iWinbutton2                           29  0x0000001d (const ??? 0)  (usage 3)
iWinbutton3                           30  0x0000001e (const ??? 0)  (usage 3)
iWinbutton4                           31  0x0000001f (const ??? 0)  (usage 3)
iWinbutton5                           45  0x0000002d (const ??? 0)  (usage 3)
iWinbutton6                           46  0x0000002e (const ??? 0)  (usage 3)
iWinbutton7                           32  0x00000020 (const ??? 0)  (usage 3)
iWinbutton8                           33  0x00000021 (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 8485  0x00002125kKeyboardKeystrokes                 8485  0x00002125 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   12044  0x00002f0c (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                                9083  0x0000237b (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               13166  0x0000336e (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              270  0x0000010e (const dword)  (usage 3)
nObjects                             176  0x000000b0 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              53  0x00000035 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                          8159  0x00001fdfo4Dbuttons                          8159  0x00001fdf (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAngularmeters                      7827  0x00001e93oAngularmeters                      7827  0x00001e93 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAniButtons                         8161  0x00001fe1oAniButtons                         8161  0x00001fe1 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       8163  0x00001fe3oColorPickers                       8163  0x00001fe3 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCoolgauges                         7829  0x00001e95oCoolgauges                         7829  0x00001e95 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCustomdigitss                      7831  0x00001e97oCustomdigitss                      7831  0x00001e97 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oDipSwitchs                         7795  0x00001e73oDipSwitchs                         7795  0x00001e73 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              7833  0x00001e99oForms                              7833  0x00001e99 (mem) word[37] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 15)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                             7907  0x00001ee3oGauges                             7907  0x00001ee3 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGSliders                           7803  0x00001e7boGSliders                           7803  0x00001e7b (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oImages                             7909  0x00001ee5oImages                             7909  0x00001ee5 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKeyboards                          7911  0x00001ee7oKeyboards                          7911  0x00001ee7 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKnobs                              7797  0x00001e75oKnobs                              7797  0x00001e75 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLedDigitsn                         8489  0x00002129oLedDigitsn                         8489  0x00002129 (mem) word[110] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
oLeddigitss                         7915  0x00001eeboLeddigitss                         7915  0x00001eeb (mem) word[23] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
oLeds                               7913  0x00001ee9oLeds                               7913  0x00001ee9 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             7961  0x00001f19oMeters                             7961  0x00001f19 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             216  0x000000d8 (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                          8157  0x00001fddoPinInputs                          8157  0x00001fdd (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oPinOutputs                         8411  0x000020dboPinOutputs                         8411  0x000020db (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      7799  0x00001e77oRockerSwitchs                      7799  0x00001e77 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oRotarySwitchs                      7801  0x00001e79oRotarySwitchs                      7801  0x00001e79 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oScopes                             8139  0x00001fcboScopes                             8139  0x00001fcb (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
oSoundss                            8409  0x000020d9oSoundss                            8409  0x000020d9 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oSpectrums                          8137  0x00001fc9oSpectrums                          8137  0x00001fc9 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStaticTexts                        8079  0x00001f8foStaticTexts                        8079  0x00001f8f (mem) word[29] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStringss                           7963  0x00001f1boStringss                           7963  0x00001f1b (mem) word[54] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 93)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 336)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              8141  0x00001fcdoTanks                              8141  0x00001fcd (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oThermometers                       8071  0x00001f87oThermometers                       8071  0x00001f87 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTimers                             8407  0x000020d7oTimers                             8407  0x000020d7 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTrackbars                          7805  0x00001e7doTrackbars                          7805  0x00001e7d (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserButtons                        8165  0x00001fe5oUserButtons                        8165  0x00001fe5 (mem) word[121] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
oUserImagess                        8143  0x00001fcfoUserImagess                        8143  0x00001fcf (mem) word[7] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserleds                           8073  0x00001f89oUserleds                           8073  0x00001f89 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             540  0x0000021c (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                             8075  0x00001f8boVideos                             8075  0x00001f8b (mem) word[2] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                         7807  0x00001e7foWinButtons                         7807  0x00001e7f (mem) word[10] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          296  0x00000128 (mem) word (global)  (usage 18)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       13201  0x00003391 (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         12913  0x00003271 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                   8487  0x00002127rKeyboardRoutines                   8487  0x00002127 (mem) word[1] (member of C:\Users\jcalduch\Documents\GitHub\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         13099  0x0000332b (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           13182  0x0000337e (User func) args[1] r=0  (usage 15)
seroutOcs                          13149  0x0000335d (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           7  0x00000007 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      3072  0x00000c00 (const dword)  (usage 3)
Strings10Count                         1  0x00000001 (const dword)  (not used)
Strings10Size                         15  0x0000000f (const dword)  (usage 3)
Strings10StartH                        0  0x00000000 (const dword)  (usage 3)
Strings10StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         33  0x00000021 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     9728  0x00002600 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         19  0x00000013 (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                          8  0x00000008 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                    22528  0x00005800 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                         23  0x00000017 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                         24  0x00000018 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings16Count                         1  0x00000001 (const dword)  (not used)
Strings16Size                         31  0x0000001f (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     6656  0x00001a00 (const dword)  (usage 3)
Strings17Count                         1  0x00000001 (const dword)  (not used)
Strings17Size                         33  0x00000021 (const dword)  (usage 3)
Strings17StartH                        0  0x00000000 (const dword)  (usage 3)
Strings17StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings18Count                         1  0x00000001 (const dword)  (not used)
Strings18Size                         32  0x00000020 (const dword)  (usage 3)
Strings18StartH                        0  0x00000000 (const dword)  (usage 3)
Strings18StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                         29  0x0000001d (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings1Count                          0  0x00000000 (const dword)  (not used)
Strings1Size                           1  0x00000001 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                         0  0x00000000 (const dword)  (usage 3)
Strings20Count                         1  0x00000001 (const dword)  (not used)
Strings20Size                         25  0x00000019 (const dword)  (usage 3)
Strings20StartH                        0  0x00000000 (const dword)  (usage 3)
Strings20StartL                     1024  0x00000400 (const dword)  (usage 3)
Strings21Count                         1  0x00000001 (const dword)  (not used)
Strings21Size                         35  0x00000023 (const dword)  (usage 3)
Strings21StartH                        0  0x00000000 (const dword)  (usage 3)
Strings21StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings22Count                         1  0x00000001 (const dword)  (not used)
Strings22Size                         20  0x00000014 (const dword)  (usage 3)
Strings22StartH                        0  0x00000000 (const dword)  (usage 3)
Strings22StartL                    10240  0x00002800 (const dword)  (usage 3)
Strings23Count                         1  0x00000001 (const dword)  (not used)
Strings23Size                         16  0x00000010 (const dword)  (usage 3)
Strings23StartH                        0  0x00000000 (const dword)  (usage 3)
Strings23StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings24Count                         1  0x00000001 (const dword)  (not used)
Strings24Size                         26  0x0000001a (const dword)  (usage 3)
Strings24StartH                        0  0x00000000 (const dword)  (usage 3)
Strings24StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings25Count                         1  0x00000001 (const dword)  (not used)
Strings25Size                         10  0x0000000a (const dword)  (usage 3)
Strings25StartH                        0  0x00000000 (const dword)  (usage 3)
Strings25StartL                    11776  0x00002e00 (const dword)  (usage 3)
Strings26Count                         1  0x00000001 (const dword)  (not used)
Strings26Size                         10  0x0000000a (const dword)  (usage 3)
Strings26StartH                        0  0x00000000 (const dword)  (usage 3)
Strings26StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings27Count                         1  0x00000001 (const dword)  (not used)
Strings27Size                         11  0x0000000b (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings28Count                         1  0x00000001 (const dword)  (not used)
Strings28Size                         40  0x00000028 (const dword)  (usage 3)
Strings28StartH                        0  0x00000000 (const dword)  (usage 3)
Strings28StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                         32  0x00000020 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    14336  0x00003800 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      2560  0x00000a00 (const dword)  (usage 3)
Strings30Count                         0  0x00000000 (const dword)  (not used)
Strings30Size                          1  0x00000001 (const dword)  (usage 3)
Strings30StartH                        0  0x00000000 (const dword)  (usage 3)
Strings30StartL                    14848  0x00003a00 (const dword)  (usage 3)
Strings31Count                         0  0x00000000 (const dword)  (not used)
Strings31Size                          1  0x00000001 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    15360  0x00003c00 (const dword)  (usage 3)
Strings32Count                         0  0x00000000 (const dword)  (not used)
Strings32Size                          1  0x00000001 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings33Size                          0  0x00000000 (const dword)  (not used)
Strings33StartH                        0  0x00000000 (const dword)  (not used)
Strings33StartL                        0  0x00000000 (const dword)  (not used)
Strings34Count                         0  0x00000000 (const dword)  (not used)
Strings34Size                          1  0x00000001 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings35Count                         1  0x00000001 (const dword)  (not used)
Strings35Size                         36  0x00000024 (const dword)  (usage 3)
Strings35StartH                        0  0x00000000 (const dword)  (usage 3)
Strings35StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings36Count                         0  0x00000000 (const dword)  (not used)
Strings36Size                          1  0x00000001 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings37Count                         0  0x00000000 (const dword)  (not used)
Strings37Size                          1  0x00000001 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings38Count                         0  0x00000000 (const dword)  (not used)
Strings38Size                          1  0x00000001 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                    18432  0x00004800 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                    18944  0x00004a00 (const dword)  (usage 3)
Strings3Count                          1  0x00000001 (const dword)  (not used)
Strings3Size                          18  0x00000012 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                       512  0x00000200 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                          7  0x00000007 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                    19456  0x00004c00 (const dword)  (usage 3)
Strings41Count                         1  0x00000001 (const dword)  (not used)
Strings41Size                          7  0x00000007 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                    19968  0x00004e00 (const dword)  (usage 3)
Strings42Count                         1  0x00000001 (const dword)  (not used)
Strings42Size                          7  0x00000007 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                    20480  0x00005000 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    20992  0x00005200 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    21504  0x00005400 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    22016  0x00005600 (const dword)  (usage 3)
Strings46Count                         1  0x00000001 (const dword)  (not used)
Strings46Size                          8  0x00000008 (const dword)  (usage 3)
Strings46StartH                        0  0x00000000 (const dword)  (usage 3)
Strings46StartL                    23552  0x00005c00 (const dword)  (usage 3)
Strings47Count                         1  0x00000001 (const dword)  (not used)
Strings47Size                          8  0x00000008 (const dword)  (usage 3)
Strings47StartH                        0  0x00000000 (const dword)  (usage 3)
Strings47StartL                    24576  0x00006000 (const dword)  (usage 3)
Strings48Count                         1  0x00000001 (const dword)  (not used)
Strings48Size                         10  0x0000000a (const dword)  (usage 3)
Strings48StartH                        0  0x00000000 (const dword)  (usage 3)
Strings48StartL                    23040  0x00005a00 (const dword)  (usage 3)
Strings49Count                         1  0x00000001 (const dword)  (not used)
Strings49Size                         10  0x0000000a (const dword)  (usage 3)
Strings49StartH                        0  0x00000000 (const dword)  (usage 3)
Strings49StartL                    24064  0x00005e00 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings50Count                         1  0x00000001 (const dword)  (not used)
Strings50Size                         10  0x0000000a (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    25088  0x00006200 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    25600  0x00006400 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    26112  0x00006600 (const dword)  (usage 3)
Strings5Count                          1  0x00000001 (const dword)  (not used)
Strings5Size                          37  0x00000025 (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                     13312  0x00003400 (const dword)  (usage 3)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          31  0x0000001f (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      2048  0x00000800 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                     17408  0x00004400 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                     17920  0x00004600 (const dword)  (usage 3)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      3584  0x00000e00 (const dword)  (usage 3)
stringsCV                            108  0x0000006c (mem) word[53] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           292  0x00000124 (mem) word (global)  (usage 24)
TouchXpos                            286  0x0000011e (mem) word (global)  (usage 12)
TouchYpos                            288  0x00000120 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     12358  0x00003046 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 375)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 45)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      11067  0x00002b3b (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 150)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        12558  0x0000310e (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
