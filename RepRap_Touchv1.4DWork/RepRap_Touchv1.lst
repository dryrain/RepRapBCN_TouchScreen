file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-35DT.fnc

000001  000001  #platform "uLCD-35DT"
000002  000001  #platform "uLCD-35DT"
000003  000008  */
000004  000009      #constant ULCD_35DT_DIABLO16_GFX
000005  000009      #constant ULCD_35DT_DIABLO16_GFX
000006  000010        
000007  000011      #IFNOT EXISTS DIABLO16_GFX2_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\Diablo16_Functions.fnc

000008  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000009  000012          #inherit "Diablo16_Functions.fnc"          // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for Diablo16 platforms
000012  000003        
000013  000004  //#constant ULCD_32PT_DIABLO16_GFX
000014  000005        
000015  000006        
000016  000007  // define the compiler dummy preambles
000017  000008  #constant LOCAL $//
000018  000008  #constant LOCAL $//
000019  000009  #constant EXTERN $ /**/
000020  000009  #constant EXTERN $ /**/
000021  000010        
000022  000011  #CONST
000023  000020  #END
000024  000021        
000025  000022  #CONST
000026  000038  #END
000027  000039        
000028  000040        
000029  000041        
000030  000042        
000031  000047  */
000032  000048        
000033  000049        
000034  000050  //------------------------------------------------------------------//
000035  000051  //     EVE  miscellaneous functions                                 //
000036  000052  //------------------------------------------------------------------//
000037  000053        
000038  000054  func to("device"), 0;                // output device redirection
000039  000055  // Syntax: to(outstream);
000040  000056  // Usage : to(APPEND); putstr("TWO ");
000041  000057  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000042  000058  //     :
000043  000059  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000044  000060  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000045  000061  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000046  000062  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000047  000063  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000048  000064  //     : completed its action. The APPEND argument is used to send the printed output to the same
000049  000065  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000050  000066  //     : sequential data to a media stream.
000051  000067  //     :
000052  000068  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000053  000069  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000054  000070  //     :                            appended to user memory if previous redirection was to an array.
000055  000071  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000056  000072  //     : TEXT           0xFF08      Output is directed to the screen (default).
000057  000073  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000058  000074  //     : I2C1           0xF820      Output is directed to the I2C1 port.
000059  000075  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000060  000076        
000061  000077  //------------------------------------------------------------------//
000062  000078  // to(..) redirection constants            //
000063  000079  //------------------------------------------------------------------//
000064  000080  #CONST
000065  000093  #END
000066  000094        
000067  000095        
000068  000096  func putch("char"), 0;                // write single char to current output device
000069  000097  // Syntax    : putch("char");
000070  000098  // Usage     : putch("A");
000071  000099  // Notes     : prints single characters to the current output stream, usually the
000072  000100  //           : display unless redirected with the ‘to’ redirection function.
000073  000101  //         : The arguments can be a variable, array element, expression or constant.
000074  000102        
000075  000103        
000076  000104  func putchXY("xpos", "ypos", "char"), 0;
000077  000105  // Syntax  : putchXY(x, y, '0x41'),
000078  000106  // Usage   : putchXY(100, 100, "HELLO");
000079  000107  // Notes   : Print a single character at position x, y.
000080  000108  //         : Char may be a constant or variable.
000081  000109  // Returns : nothing.
000082  000110        
000083  000111  func putstrXY("xpos", "ypos", "string"), 0;
000084  000112  // Syntax  : putstrXY(x, y, "string"),
000085  000113  // Usage   : putstrXY(100, 100, "HELLO");
000086  000114  // Notes   : Print a string at position x, y
000087  000115  //         : "String" may be a string constant, or pointer to a word aligned string.
000088  000116  // Returns : nothing.
000089  000117        
000090  000118        
000091  000119  func putstrCentred("xc", "yc", "string"), 0;
000092  000120  // Syntax  : putstrCentred(x, y, "string"),
000093  000121  // Usage   : putstrCentred(100, 100, "HELLO");
000094  000122  // Notes   : Print a string centred at position x, y
000095  000123  //         : "String" may be a string constant, or pointer to a word aligned string.
000096  000124  // Returns : nothing.
000097  000125        
000098  000126        
000099  000127  func pause("milliseconds"), 0;            // blocking delay
000100  000128  // Syntax: pause(milliseconds);
000101  000129  // Usage : pause(1000);                //pause for 1 second
000102  000130  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000103  000131        
000104  000132        
000105  000133  func putnum("arg1","arg2"), 1;            // print number to current output device
000106  000134  // Syntax: putnum(format, value);
000107  000135  // Usage : var := putnum(HEX, val);
000108  000136  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000109  000137  //     : Format: A constant that specifies the number format
000110  000138  //     : Value : The number to be printed
000111  000139  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000112  000140  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000113  000141  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000114  000142  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000115  000143  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000116  000144  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000117  000145  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000118  000146  //     :                                     BIN6     BIN6Z     BIN6ZB
000119  000147  //     :                                     BIN7     BIN7Z     BIN7ZB
000120  000148  //     :                                     BIN8     BIN8Z     BIN8ZB
000121  000149  //     :                                     BIN9     BIN9Z     BIN9ZB
000122  000150  //     :                                     BIN10     BIN10Z     BIN10ZB
000123  000151  //     :                                     BIN11     BIN11Z     BIN11ZB
000124  000152  //     :                                     BIN12     BIN12Z     BIN12ZB
000125  000153  //     :                                     BIN13     BIN13Z     BIN13ZB
000126  000154  //     :                                     BIN14     BIN14Z     BIN14ZB
000127  000155  //     :                                     BIN15     BIN15Z     BIN15ZB
000128  000156  //     :                                     BIN16     BIN16Z     BIN16ZB
000129  000157  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000130  000158  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000131  000159  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000132  000160  //     : | | | | V V V
000133  000161  //     : | | | | | | |
000134  000162  //     : | | | | | |
000135  000163  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000136  000164  //     : | | | | digit count |
000137  000165  //     : | | | | |___reserved (not used on GOLDELOX)
000138  000166  //     : | | | |
000139  000167  //     : | | | |
000140  000168  //     : | | | |
000141  000169  //     : | | | |
000142  000170  //     : | | | |
000143  000171  //     : | | | |______ 1 = leading zeros included
000144  000172  //     : | | | 0 = leading zeros suppressed
000145  000173  //     : | | |
000146  000174  //     : | | |
000147  000175  //     : | | |_______ 1 = leading zero blanking
000148  000176  //     : | |
000149  000177  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000150  000178  //     : |
000151  000179  //     : |______ 1 = space before unsigned number
000152  000180        
000153  000181        
000154  000182  func __translate("arg1","arg2","arg3","arg4"), 1; // list translator (*** internal compiler use only, not usable)
000155  000183        
000156  000184        
000157  000185  func putstr("string"), 1;                         // print var (word) aligned string to current output device
000158  000186  // Syntax: putstr(pointer);
000159  000187  // Usage : putstr("HELLO\n");
000160  000188  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000161  000189  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000162  000190  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000163  000191  //       : The output of putstr can be redirected to the communications port, the media, or memory
000164  000192  //       : using the to(...); function.
000165  000193  //       : A string constant is automatically terminated with a zero.
000166  000194  //       : A string in a data statement is not automatically terminated with a zero.
000167  000195  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000168  000196  //       : element packs 1 or 2 characters.
000169  000197        
000170  000198        
000171  000199  func strlen("varAddress"), 1;                   // return length of a var (word) aligned string in character units
000172  000200  // Syntax: strlen("varAddress);
000173  000201  // Usage : strlen("HELLO\n");
000174  000202  // Notes : gives the length of a string that is packed into regular var array
000175  000203  //       : Use str_Length(ptr)  for string pointer mode
000176  000204        
000177  000205        
000178  000206  func charwidth("char"), 1;
000179  000207  // Syntax  : charwidth(char);
000180  000208  // Usage   : wid := charwidth('W');
000181  000209  // Notes   : calculates width of a character in pixel units.
000182  000210  //         : 'char' may be a constant or variable.
000183  000211  // Returns : Width of character in pixel units.
000184  000212        
000185  000213        
000186  000214  func charheight("char"), 1;
000187  000215  // Syntax  : charheight(char);
000188  000216  // Usage   : ht := charheight('0x41');
000189  000217  // Notes   : Calculates height of a character in pixel units.
000190  000218  //         : 'char' may be a constant or variable.
000191  000219  // Returns : Height of character in pixel units.
000192  000220        
000193  000221        
000194  000222  func strwidth("pointer"), 1;
000195  000223  // Syntax  : strwidth(ptr);
000196  000224  // Usage   : x := strwidth("HELLO");
000197  000225  // Notes   : returns width of a string in pixel units.
000198  000226  //         : 'pointer' may be a constant or pointer to word aligned variable
000199  000227  // Returns : Width of string in pixel units, can be multi line.
000200  000228        
000201  000229        
000202  000230  func strheight(), 1;
000203  000231  // Syntax  : strheight();
000204  000232  // Usage   : h := strheight();
000205  000233  // Notes   : calculates height of a string in pixel units (after a call to strwidth );
000206  000234  //         : pointer may be a constant or pointer to word aligned variable
000207  000235  // Returns : Height of string in pixel units, can be multi line.
000208  000236        
000209  000237        
000210  000238  func unicode_page("charbeg","charend","charoffset"), 1;
000211  000239  // Syntax: unicode_page("charbeg","charend","charoffset");
000212  000240  // Usage : eg:  F_Traditional_0x20_0xFF
000213  000241  // Notes : After selecting a unicode image control with txt_FontID,
000214  000242  //       : this function is called to set the required font within the
000215  000243  //       : unicode set. The file "Unicode.inc" contains wrappers for
000216  000244  //       : this function, and it is not normally called directly.
000217  000245  //       : Returns count of characters in the set.
000218  000246  //       : Refer to "Unicode.inc" for further information.
000219  000247        
000220  000248        
000221  000249  //------------------------------------------------------------------//
000222  000250  //          Text Related Functions                                  //
000223  000251  //------------------------------------------------------------------//
000224  000252        
000225  000253  func txt_MoveCursor("line", "column"), 0;
000226  000254  // Syntax: txt_SetCursor(line, column);
000227  000255  // Usage : txt_SetCursor(arg1, arg2);
000228  000256  // Notes : Moves the text Cursor to a new screen position set by
000229  000257  //       : line,column parameters.
000230  000258        
000231  000259  func txt_Set("function", "value"), 0;
000232  000260  // Syntax: txt_Set(function, value);
000233  000261  // Usage : txt_Set(arg1, arg2);
000234  000262  // Returns : Original value before the change
000235  000263  // Notes : Sets various text related parameters used by other functions
000236  000264  //       : This allows the features to be set programatically with a
000237  000265  //       : single function call.It is strongly recommended to use the
000238  000266  //       : pre-defined constants rather than the mode numbers.
000239  000267  //       : NB:- It is often required to be able to set text
000240  000268  //       : functions with a single function call for graphics engine
000241  000269  //       : related functions, however, there is a complete set of single parameter
000242  000270  //       : shortcut functions that have exactly the same function as
000243  000271  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000244  000272  //       :
000245  000273  //       : txt_Set(TEXT_COLOUR, colour);        // function 0, TEXT_COLOUR, default colour = LIME
000246  000274  //       : txt_Set(TEXT_HIGHLIGHT, colour);     // function 1, TEXT_HIGHLIGHT)
000247  000275  //       : txt_Set(FONT_ID, fontNumer);         // function 2, FONT_ID)
000248  000276  //       : txt_Set(TEXT_WIDTH, multiplier);     // function 3, TEXT_WIDTH)
000249  000277  //       : txt_Set(TEXT_HEIGHT, multiplier);    // function 4, TEXT_HEIGHT)
000250  000278  //       : txt_Set(TEXT_XGAP, pixels);          // function 5, TEXT_XGAP)
000251  000279  //       : txt_Set(TEXT_YGAP, pixels);          // function 6, TEXT_YGAP)
000252  000280  //       : txt_Set(TEXT_PRINTDELAY, msecs);     // function 7, TEXT_PRINTDELAY)
000253  000281  //       : txt_Set(TEXT_OPACITY, value);        // function 8, TEXT_OPACITY)
000254  000282  //       : txt_Set(TEXT_BOLD, boldness);        // function 9, TEXT_BOLD)
000255  000283  //       : txt_Set(TEXT_ITALIC, slope);         // function 10, TEXT_ITALIC)
000256  000284  //       : txt_Set(TEXT_INVERSE, onoff);        // function 11, TEXT_INVERSE)
000257  000285  //       : txt_Set(TEXT_UNDERLINED, onoff);     // function 12, TEXT_UNDERLINED)
000258  000286  //       : txt_Set(TEXT_ATTRIBUTES, combine);   // function 13, TEXT_ATTRIBUTES)
000259  000287  //       : txt_Set(TEXT_WRAP, column);          // function 14, TEXT_WRAP)
000260  000288  //       : txt_Set(TEXT_ANGLE , degrees);       // function 15, TEXT_ANGLE)
000261  000289  //       :
000262  000290  //       : txt_Set(TEXT_COLOUR, colour);
000263  000291  //       : mode = TEXT_COLOUR (function 0)
000264  000292  //       : txt_Set(TEXT_COLOUR, value);
000265  000293  //       : value = 0 to 0xFFFF, Black to White
000266  000294  //       : Sets the Text colour for the display
000267  000295  //       : Default = LIME.
000268  000296  //       :
000269  000297  //       : mode = TEXT_HIGHLIGHT (function 1)
000270  000298  //       : txt_Set(TEXT_HIGHLIGHT, value);
000271  000299  //       : value = 0 to 0xFFFF, Black to White
000272  000300  //       : Sets the Text background colour for the display. Effective
000273  000301  //       : when text mode is Opaque.
000274  000302  //       : Default = BLACK.
000275  000303  //       :
000276  000304  //       : mode = FONT_ID (function 2)
000277  000305  //       : txt_Set(FONT_ID, value);
000278  000306  //       : value = FONT1 to FONT11 for internal fonts
000279  000307  //       : else this value is the name of a font included
000280  000308  //       : in a users program in a data statement.
000281  000309  //       : Default = FONT SIZE 3.
000282  000310  //       :
000283  000311  //       : mode = TEXT_WIDTH  (function 3)
000284  000312  //       : txt_Set(TEXT_WIDTH, value);
000285  000313  //       : value = 1 to 16
000286  000314  //       : Sets the Text Width multiplier
000287  000315  //       : text will be printed magnified horizontally
000288  000316  //       : by this factor, Default = 1.
000289  000317  //       :
000290  000318  //       : mode = TEXT_HEIGHT  (function 4)
000291  000319  //       : txt_Set(TEXT_HEIGHT, value);
000292  000320  //       : value = 1 to 16
000293  000321  //       : Sets the Text Height multiplier
000294  000322  //       : text will be printed magnified vertically
000295  000323  //       : by this factor, Default = 1.
000296  000324  //       :
000297  000325  //       : mode = TEXT_XGAP  (function 5)
000298  000326  //       : txt_Set(TEXT_XGAP, value);
000299  000327  //       : value = 1 to 32
000300  000328  //       : Sets the horizontal gap between characters
000301  000329  //       : The gap is in pixel units, Default = 0
000302  000330  //       :
000303  000331  //       : mode = TEXT_YGAP  (function 6)
000304  000332  //       : txt_Set(TEXT_YGAP, value);
000305  000333  //       : value = 1 to 32
000306  000334  //       : Sets the vertical gap below characters
000307  000335  //       : The gap is in pixel units, Default = 0
000308  000336  //       :
000309  000337  //       : mode = TEXT_PRINTDELAY  (function 7) DEPRECATED
000310  000338  //       : txt_Set(TEXT_PRINTDELAY, value);
000311  000339  //       : value = 0 to 255
000312  000340  //       : Sets the delay time (in ms) during character
000313  000341  //       : printing to give a 'teletype' like effect.
000314  000342  //       : Often used to attract attention to a string
000315  000343  //       : being printed which can often be missed if
000316  000344  //       : just suddenly appearing or changing.
000317  000345  //       : Default = 0 ms.
000318  000346  //       :
000319  000347  //       : mode = TEXT_OPACITY (function 8)
000320  000348  //       : txt_Set(TEXT_OPACITY, value);
000321  000349  //       : value = TRANSPARENT (0) = Text Trasparent
000322  000350  //       : value = OPAQUE (1) = Text Opaque
000323  000351  //       : Sets the Opacity/Transparency of the text
000324  000352  //       : Default = 0 or TRANSPARENT
000325  000353  //       :
000326  000354  //       : mode = TEXT_BOLD (function 9)
000327  000355  //       : txt_Set(TEXT_BOLD, value);
000328  000356  //       : value = dont care
000329  000357  //       : Sets Bold Text mode for the next string or char
000330  000358  //       : The feature automatically resets after printing
000331  000359  //       : using putstr or print has completed
000332  000360  //       :
000333  000361  //       : mode = TEXT_ITALIC (function10)
000334  000362  //       : txt_Set(TEXT_ITALIC, value);
000335  000363  //       : value = dont care
000336  000364  //       : Sets Italic Text mode for the next string or char
000337  000365  //       : The feature automatically resets after printing
000338  000366  //       : using putstr or print has completed
000339  000367        
000340  000368  //       : mode = TEXT_INVERSE (function 11)
000341  000369  //       : txt_Set(TEXT_INVERSE, value);
000342  000370  //       : value = dont care
000343  000371  //       : Sets Inverse Text mode for the next string or char
000344  000372  //       : The feature automatically resets after printing
000345  000373  //       : using putstr or print has completed
000346  000374  //       :
000347  000375  //       : mode = TEXT_UNDERLINED (function 12)
000348  000376  //       : txt_Set(TEXT_UNDERLINED, value);
000349  000377  //       : value = dont care
000350  000378  //       : Sets Underlined Text mode for the next string or char
000351  000379  //       : The feature automatically resets after printing
000352  000380  //       : using putstr or print has completed
000353  000381  //       :
000354  000382  //       : mode = TEXT_ATTRIBUTES (function 13)
000355  000383  //       : txt_Set(TEXT_ATTRIBUTES, value);
000356  000384  //       : value = bits are defined as:
000357  000385  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000358  000386  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000359  000387  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000360  000388  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000361  000389  //       : Allows a combination of text attributes to be defined together
000362  000390  //       : by 'or'ing the bits together.
000363  000391  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000364  000392  //       : The feature automatically resets after printing
000365  000393  //       : using putstr or print has completed.
000366  000394  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000367  000395  //       :
000368  000396  //       : mode = TEXT_WRAP (function 14)
000369  000397  //       : txt_Set(TEXT_WRAP , value);
000370  000398  //       : Sets the position where text wrap will occur
000371  000399  //       : The feature automatically resets when screen
000372  000400  //       : mode is changed. If the value is set to 0,
000373  000401  //       : text wrap is turned off.
000374  000402  //       : of the current screen. Default value is 0
000375  000403  // Notes : The value is in pixel units.
000376  000404  //       :
000377  000405  //       : mode = TEXT_ANGLE (function 15)
000378  000406  //       : txt_Set(TEXT_ANGLE , value);
000379  000407  //       : Sets the angle of plotted fonts
000380  000408  // Notes : The angle is in degrees.
000381  000409  //       :
000382  000410        
000383  000411  //------------------------------------------------------------------------------
000384  000412  //txt_Set() related constants
000385  000413  //------------------------------------------------------------------------------
000386  000414  #CONST
000387  000433  #END
000388  000434        
000389  000435  //------------------------------------------------------------------------------
000390  000436  //txt_Set() related arguments
000391  000437  //------------------------------------------------------------------------------
000392  000438  #CONST
000393  000464  #END
000394  000465        
000395  000466        
000396  000467  //=====================================================//
000397  000468  // Single parameter short-cuts                         //
000398  000469  // for the txt_Set functions                           //
000399  000470  // These functions return the existing value before    //
000400  000471  // the change is made.                                 //
000401  000472  //=====================================================//
000402  000473  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000403  000474  func txt_BGcolour("colour"), 1;             // 1  text background colour
000404  000475  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000405  000476  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000406  000477  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000407  000478  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000408  000479  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000409  000480  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000410  000481  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000411  000482  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000412  000483  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000413  000484  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000414  000485  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000415  000486  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000416  000487  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000417  000488  func txt_Angle("value"), 1;                 // 15 text set angle of plotted font
000418  000489        
000419  000490        
000420  000491        
000421  000492  //------------------------------------------------------------------//
000422  000493  // Memory Access Functions                                          //
000423  000494  //------------------------------------------------------------------//
000424  000495                                                  //
000425  000496  func peekW("address"), 1;                       // read a word from system memory
000426  000497  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000427  000498  // refer to address map of internal variables   //
000428  000499        
000429  000500        
000430  000501  //------------------------------------------------------------------//
000431  000502  //        CTYPE Function Prototypes
000432  000503  //------------------------------------------------------------------//
000433  000504        
000434  000505  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
000435  000506  // Syntax: isdigit("char");
000436  000507  // Usage : Var := isdigit(ch);
000437  000508  // Notes : char specifies the ascii character for the test
000438  000509  //     : 0 : char is not an ascii digit.
000439  000510  //     : 1 : char is an ascii digit..
000440  000511  //     : Valid range is "0123456789"
000441  000512        
000442  000513  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
000443  000514  // Syntax: isxdigit("char");
000444  000515  // Usage : Var := isxdigit(ch);
000445  000516  // Notes : char specifies the ascii character for the test
000446  000517  //     : 0 : char is not an ascii hexadecimal digit.
000447  000518  //     : 1 : char is an ascii hexadecimal digit..
000448  000519  //     : Valid range is "0123456789ABCDEF"
000449  000520        
000450  000521  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
000451  000522  // Syntax: isupper("char");
000452  000523  // Usage : Var := isupper(ch);
000453  000524  // Notes : char specifies the ascii character for the test
000454  000525  //     : 0 : char is not an ascii upper-case letter.
000455  000526  //     : 1 : char is an ascii upper-case letter.
000456  000527  //     : Valid range is "ABCD....WXYZ"
000457  000528        
000458  000529  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
000459  000530  // Syntax: islower("char");
000460  000531  // Usage : Var := islower(ch);
000461  000532  // Notes : char specifies the ascii character for the test
000462  000533  //     : 0 : char is not an ascii lower-case letter.
000463  000534  //     : 1 : char is an ascii lower-case letter.
000464  000535  //     : Valid range is "abcd....wxyz"
000465  000536        
000466  000537  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
000467  000538  // Syntax: isalpha("char");
000468  000539  // Usage : Var := isalpha(ch);
000469  000540  // Notes : char specifies the ascii character for the test
000470  000541  //     : 0 : char is not an ascii lower or upper case letter.
000471  000542  //     : 1 : char is an ascii lower or upper case letter.
000472  000543  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
000473  000544        
000474  000545  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
000475  000546  // Syntax: isalnum("char");
000476  000547  // Usage : Var := isalnum(ch);
000477  000548  // Notes : char specifies the ascii character for the test
000478  000549  //     : 0 : char is not an ascii alphanumeric character.
000479  000550  //     : 1 : char is an ascii alphanumeric character.
000480  000551  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
000481  000552        
000482  000553  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
000483  000554  // Syntax: isprint("char");
000484  000555  // Usage : Var := isprint(ch);
000485  000556  // Notes : char specifies the ascii character for the test
000486  000557  //     : 0 : char is not a printable ascii character.
000487  000558  //     : 1 : char is a printable ascii character.
000488  000559  //     : Valid range is "0x20...0x7F"
000489  000560        
000490  000561  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
000491  000562  // Syntax: isspace("char");
000492  000563  // Usage : Var := isspace(ch);
000493  000564  // Notes : char specifies the ascii character for the test
000494  000565  //     : 0 : char is not a space type character.
000495  000566  //     : 1 : char is a space type character.
000496  000567  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
000497  000568        
000498  000569  //unformatted
000499  000570  func iswhite("char"), 1;    //
000500  000571  // Syntax: iswhite("char");
000501  000572  // Usage : Var := iswhite(ch);
000502  000573  // Notes : char specifies the ascii character for the test
000503  000574  //     : 0 : char is not a space or tab character.
000504  000575  //     : 1 : char is not a space or tab character.
000505  000576  //     : Valid range is space or tab
000506  000577        
000507  000578  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
000508  000579  // Syntax: toupper("char");
000509  000580  // Usage : Var := toupper(ch);
000510  000581  // Notes : char specifies the ascii character for the test
000511  000582  //     : "ABCD....XYZ" : if character is a lower case letter.
000512  000583  //     : char : if character is not a lower case letter.
000513  000584  //     : Valid range is "abcd....wxyz"
000514  000585        
000515  000586  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
000516  000587  // Syntax: tolower("char");
000517  000588  // Usage : Var := tolower(ch);
000518  000589  // Notes : char specifies the ascii character for the test
000519  000590  //     : "abcd....xyz" : if character is an upper case letter.
000520  000591  //     : char : if character is not an upper case letter.
000521  000592  //     : Valid range is "ABCD....WXYZ"
000522  000593        
000523  000594  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
000524  000595  // Syntax: LObyte(var);
000525  000596  // Usage : myVar := LObyte(myvar2);
000526  000597  // Notes : var specifies the user variable
000527  000598  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
000528  000599        
000529  000600  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
000530  000601  // Syntax: HIbyte(var);
000531  000602  // Usage : myVar := HIbyte(myvar2);
000532  000603  // Notes : var specifies the user variable
000533  000604  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
000534  000605        
000535  000606        
000536  000607  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
000537  000608  // Syntax: ByteSwap(var);
000538  000609  // Usage : myVar := ByteSwap(myvar2);
000539  000610  // Notes : var specifies the user variable
000540  000611  //     : Returns the endian swapped value of a 16 bit variable
000541  000612        
000542  000613        
000543  000614  func NybleSwap("var"), 1;    //Returns the swapped lower bytes nybles, upper byte retained.
000544  000615  // Syntax: NybleSwap(var);
000545  000616  // Usage : myVar := NybleSwap(myvar2);
000546  000617  // Notes : var specifies the user variable
000547  000618  //     : Returns the 16 bit variable with swapped lower nybles
000548  000619        
000549  000620  func putnumXY("xpos", "ypos", "arg1","arg2"), 1;            // print number at the specified position
000550  000621  // Syntax: putnumXY(x, y, format, value);
000551  000622  // Usage : var := putnumXY(100, 100, HEX, val);
000552  000623  // Notes : prints a 16bit number in various formats at the specified XY coordinates.
000553  000624  //     : Format: A constant that specifies the number format
000554  000625  //     : Value : The number to be printed
000555  000626        
000556  000627  func txt_FontBank("flashbank", "address"), 1;               // use a font located in another bank
000557  000628  // Syntax: txt_FontBank(bank, offset);
000558  000629  // Usage : txt_FontBank(FLASHBANK_2, arg2);
000559  000630  // Returns : Current font before the change, or 0 if invalid or bank is protected
000560  000631  // Notes : Sets the current font to a font held in another bank
000561  000632        
000562  000633  //------------------------------------------------------------------//
000563  000634  // 16bit signed Math Functions                                      //
000564  000635  //------------------------------------------------------------------//
000565  000636                                                  //
000566  000637  func ABS("value"), 1;                           // return a positive number
000567  000638  // Syntax: ABS(value);
000568  000639  // Usage : var := ABS(arg);
000569  000640  // Notes : Returns the absolute value of an argument
000570  000641        
000571  000642  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000572  000643  // Syntax: MIN(value1, value2);
000573  000644  // Usage : var := MIN(arg1, arg2);
000574  000645  // Notes : Returns the minimum of 2 arguments
000575  000646        
000576  000647  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000577  000648  // Syntax: MAX(value1, value2);
000578  000649  // Usage : var := MAX(arg1, arg2);
000579  000650  // Notes : Returns the maximum of 2 arguments
000580  000651        
000581  000652  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000582  000653  // Syntax: SWAP(&var1, &var2);
000583  000654  // Usage : SWAP(&var1, &var2);
000584  000655  // Notes : Swaps the contents of 2 variables or memory locations
000585  000656        
000586  000657  func SIN("angle"), 1;                           // return SIN of angle
000587  000658  // Syntax: SIN(angle);
000588  000659  // Usage : var := SIN(arg);
000589  000660  // Notes : Returns the sine in radians of an argument in degrees
000590  000661  //       : the returned value range is from 127 to -127. The real
000591  000662  //       : cosine values vary from 1.0 to -1.0 so appropriate
000592  000663  //       : scaling must be done in user code.
000593  000664        
000594  000665  func COS("angle"), 1;                           // return COS of angle
000595  000666  // Syntax: COS(angle);
000596  000667  // Usage : var := COS(arg);
000597  000668  // Notes : Returns the cosine in radians of an argument in degrees
000598  000669  //       : the returned value range is from 127 to -127. The real
000599  000670  //       : cosine values vary from 1.0 to -1.0 so appropriate
000600  000671  //       : scaling must be done in user code.
000601  000672        
000602  000673  func RAND(), 1;                                 // return a pseudo random number
000603  000674  // Syntax: RAND();
000604  000675  // Usage : var := RAND();
000605  000676  // Notes : Returns a random number between 0 and 0xFFFF.
000606  000677  //       : The random number generator must first be seeded
000607  000678  //       : by using the SEED(number) function.
000608  000679        
000609  000680  func RANDVAL("low", "high"), 1;                 // return a ranged pseudo random number
000610  000681  // Syntax: RANDVAL("low", "high");
000611  000682  // Usage : var := RANDVAL(low, high);
000612  000683  // Notes : Returns a random number between low and high limits
000613  000684  //       : such that low <= N < high
000614  000685  //       : The random number generator may first be seeded
000615  000686  //       : by using the SEED(number) function.
000616  000687  //       : RANDVAL is the equivalent of aggregate functions:-
000617  000688  //       :     myvar = ABS( (RAND()%(high-low)+low) );
000618  000689  //       : Note that the lower limit is inclusive, but the upper limit is exclusive.
000619  000690        
000620  000691  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000621  000692  // Syntax: SEED(number);
000622  000693  // Usage : SEED(arg);
000623  000694  // Notes : Seeds the random number generator.
000624  000695        
000625  000696  func SQRT("number"), 1;                         // return square root of a number
000626  000697  // Syntax: SQRT(number);
000627  000698  // Usage : SQRT(arg);
000628  000699  // Notes : Returns the integer square root of a number.
000629  000700        
000630  000701  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000631  000702  // Syntax: OVF();
000632  000703  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000633  000704  //       : hiWord := OVF();
000634  000705  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000635  000706        
000636  000707  func CY(), 1;
000637  000708  // Syntax: CY();
000638  000709  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
000639  000710  //       : print(myvar," "CY(),"\n");           // carry = 1
000640  000711  // Notes : This function returns the carry status of an
000641  000712  // unsigned overflow from any 16 or 32bit additions or sutractions.
000642  000713        
000643  000714  func EVE_SP(), 1;
000644  000715  // Syntax: EVE_SP();
000645  000716  // Usage : eg:  print(EVE_SP());
000646  000717  // Notes : Used for debugging to assess the current stack level,
000647  000718  //       : mainly for checking stack leaks, see example EVE_SP.4dg
000648  000719        
000649  000720  func EVE_SSIZE(), 1;
000650  000721  // Syntax: EVE_SSIZE();
000651  000722  // Usage : eg:  print(EVE_SSIZE());
000652  000723  // Notes : Used to get the stack size,
000653  000724  //       : mainly for debugging purposes, EVE_SP.4dg
000654  000725        
000655  000726        
000656  000727  //------------------------------------------------------------------//
000657  000728  //
000658  000729  //------------------------------------------------------------------//
000659  000730  func mem_ArrayOp1("memarray", "count", "op", "value"), 0;                     // single array functions
000660  000731        
000661  000732        
000662  000733  // single word array operations
000663  000734  #CONST
000664  000755  #END
000665  000756        
000666  000757        
000667  000758  func mem_ArrayOp2("memarray1", "memarray2", "count", "op", "value"), 0;         // dual array functions
000668  000759        
000669  000760  // dual word array operations
000670  000761  #CONST
000671  000773  #END
000672  000774        
000673  000775        
000674  000776  func __reserved3(), 0; // do not remove
000675  000777  func __reserved4(), 0; // do not remove
000676  000778        
000677  000779        
000678  000780  //------------------------------------------------------------------//
000679  000781  // unsigned long (32 bit) operations                                //
000680  000782  //------------------------------------------------------------------//
000681  000783        
000682  000784  func uadd_3232("res32", "val1", "val2"), 1;
000683  000785  // Syntax   : cmp_3232(res32, varA, varB);
000684  000786  // Input    : DWORD res32 points to optional result (or zero for compare)
000685  000787  //          : DWORD val1 points to 32bit augend
000686  000788  //          : DWORD val2 points to 32bit addend
000687  000789  // Usage    : var res32[2];
000688  000790  //          : res := cmp_3232(res32, val1, val2);
000689  000791  // Notes    : performs an unsigned addition of 2 x 32bit values
000690  000792  //          : placing the 32bit result in a 2 word array.
000691  000793  // Returns  : returns 1 on 32bit unsigned overflow (carry).
000692  000794  //          ; carry flag is also set on 32bit unsigned overflow
000693  000795  //          ; and can be read with the CY() function.
000694  000796        
000695  000797        
000696  000798  func usub_3232("res32", "val1", "val2"), 1;
000697  000799  // Syntax   : cmp_3232(res32, varA, varB);
000698  000800  // Input    : DWORD res32 points to optional result (or zero for compare)
000699  000801  //          : DWORD val1 points to first 32bit minuend
000700  000802  //          : DWORD val2 points to 32bit subtrahend
000701  000803  // Usage    : var res32[2];
000702  000804  //          : res := cmp_3232(res32, val1, val2);
000703  000805  // Notes    : performs an unsigned subtraction of 2 x 32bit values
000704  000806  //          : placing the 32bit result in a 2 word array.
000705  000807  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
000706  000808  //          ; carry flag is also set on 32bit unsigned underflow
000707  000809  //          ; and can be read with the CY() function.
000708  000810        
000709  000811        
000710  000812  func umul_1616("&res32", "val1", "val2"), 1;
000711  000813  // Syntax   : umul_1616(&res32, varA, varB);
000712  000814  // Input    : DWORD result   points to 32bit result register.
000713  000815  //          : VAR   val1  16bit register or constant
000714  000816  //          : VAR   val2  16bit register or constant
000715  000817  // Usage    : var res32[2];
000716  000818  //          : umul_1616(&res32, myvar, 50000);
000717  000819  // Notes    : performs an unsigned multiply of 2 x 16bit values
000718  000820  //          : placing the 32bit result in a 2 word array.
000719  000821  // Returns  : the pointer to the 32bit result.
000720  000822  //          : carry and overflow are not affected.
000721  000823        
000722  000824        
000723  000825  func udiv_3232("res32", "val1", "val2"), 1;
000724  000826  // Syntax   : udiv_1616(res32, varA, varB);
000725  000827  // Input    : DWORD *result   points to 32bit result register.
000726  000828  //          : DWORD   val1  pointer to 32bit value (dividend)
000727  000829  //          : DWORD   val2  pointer to 32bit value (divisor)
000728  000830  // Usage    : var res32[2];
000729  000831  //          : umul_1616(res32, myvar, 50000);
000730  000832  // Notes    : performs an unsigned division of 2 x 32bit values
000731  000833  //          : placing the 32bit result in a 2 word array.
000732  000834  // Returns  : the pointer to the 32bit result.
000733  000835  //          : carry and overflow are not affected.
000734  000836        
000735  000837        
000736  000838  func ucmp_3232("val1", "val2"), 1;
000737  000839  // Syntax   : cmp_3232(varA, varB);
000738  000840  // Input    : DWORD val1 points to 32bit minuend
000739  000841  //          : DWORD val2 points to 32bit sutrahend
000740  000842  // Usage    : res := cmp_3232(val1, val2);
000741  000843  // Notes    : performs an unsigned comparison of 2 x 32bit values.
000742  000844  //          : The result of the subtraction is returned.
000743  000845  // Returns  : 0  if equal
000744  000846  //          : 1  if val1 > val2
000745  000847  //          : -1 if val1 < val2
000746  000848  //          : This function does not affect the carry flag.
000747  000849        
000748  000850  func __reserved5(), 0; // do not remove
000749  000851  func __reserved6(), 0; // do not remove
000750  000852        
000751  000853  //------------------------------------------------------------------//
000752  000854  // Floating point operations                                        //
000753  000855  // Note that source arguments may be a pointer to a float variable, //
000754  000856  // or a numeric text string.                                        //
000755  000857  // A string argument is converted at run-time by calling            //
000756  000858  // flt_Val for a string argument.                                   //
000757  000859  // Note that a float variable is a 2 word array, eg var myfloat[2]; //
000758  000860  //------------------------------------------------------------------//
000759  000861  func flt_VAL("fresult", "numstring"), 1;
000760  000862  // Syntax   : flt_VAL(float1, mystring);
000761  000863  // Input    : FLOAT  fresult  points to float result register
000762  000864  //          : numstring       a string constant or string variable
000763  000865  //          : that is holds valid floating point number.
000764  000866  // Usage    : var float1[2];
000765  000867  //          : flt_VAL(float1, "1.0594631");
000766  000868  // Notes    : The string argument can be a string constant, a pointer
000767  000869  //          : to a string variable, or a pointer to a data statement.
000768  000870  //          : The string may be a float, or a hex or binary integer value (no decimal point allowed).
000769  000871  //          : For hex or binary, the number is preceeded with 0x or 0b
000770  000872  // Returns  : the pointer to the float result.
000771  000873  //          : carry and overflow are not affected.
000772  000874        
000773  000875        
000774  000876  func flt_ITOF("fresult", "var16"), 1;
000775  000877  // Syntax   : flt_ITOF(resf, intval);
000776  000878  // Input    : FLOAT  fresult  points to float result register
000777  000879  //          : var16           a 16bit signed integer variable or string constant
000778  000880  // Usage    : var float1[2];
000779  000881  //          : var myvar := 30000;
000780  000882  //          : flt_VAL(float1, myvar);
000781  000883  // Notes    : Converts a 16bit signed integer value to a signed floating point number.
000782  000884  // Returns  : the pointer to the float result.
000783  000885        
000784  000886        
000785  000887  func flt_UITOF("fresult", "uvar16"), 1;
000786  000888  // Syntax   : flt_ITOF(resf, intval);
000787  000889  // Input    : FLOAT  fresult  points to float result register
000788  000890  //          : var16           a 16bit integer variable or constant (treated as unsigned)
000789  000891  // Usage    : var float1[2];
000790  000892  //          : var myuvar := 30000;
000791  000893  //          : flt_UITOF(float1, myuvar);
000792  000894  // Notes    : Converts a 16bit unsigned integer value to a positive floating point number.
000793  000895  // Returns  : the pointer to the float result.
000794  000896        
000795  000897  func flt_LTOF("fresult", "var32"), 1;
000796  000898  // Syntax   : flt_LTOF(resf, var32);
000797  000899  // Input    : FLOAT  fresult  points to float result register
000798  000900  //          : var32           points to a 32bit (long) signed variable or string constant
000799  000901  // Usage    : var float1[2];
000800  000902  //          : var mylong[2];
000801  000903  //          : flt_VAL(float1, mylong);
000802  000904  // Notes    : Converts a 32bit signed integer value to a signed floating point number.
000803  000905  // Returns  : the pointer to the float result.
000804  000906        
000805  000907        
000806  000908  func flt_ULTOF("fresult", "uvar32"), 1;
000807  000909  // Syntax   : flt_ITOF(resf, uvar32);
000808  000910  // Input    : FLOAT  fresult  points to float result register
000809  000911  //          : var32           points to a 32bit (unsigned long) unsigned variable or string constant
000810  000912  // Usage    : var float1[2];
000811  000913  //          : var myulong[2];
000812  000914  //          : flt_VAL(float1, myulong);
000813  000915  // Notes    : Converts a 32bit unsigned integer value to a positive floating point number.
000814  000916  // Returns  : the pointer to the float result.
000815  000917        
000816  000918        
000817  000919  func flt_PRINT("fvalue", "formatstring"), 1;
000818  000920  // Syntax   : flt_PRINT(resf, formatstr);
000819  000921  // Input    : FLOAT  fresult  points to float result register
000820  000922  //          : formatstring    zero, null string, of valid format string
000821  000923  // Usage    : var float1[2];
000822  000924  //          : flt_PRINT(float1, "");
000823  000925  // Notes    : The string argument can be a string constant, a pointer
000824  000926  //          : to a string variable, or a pointer to a data statement.
000825  000927  //          : If it is zero or an empty string, the number is
000826  000928  //          : automatically formatted for the best presentation.
000827  000929  //          : The format string is similar to the C language, but only
000828  000930  //          : a single '%' may be used to print a single variable.
000829  000931  // Returns  : zero if success.
000830  000932        
000831  000933        
000832  000934  func flt_ABS("result", "floatval"), 1;
000833  000935  // Syntax   : flt_ABS(&result, &fval);
000834  000936  // Input    : FLOAT  result   points to float result register
000835  000937  //          : numstring       a string that is a valid number
000836  000938  // Usage    : var float1[2];
000837  000939  //          : flt_VAL(float1, float1); // convert float1 to its ABS value
000838  000940  // Returns  : the pointer to the float result.
000839  000941  //          : carry and overflow are not affected.
000840  000942        
000841  000943        
000842  000944  func flt_ACOS("result", "floatval"), 1;
000843  000945  // Syntax   : flt_ACOS(result, fval);
000844  000946  // Input    : FLOAT  result (in radians) points to float result register
000845  000947  //          : FLOAT  floatval points to the float value to get arccos of
000846  000948  // Usage    : var float1[2];
000847  000949  //          : flt_ACOS(result, float1); // get the arccos of float1
000848  000950  // Notes    : the result is in radians.
000849  000951  // Returns  : the pointer to the float result.
000850  000952  //          : carry and overflow are not affected.
000851  000953        
000852  000954        
000853  000955  func flt_ASIN("result", "floatval"), 1;
000854  000956  // Syntax   : flt_ASIN(result, fval);
000855  000957  // Input    : FLOAT  result (in radians) points to float result register
000856  000958  //          : FLOAT  floatval points to the float value to get arcsin of
000857  000959  // Usage    : var float1[2];
000858  000960  //          : flt_ASIN(result, float1); // get the Arcsin of float1
000859  000961  // Notes    : the result is in radians.
000860  000962  // Returns  : the pointer to the float result.
000861  000963  //          : carry and overflow are not affected.
000862  000964        
000863  000965        
000864  000966  func flt_ATAN("result", "floatval"), 1;
000865  000967  // Syntax   : flt_ATAN(result, fval);
000866  000968  // Input    : FLOAT  result (in radians) points to float result register
000867  000969  //          : FLOAT  floatval points to the float value to get arctan of
000868  000970  // Usage    : var float1[2];
000869  000971  //          : flt_ATAN(result, float1); // get the Arctan of float1
000870  000972  // Notes    : the result is in radians.
000871  000973  // Returns  : the pointer to the float result.
000872  000974  //          : carry and overflow are not affected.
000873  000975        
000874  000976        
000875  000977  func flt_COS("result", "floatval"), 1;
000876  000978  // Syntax   : flt_COS(result, fval);
000877  000979  // Input    : FLOAT  result   points to float result register
000878  000980  //          : FLOAT  floatval (in radians) points to the float value to get Cos of
000879  000981  // Usage    : var float1[2];
000880  000982  //          : flt_COS(result, float1); // get the Cosine of float1
000881  000983  // Notes    : the result is in radians.
000882  000984  // Returns  : the pointer to the float result.
000883  000985  //          : carry and overflow are not affected.
000884  000986        
000885  000987        
000886  000988  func flt_EXP("result", "floatval"), 1;
000887  000989  // Syntax   : flt_EXP(result, fval);
000888  000990  // Input    : FLOAT  result   points to float result register
000889  000991  //          : FLOAT  floatval points to the float value to get Exponent of
000890  000992  // Usage    : var float1[2];
000891  000993  //          : flt_EXP(result, float1); // get the Exponent of float1
000892  000994  // Returns  : the pointer to the float result.
000893  000995  //          : carry and overflow are not affected.
000894  000996        
000895  000997        
000896  000998  func flt_CEIL("result", "floatval"), 1;
000897  000999  // Syntax   : flt_CEIL(result, floatval);
000898  001000  // Input    : FLOAT  floatval points to the float value to integerize up
000899  001001  // Usage    : var float1[2];
000900  001002  //          : n := flt_INT(float1, float1); // round value up to the integer value
000901  001003  // Notes    : Removes fractional part, rounding up correctly.
000902  001004  // Returns  : the pointer to the float result.
000903  001005  //          : carry and overflow are not affected.
000904  001006        
000905  001007        
000906  001008  func flt_FLOOR("result", "floatval"), 1;
000907  001009  // Syntax   : flt_FLOOR(result, floatval);
000908  001010  // Input    : FLOAT  floatval points to the float value to integerize down
000909  001011  // Usage    : var float1[2];
000910  001012  //          : n := flt_INT(float1, float1); // round value down to the integer value
000911  001013  // Notes    : Removes fractional part, rounding down correctly.
000912  001014  // Returns  : the pointer to the float result.
000913  001015  //          : carry and overflow are not affected.
000914  001016        
000915  001017        
000916  001018  func flt_SIN("result", "floatval"), 1;
000917  001019  // Syntax   : flt_SIN(result, fval);
000918  001020  // Input    : FLOAT  result   points to float result register
000919  001021  //          : FLOAT  floatval (in radians) points to the float value to get Sine of
000920  001022  // Usage    : var float1[2];
000921  001023  //          : flt_SIN(result, float1); // get the Sin of float1
000922  001024  // Notes    : the result is in radians.
000923  001025  // Returns  : the pointer to the float result.
000924  001026  //          : carry and overflow are not affected.
000925  001027        
000926  001028        
000927  001029  func flt_LOG("result", "floatval"), 1;
000928  001030  // Syntax   : flt_LOG(&result, &fval);
000929  001031  // Input    : FLOAT  result   points to float result register
000930  001032  //          : FLOAT  floatval points to the float value to get Log of
000931  001033  // Usage    : var float1[2];
000932  001034  //          : flt_LOG(result, float1); // get the natural Log of float1
000933  001035  // Returns  : the pointer to the float result.
000934  001036  //          : carry and overflow are not affected.
000935  001037        
000936  001038        
000937  001039  func flt_SQR("result", "floatval"), 1;
000938  001040  // Syntax   : flt_SQR(result, fval);
000939  001041  // Input    : FLOAT  result   points to float result register
000940  001042  //          : FLOAT  floatval points to the float value to get Log of
000941  001043  // Usage    : var float1[2];
000942  001044  //          : flt_SQR(result, float1); // get the square root of float1
000943  001045  // Returns  : the pointer to the float result, or zero if number was negative.
000944  001046  //          : carry and overflow are not affected.
000945  001047        
000946  001048        
000947  001049  func flt_TAN("result", "floatval"), 1;
000948  001050  // Syntax   : flt_TAN(result, fval);
000949  001051  // Input    : FLOAT  result   points to float result register
000950  001052  //          : FLOAT  floatval (in radians) points to the float value to get Tangent of
000951  001053  // Usage    : var float1[2];
000952  001054  //          : flt_TAN(result, float1); // get the Tangent of float1
000953  001055  // Returns  : the pointer to the float result.
000954  001056  //          : carry and overflow are not affected.
000955  001057        
000956  001058        
000957  001059  func flt_POW("result", "floatx", "floaty"), 1;
000958  001060  // Syntax   : flt_POW(result, fval1, fval2);
000959  001061  // Input    : FLOAT  result   points to float result register
000960  001062  //          : FLOAT  floatx   points to the float value to raise
000961  001063  //          : FLOAT  floaty   points to the float value for power
000962  001064  // Usage    : flt_POW(result, floatx, floaty); // raise x to power y
000963  001065  // Returns  : the pointer to the float result, or zero if error occurs.
000964  001066  //          : carry and overflow are not affected.
000965  001067        
000966  001068        
000967  001069  func flt_ADD("result", "floatA", "floatB"), 1;
000968  001070  // Syntax   : flt_ADD(result, floatA, floatB);
000969  001071  // Input    : FLOAT  result   points to float result register
000970  001072  //          : FLOAT  floatval points to the float value A
000971  001073  //          : FLOAT  floatval points to the float value B
000972  001074  // Usage    : flt_ADD(result, floatx, floaty); // add B to A
000973  001075  // Returns  : the pointer to the float result, or zero if error occurs.
000974  001076  //          : carry and overflow are not affected.
000975  001077        
000976  001078        
000977  001079  func flt_SUB("&result", "&floatA", "&floatB"), 1;
000978  001080  // Syntax   : flt_SUB(result, floatA, floatB);
000979  001081  // Input    : FLOAT  result   points to float result register
000980  001082  //          : FLOAT  floatval points to the float value A
000981  001083  //          : FLOAT  floatval points to the float value B
000982  001084  // Usage    : flt_SUB(&result, &floatx, &floaty); // subtract B from A
000983  001085  // Returns  : the pointer to the float result, or zero if error occurs.
000984  001086  //          : carry and overflow are not affected.
000985  001087        
000986  001088        
000987  001089  func flt_MUL("result", "floatA", "floatB"), 1;
000988  001090  // Syntax   : flt_MUL(result, floatA, floatB);
000989  001091  // Input    : FLOAT  result   points to float result register
000990  001092  //          : FLOAT  floatval points to the float value A
000991  001093  //          : FLOAT  floatval points to the float value B
000992  001094  // Usage    : flt_MUL(result, floatA, floatB); // multiply A by B
000993  001095  // Returns  : the pointer to the float result, or zero if error occurs.
000994  001096  //          : carry and overflow are not affected.
000995  001097        
000996  001098        
000997  001099  func flt_DIV("result", "floatA", "floatB"), 1;
000998  001100  // Syntax   : flt_DIV(result, floatA, floatB);
000999  001101  // Input    : FLOAT  result   points to float result register
001000  001102  //          : FLOAT  floatval points to the float value A
001001  001103  //          : FLOAT  floatval points to the float value B
001002  001104  // Usage    : flt_DIV(result, floatA, floatB); // divide A by B
001003  001105  // Returns  : the pointer to the float result, or zero if error occurs.
001004  001106  //          : carry and overflow are not affected.
001005  001107        
001006  001108        
001007  001109  //------------------------------------------------------------------//
001008  001110  // The following float functions all return integer values.
001009  001111  //------------------------------------------------------------------//
001010  001112  func flt_EQ("floatA", "floatB"), 1;
001011  001113  // Syntax   : flt_EQ(floatA, floatB);
001012  001114  // Input    : FLOAT  floatval points to the float value A
001013  001115  //          : FLOAT  floatval points to the float value B
001014  001116  // Usage    : if (flt_EQ(floatA, floatB)) // compare A to B, true if A == B
001015  001117  // Returns  : True if numbers are equal, false otherwise.
001016  001118        
001017  001119        
001018  001120  func flt_NE("floatA", "floatB"), 1;
001019  001121  // Syntax   : flt_NE(floatA, floatB);
001020  001122  // Input    : FLOAT  floatval points to the float value A
001021  001123  //          : FLOAT  floatval points to the float value B
001022  001124  // Usage    : if (flt_NE(floatA, floatB)) // compare A to B, true if A != B
001023  001125  // Returns  : True if numbers are not equal, false otherwise.
001024  001126        
001025  001127        
001026  001128        
001027  001129  func flt_GT("floatA", "floatB"), 1;
001028  001130  // Syntax   : flt_GT(floatA, floatB);
001029  001131  // Input    : FLOAT  floatval points to the float value A
001030  001132  //          : FLOAT  floatval points to the float value B
001031  001133  // Usage    : if (flt_GT(floatA, floatB)) // compare A to B, true if A > B
001032  001134  // Returns  : True if A > B, false otherwise.
001033  001135        
001034  001136        
001035  001137  func flt_GE("floatA", "floatB"), 1;
001036  001138  // Syntax   : flt_GE(floatA, floatB);
001037  001139  // Input    : FLOAT  floatval points to the float value A
001038  001140  //          : FLOAT  floatval points to the float value B
001039  001141  // Usage    : if (flt_GE(floatA, floatB)) // compare A to B, true if A >= B
001040  001142  // Returns  : True if A >= B, false otherwise.
001041  001143        
001042  001144        
001043  001145  func flt_LT("floatA", "floatB"), 1;
001044  001146  // Syntax   : flt_LT(floatA, floatB);
001045  001147  // Input    : FLOAT  floatval points to the float value A
001046  001148  //          : FLOAT  floatval points to the float value B
001047  001149  // Usage    : if (flt_LT(floatA, floatB)) // compare A to B, true if A < B
001048  001150  // Returns  : True if A < B, false otherwise.
001049  001151        
001050  001152        
001051  001153  func flt_LE("floatA", "floatB"), 1;
001052  001154  // Syntax   : flt_LE(floatA, floatB);
001053  001155  // Input    : FLOAT  floatval points to the float value A
001054  001156  //          : FLOAT  floatval points to the float value B
001055  001157  // Usage    : if (flt_LE(floatA, floatB )) // compare A to B, true if A <= B
001056  001158  // Returns  : True if A <= B, false otherwise.
001057  001159        
001058  001160        
001059  001161  func flt_SGN("floatval"), 1;
001060  001162  // Syntax   : flt_SGN(fval);
001061  001163  // Input    : FLOAT  floatval   points to the float value examine sign
001062  001164  // Usage    : var float1[2];
001063  001165  //          : n := flt_SGN(float1); // return -1 if float number negative
001064  001166  // Notes    : returns 0 if sign is positive or zero.
001065  001167  // Returns  : returns 16bit integer -1 if float sign is negative, or zero if positive.
001066  001168  //          : carry and overflow are not affected.
001067  001169        
001068  001170        
001069  001171  func flt_FTOI("floatvar"), 1;
001070  001172  // Syntax   : flt_FTOI(myfloat);
001071  001173  // Input    : FLOAT  fresult  points to float result register
001072  001174  // Usage    : var float1[2];
001073  001175  //          : myvar := flt_VAL(&float1, myvar);
001074  001176  // Notes    : Converts a floating point number to a 16bit integer.
001075  001177  //          : The floating point number is rounded up or down accordingly.
001076  001178  // Returns  : the integer value of the float.
001077  001179        
001078  001180  func flt_PRINTxy("xpos", "ypos", "fvalue", "formatstring"), 1;
001079  001181  // Syntax   : flt_PRINT(x, y, resf, formatstr);
001080  001182  // Input    : FLOAT  fresult  points to float result register
001081  001183  //          : formatstring    zero, null string, of valid format string
001082  001184  // Usage    : var float1[2];
001083  001185  //          : flt_PRINT(float1, "");
001084  001186  // Notes    : The string argument can be a string constant, a pointer
001085  001187  //          : to a string variable, or a pointer to a data statement.
001086  001188  //          : If it is zero or an empty string, the number is
001087  001189  //          : automatically formatted for the best presentation.
001088  001190  //          : The format string is similar to the C language, but only
001089  001191  //          : a single '%' may be used to print a single variable.
001090  001192  // Returns  : zero if success.
001091  001193        
001092  001194  func __reserved9(), 0; // do not remove
001093  001195  func __reserved10(), 0; // do not remove
001094  001196        
001095  001197  //------------------------------------------------------------------//
001096  001198  //------------------------------------------------------------------//
001097  001199  //------------------------------------------------------------------//
001098  001200  //------------------------------------------------------------------//
001099  001201  //------------------------------------------------------------------//
001100  001202  func pin_Set("mode", "pin"), 1;            // set pin to required mode
001101  001203  // Syntax: pin_Set(mode, pin);
001102  001204  // Usage : pin_Set(PIN_OUT,);
001103  001205  // Notes : Sets the selected pin to the desired mode. Refer to the manual
001104  001206  //       : for pin function compatitblilites.
001105  001207  //       : returns true if the pin number and mode is legal (usually ignored)
001106  001208  //       :    available pin modes
001107  001209  //       :    PIN_INP                 0        // pin is input, no pullup or pulldown
001108  001210  //       :    PIN_INP_HI              1        // pin is input with pullup to Vcc
001109  001211  //       :    PIN_INP_LO              2        // pin is input with pulldown to Gnd
001110  001212  //       :    PIN_OUT                 3        // pin is output
001111  001213  //       :    PIN_OUT_OD              4        // pin is output with open drain
001112  001214  //       :    PIN_AN                  5        // pin is analogue (PA0 to PA3 only)
001113  001215  //       :    PIN_ANAVG               6        // pin is analogue (PA0 to PA3 only), averaged - 16 samples
001114  001216  //       :
001115  001217        
001116  001218  func pin_HI("pin"), 1;                    // set pin to logic '1'
001117  001219  // Syntax: pin_HI(pin);
001118  001220  // Usage : pin_HI(PA4);        // make PA4 HI level
001119  001221  // Notes : Outputs a logic "High" to the pin latch
001120  001222  //       : The pin is automatically made an output.
001121  001223  //       : pullup, pulldown, and change notification will be disable for the selected pin.
001122  001224  //       : returns true if the pin number is legal (usually ignored)
001123  001225  //       :
001124  001226        
001125  001227  func pin_LO("pin"), 1;                    // set pin to logic '0'
001126  001228  // Syntax: pin_LO(pin);
001127  001229  // Usage : pin_LO(PA3);
001128  001230  // Notes : Outputs a logic "Low" to the pin latch
001129  001231  //       : The pin is automatically made an output.
001130  001232  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001131  001233  //       : returns true if the pin number is legal (usually ignored)
001132  001234  //       :
001133  001235        
001134  001236  func pin_Val("pin", "value"), 0;                    // set pin to to state of variable
001135  001237  // Syntax: pin_Var(pin, value);
001136  001238  // Usage : pin_Var(IO3, myvar);
001137  001239  // Notes : Outputs a logic state on a pin depending on the value of bit 0 of a variable
001138  001240  //       : The pin is automatically made an output.
001139  001241  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001140  001242  //       : returns true if the pin number is legal (usually ignored)
001141  001243        
001142  001244  func pin_Read("pin"), 1;                // read pin, logic or analogue
001143  001245  // Syntax: pin_Read(PA0);
001144  001246  // Usage : arg1 := pin_Read(arg2);
001145  001247  // Notes : Read a pin in various ways. If the pin is
001146  001248  //       : set to an input, read the state of the input pin.
001147  001249  //       : If set to an output, read the state of the output latch.
001148  001250  //       : If set to analogue, read the 12 bit analogue value.
001149  001251        
001150  001252  func bus_Read(), 1;
001151  001253  // Syntax: bus_Read();
001152  001254  // Usage : arg1 := pin_ReadBus();
001153  001255  // Notes : Read the 16 bit port regardless of pin configurations.
001154  001256  //       : If a pin is configured as input or analogue, the pin is read directly as
001155  001257  //       : if it were a digital input. If a pin is configured as an output, the pin
001156  001258  //       : is also read directly, giving the output latch state.
001157  001259  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001158  001260  //       : (Refer to 'port bit position masks')
001159  001261  //Returns: Returns the 16 bit value of the bus.
001160  001262        
001161  001263  func bus_SetPins("value"), 0;
001162  001264  // Syntax: bus_SetPins(value);
001163  001265  // Usage : arg1 := bus_SetPins(15); // set PA0 to PA3 to output bits, making them HI
001164  001266  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001165  001267  //       : and forces its state to a '1'. The state of its previous open drain
001166  001268  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001167  001269  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001168  001270  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001169  001271        
001170  001272  func bus_ClearPins("value"), 0;
001171  001273  // Syntax: bus_ClearPins(value);
001172  001274  // Usage : bus_ClearPins(0x03F0); // set PA0 to PA5 to output bits, making them LO
001173  001275  // Notes : Any '1' bits in "value" set the coresponding port pin to an output
001174  001276  //       : and forces its state to a '0. The state of its previous open drain
001175  001277  //       : configuration is not altered. Any zero bits in "value" will not affect the pin.
001176  001278  //       : pullup, pulldown, and change notification will be disable for the selected pins.
001177  001279  //       : Bit 0 coresponds to PA0 through to bit13 which coresponds to PA13
001178  001280        
001179  001281  func bus_SetChangeInterrupt("function", "portmask"), 1;
001180  001282  // Syntax: bus_SetChangeInterrupt(value);
001181  001283  // Usage : bus_SetChangeInterrupt(scanKeypad, 0x00F0); // set PA4 to PA7 to interrupt on change
001182  001284  // Notes : Any '1' bits in "portmask" marks that pin to generate an interrupt on change.
001183  001285  //       : A level change on that pin will cause "function" to be executed. If "function" is
001184  001286  //       : zero, the display may be put into sleep mode, and any change will cause a wakeup reset.
001185  001287  //       : Wakeup will always re-start code running in FLASHBANK_0
001186  001288  //       : Bit 0 coresponds to PA0 through to bit15 which coresponds to PA15
001187  001289  //       : (Refer to 'port bit position masks')
001188  001290  //       : Once armed, "function" will only be executed once, it is necessary to
001189  001291  //       : re-arm for any further events.
001190  001292  //Returns: Return the current state of the pins that are selected in "portmask"
001191  001293  //       : This can be saved and later used in "function" to see which pin(s) actually changed.
001192  001294        
001193  001295  func bus_Write8("var"), 0;
001194  001296  // Syntax: bus_Write8(var);
001195  001297  // Usage : bus_Write8(arg1);
001196  001298  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
001197  001299  //       : a settling delay of approx 50nsec, the BUS_WR(PA2) pin is strobed
001198  001300  //       : LO for approx 50nsec then set back HI.
001199  001301  //       : The upper 8 bits of arg1 are ignored.
001200  001302  //       : NB:- the BUS_WR(PA2) pin must be preset to the desired output state
001201  001303  //       : as must the bus pins to ensure BUS write integrity.
001202  001304  //       :
001203  001305  //       : BUS_0 is PA4
001204  001306  //       : BUS_1 is PA5
001205  001307  //       : BUS_2 is PA6
001206  001308  //       : BUS_3 is PA7
001207  001309  //       : BUS_4 is PA8
001208  001310  //       : BUS_5 is PA9
001209  001311  //       : BUS_6 is PA10
001210  001312  //       : BUS_7 is PA11
001211  001313        
001212  001314  func bus_Read8(), 1;
001213  001315  // Syntax: bus_Read();
001214  001316  // Usage : arg1 := bus_Read8();
001215  001317  // Notes : The BUS_RD(PA3) pin set to LO, then, after a settling delay
001216  001318  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
001217  001319  //       : (the upper 8 bits being set to 0)
001218  001320  //       : the BUS_RD(PA3) pin is then set back to a HI level.
001219  001321  //       : NB:- the BUS_RD(PA3) pin must be preset to the desired output state
001220  001322  //       : as must the bus pins to ensure BUS read integrity.
001221  001323  //       :
001222  001324  //       : BUS_0 is PA4
001223  001325  //       : BUS_1 is PA5
001224  001326  //       : BUS_2 is PA6
001225  001327  //       : BUS_3 is PA7
001226  001328  //       : BUS_4 is PA8
001227  001329  //       : BUS_5 is PA9
001228  001330  //       : BUS_6 is PA10
001229  001331  //       : BUS_7 is PA11
001230  001332        
001231  001333  func __reserved13(), 0; // do not remove
001232  001334  func __reserved14(), 0; // do not remove
001233  001335  //------------------------------------------------------------------//
001234  001336  // Pin related constants                                            //
001235  001337  //------------------------------------------------------------------//
001236  001338        
001237  001339  // pin_Set(...) pin modes
001238  001340  #CONST
001239  001348  #END
001240  001349        
001241  001350        
001242  001351  // pin name             constant    connector H1 I/O Pin referencesnumbers
001243  001352  #CONST
001244  001372  #END
001245  001373        
001246  001374  // bit position masks
001247  001375  #CONST
001248  001392  #END
001249  001393        
001250  001394        
001251  001395        
001252  001396  //------------------------------------------------------------------//
001253  001397  //   Graphics Functions
001254  001398  //------------------------------------------------------------------//
001255  001399  func gfx_Set("mode", "value"), 0;            // set various graphics functions
001256  001400  // Syntax: gfx_Set(mode, value);
001257  001401  // Usage : gfx_Set(arg1, arg2);
001258  001402  // Notes : Sets various graphics parameters used by other functions
001259  001403  //       : This allows the features to be set programatically with a
001260  001404  //       : single function call.It is strongly recommended to use the
001261  001405  //       : pre-defined constants rather than the mode numbers.
001262  001406  //       : NB:- Although it is often required to be able to set graphics
001263  001407  //       : functions with a single function call for graphics engine
001264  001408  //       : related functions, there is a complete set of single parameter
001265  001409  //       : shortcut functions that have exactly the same function as
001266  001410  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
001267  001411  //       :
001268  001412  //       : mode = PEN_SIZE (mode 16)
001269  001413  //       : gfx_Set(PEN_SIZE, value);
001270  001414  //       : value = SOLID (value 0) rectangle and circle objects are solid
001271  001415  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
001272  001416  //       : Sets the mode of the Pen used by most graphics objects
001273  001417  //       :
001274  001418  //       : mode = BACKGROUND_COLOUR (mode 17)
001275  001419  //       : gfx_Set(BACKGROUND_COLOUR, value);
001276  001420  //       : value = 0 to 0xFFFF, Black to White
001277  001421  //       : Sets the Background colour of the screen
001278  001422  //       :
001279  001423  //       : mode = OBJECT_COLOUR (mode 18)
001280  001424  //       : gfx_Set(OBJECT_COLOUR, value);
001281  001425  //       : value = 0 to 0xFFFF, Black to White
001282  001426  //       : Sets the Object colour used in various functions
001283  001427  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
001284  001428  //       :
001285  001429  //       : mode = CLIPPING (mode 19)
001286  001430  //       : gfx_Set(CLIPPING, value);
001287  001431  //       : value = OFF (value 0) Clipping disabled
001288  001432  //       : value = ON (value 1) Clipping enabled
001289  001433  //       : Enables/Disables the Clipping feature
001290  001434  //       :
001291  001435  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
001292  001436  //       : gfx_Set(TRANSPARENT_COLOUR, value);
001293  001437  //       : value = 0 to 0xFFFF Black to White
001294  001438  //       : Sets Bitmap, Image or Animation Transparency Colour.
001295  001439  //       : NB not implemented
001296  001440  //       :
001297  001441  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
001298  001442  //       : gfx_Set(5, value);
001299  001443  //       : value = OFF (value 0) Transparency disabled
001300  001444  //       : value = ON (value 1) Transparency enabled
001301  001445  //       : Enables/Disables the Transparency feature
001302  001446  //       : NB not implemented
001303  001447  //       :
001304  001448  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
001305  001449  //       : gfx_Set(FRAME_DELAY, value);
001306  001450  //       : value = 0 to 65535 ms
001307  001451  //       : Sets the Video/Animation clip inter-frame delay. This setting will
001308  001452  //       : over-ride the embedded frame delay of the clip. After the event,
001309  001453  //       : the setting will auto disable and if further inter-frame delays need
001310  001454  //       : overriding the setting must be re-issued.
001311  001455  //       :
001312  001456  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
001313  001457  //       : gfx_Set(SCREEN_MODE, value);
001314  001458  //       : value = LANDSCAPE   (value 0)
001315  001459  //       : value = LANDSCAPE_R (value 1)
001316  001460  //       : value = PORTRAIT    (value 2)
001317  001461  //       : value = PORTRAIT_R  (value 3)
001318  001462  //       :
001319  001463  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
001320  001464  //       : gfx_Set(OUTLINE_COLOUR, value);
001321  001465  //       : value = 1 to 0xFFFF, if 0, featre is OFF
001322  001466  //       : Sets the filled Rectangle or Circle objects outline colour
001323  001467  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
001324  001468  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
001325  001469  //       :
001326  001470  //       : Only supports variable contrast for uOLED Modules
001327  001471  //       : mode = CONTRAST (mode 25) : Contrast
001328  001472  //       : gfx_Set(CONTRAST, value);
001329  001473  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
001330  001474  //       : when contrast=0, display is placed in low power mode.
001331  001475  //       : This function should be called with contrast=0 when
001332  001476  //       : powering down the module.
001333  001477  //       :
001334  001478  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
001335  001479  //       : gfx_Set(LINE_PATTERN, value);
001336  001480  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
001337  001481  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
001338  001482  //       : a value of 0 turns the feature off
001339  001483  //       :
001340  001484  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
001341  001485  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
001342  001486  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
001343  001487  //       : NB not implemented, default is COLOUR16
001344  001488  //       :
001345  001489  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
001346  001490  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
001347  001491  //       : sets the button and slider objects bevel width
001348  001492  //       :
001349  001493  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
001350  001494  //       : gfx_Set(BEVEL_SHADOW , 5);
001351  001495  //       : sets the button and slider objects darken and lighten depth for the bevel colour
001352  001496  //       :
001353  001497  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
001354  001498  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
001355  001499  //       : sets the origin of drawn objects to a position other than 0,0
001356  001500  //       :
001357  001501  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
001358  001502  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
001359  001503  //       : sets the origin of drawn objects to a position other than 0,0
001360  001504        
001361  001505  //------------------------------------------------------------------------------
001362  001506  //gfx_Set() related constants
001363  001507  //------------------------------------------------------------------------------
001364  001508  #CONST
001365  001525  #END
001366  001526        
001367  001527        
001368  001528  func gfx_Cls(), 0;                    // clear the screen
001369  001529  // Syntax: gfx_Cls();
001370  001530  // Usage : gfx_Cls();
001371  001531  // Notes : Clears the screen with current background colour
001372  001532        
001373  001533  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
001374  001534  // Syntax: gfx_MoveTo(x, y);
001375  001535  // Usage : gfx_MoveTo(arg1, arg2);
001376  001536  // Notes : Moves the origin to a new x,y position
001377  001537        
001378  001538  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
001379  001539  // Syntax: gfx_MoveRel(x, y);
001380  001540  // Usage : gfx_MoveRel(arg1, arg2);
001381  001541  // Notes : Moves the origin to a new x,y position
001382  001542  //       : relative to the current origing
001383  001543        
001384  001544  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
001385  001545  // Syntax: gfx_LineTo(x1, y1);
001386  001546  // Usage : gfx_LineTo(arg1, arg2);
001387  001547  // Notes : Draws a Line from the origin x,y to x1,y1.
001388  001548  //       : The new origin is then set to x1, y1. Line colour needs
001389  001549  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001390  001550        
001391  001551  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
001392  001552  // Syntax: gfx_LineRel(x1, y1);
001393  001553  // Usage : gfx_LineRel(arg1, arg2);
001394  001554  // Notes : Draws a Line from the origin x,y to x1,y1.
001395  001555  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
001396  001556  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
001397  001557        
001398  001558  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
001399  001559  // Syntax: gfx_Line(x1, x2, y2, colr);
001400  001560  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
001401  001561  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
001402  001562        
001403  001563  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
001404  001564  // Syntax: gfx_Line(x1, x2, y, colr);
001405  001565  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001406  001566  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
001407  001567        
001408  001568  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
001409  001569  // Syntax: gfx_Line(y1, y2, x, colr);
001410  001570  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
001411  001571  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
001412  001572        
001413  001573  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
001414  001574  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
001415  001575  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001416  001576  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
001417  001577  //       : bottom corner (x2,y2) on the screen.
001418  001578        
001419  001579  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
001420  001580  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
001421  001581  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
001422  001582  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
001423  001583  //       : bottom corner (x2,y2) on the screen.
001424  001584        
001425  001585  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
001426  001586  // Syntax: gfx_Circle(x, y, rad, colr);
001427  001587  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001428  001588  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
001429  001589        
001430  001590  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
001431  001591  // Syntax: gfx_Circle(x, y, rad, colr);
001432  001592  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
001433  001593  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
001434  001594        
001435  001595  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
001436  001596  // Syntax: gfx_PutPixel(x, y, colr);
001437  001597  // Usage : gfx_PutPixel(arg1, arg2, arg3);
001438  001598  // Notes : Plots a coloured pixel on the screen at x,y location
001439  001599        
001440  001600  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
001441  001601  // Syntax: gfx_GetPixel(x, y);
001442  001602  // Usage : var := gfx_GetPixel(arg1, arg2);
001443  001603  // Notes : Reads and returns the colour value of a pixel at location x,y
001444  001604        
001445  001605  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
001446  001606  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
001447  001607  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001448  001608  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001449  001609  //       : Vertices must be specified in an anti-clockwise fashion
001450  001610        
001451  001611  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
001452  001612  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
001453  001613  // Usage : gfx_OrbitInit(&arg1, &arg2);
001454  001614  // Notes : Sets up the Orbit function parameters.
001455  001615  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
001456  001616  //       : variables that get updated after calling gfx_Orbit(,,) function.
001457  001617  //       : The coordiantaes are calculated relative to the origin
001458  001618  //       : obtained by using the gfx_MoveTo(x, y) function.
001459  001619        
001460  001620  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
001461  001621  // Syntax: gfx_Orbit(angle, distance);
001462  001622  // Usage : gfx_Orbit(arg1, arg2);
001463  001623  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
001464  001624  //       : only known parameters are the angle and the distance from the current origin.
001465  001625        
001466  001626  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
001467  001627  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
001468  001628  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
001469  001629  // Notes : This function is very similar to the Ploygon function
001470  001630  //       : with the exception of the 1st and the last vertices not joined.
001471  001631        
001472  001632  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
001473  001633  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
001474  001634  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
001475  001635  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001476  001636  //       : Vertices must be minimum of 3 and can be specified in any fashion
001477  001637        
001478  001638  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
001479  001639  // Syntax: gfx_Dot();
001480  001640  // Usage : gfx_Dot();
001481  001641  // Notes : Places a coloured dot at the origin
001482  001642        
001483  001643        
001484  001644  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
001485  001645  // Syntax: gfx_Bullet();
001486  001646  // Usage : gfx_Bullet();
001487  001647  // Notes : Places a coloured circle at the origin
001488  001648  //       : filled or unfilled state is controlled by PenSize
001489  001649        
001490  001650  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
001491  001651  // Syntax: gfx_IncX();
001492  001652  // Usage : var := gfx_IncX();
001493  001653  // Notes : Increments the x coordinate of the origin
001494  001654        
001495  001655  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
001496  001656  // Syntax: gfx_IncY();
001497  001657  // Usage : var := gfx_IncY();
001498  001658  // Notes : Increments the y coordinate of the origin
001499  001659        
001500  001660  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
001501  001661  // Syntax: gfx_BoxTo(x1, y1);
001502  001662  // Usage : gfx_BoxTo(arg1, arg2);
001503  001663  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
001504  001664  //       : The new origin is then set to x1,y1. Rectangle colour needs
001505  001665  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
001506  001666  //       : and the PenSize setting determines if Box is solid or outline.
001507  001667        
001508  001668  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
001509  001669  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
001510  001670  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
001511  001671  // Notes : Specifies a clipping window region on the screen such that any objects
001512  001672  //       : and text placed onto the screen will be clipped and displayed only
001513  001673  //       : within that region. For the clipping window to take effect, "Clipping"
001514  001674  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
001515  001675        
001516  001676        
001517  001677  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
001518  001678  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
001519  001679  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
001520  001680  // *Notes:
001521  001681        
001522  001682  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
001523  001683  // Syntax: gfx_SetClipRegion();
001524  001684  // Usage : var := gfx_SetClipRegion();
001525  001685  // *Notes:
001526  001686        
001527  001687  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
001528  001688  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
001529  001689  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
001530  001690  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001531  001691  //       : with xradius = xrad and yradius = yrad.
001532  001692  //       : if PenSize = 0 Ellipse is Solid
001533  001693  //       : if PenSize = 1 Ellipse is Outline
001534  001694        
001535  001695        
001536  001696  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
001537  001697  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
001538  001698  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
001539  001699  // Notes : Plots a coloured Ellipse on the screen at centre x,y
001540  001700  //       : with xradius = xrad and yradius = yrad.
001541  001701        
001542  001702        
001543  001703  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 1;
001544  001704  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
001545  001705  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
001546  001706  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001547  001707  //       : x,y arguments (top left corner). The size of the button depends on
001548  001708  //       : the font, width, height and length of the text.
001549  001709  //       : The button appearance will depend on the state parameter setting:
001550  001710  //       :         state = 0 : Button Pressed
001551  001711  //       :         state = 1 : Button Raised
001552  001712  //       : The button is automatically sized, determined by text.
001553  001713        
001554  001714        
001555  001715  func gfx_Button2("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001556  001716  // Syntax: gfx_Button2(mode, x, y, width, height, buttoncolour, textcolour, text);
001557  001717  // Usage : gfx_Button2(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001558  001718  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001559  001719  //       : x,y arguments (top left corner). The size of the button is defined by the width
001560  001720  //       : and height parameters. The text is centered within those bounds.
001561  001721  //       : The button appearance will depend on the state parameter setting:
001562  001722  //       :         state = 0 : Button Pressed
001563  001723  //       :         state = 1 : Button Raised
001564  001724  //       : The button has square corners.
001565  001725        
001566  001726  func gfx_Button3("state", "x", "y", "Width", "Height", "buttonColour", "textColour", "text"), 0;
001567  001727  // Syntax: gfx_Button3(mode, x, y, width, height, buttoncolour, textcolour, text);
001568  001728  // Usage : gfx_Button3(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001569  001729  // Notes : Draws a 3 dimensional Text Button at screen location defined by
001570  001730  //       : x,y arguments (top left corner). The size of the button is defined by the width
001571  001731  //       : and height parameters. The text is centered within those bounds.
001572  001732  //       : The button appearance will depend on the state parameter setting:
001573  001733  //       :         state = 0 : Button Pressed
001574  001734  //       :         state = 1 : Button Raised
001575  001735  //       : The button has rounded corners depending upon gfx_BevelRadius.
001576  001736        
001577  001737  func gfx_CheckBox("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001578  001738  // Syntax: gfx_CheckBox(state, x, y, Width, Height, boxColour, textColour, text);
001579  001739  // Usage : gfx_CheckBox(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001580  001740  // Notes : Draws a CheckBox at screen location defined by x,y arguments (top left corner).
001581  001741  //       : The size of the button is defined by the width and height parameters.
001582  001742  //       : The text is to the right of the checkbox and truncated if necessary.
001583  001743  //       : The check appearance will depend on the state parameter setting:
001584  001744  //       :         state = 0 = CHECKED    : Checkbox Checked
001585  001745  //       :         state = 1 = UNCHECKED  : CheckBox Unchecked
001586  001746        
001587  001747  func gfx_RadioButton("state", "x", "y", "Width", "Height", "boxColour", "textColour", "text"), 0;
001588  001748  // Syntax: gfx_RadioButton(state, x, y, Width, Height, boxColour, textColour, text);
001589  001749  // Usage : gfx_RadioButton(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001590  001750  // Notes : Draws a RadioButton at screen location defined by x,y arguments (top left corner).
001591  001751  //       : The size of the button is defined by the width and height parameters.
001592  001752  //       : The text is to the right of the radiobutton and truncated if necessary.
001593  001753  //       : The check appearance will depend on the state parameter setting:
001594  001754  //       :         state = 0 = CHECKED    : Radiobutton Checked
001595  001755  //       :         state = 1 = UNCHECKED  : Radiobutton Unchecked
001596  001756        
001597  001757  func gfx_Slider2("mode", "x1", "y1", "width", "height", "colour", "scale", "value"), 1;
001598  001758  // Syntax: gfx_Slider2(mode, x, y, width, height, colour, scale, value);
001599  001759  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001600  001760  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001601  001761  //       : Slider parameters are as follows:
001602  001762  //       :         mode = 0 : Slider recessed
001603  001763  //       :         mode = 1 : Slider raised
001604  001764  //       :         x1, y1 = top left corner
001605  001765  //       :         x2, y2 = bottom right corner
001606  001766  //       :         scale = n : sets the full scale range from 0 to n
001607  001767  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001608  001768  //returns: scaled value of thumb position
001609  001769        
001610  001770        
001611  001771        
001612  001772        
001613  001773  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
001614  001774  // Syntax: gfx_Panel(style, x, y, width, height, colour);
001615  001775  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
001616  001776  // Notes : Draws a panel (groupbox) at screen location defined by
001617  001777  //       : x, y, width and height with colour "colour".
001618  001778  //       :         state = 0 : sunken
001619  001779  //       :         state = 1 : raised
001620  001780  //       :         state = 2 : hide (draw object in background colour)
001621  001781  //returns: nothing
001622  001782        
001623  001783        
001624  001784        
001625  001785  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
001626  001786  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
001627  001787  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
001628  001788  // Notes : Draws a 3 dimensional Slider Bar on the screen.
001629  001789  //       : Slider parameters are as follows:
001630  001790  //       :         mode = 0 : Slider recessed
001631  001791  //       :         mode = 1 : Slider raised
001632  001792  //       :         x1, y1 = top left corner
001633  001793  //       :         x2, y2 = bottom right corner
001634  001794  //       :         scale = n : sets the full scale range from 0 to n
001635  001795  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
001636  001796  //returns: scaled value of thumb position
001637  001797        
001638  001798        
001639  001799        
001640  001800  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
001641  001801  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
001642  001802  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
001643  001803  // Notes : Copies an area of a screen from xs,ys of size given by width and height
001644  001804  //       : and pastes it to another location determined by xd, yd.
001645  001805        
001646  001806  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
001647  001807  // Syntax: gfx_RGBto565(red, green, blue);
001648  001808  // Usage : gfx_RGBto565(arg1, arg2, arg3);
001649  001809  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
001650  001810        
001651  001811  func gfx_332to565("COLOUR8BIT"), 1;
001652  001812  // Syntax: gfx_332to565(colour);
001653  001813  // Usage : gfx_332to565(arg);
001654  001814  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
001655  001815        
001656  001816  func gfx_565to332("COLOUR16BIT"), 1;
001657  001817  // Syntax: gfx_565to332(colour);
001658  001818  // Usage : clor332 := gfx_565to332(arg);
001659  001819  // Notes : Returns the 8bit (332 format) colour value of an 16 bit (565 format) colour
001660  001820        
001661  001821  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
001662  001822  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
001663  001823  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
001664  001824  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
001665  001825  //       : Vertices must be specified in an anti-clockwise fashion
001666  001826        
001667  001827        
001668  001828  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
001669  001829  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
001670  001830  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001671  001831  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001672  001832  //       : Vertices must be minimum of 3 and can be specified in any fashion
001673  001833        
001674  001834        
001675  001835  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001676  001836  // Syntax: gfx_Offset(x, y);
001677  001837  // Usage : gfx_Offset(arg1, arg2);
001678  001838  // Notes : Set the screen offset
001679  001839        
001680  001840        
001681  001841        
001682  001842  func gfx_FillPattern("patptr", "mode"), 1;
001683  001843  // Syntax  : gfx_FillPattern(patternpointer);
001684  001844  // Usage   : gfx_FillPattern(PTN_BRICKS);
001685  001845  //         : Provides graphics fill pattern, (8 linear bytes, 1=pixel off)
001686  001846  // Notes   : "patptr" points to an 8x8 tile for rendering filled areas.
001687  001847  //         : Rendering is turned off with gfx_FillPattern(0);
001688  001848  //         : or gfx_FillPattern(OFF);
001689  001849  //         : "mode" maybe TRANSPARENT or OPAQUE (0 or 1), for OPAQUE
001690  001850  //         : mode, the current screen colour is used for the 'off'
001691  001851  //         : pixels, for transparent mode, the 'off' pixels are not drawn.
001692  001852  //         : gfx_FillPattern affects all filled object, including polygons.
001693  001853  //         : There are 32 builtin patterns, these are obtained using the
001694  001854  //         : pre-defined constants FILLPATTERN_0 to FILLPATTERN_31, or the
001695  001855  //         : names, eg PTN_BRICKS, PTN_CARGONET, PTN_CIRCUITS, etc.
001696  001856  //         : Note that the constants range from 0xFFE0 to 0xFFFF, any
001697  001857  //         : other value is assumed to be a pointer to a users 8 byte
001698  001858  //         : block pattern.
001699  001859  // Returns : returns the handle of the previous pattern.
001700  001860        
001701  001861        
001702  001862  func gfx_PieSlice("cx", "cy", "spread", "radius", "step", "startangle", "endangle", "mode", "colour"), 0;
001703  001863  // Syntax  : gfx_PieSlice(cx, cy, spread, radius, step, startangle, endangle, mode, colour);
001704  001864  // Usage   : gfx_PieSlice(120, 120, 0, 100, 8, 75, 145, 0, YELLOW);
001705  001865  // Notes   : Draws a 'pie slice' (filled arc) at "cx":"cy" with radius "radius", starting at "startangle"
001706  001866  //         : and ending at "endangle". "spread" is used to offset the centrepoint of the pieslice
001707  001867  //         : to shift a pie chart piece away from the centrepoint.
001708  001868  //         : Rendering can be obtained with gfx_FillPattern(PATTRN);
001709  001869  //         : or gfx_FillPattern(OFF); for no fill pattern.
001710  001870  //         : Step is the stepping angle increment for the fineness of the pie Slice.
001711  001871  //         : "mode" has the following effect
001712  001872  //         :   if mode = 0, no outline
001713  001873  //         :   if mode = 1, outer circumference line (using current object colour)
001714  001874  //         :   if mode = 2, outer circumference and slice lines ( (using current object colour)
001715  001875  // Returns : nothing.
001716  001876        
001717  001877        
001718  001878  func gfx_Arc("xc", "yc", "radius", "step", "startangle", "endangle", "mode"), 0;
001719  001879  // Syntax  : gfx_Arc(cx, cy, radius, step, startangle, endangle, mode);
001720  001880  // Usage   : gfx_Arc(120, 120, 0, 100, 8, 75, 145, 0);
001721  001881  // Notes   : Draws an arc at "cx":"cy" with radius "radius", starting at "startangle"
001722  001882  //         : and ending at "endangle". Colour is determined by curent object colour.
001723  001883  //         : Step is the stepping angle increment for the fineness of the arc.
001724  001884  //         : "mode" has the following effect
001725  001885  //         :   if mode = 0, outer circumference line only
001726  001886  //         :   if mode = 1, outer circumference and lines back to cy:cy
001727  001887  // Returns : nothing.
001728  001888        
001729  001889        
001730  001890  func gfx_RoundRect("x1", "y1", "x2", "y2", "rad", "color"), 0;
001731  001891  // Syntax  : gfx_RoundRect(x1, y1, x2, y2, radius, colour);
001732  001892  // Usage   : gfx_RoundRect(120, 120, 160, 160, 8, GRAY); // draw a tab like object
001733  001893  // Notes   : Draws a filled rectangle at the given co-ordinates with rounded corners
001734  001894  //         : determined by "radius".
001735  001895  //         : Bounding rectangle is x1-rad, y1-rad, x2+rad, y2+rad.
001736  001896  // Returns : nothing.
001737  001897        
001738  001898        
001739  001899  func gfx_Surround("x1", "y1", "x2", "y2", "rad1", "rad2", "color"), 0;
001740  001900  // Syntax  : gfx_Surround(x1, y1, x2, y2, radius1, radius1, colour);
001741  001901  // Usage   : gfx_Surround(120, 120, 160, 160, 8, 0, GRAY); // rounded surround frame
001742  001902  // Notes   : Draws a outline rectangle at the given co-ordinates with rounded corners
001743  001903  //         : determined by "radius1". "radius2" sets the radius of the outer rounded rectangle.
001744  001904  //         : If "radius1" is zero, the inner rectangle will have square corners.
001745  001905  //         : Bounding rectangle is x1-rad1-rad2, y1-rad1-rad2, x2+rad1+rad2, y2+rad1+rad2.
001746  001906  // Returns : nothing.
001747  001907        
001748  001908        
001749  001909  func gfx_RoundPanel("state", "x", "y", "width", "height", "radius", "bevelwidth", "colour"), 0;
001750  001910  // Syntax  : gfx_RoundPanel(style, x, y, width, height, radius, bevelwidth, colour);
001751  001911  // Usage   : gfx_RoundPanel(PANEL_RAISED, 100, 100, 30, 20, GRAY);
001752  001912  // Notes   : Draws a rounded panel at x, y, width and height may be zero allowing the function
001753  001913  //         : to be used for rounded panels, rounded buttons, circular buttons.
001754  001914  //         :         state = 0 : sunken
001755  001915  //         :         state = 1 : raised
001756  001916  //         :         state = 2 : hide (draw object in background colour)
001757  001917  //         : Bounding rectangle is x1-radius-bevelwidth, y1-radius-bevelwidth, x2+radius+bevelwidth, y2+radius+bevelwidth.
001758  001918  // Returns : nothing.
001759  001919        
001760  001920        
001761  001921  func gfx_Gradient("style", "left", "top", "right", "bottom", "color1", "color2"), 0;
001762  001922  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, colr1, colr2);
001763  001923  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001764  001924  // Notes   : Draws a graduated colour rectangle at the specified co-ordinate.
001765  001925  //         : "style" specifies the drawing mode
001766  001926  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001767  001927  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001768  001928  //         :     GRAD_UP           // gradient changes in the vertical direction
001769  001929  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001770  001930  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001771  001931  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001772  001932  // Returns : nothing.
001773  001933        
001774  001934        
001775  001935  func gfx_RoundGradient("style", "left", "top", "right", "bottom", "radius", "color1", "color2"), 0;
001776  001936  // Syntax  : gfx_Gradient(style, x1, y1, x2, y2, radius, colr1, colr2);
001777  001937  // Usage   : gfx_Gradient(GRAD_WAVE_VER, 100, 100, 230, 120, BLACK, WHITE);
001778  001938  // Notes   : Draws a graduated colour rounded rectangle at the specified co-ordinate.
001779  001939  //         : X1 may equal X2, and Y1 = Y2 allowing allowing the function
001780  001940  //         : to be used for rounded panels, rounded buttons, circular buttons.
001781  001941  //         : "style" specifies the drawing mode
001782  001942  //         :     GRAD_DOWN         // gradient changes in the vertical direction
001783  001943  //         :     GRAD_RIGHT        // gradient change in the horizontal direction
001784  001944  //         :     GRAD_UP           // gradient changes in the vertical direction
001785  001945  //         :     GRAD_LEFT         // gradient change in the horizontal direction
001786  001946  //         :     GRAD_WAVE_VER     // gradient wave in the vertical direction
001787  001947  //         :     GRAD_WAVE_HOR     // gradient wave in the horizontal direction
001788  001948  //         : Bounding rectangle is x1-radius, y1-radius, x2+radius, y2+radius.
001789  001949  // Returns : nothing.
001790  001950        
001791  001951        
001792  001952  func gfx_ReadBresLine("x1", "y1", "x2", "y2", "ptr"), 1;
001793  001953  // Syntax  : gfx_readBrezLine(x1, y1, x2, y2, ptr);
001794  001954  // Usage   : anArrayPtr := gfx_readBrezLine(10, 10, 50, 50, 0);  // read arbitrary line to array, let the function make the array for me
001795  001955  // Notes   : reads an arbitrary line from the display to an array.
001796  001956  //         : If "ptr" is 0, the correctly sized array is created, in which case
001797  001957  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001798  001958  //         : is expected to point to a correctly sized array.
001799  001959  //         : NB if an array is supplied, its size must be large enough, and may
001800  001960  //         : be calculated:-
001801  001961  //         : bytecount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1) * 2; // calc array size for mem_Alloc (which allocates byte storage)
001802  001962  //         : wordcount := (MAX(ABS(x2-x1), ABS(y2-y1) + 1);     // calc array size for fixed word array
001803  001963  // Returns : A pointer to the created aray, or the users array.
001804  001964  //         : In the case of ptr=0, if there is insufficient
001805  001965  //         : memory to create the array, zero is returned
001806  001966        
001807  001967        
001808  001968  func gfx_WriteBresLine("x1", "y1", "x2", "y2", "ptr"), 0;
001809  001969  // Syntax  : gfx_writeBrezLine(x1, y1, x2, y2, ptr), 0;
001810  001970  // Usage   : gfx_writeBrezLine(20, 20, 50, 50, anArrayPtr);   // write an array back to the arbitrary line
001811  001971  // Notes   : cast pixel values from array to arbitrary line "x1", "y1", "x2", "y2"
001812  001972  //         : "ptr" points to the array to be written.
001813  001973  // Returns : nothing
001814  001974        
001815  001975        
001816  001976  func gfx_ReadGRAMarea("x1", "y1", "x2", "y2", "ptr"), 1;
001817  001977  // Syntax  : gfx_ReadGRAMarea(x1, y1, x2, y2, ptr);
001818  001978  // Usage   : anArrayPtr := gfx_ReadGRAMarea(10, 10, 50, 50, 0);  // read rectangular area to array, let the function make the array for me
001819  001979  // Notes   : reads an arbitrary rectangular area from the display to an array.
001820  001980  //         : If "ptr" is 0, the correctly sized array is created, in which case
001821  001981  //         : it is up to the caller to eventually destroy it. Otherwise "ptr"
001822  001982  //         : is expected to point to a correctly sized array.
001823  001983  //         : NB if an array is supplied, its size must be large enough, and may
001824  001984  //         : be calculated:-
001825  001985  //         : bytecount := ( (ABS(x2-x1)+1) * (ABS(y2-y1) + 1)) * 2;     // calc array size for mem_Alloc (which allocates byte storage)
001826  001986  //         : wordcount := ( (ABS(x2-x1)+1) *  ABS(y2-y1);             // calc array size for fixed word array
001827  001987  // Returns : A pointer to the created aray, or the users array.
001828  001988  //         : In the case of ptr=0, if there is insufficient
001829  001989  //         : memory to create the array, zero is returned
001830  001990        
001831  001991        
001832  001992  func gfx_WriteGRAMarea("x1", "y1", "x2", "y2", "ptr"), 0;
001833  001993  // Syntax  : gfx_WriteGRAMarea(x1, y1, x2, y2, ptr), 0;
001834  001994  // Usage   : gfx_WriteGRAMarea(20, 20, 50, 50, anArrayPtr);   // write an array back to the rectangular area
001835  001995  // Notes   : "ptr" points to the array to be written.
001836  001996  // Returns : nothing
001837  001997        
001838  001998        
001839  001999  func gfx_Get("mode"), 1;
001840  002000  // Syntax: gfx_Get(mode);
001841  002001  // Usage : arg1 := gfx_Get(arg);
001842  002002  // Notes : Returns various parameters to caller
001843  002003  //       :
001844  002004  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001845  002005  //       : var := gfx_Get(X_MAX);
001846  002006  //       : Returns the maximum horizontal value of the display
001847  002007  //       :
001848  002008  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001849  002009  //       : var := gfx_Get(Y_MAX);
001850  002010  //       : Returns the maximum vertical value of the display
001851  002011  //       :
001852  002012  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001853  002013  //       : var := gfx_Get(LEFT_POS);
001854  002014  //       : Returns the left location of the last drawn object
001855  002015  //       : such as a slider or button or an image/video
001856  002016  //       :
001857  002017  //       : mode = TOP_POS (mode 3) : Top location of Object
001858  002018  //       : var := gfx_Get(TOP_POS);
001859  002019  //       : Returns the top location of the last drawn object
001860  002020  //       : such as a slider or button or an image/video
001861  002021  //       :
001862  002022  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001863  002023  //       : var := gfx_Get(RIGHT_POS);
001864  002024  //       : Returns the right location of the last drawn object
001865  002025  //       : such as a slider or button or an image/video
001866  002026  //       :
001867  002027  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001868  002028  //       : var := gfx_Get(BOTTOM_POS );
001869  002029  //       : Returns the bottom location of the last drawn object
001870  002030  //       : such as a slider or button or an image/video
001871  002031  //       :
001872  002032  //       : mode = X_ORG (mode 6) : get current internal X position
001873  002033  //       : var := gfx_Get(X_ORG);
001874  002034  //       : Returns the internal X position that was set with
001875  002035  //       : gfx_MoveTo(x, y); or gfx_Set(X_ORG, pos);
001876  002036  //       :
001877  002037  //       : mode = Y_ORG (mode 7) : get current internal Y position
001878  002038  //       : var := gfx_Get(Y_ORG);
001879  002039  //       : Returns the internal X position that was set with
001880  002040  //       : gfx_MoveTo(x, y); or gfx_Set(Y_ORG, pos);
001881  002041  //       :
001882  002042        
001883  002043        
001884  002044  //------------------------------------------------------------------//
001885  002045  // Single parameter short-cuts                                      //
001886  002046  // for the gfx_Set functions                                        //
001887  002047  // These functions return the existing value before                 //
001888  002048  // the change is made.                                              //
001889  002049  //------------------------------------------------------------------//
001890  002050  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001891  002051  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001892  002052  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001893  002053  func gfx_Clipping("mode"), 1;                       // 3  graphics clipping ON/OFF
001894  002054  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001895  002055  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001896  002056  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001897  002057  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001898  002058  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001899  002059  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001900  002060  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001901  002061  func gfx_BevelRadius("radius"), 1;                  // 11 graphics button bevel radius
001902  002062  func gfx_BevelWidth("value"), 1;                    // 12 graphics button bevel width
001903  002063  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001904  002064  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001905  002065  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001906  002066        
001907  002067        
001908  002068  func gfx_PointWithinBox("x", "y", "&rectr"), 1;
001909  002069  // Syntax   : gfx_PointWithinBox(x, y, rect);
001910  002070  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
001911  002071  //          : result := gfx_PointWithinBox(x, y, r); // check area at 100,200,119,229
001912  002072  // Notes    : rect is an array of 4 vars, x1, y1, width, height - using width co-ordinates
001913  002073  // returns  : Returns true if last touch co-ordinates are within the box test area.
001914  002074        
001915  002075        
001916  002076  func gfx_PointWithinRectangle("x", "y", "&recta"), 1;
001917  002077  // Syntax   : gfx_PointWithinRectangle(x, y, recta);
001918  002078  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
001919  002079  //          : result := gfx_PointWithinRectangle(x, y, r); // check if point within area at 100,200,119,229
001920  002080  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 using absolute co-ordinates
001921  002081  // returns  : Returns true if x:y co-ordinates are within the rectangle test area.
001922  002082        
001923  002083        
001924  002084  func __reserved17(), 0; // do not remove
001925  002085  func __reserved18(), 0; // do not remove
001926  002086  func __reserved19(), 0; // do not remove
001927  002087  func __reserved20(), 0; // do not remove
001928  002088  func __reserved21(), 0; // do not remove
001929  002089  func __reserved22(), 0; // do not remove
001930  002090        
001931  002091        
001932  002092  // built in fill pattern constants for function gfx_FillPattern
001933  002093  #CONST
001934  002126  #END
001935  002127        
001936  002128  #CONST
001937  002161  #END
001938  002162        
001939  002163  //------------------------------------------------------------------//
001940  002164  //     gradient control constants                                   //
001941  002165  //------------------------------------------------------------------//
001942  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001943  002166  #constant GRAD_DOWN         0x20    // gradient changes in the vertical direction
001944  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001945  002167  #constant GRAD_RIGHT        0x30    // gradient change in the horizontal direction
001946  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001947  002168  #constant GRAD_UP           0x40    // gradient changes in the vertical direction
001948  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001949  002169  #constant GRAD_LEFT         0x50    // gradient change in the horizontal direction
001950  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001951  002170  #constant GRAD_WAVE_VER     0x60    // gradient wave in the vertical direction
001952  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001953  002171  #constant GRAD_WAVE_HOR     0x70    // gradient wave in the horizontal direction
001954  002172        
001955  002173        
001956  002174        
001957  002175        
001958  002176  //------------------------------------------------------------------//
001959  002177  // uSD/FLASH Function Prototypes                                    //
001960  002178  //------------------------------------------------------------------//
001961  002179  func media_Video("x", "y"), 0;                      // display movie at position x y
001962  002180  // Syntax: media_Video(x, y);
001963  002181  // Usage : media_Video(arg1, arg2);
001964  002182  // Notes : Play a Video/Animation clip from the uSD card at screen location
001965  002183  //       : specified by x,y (top left corner). The location of the clip in the
001966  002184  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001967  002185        
001968  002186  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001969  002187  // Syntax: media_VideoFrame(Frame_number);
001970  002188  // Usage : arg1 := media_VideoFrame();
001971  002189  // Notes : After a pointer to a valid video has been set with media_SetSector,
001972  002190  //       : calling this function shows each fram sequentially, returning
001973  002191  //       : the number of frames remaining. The position of the image is
001974  002192  //     : at the current origin as set with gfx_MoveTo(...);
001975  002193        
001976  002194  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001977  002195  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001978  002196  // Usage : media_SetAdd(arg1, arg2);
001979  002197  // Notes : Set uSD internal Address pointer for bytewise access
001980  002198        
001981  002199  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001982  002200  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001983  002201  // Usage : media_SetSector(arg1, arg2);
001984  002202  // Notes : Set uSD internal Sector pointer for sector block access
001985  002203        
001986  002204  func media_RdSector("*destination"), 1;
001987  002205  // Syntax: media_RdSector(*destination);
001988  002206  // Usage : media_RdSector(rdblock);
001989  002207  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001990  002208  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001991  002209  //       : After the read the Sector pointer is automatically incremented by 1.
001992  002210  //       : Returns TRUE if uSD response was TRUE
001993  002211        
001994  002212  func media_WrSector("*source"), 1;
001995  002213  // Syntax: media_WrSector(*source);
001996  002214  // Usage : media_WrSector(wrblock);
001997  002215  // Notes : Writes 512 bytes (256 words) from a source memory block
001998  002216  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001999  002217  //       : pointer is automatically incremented by 1.
002000  002218  //       : Returns TRUE if uSD response was TRUE
002001  002219        
002002  002220  func media_ReadByte(), 1;                // read a byte at the current stream position
002003  002221  // Syntax: media_RdByte();
002004  002222  // Usage : var := media_RdByte();
002005  002223  // Notes : Reads and Returns a single byte of data from the
002006  002224  //       : uSD card pointed to by the internal Address pointer.
002007  002225  //       : After the read the Address pointer is automatically
002008  002226  //       : incremented by 1.
002009  002227        
002010  002228  func media_ReadWord(), 1;                // read a word at the current stream position
002011  002229  // Syntax: media_ReadWord();
002012  002230  // Usage : var := media_ReadWord();
002013  002231  // *Notes : Reads and Returns a single word of data from the
002014  002232  //       : uSD card pointed to by the internal Address pointer.
002015  002233  //       : After the read the Address pointer is automatically
002016  002234  //       : incremented by 2.
002017  002235        
002018  002236  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
002019  002237  // Syntax: media_WriteByte(arg1);
002020  002238  // Usage : var := media_WriteByte(arg1);
002021  002239  // *Notes : Writes and Returns xxxxx
002022  002240  //       : After the write the Address pointer is automatically
002023  002241  //       : incremented by 1.
002024  002242        
002025  002243  func media_WriteWord("word"), 1;            // write a word to the current stream position
002026  002244  // Syntax: media_WriteWord(arg1);
002027  002245  // Usage : var := media_WriteWord(arg1);
002028  002246  // *Notes : Writes and Returns xxxxx
002029  002247  //       : After the write the Address pointer is automatically
002030  002248  //       : incremented by 2.
002031  002249        
002032  002250  func media_Image("x", "y"), 0;            // display image at position x y
002033  002251  // Syntax: media_Image(x, y);
002034  002252  // Usage : media_Image(arg1, arg2);
002035  002253  // Notes : Display an image from the uSD card at screen location
002036  002254  //       : specified by x,y (top left corner). The location of the
002037  002255  //       : Image in the uSD card must be specified by
002038  002256  //       : media_setSector(Image_Sector_Add) function.
002039  002257        
002040  002258  func media_Flush(), 1;                    // after writing to media, flush the sector and write
002041  002259  // Syntax: media_Flush();
002042  002260  // Usage : var := media_Flush();
002043  002261  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
002044  002262  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
002045  002263        
002046  002264  func media_Init(), 1;                    // initialize uSD card
002047  002265  // Usage : media_Init();
002048  002266  // Notes : Initialise uSD CARD
002049  002267  //       : Response: 0 = No Card
002050  002268  //       :           1 = Card Initialised
002051  002269        
002052  002270  func __reserved23(), 0; // do not remove
002053  002271  func __reserved24(), 0; // do not remove
002054  002272  func __reserved25(), 0; // do not remove
002055  002273  func __reserved26(), 0; // do not remove
002056  002274        
002057  002275  //==============================================//
002058  002276  // Communications Function Prototypes           //
002059  002277  // NB Primary COM port has fixed pins,          //
002060  002278  // COM1, COM2 and COM3 must have pins assigned. //
002061  002279  //==============================================//
002062  002280  func setbaud("baudnum"), 0;            // set baud rate of COM0
002063  002281  // Syntax: setbaud(baud_number);
002064  002282  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
002065  002283  // *Notes : argument specifies the baud rate using pre-defined constant.
002066  002284  //       : The pre-defined constant is a value of 0-19 , and internally
002067  002285  //       : this is used as a table pointer to get the baud rate divisor
002068  002286  //       : value for one of the 20 selected baud rates, control is then
002069  002287  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
002070  002288  //       : The pre-defined constants equate to a value of 0-19.
002071  002289  //       : If a value other than 0-19 is used, a run time error (eror 25)
002072  002290  //       : will occur.
002073  002291        
002074  002292  // baud divisor rates for legacy setbaud(n);
002075  002293  #CONST
002076  002315  #END
002077  002316        
002078  002317        
002079  002318  func com_SetBaud("comport","baudrate/10"), 1;
002080  002319  // Syntax: com_SetBaud("comport","baudrate/10");
002081  002320  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
002082  002321  // Notes : sets to any viable baud rate from 160 to 655350
002083  002322  // return true if baud rate was acceptable
002084  002323        
002085  002324        
002086  002325  func COM1_RX_pin("pin"), 1;        // select the hardware pin for the COM1 receive line
002087  002326  // Usage : COM1_RX_pin(PA0); // set COM1 RX to PA0 pin
002088  002327  // Notes : Selects the hardware pin for COM1 receive line.
002089  002328  //       : Note that only a single pin can be mapped to COM1 RX.
002090  002329  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002091  002330  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002092  002331  //       : If the pin argument is 0 the function has no effect
002093  002332  //       : The pin is automatically set to an input.
002094  002333  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002095  002334  //       : it is necessary to configure the input pin first, eg
002096  002335  //       :     COM1_RX_pin(PA7);     // configure COM1 RX to PA7 (this disconnects anything else)
002097  002336  //       :     COM1_TX_pin(PA7));    // configure COM1 TX to PA7
002098  002337  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002099  002338        
002100  002339  func COM2_RX_pin("pin"), 1;        // select the hardware pin for the COM2 receive line
002101  002340  // Usage : COM2_RX_pin(PA0); // set COM2 RX to PA0 pin
002102  002341  // Notes : Selects the hardware pin for COM2 receive line.
002103  002342  //       : Note that only a single pin can be mapped to COM2 RX.
002104  002343  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002105  002344  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002106  002345  //       : If the pin argument is 0 the function has no effect
002107  002346  //       : The pin is automatically set to an input.
002108  002347  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002109  002348  //       : it is necessary to configure the input pin first, eg
002110  002349  //       :     COM2_RX_pin(PA7);     // configure COM2 RX to PA7 (this disconnects anything else)
002111  002350  //       :     COM2_TX_pin(PA7));    // configure COM2 TX to PA7
002112  002351  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002113  002352        
002114  002353  func COM3_RX_pin("pin"), 1;        // select the hardware pin for the COM3 receive line
002115  002354  // Usage : COM3_RX_pin(PA0); // set COM3 RX to PA0 pin
002116  002355  // Notes : Selects the hardware pin for COM3 receive line.
002117  002356  //       : Note that only a single pin can be mapped to COM3 RX.
002118  002357  //       : Pins that can be mapped to COMx TX are PA0 to PA13
002119  002358  //       : Pins that can't be mapped to COMx RX are PA14 and PA15
002120  002359  //       : If the pin argument is 0 the function has no effect
002121  002360  //       : The pin is automatically set to an input.
002122  002361  //       : If the COMx RX pin is set to same pin as COMx TX pin (eg for a loopback check)
002123  002362  //       : it is necessary to configure the input pin first, eg
002124  002363  //       :     COM3_RX_pin(PA7);     // configure COM3 RX to PA7 (this disconnects anything else)
002125  002364  //       :     COM3_TX_pin(PA7));    // configure COM3 TX to PA7
002126  002365  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002127  002366        
002128  002367        
002129  002368  func COM1_TX_pin("pin"), 1;        // select the hardware pin for COM1 transmit line
002130  002369  // Syntax: COM1_TX_pin(pin);
002131  002370  // Usage : COM1_TX_pin(PA2); // set COM1 TX to PA2 pin
002132  002371  // Notes : Select the hardware pin for COMx transmit line.
002133  002372  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002134  002373  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002135  002374  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002136  002375  //       : The pin is automatically set to an output.
002137  002376  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002138  002377        
002139  002378  func COM2_TX_pin("pin"), 1;        // select the hardware pin for COM2 transmit line
002140  002379  // Syntax: COM2_TX_pin(pin);
002141  002380  // Usage : COM2_TX_pin(PA2); // set COM2 TX to PA2 pin
002142  002381  // Notes : Select the hardware pin for COMx transmit line.
002143  002382  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002144  002383  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002145  002384  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002146  002385  //       : The pin is automatically set to an output.
002147  002386  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002148  002387        
002149  002388  func COM3_TX_pin("pin"), 1;        // select the hardware pin for COM3 transmit line
002150  002389  // Syntax: COM3_TX_pin(pin);
002151  002390  // Usage : COM3_TX_pin(PA2); // set COM3 TX to PA2 pin
002152  002391  // Notes : Select the hardware pin for COMx transmit line.
002153  002392  //       : Pins that can be mapped to COMx TX are PA1, PA3 to PA9, and PA12 or PA13
002154  002393  //       : Pins that can't be mapped to COMx TX are PA0, PA2, PA10, PA11, PA14 and PA15
002155  002394  //       : If the pin argument is 0, COMx TX is disconnected from all pins.
002156  002395  //       : The pin is automatically set to an output.
002157  002396  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002158  002397        
002159  002398  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
002160  002399  // Syntax: com_Init(buffer, bufsize, qualifier);
002161  002400  // Usage1: com_Init(mybuf, 20, 0);
002162  002401  // Usage2: com_Init(mybuf, 20, ':');
002163  002402  // Notes : initialize a serial capture buffer for the comms input
002164  002403  //       : The program must declare a var array as a circular buffer.
002165  002404  //       : Usage1 declares a circular buffer which will continually
002166  002405  //       : buffer characters.
002167  002406  //       : Usage2 must receive ':' before any characters will
002168  002407  //       : accumulate in the buffer.
002169  002408        
002170  002409  func com1_Init("buf","bufsize","qualifier"), 0;
002171  002410  // Syntax: com1_Init(buffer, bufsize, qualifier);
002172  002411  // Usage1: com1_Init(mybuf, 20, 0);
002173  002412  // Usage2: com1_Init(mybuf, 20, ':');
002174  002413  // Notes : initialize a serial capture buffer for the comms input
002175  002414  //       : The program must declare a var array as a circular buffer.
002176  002415  //       : Usage1 declares a circular buffer which will continually
002177  002416  //       : buffer characters.
002178  002417  //       : Usage2 must receive ':' before any characters will
002179  002418  //       : accumulate in the buffer.
002180  002419        
002181  002420  func com2_Init("buf","bufsize","qualifier"), 0;
002182  002421  // Syntax: com2_Init(buffer, bufsize, qualifier);
002183  002422  // Usage1: com2_Init(mybuf, 20, 0);
002184  002423  // Usage2: com2_Init(mybuf, 20, ':');
002185  002424  // Notes : initialize a serial capture buffer for the comms input
002186  002425  //       : The program must declare a var array as a circular buffer.
002187  002426  //       : Usage1 declares a circular buffer which will continually
002188  002427  //       : buffer characters.
002189  002428  //       : Usage2 must receive ':' before any characters will
002190  002429  //       : accumulate in the buffer.
002191  002430        
002192  002431  func com3_Init("buf","bufsize","qualifier"), 0;
002193  002432  // Syntax: com3_Init(buffer, bufsize, qualifier);
002194  002433  // Usage1: com3_Init(mybuf, 20, 0);
002195  002434  // Usage2: com3_Init(mybuf, 20, ':');
002196  002435  // Notes : initialize a serial capture buffer for the comms input
002197  002436  //       : The program must declare a var array as a circular buffer.
002198  002437  //       : Usage1 declares a circular buffer which will continually
002199  002438  //       : buffer characters.
002200  002439  //       : Usage2 must receive ':' before any characters will
002201  002440  //       : accumulate in the buffer.
002202  002441        
002203  002442        
002204  002443  func serin(), 1;                // read a byte from primary com port COM0
002205  002444  // Syntax: serin();
002206  002445  // Usage : char := serin();
002207  002446  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
002208  002447  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002209  002448  //     : The default Baud Rate for COM0 is 115,200 bits per second or 115,200 baud.
002210  002449  //     : The baud rate can be changed under program control by using the setbaud(...)
002211  002450  //     : or the com_SetBaud(...) function.
002212  002451  //     : COM0 pins cannot be mapped, and are fixed as pins 42 and 33 (host adaptor / programming)
002213  002452  //     : serin may be buffered (refer to com_Init function above)
002214  002453  //     : Returns: -1 if no character is available
002215  002454  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002216  002455  //     : Returns: positive value 0 to 255 for a valid character received
002217  002456        
002218  002457  func serin1(), 1;
002219  002458  // Syntax: serinx();
002220  002459  // Usage : char := serinx();
002221  002460  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002222  002461  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002223  002462  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002224  002463  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002225  002464  //     : serinx may be buffered (refer to comx_Init function above)
002226  002465  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002227  002466  //     : Returns: -1 if no character is available
002228  002467  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002229  002468  //     : Returns: positive value 0 to 255 for a valid character received
002230  002469        
002231  002470  func serin2(), 1;
002232  002471  // Syntax: serinx();
002233  002472  // Usage : char := serinx();
002234  002473  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002235  002474  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002236  002475  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002237  002476  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002238  002477  //     : serinx may be buffered (refer to comx_Init function above)
002239  002478  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002240  002479  //     : Returns: -1 if no character is available
002241  002480  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002242  002481  //     : Returns: positive value 0 to 255 for a valid character received
002243  002482        
002244  002483  func serin3(), 1;
002245  002484  // Syntax: serinx();
002246  002485  // Usage : char := serinx();
002247  002486  // Notes : Receives a character from Serial Port COMx. The transmission format is:
002248  002487  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
002249  002488  //     : The default Baud Rate for COM1, COM2 and COM3 is 9600 baud.
002250  002489  //     : The baud rate can be changed under program control by using the com_SetBaud(...) function.
002251  002490  //     : serinx may be buffered (refer to comx_Init function above)
002252  002491  //     : serin RX pins must be mapped before use, (refer to COMx_RX_pin functions above)
002253  002492  //     : Returns: -1 if no character is available
002254  002493  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
002255  002494  //     : Returns: positive value 0 to 255 for a valid character received
002256  002495        
002257  002496  func serout("char"), 0;                // write a byte to COM0
002258  002497  // Syntax: serout1("char");
002259  002498  // Usage : serout1(ch);
002260  002499  // Notes : send character to COM0
002261  002500        
002262  002501  func serout1("char"), 0;
002263  002502  // Syntax: seroutx("char");
002264  002503  // Usage : serout1(ch);
002265  002504  // Notes : send character to COMx
002266  002505        
002267  002506  func serout2("char"), 0;
002268  002507  // Syntax: seroutx("char");
002269  002508  // Usage : serout1(ch);
002270  002509  // Notes : send character to COMx
002271  002510        
002272  002511  func serout3("char"), 0;
002273  002512  // Syntax: seroutx("char");
002274  002513  // Usage : serout1(ch);
002275  002514  // Notes : send character to COMx
002276  002515        
002277  002516  func com_Reset(), 0;                 // reset the comms receiver
002278  002517  // Syntax: com_Reset();
002279  002518  // Usage : com_Reset();
002280  002519  // Notes : reset comms to default polled mode
002281  002520        
002282  002521  func com1_Reset(), 0;
002283  002522  // Syntax: com_Reset();
002284  002523  // Usage : com_Reset();
002285  002524  // Notes : reset comms to default polled mode
002286  002525        
002287  002526  func com2_Reset(), 0;
002288  002527  // Syntax: com_Reset();
002289  002528  // Usage : com_Reset();
002290  002529  // Notes : reset comms to default polled mode
002291  002530        
002292  002531  func com3_Reset(), 0;
002293  002532  // Syntax: com_Reset();
002294  002533  // Usage : com_Reset();
002295  002534  // Notes : reset comms to default polled mode
002296  002535        
002297  002536  func com_Count(), 1;                // return count of characters in receive buffer
002298  002537  // Syntax: com_Count();
002299  002538  // Usage : arg := com_Count();
002300  002539  // Notes : return count of buffered characters in buffer attachment
002301  002540        
002302  002541  func com1_Count(), 1;
002303  002542  // Syntax: com_Count();
002304  002543  // Usage : arg := com_Count();
002305  002544  // Notes : return count of buffered characters in buffer attachment
002306  002545        
002307  002546  func com2_Count(), 1;
002308  002547  // Syntax: com_Count();
002309  002548  // Usage : arg := com_Count();
002310  002549  // Notes : return count of buffered characters in buffer attachment
002311  002550        
002312  002551  func com3_Count(), 1;
002313  002552  // Syntax: com_Count();
002314  002553  // Usage : arg := com_Count();
002315  002554  // Notes : return count of buffered characters in buffer attachment
002316  002555        
002317  002556  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
002318  002557  // Syntax: com_Full();
002319  002558  // Usage : if (com_Full() ,,,, go read buffer;
002320  002559  // Notes : return true if buffer full (not necessarily an error if
002321  002560  //       : buffer is sized to a packet size)
002322  002561        
002323  002562  func com1_Full(), 1;
002324  002563  // Syntax: com_Full();
002325  002564  // Usage : if (com_Full() ,,,, go read buffer;
002326  002565  // Notes : return true if buffer full (not necessarily an error if
002327  002566  //       : buffer is sized to a packet size)
002328  002567        
002329  002568  func com2_Full(), 1;
002330  002569  // Syntax: com_Full();
002331  002570  // Usage : if (com_Full() ,,,, go read buffer;
002332  002571  // Notes : return true if buffer full (not necessarily an error if
002333  002572  //       : buffer is sized to a packet size)
002334  002573        
002335  002574  func com3_Full(), 1;
002336  002575  // Syntax: com_Full();
002337  002576  // Usage : if (com_Full() ,,,, go read buffer;
002338  002577  // Notes : return true if buffer full (not necessarily an error if
002339  002578  //       : buffer is sized to a packet size)
002340  002579        
002341  002580  func com_Error(), 1;                // return comms errors comms error occurred
002342  002581  // Syntax: comx_Error();
002343  002582  // Usage : if (com_Error() ) ...... take recovery action;
002344  002583  // Notes : return non zero if any errors low level comms errors occured
002345  002584  // returns :
002346  002585  // bit0 = Receiver Overflow Error
002347  002586  // bit1 = Receiver Framing Error
002348  002587  // bit2 = Transmit Buffer Overflow
002349  002588        
002350  002589  func com1_Error(), 1;
002351  002590  // Syntax: comx_Error();
002352  002591  // Usage : if (com_Error() ) ...... take recovery action;
002353  002592  // Notes : return non zero if any errors low level comms errors occured
002354  002593  // returns :
002355  002594  // bit0 = Receiver Overflow Error
002356  002595  // bit1 = Receiver Framing Error
002357  002596  // bit2 = Transmit Buffer Overflow
002358  002597        
002359  002598  func com2_Error(), 1;
002360  002599  // Syntax: comx_Error();
002361  002600  // Usage : if (com_Error() ) ...... take recovery action;
002362  002601  // Notes : return non zero if any errors low level comms errors occured
002363  002602  // returns :
002364  002603  // bit0 = Receiver Overflow Error
002365  002604  // bit1 = Receiver Framing Error
002366  002605  // bit2 = Transmit Buffer Overflow
002367  002606        
002368  002607  func com3_Error(), 1;
002369  002608  // Syntax: comx_Error();
002370  002609  // Usage : if (com_Error() ) ...... take recovery action;
002371  002610  // Notes : return non zero if any errors low level comms errors occured
002372  002611  // returns :
002373  002612  // bit0 = Receiver Overflow Error
002374  002613  // bit1 = Receiver Framing Error
002375  002614  // bit2 = Transmit Buffer Overflow
002376  002615        
002377  002616  func com_Sync(), 1;                // returns TRUE if qualifier has been received
002378  002617  // Usage : comx_Sync();
002379  002618  // return true if sync character has been received in com_Init("...") mode
002380  002619        
002381  002620  func com1_Sync(), 1;
002382  002621  // Usage : comx_Sync();
002383  002622  // return true if sync character has been received in com_Init("...") mode
002384  002623        
002385  002624  func com2_Sync(), 1;
002386  002625  // Usage : comx_Sync();
002387  002626  // return true if sync character has been received in com_Init("...") mode
002388  002627        
002389  002628  func com3_Sync(), 1;
002390  002629  // Usage : comx_Sync();
002391  002630  // return true if sync character has been received in com_Init("...") mode
002392  002631        
002393  002632        
002394  002633  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
002395  002634  // Usage : com_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002396  002635  // Usage : com_TXbuffer(0, 0, 0);             // revert to non buffered service
002397  002636  // Notes : initialize a serial buffer for the COM0 output.
002398  002637  //       : The program must declare a var array as a circular buffer.
002399  002638  //       : When a TX buffer is declared for comms, the transmission
002400  002639  //       : of characters becomes non blocking. If the buffer has
002401  002640  //       : insufficient space to accept the next character from a
002402  002641  //       : serout_x() function, the excess characters will be ignored,
002403  002642  //       : and the com_Full_x() error will be asserted.   If the
002404  002643  //       : TX buffer is no longer required, just set the buffer pointer
002405  002644  //       : to zero, the size in this case doesnt matter and is ignored.
002406  002645  //       : The function can resize or reallocated to another buffer at
002407  002646  //       : any time. The buffer is flushed before any changes are made.
002408  002647  //       : "pin" designates an IO pin to control a bi-directional
002409  002648  //       : control device for half duplex mode. "pin" will go HI at the
002410  002649  //       : start of a transmission, and will return low after the final
002411  002650  //       : byte is transmitted. If not required, just set "pin" to zero.
002412  002651        
002413  002652  func com1_TXbuffer("buf", "bufsize", "pin"), 0;
002414  002653  // Usage : com1_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002415  002654  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
002416  002655  // Notes : initialize a serial buffer for the COM0 output.
002417  002656  //       : The program must declare a var array as a circular buffer.
002418  002657  //       : When a TX buffer is declared for comms, the transmission
002419  002658  //       : of characters becomes non blocking. If the buffer has
002420  002659  //       : insufficient space to accept the next character from a
002421  002660  //       : serout_x() function, the excess characters will be ignored,
002422  002661  //       : and the com_Full_x() error will be asserted.   If the
002423  002662  //       : TX buffer is no longer required, just set the buffer pointer
002424  002663  //       : to zero, the size in this case doesnt matter and is ignored.
002425  002664  //       : The function can resize or reallocated to another buffer at
002426  002665  //       : any time. The buffer is flushed before any changes are made.
002427  002666  //       : "pin" designates an IO pin to control a bi-directional
002428  002667  //       : control device for half duplex mode. "pin" will go HI at the
002429  002668  //       : start of a transmission, and will return low after the final
002430  002669  //       : byte is transmitted. If not required, just set "pin" to zero.
002431  002670        
002432  002671  func com2_TXbuffer("buf", "bufsize", "pin"), 0;
002433  002672  // Usage : com2_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002434  002673  // Usage : com2_TXbuffer(0, 0, 0);              // revert to non buffered service
002435  002674  // Notes : initialize a serial buffer for the COM0 output.
002436  002675  //       : The program must declare a var array as a circular buffer.
002437  002676  //       : When a TX buffer is declared for comms, the transmission
002438  002677  //       : of characters becomes non blocking. If the buffer has
002439  002678  //       : insufficient space to accept the next character from a
002440  002679  //       : serout_x() function, the excess characters will be ignored,
002441  002680  //       : and the com_Full_x() error will be asserted.   If the
002442  002681  //       : TX buffer is no longer required, just set the buffer pointer
002443  002682  //       : to zero, the size in this case doesnt matter and is ignored.
002444  002683  //       : The function can resize or reallocated to another buffer at
002445  002684  //       : any time. The buffer is flushed before any changes are made.
002446  002685  //       : "pin" designates an IO pin to control a bi-directional
002447  002686  //       : control device for half duplex mode. "pin" will go HI at the
002448  002687  //       : start of a transmission, and will return low after the final
002449  002688  //       : byte is transmitted. If not required, just set "pin" to zero.
002450  002689        
002451  002690  func com3_TXbuffer("buf", "bufsize", "pin"), 0;
002452  002691  // Usage : com3_TXbuffer(mybuf, 1024, PA0);    // set the TX buffer, using PA0 for turnaround
002453  002692  // Usage : com3_TXbuffer(0, 0, 0);              // revert to non buffered service
002454  002693  // Notes : initialize a serial buffer for the COM0 output.
002455  002694  //       : The program must declare a var array as a circular buffer.
002456  002695  //       : When a TX buffer is declared for comms, the transmission
002457  002696  //       : of characters becomes non blocking. If the buffer has
002458  002697  //       : insufficient space to accept the next character from a
002459  002698  //       : serout_x() function, the excess characters will be ignored,
002460  002699  //       : and the com_Full_x() error will be asserted.   If the
002461  002700  //       : TX buffer is no longer required, just set the buffer pointer
002462  002701  //       : to zero, the size in this case doesnt matter and is ignored.
002463  002702  //       : The function can resize or reallocated to another buffer at
002464  002703  //       : any time. The buffer is flushed before any changes are made.
002465  002704  //       : "pin" designates an IO pin to control a bi-directional
002466  002705  //       : control device for half duplex mode. "pin" will go HI at the
002467  002706  //       : start of a transmission, and will return low after the final
002468  002707  //       : byte is transmitted. If not required, just set "pin" to zero.
002469  002708        
002470  002709        
002471  002710  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
002472  002711  // Syntax: com_TXcount();
002473  002712  // Usage : arg := com_Count();
002474  002713  // Notes : return count of characters remaining in COM0 transmit buffer
002475  002714  //       : that was previously allocated with com_TXbuffer(...);
002476  002715        
002477  002716  func com1_TXcount(), 1;
002478  002717  // Syntax: com_TXcount();
002479  002718  // Usage : arg := com_Count();
002480  002719  // Notes : return count of characters remaining in COM0 transmit buffer
002481  002720  //       : that was previously allocated with com_TXbuffer(...);
002482  002721        
002483  002722  func com2_TXcount(), 1;
002484  002723  // Syntax: com_TXcount();
002485  002724  // Usage : arg := com_Count();
002486  002725  // Notes : return count of characters remaining in COM0 transmit buffer
002487  002726  //       : that was previously allocated with com_TXbuffer(...);
002488  002727        
002489  002728  func com3_TXcount(), 1;
002490  002729  // Syntax: com_TXcount();
002491  002730  // Usage : arg := com_Count();
002492  002731  // Notes : return count of characters remaining in COM0 transmit buffer
002493  002732  //       : that was previously allocated with com_TXbuffer(...);
002494  002733        
002495  002734  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
002496  002735  // Usage : arg := com_TXemptyEvent();
002497  002736  // Notes : If a comms TX buffer that was previously allocated with
002498  002737  //       : com_TXbuffer(...);, this function can be used to set up
002499  002738  //       : a function to be called when the COM0 TX buffer is empty.
002500  002739  //       : This is useful for either reloading the TX buffer, setting
002501  002740  //       : or clearing a pin to change the direction of eg a RS485
002502  002741  //       : line driver, or any other form of traffic control.
002503  002742  //       : The event function must not have any parameters.
002504  002743  //       : To disable the event, simply call com_TXemptyEvent(0).
002505  002744  //       : com_TXbuffer(...); also resets any active event.
002506  002745  //       : com_TXemptyEvent returns any previous event function
002507  002746  //       : address, or zero if there was no previous function.
002508  002747        
002509  002748  func com1_TXemptyEvent("function"), 1;
002510  002749  // Usage : arg := com1_TXemptyEvent();
002511  002750  // Notes : If a comms TX buffer that was previously allocated with
002512  002751  //       : com_TXbuffer(...);, this function can be used to set up
002513  002752  //       : a function to be called when the COM0 TX buffer is empty.
002514  002753  //       : This is useful for either reloading the TX buffer, setting
002515  002754  //       : or clearing a pin to change the direction of eg a RS485
002516  002755  //       : line driver, or any other form of traffic control.
002517  002756  //       : The event function must not have any parameters.
002518  002757  //       : To disable the event, simply call com_TXemptyEvent(0).
002519  002758  //       : com_TXbuffer(...); also resets any active event.
002520  002759  //       : com_TXemptyEvent returns any previous event function
002521  002760  //       : address, or zero if there was no previous function.
002522  002761        
002523  002762  func com2_TXemptyEvent("function"), 1;
002524  002763  // Usage : arg := com2_TXemptyEvent();
002525  002764  // Notes : If a comms TX buffer that was previously allocated with
002526  002765  //       : com_TXbuffer(...);, this function can be used to set up
002527  002766  //       : a function to be called when the COM0 TX buffer is empty.
002528  002767  //       : This is useful for either reloading the TX buffer, setting
002529  002768  //       : or clearing a pin to change the direction of eg a RS485
002530  002769  //       : line driver, or any other form of traffic control.
002531  002770  //       : The event function must not have any parameters.
002532  002771  //       : To disable the event, simply call com_TXemptyEvent(0).
002533  002772  //       : com_TXbuffer(...); also resets any active event.
002534  002773  //       : com_TXemptyEvent returns any previous event function
002535  002774  //       : address, or zero if there was no previous function.
002536  002775        
002537  002776  func com3_TXemptyEvent("function"), 1;
002538  002777  // Usage : arg := com3_TXemptyEvent();
002539  002778  // Notes : If a comms TX buffer that was previously allocated with
002540  002779  //       : com_TXbuffer(...);, this function can be used to set up
002541  002780  //       : a function to be called when the COM0 TX buffer is empty.
002542  002781  //       : This is useful for either reloading the TX buffer, setting
002543  002782  //       : or clearing a pin to change the direction of eg a RS485
002544  002783  //       : line driver, or any other form of traffic control.
002545  002784  //       : The event function must not have any parameters.
002546  002785  //       : To disable the event, simply call com_TXemptyEvent(0).
002547  002786  //       : com_TXbuffer(...); also resets any active event.
002548  002787  //       : com_TXemptyEvent returns any previous event function
002549  002788  //       : address, or zero if there was no previous function.
002550  002789        
002551  002790  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
002552  002791  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
002553  002792  // Notes : Expecting that a comms TX buffer that was previously allocated with
002554  002793  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002555  002794  //       : the buffer being sent wile it is being loaded. Mormally, when
002556  002795  //       : using buffered comms, the transmit process will begin
002557  002796  //       : immediately. This is often undesirable for 2 reasons,
002558  002797  //       : 1] you may wish to build a packet then send it later
002559  002798  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002560  002799  //       : as the FIFO buffer is constantly trying to empty while
002561  002800  //       : you are busy tring to fill it.
002562  002801  // return -1 if function is called illegally when TX comms is not buffered.
002563  002802  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002564  002803  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002565  002804        
002566  002805  func com1_TXbufferHold("state"), 1;
002567  002806  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
002568  002807  // Notes : Expecting that a comms TX buffer that was previously allocated with
002569  002808  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002570  002809  //       : the buffer being sent wile it is being loaded. Mormally, when
002571  002810  //       : using buffered comms, the transmit process will begin
002572  002811  //       : immediately. This is often undesirable for 2 reasons,
002573  002812  //       : 1] you may wish to build a packet then send it later
002574  002813  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002575  002814  //       : as the FIFO buffer is constantly trying to empty while
002576  002815  //       : you are busy tring to fill it.
002577  002816  // return -1 if function is called illegally when TX comms is not buffered.
002578  002817  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002579  002818  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002580  002819        
002581  002820  func com2_TXbufferHold("state"), 1;
002582  002821  // Usage : arg := com2_TXbufferHold(OFF);  // start sending the buffer
002583  002822  // Notes : Expecting that a comms TX buffer that was previously allocated with
002584  002823  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002585  002824  //       : the buffer being sent wile it is being loaded. Mormally, when
002586  002825  //       : using buffered comms, the transmit process will begin
002587  002826  //       : immediately. This is often undesirable for 2 reasons,
002588  002827  //       : 1] you may wish to build a packet then send it later
002589  002828  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002590  002829  //       : as the FIFO buffer is constantly trying to empty while
002591  002830  //       : you are busy tring to fill it.
002592  002831  // return -1 if function is called illegally when TX comms is not buffered.
002593  002832  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002594  002833  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002595  002834        
002596  002835  func com3_TXbufferHold("state"), 1;
002597  002836  // Usage : arg := com3_TXbufferHold(OFF);  // start sending the buffer
002598  002837  // Notes : Expecting that a comms TX buffer that was previously allocated with
002599  002838  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
002600  002839  //       : the buffer being sent wile it is being loaded. Mormally, when
002601  002840  //       : using buffered comms, the transmit process will begin
002602  002841  //       : immediately. This is often undesirable for 2 reasons,
002603  002842  //       : 1] you may wish to build a packet then send it later
002604  002843  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
002605  002844  //       : as the FIFO buffer is constantly trying to empty while
002606  002845  //       : you are busy tring to fill it.
002607  002846  // return -1 if function is called illegally when TX comms is not buffered.
002608  002847  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
002609  002848  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
002610  002849        
002611  002850  func com_Mode("8" ,"N", "1", "comport"), 1 ;
002612  002851  // Syntax   : comx_Mode("databits", "parity", "Stopbits", "comport");
002613  002852  // Usage    : comx_Mode(8, 'N', 1, COM0);                        // set COM0 to 8N1
002614  002853  // *Notes   : Data Bits must be 8
002615  002854  //          : Parity may be 'N', 'O' or 'E'.
002616  002855  //          : Stop Bits may be 1 or 2.
002617  002856  // returns true if mode was acceptable
002618  002857        
002619  002858  func com_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
002620  002859  // Syntax   : com_TXblock("buf", "bufsize");
002621  002860  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
002622  002861  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
002623  002862  //          : if a transmit buffer is active and space is available this function will return almost
002624  002863  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
002625  002864        
002626  002865  func com_RXblock("buf", "bufsize"), 0;                       // commence a block reception
002627  002866  // Syntax   : com_RXblock("buf", "bufsize");
002628  002867  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
002629  002868  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
002630  002869  //          : if a receive buffer is active and bufsize characters are available this function will return almost
002631  002870  //          : immediately otherwise it will block until until the required bytes are received.
002632  002871        
002633  002872  func __reserved30(), 0; // do not remove
002634  002873        
002635  002874  //------------------------------------------------------------------//
002636  002875  //        Function Prototypes for I2C
002637  002876  //------------------------------------------------------------------//
002638  002877  func I2C1_Open("speed", "SCLpin", "SDApin"), 1;
002639  002878  // Syntax : I2C1_Openx(speed, SCLpin, SDApin),
002640  002879  // Usage  : I2C1_Open(I2C_MED, PA2, PA3);
002641  002880  // Notes  : configures the required I2C module
002642  002881  //        : see 'I2C timing related constants' and 'pin constants'
002643  002882  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002644  002883  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002645  002884  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002646  002885  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002647  002886  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002648  002887  // Returns: True if successful
002649  002888        
002650  002889        
002651  002890  func I2C2_Open("speed", "SCLpin", "SDApin"), 1;
002652  002891  // Syntax : I2C2_Openx(speed, SCLpin, SDApin),
002653  002892  // Usage  : I2C2_Open(I2C_MED, PA2, PA3);
002654  002893  // Notes  : configures the required I2C module
002655  002894  //        : see 'I2C timing related constants' and 'pin constants'
002656  002895  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002657  002896  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002658  002897  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002659  002898  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002660  002899  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002661  002900  // Returns: True if successful
002662  002901        
002663  002902        
002664  002903  func I2C3_Open("speed", "SCLpin", "SDApin"), 1;
002665  002904  // Syntax : I2C3_Openx(speed, SCLpin, SDApin),
002666  002905  // Usage  : I2C3_Open(I2C_MED, PA2, PA3);
002667  002906  // Notes  : configures the required I2C module
002668  002907  //        : see 'I2C timing related constants' and 'pin constants'
002669  002908  //        : Pins that can be mapped to SCLpin and SDApin are PA0 to PA13
002670  002909  //        : Pins that can't be mapped to SCLpin or SDApin are PA14 and PA15
002671  002910  //        : For I2C speeds of I2C_MED and I2C_FAST SCLpin may be PA14 and SDApin may be PA15
002672  002911  //        : This is a 'special case' to support Slew rate control for I2C_MED and also properly support I2C_FAST
002673  002912  //        : For other pin combinations I2C_MED does not support Slew rate control and I2C_FAST does not fully run at 1Mhz
002674  002913  // Returns: True if successful
002675  002914        
002676  002915        
002677  002916  func I2C1_Close(), 0;
002678  002917  // Usage : I2C1_Close();
002679  002918  // Notes : disables the I2C1 module.
002680  002919        
002681  002920  func I2C2_Close(), 0;
002682  002921  // Usage : I2C2_Close();
002683  002922  // Notes : disables the I2C2 module.
002684  002923        
002685  002924  func I2C3_Close(), 0;
002686  002925  // Usage : I2C3_Close();
002687  002926  // Notes : disables the I2C3 module.
002688  002927        
002689  002928  func I2C1_Start(), 1;
002690  002929  // Syntax: I2C1_Start();
002691  002930  // Usage : I2C1_Start();
002692  002931  // Notes : generates a Start condition.
002693  002932  //       : returns true if successful (usually ignored)
002694  002933        
002695  002934  func I2C2_Start(), 1;
002696  002935  // Syntax: I2C2_Start();
002697  002936  // Usage : I2C2_Start();
002698  002937  // Notes : generates a Start condition.
002699  002938  //       : returns true if successful (usually ignored)
002700  002939        
002701  002940  func I2C3_Start(), 1;
002702  002941  // Syntax: I2C3_Start();
002703  002942  // Usage : I2C3_Start();
002704  002943  // Notes : generates a Start condition.
002705  002944  //       : returns true if successful (usually ignored)
002706  002945        
002707  002946  func I2C1_Stop(), 1;
002708  002947  // Syntax: I2C1_Stop();
002709  002948  // Usage : I2C1_Stop();
002710  002949  // Notes : generates a Stop condition.
002711  002950  //       : returns true if successful (usually ignored)
002712  002951        
002713  002952  func I2C2_Stop(), 1;
002714  002953  // Syntax: I2C2_Stop();
002715  002954  // Usage : I2C2_Stop();
002716  002955  // Notes : generates a Stop condition.
002717  002956  //       : returns true if successful (usually ignored)
002718  002957        
002719  002958  func I2C3_Stop(), 1;
002720  002959  // Syntax: I2C3_Stop();
002721  002960  // Usage : I2C3_Stop();
002722  002961  // Notes : generates a Stop condition.
002723  002962  //       : returns true if successful (usually ignored)
002724  002963        
002725  002964  func I2C1_Restart(), 1;
002726  002965  // Syntax: I2C1_Restart();
002727  002966  // Usage : I2C1_Restart();
002728  002967  // Notes : generates a Restart condition.
002729  002968  //       : returns true if successful (usually ignored)
002730  002969        
002731  002970  func I2C2_Restart(), 1;
002732  002971  // Syntax: I2C2_Restart();
002733  002972  // Usage : I2C2_Restart();
002734  002973  // Notes : generates a Restart condition.
002735  002974  //       : returns true if successful (usually ignored)
002736  002975        
002737  002976  func I2C3_Restart(), 1;
002738  002977  // Syntax: I2C3_Restart();
002739  002978  // Usage : I2C3_Restart();
002740  002979  // Notes : generates a Restart condition.
002741  002980  //       : returns true if successful (usually ignored)
002742  002981        
002743  002982  func I2C1_Read(), 1;
002744  002983  // Syntax: I2C1_Read();
002745  002984  // Usage : ch := I2C1_Read();
002746  002985  // Notes : reads a single byte from the I2C Bus.
002747  002986        
002748  002987  func I2C2_Read(), 1;
002749  002988  // Syntax: I2C2_Read();
002750  002989  // Usage : ch := I2C2_Read();
002751  002990  // Notes : reads a single byte from the I2C Bus.
002752  002991        
002753  002992  func I2C3_Read(), 1;
002754  002993  // Syntax: I2C3_Read();
002755  002994  // Usage : ch := I2C3_Read();
002756  002995  // Notes : reads a single byte from the I2C Bus.
002757  002996        
002758  002997  func I2C1_Write("byte"), 1;
002759  002998  // Syntax: I2C1_Write(byte);
002760  002999  // Usage : r := I2C1_Write(ch);
002761  003000  // Notes : is used to write a byte to the I2C bus.
002762  003001  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002763  003002        
002764  003003  func I2C2_Write("byte"), 1;
002765  003004  // Syntax: I2C2_Write(byte);
002766  003005  // Usage : r := I2C2_Write(ch);
002767  003006  // Notes : is used to write a byte to the I2C bus.
002768  003007  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002769  003008        
002770  003009  func I2C3_Write("byte"), 1;
002771  003010  // Syntax: I2C3_Write(byte);
002772  003011  // Usage : r := I2C3_Write(ch);
002773  003012  // Notes : is used to write a byte to the I2C bus.
002774  003013  //       : Returns 0 if failed, 1 if no ack, 2 if ack
002775  003014        
002776  003015  func I2C1_Ack(), 0;
002777  003016  // Syntax: I2C1_Ack();
002778  003017  // Usage : I2C1_Ack();
002779  003018  // Notes : generates the acknowledge condition.
002780  003019        
002781  003020  func I2C2_Ack(), 0;
002782  003021  // Syntax: I2C2_Ack();
002783  003022  // Usage : I2C2_Ack();
002784  003023  // Notes : generates the acknowledge condition.
002785  003024        
002786  003025  func I2C3_Ack(), 0;
002787  003026  // Syntax: I2C3_Ack();
002788  003027  // Usage : I2C3_Ack();
002789  003028  // Notes : generates the acknowledge condition.
002790  003029        
002791  003030  func I2C1_Nack(), 0;
002792  003031  // Syntax: I2C1_Nack();
002793  003032  // Usage : I2C1_Nack();
002794  003033  // Notes : generates the negative acknowledge condition.
002795  003034        
002796  003035  func I2C2_Nack(), 0;
002797  003036  // Syntax: I2C2_Nack();
002798  003037  // Usage : I2C2_Nack();
002799  003038  // Notes : generates the negative acknowledge condition.
002800  003039        
002801  003040  func I2C3_Nack(), 0;
002802  003041  // Syntax: I2C3_Nack();
002803  003042  // Usage : I2C3_Nack();
002804  003043  // Notes : generates the negative acknowledge condition.
002805  003044        
002806  003045  func I2C1_AckStatus(), 1;
002807  003046  // Syntax: I2C1_AckStatus();
002808  003047  // Usage : r := I2C1_AckStatus();
002809  003048  // Notes : returns the ACK status from the device.
002810  003049        
002811  003050  func I2C2_AckStatus(), 1;
002812  003051  // Syntax: I2C2_AckStatus();
002813  003052  // Usage : r := I2C2_AckStatus();
002814  003053  // Notes : returns the ACK status from the device.
002815  003054        
002816  003055  func I2C3_AckStatus(), 1;
002817  003056  // Syntax: I2C3_AckStatus();
002818  003057  // Usage : r := I2C3_AckStatus();
002819  003058  // Notes : returns the ACK status from the device.
002820  003059        
002821  003060  func I2C1_AckPoll("control"), 1;
002822  003061  // Syntax: I2C1_AckPoll();
002823  003062  // Usage : r := I2C1_AckPoll(0xA0);
002824  003063  // Notes : waits for a device to return from ACK polling.
002825  003064        
002826  003065  func I2C2_AckPoll("control"), 1;
002827  003066  // Syntax: I2C2_AckPoll();
002828  003067  // Usage : r := I2C2_AckPoll(0xA0);
002829  003068  // Notes : waits for a device to return from ACK polling.
002830  003069        
002831  003070  func I2C3_AckPoll("control"), 1;
002832  003071  // Syntax: I2C3_AckPoll();
002833  003072  // Usage : r := I2C3_AckPoll(0xA0);
002834  003073  // Notes : waits for a device to return from ACK polling.
002835  003074        
002836  003075  func I2C1_Idle(), 1;
002837  003076  // Syntax : I2C1_Idle();
002838  003077  // Usage  : r := I2C1_Idle();
002839  003078  // Notes  : waits until the I2C Bus is Inactive.
002840  003079  //        : Times out if bus not idle within 1 second
002841  003080  // Returns: TRUE if successful, else failed (timed out)
002842  003081        
002843  003082  func I2C2_Idle(), 1;
002844  003083  // Syntax : I2C2_Idle();
002845  003084  // Usage  : r := I2C2_Idle();
002846  003085  // Notes  : waits until the I2C Bus is Inactive.
002847  003086  //        : Times out if bus not idle within 1 second
002848  003087  // Returns: TRUE if successful, else failed (timed out)
002849  003088        
002850  003089  func I2C3_Idle(), 1;
002851  003090  // Syntax : I2C3_Idle();
002852  003091  // Usage  : r := I2C3_Idle();
002853  003092  // Notes  : waits until the I2C Bus is Inactive.
002854  003093  //        : Times out if bus not idle within 1 second
002855  003094  // Returns: TRUE if successful, else failed (timed out)
002856  003095        
002857  003096        
002858  003097  func I2C1_Gets("buffer", "size"), 1;
002859  003098  // Syntax: I2C1_Gets("buffer", "size");
002860  003099  // Usage : r := I2C1_Gets(mybuf, 16);
002861  003100  // Notes : only reads up to "size" characters into "buffer"
002862  003101  //       : Reads up to asciiz terminator including terminator
002863  003102        
002864  003103  func I2C2_Gets("buffer", "size"), 1;
002865  003104  // Syntax: I2C2_Gets("buffer", "size");
002866  003105  // Usage : r := I2C2_Gets(mybuf, 16);
002867  003106  // Notes : only reads up to "size" characters into "buffer"
002868  003107  //       : Reads up to asciiz terminator including terminator
002869  003108        
002870  003109  func I2C3_Gets("buffer", "size"), 1;
002871  003110  // Syntax: I2C3_Gets("buffer", "size");
002872  003111  // Usage : r := I2C3_Gets(mybuf, 16);
002873  003112  // Notes : only reads up to "size" characters into "buffer"
002874  003113  //       : Reads up to asciiz terminator including terminator
002875  003114        
002876  003115  func I2C1_Getn("buffer", "size"), 1;
002877  003116  // Syntax: I2C1_Gets("buffer", "size");
002878  003117  // Usage : r := I2C1_Gets(mybuf, 16);
002879  003118  // Notes : reads "size" bytes into "buffer"
002880  003119  //       :
002881  003120        
002882  003121  func I2C2_Getn("buffer", "size"), 1;
002883  003122  // Syntax: I2C2_Gets("buffer", "size");
002884  003123  // Usage : r := I2C2_Gets(mybuf, 16);
002885  003124  // Notes : reads "size" bytes into "buffer"
002886  003125  //       :
002887  003126        
002888  003127  func I2C3_Getn("buffer", "size"), 1;
002889  003128  // Syntax: I2C3_Gets("buffer", "size");
002890  003129  // Usage : r := I2C3_Gets(mybuf, 16);
002891  003130  // Notes : reads "size" bytes into "buffer"
002892  003131  //       :
002893  003132        
002894  003133  func I2C1_Puts("buffer"), 1;
002895  003134  // Syntax: I2C1_Puts("buffer");
002896  003135  // Usage : r := I2C1_Puts(mybuf);
002897  003136  // Notes : writes an asciiz string to the I2C device
002898  003137  //       : returns count of characters written
002899  003138        
002900  003139  func I2C2_Puts("buffer"), 1;
002901  003140  // Syntax: I2C2_Puts("buffer");
002902  003141  // Usage : r := I2C2_Puts(mybuf);
002903  003142  // Notes : writes an asciiz string to the I2C device
002904  003143  //       : returns count of characters written
002905  003144        
002906  003145  func I2C3_Puts("buffer"), 1;
002907  003146  // Syntax: I2C3_Puts("buffer");
002908  003147  // Usage : r := I2C3_Puts(mybuf);
002909  003148  // Notes : writes an asciiz string to the I2C device
002910  003149  //       : returns count of characters written
002911  003150        
002912  003151  func I2C1_Putn("buffer", "count"), 1;
002913  003152  // Syntax: I2C1_Putn("buffer","count");
002914  003153  // Usage : r := I2C1_Puts(mybuf,10);
002915  003154  // Notes : writes up to "size" bytes to the I2C device
002916  003155  //       : returns number of bytes written
002917  003156        
002918  003157  func I2C2_Putn("buffer", "count"), 1;
002919  003158  // Syntax: I2C2_Putn("buffer","count");
002920  003159  // Usage : r := I2C2_Puts(mybuf,10);
002921  003160  // Notes : writes up to "size" bytes to the I2C device
002922  003161  //       : returns number of bytes written
002923  003162        
002924  003163  func I2C3_Putn("buffer", "count"), 1;
002925  003164  // Syntax: I2C3_Putn("buffer","count");
002926  003165  // Usage : r := I2C3_Puts(mybuf,10);
002927  003166  // Notes : writes up to "size" bytes to the I2C device
002928  003167  //       : returns number of bytes written
002929  003168        
002930  003169        
002931  003170  func spi_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002932  003171  // Syntax   : spi_ReadBlock("buf", "bufsize");
002933  003172  // Usage    : spi_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002934  003173  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002935  003174        
002936  003175  func spi1_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002937  003176  // Syntax   : spi1_ReadBlock("buf", "bufsize");
002938  003177  // Usage    : spi1_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002939  003178  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002940  003179        
002941  003180  func spi2_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002942  003181  // Syntax   : spi2_ReadBlock("buf", "bufsize");
002943  003182  // Usage    : spi2_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002944  003183  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002945  003184        
002946  003185  func spi3_ReadBlock("buf", "bufsize"), 0;                       // commence a block reception
002947  003186  // Syntax   : spi3_ReadBlock("buf", "bufsize");
002948  003187  // Usage    : spi3_ReadBlock(mybuf, 30);                        // point to the buffer and read 30 characters
002949  003188  // *Notes   : Bufsize bytes are read from the SPI port to the string pointer "buf".
002950  003189        
002951  003190  // I2C timing related constants
002952  003191  #CONST
002953  003199  #END
002954  003200        
002955  003201        
002956  003202        
002957  003203  //------------------------------------------------------------------//
002958  003204  // Direct uSD (SPI0) card SPI functions                             //
002959  003205  //------------------------------------------------------------------//
002960  003206  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
002961  003207  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
002962  003208  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
002963  003209  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
002964  003210                                                  //
002965  003211        
002966  003212  //------------------------------------------------------------------//
002967  003213  // Function prototypes for SPI1, SPI2 and SPI3                      //
002968  003214  //------------------------------------------------------------------//
002969  003215  func SPI1_SDO_pin("pin"), 1;                // select the hardware pin for SPI1 transmit line
002970  003216  // Syntax: SPI_SDO_pin(pin);
002971  003217  // Usage : SPI_SDO_pin(PA1); // set SPI SDO to PA1 pin
002972  003218  // Notes : Select the hardware pin for SPIx transmit line.
002973  003219  //       : Note that multiple pins can be connected simmultaneously.
002974  003220  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002975  003221  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002976  003222  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002977  003223  //       : The pin is automatically set to an output.
002978  003224  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002979  003225        
002980  003226  func SPI2_SDO_pin("pin"), 1;                // select the hardware pin for SPI2 transmit line
002981  003227  // Syntax: SPI2_SDO_pin(pin);
002982  003228  // Usage : SPI2_SDO_pin(PA1); // set SPI2 SDO to PA1 pin
002983  003229  // Notes : Select the hardware pin for SPIx transmit line.
002984  003230  //       : Note that multiple pins can be connected simmultaneously.
002985  003231  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002986  003232  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002987  003233  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002988  003234  //       : The pin is automatically set to an output.
002989  003235  //       : Returns: Returns TRUE if function succeeded (usually ignored)
002990  003236        
002991  003237  func SPI3_SDO_pin("pin"), 1;                // select the hardware pin for SPI3 transmit line
002992  003238  // Syntax: SPI3_SDO_pin(pin);
002993  003239  // Usage : SPI3_SDO_pin(PA1); // set SPI3 SDO to PA1 pin
002994  003240  // Notes : Select the hardware pin for SPIx transmit line.
002995  003241  //       : Note that multiple pins can be connected simmultaneously.
002996  003242  //       : Pins that can be mapped to SPIx TX are PA1, PA3 to PA9, PA12 or PA13
002997  003243  //       : Pins that can't be mapped to SPIx SDO are PA0, PA2, PA10, PA11, PA14 and PA15
002998  003244  //       : If the pin argument is 0, SPIx SDO is disconnected from all pins.
002999  003245  //       : The pin is automatically set to an output.
003000  003246  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003001  003247        
003002  003248  func SPI1_SDI_pin("pin"), 1;                // select the hardware pin for SPI1 receive line
003003  003249  // Syntax: SPI1_SDI_pin(pin);
003004  003250  // Usage : SPI1_SDI_pin(PA3); // set SPI1 SDI to PA3 pin
003005  003251  // Notes : Selects the hardware pin for SPIx receive line.
003006  003252  //       : Note that only a single pin can be mapped to SPI SDI.
003007  003253  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003008  003254  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003009  003255  //       : If the pin argument is 0 the function has no effect
003010  003256  //       : The pin is automatically set to an input.
003011  003257  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003012  003258  //       : it is necessary to configure the SDI pin first, eg
003013  003259  //       :     SPI1_SDI_pin(PA3);     // configure SPI1 SDI to PA3 (this disconnects anything else)
003014  003260  //       :     SPI1_SDO_pin(PA3));    // configure SPI1 SDO to PA3
003015  003261  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003016  003262        
003017  003263  func SPI2_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003018  003264  // Syntax: SPI2_SDI_pin(pin);
003019  003265  // Usage : SPI2_SDI_pin(PA3); // set SPI2 SDI to PA3 pin
003020  003266  // Notes : Selects the hardware pin for SPIx receive line.
003021  003267  //       : Note that only a single pin can be mapped to SPI SDI.
003022  003268  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003023  003269  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003024  003270  //       : If the pin argument is 0 the function has no effect
003025  003271  //       : The pin is automatically set to an input.
003026  003272  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003027  003273  //       : it is necessary to configure the SDI pin first, eg
003028  003274  //       :     SPI2_SDI_pin(PA3);     // configure SPI2 SDI to PA3 (this disconnects anything else)
003029  003275  //       :     SPI2_SDO_pin(PA3));    // configure SPI2 SDO to PA3
003030  003276  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003031  003277        
003032  003278  func SPI3_SDI_pin("pin"), 1;                // select the hardware pin for SPI2 receive line
003033  003279  // Syntax: SPI3_SDI_pin(pin);
003034  003280  // Usage : SPI3_SDI_pin(PA3); // set SPI3 SDI to PA3 pin
003035  003281  // Notes : Selects the hardware pin for SPIx receive line.
003036  003282  //       : Note that only a single pin can be mapped to SPI SDI.
003037  003283  //       : Pins that can be mapped to SPIx SDI are PA0 to PA13
003038  003284  //       : Pins that can't be mapped to SPIx SDI are PA14 and PA15
003039  003285  //       : If the pin argument is 0 the function has no effect
003040  003286  //       : The pin is automatically set to an input.
003041  003287  //       : If the SPIx SDI pin is set to same pin as SPIx SDO pin (eg for a loopback check)
003042  003288  //       : it is necessary to configure the SDI pin first, eg
003043  003289  //       :     SPI3_SDI_pin(PA3);     // configure SPI3 SDI to PA3 (this disconnects anything else)
003044  003290  //       :     SPI3_SDO_pin(PA3));    // configure SPI3 SDO to PA3
003045  003291  //       : Returns: Returns TRUE if function succeeded (usually ignored)
003046  003292        
003047  003293  func SPI1_SCK_pin("pin"), 1;                // select the hardware pin for SPI1 clock line
003048  003294  // Syntax: SPI1_SCK_pin(pin);
003049  003295  // Usage : SPI1_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003050  003296  // Notes : Selects the hardware pin for SPI clock line.
003051  003297  //       : Note that only a single pin should be mapped to spi SCK.
003052  003298  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003053  003299  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003054  003300  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003055  003301  //       : The pin is automatically set to an output.
003056  003302  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003057  003303        
003058  003304  func SPI2_SCK_pin("pin"), 1;                // select the hardware pin for SPI2 clock line
003059  003305  // Syntax: SPI2_SCK_pin(pin);
003060  003306  // Usage : SPI2_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003061  003307  // Notes : Selects the hardware pin for SPI clock line.
003062  003308  //       : Note that only a single pin should be mapped to spi SCK.
003063  003309  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003064  003310  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003065  003311  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003066  003312  //       : The pin is automatically set to an output.
003067  003313  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003068  003314        
003069  003315  func SPI3_SCK_pin("pin"), 1;                // select the hardware pin for SPI3 clock line
003070  003316  // Syntax: SPI3_SCK_pin(pin);
003071  003317  // Usage : SPI3_SCK_pin(PA0); // set SPI1 SCK to PA0 pin
003072  003318  // Notes : Selects the hardware pin for SPI clock line.
003073  003319  //       : Note that only a single pin should be mapped to spi SCK.
003074  003320  //       : Pins that can be mapped to SPIx SCK are PA1, PA3 to PA9, PA12 or PA13
003075  003321  //       : Pins that can't be mapped to SPIx SCK are PA0, PA2, PA10, PA11, PA14 and PA15
003076  003322  //       : If the pin argument is 0 the SPIx SCK pin is disconnected
003077  003323  //       : The pin is automatically set to an output.
003078  003324  //       : Returns: Returns TRUE if finction succeeded (usually ignored)
003079  003325        
003080  003326        
003081  003327  func SPI1_Init("speed","mode"), 1;              // set the SPI1 port
003082  003328  func SPI2_Init("speed","mode"), 1;              // set the SPI2 port
003083  003329  func SPI3_Init("speed","mode"), 1;              // set the SPI3 port
003084  003330        
003085  003331        
003086  003332  //------------------------------------------------------------------------------
003087  003333  // Constants for SPI1, SPI2 an SPI3 "mode"
003088  003334  //------------------------------------------------------------------------------
003089  003335  #CONST
003090  003352  #END
003091  003353        
003092  003354  //------------------------------------------------------------------------------
003093  003355  // Constants for SPI1, SPI2 an SPI3 "speed"
003094  003356  //------------------------------------------------------------------------------
003095  003357  #CONST
003096  003374  #END
003097  003375        
003098  003376        
003099  003377  func SPI1_Read(), 1;                                 // read a raw byte from SPI1
003100  003378  func SPI2_Read(), 1;                                 // read a raw byte from SPI2
003101  003379  func SPI3_Read(), 1;                                 // read a raw byte from SPI3
003102  003380        
003103  003381  func SPI1_Write("byte"), 1;                          // write a raw byte to SPI1
003104  003382  func SPI2_Write("byte"), 1;                          // write a raw byte to SPI2
003105  003383  func SPI3_Write("byte"), 1;                          // write a raw byte to SPI3
003106  003384        
003107  003385  func spi_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003108  003386  // Syntax   : spi_WriteBlock("buf", "bufsize");
003109  003387  // Usage    : spi_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003110  003388  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003111  003389        
003112  003390  func spi1_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003113  003391  // Syntax   : spi1_WriteBlock("buf", "bufsize");
003114  003392  // Usage    : spi1_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003115  003393  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003116  003394        
003117  003395  func spi2_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003118  003396  // Syntax   : spi2_WriteBlock("buf", "bufsize");
003119  003397  // Usage    : spi2_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003120  003398  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003121  003399        
003122  003400  func spi3_WriteBlock("buf", "bufsize"), 0;                       // commence a block write
003123  003401  // Syntax   : spi3_WriteBlock("buf", "bufsize");
003124  003402  // Usage    : spi3_WriteBlock(mybuf, 30);                         // point to the Write buffer and send 30 characters
003125  003403  // *Notes   : Bufsize bytes are transmitted to the SPI port from the string pointer "buf".
003126  003404        
003127  003405  //------------------------------------------------------------------//
003128  003406  // Display Access                                                   //
003129  003407  //------------------------------------------------------------------//
003130  003408  func disp_SetReg("register", "data"), 0;
003131  003409  // Syntax: display_SetReg(register, data);
003132  003410  // Usage : display_SetReg(arg1, arg2);
003133  003411  // Notes : Sets uLCD specific display driver registers. Refer
003134  003412  //       : to appropriate display driver data sheet.
003135  003413        
003136  003414  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
003137  003415  // Syntax: disp_setGRAM(x1, y1, x2, y2);
003138  003416  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
003139  003417  // Notes : Prepares the GRAM area for user access.
003140  003418  //       : Data can now be written with disp_GRAM.
003141  003419  //       : GRAM will be set accordingly for the correct screen mode.
003142  003420  //       : the LO word of the 32 bit pixel count is returned. This is
003143  003421  //       : usually all that is needed unlse GRAM area exceeds 256^2
003144  003422  //       : A copy of the 32bit value can be found in
003145  003423  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
003146  003424        
003147  003425  func disp_WrGRAM("colour"), 0;
003148  003426  // Syntax: display_WrGRAM(colour);
003149  003427  // Usage : display_WrGRAM(arg);
003150  003428  // Notes : Data can be written to the GRAM consecutively using
003151  003429  //       : this function once the GRAM access window has been setup.
003152  003430        
003153  003431  func disp_WriteControl("value"), 0;             // write a control byte to the display
003154  003432        
003155  003433  func disp_WriteWord("value"), 0;                // write a word to the display
003156  003434        
003157  003435        
003158  003436  func disp_ReadWord(), 1;                        // read a word from the display
003159  003437  // Syntax: disp_ReadWord();
003160  003438  // Usage : x:=disp_ReadWord();
003161  003439  // Notes : Read a word from the controller
003162  003440  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
003163  003441  //       : print(disp_ReadWord());        // print ID
003164  003442  //       : (Many displays are write only)
003165  003443        
003166  003444        
003167  003445  // NB only available on certain displays, check individual data sheets
003168  003446  func sys_StoreTouchCalibration(), 1;
003169  003447  // Syntax: sys_StoreTouchCalibration();
003170  003448  // Usage : r := sys_StoreTouchCalibration();
003171  003449  // Notes : Store the touch calibration values in non-volatile memory.
003172  003450  //       : Returns true if the values have been accepted and stored,
003173  003451  //       : else returns false if write could not be performed, or
003174  003452  //       : touch calibration values are improbable.
003175  003453  //       : The values that are stored are obtained from:-
003176  003454  //       : TOUCH_XMINCAL             78  // touch calibration value
003177  003455  //       : TOUCH_YMINCAL             79  // touch calibration value
003178  003456  //       : TOUCH_XMAXCAL             80  // touch calibration value
003179  003457  //       : TOUCH_YMAXCAL             81  // touch calibration value
003180  003458  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
003181  003459  //       : This function is not supported on uVGA, Capacitive touch
003182  003460  //       : and 4.3" resistive touch modules.
003183  003461        
003184  003462  // NB only available on certain displays, check individual data sheets
003185  003463  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
003186  003464  // Syntax: disp_Sync(line);
003187  003465  // Usage : disp_Sync(480);
003188  003466  // Notes : Waits till the hardware gets to a certain line.
003189  003467  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
003190  003468  //       : Some experimentation may be needed to find an optimum line for disp_Sync
003191  003469  //       : depending on the graphics operation. The higher the value, the slower
003192  003470  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
003193  003471  //       : within the vertical retrace period) where it will just 'hang up' stopping the
003194  003472  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
003195  003473  //       : be slowest (as its actually right at the end of the blanking period) and 508
003196  003474  //       : will cause a hangup situation as it is above the highes scanline value.
003197  003475  //       : Currently, this function is only supported on displays with SSD1963 driver.
003198  003476        
003199  003477  func disp_Init(), 0;                           // initialize display with required tables. New in v0.7
003200  003478  // Syntax: disp_Init();                        New in v0.7
003201  003479  // Usage : disp_Init();
003202  003480  // Notes : Initialises or reinitialises the display.
003203  003481  //       : Normally used after restoration of peripheral power
003204  003482  //       : and after DeepSleep.
003205  003483        
003206  003484  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v0.7
003207  003485  // Syntax: disp_Disconnect();                  New in v0.7
003208  003486  // Usage : disp_Disconnect();
003209  003487  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
003210  003488  //       : its lowest possible power consumption. Use after disabling peripheral power
003211  003489  //       : to ensure the minimal power usage by the display.
003212  003490  //       : disp_Init() should be used to reinitialise the display.
003213  003491        
003214  003492  func disp_BlitPixelsFromCOM0(), 0;                     // Writes current GRAM window pixels to the display from the COM port
003215  003493  // Syntax: disp_BlitPixelsFromCOM0();                  New in v1.1
003216  003494  // Usage : disp_BlitPixelsFromCOM0();
003217  003495  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
003218  003496  //       : display from the specified com port.
003219  003497        
003220  003498  func __reserved42(), 0; // do not remove
003221  003499        
003222  003500        
003223  003501  //------------------------------------------------------------------//
003224  003502  //        Image Control Function Prototypes                         //
003225  003503  //------------------------------------------------------------------//
003226  003504  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
003227  003505  // Syntax: img_SetPosition(handle, index, xpos, ypos);
003228  003506  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
003229  003507  // Notes : set the position where the image will be displayed
003230  003508  //       : returns true if index was ok and function was successful.
003231  003509  //       : you may turn off an image so when img_Refresh is called,
003232  003510  //       : the image will not be shown
003233  003511        
003234  003512  func img_Enable("handle", "index"), 1;
003235  003513  // Syntax: img_Enable(handle, index);
003236  003514  // Usage : r := img_Enable(hImageList, imagenum);
003237  003515  // Notes : enable image in a image list
003238  003516  //       : returns true if index was ok and function was successful.
003239  003517  //       : this is the default state so when img_Refresh is called,
003240  003518  //       : all the images in the list will be shown
003241  003519  //       : if index is set to -1, all of the images are enabled
003242  003520        
003243  003521  func img_Disable("handle", "index"), 1;
003244  003522  // Syntax: img_Disable(handle, index);
003245  003523  // Usage : r := img_Disable(hImageList, imagenum);
003246  003524  // Notes : disable image in a image list
003247  003525  //       : returns true if index was ok and function was successful.
003248  003526  //       : you must turn off an image so when img_Refresh is called,
003249  003527  //       : the image will not be shown.
003250  003528  //       : if index is set to -1, all of the images are disabled
003251  003529        
003252  003530        
003253  003531  func img_Darken("handle", "index"), 1;
003254  003532  // Syntax: img_Darken(handle, index);
003255  003533  // Usage : r := img_Darken(hImageList, imagenum);
003256  003534  // Notes : darken image in a image list
003257  003535  //       : returns true if index was ok and function was successful.
003258  003536  //       : if index is set to -1, all of the images are darkened
003259  003537  //       : NB:- this feature will only work for the next refresh, then
003260  003538  //       : the image reverts back to normal when displayed again.
003261  003539        
003262  003540        
003263  003541  func img_Lighten("handle", "index"), 1;
003264  003542  // Syntax: img_Lighten(handle, index);
003265  003543  // Usage : r := img_Lighten(hImageList, imagenum);
003266  003544  // Notes : lighten image in a image list
003267  003545  //       : returns true if index was ok and function was successful.
003268  003546  //       : if index is set to -1, all of the images are lightened
003269  003547  //       : NB:- this feature will only work for the next refresh, then
003270  003548  //       : the image reverts back to normal when displayed again.
003271  003549        
003272  003550  func img_SetWord("handle", "index", "offset", "word"), 1;
003273  003551  // Syntax: img_SetWord(handle, index, offset, word);
003274  003552  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
003275  003553  // Notes : set specified word (0-7) in a image entry
003276  003554  //       : returns TRUE if successful, return value usually ignored.
003277  003555        
003278  003556  func img_GetWord("handle", "index", "offset"), 1;
003279  003557  // Syntax: myvar := img_GetWord("handle", "index", "offset");
003280  003558  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
003281  003559  // Notes : returns specified word (0-14) from an image entry
003282  003560  //       : refer to image control entry offsets.
003283  003561        
003284  003562  func img_Show("handle", "index"), 1;
003285  003563  // Syntax: img_Show(handle, index);
003286  003564  // Usage : display image entry (regardless of enable/disable)
003287  003565  //       : returns TRUE if successful, return value usually ignored.
003288  003566        
003289  003567  func img_SetAttributes("handle", "index","value"), 1;
003290  003568  // Syntax: img_SetAttributes("handle", "index","offset");
003291  003569  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
003292  003570  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
003293  003571  //       : of an image control entry. "value" refers to various bits in
003294  003572  //       : the image control entry (see image attribute flags).
003295  003573  //       : A '1' bit in the "value" field SETS the respective bit
003296  003574  //       : in the IMAGE_FLAGS field of the image control entry.
003297  003575  //       : returns TRUE if successful, return value usually ignored.
003298  003576        
003299  003577  func img_ClearAttributes("handle", "index","value"), 1;
003300  003578  // Syntax: img_ClearAttributes("handle", "index","offset");
003301  003579  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
003302  003580  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
003303  003581  //       : of an image control entry. "value" refers to various bits in
003304  003582  //       : the image control entry (see image attribute flags)
003305  003583  //       : a '1' bit in the "value" field CLEARS the respective bit
003306  003584  //       : in the IMAGE_FLAGS field of the image control entry.
003307  003585  //       : returns TRUE if successful, return value usually ignored.
003308  003586        
003309  003587  func img_Touched("handle", "index"), 1;
003310  003588  // Syntax: r := img_Touched(handle, index);
003311  003589  // Usage : img_Touched(hndl, 17);
003312  003590  //       : returns -1 if image not touched, or returns index
003313  003591  // Notes : if index is passed as -1, function tests all images,
003314  003592  //       : and returns -1 if image not touched, or returns index.
003315  003593        
003316  003594        
003317  003595  func img_SelectReadPosition("handle", "index", "frame", "x", "y"), 1;
003318  003596  // Syntax: img_SelectReadPosition(handle, index, frame, xpos, ypos);
003319  003597  // Usage : r := img_SelectReadPosition(hImageList, imagenum, frame, x, y);
003320  003598  // Notes : set a position in an image control for sequential reading
003321  003599  //       : of pixels from the uSD card (fat16 or raw modes supported)
003322  003600  //       : No image window area is set, the image will not be shown
003323  003601  //       : This function provides a means of preparing to load an image,
003324  003602  //       : or part of an image, to an array. (see img_SequentialRead)
003325  003603  //Returns: returns true if index was ok and function was successful.
003326  003604        
003327  003605        
003328  003606  func img_SequentialRead("count", "ptr"), 1;  // read pixels from selected read position of an image
003329  003607  // Syntax: img_SequentialRead(count, ptr);
003330  003608  // Usage1: r := img_SequentialRead(imgwidth, myArray);    // read 1 line from image control to array
003331  003609  // Usage2: r := img_SequentialRead(123, 0);            // skip 123 words from sequential stream
003332  003610  // Usage3: r := img_SequentialRead(20, 1);            // write 20 pixels to current GRAM position from stream
003333  003611  // Notes : once a position has ben set with the img_SelectReadPosition function,
003334  003612  //       : this function can then used for sequential reading of pixels from
003335  003613  //       : image storage.
003336  003614  //       : if "ptr" is 0, "count" pixels from the stream are simply skipped.
003337  003615  //       : if "ptr" is 1, "count" pixels are written to the GRAM area,
003338  003616  //       : else "ptr" must point to a valid array that is at least
003339  003617  //       : the size of "count".
003340  003618  //       : or part of an image, to an array. (see img_SequentialRead)
003341  003619  //       : returns TRUE if function succeded.
003342  003620        
003343  003621  func __reserved43(), 0; // do not remove
003344  003622  func __reserved44(), 0; // do not remove
003345  003623  func __reserved45(), 0; // do not remove
003346  003624  func __reserved46(), 0; // do not remove
003347  003625        
003348  003626  // image control header offsets
003349  003627  #CONST
003350  003634  #END
003351  003635        
003352  003636  // image control entry offsets
003353  003637  #CONST
003354  003652  #END
003355  003653        
003356  003654  // image attribute flags (in IMAGE_FLAGS)
003357  003655  // for img_SetAttributes(...) and img_ClearAttributes(...)
003358  003656  #CONST
003359  003670  #END
003360  003671        
003361  003672        
003362  003673  //------------------------------------------------------------------//
003363  003674  //        Timer Function Prototypes
003364  003675  //------------------------------------------------------------------//
003365  003676  func sys_T(), 1;
003366  003677  // Syntax: sys_T();
003367  003678  // Usage : t := sys_T();
003368  003679  // Notes : return the current value of the rolling system timer (1msec) LO word
003369  003680        
003370  003681  func sys_T_HI(), 1;
003371  003682  // Syntax: sys_T_HI();
003372  003683  // Usage : t := sys_T_HI();
003373  003684  // Notes : return the current value of the rolling system timer (1msec) HI word
003374  003685        
003375  003686  func sys_SetTimer("timernum","value"), 0;
003376  003687  // Syntax: sys_SetTimer("timernum", "value");
003377  003688  // Usage : sys_SetTimer(TIMER5, 10000);
003378  003689  // Notes : set a countdown on the selected timer, or 'top up' if required.
003379  003690  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003380  003691  //       : Maximum timeout period is 65.535 seconds
003381  003692  //       : A timer can be read with the sys_GetTimer("timernum") function
003382  003693        
003383  003694  func sys_GetTimer("timernum"), 1;
003384  003695  // Syntax: t := sys_GetTimer("timernum");
003385  003696  // Usage : t := sys_GetTimer(TIMER3);
003386  003697  // Notes : returns 0 if timer has expired, or the current countdown value.
003387  003698  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
003388  003699  //       : Maximum timeout period is 65.535 seconds
003389  003700  //       : A timer must be set with the sys_SetTimer("timernum","value") function
003390  003701        
003391  003702  func sys_SetTimerEvent("timernum","function"), 1;
003392  003703  // Syntax: sys_SetTimerFunction("timernum", "function");
003393  003704  // Usage : sys_SetTimer(TIMER5, myfunc);
003394  003705  // Notes : set a function to be called for selected timer.
003395  003706  //       : When the timer reaches zero, the function is called.
003396  003707  //       : The called function must not have any parameters
003397  003708  //       : sys_SetTimerEvent returns any previous event function
003398  003709  //       : address, or zero if there was no previous function.
003399  003710        
003400  003711  func sys_EventQueue(), 1;
003401  003712  // Syntax: sys_EventQueue();
003402  003713  // Usage : tasks := sys_EventQueue();
003403  003714  // Notes : returns the max number of events that were pending
003404  003715  //       : in the timer queue since the last call to this function.
003405  003716  //       : This can be used to assess timer event overhead burden,
003406  003717  //       : especially after or during a sys_EventsPostpone action.
003407  003718        
003408  003719  func sys_EventsPostpone(), 0;
003409  003720  // Syntax: sys_EventPostpone();
003410  003721  // Usage : sys_EventPostpone();   // postpone the event queue
003411  003722  // Notes : postpone any events until the sys_EventResume function is executed
003412  003723  //       : The timer event queue will continue to queue events, but no action
003413  003724  //       : will take place untill a sys_EventResume function is encountered.
003414  003725  //       : The queue will continue to receive up to 32 events before discarding
003415  003726  //       : any further events. This function is required to allow a sequence of
003416  003727  //       : instructions or functions to occur that would otherwise be corrupted
003417  003728  //       : by an event occuring during the sequence of instructions or functions.
003418  003729  //       : A good example of this is when you set a position to print, if there
003419  003730  //       : was no way of locking the current sequence, an event may occur which
003420  003731  //       : does a similar thing, and a contention would occur - printing to
003421  003732  //       : the wrong position. This function should be used wisely, if any action
003422  003733  //       : that is required would take considerable time, it is better to disable
003423  003734  //       : any conflicting event functions with a bypass flag, then restart the
003424  003735  //       : conflicting event by re-issuing a timer value.
003425  003736        
003426  003737  func sys_EventsResume(), 0;
003427  003738  // Syntax: sys_EventsResume();
003428  003739  // Usage : sys_EventsResume();   // resume the event queue
003429  003740  // Notes : resume any postponed events. The queue will try to execute any timer
003430  003741  //       : events that were incurred during the postponed period.
003431  003742        
003432  003743        
003433  003744  func sys_GetTime(), 0;
003434  003745  // Syntax: sys_GetTime();
003435  003746  // Usage : to(mystring); sys_GetTime();   // save current time string to buffer
003436  003747  // Notes : print the system time in the format eg "6:10:45"
003437  003748  //       : Can be captured to a buffer using the to( function
003438  003749  //       : Returns nothing.
003439  003750        
003440  003751  func sys_SetTime("hours", "mins", "secs"), 1;
003441  003752  // Syntax: sys_SetTime(h, m, s);
003442  003753  // Usage : sys_SetTime(10, 0, 0);   // set the system time
003443  003754  // Notes : Used to set clock to correct time after power up or suspension
003444  003755  //Returns: Returns true if valid time.
003445  003756        
003446  003757  func sys_GetDate(), 0;
003447  003758  // Syntax: sys_GetDate();
003448  003759  // Usage : to(mystring); sys_GetDate();   // save current time string to buffer
003449  003760  // Notes : print the system date in the format eg "25-09-2012"
003450  003761  //       : Can be captured to a buffer using the to( function
003451  003762  //       : Returns nothing.
003452  003763        
003453  003764  func sys_SetDate("year", "month", "day"), 1;
003454  003765  // Syntax: sys_SetDate(y, m, d);
003455  003766  // Usage : sys_SetDate(10, 0, 0);   // set the system time
003456  003767  // Notes : Used to set clock to correct date after power up or suspension
003457  003768  //Returns: Returns true if valid date.
003458  003769        
003459  003770  func sys_Sleep("units"), 1;
003460  003771  // Syntax: t := sys_Sleep("units");
003461  003772  // Usage : t := sys_Sleep(10);
003462  003773  // Notes : sets the display into low power mode for a period of time.
003463  003774  //       : Touching the touch screen will also wake from sleep.
003464  003775  //       : as will bus Change Interrupts.
003465  003776  //       : Returns remaining sleep units.
003466  003777        
003467  003778  func iterator("offset"), 0;
003468  003779  // Syntax: t :=  iterator("offset");
003469  003780  // Usage : t :=  iterator(10);
003470  003781  // Notes : set the iterator size for ++/--
003471  003782  //       : The next postinc,postdec,preinc of predec will alter
003472  003783  //       : by the specified value.
003473  003784  //       : The offset will return to 1 after the next operation.
003474  003785        
003475  003786  func sys_DeepSleep("units"), 1;               // put the module into its lowest power consumption mode. New in v0.7
003476  003787  // Syntax: t := sys_DeepSleep("units");    New in v0.7
003477  003788  // Usage : t := sys_DeepSleep(10);
003478  003789  // Notes : sets the display and processor into lowest power mode for a period of time.
003479  003790  //       : When returning from DeepSleep the display should be reinitialised
003480  003791  //       : with disp_Init().
003481  003792  //       : Touching the touch screen will also wake from sleep.
003482  003793  //       : Returns remaining sleep units.
003483  003794        
003484  003795  //------------------------------------------------------------------//
003485  003796  //         Touch Screen Function Prototypes
003486  003797  //------------------------------------------------------------------//
003487  003798        
003488  003799  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
003489  003800  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
003490  003801  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
003491  003802  // Notes : Specifies a new touch detect region on the screen
003492  003803  //       : such that only touch activity in that region will
003493  003804  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
003494  003805        
003495  003806  func touch_Set("mode"), 0;
003496  003807  // Syntax: touch_Set(mode);
003497  003808  // Usage : touch_Set(arg);
003498  003809  // Notes : Sets various Touch Screen related parameters
003499  003810  //       :
003500  003811  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
003501  003812  //       : touch_Set(TOUCH_ENABLE);
003502  003813  //       : Enables and initialises Touch Screen hardware
003503  003814  //       :
003504  003815  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
003505  003816  //       : touch_Set(TOUCH_DISABLE );
003506  003817  //       : Disables the Touch Screen
003507  003818  //       : Note: Touch Screen runs in the background and disabling
003508  003819  //       : it when not in use will free up extra resources
003509  003820  //       : such as 4DVM CPU cycles.
003510  003821  //       :
003511  003822  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
003512  003823  //       : touch_Set(TOUCH_REGIONDEFAULT);
003513  003824  //       : This will reset the current active region to default
003514  003825  //       : to the full screen without the application having to
003515  003826  //       : set a new active region for the full screen.
003516  003827  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
003517  003828  //       : that requre to be interfaced with an external pointing
003518  003829  //       : device, values that are poked into TOUCH_DRIVE will be
003519  003830  //       : read with the touch_Get() function)
003520  003831        
003521  003832        
003522  003833  func touch_Get("mode"), 1;
003523  003834  // Syntax: touch_Get(mode);
003524  003835  // Usage : arg1 := touch_Get(arg);
003525  003836  // Notes : Returns various Touch Screen parameters to caller
003526  003837  //       :
003527  003838  //       : mode = TOUCH_STATUS  (mode 0)
003528  003839  //       : var := touch_Get(TOUCH_STATUS);
003529  003840  //       : Returns the various states of the touch screen
003530  003841  //       : 0 = NOTOUCH
003531  003842  //       : 1 = TOUCH_PRESSED
003532  003843  //       : 2 = TOUCH_RELEASED
003533  003844  //       : 3 = TOUCH_MOVING
003534  003845  //       :
003535  003846  //       : mode = TOUCH_GETX   (mode 1)
003536  003847  //       : var := touch_Get(TOUCH_GETX);
003537  003848  //       : Returns the X coordinates of the touch
003538  003849  //       :
003539  003850  //       : mode = TOUCH_GETY   (mode 2)
003540  003851  //       : var := touch_Get(TOUCH_GETY);
003541  003852  //       : Returns the Y coordinates of the touch
003542  003853        
003543  003854        
003544  003855  //touch_Set() related constants
003545  003856  #CONST
003546  003860  #END
003547  003861        
003548  003862  //touch_Get() related constants
003549  003863  #CONST
003550  003871  #END
003551  003872        
003552  003873  func touch_TestBox("&rect"), 1;
003553  003874  // Syntax   : touch_Test(rect);
003554  003875  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=20; r[3]:=30;
003555  003876  //          : result := touch_Test(r); // check area at 100,200,119,229
003556  003877  // Notes    : rect is an array of 4 vars, x1, y1, width, height (using boxed co-ordinates)
003557  003878  // returns  : Returns true if last touch co-ordinates are within the boxed test area.
003558  003879        
003559  003880  func touch_TestArea("&rect"), 1;
003560  003881  // Syntax   : touch_Test(rect);
003561  003882  // Usage    : var r[4]; r[0]:=100; r[1]:=200; r[2]:=119; r[3]:=129;
003562  003883  //          : result := touch_Test(r); // check area at 100,200,119,229
003563  003884  // Notes    : rect is an array of 4 vars, x1, y1, x2, y2 (using absolute co-ordinates)
003564  003885  // returns  : Returns true if last touch co-ordinates are within the absolute co-ordinate test area.
003565  003886        
003566  003887        
003567  003888  func __reserved51(), 0; // do not remove
003568  003889  func __reserved52(), 0; // do not remove
003569  003890        
003570  003891  //------------------------------------------------------------------//
003571  003892  //        Memory Allocation Function Prototypes
003572  003893  //------------------------------------------------------------------//
003573  003894        
003574  003895  func mem_Alloc("size"), 1;
003575  003896  // Syntax: mem_Alloc(bytesize);
003576  003897  // Usage : myvar := mem_Alloc(100);
003577  003898  // Notes : Allocate a block of memory to pointer myvar
003578  003899  //       : The allocated memory contains garbage but is a fast allocation.
003579  003900  //       : The block must later be released with mem_Free();
003580  003901  //       : returns 0 if function fails
003581  003902        
003582  003903  func mem_AllocV("size"), 1;
003583  003904  // Syntax: mem_AllocV(bytesize);
003584  003905  // Usage : myvar := mem_AllocV(100);
003585  003906  // Notes : Allocate a block of memory to pointer myvar
003586  003907  //       : The block of memory is filled with signature values
003587  003908  //       : the block starts with A5,5A then fills with incrementing
003588  003909  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
003589  003910  //       : This can be helpful when debugging
003590  003911  //       : The block must later be released with mem_Free();
003591  003912  //       : returns 0 if function fails
003592  003913        
003593  003914  func mem_AllocZ("size"), 1;
003594  003915  // Syntax: mem_AllocZ(bytesize);
003595  003916  // Usage : myvar := mem_AllocC(100);
003596  003917  // Notes : Allocate a zeroed block of memory to pointer myvar
003597  003918  //       : The block of memory is filled with zeroes
003598  003919  //       : The block must later be released with mem_Free();
003599  003920  //       : returns 0 if function fails
003600  003921        
003601  003922  func mem_Realloc("ptr", "size"), 1;
003602  003923  // Syntax: myvar := mem_Realloc("ptr", "size");
003603  003924  // Usage : myvar := mem_Realloc(ptr, size);
003604  003925  // Notes : The function may move the memory block to a new location,
003605  003926  //       : in which case the new location is returned.
003606  003927  //       : The content of the memory block is preserved up to the lesser
003607  003928  //       : of the new and old sizes, even if the block is moved.
003608  003929  //       : If the new size is larger, the value of the newly allocated
003609  003930  //       : portion is indeterminate. In case that ptr is NULL,
003610  003931  //       : the function behaves exactly as mem_Alloc, assigning a new block
003611  003932  //       : of size bytes and returning a pointer to the beginning of it.
003612  003933  //       : In case that the size is 0, the memory previously allocated in
003613  003934  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
003614  003935  //       : pointer is returned.
003615  003936        
003616  003937  func mem_Free("allocation"), 1;
003617  003938  // Syntax: myvar := mem_Free(allocation);
003618  003939  // Usage : myvar := mem_Free(myvar);
003619  003940  // Notes : De-allocate a block of memory previously created with
003620  003941  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
003621  003942  //       : returns 0 if function fails
003622  003943        
003623  003944  func mem_Heap(), 1;
003624  003945  // Syntax: myvar := mem_Heap();
003625  003946  // Usage : myvar := mem_Heap();
003626  003947  // Notes : returns bytecount available in heap
003627  003948  //       :
003628  003949        
003629  003950  func mem_Set("ptr","char","size"), 1;
003630  003951  // Syntax: mem_Set(ptr,char,bytesize);
003631  003952  // Usage : mem_Set(p, 'A', 100);
003632  003953  // Notes : fill a block of memory with a byte value
003633  003954  //       : Note that count is a byte count, this facilitates
003634  003955  //       : clearing word aligned byte arrays when using word
003635  003956  //       : aligned packed strings.
003636  003957  //       : returns ptr
003637  003958        
003638  003959  func mem_Copy("src", "dest", "bytecount"), 1;
003639  003960  // Syntax: myvar := mem_Copy(src, dest, bytesize);
003640  003961  // Usage : myvar := mem_Copy(p1, p2, 100);
003641  003962  // Notes : copy a word aligned block of memory from src to dest
003642  003963  //       : Note that count is a byte count, this facilitates
003643  003964  //       : copying word aligned byte arrays when using word
003644  003965  //       : aligned packed strings.
003645  003966  //       : returns src
003646  003967        
003647  003968  func mem_Compare("ptr1","ptr2","count"), 1;
003648  003969  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
003649  003970  // Usage : myvar := mem_Compare(p1, p2, 100);
003650  003971  // Notes : compare word aligned blocks of memory at src, dest
003651  003972  //       : Note that count is a byte count, this facilitates
003652  003973  //       : comparing word aligned byte arrays when using word
003653  003974  //       : aligned packed strings.
003654  003975  //       : returns 0 if we have a match
003655  003976        
003656  003977  func __reserved53(), 0; // do not remove
003657  003978  func __reserved54(), 0; // do not remove
003658  003979        
003659  003980  //------------------------------------------------------------------//
003660  003981  //        FAT16 Function Prototypes
003661  003982  //------------------------------------------------------------------//
003662  003983        
003663  003984  func file_Error(), 1;
003664  003985  // Syntax: myvar := file_Error();
003665  003986  // Usage : e := file_Error();
003666  003987  // Notes : return the most recent file error.
003667  003988  //       :
003668  003989        
003669  003990  func file_Count("filename"), 1;
003670  003991  // Syntax: count := file_Count("filename");
003671  003992  // Usage : count := file_Count("*.4dg");
003672  003993  // Notes : returns number of files found that match the criteria
003673  003994        
003674  003995  func file_Dir("filename"), 1;
003675  003996  // Syntax: count := file_Dir("filename");
003676  003997  // Usage : count := file_Dir("*.4dg");
003677  003998  // Notes : streams a string of filenames that agree with the search key
003678  003999  //       : returns number of files found that match the criteria
003679  004000        
003680  004001  func file_FindFirst("fname"), 1;
003681  004002  // Syntax: res := file_FindFirst("fname");
003682  004003  // Usage : if (file_FindFirst("*.4xe") ....
003683  004004  // Notes : returns true if at least 1 file exists
003684  004005  //       : that satisfies the file argument.
003685  004006  //       : Wildcards are usually used so if
003686  004007  //       : file_FindFirst returns true, further
003687  004008  //       : tests can be made using file_FindNext();
003688  004009  //       : to find all the files that match the
003689  004010  //       : wildcard class. Note that the stream behaviour
003690  004011  //       : is the same as file_Dir.
003691  004012  //       :
003692  004013        
003693  004014  func file_FindNext(), 1;
003694  004015  // Syntax: res := file_FindNext();
003695  004016  // Usage : while ((file_FindNext()) ....
003696  004017  // Notes : returns true if more file exists
003697  004018  //       : that satisfies the file argument
003698  004019  //       : that was given for  file_FindFirst.
003699  004020  //       : Wildcards must be used for
003700  004021  //       : file_FindFirst, else this function will
003701  004022  //       : always return zero as the only occurence
003702  004023  //       : will have already been found.
003703  004024  //       : Note that the stream behaviour
003704  004025  //       : is the same as file_Dir.
003705  004026  //       :
003706  004027        
003707  004028  func file_Exists("fname"), 1;
003708  004029  // Syntax: res := file_Exists("fname"),
003709  004030  // Usage : if(file_Exists("myfile") ....
003710  004031  // Notes : returns true if file exists
003711  004032  //       :
003712  004033        
003713  004034  func file_Open("fname", "mode"), 1;
003714  004035  // Syntax: handle := file_Open("fname","mode"),
003715  004036  // Usage : handle := file_Open("myfile.txt", 'r');
003716  004037  // Notes : returns handle if file exists
003717  004038  //       :
003718  004039        
003719  004040  func file_Close("handle"), 1;
003720  004041  // Syntax: res := file_Close("handle");
003721  004042  // Usage : res := file_Close(hnd1);
003722  004043  // Notes : returns true if file closed ok
003723  004044  //       :
003724  004045        
003725  004046  func file_Read("*dest", "size", "handle"), 1;
003726  004047  // Syntax: res := file_Read("*dest", "size", "handle"),
003727  004048  // Usage : res := file_Read(memblock,20,hnd1);
003728  004049  // Notes : returns number of characters read
003729  004050  //       : if "dest" is zero, data is read direct to GRAM window
003730  004051  //       :
003731  004052        
003732  004053        
003733  004054  func file_Seek("handle", "HiWord", "LoWord"), 1;
003734  004055  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
003735  004056  // Usage : res := file_Seek(hSource, 0, 0x1234);
003736  004057  // Notes : set file position to 0x00001234 (byte position 4660)
003737  004058  //       : for the file handle so subsequent data may be read
003738  004059  //       : from that position onwards with file_GetC(...),
003739  004060  //       : file_GetW(...) or file_GetS(...), or an image
003740  004061  //       : can be displayed with file_Image(...)
003741  004062  // Notes : returns true if ok, usually ignored
003742  004063        
003743  004064  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003744  004065  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
003745  004066  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
003746  004067  // Notes : set file seek position to 123000
003747  004068  //       : for the file handle so subsequent data may be read
003748  004069  //       : from that record position onwards with file_GetC(...),
003749  004070  //       : file_GetW(...) or file_GetS(...), or an image
003750  004071  //       : can be displayed with file_Image(...)
003751  004072  // Notes : returns true if ok, usually ignored
003752  004073        
003753  004074  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
003754  004075  // Syntax: file_Tell("handle", &HiWord, &LoWord);
003755  004076  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
003756  004077  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
003757  004078  //       : returns true if function succeeded
003758  004079        
003759  004080  func file_Write("*source", "size", "handle"), 1;
003760  004081  // Syntax: res := fwrite("*source", "size", "handle"),
003761  004082  // Usage : res := fwrite(memblock, 20, hnd1);
003762  004083  // Notes : returns number of bytes written
003763  004084  //       :
003764  004085        
003765  004086  func file_Size("handle", "&HiWord", "&LoWord"), 1;
003766  004087  // Syntax: file_Size("handle", &HiWord, &LoWord);
003767  004088  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
003768  004089  // Notes : Reads the 32 bit file size and stores it into 2 variables.
003769  004090  //       : returns true if function succeeded
003770  004091        
003771  004092  func file_Image("x", "y", "handle"), 1;
003772  004093  // Syntax: file_Image(x, y, handle);
003773  004094  // Usage : file_Image(10, 10, hnd1);
003774  004095  // Notes : Display an image from a file at the current file position.
003775  004096  //       : The image is displayed at x,y (with respect to top left corner).
003776  004097  //       : If there is more than 1 image in the file, it can be
003777  004098  //       : accessed with file_Seek(...)
003778  004099        
003779  004100  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
003780  004101  // Syntax: file_ScreenCapture(x, y, w, h, handle);
003781  004102  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
003782  004103  // Notes : Save a image from screen to file at the current file position.
003783  004104  //       : The image can later be displayed with file_Image(...);
003784  004105  //       : The file may be opened in append mode to accumulate multiple
003785  004106  //       : images. Later, the images can be accessed with file_Seek(...);
003786  004107  //       : Note that the image will be sector aligned.
003787  004108  //       : All image headers must start on a sector boundary.
003788  004109  //       : The image is saved from x, y (with respect to top left corner)
003789  004110  //       : and the capture area is determined by "width" and "height".
003790  004111  //       : returns 0 if function succeeded
003791  004112        
003792  004113  func file_PutC("char","handle"), 1;
003793  004114  // Syntax: file_PutC("char", "handle");
003794  004115  // Usage : file_PutC('x', hndl);
003795  004116  // Notes : returns true if function succeeded
003796  004117        
003797  004118  func file_GetC("handle"), 1;
003798  004119  // Syntax: file_GetC("handle");
003799  004120  // Usage : mychar := fgetC("handle");
003800  004121  // Notes : returns next char from file
003801  004122        
003802  004123  func file_PutW("word","handle"), 1;
003803  004124  // Syntax: file_PutW("word","handle");
003804  004125  // Usage : file_PutW(0x1234, hndl);
003805  004126  // Notes : returns true if function succeeded
003806  004127        
003807  004128  func file_GetW("handle"), 1;
003808  004129  // Syntax: file_GetW("handle");
003809  004130  // Usage : myword := fgetW("handle");
003810  004131  // Notes : returns next word in file
003811  004132        
003812  004133  func file_PutS("*source", "handle"), 1;
003813  004134  // Syntax: res := file_Puts("*source", "handle"),
003814  004135  // Usage : res := file_Puts(mystring, hnd1);
003815  004136  // Notes : returns number of characters written
003816  004137  //       :
003817  004138        
003818  004139  func file_GetS("*string", "size", "handle"), 1;
003819  004140  // Syntax: res := file_Gets("*string", "size", "handle");
003820  004141  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
003821  004142  // Notes : get a string from a file
003822  004143  //       : returns pointer to string or null if failed.
003823  004144  //       : file_GetS(...) automatically appends a null-terminator to the data read.
003824  004145  //       : NB:- only reads up to "size-1" characters into "string"
003825  004146  //       : file_GetS(...) will stop reading when any of the following conditions are true:
003826  004147  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
003827  004148  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
003828  004149  //       : C] It reaches the end of file
003829  004150  //       : D] A read error occurs.
003830  004151        
003831  004152        
003832  004153  func file_Erase("fname"), 1;
003833  004154  // Syntax: res := file_Erase("fname");
003834  004155  // Usage : res := file_Erase("myfile.txt");
003835  004156  // Notes : returns true if successful
003836  004157  //       :
003837  004158        
003838  004159  func file_Rewind("handle"), 1;
003839  004160  // Syntax: res := file_Rewind("handle");
003840  004161  // Usage : res := file_Rewind(hnd1);
003841  004162  // Notes : returns true if file rewound ok (usually ignored)
003842  004163  //       : resets the file pointer the the beginning of the open file.
003843  004164        
003844  004165  func file_LoadFunction("fname.4xe"), 1;
003845  004166  // Syntax: res := file_LoadFunction("fname.4fn");
003846  004167  // Usage : myfunc := file_LoadFunction(myfuncname);
003847  004168  // Notes : Load a function or program from disk and
003848  004169  //       : return a function pointer to the allocation.
003849  004170  //       : The function can then be invoked just like any other
003850  004171  //       : function would be called via a function pointer.
003851  004172  //       : Parameters may be passed to it in a conventional way.
003852  004173  //       : The function may be discarded at any time when no
003853  004174  //       : longer required, thus freeing its memory resources.
003854  004175  //       : The loaded function can be discarded with mem_Free(..)
003855  004176  //       : eg:
003856  004177  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
003857  004178  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
003858  004179  //       : then elsewhere in your program:-
003859  004180  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
003860  004181  //       : if(res == QUIT_APPLICATION) goto exitApp;
003861  004182  //       : Later in your program, when popupWindow is no longer
003862  004183  //       : required for the application:-
003863  004184  //       : res := mem_Free(popupWindow);
003864  004185  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
003865  004186  //       : The callers stack is shared by the loaded function,
003866  004187  //       : however any global variables in the loaded function
003867  004188  //       : are private to that function.
003868  004189  //
003869  004190        
003870  004191  func file_Run("fname.4xe", "arglistptr"), 1;
003871  004192  // Syntax: res := file_Run("fname.4xe","arglistptr");
003872  004193  // Usage : res := file_Run(fname, argptr);
003873  004194  // Notes : current program releases any allocated memory but
003874  004195  //       : retains the stack and global memory.
003875  004196  //       : If arglistptr is 0, no arguments are passed, else
003876  004197  //       : arglist points to an array, the first element being
003877  004198  //       : the number of elements in the array.
003878  004199  //       : func 'main' in the called program accepts
003879  004200  //       : the arguments, if any. The arguments can only
003880  004201  //       : be passed by value, no pointers or references can be
003881  004202  //       : used as all memory is cleared before the file
003882  004203  //       : is loaded. Refer to file_Exec and file_LoadFunction
003883  004204  //       : for functions that can pass by reference.
003884  004205        
003885  004206  func file_Exec("fname.4xe", "arglistptr"), 1;
003886  004207  // Syntax: res := file_Exec("fname.4xe","arglistptr");
003887  004208  // Usage : res := file_Exec("fname.4xe","arglistptr");
003888  004209  // Notes : returns like a function, current program
003889  004210  //       : calling program is kept active and control returns to it.
003890  004211  //       : If arglistptr is 0, no arguments are passed, else
003891  004212  //       : arglist points to an array, the first element being
003892  004213  //       : the number of elements in the array.
003893  004214  //       : func 'main' in the called program accepts the arguments.
003894  004215  //       : This function is similar to file_LoadFunction(...), however,
003895  004216  //       : the function argument list is passed by pointer, and
003896  004217  //       : the memory consumed by the function is released as
003897  004218  //       : soon as the function completes.
003898  004219        
003899  004220  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
003900  004221  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
003901  004222  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
003902  004223  // Notes : Reads a control file to create an image list.
003903  004224  //       : Returns NULL if function fails.
003904  004225  //       : Returns a handle (pointer to the memory allocation) to the
003905  004226  //       : image control list that has been created.
003906  004227  //       : "fname1" is the control list filename "*.dat"
003907  004228  //       : "fname2" is the image filename "*.gci"
003908  004229        
003909  004230  // Notes : This function Calculates the size of a chunk of memory required for
003910  004231  //       : a image list and populates it from the image control file ("*.dat")
003911  004232  //       : therefore, when imagelist is no longer required, you must de-allocate
003912  004233  //       : the image list memory by using eg:- mem_Free(hImagelist);
003913  004234  //       : to restore the heap.
003914  004235  //       :
003915  004236  //       : mode 0:- it is assumed that there is a graphics file with the
003916  004237  //       : file extension "fname2.gci". In this case, the images have been stored
003917  004238  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
003918  004239  //       : "fname1.dat" file are saved in the image control so that the image control
003919  004240  //       : can open the file (*.gci) and us file_Seek to get to the position of the
003920  004241  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
003921  004242  //       : mode 0 builds the image control quickly as it only scans the *.dat file
003922  004243  //       : for the file offsets and save them in the relevant entries in the image control.
003923  004244  //       : The penalty is that images take longer to find when displayed due to file_Seek
003924  004245  //       : overheads.
003925  004246  //
003926  004247  //       : mode 1:- it is assumed that there is a graphics file with the
003927  004248  //       : file extension "fname2.gci". In this case, the images have been stored
003928  004249  //       : in a FAT16 file concurrently, and the offset of the images are saved
003929  004250  //       : in the image control so that image file (*.gci) can be mapped to directly.
003930  004251  //       : The absolute cluster/sector is mapped so file seek does not need to be called
003931  004252  //       : internally. This means that there is no seek time penalty, however, the
003932  004253  //       : image list takes a lot longer to build, as all the seeking is done at control
003933  004254  //       : build time.
003934  004255        
003935  004256  //       : mode 2:- the graphics file with the is placed in a partitioned area
003936  004257  //       : In this case, the images have been stored in a in a known raw area of the FAT16
003937  004258  //       : disk, and the absolute address of the images are saved in the DAT file
003938  004259  //       : This is the fastest operation of the image control as there is no seeking
003939  004260  //       : or other disk activity taking place.
003940  004261        
003941  004262  func file_Mount(), 1;
003942  004263  // Syntax: r := file_Mount();
003943  004264  // Usage : r := file_Mount();
003944  004265  // Notes : Create a control block for FAT16 and mount the File System
003945  004266        
003946  004267  func file_Unmount(), 0;
003947  004268  // Syntax: file_Unmount();
003948  004269  // Usage : file_Unmount();
003949  004270  // Notes : release any control block and buffers for FAT16
003950  004271  //       : and unmount the File System
003951  004272        
003952  004273  func file_PlayWAV("fname1"), 1;
003953  004274  // Syntax: file_PlayWAV("fname1");
003954  004275  // Usage : file_PlayWAV("ding.wav");
003955  004276  // Notes : Play a wave file with filename "fname1"
003956  004277  //       : This function automatically grabs a chunk
003957  004278  //       : of memory for a file buffer, and a wave
003958  004279  //       : buffer. The minimum memory requirement is
003959  004280  //       : about 580 bytes for the disk io service and
003960  004281  //       : a minimum wave buffer size of 1024. The siz
003961  004282  //       : of the wave buffer allocation
003962  004283  //       : can be increased by the snd_BufSize function.
003963  004284  //       : The default size 1024 bytes.
003964  004285  //       : NB the memory is only required during the
003965  004286  //       : duration of play, and is automatically
003966  004287  //       : released while not in use.
003967  004288  //       : See the Sound Class services for other associated controls.
003968  004289  //       : If there are no errors, returns number of blocks to play (1 to 32767)
003969  004290  //       : If errors occured, the folling is returned
003970  004291  //       : -7  : Insufficient memory available for WAV buffer and file
003971  004292  //       : -6  : cant play this rate
003972  004293  //       : -5  : no data chunk found in first rsector
003973  004294  //       : -4  : no format data
003974  004295  //       : -3  : no wave chunk signature
003975  004296  //       : -2  : bad wave file format
003976  004297  //       : -1  : file not found
003977  004298        
003978  004299  func file_Rename("fname1", "fname2"), 1;     // rename a file
003979  004300  // Syntax: file_Rename ("oldname", "newname"),
003980  004301  // Usage : file_Rename ("file.txt", "file.bak");
003981  004302  // Notes : Renames a file on uSD.
003982  004303  //       : Returns FALSE if function fails. (file does not exist, or new filename already exists)
003983  004304  //       : Returns TRUE, if successful.
003984  004305        
003985  004306  func file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second") , 1; // Sets date and time for an open file
003986  004307  // Syntax: res := file_SetDate("handle", "year", "month", "day", "hour", "Minute", "Second) ;
003987  004308  // Usage : res := file_SetDate(hndl, 2014, 10, 31, 10, 0, 0)
003988  004309  // Notes : year is a 4 digit year
003989  004310  //       : Due to limitations of FAT16 only even seconds are stored
003990  004311  //       : The handle must be closed before the file information is updated
003991  004312  //       : returns TRUE if date + time + handle valid
003992  004313  //       : returns FLAST if handle invalid, or date or time not valid (only simple checking performed).
003993  004314        
003994  004315  func __reserved57(), 0; // do not remove
003995  004316  func __reserved58(), 0; // do not remove
003996  004317        
003997  004318        
003998  004319  //------------------------------------------------------------------------------
003999  004320  // FILEIO Error Code Constants
004000  004321  //------------------------------------------------------------------------------
004001  004322  #CONST
004002  004348  #END
004003  004349        
004004  004350  //------------------------------------------------------------------------------
004005  004351  // DISK struct offsets
004006  004352  //------------------------------------------------------------------------------
004007  004353  #CONST
004008  004370  #END
004009  004371        
004010  004372  //------------------------------------------------------------------------------
004011  004373  // FILE struct offsets
004012  004374  //------------------------------------------------------------------------------
004013  004375  #CONST
004014  004394  #END
004015  004395        
004016  004396        
004017  004397  //------------------------------------------------------------------//
004018  004398  //        Sound Class Services
004019  004399  //------------------------------------------------------------------//
004020  004400        
004021  004401  func snd_Volume("var"), 0;
004022  004402  // Syntax: snd_Volume("var");
004023  004403  // Usage : snd_Volume(30);
004024  004404  // Notes : set sound playback volume.  Var must
004025  004405  //       : be in the range from 8 (min volume)
004026  004406  //       : to 127 (max volume). If var is less
004027  004407  //       : than 8 volume is set to 8, and if
004028  004408  //       : var > 127 it is set to 127.
004029  004409        
004030  004410  func snd_Pitch("pitch"), 1;
004031  004411  // func snd_Pitch("freq"), 1;
004032  004412  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
004033  004413  // Notes : sets the samples playback rate to a different frequency
004034  004414  //       : The minimum value is 4khz
004035  004415  //       : Setting the pitch to zero restores the original sample rate
004036  004416  //       : Return value is the samples original sample rate.
004037  004417        
004038  004418  func snd_BufSize("var"), 0;
004039  004419  // Syntax: snd_BufSize("var");
004040  004420  // Usage : snd_BufSize(2);
004041  004421  // Notes : specify the a memory chunk size for the wavefile buffer.
004042  004422  //       : default size 1024 bytes.
004043  004423  //       : 0 = 1024 bytes (default)
004044  004424  //       : 1 = 2048 bytes
004045  004425  //       : 2 = 4096 bytes
004046  004426  //       : 3 = 8192 bytes
004047  004427        
004048  004428  func snd_Stop(), 0;
004049  004429  // Syntax: snd_Stop();
004050  004430  // Usage : snd_Stop();
004051  004431  // Notes : stop any sound that is playing, releasing
004052  004432  //       : buffers and closes any open wav file.
004053  004433        
004054  004434  func snd_Pause(), 0;
004055  004435  // Syntax: snd_Pause();
004056  004436  // Usage : snd_Pause();
004057  004437  // Notes : pauses any sound that is playing, does nothing
004058  004438  //       : until sound is resumed with snd_Continue().
004059  004439  //       : The sample cam be terminated with snd_Stop.
004060  004440  //       : buffers and closes any open wav file.
004061  004441        
004062  004442  func snd_Continue(), 0;
004063  004443  // Syntax: snd_Continue();
004064  004444  // Usage : snd_Continue();
004065  004445  // Notes : resume any sound that is paused by snd_Pause.
004066  004446        
004067  004447  func snd_Playing(), 1;
004068  004448  // Syntax: snd_Playing();
004069  004449  // Usage : r := snd_Playing();
004070  004450  // Notes : returns 0 if sound has finished playing,
004071  004451  //       : else return number of 512 byte blocks to go.
004072  004452        
004073  004453  func snd_Freq("Freq", "Duration"), 1;
004074  004454  // Syntax: snd_Freq("Freq", "Duration");
004075  004455  // Usage : r := snd_Freq(1000, 2000);
004076  004456  // Notes : Returns 0 if note cannot be played because a wav file is playing
004077  004457  //       : else return True.
004078  004458  //       : Minimum Freq is 20
004079  004459  //       : This will produce a pure Square wave and is designed for driving
004080  004460  //       : Piezo transducers which require this sort of drive. It can also be
004081  004461  //       : used to drive the amp on displays with audio.
004082  004462        
004083  004463        
004084  004464  func __reserved60(), 0; // do not remove
004085  004465  func __reserved61(), 0; // do not remove
004086  004466  func __reserved62(), 0; // do not remove
004087  004467        
004088  004468  //=========================================================================================================
004089  004469  // String functions
004090  004470  //=========================================================================================================
004091  004471        
004092  004472  func str_Ptr("&var"), 1;
004093  004473  // Syntax: str_Ptr(&var);
004094  004474  // Usage : p := str_Ptr(&var);
004095  004475  // Notes : return a byte pointer to a word region
004096  004476        
004097  004477  func str_GetD("&ptr", "&var"), 1;
004098  004478  // Syntax: str_GetD(&ptr, &var);
004099  004479  // Usage : ok := str_GetD(&ptr, &var);
004100  004480  // Notes : convert number in a string to DWORD ( myvar[2] )
004101  004481  //       : returns true if function succeeds, advancing ptr
004102  004482        
004103  004483  func str_GetW("&ptr", "&var"), 1;
004104  004484  // Syntax: str_GetW(&ptr, &var);
004105  004485  // Usage : ok := str_GetW(&ptr, &var);
004106  004486  // Notes : convert number in a string to WORD ( myvar )
004107  004487  //       : returns true if function succeeds, advancing ptr
004108  004488        
004109  004489  func str_GetHexW("&ptr", "&var"), 1;
004110  004490  // Syntax: str_GetHexW(&ptr, &var);
004111  004491  // Usage : ok := str_GetHexW(&ptr, &var);
004112  004492  // Notes : convert HEX number in a string to WORD ( myvar )
004113  004493  //       : returns true if function succeeds, advancing ptr
004114  004494        
004115  004495  func str_GetC("&ptr", "&var"), 1;
004116  004496  // Syntax: str_GetC(&ptr, &var);
004117  004497  // Usage : ok := str_GetC(&ptr, &var);
004118  004498  // Notes : get a valid ascii char in a string to WORD ( myvar )
004119  004499  //       : returns true if function succeeds, advancing ptr
004120  004500        
004121  004501  func str_GetByte("ptr"), 1;
004122  004502  // Syntax: str_GetByte(ptr);
004123  004503  // Usage : myvar := str_GetByte(ptr);
004124  004504  // Notes : get a byte to myvar
004125  004505  //       : returns value
004126  004506        
004127  004507  func str_GetWord("ptr"), 1;
004128  004508  // Syntax: GetWord(ptr);
004129  004509  // Usage : GetWord(ptr);
004130  004510  // Notes : get a word to myvar
004131  004511  //       : returns value
004132  004512        
004133  004513  func str_PutByte("ptr","val"), 0;
004134  004514  // Syntax: str_PutByte(ptr);
004135  004515  // Usage : myvar := str_PutByte(ptr);
004136  004516  // Notes : put a byte at ptr
004137  004517  //       : returns value
004138  004518        
004139  004519  func str_PutWord("ptr","val"), 0;
004140  004520  // Syntax: str_PutWord("ptr","val");
004141  004521  // Usage : str_PutWord(p,100);
004142  004522  // Notes : put word 100 at current pointer location
004143  004523  //       : returns value
004144  004524        
004145  004525  func str_Match("&ptr", "*str"), 1;
004146  004526  // Syntax: str_Match(&ptr, *str);
004147  004527  // Usage : r := str_Match(&p, "hello");
004148  004528  // Notes : Case sensitive match
004149  004529  //       : returns true if function succeded, andvancing pointer to position past
004150  004530  //       : the matched item. Note that any whitespace characters are skipped
004151  004531  //       : in the source string prior to the test.
004152  004532        
004153  004533  func str_MatchI("&ptr", "*str"), 1;
004154  004534  // Syntax: str_MatchI(&ptr, *str);
004155  004535  // Usage : r := str_MatchI(&p, "hello");
004156  004536  // Notes : Case insensitive match
004157  004537  //       : returns true if function succeded, andvancing pointer to position past
004158  004538  //       : the matched item. Note that any whitespace characters are skipped
004159  004539  //       : in the source string prior to the test.
004160  004540        
004161  004541  func str_Find("&ptr", "*str"), 1;
004162  004542  // Syntax: str_Find(&ptr, *str);
004163  004543  // Usage : n := str_Find(&p, "hello");
004164  004544  // Notes : given the address of a pointer to a source string as the
004165  004545  //       : first argument, and a pointer to a test string as the second
004166  004546  //       : argument, attempt to find the position of the matching string
004167  004547  //       : in the source string. The test is performed with case sensitivity.
004168  004548  //       : return 0 if not found, else returns the address of the first
004169  004549  //       : character of the match. NB:- The source pointer is not altered.
004170  004550        
004171  004551  func str_FindI("&ptr", "*str"), 1;
004172  004552  // Syntax: str_Find(&ptr, *str);
004173  004553  // Usage : n := str_Find(&p, "hello");
004174  004554  // Notes : given the address of a pointer to a source string as the
004175  004555  //       : first argument, and a pointer to a test string as the second
004176  004556  //       : argument, attempt to find the position of the matching string
004177  004557  //       : in the source string. The test is performed with no case
004178  004558  //       : sensitivity, eg upper and lower case chars are accepted.
004179  004559  //       : return 0 if not found, else returns the address of the first
004180  004560  //       : character of the match. NB:- The source pointer is not altered.
004181  004561        
004182  004562  func str_Length("ptr"), 1;
004183  004563  // Syntax: str_Length(ptr);
004184  004564  // Usage : len := str_Ptr(mystring);
004185  004565  // Notes : return the length of a byte aligned string excluding terminator
004186  004566        
004187  004567  func str_Printf("&ptr", "*format"), 1;
004188  004568  // Syntax: str_Printf("&ptr", "*format");
004189  004569  // Usage : r := str_Printf(&p, "hello");
004190  004570  // Notes : refer to documentation
004191  004571  //       :
004192  004572        
004193  004573  func str_Cat("dest","src"), 1;
004194  004574  // Syntax: str_Append("&dest","&src");
004195  004575  // Usage : str_Append(&buf,"Hello");
004196  004576  // Notes : Appends a copy of the source string to the destination string.
004197  004577  //       : The terminating null character in destination is overwritten by
004198  004578  //       : the first character of source, and a new null-character is appended
004199  004579  //       : at the end of the new string formed by the concatenation of both in destination.
004200  004580  //       : returns destination.
004201  004581        
004202  004582  func str_CatN("dest","src","count"), 1;
004203  004583  // Syntax: str_Append("&dest","&src","count");
004204  004584  // Usage : str_Append(&buf,"Monday",3);
004205  004585  // Notes : Appends a copy of the source string to the destination string.
004206  004586  //       : The number of characters copied is limited by "count".
004207  004587  //       : The terminating null character in destination is overwritten by
004208  004588  //       : the first character of source, and a new null-character is appended
004209  004589  //       : at the end of the new string formed by the concatenation of both in destination.
004210  004590  //       : returns destination.
004211  004591        
004212  004592        
004213  004593  func str_ByteMove("src", "dest", "count"), 1;
004214  004594  // Syntax   : str_ByteMove(src, dest, bytecount);
004215  004595  // Input    : STR *source points to byte aligned source.
004216  004596  //          : STR *dest   points to byte aligned destination.
004217  004597  //          : VAR count   number of bytes to transfer.
004218  004598  // Usage    : nextpos := str_ByteMove(s, d, 100);
004219  004599  // Notes    : copy bytes from "src" to "dest", stopping only
004220  004600  //          : when "count" is exhausted.
004221  004601  //          : No terminator is appended, it is purely a
004222  004602  //          : byte copy, and any zeroes encountered will
004223  004603  //          : also be copied.
004224  004604  // Returns  : returns a pointer to the end of the destination
004225  004605  //          : (which is "dest" + "count")
004226  004606        
004227  004607        
004228  004608  func str_Copy("dest", "src"), 1;
004229  004609  // Syntax   : str_Copy(dest, src);
004230  004610  // Input    : STR *dest   points to byte aligned destination.
004231  004611  //          : STR *source points to byte aligned source.
004232  004612  // Usage    : nextplace := str_Copy(d, s);
004233  004613  // Notes    : copy a string from "src" to "dest", stopping only
004234  004614  //          : when the end of source string "src" is encountered
004235  004615  //          : (0x00 terminator).
004236  004616  //          : The terminator is always appended, even if "src" is
004237  004617  //          : an empty string.
004238  004618  // Returns  : returns a pointer to the 0x00 string terminator at
004239  004619  //          : end of "dest" (which is "dest" + str_Length(src); )
004240  004620        
004241  004621        
004242  004622  func str_CopyN("dest", "src", "count"), 1;
004243  004623  // Syntax   : str_CopyN(dest, src, bytecount);
004244  004624  // Input    : STR *dest   points to byte aligned destination.
004245  004625  //          : STR *source points to byte aligned source.
004246  004626  //          : VAR count   max number of chars to copy.
004247  004627  // Usage    : nextplace := str_CopyN(d, s, 100);
004248  004628  // Notes    : copy a string from "src" to "dest", stopping only
004249  004629  //          : when "count" is exhausted, or end of source
004250  004630  //          : string "str" is encountered (0x00 string terminator).
004251  004631  //          : The terminator is always appended, even if
004252  004632  //          : "count" is zero, or "src" is a null string.
004253  004633  // Returns  : returns a pointer to the 0x00 string terminator
004254  004634  //          : (which is "dest" + whatever was copied)
004255  004635        
004256  004636        
004257  004637  func __reserved63(), 0; // do not remove
004258  004638  func __reserved64(), 0; // do not remove
004259  004639  func __reserved65(), 0; // do not remove
004260  004640  func __reserved66(), 0; // do not remove
004261  004641        
004262  004642  //=========================================================================================================
004263  004643  // FLASH memory functions
004264  004644  //=========================================================================================================
004265  004645  func flash_GetByte("bank", "ptr"), 1;
004266  004646  // Syntax   : flash_GetByte(bank, ptr);
004267  004647  // Usage    : myvar := flash_GetByte(FLASHBANK_2, 0x0017); // read first byte in data statement of bank 2
004268  004648  // Notes    : Reads a single byte from any flash location.
004269  004649  //          : If the bank is read protected, only the first 2 bytes can be read (0x55, 0xAA)
004270  004650  //          : which is the header signature for a valid program.
004271  004651  // Returns  : the byte value from the location
004272  004652        
004273  004653        
004274  004654  func flash_GetWord("bank", "ptr"), 1;
004275  004655  // Syntax   : flash_GetWord(bank, ptr);
004276  004656  // Usage    : myvar := flash_GetWord(FLASHBANK_2, 0x0000); // read first word in flash bank  (0xAA55)
004277  004657  // Notes    : Reads a single word from any flash location.
004278  004658  //          : The pointer is byte aligned.
004279  004659  //          : If the bank is read protected, only the first word can be read
004280  004660  //          : which is the header signature for a valid program (0xAA55).
004281  004661  // Returns  : the byte value from the location
004282  004662        
004283  004663        
004284  004664  func flash_Copy("bank", "ptr", "dest", "count"), 1;
004285  004665  // Syntax   : flash_Copy(bank, ptr);
004286  004666  // Usage    : myvar := flash_Copy(FLASHBANK_2, 0x1234, mybuf, 20); // read 20 bytes from FLASHBANK_2 starting from 0x1234
004287  004667  // Notes    : Copies bytes from any flash locations to a user buffer.
004288  004668  //          : The destination pointer is byte aligned, so a str_Ptr must be raised to get correct address.
004289  004669  //          : If the bank is read protected, 0 bytes will be read
004290  004670  //          : which is the header signature for a valid program (0xAA55).
004291  004671  // Returns  : the count of bytes transferred.
004292  004672        
004293  004673        
004294  004674  func flash_Run("bank"), 1;
004295  004675  // Syntax    : flash_Run(bankx);
004296  004676  // Usage     : res := flash_Run(FLASHBANK_5);
004297  004677  // Notes     : Restarts the processor, running code from the required
004298  004678  //           : flash bank. bank may be a variable, or one of the
004299  004679  //           : pre-defined constants:-
004300  004680  //           :    FLASHBANK_0                 //0x00
004301  004681  //           :    FLASHBANK_1                 //0x01
004302  004682  //           :    FLASHBANK_2                 //0x02
004303  004683  //           :    FLASHBANK_3                 //0x03
004304  004684  //           :    FLASHBANK_4                 //0x04
004305  004685  //           :    FLASHBANK_5                 //0x05
004306  004686  // returns    : This function should net return as it restarts
004307  004687  //        : the processor and jumps to the required bank,
004308  004688  //        : If it does return, -1 indicates incorrect/invalid
004309  004689  //        : bank number, and -2 indicates no valid program
004310  004690  //        : in the selected bank.
004311  004691        
004312  004692  func flash_Bank(), 1;
004313  004693  // Syntax   : flash_Bank();
004314  004694  // Usage    : myvar := flash_Bank();
004315  004695  // Notes    : Identifies which flash bank the code is running from.
004316  004696  // Returns  : The FLASH bank that code is currently running from, 0-5.
004317  004697        
004318  004698        
004319  004699  func flash_EraseBank("bank", "confirmation"), 1;
004320  004700  // Syntax   : flash_EraseBank(bank, confirmation);
004321  004701  // Usage    : result := flash_EraseBank(FLASHBANK_3, 0xDEAD); // erase an entire flash bank, confirm overwrite of protected program
004322  004702  // Notes    : This function should be used with extreme caution.
004323  004703  //          : The selected bank will be completely erased regardless of FLASH_WRITE_PROTECT status
004324  004704  //          : if the confirmation value is set to hex 0xDEAD. If confirmation is any other value,
004325  004705  //          : a protected bank will not be erased, and function will return with 0
004326  004706  //          : If the destination bank is the same as the execution bank, the processor will reset
004327  004707  //          : upon completion of erase. If the "bank" argument is set to ALL (-1) and confirmation is set to 0xDEAD
004328  004708  //          : FLASHBANK_0 thru FLASHBANK_5 are cleared.
004329  004709  //          : Used with caution, this is a good way to 'clean up' the entire flash when starting new projects.
004330  004710  // Returns  : returns true if the function succeeded
004331  004711  //          : NB:- reset processor if program is erasing itself, or the ALL bank option is selected.
004332  004712        
004333  004713  func flash_LoadFile("bank", "filename"), 1;
004334  004714  // Syntax   : flash_LoadFile(bank, ptr);
004335  004715  // Usage    : result := flash_LoadFile(FLASHBANK_2, "TETRIS10.EXE"); // load the file from disk into FLASHBANK_2
004336  004716  // Notes    : Copies a file from uSD to the required flashbank.
004337  004717  //          : The destination bank cannont be the execution bank, or a bank that is write protected
004338  004718  // Returns  : returns true if the function succeeded.
004339  004719        
004340  004720        
004341  004721  func flash_WriteBlock("sourceptr", "bank", "page"), 1;
004342  004722  // Syntax   : flash_WriteBlock(pbuf, bank, page);
004343  004723  // Usage    : result := flash_WriteBlock(buffer, FLASHBANK_5, 8); // store the 2k buffer to FLASHBANK_5, location 16384
004344  004724  // Notes    : Copies a 2kbyte buffer to the required flashbank in block 0-15.
004345  004725  //          : The address of each block is 0, 2048, 4096 etc, determined by the page number 0-15.
004346  004726  //          : The destination bank cannot be an execution bank, or a program bank that is write protected.
004347  004727  // Returns  : returns true if the function succeeded.
004348  004728        
004349  004729        
004350  004730  func flash_putstr("bank", "ptr"), 1;
004351  004731  // Syntax   : flash_putstr(bank, ptr);
004352  004732  // Usage    : flash_Copy(FLASHBANK_2, 350); // print a string from FLASHBANK_2, location 350
004353  004733  // Notes    : Works the same as putstr, however, the source of the asciiz string is in FLASH storage
004354  004734  //          : Output may be redirected with the to(..) function. Bit15 of ptr is assumed 0.
004355  004735  // Returns  : True if function succeeds, usually ignored. 0 if bank is read protected
004356  004736        
004357  004737  func flash_Blit16("bank", "offset", "count"), 1;
004358  004738  // Syntax   : flash_Blit16(bank, offset, pixelcount);
004359  004739  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit16(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (800 bytes)
004360  004740  // Notes    : Blit an image to a GRAM window from FLASH storage.
004361  004741  //          : Image is stored 16bits per pixel (565) in a linear fashion to suit the GRAM mechanism
004362  004742  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004363  004743        
004364  004744  func flash_Blit8("bank", "offset", "count"), 1;
004365  004745  // Syntax   : flash_Blit8(bank, offset, pixelcount);
004366  004746  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit8(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (400 bytes)
004367  004747  // Notes    : Blit an image to a GRAM window from FLASH storage.
004368  004748  //          : Image is stored 8 bits per pixel (332 format) in a linear fashion to suit the GRAM mechanism
004369  004749  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004370  004750        
004371  004751  func flash_Blit4("bank", "offset", "count", "palette16colour"), 1;
004372  004752  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal16);
004373  004753  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit4(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (200 bytes packed 4:4)
004374  004754  // Notes    : Blit an image to a GRAM window from FLASH storage.
004375  004755  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 16 x 16bit colours
004376  004756  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004377  004757        
004378  004758  func flash_Blit2("bank", "offset", "count", "palette4colour"), 1;
004379  004759  // Syntax   : flash_Blit16(bank, offset, pixelcount, pal4);
004380  004760  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit2(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (100 bytes packed 2:2:2:2)
004381  004761  // Notes    : Blit an image to a GRAM window from FLASH storage.
004382  004762  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 4 x 16bit colours
004383  004763  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004384  004764        
004385  004765  func flash_Blit1("bank", "offset", "count", "pallete2colour"), 1;
004386  004766  // Syntax   : flash_Blit1(bank, offset, pixelcount, pal2);
004387  004767  // Usage    : disp_setGRAM(10,10,29,29); flash_Blit1(FLASHBANK_5, 2048, 400); // display image at 10,10 (20 pixels square) from FLASH image source (50 bytes packed 1:1:1:1:1:1:1:1)
004388  004768  // Notes    : Blit an image to a GRAM window from FLASH storage.
004389  004769  //          : Image is stored in a linear fashion to suit the GRAM mechanism, palette is 2 x 16bit colours
004390  004770  // Returns  : actual count (normally same as count, will be lower if bank bounds exceeded)
004391  004771        
004392  004772  func flash_Exec("bank", "arglistptr"), 1;
004393  004773  // Syntax: res := flash_Exec("bank","arglistptr");
004394  004774  // Usage : res := flash_Exec("bank","arglistptr");
004395  004775  // Notes : returns like a function, current program
004396  004776  //       : calling program is kept active and control returns to it.
004397  004777  //       : If arglistptr is 0, no arguments are passed, else
004398  004778  //       : arglist points to an array, the first element being
004399  004779  //       : the number of elements in the array.
004400  004780  //       : func 'main' in the called bank accepts the arguments.
004401  004781  // WARNING Not currently implemented!
004402  004782        
004403  004783        
004404  004784  func __reserved68(), 0; // do not remove
004405  004785  func __reserved69(), 0; // do not remove
004406  004786  func __reserved70(), 0; // do not remove
004407  004787        
004408  004788  //=========================================================================================================
004409  004789  // I/O and hardware functions
004410  004790  //=========================================================================================================
004411  004791        
004412  004792        
004413  004793        
004414  004794        
004415  004795  func pin_Pulseout("pin", "value"), 1;        // non blocking (program execution continues during pulse)
004416  004796  func pin_PulseoutB("pin", "value"), 1;    // blocking (program execution suspended during pulse)
004417  004797  // Syntax: pin_Pulseout(pin, value);
004418  004798  // Usage : pin_Pulseout(PA3, 100);                 // output 100msec pulse on PA3
004419  004799  // Notes : only available on PA0 to PA9
004420  004800  //       : Invert the state of an output for "value" milliseconds.
004421  004801  //       : pulseout is non blocking, that is, code execution may continue while
004422  004802  //       : a pulse is occuring, and pulses can occur on multiple pins simultaneously.
004423  004803  //       : If not already an output, pin is automatically made a push/pull output,
004424  004804  //       : and the last state of its output latch will determine pulse polarity.
004425  004805  //       : It's its open drain state is not altered if the pin was already an output.
004426  004806  //       : If pulseout is called while pulseout is still active, the pulse timer
004427  004807  //       : will simply be updated with the new "value" and the pulse will continue
004428  004808  //       : with the extended value.
004429  004809  //       : returns true if the pin number is legal (usually ignored)
004430  004810        
004431  004811        
004432  004812  func pin_Counter("pin", "mode", "OVFfunction"), 1;
004433  004813  // Syntax: pin_Counter(pin, mode, userfunc);
004434  004814  // Usage : pin_Counter(PA5, 1, stopfunc);         // count rising edge pulses on pin PA5, call stopfunc on overflow
004435  004815  // Notes : only available on PA4 to PA9
004436  004816  //       : Connect a counter to a pin to count transistions, and optionally call an event function
004437  004817  //       : when the 16bit counter wraps from 0xFFFF to zero. The counter can be read or written
004438  004818  //       : to at any time with peekW and pokeW, therefore, the count may be set to eg 0xFFF0 so that eg:
004439  004819  //       : user function "OVFfuction" will be called after 16 pulses. If "OVFfunction" is set to zero, only the
004440  004820  //       : counter will increment, and simply wrap back to zero from 0xFFFF. If "OVFfunction" points to a user
004441  004821  //       : function, wnen the event fires, pin_Counter will be disabled, and will need to be re-armed (ie '1shot' operation)
004442  004822  //       : The pin may be configured as an input or output, the function behaves the same.
004443  004823  //       : All six pin counters may be active simultaneously, and the maximum frequency of pin transistions
004444  004824  //       : should not exceed a few Khz in mode 1 and 2and are usually used for simple process control counting.
004445  004825  //       : "mode" has the following effect:-
004446  004826  //       : mode COUNT_OFF(0)  = disconnect the counter from the pin, "OVFfunction" therefore ignored, and counting is inhibited.
004447  004827  //       : mode COUNT_RISE(1) = increment on every rising edge
004448  004828  //       : mode COUNT_FALL(2) = increment on every falling edge
004449  004829  //       : mode COUNT_EDGE(3) = increment on every rising and falling edge
004450  004830        
004451  004831  //------------------------------------------------------------------//
004452  004832  // pin counter mode constants                                       //
004453  004833  //------------------------------------------------------------------//
004454  004834  #CONST
004455  004839  #END
004456  004840        
004457  004841  func Qencoder1("PHApin", "PHBpin", "mode"), 1;
004458  004842  // Syntax: Qencoder1(pinA, pinB, mode);
004459  004843  // Usage : Qencoder1(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #1
004460  004844  // Notes : not available on pins PA14 and PA15
004461  004845  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004462  004846  //       : or written to at any time with peekW and pokeW using the following constants:-
004463  004847  //       : It is necessary to configure the pins first, depending on your requirements, eg
004464  004848  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004465  004849  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004466  004850  //       : Returns true if the pin numbers are legal (usually ignored)
004467  004851  //    QEN1_COUNTER_LO
004468  004852  //    QEN1_COUNTER_HI
004469  004853  //    QEN1_DELTA This is reset to 0 when read
004470  004854        
004471  004855  func Qencoder2("PHApin", "PHBpin", "mode"), 1;
004472  004856  // Syntax: Qencoder2(pinA, pinB, mode);
004473  004857  // Usage : Qencoder2(PA4, PA5, stopfunc);         // connect PA4 and PA5 pins to qudrature encoder module #2
004474  004858  // Notes : not available on pins PA14 and PA15
004475  004859  //       : Connect a quadrature encoder to a pair of pins The position counter and delta can be read
004476  004860  //       : or written to at any time with peekW and pokeW using the following constants:-
004477  004861  //       : It is necessary to configure the pins first, depending on your requirements, eg
004478  004862  //       :           pin_Set(PIN_INP_HI, PA4);     // PA4 as input, with pullup to Vcc
004479  004863  //       : or maybe  pin_Set(PIN_INP, PA4);        // PA4 as input, no pullup or pulldown
004480  004864  //       : Returns true if the pin numbers are legal (usually ignored)
004481  004865  //    QEN2_COUNTER_LO
004482  004866  //    QEN2_COUNTER_HI
004483  004867  //    QEN2_DELTA This is reset to 0 when read
004484  004868        
004485  004869        
004486  004870  func Qencoder1Reset(), 0;
004487  004871  // Syntax: Qencoder1Reset();
004488  004872  // Usage : Qencoder1Reset();     // reset the counter and delta value for encoder #1
004489  004873  // Notes :
004490  004874  //    QEN1_COUNTER_LO is reset to zero
004491  004875  //    QEN1_COUNTER_HI is reset to zero
004492  004876  //    QEN1_DELTA is reset to zero
004493  004877        
004494  004878  func Qencoder2Reset(), 0;
004495  004879  // Syntax: Qencoder2Reset();
004496  004880  // Usage : Qencoder2Reset();     // reset the counter and delta value for encoder #2
004497  004881  // Notes :
004498  004882  //    QEN2_COUNTER_LO is reset to zero
004499  004883  //    QEN2_COUNTER_HI is reset to zero
004500  004884  //    QEN2_DELTA is reset to zero
004501  004885        
004502  004886        
004503  004887  func pin_PulseoutCount("pin", "freq", "count", "function"), 1;        // pulse pin at freq count times calling function when complete
004504  004888  // Syntax: pin_PulseoutCount(pin, freq, count, function);
004505  004889  // Usage : pin_PulseoutCount(PA4, 1000, 5000, 0);            // output 5000 1msec pulses on PA3
004506  004890  // Notes : only available on PA4 to PA9, maximum 3 active at any one time
004507  004891  //       : Invert the state of an output at a "freq" freuency "count" times.
004508  004892  //       : PulseoutCount is non blocking, that is, code execution may continue while
004509  004893  //       : pulses are occuring, and pulses can occur on multiple pins simultaneously.
004510  004894  //       : If not already an output, pin is automatically made a push/pull output,
004511  004895  //       : and the last state of its output latch will determine pulse polarity.
004512  004896  //       : It's its open drain state is not altered if the pin was already an output.
004513  004897  //       : If PulseoutCount is called while PulseoutCount is still active, the pulse counter
004514  004898  //       : will simply have the new "value" added to it.
004515  004899  //       : returns false if the pin number is illegal, freq is < 10, or all counters in use
004516  004900  //       : returns true if the pin number is legal (usually ignored)
004517  004901        
004518  004902  func __reserved72(), 0; // do not remove
004519  004903        
004520  004904  func pwm_Init("pin", "mode", "value"), 1;    // set pin PA4-PA9 for the required PWM mode and select its source
004521  004905  // Syntax: pwm_Init(pin, value);
004522  004906  // Usage : pwm_Init(PA4, 1, 500);                 // output 50% duty cycle on PA4
004523  004907  // Notes : only available on PA4 to PA9
004524  004908  //       : Mode PWM_OFF(0)    : Turn off the PWM (pin is left as output)
004525  004909  //       : Mode PWM_PLAIN(1)  : Plain PWM value is 0-1000, corresponding to 0-100% duty cycle.
004526  004910  //       :                    : Raw frequency ~70khz. A value of 1 is not valid
004527  004911  //       : Mode PWM_SERVO(2)  : Servo PWM value is 100-200, corresponding to 1.00 to 2.00 ms
004528  004912  //       :                    : Values of 0 to 600 are valid (0-6ms), but should be used with caution.
004529  004913  //       :                    : Repetition rate ~50hz or 20ms
004530  004914  //       : Mode PWM_BINARY(3) : Binary PWM value is 0-1024, corresponding to 0-100% duty cycle.
004531  004915  //       :                    : Raw frequency ~68khz. A value of 1 is not valid
004532  004916  //       : pwm_Init is non blocking and the pwm continues until turn off
004533  004917  //       : Returns true if the pin number is legal (usually ignored)
004534  004918        
004535  004919  //------------------------------------------------------------------------------
004536  004920  // PWM Constants
004537  004921  //------------------------------------------------------------------------------
004538  004922  #CONST
004539  004927  #END
004540  004928        
004541  004929  func OW_Reset("pin"), 1;                             // issue 1wire reset command
004542  004930  // Syntax   : OW_Reset(PA0);
004543  004931  // Usage    : OW_Reset(PA0);
004544  004932  // Notes    : Only available on PA0 to PA13
004545  004933  //          : Resets  ONEWIRE device
004546  004934  //          : Returns the status, 0 = ACK.
004547  004935  //          :
004548  004936        
004549  004937  func OW_Read("pin"), 1;                              // read data from 1wire bus
004550  004938  // Syntax   : OW_Read(PA0);
004551  004939  // Usage    : arg1 := OW_Read(PA0);
004552  004940  // Notes    : Only available on PA0 to PA13
004553  004941  //          : Reads value of the ONEWIRE pin
004554  004942  //          : that was previously selected for ONEWIRE comms.
004555  004943  //          :
004556  004944  //          : pin = 0 : the next byte from the ONEWIRE bus
004557  004945        
004558  004946  func OW_Read9("pin"), 1;                             // read data from 1wire bus, 9bit mode
004559  004947  // Syntax   : OW_Read9(PA0);
004560  004948  // Usage    : OW_Read9(PA0);
004561  004949  // Notes    : Only available on PA0 to PA13
004562  004950  //          : Reads 9 bit value of the appropriate ONEWIRE pin
004563  004951  //          : that was previously selected for ONEWIRE comms.
004564  004952  //          :
004565  004953  //          : read the 9 bits from the ONEWIRE bus
004566  004954        
004567  004955  func OW_Write("pin", "value"), 0;                      // write value to 1wire device
004568  004956  // Syntax   : OW_Write(PA0, arg);
004569  004957  // Usage    : OW_Write(PA0, arg);
004570  004958  // Notes    : Only available on PA0 to PA13
004571  004959  //          : Sends ONEWIRE data on the appropriate
004572  004960  //          : pin that was previously  selected as ONEWIRE comms.
004573  004961  //          :
004574  004962  //          : write arg to the ONEWIRE bus
004575  004963        
004576  004964  func __reserved77(), 0; // do not remove
004577  004965  func __reserved78(), 0; // do not remove
004578  004966        
004579  004967  func sys_GetDateVar("&year", "&month", "&day"), 0;              // get year, month, day into variables
004580  004968  // Syntax: sys_GetDateVar(&year, &month, &day);
004581  004969  // Usage : sys_GetDateVar(&year, &month, &day);
004582  004970  // Notes : Retrieves the date values into variables
004583  004971        
004584  004972  func sys_GetTimeVar("&hour", "&minute", "&second", "&msecs"), 0;              // get hour, minute, second, millseconds into variables
004585  004973  // Syntax: sys_GetTimeVar(&hour, &minute, &second, &msecs);
004586  004974  // Usage : sys_GetTimeVar(&hour, &minute, &second, &msecs);
004587  004975  // Notes : Retrieves the time values into variables
004588  004976        
004589  004977  func sys_PmmC(), 0;
004590  004978  // Syntax: sys_PmmC();
004591  004979  // Usage : to(mystring); sys_PmmC();   // save PmmC name and revision string to buffer
004592  004980  // Notes : print the system PmmC name and revision eg "Diablo16\n1.0"
004593  004981  //       : Can be captured to a buffer using the to( function
004594  004982  //       : Returns nothing.
004595  004983        
004596  004984  func sys_Driver(), 0;
004597  004985  // Syntax: sys_Driver();
004598  004986  // Usage : to(mystring); sys_Driver();   // save Driver name and date string to buffer
004599  004987  // Notes : print the system PmmC name and revision eg "uLCD-32WDTU-A\n130411"
004600  004988  //       : Can be captured to a buffer using the to( function
004601  004989  //       : Returns nothing.
004602  004990        
004603  004991  func gfx_Scope("left", "width", "yzero", "n", "xstep", "Yamp", "colorbg", "&old_y1", "&new_y1", "color1", "&old_y2", "&new_y2", "color2", "&old_y3", "&new_y3", "color3", "&old_y4", "&new_y4", "color4"), 0;
004604  004992  // Notes : Draws up to 4 waveforms from table(s) of vertices at the specified origin.
004605  004993  //       : "Left" is the left margin, "Width" is the width, "yzero" is the y position
004606  004994  //       : that corresponds to a y value of zero, normally "Top" + "Height" for
004607  004995  //       : a graph, or "Top" + "Height"/2 for a scope. "n" is the number of
004608  004996  //       : elements in each buffer. This will need to be greater than "width" for negative
004609  004997  //       : "xstep" values. "Yamp" is for amplification in the Y direction, 100 is unity.
004610  004998  //       : pass 0 as the address for any unused traces
004611  004999  //       : X position is incremented each point by "xstep" pixels.
004612  005000  //       : Y values are derived from a Y buffer "newy" (signed values).
004613  005001  //       : 2 buffers need to be supplied, "newy" contains new
004614  005002  //       : points to be drawn, "oldy" contains most recent set
004615  005003  //       : of points to be un-drawn. After the waveform is drawn,
004616  005004  //       : "newy" buffer is automatically copied to "oldy" buffer.
004617  005005        
004618  005006        
004619  005007  func ana_HS("rate", "samples", "&IO1", "&IO2", "&IO3", "&IO4", "COMPLETEfunction"), 0;
004620  005008  // Syntax: ana_HS(rate, samples, IO1buf, IO2buf, IO3buf, IO4buf, userFunction);
004621  005009  // Usage : ana_HS(1000, 10, IO1buf, 0, 0, 0, myFunc);
004622  005010  // Notes : Collects "samples" samples at "rate" frequency for 0 to 4 analogue pins
004623  005011  //       : and calls "COMPLETEfunction" when done.
004624  005012  //       : "rate" is samples in 100 of samples per second
004625  005013  //       : Any unused IOx pins should have their buffer addresses set to 0
004626  005014  //       : For performance reasons samples are taken in chunks of 32, thus if you
004627  005015  //       : request 33 samples there will be a delay of 31 samples before
004628  005016  //       : "COMPLETEfunction" is called
004629  005017  //       : If Touch is enabled this function should be called no more than once per
004630  005018  //       : millisecond, otherwise touch behaviour could be eratic.
004631  005019        
004632  005020        
004633  005021  func sys_ErrorMessage("msgnum"), 1;
004634  005022        
004635  005023  //==============================//
004636  005024  // NeoPixel specific functions  //
004637  005025  //==============================//
004638  005026        
004639  005027  func NP_Write("pin", "data", "size", "Options", "RepeatFirst", "Repeat", "RepeatLast"), 1;    // Write a string of colours to a NeoPixel 'display'
004640  005028  // Syntax: NP_Write(pin, data, size, Options, RepeatFirst, Repeat, RepeatLast);
004641  005029  // Usage : NP_Write(PA4, data, 50, NP_565, 10, 0, 0);                 
004642  005030  // Notes : pin         : The I/O pin for the operation PA0 to PA13
004643  005031  //       : data        : Address of data to be sent
004644  005032  //       : size        : number of colour 'sets' to follow
004645  005033  //       : Options     : format of colour data to be sent, NP_565, NP_RGB, or NP_XRGB. i.e. 2, 3 or 4 bytes per colour
004646  005034  //       : RepeatFirst : Number of times to repeat the first colour (0 means first colour is not considered 'special')
004647  005035  //       : Repeat      : Number of times to repeat the colours between first and last
004648  005036  //       : RepeatLast  : Number of times to repeat the last colour (0 means last colour is not considered 'special')
004649  005037  //       : Returns true if the pin number is legal (usually ignored)
004650  005038  //       : Due to the critical timing requirements of the NeoPixel, the system Timer is disabled during this operation.
004651  005039  //       : Comms Interrupts should also be disabled by the user, otherwise errors may occur.
004652  005040        
004653  005041  // NeoPixel related constants
004654  005042  #CONST
004655  005046  #END
004656  005047        
004657  005048  func __reserved85(), 0; // do not remove
004658  005049  func __reserved86(), 0; // do not remove
004659  005050        
004660  005051  //==============================================//
004661  005052  // spi flash device specific functions          //
004662  005053  //==============================================//
004663  005054        
004664  005055  func spiflash_SIG("spi#", "enablepin"), 1;         // read Jedec signature from SPI Flash device
004665  005056  // Syntax   : spiflash_SIG("spi#","enablepin");
004666  005057  // Usage    : var := spiflash_SIG(SPI1, PA0);
004667  005058  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004668  005059  //          : spi_Init(...) function, the Electronic Signature of the device can be read using this function. The only
004669  005060  //          : devices supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004670  005061  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004671  005062  //          : Release from Deep Power-down, and Read Electronic Signature. Only the low order byte is valid, the upper
004672  005063  //          : byte is ignored.
004673  005064        
004674  005065  func spiflash_ID("spi#", "enablepin"), 1;          // read ID code from FLASH device
004675  005066  // Syntax   : spiflash_ID("spi#","enablepin");
004676  005067  // Usage    : var := spiflash_ID(SPI1, PA0);
004677  005068  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004678  005069  //          : spi_Init(...) function, the memory type and capacity from the flash device can be read using this function
004679  005070  //          : The only devices supported so far M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004680  005071  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004681  005072  //          : Reads the memory type and capacity from the serial FLASH device. Hi byte contains type, and low byte
004682  005073  //          : contains capacity. Refer to the device data sheet for further information.
004683  005074        
004684  005075  func spiflash_BulkErase("spi#", "enablepin"), 0;    // erase the entire FLASH device
004685  005076  // Syntax   : spiflash_BulkErase("spi#","enablepin");
004686  005077  // Usage    : spiflash_BulkErase(SPI1, PA0);
004687  005078  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004688  005079  //          : spi_Init(...) function, the FLASH device can be completely erased using this function. The only devices
004689  005080  //          : supported so far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004690  005081  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004691  005082  //          : Erases the entire flash media device. The function returns no value, and the operation can take up to 80
004692  005083  //          : seconds depending on the size of the flash device. Note that not all devices support this command.
004693  005084        
004694  005085  func spiflash_BlockErase("spi#", "enablepin", "block"), 0;            // erase the required 64k flash block
004695  005086  // Syntax   : spiflash_BlockErase("spi#", "enablepin", "block")
004696  005087  // Usage    : var := spiflash_BlockErase(SPI1, PA0, block_num)
004697  005088  // Notes    : A FLASH storage device connected to the selected SPI port, and correctly initialised with the
004698  005089  //          : spi_Init(...) function, the FLASH block can be erased using this function. The only devices supported so
004699  005090  //          : far are the M25Pxx range of devices which are 512Kbit to 128Mbit Serial Flash Memory.
004700  005091  //          : Other similar devices should also work, provided they do not exceed 128Mbit.
004701  005092  //          : E.g. there are 32 x 64K blocks on a 2Mb flash device.
004702  005093  //          : blockAddress The address of the 64k FLASH block to be erased.
004703  005094  //          : Erases the required block in a FLASH media device. The function returns no value, and the operation
004704  005095  //          : can take up to 3 milliseconds.
004705  005096        
004706  005097  func spiflash_SetAdd("spi#", "HiWord", "LoWord"), 0;           // set stream byte address
004707  005098  // Syntax: spiflash_SetAdd(AddHiWord, AddLoWord);
004708  005099  // Usage : spiflash_SetAdd(SPI1, arg1, arg2);
004709  005100  // Notes : Set FLASH internal Address pointer for bytewise access on the specified SPI port
004710  005101        
004711  005102  func spiflash_Read("*dest", "size", "spi#", "enablepin"), 1;
004712  005103  // Syntax: res := spiflash_Read("*dest", "size", "spi#", "enablepin"),
004713  005104  // Usage : res := spiflash_Read(memblock, 20, SPI1, PA0);
004714  005105  // Notes : Reads the specified number of bytes from the FLASH memory device on the specified SPI port and enable pin
004715  005106  //       : into the specified destination. The destination is a string pointer (i.e. BYTE aligned). The source
004716  005107  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004717  005108  //       : returns number of characters read
004718  005109  //       : if "dest" is zero, data is read direct to GRAM window
004719  005110  //       :
004720  005111        
004721  005112  func spiflash_Write("*source", "size", "spi#", "enablepin"), 1;
004722  005113  // Syntax: res := fwrite("*source", "size", "spi#", "enablepin"),
004723  005114  // Usage : res := fwrite(memblock, 20, SPI1, PA0);
004724  005115  // Notes : Writes the specified number of bytes to the FLASH memory device on the specified SPI port and enable pin
004725  005116  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004726  005117  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004727  005118  //       : returns number of bytes written
004728  005119  //       :
004729  005120        
004730  005121  func spiflash_Image("x", "y", "spi#", "enablepin"), 1;
004731  005122  // Syntax: spiflash_Image(x, y, "spi#", "enablepin");
004732  005123  // Usage : spiflash_Image(10, 10, SPI1, PA0);
004733  005124  // Notes : Display an image from a file at the current FLASH position set by spiflash_SetAdd()
004734  005125  //       : The image is displayed at x,y (with respect to top left corner).
004735  005126        
004736  005127  func spiflash_PutC("char", "spi#", "enablepin"), 0;
004737  005128  // Syntax: spiflash_PutC("char", "spi#", "enablepin");
004738  005129  // Usage : spiflash_PutC('x', SPI1, PA0);
004739  005130  // Notes : Writes a character (or byte) to the FLASH memory device on the specified SPI port and enable pin
004740  005131  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004741  005132  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004742  005133        
004743  005134  func spiflash_GetC("spi#", "enablepin"), 1;
004744  005135  // Syntax: spiflash_GetC("spi#", "enablepin");
004745  005136  // Usage : mychar := fgetC(SPI1, PA0);
004746  005137  // Notes : Reads a character (or byte) from the FLASH memory device on the specified SPI port and enable pin
004747  005138  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004748  005139  //       : by subsequent reads or writes.
004749  005140  //       : returns next char from file
004750  005141        
004751  005142  func spiflash_PutW("word", "spi#", "enablepin"), 0;
004752  005143  // Syntax: spiflash_PutW("word", "spi#", "enablepin");
004753  005144  // Usage : spiflash_PutW(0x1234, SPI1, PA0);
004754  005145  // Notes : Writes a word to the FLASH memory device on the specified SPI port and enable pin
004755  005146  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004756  005147  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004757  005148        
004758  005149  func spiflash_GetW("spi#", "enablepin"), 1;
004759  005150  // Syntax: spiflash_GetW("spi#", "enablepin");
004760  005151  // Usage : myword := fgetW(SPI1, PA0);
004761  005152  // Notes : Reads a word from the FLASH memory device on the specified SPI port and enable pin
004762  005153  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004763  005154  //       : by subsequent reads or writes.
004764  005155  // Notes : returns next word in file
004765  005156        
004766  005157  func spiflash_PutS("*source", "spi#", "enablepin"), 1;
004767  005158  // Syntax: res := spiflash_Puts("*source", "spi#", "enablepin"),
004768  005159  // Usage : res := spiflash_Puts(mystring, SPI1, PA0);
004769  005160  // Notes : Writes a string to the FLASH memory device on the specified SPI port and enable pin
004770  005161  //       : from the specified source. The source is a standard address or pointer (i.e. WORD aligned). The target
004771  005162  //       : is the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes.
004772  005163  //       : returns number of characters written
004773  005164  //       :
004774  005165        
004775  005166  func spiflash_GetS("*string", "size", "spi#", "enablepin"), 1;
004776  005167  // Syntax: res := spiflash_Gets("*string", "size", "spi#", "enablepin");
004777  005168  // Usage : res := spiflash_Gets(mystr , 81, SPI1, PA0); // read up to 80 chars
004778  005169  // Notes : Reads a string from the FLASH memory device on the specified SPI port and enable pin
004779  005170  //       : into the specified destination. The source is the address set by spiflash_SetAdd(), or incremented
004780  005171  //       : by subsequent reads or writes.
004781  005172  //       : returns pointer to string or null if failed.
004782  005173  //       : spiflash_GetS(...) automatically appends a null-terminator to the data read.
004783  005174  //       : NB:- only reads up to "size-1" characters into "string"
004784  005175  //       : spiflash_GetS(...) will stop reading when any of the following conditions are true:
004785  005176  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
004786  005177  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
004787  005178  //       : C] It reaches the end of file
004788  005179  //       : D] A read error occurs.
004789  005180        
004790  005181  func spiflash_LoadFunction("spi#", "enablepin"), 1;
004791  005182  // Syntax: res := spiflash_LoadFunction("spi#", "enablepin");
004792  005183  // Usage : myfunc := spiflash_LoadFunction(SPI1, PA0);
004793  005184  // Notes : Load a function or program from the FLASH memory device on the specified SPI port and enable pin at
004794  005185  //       : the address set by spiflash_SetAdd(), or incremented by subsequent reads or writes and
004795  005186  //       : return a function pointer to the allocation.
004796  005187  //       : The function can then be invoked just like any other
004797  005188  //       : function would be called via a function pointer.
004798  005189  //       : Parameters may be passed to it in a conventional way.
004799  005190  //       : The function may be discarded at any time when no
004800  005191  //       : longer required, thus freeing its memory resources.
004801  005192  //       : The loaded function can be discarded with mem_Free(..)
004802  005193  //       : eg:
004803  005194  //       : popupWindow := spiflash_LoadFunction("popupWindow1.4fn");
004804  005195  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
004805  005196  //       : then elsewhere in your program:-
004806  005197  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
004807  005198  //       : if(res == QUIT_APPLICATION) goto exitApp;
004808  005199  //       : Later in your program, when popupWindow is no longer
004809  005200  //       : required for the application:-
004810  005201  //       : res := mem_Free(popupWindow);
004811  005202  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
004812  005203  //       : The callers stack is shared by the loaded function,
004813  005204  //       : however any global variables in the loaded function
004814  005205  //       : are private to that function.
004815  005206  //
004816  005207        
004817  005208  func spiflash_Run("spi#", "enablepin", "arglistptr"), 1;
004818  005209  // Syntax: res := spiflash_Run("spi#", "enablepin", "arglistptr");
004819  005210  // Usage : res := spiflash_Run(SPI1, PA0, argptr);
004820  005211  // Notes : current program releases any allocated memory but
004821  005212  //       : retains the stack and global memory.
004822  005213  //       : If arglistptr is 0, no arguments are passed, else
004823  005214  //       : arglist points to an array, the first element being
004824  005215  //       : the number of elements in the array.
004825  005216  //       : func 'main' in the called program accepts
004826  005217  //       : the arguments, if any. The arguments can only
004827  005218  //       : be passed by value, no pointers or references can be
004828  005219  //       : used as all memory is cleared before the file
004829  005220  //       : is loaded. Refer to spiflash_Exec and spiflash_LoadFunction
004830  005221  //       : for functions that can pass by reference.
004831  005222        
004832  005223  func spiflash_Exec("spi#", "enablepin", "arglistptr"), 1;
004833  005224  // Syntax: res := spiflash_Exec("spi#", "enablepin", "arglistptr");
004834  005225  // Usage : res := spiflash_Exec(SPI1, PA0, "arglistptr");
004835  005226  // Notes : returns like a function, current program
004836  005227  //       : calling program is kept active and control returns to it.
004837  005228  //       : If arglistptr is 0, no arguments are passed, else
004838  005229  //       : arglist points to an array, the first element being
004839  005230  //       : the number of elements in the array.
004840  005231  //       : func 'main' in the called program accepts the arguments.
004841  005232  //       : This function is similar to spiflash_LoadFunction(...), however,
004842  005233  //       : the function argument list is passed by pointer, and
004843  005234  //       : the memory consumed by the function is released as
004844  005235  //       : soon as the function completes.
004845  005236        
004846  005237  func spiflash_LoadImageControl("spi#", "enablepin"), 1;
004847  005238  // Syntax: hImagelist := spiflash_LoadImageControl ("spi#", "enablepin"),
004848  005239  // Usage : hImagelist := spiflash_LoadImageControl (SPI1, PA0);
004849  005240  // Notes : Reads a control file to create an image list from the FLASH memory device on the specified SPI port
004850  005241  //       : and enable pin. The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004851  005242  //       : or writes. The ".dat" file is first and is immediately followed a ^Z and then by the ".gci' file.
004852  005243  //       : Returns NULL if function fails.
004853  005244  //       : Returns a handle (pointer to the memory allocation) to the
004854  005245  //       : image control list that has been created.
004855  005246        
004856  005247  // Notes : This function Calculates the size of a chunk of memory required for
004857  005248  //       : a image list and populates it from the image control file ("*.dat")
004858  005249  //       : therefore, when imagelist is no longer required, you must de-allocate
004859  005250  //       : the image list memory by using eg:- mem_Free(hImagelist);
004860  005251  //       : to restore the heap.
004861  005252  //       :
004862  005253        
004863  005254  func spiflash_PlayWAV("spi#", "enablepin"), 1;
004864  005255  // Syntax: spiflash_PlayWAV("spi#", "enablepin");
004865  005256  // Usage : spiflash_PlayWAV(SPI1, PA0);
004866  005257  // Notes : Play a wave file from the FLASH memory device on the specified SPI port and enable pin.
004867  005258  //       : The source is the address set by spiflash_SetAdd(), or incremented by subsequent reads
004868  005259  //       : or writes.
004869  005260  //       : This function automatically grabs a chunk
004870  005261  //       : of memory for a file buffer, and a wave
004871  005262  //       : buffer. The minimum memory requirement is
004872  005263  //       : about 580 bytes for the disk io service and
004873  005264  //       : a minimum wave buffer size of 1024. The size
004874  005265  //       : of the wave buffer allocation
004875  005266  //       : can be increased by the snd_BufSize function.
004876  005267  //       : The default size 1024 bytes.
004877  005268  //       : NB the memory is only required during the
004878  005269  //       : duration of play, and is automatically
004879  005270  //       : released while not in use.
004880  005271  //       : See the Sound Class services for other associated controls.
004881  005272  //       : If there are no errors, returns number of blocks to play (1 to 32767)
004882  005273  //       : If errors occured, the folling is returned
004883  005274  //       : -7  : Insufficient memory available for WAV buffer and file
004884  005275  //       : -6  : cant play this rate
004885  005276  //       : -5  : no data chunk found in first rsector
004886  005277  //       : -4  : no format data
004887  005278  //       : -3  : no wave chunk signature
004888  005279  //       : -2  : bad wave file format
004889  005280  //       : -1  : file not found
004890  005281        
004891  005282  //==============================================//
004892  005283  // more com functions                           //
004893  005284  //==============================================//
004894  005285        
004895  005286  func com1_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004896  005287  // Syntax   : com1_TXblock("buf", "bufsize");
004897  005288  // Usage    : com1_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004898  005289  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004899  005290  //          : if a transmit buffer is active and space is available this function will return almost
004900  005291  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004901  005292        
004902  005293  func com1_RXblock("buf", "bufsize"), 0;                       // commence a block reception
004903  005294  // Syntax   : com1_RXblock("buf", "bufsize");
004904  005295  // Usage    : com1_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004905  005296  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004906  005297  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004907  005298  //          : immediately otherwise it will block until until the required bytes are received.
004908  005299        
004909  005300  func com2_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004910  005301  // Syntax   : com_TXblock("buf", "bufsize");
004911  005302  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004912  005303  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004913  005304  //          : if a transmit buffer is active and space is available this function will return almost
004914  005305  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004915  005306        
004916  005307  func com2_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004917  005308  // Syntax   : com_RXblock("buf", "bufsize");
004918  005309  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004919  005310  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004920  005311  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004921  005312  //          : immediately otherwise it will block until until the required bytes are received.
004922  005313        
004923  005314  func com3_TXblock("buf", "bufsize"), 0;                       // commence a block transmission
004924  005315  // Syntax   : com_TXblock("buf", "bufsize");
004925  005316  // Usage    : com_TXblock(mybuf, 30);                         // point to the TX buffer and send 30 character
004926  005317  // *Notes   : Bufsize bytes are transmitted to the serial port from the string pointer "buf".
004927  005318  //          : if a transmit buffer is active and space is available this function will return almost
004928  005319  //          : immediately otherwise it will block until until the space is available, or the data is transmitted.
004929  005320        
004930  005321  func com3_RXblock("buf", "bufsize"), 0;                       // commence an block reception
004931  005322  // Syntax   : com_RXblock("buf", "bufsize");
004932  005323  // Usage    : com_RXblock(mybuf, 30);                        // point to the RX buffer and receive 30 character
004933  005324  // *Notes   : Bufsize bytes are received from the serial port to the string pointer "buf".
004934  005325  //          : if a receive buffer is active and bufsize characters are available this function will return almost
004935  005326  //          : immediately otherwise it will block until until the required bytes are received.
004936  005327        
004937  005328  func disp_BlitPixelsFromCOM1(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004938  005329  // Syntax: disp_BlitPixelsFromCOM1();                  New in v1.1
004939  005330  // Usage : disp_BlitPixelsFromCOM1();
004940  005331  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004941  005332  //       : display from the specified com port.
004942  005333        
004943  005334  func disp_BlitPixelsFromCOM2(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004944  005335  // Syntax: disp_BlitPixelsFromCOM2();                  New in v1.1
004945  005336  // Usage : disp_BlitPixelsFromCOM2();
004946  005337  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004947  005338  //       : display from the specified com port.
004948  005339        
004949  005340  func disp_BlitPixelsFromCOM3(), 0;                     // Writes current GRAM window pixels to the display from the COM port
004950  005341  // Syntax: disp_BlitPixelsFromCOM3();                  New in v1.1
004951  005342  // Usage : disp_BlitPixelsFromCOM3();
004952  005343  // Notes : Writes the number of pixels defined by the last disp_setGRAM() call to the
004953  005344  //       : display from the specified com port.
004954  005345        
004955  005346        
004956  005347  //==============================================//
004957  005348  // crc generation functions                     //
004958  005349  //==============================================//
004959  005350        
004960  005351  func crc_CSUM_8("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate the 8bit LRC
004961  005352  // *Notes   : (if you calculate all of the incoming data
004962  005353  //          : INCLUDING the CRC, the result should be 0x00
004963  005354  //          : This is equivalent to simple addition of all bytes
004964  005355  //          : and returning the negated sum an 8 bit value.
004965  005356  //          : For the standard test string "123456789",
004966  005357  //          : crc_CSUM_8 will return 0x0023.
004967  005358        
004968  005359        
004969  005360  func crc_16("buf","count"), 1;                      // given a pointer to a buffer and a byte count, calculate CRC16
004970  005361  // *Notes   : The "mode" argument may be READ, WRITE or CHECK
004971  005362  //          : (if you calculate all of the incoming data
004972  005363  //          : INCLUDING the CRC, the result should be 0x0000
004973  005364  //          : For the standard test string "123456789",
004974  005365  //          : crc_16 will return 0xBB3D.
004975  005366        
004976  005367        
004977  005368  func crc_MODBUS("buf","count"), 1;                  // given a pointer to a buffer and a byte count, calculate CRC16 for MODBUS
004978  005369  // *Notes   : (if you calculate all of the incoming data
004979  005370  //          : INCLUDING the CRC, the result should be 0x0000
004980  005371  //          : For the standard test string "123456789",
004981  005372  //          : crc_MODBUS will return 0x4B37.
004982  005373        
004983  005374        
004984  005375  func crc_CCITT("buf","count","seed"), 1;            // given a pointer to a buffer, byte count and seed, calculate the 16bit CRC for seed
004985  005376  // *Notes   : (if you calculate all of the incoming data
004986  005377  //          : INCLUDING the CRC, the result should be 0x0000
004987  005378  //          : For the standard test string "123456789",
004988  005379  //          : crc_CCITT will return the following:-
004989  005380  //          : seed = 0 (XMODEM protocol) result = 0x31C3
004990  005381  //          : seed = 0xFFFF, result = 0x29B1
004991  005382  //          : seed = 0x1D0F, result = 0xE5CC
004992  005383        
004993  005384        
004994  005385  //------------------------------------------------------------------//
004995  005386  // CONSTANTS
004996  005387  //------------------------------------------------------------------//
004997  005388        
004998  005389  #CONST
004999  005393  #END
005000  005394        
005001  005395  // timebase constants for timebase_init
005002  005396  // NB only TB2 and TB4 can be used for synchronous A2D sampling.
005003  005397  #CONST
005004  005408  #END
005005  005409        
005006  005410        
005007  005411  // generic constants
005008  005412  #CONST
005009  005420  #END
005010  005421        
005011  005422        
005012  005423        
005013  005424  //gfx_Get() related constants
005014  005425  #CONST
005015  005434  #END
005016  005435        
005017  005436        
005018  005437        
005019  005438        
005020  005439  #CONST
005021  005452  #END
005022  005453        
005023  005454        
005024  005455  #CONST
005025  005480  #END
005026  005481        
005027  005482        
005028  005483        
005029  005484        
005030  005485  // timer control  related constants
005031  005486  #CONST
005032  005495  #END
005033  005496        
005034  005497        
005035  005498        
005036  005499  //------------------------------------------------------------------------------
005037  005500  // system WORD variables accesible with peekW and pokeW or pointer access
005038  005501  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
005039  005502  // can also be accessed with peekW and pokeW
005040  005503  //------------------------------------------------------------------------------
005041  005504        
005042  005505  #CONST
005043  005600  #END
005044  005601        
005045  005602  #CONST
005046  005767  #END
005047  005768        
005048  005769        
005049  005770        
005050  005771  //==================================================================================================
005051  005772        
005052  005773        
005053  005774        
005054  000013      #ENDIF
005055  000014        
005056  000015        
005057  000016  //===========================================================================================
005058  000017        
005059  000018        
005060  000002        
005061  000003  // generated 19/08/2015 9:12:08
005062  000004        
005063  000005        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

005064  000006  #inherit "4DGL_16bitColours.fnc"
005065  000006  #inherit "4DGL_16bitColours.fnc"
005066  000004  */
005067  000005        
005068  000006        
005069  000007        
005070  000008  #CONST
005071  000149  #END
005072  000150        
005073  000007        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

005074  000008  #inherit "VisualConst.inc"
005075  000008  #inherit "VisualConst.inc"
005076  000001  // Line Patterns
005077  000002  #constant  LPCOARSE    0xF0F0
005078  000002  #constant  LPCOARSE    0xF0F0
005079  000003  #constant  LPMEDIUM    0x3333
005080  000003  #constant  LPMEDIUM    0x3333
005081  000004  #constant  LPFINE      0xAAAA
005082  000004  #constant  LPFINE      0xAAAA
005083  000005  #constant  LPDASHDOT   0x03CF
005084  000005  #constant  LPDASHDOT   0x03CF
005085  000006  #constant  LPDASHDOTDOT 0x0333
005086  000006  #constant  LPDASHDOTDOT 0x0333
005087  000007  #constant  LPSOLID     0x0000
005088  000007  #constant  LPSOLID     0x0000
005089  000009        
005090  000010        
file V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1Const.inc

005091  000011  #inherit "RepRap_Touchv1Const.inc"
005092  000011  #inherit "RepRap_Touchv1Const.inc"
005093  000001  // File generated 19/08/2015 9:11:40
005094  000002  // Warning! This is a generated file, any manual changes will be
005095  000003  // lost during the next generation.
005096  000004        
005097  000005  #constant  Strings1Count    1
005098  000005  #constant  Strings1Count    1
005099  000006  #constant  Strings1Size     30
005100  000006  #constant  Strings1Size     30
005101  000007  #constant  Strings3Count    1
005102  000007  #constant  Strings3Count    1
005103  000008  #constant  Strings3Size     18
005104  000008  #constant  Strings3Size     18
005105  000009  #constant  Strings4Count    1
005106  000009  #constant  Strings4Count    1
005107  000010  #constant  Strings4Size     25
005108  000010  #constant  Strings4Size     25
005109  000011  #constant  Strings6Count    1
005110  000011  #constant  Strings6Count    1
005111  000012  #constant  Strings6Size     31
005112  000012  #constant  Strings6Size     31
005113  000013  #constant  Strings2Count    0
005114  000013  #constant  Strings2Count    0
005115  000014  #constant  Strings2Size     1
005116  000014  #constant  Strings2Size     1
005117  000015  #constant  Strings0Count    1
005118  000015  #constant  Strings0Count    1
005119  000016  #constant  Strings0Size     7
005120  000016  #constant  Strings0Size     7
005121  000017  #constant  Strings9Count    0
005122  000017  #constant  Strings9Count    0
005123  000018  #constant  Strings9Size     1
005124  000018  #constant  Strings9Size     1
005125  000019  #constant  Strings34Count    0
005126  000019  #constant  Strings34Count    0
005127  000020  #constant  Strings34Size     1
005128  000020  #constant  Strings34Size     1
005129  000021  #constant  Strings36Count    0
005130  000021  #constant  Strings36Count    0
005131  000022  #constant  Strings36Size     1
005132  000022  #constant  Strings36Size     1
005133  000023  #constant  Strings37Count    0
005134  000023  #constant  Strings37Count    0
005135  000024  #constant  Strings37Size     1
005136  000024  #constant  Strings37Size     1
005137  000025  #constant  Strings12Count    1
005138  000025  #constant  Strings12Count    1
005139  000026  #constant  Strings12Size     14
005140  000026  #constant  Strings12Size     14
005141  000027  #constant  Strings14Count    1
005142  000027  #constant  Strings14Count    1
005143  000028  #constant  Strings14Size     23
005144  000028  #constant  Strings14Size     23
005145  000029  #constant  Strings16Count    0
005146  000029  #constant  Strings16Count    0
005147  000030  #constant  Strings16Size     1
005148  000030  #constant  Strings16Size     1
005149  000031  #constant  Strings15Count    1
005150  000031  #constant  Strings15Count    1
005151  000032  #constant  Strings15Size     24
005152  000032  #constant  Strings15Size     24
005153  000033  #constant  Strings11Count    1
005154  000033  #constant  Strings11Count    1
005155  000034  #constant  Strings11Size     73
005156  000034  #constant  Strings11Size     73
005157  000035  #constant  Strings24Count    1
005158  000035  #constant  Strings24Count    1
005159  000036  #constant  Strings24Size     26
005160  000036  #constant  Strings24Size     26
005161  000037  #constant  Strings25Count    1
005162  000037  #constant  Strings25Count    1
005163  000038  #constant  Strings25Size     10
005164  000038  #constant  Strings25Size     10
005165  000039  #constant  Strings26Count    1
005166  000039  #constant  Strings26Count    1
005167  000040  #constant  Strings26Size     10
005168  000040  #constant  Strings26Size     10
005169  000041  #constant  Strings27Count    1
005170  000041  #constant  Strings27Count    1
005171  000042  #constant  Strings27Size     11
005172  000042  #constant  Strings27Size     11
005173  000043  #constant  Strings7Count    0
005174  000043  #constant  Strings7Count    0
005175  000044  #constant  Strings7Size     1
005176  000044  #constant  Strings7Size     1
005177  000045  #constant  Strings8Count    0
005178  000045  #constant  Strings8Count    0
005179  000046  #constant  Strings8Size     1
005180  000046  #constant  Strings8Size     1
005181  000047  #constant  Strings38Count    0
005182  000047  #constant  Strings38Count    0
005183  000048  #constant  Strings38Size     1
005184  000048  #constant  Strings38Size     1
005185  000049  #constant  Strings39Count    0
005186  000049  #constant  Strings39Count    0
005187  000050  #constant  Strings39Size     1
005188  000050  #constant  Strings39Size     1
005189  000051  #constant  Strings40Count    1
005190  000051  #constant  Strings40Count    1
005191  000052  #constant  Strings40Size     7
005192  000052  #constant  Strings40Size     7
005193  000053  #constant  Strings41Count    1
005194  000053  #constant  Strings41Count    1
005195  000054  #constant  Strings41Size     7
005196  000054  #constant  Strings41Size     7
005197  000055  #constant  Strings42Count    1
005198  000055  #constant  Strings42Count    1
005199  000056  #constant  Strings42Size     7
005200  000056  #constant  Strings42Size     7
005201  000057  #constant  Strings43Count    0
005202  000057  #constant  Strings43Count    0
005203  000058  #constant  Strings43Size     1
005204  000058  #constant  Strings43Size     1
005205  000059  #constant  Strings44Count    0
005206  000059  #constant  Strings44Count    0
005207  000060  #constant  Strings44Size     1
005208  000060  #constant  Strings44Size     1
005209  000061  #constant  Strings45Count    0
005210  000061  #constant  Strings45Count    0
005211  000062  #constant  Strings45Size     1
005212  000062  #constant  Strings45Size     1
005213  000063  #constant  Strings51Count    0
005214  000063  #constant  Strings51Count    0
005215  000064  #constant  Strings51Size     1
005216  000064  #constant  Strings51Size     1
005217  000065  #constant  Strings52Count    0
005218  000065  #constant  Strings52Count    0
005219  000066  #constant  Strings52Size     1
005220  000066  #constant  Strings52Size     1
005221  000067  #constant  Strings19Count    1
005222  000067  #constant  Strings19Count    1
005223  000068  #constant  Strings19Size     94
005224  000068  #constant  Strings19Size     94
005225  000069  #constant  Strings29Count    1
005226  000069  #constant  Strings29Count    1
005227  000070  #constant  Strings29Size     53
005228  000070  #constant  Strings29Size     53
005229  000071  #constant  Strings30Count    1
005230  000071  #constant  Strings30Count    1
005231  000072  #constant  Strings30Size     27
005232  000072  #constant  Strings30Size     27
005233  000073  #constant  Strings31Count    1
005234  000073  #constant  Strings31Count    1
005235  000074  #constant  Strings31Size     7
005236  000074  #constant  Strings31Size     7
005237  000075  #constant  Strings32Count    1
005238  000075  #constant  Strings32Count    1
005239  000076  #constant  Strings32Size     19
005240  000076  #constant  Strings32Size     19
005241  000077  #constant  Strings49Count    1
005242  000077  #constant  Strings49Count    1
005243  000078  #constant  Strings49Size     17
005244  000078  #constant  Strings49Size     17
005245  000079  #constant  Strings50Count    0
005246  000079  #constant  Strings50Count    0
005247  000080  #constant  Strings50Size     1
005248  000080  #constant  Strings50Size     1
005249  000081  #constant  Strings13Count    1
005250  000081  #constant  Strings13Count    1
005251  000082  #constant  Strings13Size     3
005252  000082  #constant  Strings13Size     3
005253  000083  #constant  Strings46Count    0
005254  000083  #constant  Strings46Count    0
005255  000084  #constant  Strings46Size     1
005256  000084  #constant  Strings46Size     1
005257  000085  #constant  Strings47Count    1
005258  000085  #constant  Strings47Count    1
005259  000086  #constant  Strings47Size     3
005260  000086  #constant  Strings47Size     3
005261  000087  #constant  Strings48Count    0
005262  000087  #constant  Strings48Count    0
005263  000088  #constant  Strings48Size     1
005264  000088  #constant  Strings48Size     1
005265  000089  #constant  Strings53Count    1
005266  000089  #constant  Strings53Count    1
005267  000090  #constant  Strings53Size     68
005268  000090  #constant  Strings53Size     68
005269  000091  // object indexes into ImageControl
005270  000092  #CONST
005271  000320  #END
005272  000321        
005273  000322  #constant  Strings5Size     0
005274  000322  #constant  Strings5Size     0
005275  000323  #constant  Strings5StartH   0
005276  000323  #constant  Strings5StartH   0
005277  000324  #constant  Strings5StartL   0
005278  000324  #constant  Strings5StartL   0
005279  000325  #constant  Strings10Size     0
005280  000325  #constant  Strings10Size     0
005281  000326  #constant  Strings10StartH   0
005282  000326  #constant  Strings10StartH   0
005283  000327  #constant  Strings10StartL   0
005284  000327  #constant  Strings10StartL   0
005285  000328  #constant  Strings17Size     0
005286  000328  #constant  Strings17Size     0
005287  000329  #constant  Strings17StartH   0
005288  000329  #constant  Strings17StartH   0
005289  000330  #constant  Strings17StartL   0
005290  000330  #constant  Strings17StartL   0
005291  000331  #constant  Strings18Size     0
005292  000331  #constant  Strings18Size     0
005293  000332  #constant  Strings18StartH   0
005294  000332  #constant  Strings18StartH   0
005295  000333  #constant  Strings18StartL   0
005296  000333  #constant  Strings18StartL   0
005297  000334  #constant  Strings20Size     0
005298  000334  #constant  Strings20Size     0
005299  000335  #constant  Strings20StartH   0
005300  000335  #constant  Strings20StartH   0
005301  000336  #constant  Strings20StartL   0
005302  000336  #constant  Strings20StartL   0
005303  000337  #constant  Strings21Size     0
005304  000337  #constant  Strings21Size     0
005305  000338  #constant  Strings21StartH   0
005306  000338  #constant  Strings21StartH   0
005307  000339  #constant  Strings21StartL   0
005308  000339  #constant  Strings21StartL   0
005309  000340  #constant  Strings22Size     0
005310  000340  #constant  Strings22Size     0
005311  000341  #constant  Strings22StartH   0
005312  000341  #constant  Strings22StartH   0
005313  000342  #constant  Strings22StartL   0
005314  000342  #constant  Strings22StartL   0
005315  000343  #constant  Strings23Size     0
005316  000343  #constant  Strings23Size     0
005317  000344  #constant  Strings23StartH   0
005318  000344  #constant  Strings23StartH   0
005319  000345  #constant  Strings23StartL   0
005320  000345  #constant  Strings23StartL   0
005321  000346  #constant  Strings28Size     0
005322  000346  #constant  Strings28Size     0
005323  000347  #constant  Strings28StartH   0
005324  000347  #constant  Strings28StartH   0
005325  000348  #constant  Strings28StartL   0
005326  000348  #constant  Strings28StartL   0
005327  000349  #constant  Strings33Size     0
005328  000349  #constant  Strings33Size     0
005329  000350  #constant  Strings33StartH   0
005330  000350  #constant  Strings33StartH   0
005331  000351  #constant  Strings33StartL   0
005332  000351  #constant  Strings33StartL   0
005333  000352  #constant  Strings35Size     0
005334  000352  #constant  Strings35Size     0
005335  000353  #constant  Strings35StartH   0
005336  000353  #constant  Strings35StartH   0
005337  000354  #constant  Strings35StartL   0
005338  000354  #constant  Strings35StartL   0
005339  000355  #constant  Strings1StartH   0x0
005340  000355  #constant  Strings1StartH   0x0
005341  000356  #constant  Strings1StartL   0x0
005342  000356  #constant  Strings1StartL   0x0
005343  000357  #constant  Strings3StartH   0x0
005344  000357  #constant  Strings3StartH   0x0
005345  000358  #constant  Strings3StartL   0x200
005346  000358  #constant  Strings3StartL   0x200
005347  000359  #constant  Strings4StartH   0x0
005348  000359  #constant  Strings4StartH   0x0
005349  000360  #constant  Strings4StartL   0x400
005350  000360  #constant  Strings4StartL   0x400
005351  000361  #constant  Strings6StartH   0x0
005352  000361  #constant  Strings6StartH   0x0
005353  000362  #constant  Strings6StartL   0x600
005354  000362  #constant  Strings6StartL   0x600
005355  000363  #constant  Strings2StartH   0x0
005356  000363  #constant  Strings2StartH   0x0
005357  000364  #constant  Strings2StartL   0x800
005358  000364  #constant  Strings2StartL   0x800
005359  000365  #constant  Strings0StartH   0x0
005360  000365  #constant  Strings0StartH   0x0
005361  000366  #constant  Strings0StartL   0xA00
005362  000366  #constant  Strings0StartL   0xA00
005363  000367  #constant  Strings9StartH   0x0
005364  000367  #constant  Strings9StartH   0x0
005365  000368  #constant  Strings9StartL   0xC00
005366  000368  #constant  Strings9StartL   0xC00
005367  000369  #constant  Strings34StartH   0x0
005368  000369  #constant  Strings34StartH   0x0
005369  000370  #constant  Strings34StartL   0xE00
005370  000370  #constant  Strings34StartL   0xE00
005371  000371  #constant  Strings36StartH   0x0
005372  000371  #constant  Strings36StartH   0x0
005373  000372  #constant  Strings36StartL   0x1000
005374  000372  #constant  Strings36StartL   0x1000
005375  000373  #constant  Strings37StartH   0x0
005376  000373  #constant  Strings37StartH   0x0
005377  000374  #constant  Strings37StartL   0x1200
005378  000374  #constant  Strings37StartL   0x1200
005379  000375  #constant  Strings12StartH   0x0
005380  000375  #constant  Strings12StartH   0x0
005381  000376  #constant  Strings12StartL   0x1400
005382  000376  #constant  Strings12StartL   0x1400
005383  000377  #constant  Strings14StartH   0x0
005384  000377  #constant  Strings14StartH   0x0
005385  000378  #constant  Strings14StartL   0x1600
005386  000378  #constant  Strings14StartL   0x1600
005387  000379  #constant  Strings16StartH   0x0
005388  000379  #constant  Strings16StartH   0x0
005389  000380  #constant  Strings16StartL   0x1800
005390  000380  #constant  Strings16StartL   0x1800
005391  000381  #constant  Strings15StartH   0x0
005392  000381  #constant  Strings15StartH   0x0
005393  000382  #constant  Strings15StartL   0x1A00
005394  000382  #constant  Strings15StartL   0x1A00
005395  000383  #constant  Strings11StartH   0x0
005396  000383  #constant  Strings11StartH   0x0
005397  000384  #constant  Strings11StartL   0x1C00
005398  000384  #constant  Strings11StartL   0x1C00
005399  000385  #constant  Strings24StartH   0x0
005400  000385  #constant  Strings24StartH   0x0
005401  000386  #constant  Strings24StartL   0x1E00
005402  000386  #constant  Strings24StartL   0x1E00
005403  000387  #constant  Strings25StartH   0x0
005404  000387  #constant  Strings25StartH   0x0
005405  000388  #constant  Strings25StartL   0x2000
005406  000388  #constant  Strings25StartL   0x2000
005407  000389  #constant  Strings26StartH   0x0
005408  000389  #constant  Strings26StartH   0x0
005409  000390  #constant  Strings26StartL   0x2200
005410  000390  #constant  Strings26StartL   0x2200
005411  000391  #constant  Strings27StartH   0x0
005412  000391  #constant  Strings27StartH   0x0
005413  000392  #constant  Strings27StartL   0x2400
005414  000392  #constant  Strings27StartL   0x2400
005415  000393  #constant  Strings7StartH   0x0
005416  000393  #constant  Strings7StartH   0x0
005417  000394  #constant  Strings7StartL   0x2600
005418  000394  #constant  Strings7StartL   0x2600
005419  000395  #constant  Strings8StartH   0x0
005420  000395  #constant  Strings8StartH   0x0
005421  000396  #constant  Strings8StartL   0x2800
005422  000396  #constant  Strings8StartL   0x2800
005423  000397  #constant  Strings38StartH   0x0
005424  000397  #constant  Strings38StartH   0x0
005425  000398  #constant  Strings38StartL   0x2A00
005426  000398  #constant  Strings38StartL   0x2A00
005427  000399  #constant  Strings39StartH   0x0
005428  000399  #constant  Strings39StartH   0x0
005429  000400  #constant  Strings39StartL   0x2C00
005430  000400  #constant  Strings39StartL   0x2C00
005431  000401  #constant  Strings40StartH   0x0
005432  000401  #constant  Strings40StartH   0x0
005433  000402  #constant  Strings40StartL   0x2E00
005434  000402  #constant  Strings40StartL   0x2E00
005435  000403  #constant  Strings41StartH   0x0
005436  000403  #constant  Strings41StartH   0x0
005437  000404  #constant  Strings41StartL   0x3000
005438  000404  #constant  Strings41StartL   0x3000
005439  000405  #constant  Strings42StartH   0x0
005440  000405  #constant  Strings42StartH   0x0
005441  000406  #constant  Strings42StartL   0x3200
005442  000406  #constant  Strings42StartL   0x3200
005443  000407  #constant  Strings43StartH   0x0
005444  000407  #constant  Strings43StartH   0x0
005445  000408  #constant  Strings43StartL   0x3400
005446  000408  #constant  Strings43StartL   0x3400
005447  000409  #constant  Strings44StartH   0x0
005448  000409  #constant  Strings44StartH   0x0
005449  000410  #constant  Strings44StartL   0x3600
005450  000410  #constant  Strings44StartL   0x3600
005451  000411  #constant  Strings45StartH   0x0
005452  000411  #constant  Strings45StartH   0x0
005453  000412  #constant  Strings45StartL   0x3800
005454  000412  #constant  Strings45StartL   0x3800
005455  000413  #constant  Strings51StartH   0x0
005456  000413  #constant  Strings51StartH   0x0
005457  000414  #constant  Strings51StartL   0x3A00
005458  000414  #constant  Strings51StartL   0x3A00
005459  000415  #constant  Strings52StartH   0x0
005460  000415  #constant  Strings52StartH   0x0
005461  000416  #constant  Strings52StartL   0x3C00
005462  000416  #constant  Strings52StartL   0x3C00
005463  000417  #constant  Strings19StartH   0x0
005464  000417  #constant  Strings19StartH   0x0
005465  000418  #constant  Strings19StartL   0x3E00
005466  000418  #constant  Strings19StartL   0x3E00
005467  000419  #constant  Strings29StartH   0x0
005468  000419  #constant  Strings29StartH   0x0
005469  000420  #constant  Strings29StartL   0x4000
005470  000420  #constant  Strings29StartL   0x4000
005471  000421  #constant  Strings30StartH   0x0
005472  000421  #constant  Strings30StartH   0x0
005473  000422  #constant  Strings30StartL   0x4200
005474  000422  #constant  Strings30StartL   0x4200
005475  000423  #constant  Strings31StartH   0x0
005476  000423  #constant  Strings31StartH   0x0
005477  000424  #constant  Strings31StartL   0x4400
005478  000424  #constant  Strings31StartL   0x4400
005479  000425  #constant  Strings32StartH   0x0
005480  000425  #constant  Strings32StartH   0x0
005481  000426  #constant  Strings32StartL   0x4600
005482  000426  #constant  Strings32StartL   0x4600
005483  000427  #constant  Strings49StartH   0x0
005484  000427  #constant  Strings49StartH   0x0
005485  000428  #constant  Strings49StartL   0x4800
005486  000428  #constant  Strings49StartL   0x4800
005487  000429  #constant  Strings50StartH   0x0
005488  000429  #constant  Strings50StartH   0x0
005489  000430  #constant  Strings50StartL   0x4A00
005490  000430  #constant  Strings50StartL   0x4A00
005491  000431  #constant  Strings13StartH   0x0
005492  000431  #constant  Strings13StartH   0x0
005493  000432  #constant  Strings13StartL   0x4C00
005494  000432  #constant  Strings13StartL   0x4C00
005495  000433  #constant  Strings46StartH   0x0
005496  000433  #constant  Strings46StartH   0x0
005497  000434  #constant  Strings46StartL   0x4E00
005498  000434  #constant  Strings46StartL   0x4E00
005499  000435  #constant  Strings47StartH   0x0
005500  000435  #constant  Strings47StartH   0x0
005501  000436  #constant  Strings47StartL   0x5000
005502  000436  #constant  Strings47StartL   0x5000
005503  000437  #constant  Strings48StartH   0x0
005504  000437  #constant  Strings48StartH   0x0
005505  000438  #constant  Strings48StartL   0x5200
005506  000438  #constant  Strings48StartL   0x5200
005507  000439  #constant  Strings53StartH   0x0
005508  000439  #constant  Strings53StartH   0x0
005509  000440  #constant  Strings53StartL   0x5400
005510  000440  #constant  Strings53StartL   0x5400
005511  000441  #IFNOT EXISTS NOGLOBALS
005512  000442  var hndl ;
005513  000443  #ENDIF
005514  000012        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

005515  000013  #inherit "CLPrintStrings.inc"
005516  000013  #inherit "CLPrintStrings.inc"
005517  000001  func PrintStrings(var ID, var *msgid, var String)
005518  000002      var StringID, i, ch, offs32[2], res32[2];
005519  000003      StringID := oStringss[1+ID] ;
005520  000004      if (String)
005521  000005          stringsCV[ID] := -1 ;
005522  000006      else
005523  000007          stringsCV[ID] := msgid ;
005524  000008      endif
005525  000009      if ((StringID == -1) || (*(StringID + Ofs_String_Form) != CurrentForm)) return ;
005526  000010      txt_FontID(hFonts[ID]) ;
005527  000011      txt_Attributes(*(StringID + Ofs_String_FontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
005528  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
005529  000013        
005530  000014      if (*(StringID + Ofs_String_Transparent))
005531  000015          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), *(StringID + Ofs_String_BGColor));
005532  000016      else if (FormBGcolors[CurrentForm] != ColorBGimage)
005533  000017          gfx_RectangleFilled(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2), FormBGcolors[CurrentForm]);
005534  000018      else
005535  000019          gfx_ClipWindow(*(StringID + Ofs_String_x1), *(StringID + Ofs_String_y1), *(StringID + Ofs_String_x2), *(StringID + Ofs_String_y2)) ;
005536  000020          gfx_Clipping(ON) ;
005537  000021          img_Show(hndl,FormStartIndex[CurrentForm]) ;
005538  000022          gfx_Clipping(OFF) ;
005539  000023        
005540  000024      endif
005541  000025        
005542  000026      txt_FGcolour(*(StringID + Ofs_String_FGColor)) ;
005543  000027      txt_BGcolour(*(StringID + Ofs_String_BGColor)) ;
005544  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
005545  000029        
005546  000030      gfx_MoveTo(*(StringID + Ofs_String_x1) , *(StringID + Ofs_String_y1)) ;
005547  000031        
005548  000032      if (String)
005549  000033          i := 0 ;
005550  000034          ch := msgid[i++] ;
005551  000035          while (ch != 0)
005552  000036              putch(ch) ;
005553  000037              ch := msgid[i++] ;
005554  000038          wend
005555  000039      else
005556  000040          umul_1616(offs32, *(StringID + Ofs_String_Size), msgid);
005557  000041          res32[1] := *(StringID + Ofs_String_StartH) ;
005558  000042          res32[0] := *(StringID + Ofs_String_StartL) ;
005559  000043          uadd_3232(res32,res32,offs32) ;
005560  000044          file_Seek(hstrings, res32[1], res32[0]);
005561  000045          repeat
005562  000046              if (*(StringID + Ofs_String_Ansi))
005563  000047                  ch := file_GetC(hstrings) ;
005564  000048              else
005565  000049                  ch := file_GetW(hstrings) ;
005566  000050              endif
005567  000051              putch(ch) ;
005568  000052          until (ch == 0) ;
005569  000053      endif
005570  000054        
005571  000055  endfunc
005572  000056        
005573  000014        
005574  000015  #constant IPDatasize 22
005575  000015  #constant IPDatasize 22
005576  000016        
005577  000017  #CONST
005578  000021  #END
005579  000022        
005580  000023  #CONST
005581  000130  #END
005582  000131        
005583  000552  #END
5584  2590
5585  2591
5586  2592
5587  2593
5588  2594
5589  2595
5590  2596
5591  2597
5592  2598
5593  2599
5594  259A
5595  259B
5596  259C
5597  259D
5598  259E
5599  259F
5600  25A0
5601  25A1
5602  25A2
5603  25A3
5604  25A4
5605  25A5
5606  25A6
5607  25A7
5608  25A8
5609  25A9
5610  25AA
5611  25AB
5612  25AC
5613  25AD
5614  25AE
5615  25AF
5616  25B0
5617  25B1
5618  25B2
5619  25B3
5620  25B4
5621  25B5
5622  25B6
5623  25B7
5624  25B8
5625  25B9
5626  25BA
5627  25BB
5628  25BC
5629  25BD
5630  25BE
5631  25BF
5632  25C0
5633  25C1
5634  25C2
5635  25C3
5636  25C4
5637  25C5
5638  25C6
5639  25C7
5640  25C8
5641  25C9
5642  25CA
5643  25CB
5644  25CC
5645  25CD
5646  25CE
5647  25CF
5648  25D0
5649  25D1
5650  25D2
5651  25D3
5652  25D4
5653  25D5
5654  25D6
5655  25D7
5656  25D8
5657  25D9
5658  25DA
5659  25DB
5660  25DC
5661  25DD
5662  25DE
5663  25DF
5664  25E0
5665  25E1
5666  25E2
5667  25E3
5668  25E4
5669  25E5
5670  25E6
5671  25E7
5672  25E8
5673  25E9
5674  25EA
5675  25EB
5676  25EC
5677  25ED
5678  25EE
5679  25EF
5680  25F0
5681  25F1
5682  25F2
5683  25F3
5684  25F4
5685  25F5
5686  25F6
5687  25F7
5688  25F8
5689  25F9
5690  25FA
5691  25FB
5692  25FC
5693  25FD
5694  25FE
5695  25FF
5696  2600
5697  2601
5698  2602
5699  2603
5700  2604
5701  2605
5702  2606
5703  2607
5704  2608
5705  2609
5706  260A
5707  260B
5708  260C
5709  260D
5710  260E
5711  260F
5712  2610
5713  2611
5714  2612
5715  2613
5716  2614
5717  2615
5718  2616
5719  2617
5720  2618
5721  2619
5722  261A
5723  261B
5724  261C
5725  261D
5726  261E
5727  261F
5728  2620
5729  2621
5730  2622
5731  2623
5732  2624
5733  2625
5734  2626
5735  2627
5736  2628
5737  2629
5738  262A
5739  262B
5740  262C
5741  262D
5742  262E
5743  262F
5744  2630
5745  2631
5746  2632
5747  2633
5748  2634
5749  2635
5750  2636
5751  2637
5752  2638
5753  2639
5754  263A
5755  263B
5756  263C
5757  263D
5758  263E
5759  263F
5760  2640
5761  2641
5762  2642
5763  2643
5764  2644
5765  2645
5766  2646
5767  2647
5768  2648
5769  2649
5770  264A
5771  264B
5772  264C
5773  264D
5774  264E
5775  264F
5776  2650
5777  2651
5778  2652
5779  2653
5780  2654
5781  2655
5782  2656
5783  2657
5784  2658
5785  2659
5786  265A
5787  265B
5788  265C
5789  265D
5790  265E
5791  265F
5792  2660
5793  2661
5794  2662
5795  2663
5796  2664
5797  2665
5798  2666
5799  2667
5800  2668
5801  2669
5802  266A
5803  266B
5804  266C
5805  266D
5806  266E
5807  266F
5808  2670
5809  2671
5810  2672
5811  2673
5812  2674
5813  2675
5814  2676
5815  2677
5816  2678
5817  2679
5818  267A
5819  267B
5820  267C
5821  267D
5822  267E
5823  267F
5824  2680
5825  2681
5826  2682
5827  2683
5828  2684
5829  2685
5830  2686
5831  2687
5832  2688
5833  2689
5834  268A
5835  268B
5836  268C
5837  268D
5838  268E
5839  268F
5840  2690
5841  2691
5842  2692
5843  2693
5844  2694
5845  2695
5846  2696
5847  2697
5848  2698
5849  2699
5850  269A
5851  269B
5852  269C
5853  269D
5854  269E
5855  269F
5856  26A0
5857  26A1
5858  26A2
5859  26A3
5860  26A4
5861  26A5
5862  26A6
5863  26A7
5864  26A8
5865  26A9
5866  26AA
5867  26AB
5868  26AC
5869  26AD
5870  26AE
5871  26AF
5872  26B0
5873  26B1
5874  26B2
5875  26B3
5876  26B4
5877  26B5
5878  26B6
5879  26B7
5880  26B8
5881  26B9
5882  26BA
5883  26BB
5884  26BC
5885  26BD
5886  26BE
5887  26BF
5888  26C0
5889  26C1
5890  26C2
5891  26C3
5892  26C4
5893  26C5
5894  26C6
5895  26C7
5896  26C8
5897  26C9
5898  26CA
5899  26CB
5900  26CC
5901  26CD
5902  26CE
5903  26CF
5904  26D0
5905  26D1
5906  26D2
5907  26D3
5908  26D4
5909  26D5
5910  26D6
5911  26D7
5912  26D8
5913  26D9
5914  26DA
5915  26DB
5916  26DC
5917  26DD
5918  26DE
5919  26DF
5920  26E0
5921  26E1
5922  26E2
5923  26E3
5924  26E4
5925  26E5
5926  26E6
5927  26E7
5928  26E8
5929  26E9
5930  26EA
5931  26EB
5932  26EC
5933  26ED
5934  26EE
5935  26EF
5936  26F0
5937  26F1
5938  26F2
5939  26F3
5940  26F4
5941  26F5
5942  26F6
5943  26F7
5944  26F8
5945  26F9
5946  26FA
5947  26FB
5948  26FC
5949  26FD
5950  26FE
5951  26FF
5952  2700
5953  2701
5954  2702
5955  2703
5956  2704
5957  2705
5958  2706
5959  2707
5960  2708
5961  2709
5962  270A
5963  270B
5964  270C
5965  270D
5966  270E
5967  270F
5968  2710
5969  2711
5970  2712
5971  2713
5972  2714
5973  2715
5974  2716
5975  2717
5976  2718
5977  2719
5978  271A
5979  271B
5980  271C
5981  271D
5982  271E
5983  271F
5984  2720
5985  2721
5986  2722
5987  2723
5988  2724
5989  2725
5990  2726
5991  2727
5992  2728
5993  2729
5994  272A
5995  272B
5996  272C
5997  272D
5998  272E
5999  272F
6000  2730
6001  2731
6002  2732
6003  2733
6004  2734
6005  2735
6006  2736
6007  2737
6008  2738
6009  2739
6010  273A
6011  273B
6012  273C
6013  273D
6014  273E
6015  273F
6016  2740
6017  2741
6018  2742
6019  2743
6020  2744
6021  2745
6022  2746
6023  2747
6024  2748
6025  2749
6026  274A
6027  274B
6028  274C
6029  274D
6030  274E
6031  274F
6032  2750
6033  2751
6034  2752
6035  2753
6036  2754
6037  2755
6038  2756
6039  2757
6040  2758
6041  2759
6042  275A
6043  275B
6044  275C
6045  275D
6046  275E
6047  275F
6048  2760
6049  2761
6050  2762
6051  2763
6052  2764
6053  2765
6054  2766
6055  2767
6056  2768
6057  2769
6058  276A
6059  276B
6060  276C
6061  276D
6062  276E
6063  276F
6064  2770
6065  2771
6066  2772
6067  2773
6068  2774
6069  2775
6070  2776
6071  2777
6072  2778
6073  2779
6074  277A
6075  277B
6076  277C
6077  277D
6078  277E
6079  277F
6080  2780
6081  2781
6082  2782
6083  2783
6084  2784
6085  2785
6086  2786
6087  2787
6088  2788
6089  2789
6090  278A
6091  278B
6092  278C
6093  278D
6094  278E
6095  278F
6096  2790
6097  2791
6098  2792
6099  2793
6100  2794
6101  2795
6102  2796
6103  2797
6104  2798
6105  2799
6106  279A
6107  279B
6108  279C
6109  279D
6110  279E
6111  279F
6112  27A0
6113  27A1
6114  27A2
6115  27A3
6116  27A4
6117  27A5
6118  27A6
6119  27A7
6120  27A8
6121  27A9
6122  27AA
6123  27AB
6124  27AC
6125  27AD
6126  27AE
6127  27AF
6128  27B0
6129  27B1
6130  27B2
6131  27B3
6132  27B4
6133  27B5
6134  27B6
6135  27B7
6136  27B8
6137  27B9
6138  27BA
6139  27BB
6140  27BC
6141  27BD
6142  27BE
6143  27BF
6144  27C0
6145  27C1
6146  27C2
6147  27C3
6148  27C4
6149  27C5
6150  27C6
6151  27C7
6152  27C8
6153  27C9
6154  27CA
6155  27CB
6156  27CC
6157  27CD
6158  27CE
6159  27CF
6160  27D0
6161  27D1
6162  27D2
6163  27D3
6164  27D4
6165  27D5
6166  27D6
6167  27D7
6168  27D8
6169  27D9
6170  27DA
6171  27DB
6172  27DC
6173  27DD
6174  27DE
6175  27DF
6176  27E0
6177  27E1
6178  27E2
6179  27E3
6180  27E4
6181  27E5
6182  27E6
6183  27E7
6184  27E8
6185  27E9
6186  27EA
6187  27EB
6188  27EC
6189  27ED
6190  27EE
6191  27EF
6192  27F0
6193  27F1
6194  27F2
6195  27F3
6196  27F4
6197  27F5
6198  27F6
6199  27F7
6200  27F8
6201  27F9
6202  27FA
6203  27FB
6204  27FC
6205  27FD
6206  27FE
6207  27FF
6208  2800
6209  2801
6210  2802
6211  2803
6212  2804
6213  2805
6214  2806
6215  2807
6216  2808
6217  2809
6218  280A
6219  280B
6220  280C
6221  280D
6222  280E
6223  280F
6224  2810
6225  2811
6226  2812
6227  2813
6228  2814
6229  2815
6230  2816
6231  2817
6232  2818
6233  2819
6234  281A
6235  281B
6236  281C
6237  281D
6238  281E
6239  281F
6240  2820
6241  2821
6242  2822
6243  2823
6244  2824
6245  2825
6246  2826
6247  2827
6248  2828
6249  2829
6250  282A
6251  282B
6252  282C
6253  282D
6254  282E
6255  282F
6256  2830
6257  2831
6258  2832
6259  2833
6260  2834
6261  2835
6262  2836
6263  2837
6264  2838
6265  2839
6266  283A
6267  283B
6268  283C
6269  283D
6270  283E
6271  283F
6272  2840
6273  2841
6274  2842
6275  2843
6276  2844
6277  2845
6278  2846
6279  2847
6280  2848
6281  2849
6282  284A
6283  284B
6284  284C
6285  284D
6286  284E
6287  284F
6288  2850
6289  2851
6290  2852
6291  2853
6292  2854
6293  2855
6294  2856
6295  2857
6296  2858
6297  2859
6298  285A
6299  285B
6300  285C
6301  285D
6302  285E
6303  285F
6304  2860
6305  2861
6306  2862
6307  2863
6308  2864
6309  2865
6310  2866
6311  2867
6312  2868
6313  2869
6314  286A
6315  286B
6316  286C
6317  286D
6318  286E
6319  286F
6320  2870
6321  2871
6322  2872
6323  2873
6324  2874
6325  2875
6326  2876
6327  2877
6328  2878
6329  2879
6330  287A
6331  287B
6332  287C
6333  287D
6334  287E
6335  287F
6336  2880
6337  2881
6338  2882
6339  2883
6340  2884
6341  2885
6342  2886
6343  2887
6344  2888
6345  2889
6346  288A
6347  288B
6348  288C
6349  288D
6350  288E
6351  288F
6352  2890
6353  2891
6354  2892
6355  2893
6356  2894
6357  2895
6358  2896
6359  2897
6360  2898
6361  2899
6362  289A
6363  289B
6364  289C
6365  289D
6366  289E
6367  289F
6368  28A0
6369  28A1
6370  28A2
6371  28A3
6372  28A4
6373  28A5
6374  28A6
6375  28A7
6376  28A8
6377  28A9
6378  28AA
6379  28AB
6380  28AC
6381  28AD
6382  28AE
6383  28AF
6384  28B0
6385  28B1
6386  28B2
6387  28B3
6388  28B4
6389  28B5
6390  28B6
6391  28B7
6392  28B8
6393  28B9
6394  28BA
6395  28BB
6396  28BC
6397  28BD
6398  28BE
6399  28BF
6400  28C0
6401  28C1
6402  28C2
6403  28C3
6404  28C4
6405  28C5
6406  28C6
6407  28C7
6408  28C8
6409  28C9
6410  28CA
6411  28CB
6412  28CC
6413  28CD
6414  28CE
6415  28CF
6416  28D0
6417  28D1
6418  28D2
6419  28D3
6420  28D4
6421  28D5
6422  28D6
6423  28D7
6424  28D8
6425  28D9
6426  28DA
6427  28DB
6428  28DC
6429  28DD
6430  28DE
6431  28DF
6432  28E0
6433  28E1
6434  28E2
6435  28E3
6436  28E4
6437  28E5
6438  28E6
6439  28E7
6440  28E8
6441  28E9
6442  28EA
6443  28EB
6444  28EC
6445  28ED
6446  28EE
6447  28EF
6448  28F0
6449  28F1
6450  28F2
6451  28F3
6452  28F4
6453  28F5
6454  28F6
6455  28F7
6456  28F8
6457  28F9
6458  28FA
6459  28FB
6460  28FC
6461  28FD
6462  28FE
6463  28FF
6464  2900
6465  2901
6466  2902
6467  2903
6468  2904
6469  2905
6470  2906
6471  2907
6472  2908
6473  2909
6474  290A
6475  290B
6476  290C
6477  290D
6478  290E
6479  290F
6480  2910
6481  2911
6482  2912
6483  2913
6484  2914
6485  2915
6486  2916
6487  2917
6488  2918
6489  2919
6490  291A
6491  291B
6492  291C
6493  291D
6494  291E
6495  291F
6496  2920
6497  2921
6498  2922
6499  2923
6500  2924
6501  2925
6502  2926
6503  2927
6504  2928
6505  2929
6506  292A
6507  292B
6508  292C
6509  292D
6510  292E
6511  292F
6512  2930
6513  2931
6514  2932
6515  2933
6516  2934
6517  2935
6518  2936
6519  2937
6520  2938
6521  2939
6522  293A
6523  293B
6524  293C
6525  293D
6526  293E
6527  293F
6528  2940
6529  2941
6530  2942
6531  2943
6532  2944
6533  2945
6534  2946
6535  2947
6536  2948
6537  2949
6538  294A
6539  294B
6540  294C
6541  294D
6542  294E
6543  294F
6544  2950
6545  2951
6546  2952
6547  2953
6548  2954
6549  2955
6550  2956
6551  2957
6552  2958
6553  2959
6554  295A
6555  295B
6556  295C
6557  295D
6558  295E
6559  295F
6560  2960
6561  2961
6562  2962
6563  2963
6564  2964
6565  2965
6566  2966
6567  2967
6568  2968
6569  2969
6570  296A
6571  296B
6572  296C
6573  296D
6574  296E
6575  296F
6576  2970
6577  2971
6578  2972
6579  2973
6580  2974
6581  2975
6582  2976
6583  2977
6584  2978
6585  2979
6586  297A
6587  297B
6588  297C
6589  297D
6590  297E
6591  297F
6592  2980
6593  2981
6594  2982
6595  2983
6596  2984
6597  2985
6598  2986
6599  2987
6600  2988
6601  2989
6602  298A
6603  298B
6604  298C
6605  298D
6606  298E
6607  298F
6608  2990
6609  2991
6610  2992
6611  2993
6612  2994
6613  2995
6614  2996
6615  2997
6616  2998
6617  2999
6618  299A
6619  299B
6620  299C
6621  299D
6622  299E
6623  299F
6624  29A0
6625  29A1
6626  29A2
6627  29A3
6628  29A4
6629  29A5
6630  29A6
6631  29A7
6632  29A8
6633  29A9
6634  29AA
6635  29AB
6636  29AC
6637  29AD
6638  29AE
6639  29AF
6640  29B0
6641  29B1
6642  29B2
6643  29B3
6644  29B4
6645  29B5
6646  29B6
6647  29B7
6648  29B8
6649  29B9
6650  29BA
6651  29BB
6652  29BC
6653  29BD
6654  29BE
6655  29BF
6656  29C0
6657  29C1
6658  29C2
6659  29C3
6660  29C4
6661  29C5
6662  29C6
6663  29C7
6664  29C8
6665  29C9
6666  29CA
6667  29CB
6668  29CC
6669  29CD
6670  29CE
6671  29CF
6672  29D0
6673  29D1
6674  29D2
6675  29D3
6676  29D4
6677  29D5
6678  29D6
6679  29D7
6680  29D8
6681  29D9
6682  29DA
6683  29DB
6684  29DC
6685  29DD
6686  29DE
6687  29DF
6688  29E0
6689  29E1
6690  29E2
6691  29E3
6692  29E4
6693  29E5
6694  29E6
6695  29E7
6696  29E8
6697  29E9
6698  29EA
6699  29EB
6700  29EC
6701  29ED
6702  29EE
6703  29EF
6704  29F0
6705  29F1
6706  29F2
6707  29F3
6708  29F4
6709  29F5
6710  29F6
6711  29F7
6712  29F8
6713  29F9
6714  29FA
6715  29FB
6716  29FC
6717  29FD
6718  29FE
6719  29FF
6720  2A00
6721  2A01
6722  2A02
6723  2A03
6724  2A04
6725  2A05
6726  2A06
6727  2A07
6728  2A08
6729  2A09
6730  2A0A
6731  2A0B
6732  2A0C
6733  2A0D
6734  2A0E
6735  2A0F
6736  2A10
6737  2A11
6738  2A12
6739  2A13
6740  2A14
6741  2A15
6742  2A16
6743  2A17
6744  2A18
6745  2A19
6746  2A1A
6747  2A1B
6748  2A1C
6749  2A1D
6750  2A1E
6751  2A1F
6752  2A20
6753  2A21
6754  2A22
6755  2A23
6756  2A24
6757  2A25
6758  2A26
6759  2A27
6760  2A28
6761  2A29
6762  2A2A
6763  2A2B
6764  2A2C
6765  2A2D
6766  2A2E
6767  2A2F
6768  2A30
6769  2A31
6770  2A32
6771  2A33
6772  2A34
6773  2A35
6774  2A36
6775  2A37
6776  2A38
6777  2A39
6778  2A3A
6779  2A3B
6780  2A3C
6781  2A3D
6782  2A3E
6783  2A3F
6784  2A40
6785  2A41
6786  2A42
6787  2A43
6788  2A44
6789  2A45
6790  2A46
6791  2A47
6792  2A48
6793  2A49
6794  2A4A
6795  2A4B
6796  2A4C
6797  2A4D
6798  2A4E
6799  2A4F
6800  2A50
6801  2A51
6802  2A52
6803  2A53
6804  2A54
6805  2A55
6806  2A56
6807  2A57
6808  2A58
6809  2A59
6810  2A5A
6811  2A5B
6812  2A5C
6813  2A5D
6814  2A5E
6815  2A5F
6816  2A60
6817  2A61
6818  2A62
6819  2A63
6820  2A64
6821  2A65
6822  2A66
6823  2A67
6824  2A68
6825  2A69
6826  2A6A
6827  2A6B
6828  2A6C
6829  2A6D
6830  2A6E
6831  2A6F
6832  2A70
6833  2A71
6834  2A72
6835  2A73
6836  2A74
6837  2A75
6838  2A76
6839  2A77
6840  2A78
6841  2A79
6842  2A7A
6843  2A7B
6844  2A7C
6845  2A7D
6846  2A7E
6847  2A7F
6848  2A80
6849  2A81
6850  2A82
6851  2A83
6852  2A84
6853  2A85
6854  2A86
6855  2A87
6856  2A88
6857  2A89
6858  2A8A
6859  2A8B
6860  2A8C
6861  2A8D
6862  2A8E
6863  2A8F
6864  2A90
6865  2A91
6866  2A92
6867  2A93
6868  2A94
6869  2A95
6870  2A96
6871  2A97
6872  2A98
6873  2A99
6874  2A9A
6875  2A9B
6876  2A9C
6877  2A9D
6878  2A9E
6879  2A9F
6880  2AA0
6881  2AA1
6882  2AA2
6883  2AA3
6884  2AA4
6885  2AA5
6886  2AA6
6887  2AA7
6888  2AA8
6889  2AA9
6890  2AAA
6891  2AAB
6892  2AAC
6893  2AAD
6894  2AAE
6895  2AAF
6896  2AB0
6897  2AB1
6898  2AB2
6899  2AB3
6900  2AB4
6901  2AB5
6902  2AB6
6903  2AB7
6904  2AB8
6905  2AB9
6906  2ABA
6907  2ABB
6908  2ABC
6909  2ABD
6910  2ABE
6911  2ABF
6912  2AC0
6913  2AC1
6914  2AC2
6915  2AC3
6916  2AC4
6917  2AC5
6918  2AC6
6919  2AC7
6920  2AC8
6921  2AC9
6922  2ACA
6923  2ACB
6924  2ACC
6925  2ACD
6926  2ACE
6927  2ACF
6928  2AD0
6929  2AD1
6930  2AD2
6931  2AD3
6932  2AD4
6933  2AD5
6934  2AD6
6935  2AD7
6936  2AD8
6937  2AD9
6938  2ADA
6939  2ADB
6940  2ADC
6941  2ADD
6942  2ADE
6943  2ADF
6944  2AE0
6945  2AE1
6946  2AE2
6947  2AE3
6948  2AE4
6949  2AE5
6950  2AE6
6951  2AE7
6952  2AE8
6953  2AE9
6954  2AEA
6955  2AEB
6956  2AEC
6957  2AED
6958  2AEE
6959  2AEF
6960  2AF0
6961  2AF1
6962  2AF2
6963  2AF3
6964  2AF4
6965  2AF5
6966  2AF6
6967  2AF7
6968  2AF8
6969  2AF9
6970  2AFA
6971  2AFB
6972  2AFC
6973  2AFD
6974  2AFE
6975  2AFF
6976  2B00
6977  2B01
6978  2B02
6979  2B03
6980  2B04
6981  2B05
6982  2B06
6983  2B07
6984  2B08
6985  2B09
6986  2B0A
6987  2B0B
6988  2B0C
6989  2B0D
6990  2B0E
6991  2B0F
6992  2B10
6993  2B11
6994  2B12
6995  2B13
6996  2B14
6997  2B15
6998  2B16
6999  2B17
7000  2B18
7001  2B19
7002  2B1A
7003  2B1B
7004  2B1C
7005  2B1D
7006  2B1E
7007  2B1F
7008  2B20
7009  2B21
7010  2B22
7011  2B23
7012  2B24
7013  2B25
7014  2B26
7015  2B27
7016  2B28
7017  2B29
7018  2B2A
7019  2B2B
7020  2B2C
7021  2B2D
7022  2B2E
7023  2B2F
7024  2B30
7025  2B31
7026  2B32
7027  2B33
7028  2B34
7029  2B35
7030  2B36
7031  2B37
7032  2B38
7033  2B39
7034  2B3A
7035  2B3B
7036  2B3C
7037  2B3D
7038  2B3E
7039  2B3F
7040  2B40
7041  2B41
7042  2B42
7043  2B43
7044  2B44
7045  2B45
7046  2B46
7047  2B47
7048  2B48
7049  2B49
7050  2B4A
7051  2B4B
7052  2B4C
7053  2B4D
7054  2B4E
7055  2B4F
7056  2B50
7057  2B51
7058  2B52
7059  2B53
7060  2B54
7061  2B55
7062  2B56
7063  2B57
7064  2B58
7065  2B59
7066  2B5A
7067  2B5B
7068  2B5C
7069  2B5D
7070  2B5E
7071  2B5F
7072  2B60
7073  2B61
7074  2B62
7075  2B63
7076  2B64
7077  2B65
7078  2B66
7079  2B67
7080  2B68
7081  2B69
7082  2B6A
7083  2B6B
7084  2B6C
7085  2B6D
7086  2B6E
7087  2B6F
7088  2B70
7089  2B71
7090  2B72
7091  2B73
7092  2B74
7093  2B75
7094  2B76
7095  2B77
7096  2B78
7097  2B79
7098  2B7A
7099  2B7B
7100  2B7C
7101  2B7D
7102  2B7E
7103  2B7F
7104  2B80
7105  2B81
7106  2B82
7107  2B83
7108  2B84
7109  2B85
7110  2B86
7111  2B87
7112  2B88
7113  2B89
7114  2B8A
7115  2B8B
7116  2B8C
7117  2B8D
7118  2B8E
7119  2B8F
7120  2B90
7121  2B91
7122  2B92
7123  2B93
7124  2B94
7125  2B95
7126  2B96
7127  2B97
7128  2B98
7129  2B99
7130  2B9A
7131  2B9B
7132  2B9C
7133  2B9D
7134  2B9E
7135  2B9F
7136  2BA0
7137  2BA1
7138  2BA2
7139  2BA3
7140  2BA4
7141  2BA5
7142  2BA6
7143  2BA7
7144  2BA8
7145  2BA9
7146  2BAA
7147  2BAB
7148  2BAC
7149  2BAD
7150  2BAE
7151  2BAF
7152  2BB0
7153  2BB1
7154  2BB2
7155  2BB3
7156  2BB4
7157  2BB5
7158  2BB6
7159  2BB7
7160  2BB8
7161  2BB9
7162  2BBA
7163  2BBB
7164  2BBC
7165  2BBD
7166  2BBE
7167  2BBF
7168  2BC0
7169  2BC1
7170  2BC2
7171  2BC3
7172  2BC4
7173  2BC5
7174  2BC6
7175  2BC7
7176  2BC8
7177  2BC9
7178  2BCA
7179  2BCB
7180  2BCC
7181  2BCD
7182  2BCE
7183  2BCF
7184  2BD0
7185  2BD1
7186  2BD2
7187  2BD3
7188  2BD4
7189  2BD5
7190  2BD6
7191  2BD7
7192  2BD8
7193  2BD9
7194  2BDA
7195  2BDB
7196  2BDC
7197  2BDD
7198  2BDE
7199  2BDF
7200  2BE0
7201  2BE1
7202  2BE2
7203  2BE3
7204  2BE4
7205  2BE5
7206  2BE6
7207  2BE7
7208  2BE8
7209  2BE9
7210  2BEA
7211  2BEB
7212  2BEC
7213  2BED
7214  2BEE
7215  2BEF
7216  2BF0
7217  2BF1
7218  2BF2
7219  2BF3
7220  2BF4
7221  2BF5
7222  2BF6
7223  2BF7
7224  2BF8
7225  2BF9
7226  2BFA
7227  2BFB
7228  2BFC
7229  2BFD
7230  2BFE
7231  2BFF
7232  2C00
7233  2C01
7234  2C02
7235  2C03
7236  2C04
7237  2C05
7238  2C06
7239  2C07
7240  2C08
7241  2C09
7242  2C0A
7243  2C0B
7244  2C0C
7245  2C0D
7246  2C0E
7247  2C0F
7248  2C10
7249  2C11
7250  2C12
7251  2C13
7252  2C14
7253  2C15
7254  2C16
7255  2C17
7256  2C18
7257  2C19
7258  2C1A
7259  2C1B
7260  2C1C
7261  2C1D
7262  2C1E
7263  2C1F
7264  2C20
7265  2C21
7266  2C22
7267  2C23
7268  2C24
7269  2C25
7270  2C26
7271  2C27
7272  2C28
7273  2C29
7274  2C2A
7275  2C2B
7276  2C2C
7277  2C2D
7278  2C2E
7279  2C2F
7280  2C30
7281  2C31
7282  2C32
7283  2C33
7284  2C34
7285  2C35
7286  2C36
7287  2C37
7288  2C38
7289  2C39
7290  2C3A
7291  2C3B
7292  2C3C
7293  2C3D
7294  2C3E
7295  2C3F
7296  2C40
7297  2C41
7298  2C42
7299  2C43
7300  2C44
7301  2C45
7302  2C46
7303  2C47
7304  2C48
7305  2C49
7306  2C4A
7307  2C4B
7308  2C4C
7309  2C4D
7310  2C4E
7311  2C4F
7312  2C50
7313  2C51
7314  2C52
7315  2C53
7316  2C54
7317  2C55
7318  2C56
7319  2C57
7320  2C58
7321  2C59
7322  2C5A
7323  2C5B
7324  2C5C
7325  2C5D
7326  2C5E
7327  2C5F
7328  2C60
7329  2C61
7330  2C62
7331  2C63
7332  2C64
7333  2C65
7334  2C66
7335  2C67
7336  2C68
7337  2C69
7338  2C6A
7339  2C6B
7340  2C6C
7341  2C6D
7342  2C6E
7343  2C6F
7344  2C70
7345  2C71
7346  2C72
7347  2C73
7348  2C74
7349  2C75
7350  2C76
7351  2C77
7352  2C78
7353  2C79
7354  2C7A
7355  2C7B
7356  2C7C
7357  2C7D
7358  2C7E
7359  2C7F
7360  2C80
7361  2C81
7362  2C82
7363  2C83
7364  2C84
7365  2C85
7366  2C86
7367  2C87
7368  2C88
7369  2C89
7370  2C8A
7371  2C8B
7372  2C8C
7373  2C8D
7374  2C8E
7375  2C8F
7376  2C90
7377  2C91
7378  2C92
7379  2C93
7380  2C94
7381  2C95
7382  2C96
7383  2C97
7384  2C98
7385  2C99
7386  2C9A
7387  2C9B
7388  2C9C
7389  2C9D
7390  2C9E
7391  2C9F
7392  2CA0
7393  2CA1
7394  2CA2
7395  2CA3
7396  2CA4
7397  2CA5
7398  2CA6
7399  2CA7
7400  2CA8
7401  2CA9
7402  2CAA
7403  2CAB
7404  2CAC
7405  2CAD
7406  2CAE
7407  2CAF
7408  2CB0
7409  2CB1
7410  2CB2
7411  2CB3
7412  2CB4
7413  2CB5
7414  2CB6
7415  2CB7
7416  2CB8
7417  2CB9
7418  2CBA
7419  2CBB
7420  2CBC
7421  2CBD
7422  2CBE
7423  2CBF
7424  2CC0
7425  2CC1
7426  2CC2
7427  2CC3
7428  2CC4
7429  2CC5
7430  2CC6
7431  2CC7
7432  2CC8
7433  2CC9
7434  2CCA
7435  2CCB
7436  2CCC
7437  2CCD
7438  2CCE
7439  2CCF
7440  2CD0
7441  2CD1
7442  2CD2
7443  2CD3
7444  2CD4
7445  2CD5
7446  2CD6
7447  2CD7
7448  2CD8
7449  2CD9
7450  2CDA
7451  2CDB
7452  2CDC
7453  2CDD
7454  2CDE
7455  2CDF
7456  2CE0
7457  2CE1
7458  2CE2
7459  2CE3
7460  2CE4
7461  2CE5
7462  2CE6
7463  2CE7
7464  2CE8
7465  2CE9
7466  2CEA
7467  2CEB
7468  2CEC
7469  2CED
7470  2CEE
7471  2CEF
7472  2CF0
7473  2CF1
7474  2CF2
7475  2CF3
7476  2CF4
7477  2CF5
7478  2CF6
7479  2CF7
7480  2CF8
7481  2CF9
7482  2CFA
7483  2CFB
7484  2CFC
7485  2CFD
7486  2CFE
7487  2CFF
7488  2D00
7489  2D01
7490  2D02
7491  2D03
7492  2D04
7493  2D05
7494  2D06
7495  2D07
7496  2D08
7497  2D09
7498  2D0A
7499  2D0B
7500  2D0C
7501  2D0D
7502  2D0E
7503  2D0F
7504  2D10
7505  2D11
7506  2D12
7507  2D13
7508  2D14
7509  2D15
7510  2D16
7511  2D17
7512  2D18
7513  2D19
7514  2D1A
7515  2D1B
7516  2D1C
7517  2D1D
7518  2D1E
7519  2D1F
7520  2D20
7521  2D21
7522  2D22
7523  2D23
7524  2D24
7525  2D25
7526  2D26
7527  2D27
7528  2D28
7529  2D29
7530  2D2A
7531  2D2B
7532  2D2C
7533  2D2D
7534  2D2E
7535  2D2F
7536  2D30
7537  2D31
7538  2D32
7539  2D33
7540  2D34
7541  2D35
7542  2D36
7543  2D37
7544  2D38
7545  2D39
7546  2D3A
7547  2D3B
7548  2D3C
7549  2D3D
7550  2D3E
7551  2D3F
7552  2D40
7553  2D41
7554  2D42
7555  2D43
7556  2D44
7557  2D45
7558  2D46
7559  2D47
7560  2D48
7561  2D49
7562  2D4A
7563  2D4B
7564  2D4C
7565  2D4D
7566  2D4E
7567  2D4F
7568  2D50
7569  2D51
7570  2D52
7571  2D53
7572  2D54
7573  2D55
7574  2D56
7575  2D57
7576  2D58
7577  2D59
7578  2D5A
7579  2D5B
7580  2D5C
7581  2D5D
7582  2D5E
7583  2D5F
7584  2D60
7585  2D61
7586  2D62
7587  2D63
7588  2D64
7589  2D65
7590  2D66
7591  2D67
7592  2D68
7593  2D69
7594  2D6A
7595  2D6B
7596  2D6C
7597  2D6D
7598  2D6E
7599  2D6F
7600  2D70
7601  2D71
7602  2D72
7603  2D73
7604  2D74
7605  2D75
7606  2D76
7607  2D77
7608  2D78
7609  2D79
7610  2D7A
7611  2D7B
7612  2D7C
7613  2D7D
7614  2D7E
7615  2D7F
7616  2D80
7617  2D81
7618  2D82
7619  2D83
7620  2D84
7621  2D85
7622  2D86
7623  2D87
7624  2D88
7625  2D89
7626  2D8A
7627  2D8B
7628  2D8C
7629  2D8D
7630  2D8E
7631  2D8F
7632  2D90
7633  2D91
7634  2D92
7635  2D93
7636  2D94
7637  2D95
7638  2D96
7639  2D97
7640  2D98
7641  2D99
7642  2D9A
7643  2D9B
7644  2D9C
7645  2D9D
7646  2D9E
7647  2D9F
7648  2DA0
7649  2DA1
7650  2DA2
7651  2DA3
7652  2DA4
7653  2DA5
7654  2DA6
7655  2DA7
7656  2DA8
7657  2DA9
7658  2DAA
7659  2DAB
7660  2DAC
7661  2DAD
7662  2DAE
7663  2DAF
7664  2DB0
7665  2DB1
7666  2DB2
7667  2DB3
7668  2DB4
7669  2DB5
7670  2DB6
7671  2DB7
7672  2DB8
7673  2DB9
7674  2DBA
7675  2DBB
7676  2DBC
7677  2DBD
7678  2DBE
7679  2DBF
7680  2DC0
7681  2DC1
7682  2DC2
7683  2DC3
7684  2DC4
7685  2DC5
7686  2DC6
7687  2DC7
7688  2DC8
7689  2DC9
7690  2DCA
7691  2DCB
7692  2DCC
7693  2DCD
7694  2DCE
7695  2DCF
7696  2DD0
7697  2DD1
7698  2DD2
7699  2DD3
7700  2DD4
7701  2DD5
7702  2DD6
7703  2DD7
7704  2DD8
7705  2DD9
7706  2DDA
7707  2DDB
7708  2DDC
7709  2DDD
7710  2DDE
7711  2DDF
7712  2DE0
7713  2DE1
7714  2DE2
7715  2DE3
7716  2DE4
7717  2DE5
7718  2DE6
7719  2DE7
7720  2DE8
7721  2DE9
7722  2DEA
7723  2DEB
7724  2DEC
7725  2DED
7726  2DEE
7727  2DEF
7728  2DF0
7729  2DF1
7730  2DF2
7731  2DF3
7732  2DF4
7733  2DF5
7734  2DF6
7735  2DF7
7736  2DF8
7737  2DF9
7738  2DFA
7739  2DFB
7740  2DFC
7741  2DFD
7742  2DFE
7743  2DFF
7744  2E00
7745  2E01
7746  2E02
7747  2E03
7748  2E04
7749  2E05
7750  2E06
7751  2E07
7752  2E08
7753  2E09
7754  2E0A
7755  2E0B
7756  2E0C
7757  2E0D
7758  2E0E
7759  2E0F
7760  2E10
7761  2E11
7762  2E12
7763  2E13
7764  2E14
7765  2E15
7766  2E16
7767  2E17
7768  2E18
7769  2E19
7770  2E1A
7771  2E1B
7772  2E1C
7773  2E1D
7774  2E1E
7775  2E1F
7776  2E20
7777  2E21
7778  2E22
7779  2E23
7780  2E24
7781  2E25
7782  2E26
7783  2E27
7784  2E28
7785  2E29
7786  2E2A
7787  2E2B
7788  2E2C
7789  2E2D
7790  2E2E
7791  2E2F
7792  2E30
7793  2E31
7794  2E32
7795  2E33
7796  2E34
7797  2E35
7798  2E36
7799  2E37
7800  2E38
7801  2E39
7802  2E3A
7803  2E3B
7804  2E3C
7805  2E3D
7806  2E3E
7807  2E3F
7808  2E40
7809  2E41
7810  2E42
7811  2E43
7812  2E44
7813  2E45
7814  2E46
7815  2E47
7816  2E48
7817  2E49
7818  2E4A
7819  2E4B
7820  2E4C
7821  2E4D
7822  2E4E
7823  2E4F
7824  2E50
7825  2E51
7826  2E52
7827  2E53
7828  2E54
7829  2E55
7830  2E56
7831  2E57
7832  2E58
7833  2E59
7834  2E5A
7835  2E5B
7836  2E5C
7837  2E5D
7838  2E5E
7839  2E5F
7840  2E60
7841  2E61
7842  2E62
7843  2E63
7844  2E64
7845  2E65
7846  2E66
7847  2E67
7848  2E68
7849  2E69
7850  2E6A
7851  2E6B
7852  2E6C
7853  2E6D
7854  2E6E
7855  2E6F
7856  2E70
7857  2E71
7858  2E72
7859  2E73
7860  2E74
7861  2E75
7862  2E76
7863  2E77
7864  2E78
7865  2E79
7866  2E7A
7867  2E7B
7868  2E7C
7869  2E7D
7870  2E7E
7871  2E7F
7872  2E80
7873  2E81
7874  2E82
7875  2E83
7876  2E84
7877  2E85
7878  2E86
7879  2E87
7880  2E88
7881  2E89
7882  2E8A
7883  2E8B
7884  2E8C
7885  2E8D
7886  2E8E
7887  2E8F
7888  2E90
7889  2E91
7890  2E92
7891  2E93
7892  2E94
7893  2E95
7894  2E96
7895  2E97
7896  2E98
7897  2E99
7898  2E9A
7899  2E9B
7900  2E9C
7901  2E9D
7902  2E9E
7903  2E9F
7904  2EA0
7905  2EA1
7906  2EA2
7907  2EA3
7908  2EA4
7909  2EA5
7910  2EA6
7911  2EA7
7912  2EA8
7913  2EA9
7914  2EAA
7915  2EAB
7916  2EAC
7917  2EAD
7918  2EAE
7919  2EAF
7920  2EB0
7921  2EB1
7922  2EB2
7923  2EB3
7924  2EB4
7925  2EB5
7926  2EB6
7927  2EB7
7928  2EB8
7929  2EB9
7930  2EBA
7931  2EBB
7932  2EBC
7933  2EBD
7934  2EBE
7935  2EBF
7936  2EC0
7937  2EC1
7938  2EC2
7939  2EC3
7940  2EC4
7941  2EC5
7942  2EC6
7943  2EC7
7944  2EC8
7945  2EC9
7946  2ECA
7947  2ECB
7948  2ECC
7949  2ECD
7950  2ECE
7951  2ECF
7952  2ED0
7953  2ED1
7954  2ED2
7955  2ED3
7956  2ED4
7957  2ED5
7958  2ED6
7959  2ED7
7960  2ED8
7961  2ED9
7962  2EDA
7963  2EDB
7964  2EDC
7965  2EDD
7966  2EDE
7967  2EDF
7968  2EE0
7969  2EE1
7970  2EE2
7971  2EE3
7972  2EE4
7973  2EE5
7974  2EE6
7975  2EE7
7976  2EE8
7977  2EE9
7978  2EEA
7979  2EEB
7980  2EEC
7981  2EED
7982  2EEE
7983  2EEF
7984  2EF0
7985  2EF1
7986  2EF2
7987  2EF3
7988  2EF4
7989  2EF5
7990  2EF6
7991  2EF7
7992  2EF8
7993  2EF9
7994  2EFA
7995  2EFB
7996  2EFC
7997  2EFD
7998  2EFE
7999  2EFF
8000  2F00
8001  2F01
8002  2F02
8003  2F03
8004  2F04
8005  2F05
8006  2F06
8007  2F07
8008  2F08
8009  2F09
8010  2F0A
8011  2F0B
8012  2F0C
8013  2F0D
8014  2F0E
8015  2F0F
8016  2F10
8017  2F11
8018  2F12
8019  2F13
8020  2F14
8021  2F15
8022  2F16
8023  2F17
8024  2F18
8025  2F19
8026  2F1A
8027  2F1B
8028  2F1C
8029  2F1D
8030  2F1E
8031  2F1F
8032  2F20
8033  2F21
8034  2F22
8035  2F23
8036  2F24
8037  2F25
8038  2F26
8039  2F27
8040  2F28
8041  2F29
8042  2F2A
8043  2F2B
8044  2F2C
8045  2F2D
8046  2F2E
8047  2F2F
8048  2F30
8049  2F31
8050  2F32
8051  2F33
8052  2F34
8053  2F35
8054  2F36
8055  2F37
8056  2F38
8057  2F39
8058  2F3A
8059  2F3B
8060  2F3C
8061  2F3D
8062  2F3E
8063  2F3F
8064  2F40
8065  2F41
8066  2F42
8067  2F43
8068  2F44
8069  2F45
8070  2F46
8071  2F47
8072  2F48
8073  2F49
8074  2F4A
8075  2F4B
8076  2F4C
8077  2F4D
8078  2F4E
8079  2F4F
8080  2F50
8081  2F51
8082  2F52
8083  2F53
8084  2F54
8085  2F55
8086  2F56
8087  2F57
8088  2F58
8089  2F59
8090  2F5A
8091  2F5B
8092  2F5C
8093  2F5D
8094  2F5E
8095  2F5F
8096  2F60
8097  2F61
8098  2F62
8099  2F63
8100  2F64
8101  2F65
8102  2F66
8103  2F67
8104  2F68
8105  2F69
8106  2F6A
8107  2F6B
8108  2F6C
8109  2F6D
8110  2F6E
8111  2F6F
8112  2F70
8113  2F71
8114  2F72
8115  2F73
8116  2F74
8117  2F75
8118  2F76
8119  2F77
8120  2F78
8121  2F79
8122  2F7A
8123  2F7B
8124  2F7C
8125  2F7D
8126  2F7E
8127  2F7F
8128  2F80
8129  2F81
8130  2F82
8131  2F83
8132  2F84
8133  2F85
8134  2F86
8135  2F87
8136  2F88
8137  2F89
8138  2F8A
8139  2F8B
8140  2F8C
8141  2F8D
8142  2F8E
8143  2F8F
8144  2F90
8145  2F91
8146  2F92
8147  2F93
8148  2F94
8149  2F95
8150  2F96
8151  2F97
8152  2F98
8153  2F99
8154  2F9A
8155  2F9B
8156  2F9C
8157  2F9D
8158  2F9E
8159  2F9F
8160  2FA0
8161  2FA1
8162  2FA2
8163  2FA3
8164  2FA4
8165  2FA5
8166  2FA6
8167  2FA7
8168  2FA8
8169  2FA9
8170  2FAA
8171  2FAB
8172  2FAC
8173  2FAD
8174  2FAE
8175  2FAF
8176  2FB0
8177  2FB1
8178  2FB2
8179  2FB3
8180  2FB4
8181  2FB5
8182  2FB6
8183  2FB7
8184  2FB8
8185  2FB9
8186  2FBA
8187  2FBB
8188  2FBC
8189  2FBD
8190  2FBE
8191  2FBF
8192  2FC0
8193  2FC1
8194  2FC2
8195  2FC3
8196  2FC4
8197  2FC5
8198  2FC6
8199  2FC7
8200  2FC8
8201  2FC9
8202  2FCA
8203  2FCB
8204  2FCC
8205  2FCD
8206  2FCE
8207  2FCF
8208  2FD0
8209  2FD1
8210  2FD2
8211  2FD3
8212  2FD4
8213  2FD5
8214  2FD6
8215  2FD7
8216  2FD8
8217  2FD9
8218  2FDA
8219  2FDB
8220  2FDC
8221  2FDD
8222  2FDE
8223  2FDF
8224  2FE0
8225  2FE1
8226  2FE2
8227  2FE3
8228  2FE4
8229  2FE5
8230  2FE6
8231  2FE7
8232  2FE8
8233  2FE9
8234  2FEA
8235  2FEB
8236  2FEC
8237  2FED
8238  2FEE
8239  2FEF
8240  2FF0
8241  2FF1
8242  2FF2
8243  2FF3
8244  2FF4
8245  2FF5
8246  2FF6
8247  2FF7
8248  2FF8
8249  2FF9
8250  2FFA
8251  2FFB
8252  2FFC
8253  2FFD
8254  2FFE
8255  2FFF
8256  3000
8257  3001
8258  3002
8259  3003
8260  3004
8261  3005
8262  3006
8263  3007
8264  3008
8265  3009
8266  300A
8267  300B
8268  300C
8269  300D
8270  300E
8271  300F
8272  3010
8273  3011
8274  3012
8275  3013
8276  3014
8277  3015
8278  3016
8279  3017
8280  3018
8281  3019
8282  301A
8283  301B
8284  301C
8285  301D
8286  301E
8287  301F
8288  3020
8289  3021
8290  3022
8291  3023
8292  3024
8293  3025
8294  3026
8295  3027
8296  3028
8297  3029
8298  302A
8299  302B
8300  302C
8301  302D
8302  302E
8303  302F
8304  3030
8305  3031
8306  3032
8307  3033
8308  3034
8309  3035
8310  3036
8311  3037
8312  3038
8313  3039
8314  303A
8315  303B
8316  303C
8317  303D
8318  303E
8319  303F
8320  3040
8321  3041
8322  3042
8323  3043
8324  3044
8325  3045
8326  3046
8327  3047
8328  3048
8329  3049
8330  304A
8331  304B
8332  304C
8333  304D
8334  304E
8335  304F
8336  3050
8337  3051
8338  3052
8339  3053
8340  3054
8341  3055
8342  3056
8343  3057
8344  3058
8345  3059
8346  305A
8347  305B
8348  305C
8349  305D
8350  305E
8351  305F
8352  3060
8353  3061
8354  3062
8355  3063
8356  3064
8357  3065
8358  3066
8359  3067
8360  3068
8361  3069
8362  306A
8363  306B
8364  306C
8365  306D
8366  306E
8367  306F
8368  3070
8369  3071
8370  3072
8371  3073
8372  3074
8373  3075
8374  3076
8375  3077
8376  3078
8377  3079
8378  307A
8379  307B
8380  307C
8381  307D
8382  307E
8383  307F
8384  3080
8385  3081
8386  3082
8387  3083
8388  3084
8389  3085
8390  3086
8391  3087
8392  3088
8393  3089
8394  308A
8395  308B
8396  308C
8397  308D
8398  308E
8399  308F
8400  3090
8401  3091
8402  3092
8403  3093
8404  3094
8405  3095
8406  3096
8407  3097
8408  3098
8409  3099
8410  309A
8411  309B
8412  309C
8413  309D
8414  309E
8415  309F
8416  30A0
8417  30A1
8418  30A2
8419  30A3
8420  30A4
8421  30A5
8422  30A6
8423  30A7
8424  30A8
8425  30A9
8426  30AA
8427  30AB
8428  30AC
8429  30AD
8430  30AE
8431  30AF
8432  30B0
8433  30B1
8434  30B2
8435  30B3
8436  30B4
8437  30B5
8438  30B6
8439  30B7
8440  30B8
8441  30B9
8442  30BA
8443  30BB
8444  30BC
8445  30BD
8446  30BE
8447  30BF
8448  30C0
8449  30C1
8450  30C2
8451  30C3
8452  30C4
8453  30C5
8454  30C6
8455  30C7
8456  30C8
8457  30C9
8458  30CA
8459  30CB
8460  30CC
8461  30CD
8462  30CE
8463  30CF
8464  30D0
8465  30D1
8466  30D2
8467  30D3
8468  30D4
8469  30D5
8470  30D6
8471  30D7
8472  30D8
8473  30D9
8474  30DA
8475  30DB
8476  30DC
8477  30DD
8478  30DE
8479  30DF
8480  30E0
8481  30E1
8482  30E2
8483  30E3
8484  30E4
8485  30E5
8486  30E6
8487  30E7
8488  30E8
8489  30E9
8490  30EA
8491  30EB
8492  30EC
8493  30ED
8494  30EE
8495  30EF
8496  30F0
8497  30F1
8498  30F2
8499  30F3
8500  30F4
8501  30F5
8502  30F6
8503  30F7
8504  30F8
8505  30F9
8506  30FA
8507  30FB
8508  30FC
8509  30FD
8510  30FE
8511  30FF
8512  3100
8513  3101
8514  3102
8515  3103
8516  3104
8517  3105
8518  3106
8519  3107
8520  3108
8521  3109
8522  310A
8523  310B
8524  310C
8525  310D
8526  310E
8527  310F
8528  3110
8529  3111
8530  3112
8531  3113
8532  3114
8533  3115
8534  3116
8535  3117
8536  3118
8537  3119
8538  311A
8539  311B
8540  311C
8541  311D
8542  311E
8543  311F
8544  3120
8545  3121
8546  3122
8547  3123
8548  3124
8549  3125
8550  3126
8551  3127
8552  3128
8553  3129
8554  312A
8555  312B
8556  312C
8557  312D
8558  312E
8559  312F
8560  3130
8561  3131
8562  3132
8563  3133
8564  3134
8565  3135
8566  3136
8567  3137
8568  3138
8569  3139
8570  313A
8571  313B
8572  313C
8573  313D
8574  313E
8575  313F
8576  3140
8577  3141
8578  3142
8579  3143
8580  3144
8581  3145
8582  3146
8583  3147
8584  3148
8585  3149
8586  314A
8587  314B
8588  314C
8589  314D
8590  314E
8591  314F
8592  3150
8593  3151
8594  3152
8595  3153
8596  3154
8597  3155
8598  3156
8599  3157
8600  3158
8601  3159
8602  315A
8603  315B
8604  315C
8605  315D
8606  315E
8607  315F
8608  3160
8609  3161
8610  3162
8611  3163
8612  3164
8613  3165
8614  3166
8615  3167
8616  3168
8617  3169
8618  316A
8619  316B
8620  316C
8621  316D
8622  316E
8623  316F
8624  3170
8625  3171
8626  3172
8627  3173
8628  3174
8629  3175
8630  3176
8631  3177
8632  3178
8633  3179
8634  317A
8635  317B
8636  317C
8637  317D
8638  317E
8639  317F
8640  3180
8641  3181
8642  3182
8643  3183
8644  3184
8645  3185
8646  3186
8647  3187
8648  3188
8649  3189
8650  318A
8651  318B
8652  318C
8653  318D
8654  318E
8655  318F
8656  3190
8657  3191
8658  3192
8659  3193
8660  3194
8661  3195
8662  3196
8663  3197
8664  3198
8665  3199
8666  319A
8667  319B
8668  319C
8669  319D
8670  319E
8671  319F
8672  31A0
8673  31A1
8674  31A2
8675  31A3
8676  31A4
8677  31A5
8678  31A6
8679  31A7
8680  31A8
8681  31A9
8682  31AA
8683  31AB
8684  31AC
8685  31AD
8686  31AE
8687  31AF
8688  31B0
8689  31B1
8690  31B2
8691  31B3
8692  31B4
8693  31B5
8694  31B6
8695  31B7
8696  31B8
8697  31B9
8698  31BA
8699  31BB
8700  31BC
8701  31BD
8702  31BE
8703  31BF
8704  31C0
8705  31C1
8706  31C2
8707  31C3
8708  31C4
8709  31C5
8710  31C6
8711  31C7
8712  31C8
8713  31C9
8714  31CA
8715  31CB
8716  31CC
8717  31CD
8718  31CE
8719  31CF
8720  31D0
8721  31D1
8722  31D2
8723  31D3
8724  31D4
8725  31D5
8726  31D6
8727  31D7
8728  31D8
8729  31D9
8730  31DA
8731  31DB
8732  31DC
8733  31DD
8734  31DE
8735  31DF
8736  31E0
8737  31E1
8738  31E2
8739  31E3
8740  31E4
8741  31E5
8742  31E6
8743  31E7
8744  31E8
8745  31E9
8746  31EA
8747  31EB
8748  31EC
8749  31ED
8750  31EE
8751  31EF
8752  31F0
8753  31F1
8754  31F2
8755  31F3
8756  31F4
8757  31F5
8758  31F6
8759  31F7
8760  31F8
8761  31F9
8762  31FA
8763  31FB
8764  31FC
8765  31FD
8766  31FE
8767  31FF
8768  3200
8769  3201
8770  3202
8771  3203
8772  3204
8773  3205
8774  3206
8775  3207
8776  3208
8777  3209
8778  320A
8779  320B
8780  320C
8781  320D
8782  320E
8783  320F
8784  3210
8785  3211
8786  3212
8787  3213
8788  3214
8789  3215
8790  3216
8791  3217
8792  3218
8793  3219
8794  321A
8795  321B
8796  321C
8797  321D
8798  321E
8799  321F
8800  3220
8801  3221
8802  3222
8803  3223
8804  3224
8805  3225
8806  3226
8807  3227
8808  3228
8809  3229
8810  322A
8811  322B
8812  322C
8813  322D
8814  322E
8815  322F
8816  3230
8817  3231
8818  3232
8819  3233
8820  3234
8821  3235
8822  3236
8823  3237
8824  3238
8825  3239
8826  323A
8827  323B
8828  323C
8829  323D
8830  323E
8831  323F
8832  3240
8833  3241
8834  3242
8835  3243
8836  3244
8837  3245
8838  3246
8839  3247
8840  3248
8841  3249
8842  324A
8843  324B
8844  324C
8845  324D
8846  324E
8847  324F
8848  3250
8849  3251
8850  3252
8851  3253
8852  3254
8853  3255
8854  3256
8855  3257
8856  3258
8857  3259
8858  325A
8859  325B
8860  325C
8861  325D
8862  325E
8863  325F
8864  3260
8865  3261
8866  3262
8867  3263
8868  3264
8869  3265
8870  3266
8871  3267
8872  3268
8873  3269
8874  326A
8875  326B
8876  326C
8877  326D
8878  326E
8879  326F
8880  3270
8881  3271
8882  3272
8883  3273
8884  3274
8885  3275
8886  3276
8887  3277
8888  3278
8889  3279
8890  327A
8891  327B
8892  327C
8893  327D
8894  327E
8895  327F
8896  3280
8897  3281
8898  3282
8899  3283
8900  3284
8901  3285
8902  3286
8903  3287
8904  3288
8905  3289
8906  328A
8907  328B
8908  328C
8909  328D
8910  328E
8911  328F
8912  3290
8913  3291
8914  3292
8915  3293
8916  3294
8917  3295
8918  3296
8919  3297
8920  3298
8921  3299
8922  329A
8923  329B
8924  329C
8925  329D
8926  329E
8927  329F
8928  32A0
8929  32A1
8930  32A2
8931  32A3
8932  32A4
8933  32A5
8934  32A6
8935  32A7
8936  32A8
8937  32A9
8938  32AA
8939  32AB
8940  32AC
8941  32AD
8942  32AE
8943  32AF
8944  32B0
8945  32B1
8946  32B2
8947  32B3
8948  32B4
8949  32B5
8950  32B6
8951  32B7
8952  32B8
8953  32B9
8954  32BA
8955  32BB
8956  32BC
8957  32BD
8958  32BE
8959  32BF
8960  32C0
8961  32C1
8962  32C2
8963  32C3
8964  32C4
8965  32C5
8966  32C6
8967  32C7
8968  32C8
8969  32C9
8970  32CA
8971  32CB
8972  32CC
8973  32CD
8974  32CE
8975  32CF
8976  32D0
8977  32D1
8978  32D2
8979  32D3
8980  32D4
8981  32D5
8982  32D6
8983  32D7
8984  32D8
8985  32D9
8986  32DA
8987  32DB
8988  32DC
8989  32DD
8990  32DE
8991  32DF
8992  32E0
8993  32E1
8994  32E2
8995  32E3
8996  32E4
8997  32E5
8998  32E6
8999  32E7
9000  32E8
9001  32E9
9002  32EA
9003  32EB
9004  32EC
9005  32ED
9006  32EE
9007  32EF
9008  32F0
9009  32F1
9010  32F2
9011  32F3
9012  32F4
9013  32F5
9014  32F6
9015  32F7
9016  32F8
9017  32F9
9018  32FA
9019  32FB
9020  32FC
9021  32FD
9022  32FE
9023  32FF
9024  3300
9025  3301
9026  3302
9027  3303
9028  3304
9029  3305
9030  3306
9031  3307
9032  3308
9033  3309
9034  330A
9035  330B
9036  330C
9037  330D
9038  330E
9039  330F
9040  3310
9041  3311
9042  3312
9043  3313
9044  3314
9045  3315
9046  3316
9047  3317
9048  3318
9049  3319
9050  331A
9051  331B
9052  331C
9053  331D
9054  331E
9055  331F
9056  3320
9057  3321
9058  3322
9059  3323
9060  3324
9061  3325
9062  3326
9063  3327
9064  3328
9065  3329
9066  332A
9067  332B
9068  332C
9069  332D
9070  332E
9071  332F
9072  3330
9073  3331
9074  3332
9075  3333
9076  3334
9077  3335
9078  3336
9079  3337
9080  3338
9081  3339
9082  333A
9083  333B
9084  333C
9085  333D
9086  333E
9087  333F
9088  3340
9089  3341
9090  3342
9091  3343
9092  3344
9093  3345
9094  3346
9095  3347
9096  3348
9097  3349
9098  334A
9099  334B
9100  334C
9101  334D
9102  334E
9103  334F
9104  3350
9105  3351
9106  3352
9107  3353
9108  3354
9109  3355
9110  3356
9111  3357
9112  3358
9113  3359
9114  335A
9115  335B
9116  335C
9117  335D
9118  335E
9119  335F
9120  3360
9121  3361
9122  3362
9123  3363
9124  3364
9125  3365
9126  3366
9127  3367
9128  3368
9129  3369
9130  336A
9131  336B
9132  336C
9133  336D
9134  336E
9135  336F
9136  3370
9137  3371
9138  3372
9139  3373
9140  3374
9141  3375
9142  3376
9143  3377
9144  3378
9145  3379
9146  337A
9147  337B
9148  337C
9149  337D
9150  337E
9151  337F
9152  3380
9153  3381
9154  3382
9155  3383
9156  3384
9157  3385
9158  3386
9159  3387
9160  3388
9161  3389
9162  338A
9163  338B
9164  338C
9165  338D
9166  338E
9167  338F
9168  3390
9169  3391
9170  3392
9171  3393
9172  3394
9173  3395
9174  3396
9175  3397
9176  3398
9177  3399
9178  339A
9179  339B
9180  339C
9181  339D
9182  339E
9183  339F
9184  33A0
9185  33A1
9186  33A2
9187  33A3
9188  33A4
9189  33A5
9190  33A6
9191  33A7
9192  33A8
9193  33A9
9194  33AA
9195  33AB
9196  33AC
9197  33AD
9198  33AE
9199  33AF
9200  33B0
9201  33B1
9202  33B2
9203  33B3
9204  33B4
9205  33B5
9206  33B6
9207  33B7
9208  33B8
9209  33B9
9210  33BA
9211  33BB
9212  33BC
9213  33BD
9214  33BE
9215  33BF
9216  33C0
9217  33C1
9218  33C2
9219  33C3
9220  33C4
9221  33C5
9222  33C6
9223  33C7
9224  33C8
9225  33C9
9226  33CA
9227  33CB
9228  33CC
9229  33CD
9230  33CE
9231  33CF
9232  33D0
9233  33D1
9234  33D2
9235  33D3
9236  33D4
9237  33D5
9238  33D6
9239  33D7
9240  33D8
9241  33D9
9242  33DA
9243  33DB
9244  33DC
9245  33DD
9246  33DE
9247  33DF
9248  33E0
9249  33E1
9250  33E2
9251  33E3
9252  33E4
9253  33E5
9254  33E6
9255  33E7
9256  33E8
9257  33E9
9258  33EA
9259  33EB
9260  33EC
9261  33ED
9262  33EE
9263  33EF
9264  33F0
9265  33F1
9266  33F2
9267  33F3
9268  33F4
9269  33F5
9270  33F6
9271  33F7
9272  33F8
9273  33F9
9274  33FA
9275  33FB
9276  33FC
9277  33FD
9278  33FE
9279  33FF
9280  3400
9281  3401
9282  3402
9283  3403
9284  3404
9285  3405
9286  3406
9287  3407
9288  3408
9289  3409
9290  340A
9291  340B
9292  340C
9293  340D
9294  340E
9295  340F
9296  3410
9297  3411
9298  3412
9299  3413
9300  3414
9301  3415
9302  3416
9303  3417
9304  3418
9305  3419
9306  341A
9307  341B
9308  341C
9309  341D
9310  341E
9311  341F
9312  3420
9313  3421
9314  3422
9315  3423
9316  3424
9317  3425
9318  3426
9319  3427
9320  3428
9321  3429
9322  342A
9323  342B
9324  342C
9325  342D
9326  342E
9327  342F
9328  3430
9329  3431
9330  3432
9331  3433
9332  3434
9333  3435
9334  3436
9335  3437
9336  3438
9337  3439
9338  343A
9339  343B
9340  343C
9341  343D
9342  343E
9343  343F
9344  3440
9345  3441
9346  3442
9347  3443
9348  3444
9349  3445
9350  3446
9351  3447
9352  3448
9353  3449
9354  344A
9355  344B
9356  344C
9357  344D
9358  344E
9359  344F
9360  3450
9361  3451
9362  3452
9363  3453
9364  3454
9365  3455
9366  3456
9367  3457
9368  3458
9369  3459
9370  345A
9371  345B
9372  345C
9373  345D
9374  345E
9375  345F
9376  3460
9377  3461
9378  3462
9379  3463
9380  3464
9381  3465
9382  3466
9383  3467
9384  3468
9385  3469
9386  346A
9387  346B
9388  346C
9389  346D
9390  346E
9391  346F
9392  3470
9393  3471
9394  3472
9395  3473
9396  3474
9397  3475
9398  3476
9399  3477
9400  3478
9401  3479
9402  347A
9403  347B
9404  347C
9405  347D
9406  347E
9407  347F
9408  3480
9409  3481
9410  3482
9411  3483
9412  3484
9413  3485
9414  3486
9415  3487
9416  3488
9417  3489
9418  348A
9419  348B
9420  348C
9421  348D
9422  348E
9423  348F
9424  3490
9425  3491
9426  3492
9427  3493
9428  3494
9429  3495
9430  3496
9431  3497
9432  3498
9433  3499
9434  349A
9435  349B
9436  349C
9437  349D
9438  349E
9439  349F
9440  34A0
9441  34A1
9442  34A2
9443  34A3
9444  34A4
9445  34A5
9446  34A6
9447  34A7
9448  34A8
9449  34A9
9450  34AA
9451  34AB
9452  34AC
9453  34AD
9454  34AE
9455  34AF
9456  34B0
9457  34B1
9458  34B2
9459  34B3
9460  34B4
9461  34B5
9462  34B6
9463  34B7
9464  34B8
9465  34B9
9466  34BA
9467  34BB
9468  34BC
9469  34BD
9470  34BE
9471  34BF
9472  34C0
9473  34C1
9474  34C2
9475  34C3
9476  34C4
9477  34C5
9478  34C6
9479  34C7
9480  34C8
9481  34C9
9482  34CA
9483  34CB
9484  34CC
9485  34CD
9486  34CE
9487  34CF
9488  34D0
9489  34D1
9490  34D2
9491  34D3
9492  34D4
9493  34D5
9494  34D6
9495  34D7
9496  34D8
9497  34D9
9498  34DA
9499  34DB
9500  34DC
9501  34DD
9502  34DE
9503  34DF
9504  34E0
9505  34E1
9506  34E2
9507  34E3
9508  34E4
9509  34E5
9510  34E6
9511  34E7
9512  34E8
9513  34E9
9514  34EA
9515  34EB
9516  34EC
9517  34ED
9518  34EE
9519  34EF
9520  34F0
9521  34F1
9522  34F2
9523  34F3
9524  34F4
9525  34F5
9526  34F6
9527  34F7
9528  34F8
9529  34F9
9530  34FA
9531  34FB
9532  34FC
9533  34FD
9534  34FE
9535  34FF
9536  3500
9537  3501
9538  3502
9539  3503
9540  3504
9541  3505
9542  3506
9543  3507
9544  3508
9545  3509
9546  350A
9547  350B
9548  350C
9549  350D
9550  350E
9551  350F
9552  3510
9553  3511
9554  3512
9555  3513
9556  3514
9557  3515
9558  3516
9559  3517
9560  3518
9561  3519
9562  351A
9563  351B
9564  351C
9565  351D
9566  351E
9567  351F
9568  3520
9569  3521
9570  3522
9571  3523
9572  3524
9573  3525
9574  3526
9575  3527
9576  3528
9577  3529
9578  352A
9579  352B
9580  352C
9581  352D
9582  352E
9583  352F
9584  3530
9585  3531
9586  3532
9587  3533
9588  3534
9589  3535
9590  3536
9591  3537
9592  3538
9593  3539
9594  353A
9595  353B
9596  353C
9597  353D
9598  353E
9599  353F
9600  3540
9601  3541
9602  3542
9603  3543
9604  3544
9605  3545
9606  3546
9607  3547
9608  3548
9609  3549
9610  354A
9611  354B
9612  354C
9613  354D
9614  354E
9615  354F
9616  3550
9617  3551
9618  3552
9619  3553
9620  3554
9621  3555
9622  3556
9623  3557
9624  3558
9625  3559
9626  355A
9627  355B
9628  355C
9629  355D
9630  355E
9631  355F
9632  3560
9633  3561
9634  3562
9635  3563
9636  3564
9637  3565
9638  3566
9639  3567
9640  3568
9641  3569
9642  356A
9643  356B
9644  356C
9645  356D
9646  356E
9647  356F
9648  3570
9649  3571
9650  3572
9651  3573
9652  3574
9653  3575
9654  3576
9655  3577
9656  3578
9657  3579
9658  357A
9659  357B
9660  357C
9661  357D
9662  357E
9663  357F
9664  3580
9665  3581
9666  3582
9667  3583
9668  3584
9669  3585
9670  3586
9671  3587
9672  3588
9673  3589
9674  358A
9675  358B
9676  358C
9677  358D
9678  358E
9679  358F
9680  3590
9681  3591
9682  3592
9683  3593
9684  3594
9685  3595
9686  3596
9687  3597
9688  3598
9689  3599
9690  359A
9691  359B
9692  359C
9693  359D
9694  359E
9695  359F
9696  35A0
9697  35A1
9698  35A2
9699  35A3
9700  35A4
9701  35A5
9702  35A6
9703  35A7
9704  35A8
9705  35A9
9706  35AA
9707  35AB
9708  35AC
9709  35AD
9710  35AE
9711  35AF
9712  35B0
9713  35B1
9714  35B2
9715  35B3
9716  35B4
9717  35B5
9718  35B6
9719  35B7
9720  35B8
9721  35B9
9722  35BA
9723  35BB
9724  35BC
9725  35BD
9726  35BE
9727  35BF
9728  35C0
9729  35C1
9730  35C2
9731  35C3
9732  35C4
9733  35C5
9734  35C6
9735  35C7
9736  35C8
9737  35C9
9738  35CA
9739  35CB
9740  35CC
9741  35CD
9742  35CE
9743  35CF
9744  35D0
9745  35D1
9746  35D2
9747  35D3
9748  35D4
9749  35D5
9750  35D6
9751  35D7
9752  35D8
9753  35D9
9754  35DA
9755  35DB
9756  35DC
9757  35DD
9758  35DE
9759  35DF
9760  35E0
9761  35E1
9762  35E2
9763  35E3
9764  35E4
9765  35E5
9766  35E6
9767  35E7
9768  35E8
9769  35E9
9770  35EA
9771  35EB
9772  35EC
9773  35ED
9774  35EE
9775  35EF
9776  35F0
9777  35F1
9778  35F2
9779  35F3
9780  35F4
9781  35F5
9782  35F6
9783  35F7
9784  35F8
9785  35F9
9786  35FA
9787  35FB
9788  35FC
9789  35FD
9790  35FE
9791  35FF
9792  3600
9793  3601
9794  3602
9795  3603
9796  3604
9797  3605
9798  3606
9799  3607
9800  3608
9801  3609
9802  360A
9803  360B
9804  360C
9805  360D
9806  360E
9807  360F
9808  3610
9809  3611
9810  3612
9811  3613
9812  3614
9813  3615
9814  3616
9815  3617
9816  3618
9817  3619
9818  361A
9819  361B
9820  361C
9821  361D
9822  361E
9823  361F
9824  3620
9825  3621
9826  3622
9827  3623
9828  3624
9829  3625
9830  3626
9831  3627
9832  3628
9833  3629
9834  362A
9835  362B
9836  362C
9837  362D
9838  362E
9839  362F
9840  3630
9841  3631
9842  3632
9843  3633
9844  3634
9845  3635
9846  3636
9847  3637
9848  3638
9849  3639
9850  363A
9851  363B
9852  363C
9853  363D
9854  363E
9855  363F
9856  3640
9857  3641
9858  3642
9859  3643
9860  3644
9861  3645
9862  3646
9863  3647
9864  3648
9865  3649
9866  364A
9867  364B
9868  364C
9869  364D
9870  364E
9871  364F
9872  3650
9873  3651
9874  3652
9875  3653
9876  3654
9877  3655
9878  3656
9879  3657
9880  3658
9881  3659
9882  365A
9883  365B
9884  365C
9885  365D
9886  365E
9887  365F
9888  3660
9889  3661
9890  3662
9891  3663
9892  3664
9893  3665
9894  3666
9895  3667
9896  3668
9897  3669
9898  366A
9899  366B
9900  366C
9901  366D
9902  366E
9903  366F
9904  3670
9905  3671
9906  3672
9907  3673
9908  3674
9909  3675
9910  3676
9911  3677
9912  3678
9913  3679
9914  367A
9915  367B
9916  367C
9917  367D
9918  367E
9919  367F
9920  3680
9921  3681
9922  3682
9923  3683
9924  3684
9925  3685
9926  3686
9927  3687
9928  3688
9929  3689
9930  368A
9931  368B
9932  368C
9933  368D
9934  368E
9935  368F
9936  3690
9937  3691
9938  3692
9939  3693
9940  3694
9941  3695
9942  3696
9943  3697
9944  3698
9945  3699
9946  369A
9947  369B
9948  369C
9949  369D
9950  369E
9951  369F
9952  36A0
9953  36A1
9954  36A2
9955  36A3
9956  36A4
9957  36A5
9958  36A6
9959  36A7
9960  36A8
9961  36A9
9962  36AA
9963  36AB
9964  36AC
9965  36AD
9966  36AE
9967  36AF
9968  36B0
9969  36B1
9970  36B2
9971  36B3
9972  36B4
9973  36B5
9974  36B6
9975  36B7
9976  36B8
9977  36B9
9978  36BA
9979  36BB
9980  36BC
9981  36BD
9982  36BE
9983  36BF
9984  36C0
9985  36C1
9986  36C2
9987  36C3
9988  36C4
9989  36C5
9990  36C6
9991  36C7
9992  36C8
9993  36C9
9994  36CA
9995  36CB
9996  36CC
9997  36CD
9998  36CE
9999  36CF
10000  36D0
10001  36D1
10002  36D2
10003  36D3
10004  36D4
10005  36D5
10006  36D6
10007  36D7
10008  36D8
10009  36D9
10010  36DA
10011  36DB
10012  36DC
10013  36DD
10014  36DE
10015  36DF
10016  36E0
10017  36E1
10018  36E2
10019  36E3
10020  36E4
10021  36E5
10022  36E6
10023  36E7
10024  36E8
10025  36E9
10026  36EA
10027  36EB
10028  36EC
10029  36ED
10030  36EE
10031  36EF
10032  36F0
10033  36F1
10034  36F2
10035  36F3
10036  36F4
10037  36F5
10038  36F6
10039  36F7
10040  36F8
10041  36F9
10042  36FA
10043  36FB
10044  36FC
10045  36FD
10046  36FE
10047  36FF
10048  3700
10049  3701
10050  3702
10051  3703
10052  3704
10053  3705
10054  3706
10055  3707
10056  3708
10057  3709
10058  370A
10059  370B
10060  370C
10061  370D
10062  370E
10063  370F
10064  3710
10065  3711
10066  3712
10067  3713
10068  3714
10069  3715
10070  3716
10071  3717
10072  3718
10073  3719
10074  371A
10075  371B
10076  371C
10077  371D
10078  371E
10079  371F
10080  3720
10081  3721
10082  3722
10083  3723
10084  3724
10085  3725
10086  3726
10087  3727
10088  3728
10089  3729
10090  372A
10091  372B
10092  372C
10093  372D
10094  372E
10095  372F
10096  3730
10097  3731
10098  3732
10099  3733
10100  3734
10101  3735
10102  3736
10103  3737
10104  3738
10105  3739
10106  373A
10107  373B
10108  373C
10109  373D
10110  373E
10111  373F
10112  3740
10113  3741
10114  3742
10115  3743
10116  3744
10117  3745
10118  3746
10119  3747
10120  3748
10121  3749
10122  374A
10123  374B
10124  374C
10125  374D
10126  374E
10127  374F
10128  3750
10129  3751
10130  3752
10131  3753
10132  3754
10133  3755
10134  3756
10135  3757
10136  3758
10137  3759
10138  375A
10139  375B
10140  375C
10141  375D
10142  375E
10143  375F
10144  3760
10145  3761
10146  3762
10147  3763
10148  3764
10149  3765
10150  3766
10151  3767
10152  3768
10153  3769
10154  376A
10155  376B
10156  376C
10157  376D
10158  376E
10159  376F
10160  3770
10161  3771
10162  3772
10163  3773
10164  3774
10165  3775
10166  3776
10167  3777
10168  3778
10169  3779
10170  377A
10171  377B
10172  377C
10173  377D
10174  377E
10175  377F
10176  3780
10177  3781
10178  3782
10179  3783
10180  3784
10181  3785
10182  3786
10183  3787
10184  3788
10185  3789
10186  378A
10187  378B
10188  378C
10189  378D
10190  378E
10191  378F
10192  3790
10193  3791
10194  3792
10195  3793
10196  3794
10197  3795
10198  3796
10199  3797
10200  3798
10201  3799
10202  379A
10203  379B
10204  379C
10205  379D
10206  379E
10207  379F
10208  37A0
10209  37A1
10210  37A2
10211  37A3
10212  37A4
10213  37A5
10214  37A6
10215  37A7
10216  37A8
10217  37A9
10218  37AA
10219  37AB
10220  37AC
10221  37AD
10222  37AE
10223  37AF
10224  37B0
10225  37B1
10226  37B2
10227  37B3
10228  37B4
10229  37B5
10230  37B6
10231  37B7
10232  37B8
10233  37B9
10234  37BA
10235  37BB
10236  37BC
10237  37BD
10238  37BE
10239  37BF
10240  37C0
10241  37C1
10242  37C2
10243  37C3
10244  37C4
10245  37C5
10246  37C6
10247  37C7
10248  37C8
10249  37C9
10250  37CA
10251  37CB
10252  37CC
10253  37CD
10254  37CE
10255  37CF
10256  37D0
10257  37D1
10258  37D2
10259  37D3
10260  37D4
10261  37D5
10262  37D6
10263  37D7
10264  37D8
10265  37D9
10266  37DA
10267  37DB
10268  37DC
10269  37DD
10270  37DE
10271  37DF
10272  37E0
10273  37E1
10274  37E2
10275  37E3
10276  37E4
10277  37E5
10278  37E6
10279  37E7
10280  37E8
10281  37E9
10282  37EA
10283  37EB
10284  37EC
10285  37ED
10286  37EE
10287  37EF
10288  37F0
10289  37F1
10290  37F2
10291  37F3
10292  37F4
10293  37F5
10294  37F6
10295  37F7
10296  37F8
10297  37F9
10298  37FA
10299  37FB
10300  37FC
10301  37FD
10302  37FE
10303  37FF
10304  3800
10305  3801
10306  3802
10307  3803
10308  3804
10309  3805
10310  3806
10311  3807
10312  3808
10313  3809
10314  380A
10315  380B
10316  380C
10317  380D
10318  380E
10319  380F
10320  3810
10321  3811
10322  3812
10323  3813
10324  3814
10325  3815
10326  3816
10327  3817
10328  3818
10329  3819
10330  381A
10331  381B
10332  381C
10333  381D
10334  381E
10335  381F
10336  3820
10337  3821
10338  3822
10339  3823
10340  3824
10341  3825
10342  3826
10343  3827
10344  3828
10345  3829
10346  382A
10347  382B
10348  382C
10349  382D
10350  382E
10351  382F
10352  3830
10353  3831
10354  3832
10355  3833
10356  3834
10357  3835
10358  3836
10359  3837
10360  3838
10361  3839
10362  383A
10363  383B
10364  383C
10365  383D
10366  383E
10367  383F
10368  3840
10369  3841
10370  3842
10371  3843
10372  3844
10373  3845
10374  3846
10375  3847
10376  3848
10377  3849
10378  384A
10379  384B
10380  384C
10381  384D
10382  384E
10383  384F
10384  3850
10385  3851
10386  3852
10387  3853
10388  3854
10389  3855
10390  3856
10391  3857
10392  3858
10393  3859
10394  385A
10395  385B
10396  385C
10397  385D
10398  385E
10399  385F
10400  3860
10401  3861
10402  3862
10403  3863
10404  3864
10405  3865
10406  3866
10407  3867
10408  3868
10409  3869
10410  386A
10411  386B
10412  386C
10413  386D
10414  386E
10415  386F
10416  3870
10417  3871
10418  3872
10419  3873
10420  3874
10421  3875
10422  3876
10423  3877
10424  3878
10425  3879
10426  387A
10427  387B
10428  387C
10429  387D
10430  387E
10431  387F
10432  3880
10433  3881
10434  3882
10435  3883
10436  3884
10437  3885
10438  3886
10439  3887
10440  3888
10441  3889
10442  388A
10443  388B
10444  388C
10445  388D
10446  388E
10447  388F
10448  3890
10449  3891
10450  3892
10451  3893
10452  3894
10453  3895
10454  3896
10455  3897
10456  3898
10457  3899
10458  389A
10459  389B
10460  389C
10461  389D
10462  389E
10463  389F
10464  38A0
10465  38A1
10466  38A2
10467  38A3
10468  38A4
10469  38A5
10470  38A6
10471  38A7
10472  38A8
10473  38A9
10474  38AA
10475  38AB
10476  38AC
10477  38AD
10478  38AE
10479  38AF
10480  38B0
10481  38B1
10482  38B2
10483  38B3
10484  38B4
10485  38B5
10486  38B6
10487  38B7
10488  38B8
10489  38B9
10490  38BA
10491  38BB
10492  38BC
10493  38BD
10494  38BE
10495  38BF
10496  38C0
10497  38C1
10498  38C2
10499  38C3
10500  38C4
10501  38C5
10502  38C6
10503  38C7
10504  38C8
10505  38C9
10506  38CA
10507  38CB
10508  38CC
10509  38CD
10510  38CE
10511  38CF
10512  38D0
10513  38D1
10514  38D2
10515  38D3
10516  38D4
10517  38D5
10518  38D6
10519  38D7
10520  38D8
10521  38D9
10522  38DA
10523  38DB
10524  38DC
10525  38DD
10526  38DE
10527  38DF
10528  38E0
10529  38E1
10530  38E2
10531  38E3
10532  38E4
10533  38E5
10534  38E6
10535  38E7
10536  38E8
10537  38E9
10538  38EA
10539  38EB
10540  38EC
10541  38ED
10542  38EE
10543  38EF
10544  38F0
10545  38F1
10546  38F2
10547  38F3
10548  38F4
10549  38F5
10550  38F6
10551  38F7
10552  38F8
10553  38F9
10554  38FA
10555  38FB
10556  38FC
10557  38FD
10558  38FE
10559  38FF
10560  3900
10561  3901
10562  3902
10563  3903
10564  3904
10565  3905
10566  3906
10567  3907
10568  3908
10569  3909
10570  390A
10571  390B
10572  390C
10573  390D
10574  390E
10575  390F
10576  3910
10577  3911
10578  3912
10579  3913
10580  3914
10581  3915
10582  3916
10583  3917
10584  3918
10585  3919
10586  391A
10587  391B
10588  391C
10589  391D
10590  391E
10591  391F
10592  3920
10593  3921
10594  3922
10595  3923
10596  3924
10597  3925
10598  3926
10599  3927
10600  3928
10601  3929
10602  392A
10603  392B
10604  392C
10605  392D
10606  392E
10607  392F
10608  3930
10609  3931
10610  3932
10611  3933
10612  3934
10613  3935
10614  3936
10615  3937
10616  3938
10617  3939
10618  393A
10619  393B
10620  393C
10621  393D
10622  393E
10623  393F
10624  3940
10625  3941
10626  3942
10627  3943
10628  3944
10629  3945
10630  3946
10631  3947
10632  3948
10633  3949
10634  394A
10635  394B
10636  394C
10637  394D
10638  394E
10639  394F
10640  3950
10641  3951
10642  3952
10643  3953
10644  3954
10645  3955
10646  3956
10647  3957
10648  3958
10649  3959
10650  395A
10651  395B
10652  395C
10653  395D
10654  395E
10655  395F
10656  3960
10657  3961
10658  3962
10659  3963
10660  3964
10661  3965
10662  3966
10663  3967
10664  3968
10665  3969
10666  396A
10667  396B
10668  396C
10669  396D
10670  396E
10671  396F
10672  3970
10673  3971
10674  3972
10675  3973
10676  3974
10677  3975
10678  3976
10679  3977
10680  3978
10681  3979
10682  397A
10683  397B
10684  397C
10685  397D
10686  397E
10687  397F
10688  3980
10689  3981
10690  3982
10691  3983
10692  3984
10693  3985
10694  3986
10695  3987
10696  3988
10697  3989
10698  398A
10699  398B
10700  398C
10701  398D
10702  398E
10703  398F
10704  3990
10705  3991
10706  3992
10707  3993
10708  3994
10709  3995
10710  3996
10711  3997
10712  3998
10713  3999
10714  399A
10715  399B
10716  399C
10717  399D
10718  399E
10719  399F
10720  39A0
10721  39A1
10722  39A2
10723  39A3
10724  39A4
10725  39A5
10726  39A6
10727  39A7
10728  39A8
10729  39A9
10730  39AA
10731  39AB
10732  39AC
10733  39AD
10734  39AE
10735  39AF
10736  39B0
10737  39B1
10738  39B2
10739  39B3
10740  39B4
10741  39B5
10742  39B6
10743  39B7
10744  39B8
10745  39B9
10746  39BA
10747  39BB
10748  39BC
10749  39BD
10750  39BE
10751  39BF
10752  39C0
10753  39C1
10754  39C2
10755  39C3
10756  39C4
10757  39C5
10758  39C6
10759  39C7
10760  39C8
10761  39C9
10762  39CA
10763  39CB
10764  39CC
10765  39CD
10766  39CE
10767  39CF
10768  39D0
10769  39D1
10770  39D2
10771  39D3
10772  39D4
10773  39D5
10774  39D6
10775  39D7
10776  39D8
10777  39D9
10778  39DA
10779  39DB
10780  39DC
10781  39DD
10782  39DE
10783  39DF
10784  39E0
10785  39E1
10786  39E2
10787  39E3
10788  39E4
10789  39E5
10790  39E6
10791  39E7
10792  39E8
10793  39E9
10794  39EA
10795  39EB
10796  39EC
10797  39ED
10798  39EE
10799  39EF
10800  39F0
10801  39F1
10802  39F2
10803  39F3
10804  39F4
10805  39F5
10806  39F6
10807  39F7
10808  39F8
10809  39F9
10810  39FA
10811  39FB
10812  39FC
10813  39FD
10814  39FE
10815  39FF
10816  3A00
10817  3A01
10818  3A02
10819  3A03
10820  3A04
10821  3A05
10822  3A06
10823  3A07
10824  3A08
10825  3A09
10826  3A0A
10827  3A0B
10828  3A0C
10829  3A0D
10830  3A0E
10831  3A0F
10832  3A10
10833  3A11
10834  3A12
10835  3A13
10836  3A14
10837  3A15
10838  3A16
10839  3A17
10840  3A18
10841  3A19
10842  3A1A
10843  3A1B
10844  3A1C
10845  3A1D
10846  3A1E
10847  3A1F
10848  3A20
10849  3A21
10850  3A22
10851  3A23
10852  3A24
10853  3A25
10854  3A26
10855  3A27
10856  3A28
10857  3A29
10858  3A2A
10859  3A2B
10860  3A2C
10861  3A2D
10862  3A2E
10863  3A2F
10864  3A30
10865  3A31
10866  3A32
10867  3A33
10868  3A34
10869  3A35
10870  3A36
10871  3A37
10872  3A38
10873  3A39
10874  3A3A
10875  3A3B
10876  3A3C
10877  3A3D
10878  3A3E
10879  3A3F
10880  3A40
10881  3A41
10882  3A42
10883  3A43
10884  3A44
10885  3A45
10886  3A46
10887  3A47
10888  3A48
10889  3A49
10890  3A4A
10891  3A4B
10892  3A4C
10893  3A4D
10894  3A4E
10895  3A4F
10896  3A50
10897  3A51
10898  3A52
10899  3A53
10900  3A54
10901  3A55
10902  3A56
10903  3A57
10904  3A58
10905  3A59
10906  3A5A
10907  3A5B
10908  3A5C
10909  3A5D
10910  3A5E
10911  3A5F
10912  3A60
10913  3A61
10914  3A62
10915  3A63
10916  3A64
10917  3A65
10918  3A66
10919  3A67
10920  3A68
10921  3A69
10922  3A6A
10923  3A6B
10924  3A6C
10925  3A6D
10926  3A6E
10927  3A6F
10928  3A70
10929  3A71
10930  3A72
10931  3A73
10932  3A74
10933  3A75
10934  3A76
10935  3A77
10936  3A78
10937  3A79
10938  3A7A
10939  3A7B
10940  3A7C
10941  3A7D
10942  3A7E
10943  3A7F
10944  3A80
10945  3A81
10946  3A82
10947  3A83
10948  3A84
10949  3A85
10950  3A86
10951  3A87
10952  3A88
10953  3A89
10954  3A8A
10955  3A8B
10956  3A8C
10957  3A8D
10958  3A8E
10959  3A8F
10960  3A90
10961  3A91
10962  3A92
10963  3A93
10964  3A94
10965  3A95
10966  3A96
10967  3A97
10968  3A98
10969  3A99
10970  3A9A
10971  3A9B
10972  3A9C
10973  3A9D
10974  3A9E
10975  3A9F
10976  3AA0
10977  3AA1
10978  3AA2
10979  3AA3
10980  3AA4
10981  3AA5
10982  3AA6
10983  3AA7
10984  3AA8
10985  3AA9
10986  3AAA
10987  3AAB
10988  3AAC
10989  3AAD
10990  3AAE
10991  3AAF
10992  3AB0
10993  3AB1
10994  3AB2
10995  3AB3
10996  3AB4
10997  3AB5
10998  3AB6
10999  3AB7
11000  3AB8
11001  3AB9
11002  3ABA
11003  3ABB
11004  3ABC
11005  3ABD
11006  3ABE
11007  3ABF
11008  3AC0
11009  3AC1
11010  3AC2
11011  3AC3
11012  3AC4
11013  3AC5
11014  3AC6
11015  3AC7
11016  3AC8
11017  3AC9
11018  3ACA
11019  3ACB
11020  3ACC
11021  3ACD
11022  3ACE
11023  3ACF
11024  3AD0
11025  3AD1
11026  3AD2
11027  3AD3
11028  3AD4
11029  3AD5
11030  3AD6
11031  3AD7
11032  3AD8
11033  3AD9
11034  3ADA
11035  3ADB
11036  3ADC
11037  3ADD
11038  3ADE
11039  3ADF
11040  3AE0
11041  3AE1
11042  3AE2
11043  3AE3
11044  3AE4
11045  3AE5
11046  3AE6
11047  3AE7
11048  3AE8
11049  3AE9
11050  3AEA
11051  3AEB
11052  3AEC
11053  3AED
11054  3AEE
11055  3AEF
11056  3AF0
11057  3AF1
11058  3AF2
11059  3AF3
11060  3AF4
11061  3AF5
11062  3AF6
11063  3AF7
11064  3AF8
11065  3AF9
11066  3AFA
11067  3AFB
11068  3AFC
11069  3AFD
11070  3AFE
11071  3AFF
11072  3B00
11073  3B01
11074  3B02
11075  3B03
11076  3B04
11077  3B05
11078  3B06
11079  3B07
11080  3B08
11081  3B09
11082  3B0A
11083  3B0B
11084  3B0C
11085  3B0D
11086  3B0E
11087  3B0F
11088  3B10
11089  3B11
11090  3B12
11091  3B13
11092  3B14
11093  3B15
11094  3B16
11095  3B17
11096  3B18
11097  3B19
11098  3B1A
11099  3B1B
11100  3B1C
11101  3B1D
11102  3B1E
11103  3B1F
11104  3B20
11105  3B21
11106  3B22
11107  3B23
11108  3B24
11109  3B25
11110  3B26
11111  3B27
11112  3B28
11113  3B29
11114  3B2A
11115  3B2B
11116  3B2C
11117  3B2D
11118  3B2E
11119  3B2F
11120  3B30
11121  3B31
11122  3B32
11123  3B33
11124  3B34
11125  3B35
11126  3B36
11127  3B37
11128  3B38
11129  3B39
11130  3B3A
11131  3B3B
11132  3B3C
11133  3B3D
11134  3B3E
11135  3B3F
11136  3B40
11137  3B41
11138  3B42
11139  3B43
11140  3B44
11141  3B45
11142  3B46
11143  3B47
11144  3B48
11145  3B49
11146  3B4A
11147  3B4B
11148  3B4C
11149  3B4D
11150  3B4E
11151  3B4F
11152  3B50
11153  3B51
11154  3B52
11155  3B53
11156  3B54
11157  3B55
11158  3B56
11159  3B57
11160  3B58
11161  3B59
11162  3B5A
11163  3B5B
11164  3B5C
11165  3B5D
11166  3B5E
11167  3B5F
11168  3B60
11169  3B61
11170  3B62
11171  3B63
11172  3B64
11173  3B65
11174  3B66
11175  3B67
11176  3B68
11177  3B69
11178  3B6A
11179  3B6B
11180  3B6C
11181  3B6D
11182  3B6E
11183  3B6F
11184  3B70
11185  3B71
11186  3B72
11187  3B73
11188  3B74
11189  3B75
11190  3B76
11191  3B77
11192  3B78
11193  3B79
11194  3B7A
11195  3B7B
11196  3B7C
11197  3B7D
11198  3B7E
11199  3B7F
11200  3B80
11201  3B81
11202  3B82
11203  3B83
11204  3B84
11205  3B85
11206  3B86
11207  3B87
11208  3B88
11209  3B89
11210  3B8A
11211  3B8B
11212  3B8C
11213  3B8D
11214  3B8E
11215  3B8F
11216  3B90
11217  3B91
11218  3B92
11219  3B93
11220  3B94
11221  3B95
11222  3B96
11223  3B97
11224  3B98
11225  3B99
11226  3B9A
11227  3B9B
11228  3B9C
11229  3B9D
11230  3B9E
11231  3B9F
11232  3BA0
11233  3BA1
11234  3BA2
11235  3BA3
11236  3BA4
11237  3BA5
11238  3BA6
11239  3BA7
11240  3BA8
11241  3BA9
11242  3BAA
11243  3BAB
11244  3BAC
11245  3BAD
11246  3BAE
11247  3BAF
11248  3BB0
11249  3BB1
11250  3BB2
11251  3BB3
11252  3BB4
11253  3BB5
11254  3BB6
11255  3BB7
11256  3BB8
11257  3BB9
11258  3BBA
11259  3BBB
11260  3BBC
11261  3BBD
11262  3BBE
11263  3BBF
11264  3BC0
11265  3BC1
11266  3BC2
11267  3BC3
11268  3BC4
11269  3BC5
11270  3BC6
11271  3BC7
11272  3BC8
11273  3BC9
11274  3BCA
11275  3BCB
11276  3BCC
11277  3BCD
11278  3BCE
11279  3BCF
11280  3BD0
11281  3BD1
11282  3BD2
11283  3BD3
11284  3BD4
11285  3BD5
11286  3BD6
11287  3BD7
11288  3BD8
11289  3BD9
11290  3BDA
11291  3BDB
11292  3BDC
11293  3BDD
11294  3BDE
11295  3BDF
11296  3BE0
11297  3BE1
11298  3BE2
11299  3BE3
11300  3BE4
11301  3BE5
11302  3BE6
11303  3BE7
11304  3BE8
11305  3BE9
11306  3BEA
11307  3BEB
11308  3BEC
11309  3BED
11310  3BEE
11311  3BEF
11312  3BF0
11313  3BF1
11314  3BF2
11315  3BF3
11316  3BF4
11317  3BF5
11318  3BF6
11319  3BF7
11320  3BF8
11321  3BF9
11322  3BFA
11323  3BFB
11324  3BFC
11325  3BFD
11326  3BFE
11327  3BFF
11328  3C00
11329  3C01
11330  3C02
11331  3C03
11332  3C04
11333  3C05
11334  3C06
11335  3C07
11336  3C08
11337  3C09
11338  3C0A
11339  3C0B
11340  3C0C
11341  3C0D
11342  3C0E
11343  3C0F
11344  3C10
11345  3C11
11346  3C12
11347  3C13
11348  3C14
11349  3C15
11350  3C16
11351  3C17
11352  3C18
11353  3C19
11354  3C1A
11355  3C1B
11356  3C1C
11357  3C1D
11358  3C1E
11359  3C1F
11360  3C20
11361  3C21
11362  3C22
11363  3C23
11364  3C24
11365  3C25
11366  3C26
11367  3C27
11368  3C28
11369  3C29
11370  3C2A
11371  3C2B
11372  3C2C
11373  3C2D
11374  3C2E
11375  3C2F
11376  3C30
11377  3C31
11378  3C32
11379  3C33
11380  3C34
11381  3C35
11382  3C36
11383  3C37
11384  3C38
11385  3C39
11386  3C3A
11387  3C3B
11388  3C3C
11389  3C3D
11390  3C3E
11391  3C3F
11392  3C40
11393  3C41
11394  3C42
11395  3C43
11396  3C44
11397  3C45
11398  3C46
11399  3C47
11400  3C48
11401  3C49
11402  3C4A
11403  3C4B
11404  3C4C
11405  3C4D
11406  3C4E
11407  3C4F
11408  3C50
11409  3C51
11410  3C52
11411  3C53
11412  3C54
11413  3C55
11414  3C56
11415  3C57
11416  3C58
11417  3C59
11418  3C5A
11419  3C5B
11420  3C5C
11421  3C5D
11422  3C5E
11423  3C5F
11424  3C60
11425  3C61
11426  3C62
11427  3C63
11428  3C64
11429  3C65
11430  3C66
11431  3C67
11432  3C68
11433  3C69
11434  3C6A
11435  3C6B
11436  3C6C
11437  3C6D
11438  3C6E
11439  3C6F
11440  3C70
11441  3C71
11442  3C72
11443  3C73
11444  3C74
11445  3C75
11446  3C76
11447  3C77
11448  3C78
11449  3C79
11450  3C7A
11451  3C7B
11452  3C7C
11453  3C7D
11454  3C7E
11455  3C7F
11456  3C80
11457  3C81
11458  3C82
11459  3C83
11460  3C84
11461  3C85
11462  3C86
11463  3C87
11464  3C88
11465  3C89
11466  3C8A
11467  3C8B
11468  3C8C
11469  3C8D
11470  3C8E
11471  3C8F
11472  3C90
11473  3C91
11474  3C92
11475  3C93
11476  3C94
11477  3C95
11478  3C96
11479  3C97
11480  3C98
11481  3C99
11482  3C9A
11483  3C9B
11484  3C9C
11485  3C9D
11486  3C9E
11487  3C9F
11488  3CA0
11489  3CA1
11490  3CA2
11491  3CA3
11492  3CA4
11493  3CA5
11494  3CA6
11495  3CA7
11496  3CA8
11497  3CA9
11498  3CAA
11499  3CAB
11500  3CAC
11501  3CAD
11502  3CAE
11503  3CAF
11504  3CB0
11505  3CB1
11506  3CB2
11507  3CB3
11508  3CB4
11509  3CB5
11510  3CB6
11511  3CB7
11512  3CB8
11513  3CB9
11514  3CBA
11515  3CBB
11516  3CBC
11517  3CBD
11518  3CBE
11519  3CBF
11520  3CC0
11521  3CC1
11522  3CC2
11523  3CC3
11524  3CC4
11525  3CC5
11526  3CC6
11527  3CC7
11528  3CC8
11529  3CC9
11530  3CCA
11531  3CCB
11532  3CCC
11533  3CCD
11534  3CCE
11535  3CCF
11536  3CD0
11537  3CD1
11538  3CD2
11539  3CD3
11540  3CD4
11541  3CD5
11542  3CD6
11543  3CD7
11544  3CD8
11545  3CD9
11546  3CDA
11547  3CDB
11548  3CDC
11549  3CDD
11550  3CDE
11551  3CDF
11552  3CE0
11553  3CE1
11554  3CE2
11555  3CE3
11556  3CE4
11557  3CE5
11558  3CE6
11559  3CE7
11560  3CE8
11561  3CE9
11562  3CEA
11563  3CEB
11564  3CEC
11565  3CED
11566  3CEE
11567  3CEF
11568  3CF0
11569  3CF1
11570  3CF2
11571  3CF3
11572  3CF4
11573  3CF5
11574  3CF6
11575  3CF7
11576  3CF8
11577  3CF9
11578  3CFA
11579  3CFB
11580  3CFC
11581  3CFD
11582  3CFE
11583  3CFF
11584  3D00
11585  3D01
11586  3D02
11587  3D03
11588  3D04
11589  3D05
11590  3D06
11591  3D07
11592  3D08
11593  3D09
11594  3D0A
11595  3D0B
11596  3D0C
11597  3D0D
11598  3D0E
11599  3D0F
11600  3D10
11601  3D11
11602  3D12
11603  3D13
11604  3D14
11605  3D15
11606  3D16
11607  3D17
11608  3D18
11609  3D19
11610  3D1A
11611  3D1B
11612  3D1C
11613  3D1D
11614  3D1E
11615  3D1F
11616  3D20
11617  3D21
11618  3D22
11619  3D23
11620  3D24
11621  3D25
11622  3D26
11623  3D27
11624  3D28
11625  3D29
11626  3D2A
11627  3D2B
11628  3D2C
11629  3D2D
11630  3D2E
11631  3D2F
11632  3D30
11633  3D31
11634  3D32
11635  3D33
11636  3D34
11637  3D35
11638  3D36
11639  3D37
11640  3D38
11641  3D39
11642  3D3A
11643  3D3B
11644  3D3C
11645  3D3D
11646  3D3E
11647  3D3F
11648  3D40
11649  3D41
11650  3D42
11651  3D43
11652  3D44
11653  3D45
11654  3D46
11655  3D47
11656  3D48
11657  3D49
11658  3D4A
11659  3D4B
11660  3D4C
11661  3D4D
11662  3D4E
11663  3D4F
11664  3D50
11665  3D51
11666  3D52
11667  3D53
11668  3D54
11669  3D55
11670  3D56
11671  3D57
11672  3D58
11673  3D59
11674  3D5A
11675  3D5B
11676  3D5C
11677  3D5D
11678  3D5E
11679  3D5F
11680  3D60
11681  3D61
11682  3D62
11683  3D63
11684  3D64
11685  3D65
11686  3D66
11687  3D67
11688  3D68
11689  3D69
11690  3D6A
11691  3D6B
11692  3D6C
11693  3D6D
11694  3D6E
11695  3D6F
11696  3D70
11697  3D71
11698  3D72
11699  3D73
11700  3D74
11701  3D75
11702  3D76
11703  3D77
11704  3D78
11705  3D79
11706  3D7A
11707  3D7B
11708  3D7C
11709  3D7D
11710  3D7E
11711  3D7F
11712  3D80
11713  3D81
11714  3D82
11715  3D83
11716  3D84
11717  3D85
11718  3D86
11719  3D87
11720  3D88
11721  3D89
11722  3D8A
11723  3D8B
11724  3D8C
11725  3D8D
11726  3D8E
11727  3D8F
11728  3D90
11729  3D91
11730  3D92
11731  3D93
11732  3D94
11733  3D95
11734  3D96
11735  3D97
11736  3D98
11737  3D99
11738  3D9A
11739  3D9B
11740  3D9C
11741  3D9D
11742  3D9E
11743  3D9F
11744  3DA0
11745  3DA1
11746  3DA2
11747  3DA3
11748  3DA4
11749  3DA5
11750  3DA6
11751  3DA7
11752  3DA8
11753  3DA9
11754  3DAA
11755  3DAB
11756  3DAC
11757  3DAD
11758  3DAE
11759  3DAF
11760  3DB0
11761  3DB1
11762  3DB2
11763  3DB3
11764  3DB4
11765  3DB5
11766  3DB6
11767  3DB7
11768  3DB8
11769  3DB9
11770  3DBA
11771  3DBB
11772  3DBC
11773  3DBD
11774  3DBE
11775  3DBF
11776  3DC0
11777  3DC1
11778  3DC2
11779  3DC3
11780  3DC4
11781  3DC5
11782  3DC6
11783  3DC7
11784  3DC8
11785  3DC9
11786  3DCA
11787  3DCB
11788  3DCC
11789  3DCD
11790  3DCE
11791  3DCF
11792  3DD0
11793  3DD1
11794  3DD2
11795  3DD3
11796  3DD4
11797  3DD5
11798  3DD6
11799  3DD7
11800  3DD8
11801  3DD9
11802  3DDA
11803  3DDB
11804  3DDC
11805  3DDD
11806  3DDE
11807  3DDF
11808  3DE0
11809  3DE1
11810  3DE2
11811  3DE3
11812  3DE4
11813  3DE5
11814  3DE6
11815  3DE7
11816  3DE8
11817  3DE9
11818  3DEA
11819  3DEB
11820  3DEC
11821  3DED
11822  3DEE
11823  3DEF
11824  3DF0
11825  3DF1
11826  3DF2
11827  3DF3
11828  3DF4
11829  3DF5
11830  3DF6
11831  3DF7
11832  3DF8
11833  3DF9
11834  3DFA
11835  3DFB
11836  3DFC
11837  3DFD
11838  3DFE
11839  3DFF
11840  3E00
11841  3E01
11842  3E02
11843  3E03
11844  3E04
11845  3E05
11846  3E06
11847  3E07
11848  3E08
11849  3E09
11850  3E0A
11851  3E0B
11852  3E0C
11853  3E0D
11854  3E0E
11855  3E0F
11856  3E10
11857  3E11
11858  3E12
11859  3E13
11860  3E14
11861  3E15
11862  3E16
11863  3E17
11864  3E18
11865  3E19
11866  3E1A
11867  3E1B
11868  3E1C
11869  3E1D
11870  3E1E
11871  3E1F
11872  3E20
11873  3E21
11874  3E22
11875  3E23
11876  3E24
11877  3E25
11878  3E26
11879  3E27
11880  3E28
11881  3E29
11882  3E2A
11883  3E2B
11884  3E2C
11885  3E2D
11886  3E2E
11887  3E2F
11888  3E30
11889  3E31
11890  3E32
11891  3E33
11892  3E34
11893  3E35
11894  3E36
11895  3E37
11896  3E38
11897  3E39
11898  3E3A
11899  3E3B
11900  3E3C
11901  3E3D
11902  3E3E
11903  3E3F
11904  3E40
11905  3E41
11906  3E42
11907  3E43
11908  3E44
11909  3E45
11910  3E46
11911  3E47
11912  3E48
11913  3E49
11914  3E4A
11915  3E4B
11916  3E4C
11917  3E4D
11918  3E4E
11919  3E4F
11920  3E50
11921  3E51
11922  3E52
11923  3E53
11924  3E54
11925  3E55
11926  3E56
11927  3E57
11928  3E58
11929  3E59
11930  3E5A
11931  3E5B
11932  3E5C
11933  3E5D
11934  3E5E
11935  3E5F
11936  3E60
11937  3E61
11938  3E62
11939  3E63
11940  3E64
11941  3E65
11942  3E66
11943  3E67
11944  3E68
11945  3E69
11946  3E6A
11947  3E6B
11948  3E6C
11949  3E6D
11950  3E6E
11951  3E6F
11952  3E70
11953  3E71
11954  3E72
11955  3E73
11956  3E74
11957  3E75
11958  3E76
11959  3E77
11960  3E78
11961  3E79
11962  3E7A
11963  3E7B
11964  3E7C
11965  3E7D
11966  3E7E
11967  3E7F
11968  3E80
11969  3E81
11970  3E82
11971  3E83
11972  3E84
11973  3E85
11974  3E86
11975  3E87
11976  3E88
11977  3E89
11978  3E8A
11979  3E8B
11980  3E8C
11981  3E8D
11982  3E8E
11983  3E8F
11984  3E90
11985  3E91
11986  3E92
11987  3E93
11988  3E94
11989  3E95
11990  3E96
11991  3E97
11992  3E98
11993  3E99
11994  3E9A
11995  3E9B
11996  3E9C
11997  3E9D
11998  3E9E
11999  3E9F
12000  3EA0
12001  3EA1
12002  3EA2
12003  3EA3
12004  3EA4
12005  3EA5
12006  3EA6
12007  3EA7
12008  3EA8
12009  3EA9
12010  3EAA
12011  3EAB
12012  3EAC
12013  3EAD
12014  3EAE
12015  3EAF
12016  3EB0
12017  3EB1
12018  3EB2
12019  3EB3
12020  3EB4
12021  3EB5
12022  3EB6
12023  3EB7
12024  3EB8
12025  3EB9
12026  3EBA
12027  3EBB
12028  3EBC
12029  3EBD
12030  3EBE
12031  3EBF
12032  3EC0
12033  3EC1
12034  3EC2
12035  3EC3
12036  3EC4
12037  3EC5
12038  3EC6
12039  3EC7
12040  3EC8
12041  3EC9
12042  3ECA
12043  3ECB
12044  3ECC
12045  3ECD
12046  3ECE
12047  3ECF
12048  3ED0
12049  3ED1
12050  3ED2
12051  3ED3
12052  3ED4
12053  3ED5
12054  3ED6
12055  3ED7
12056  3ED8
12057  3ED9
12058  3EDA
12059  3EDB
12060  3EDC
12061  3EDD
12062  3EDE
12063  3EDF
12064  3EE0
12065  3EE1
12066  3EE2
12067  3EE3
12068  3EE4
12069  3EE5
12070  3EE6
12071  3EE7
12072  3EE8
12073  3EE9
12074  3EEA
12075  3EEB
12076  3EEC
12077  3EED
12078  3EEE
12079  3EEF
12080  3EF0
12081  3EF1
12082  3EF2
12083  3EF3
12084  3EF4
12085  3EF5
12086  3EF6
12087  3EF7
12088  3EF8
12089  3EF9
12090  3EFA
12091  3EFB
12092  3EFC
12093  3EFD
12094  3EFE
12095  3EFF
12096  3F00
12097  3F01
12098  3F02
12099  3F03
12100  3F04
12101  3F05
12102  3F06
12103  3F07
12104  3F08
12105  3F09
12106  3F0A
12107  3F0B
12108  3F0C
12109  3F0D
12110  3F0E
12111  3F0F
12112  3F10
12113  3F11
12114  3F12
12115  3F13
12116  3F14
12117  3F15
12118  3F16
12119  3F17
12120  3F18
12121  3F19
12122  3F1A
12123  3F1B
12124  3F1C
12125  3F1D
12126  3F1E
12127  3F1F
12128  3F20
12129  3F21
12130  3F22
12131  3F23
12132  3F24
12133  3F25
12134  3F26
12135  3F27
12136  3F28
12137  3F29
12138  3F2A
12139  3F2B
12140  3F2C
12141  3F2D
12142  3F2E
12143  3F2F
12144  3F30
12145  3F31
12146  3F32
12147  3F33
12148  3F34
12149  3F35
12150  3F36
12151  3F37
12152  3F38
12153  3F39
12154  3F3A
12155  3F3B
12156  3F3C
12157  3F3D
12158  3F3E
12159  3F3F
12160  3F40
12161  3F41
12162  3F42
12163  3F43
12164  3F44
12165  3F45
12166  3F46
12167  3F47
12168  3F48
12169  3F49
12170  3F4A
12171  3F4B
12172  3F4C
12173  3F4D
12174  3F4E
12175  3F4F
12176  3F50
12177  3F51
12178  3F52
12179  3F53
12180  3F54
12181  3F55
12182  3F56
12183  3F57
12184  3F58
12185  3F59
12186  3F5A
12187  3F5B
12188  3F5C
12189  3F5D
12190  3F5E
12191  3F5F
12192  3F60
12193  3F61
12194  3F62
12195  3F63
12196  3F64
12197  3F65
12198  3F66
12199  3F67
12200  3F68
12201  3F69
12202  3F6A
12203  3F6B
12204  3F6C
12205  3F6D
12206  3F6E
12207  3F6F
12208  3F70
12209  3F71
12210  3F72
12211  3F73
12212  3F74
12213  3F75
12214  3F76
12215  3F77
12216  3F78
12217  3F79
12218  3F7A
12219  3F7B
12220  3F7C
12221  3F7D
12222  3F7E
12223  3F7F
12224  3F80
12225  3F81
12226  3F82
12227  3F83
12228  3F84
12229  3F85
12230  3F86
12231  3F87
12232  3F88
12233  3F89
12234  3F8A
12235  3F8B
12236  3F8C
12237  3F8D
12238  3F8E
12239  3F8F
12240  3F90
12241  3F91
12242  3F92
12243  3F93
12244  3F94
12245  3F95
12246  3F96
12247  3F97
12248  3F98
12249  3F99
12250  3F9A
12251  3F9B
12252  3F9C
12253  3F9D
12254  3F9E
12255  3F9F
12256  3FA0
12257  3FA1
12258  3FA2
12259  3FA3
12260  3FA4
12261  3FA5
12262  3FA6
12263  3FA7
12264  3FA8
12265  3FA9
12266  3FAA
12267  3FAB
12268  3FAC
12269  3FAD
12270  3FAE
12271  3FAF
12272  3FB0
12273  3FB1
12274  3FB2
12275  3FB3
12276  3FB4
12277  3FB5
12278  3FB6
12279  3FB7
12280  3FB8
12281  3FB9
12282  3FBA
12283  3FBB
12284  3FBC
12285  3FBD
12286  3FBE
12287  3FBF
12288  3FC0
12289  3FC1
12290  3FC2
12291  3FC3
12292  3FC4
12293  3FC5
12294  3FC6
12295  3FC7
12296  3FC8
12297  3FC9
12298  3FCA
12299  3FCB
12300  3FCC
12301  3FCD
12302  3FCE
12303  3FCF
12304  3FD0
12305  3FD1
12306  3FD2
12307  3FD3
12308  3FD4
12309  3FD5
12310  3FD6
12311  3FD7
12312  3FD8
12313  3FD9
12314  3FDA
12315  3FDB
12316  3FDC
12317  3FDD
12318  3FDE
12319  3FDF
12320  3FE0
12321  3FE1
12322  3FE2
12323  3FE3
12324  3FE4
12325  3FE5
12326  3FE6
12327  3FE7
12328  3FE8
12329  3FE9
12330  3FEA
12331  3FEB
12332  3FEC
12333  3FED
12334  3FEE
12335  3FEF
12336  3FF0
12337  3FF1
12338  3FF2
12339  3FF3
12340  3FF4
12341  3FF5
12342  3FF6
12343  3FF7
12344  3FF8
12345  3FF9
12346  3FFA
12347  3FFB
12348  3FFC
12349  3FFD
12350  3FFE
12351  3FFF
12352  4000
12353  4001
12354  4002
12355  4003
12356  4004
12357  4005
12358  4006
12359  4007
12360  4008
12361  4009
12362  400A
12363  400B
12364  400C
12365  400D
12366  400E
12367  400F
12368  4010
12369  4011
12370  4012
12371  4013
12372  4014
12373  4015
12374  4016
12375  4017
12376  4018
12377  4019
12378  401A
12379  401B
12380  401C
12381  401D
12382  401E
12383  401F
12384  4020
12385  4021
12386  4022
12387  4023
12388  4024
12389  4025
12390  4026
12391  4027
12392  4028
12393  4029
12394  402A
12395  402B
12396  402C
12397  402D
12398  402E
12399  402F
12400  4030
12401  4031
12402  4032
12403  4033
12404  4034
12405  4035
12406  4036
12407  4037
12408  4038
12409  4039
12410  403A
12411  403B
12412  403C
12413  403D
12414  403E
12415  403F
12416  4040
12417  4041
12418  4042
12419  4043
12420  4044
12421  4045
12422  4046
12423  4047
12424  4048
12425  4049
12426  404A
12427  404B
12428  404C
12429  404D
12430  404E
12431  404F
12432  4050
12433  4051
12434  4052
12435  4053
12436  4054
12437  4055
12438  4056
12439  4057
12440  4058
12441  4059
12442  405A
12443  405B
12444  405C
12445  405D
12446  405E
12447  405F
12448  4060
12449  4061
12450  4062
12451  4063
12452  4064
12453  4065
12454  4066
12455  4067
12456  4068
12457  4069
12458  406A
12459  406B
12460  406C
12461  406D
12462  406E
12463  406F
12464  4070
12465  4071
12466  4072
12467  4073
12468  4074
12469  4075
12470  4076
12471  4077
12472  4078
12473  4079
12474  407A
12475  407B
12476  407C
12477  407D
12478  407E
12479  407F
12480  4080
12481  4081
12482  4082
12483  4083
12484  4084
12485  4085
12486  4086
12487  4087
12488  4088
12489  4089
12490  408A
12491  408B
12492  408C
12493  408D
12494  408E
12495  408F
12496  4090
12497  4091
12498  4092
12499  4093
12500  4094
12501  4095
12502  4096
12503  4097
12504  4098
12505  4099
12506  409A
12507  409B
12508  409C
12509  409D
12510  409E
12511  409F
12512  40A0
12513  40A1
12514  40A2
12515  40A3
12516  40A4
12517  40A5
12518  40A6
12519  40A7
12520  40A8
12521  40A9
12522  40AA
12523  40AB
12524  40AC
12525  40AD
12526  40AE
12527  40AF
12528  40B0
12529  40B1
12530  40B2
12531  40B3
12532  40B4
12533  40B5
12534  40B6
12535  40B7
12536  40B8
12537  40B9
12538  40BA
12539  40BB
12540  40BC
12541  40BD
12542  40BE
12543  40BF
12544  40C0
12545  40C1
12546  40C2
12547  40C3
12548  40C4
12549  40C5
12550  40C6
12551  40C7
12552  40C8
12553  40C9
12554  40CA
12555  40CB
12556  40CC
12557  40CD
12558  40CE
12559  40CF
12560  40D0
12561  40D1
12562  40D2
12563  40D3
12564  40D4
12565  40D5
12566  40D6
12567  40D7
12568  40D8
12569  40D9
12570  40DA
12571  40DB
12572  40DC
12573  40DD
12574  40DE
12575  40DF
12576  40E0
12577  40E1
12578  40E2
12579  40E3
12580  40E4
12581  40E5
12582  40E6
12583  40E7
12584  40E8
12585  40E9
12586  40EA
12587  40EB
12588  40EC
12589  40ED
12590  40EE
12591  40EF
12592  40F0
12593  40F1
12594  40F2
12595  40F3
12596  40F4
12597  40F5
12598  40F6
12599  40F7
12600  40F8
12601  40F9
12602  40FA
12603  40FB
12604  40FC
12605  40FD
12606  40FE
12607  40FF
12608  4100
12609  4101
12610  4102
12611  4103
12612  4104
12613  4105
12614  4106
12615  4107
12616  4108
12617  4109
12618  410A
12619  410B
12620  410C
12621  410D
12622  410E
12623  410F
12624  4110
12625  4111
12626  4112
12627  4113
12628  4114
12629  4115
12630  4116
12631  4117
12632  4118
12633  4119
12634  411A
12635  411B
12636  411C
12637  411D
12638  411E
12639  411F
12640  4120
12641  4121
12642  4122
12643  4123
12644  4124
12645  4125
12646  4126
12647  4127
12648  4128
12649  4129
12650  412A
12651  412B
12652  412C
12653  412D
12654  412E
12655  412F
12656  4130
12657  4131
12658  4132
12659  4133
12660  4134
12661  4135
12662  4136
12663  4137
12664  4138
12665  4139
12666  413A
12667  413B
12668  413C
12669  413D
12670  413E
12671  413F
12672  4140
12673  4141
12674  4142
12675  4143
12676  4144
12677  4145
12678  4146
12679  4147
12680  4148
12681  4149
12682  414A
12683  414B
12684  414C
12685  414D
12686  414E
12687  414F
12688  4150
12689  4151
12690  4152
12691  4153
12692  4154
12693  4155
12694  4156
12695  4157
12696  4158
12697  4159
12698  415A
12699  415B
12700  415C
12701  415D
12702  415E
12703  415F
12704  4160
12705  4161
12706  4162
12707  4163
12708  4164
12709  4165
12710  4166
12711  4167
12712  4168
12713  4169
12714  416A
12715  416B
12716  416C
12717  416D
12718  416E
12719  416F
12720  4170
12721  4171
12722  4172
12723  4173
12724  4174
12725  4175
12726  4176
12727  4177
12728  4178
12729  4179
12730  417A
12731  417B
12732  417C
12733  417D
12734  417E
12735  417F
12736  4180
12737  4181
12738  4182
12739  4183
12740  4184
12741  4185
12742  4186
12743  4187
12744  4188
12745  4189
12746  418A
12747  418B
12748  418C
12749  418D
12750  418E
12751  418F
12752  4190
12753  4191
12754  4192
12755  4193
12756  4194
12757  4195
12758  4196
12759  4197
12760  4198
12761  4199
12762  419A
12763  419B
12764  419C
12765  419D
12766  419E
12767  419F
12768  41A0
12769  41A1
12770  41A2
12771  41A3
12772  41A4
12773  41A5
12774  41A6
12775  41A7
12776  41A8
12777  41A9
12778  41AA
12779  41AB
12780  41AC
12781  41AD
12782  41AE
12783  41AF
12784  41B0
12785  41B1
12786  41B2
12787  41B3
12788  41B4
12789  41B5
12790  41B6
12791  41B7
12792  41B8
12793  41B9
12794  41BA
12795  41BB
12796  41BC
12797  41BD
12798  41BE
12799  41BF
12800  41C0
12801  41C1
12802  41C2
12803  41C3
12804  41C4
12805  41C5
12806  41C6
12807  41C7
12808  41C8
12809  41C9
12810  41CA
12811  41CB
12812  41CC
12813  41CD
12814  41CE
12815  41CF
12816  41D0
12817  41D1
12818  41D2
12819  41D3
12820  41D4
12821  41D5
12822  41D6
12823  41D7
12824  41D8
12825  41D9
12826  41DA
12827  41DB
12828  41DC
12829  41DD
12830  41DE
12831  41DF
12832  41E0
12833  41E1
12834  41E2
12835  41E3
12836  41E4
12837  41E5
12838  41E6
12839  41E7
12840  41E8
12841  41E9
12842  41EA
12843  41EB
12844  41EC
12845  41ED
12846  41EE
12847  41EF
12848  41F0
12849  41F1
12850  41F2
12851  41F3
12852  41F4
12853  41F5
12854  41F6
12855  41F7
12856  41F8
12857  41F9
12858  41FA
12859  41FB
12860  41FC
12861  41FD
12862  41FE
12863  41FF
12864  4200
12865  4201
12866  4202
12867  4203
12868  4204
12869  4205
12870  4206
12871  4207
12872  4208
12873  4209
12874  420A
12875  420B
12876  420C
12877  420D
12878  420E
12879  420F
12880  4210
12881  4211
12882  4212
12883  4213
12884  4214
12885  4215
12886  4216
12887  4217
12888  4218
12889  4219
12890  421A
12891  421B
12892  421C
12893  421D
12894  421E
12895  421F
12896  4220
12897  4221
12898  4222
12899  4223
12900  4224
12901  4225
12902  4226
12903  4227
12904  4228
12905  4229
12906  422A
12907  422B
12908  422C
12909  422D
12910  422E
12911  422F
12912  4230
12913  4231
12914  4232
12915  4233
12916  4234
12917  4235
12918  4236
12919  4237
12920  4238
12921  4239
12922  423A
12923  423B
12924  423C
12925  423D
12926  423E
12927  423F
12928  4240
12929  4241
12930  4242
12931  4243
12932  4244
12933  4245
12934  4246
12935  4247
12936  4248
12937  4249
12938  424A
12939  424B
12940  424C
12941  424D
12942  424E
12943  424F
12944  4250
12945  4251
12946  4252
12947  4253
12948  4254
12949  4255
12950  4256
12951  4257
12952  4258
12953  4259
12954  425A
12955  425B
12956  425C
12957  425D
12958  425E
12959  425F
12960  4260
12961  4261
12962  4262
12963  4263
12964  4264
12965  4265
12966  4266
12967  4267
12968  4268
12969  4269
12970  426A
12971  426B
12972  426C
12973  426D
12974  426E
12975  426F
12976  4270
12977  4271
12978  4272
12979  4273
12980  4274
12981  4275
12982  4276
12983  4277
12984  4278
12985  4279
12986  427A
12987  427B
12988  427C
12989  427D
12990  427E
12991  427F
12992  4280
12993  4281
12994  4282
12995  4283
12996  4284
12997  4285
12998  4286
12999  4287
13000  4288
13001  4289
13002  428A
13003  428B
13004  428C
13005  428D
13006  428E
13007  428F
13008  4290
13009  4291
13010  4292
13011  4293
13012  4294
13013  4295
13014  4296
13015  4297
13016  4298
13017  4299
13018  429A
13019  429B
13020  429C
13021  429D
13022  429E
13023  429F
13024  42A0
13025  42A1
13026  42A2
13027  42A3
13028  42A4
13029  42A5
13030  42A6
13031  42A7
13032  42A8
13033  42A9
13034  42AA
13035  42AB
13036  42AC
13037  42AD
13038  42AE
13039  42AF
13040  42B0
13041  42B1
13042  42B2
13043  42B3
13044  42B4
13045  42B5
13046  42B6
13047  42B7
13048  42B8
13049  42B9
13050  42BA
13051  42BB
13052  42BC
13053  42BD
13054  42BE
13055  42BF
13056  42C0
13057  42C1
13058  42C2
13059  42C3
13060  42C4
13061  42C5
13062  42C6
13063  42C7
13064  42C8
13065  42C9
13066  42CA
13067  42CB
13068  42CC
13069  42CD
13070  42CE
13071  42CF
13072  42D0
13073  42D1
13074  42D2
13075  42D3
13076  42D4
13077  42D5
13078  42D6
13079  42D7
13080  42D8
13081  42D9
13082  42DA
13083  42DB
13084  42DC
13085  42DD
13086  42DE
13087  42DF
13088  42E0
13089  42E1
13090  42E2
13091  42E3
13092  42E4
13093  42E5
13094  42E6
13095  42E7
13096  42E8
13097  42E9
13098  42EA
13099  42EB
13100  42EC
13101  42ED
13102  42EE
13103  42EF
13104  42F0
13105  42F1
13106  42F2
13107  42F3
13108  42F4
13109  42F5
13110  42F6
13111  42F7
13112  42F8
13113  42F9
13114  42FA
13115  42FB
13116  42FC
13117  42FD
13118  42FE
13119  42FF
13120  4300
13121  4301
13122  4302
13123  4303
13124  4304
13125  4305
13126  4306
13127  4307
13128  4308
13129  4309
13130  430A
13131  430B
13132  430C
13133  430D
13134  430E
13135  430F
13136  4310
13137  4311
13138  4312
13139  4313
13140  4314
13141  4315
13142  4316
13143  4317
13144  4318
13145  4319
13146  431A
13147  431B
13148  431C
13149  431D
13150  431E
13151  431F
13152  4320
13153  4321
13154  4322
13155  4323
13156  4324
13157  4325
13158  4326
13159  4327
13160  4328
13161  4329
13162  432A
13163  432B
13164  432C
13165  432D
13166  432E
13167  432F
13168  4330
13169  4331
13170  4332
13171  4333
13172  4334
13173  4335
13174  4336
13175  4337
13176  4338
13177  4339
13178  433A
13179  433B
13180  433C
13181  433D
13182  433E
13183  433F
13184  4340
13185  4341
13186  4342
13187  4343
13188  4344
13189  4345
13190  4346
13191  4347
13192  4348
13193  4349
13194  434A
13195  434B
13196  434C
13197  434D
13198  434E
13199  434F
13200  4350
13201  4351
13202  4352
13203  4353
13204  4354
13205  4355
13206  4356
13207  4357
13208  4358
13209  4359
13210  435A
13211  435B
13212  435C
13213  435D
13214  435E
13215  435F
13216  4360
13217  4361
13218  4362
13219  4363
13220  4364
13221  4365
13222  4366
13223  4367
13224  4368
13225  4369
13226  436A
13227  436B
13228  436C
13229  436D
13230  436E
13231  436F
13232  4370
13233  4371
13234  4372
13235  4373
13236  4374
13237  4375
13238  4376
13239  4377
13240  4378
13241  4379
13242  437A
13243  437B
13244  437C
13245  437D
13246  437E
13247  437F
13248  4380
13249  4381
13250  4382
13251  4383
13252  4384
13253  4385
13254  4386
13255  4387
13256  4388
13257  4389
13258  438A
13259  438B
13260  438C
13261  438D
13262  438E
13263  438F
13264  4390
13265  4391
13266  4392
13267  4393
13268  4394
13269  4395
13270  4396
13271  4397
13272  4398
13273  4399
13274  439A
13275  439B
13276  439C
13277  439D
13278  439E
13279  439F
13280  43A0
13281  43A1
13282  43A2
13283  43A3
13284  43A4
13285  43A5
13286  43A6
13287  43A7
13288  43A8
13289  43A9
13290  43AA
13291  43AB
13292  43AC
13293  43AD
13294  43AE
13295  43AF
13296  43B0
13297  43B1
13298  43B2
13299  43B3
13300  43B4
13301  43B5
13302  43B6
13303  43B7
13304  43B8
13305  43B9
13306  43BA
13307  43BB
13308  43BC
13309  43BD
13310  43BE
13311  43BF
13312  43C0
13313  43C1
13314  43C2
13315  43C3
13316  43C4
13317  43C5
13318  43C6
13319  43C7
13320  43C8
13321  43C9
13322  43CA
13323  43CB
13324  43CC
13325  43CD
13326  43CE
13327  43CF
13328  43D0
13329  43D1
13330  43D2
13331  43D3
13332  43D4
13333  43D5
13334  43D6
13335  43D7
13336  43D8
13337  43D9
13338  43DA
13339  43DB
13340  43DC
13341  43DD
13342  43DE
13343  43DF
13344  43E0
13345  43E1
13346  43E2
13347  43E3
13348  43E4
13349  43E5
13350  43E6
13351  43E7
13352  43E8
13353  43E9
13354  43EA
13355  43EB
13356  43EC
13357  43ED
13358  43EE
13359  43EF
13360  43F0
13361  43F1
13362  43F2
13363  43F3
13364  43F4
13365  43F5
13366  43F6
13367  43F7
13368  43F8
13369  43F9
13370  43FA
13371  43FB
13372  43FC
13373  43FD
13374  43FE
13375  43FF
13376  4400
13377  4401
13378  4402
13379  4403
13380  4404
13381  4405
13382  4406
13383  4407
13384  4408
13385  4409
13386  440A
13387  440B
13388  440C
13389  440D
13390  440E
13391  440F
13392  4410
13393  4411
13394  4412
13395  4413
13396  4414
13397  4415
13398  4416
13399  4417
13400  4418
13401  4419
13402  441A
13403  441B
13404  441C
13405  441D
13406  441E
13407  441F
13408  4420
13409  4421
13410  4422
13411  4423
13412  4424
13413  4425
13414  4426
13415  4427
13416  4428
13417  4429
13418  442A
13419  442B
13420  442C
13421  442D
13422  442E
13423  442F
13424  4430
13425  4431
13426  4432
13427  4433
13428  4434
13429  4435
13430  4436
13431  4437
13432  4438
13433  4439
13434  443A
13435  443B
13436  443C
13437  443D
13438  443E
13439  443F
13440  4440
13441  4441
13442  4442
13443  4443
13444  4444
13445  4445
13446  4446
13447  4447
13448  4448
13449  4449
13450  444A
13451  444B
13452  444C
13453  444D
13454  444E
13455  444F
13456  4450
13457  4451
13458  4452
13459  4453
13460  4454
13461  4455
13462  4456
13463  4457
13464  4458
13465  4459
13466  445A
13467  445B
13468  445C
13469  445D
13470  445E
13471  445F
13472  4460
13473  4461
13474  4462
13475  4463
13476  4464
13477  4465
13478  4466
13479  4467
13480  4468
13481  4469
13482  446A
13483  446B
13484  446C
13485  446D
13486  446E
13487  446F
13488  4470
13489  4471
13490  4472
13491  4473
13492  4474
13493  4475
13494  4476
13495  4477
13496  4478
13497  4479
13498  447A
13499  447B
13500  447C
13501  447D
13502  447E
13503  447F
13504  4480
13505  4481
13506  4482
13507  4483
13508  4484
13509  4485
13510  4486
13511  4487
13512  4488
13513  4489
13514  448A
13515  448B
13516  448C
13517  448D
13518  448E
13519  448F
13520  4490
13521  4491
13522  4492
13523  4493
13524  4494
13525  4495
13526  4496
13527  4497
13528  4498
13529  4499
13530  449A
13531  449B
13532  449C
13533  449D
13534  449E
13535  449F
13536  44A0
13537  44A1
13538  44A2
13539  44A3
13540  44A4
13541  44A5
13542  44A6
13543  44A7
13544  44A8
13545  44A9
13546  44AA
13547  44AB
13548  44AC
13549  44AD
13550  44AE
13551  44AF
13552  44B0
13553  44B1
13554  44B2
13555  44B3
13556  44B4
13557  44B5
13558  44B6
13559  44B7
13560  44B8
13561  44B9
13562  44BA
13563  44BB
13564  44BC
13565  44BD
13566  44BE
13567  44BF
13568  44C0
13569  44C1
13570  44C2
13571  44C3
13572  44C4
13573  44C5
13574  44C6
13575  44C7
13576  44C8
13577  44C9
13578  44CA
13579  44CB
13580  44CC
13581  44CD
13582  44CE
13583  44CF
13584  44D0
13585  44D1
13586  44D2
13587  44D3
13588  44D4
13589  44D5
13590  44D6
13591  44D7
13592  44D8
13593  44D9
13594  44DA
13595  44DB
13596  44DC
13597  44DD
13598  44DE
13599  44DF
13600  44E0
13601  44E1
13602  44E2
13603  44E3
13604  44E4
13605  44E5
13606  44E6
13607  44E7
13608  44E8
13609  44E9
13610  44EA
13611  44EB
13612  44EC
13613  44ED
13614  44EE
13615  44EF
13616  44F0
13617  44F1
13618  44F2
13619  44F3
13620  44F4
13621  44F5
13622  44F6
13623  44F7
13624  44F8
13625  44F9
13626  44FA
13627  44FB
13628  44FC
13629  44FD
13630  44FE
13631  44FF
13632  4500
13633  4501
13634  4502
13635  4503
13636  4504
13637  4505
13638  4506
13639  4507
13640  4508
13641  4509
13642  450A
13643  450B
13644  450C
13645  450D
13646  450E
13647  450F
13648  4510
13649  4511
13650  4512
13651  4513
13652  4514
13653  4515
13654  4516
13655  4517
13656  4518
13657  4519
13658  451A
13659  451B
13660  451C
13661  451D
13662  451E
13663  451F
13664  4520
13665  4521
13666  4522
13667  4523
13668  4524
13669  4525
13670  4526
13671  4527
13672  4528
13673  4529
13674  452A
13675  452B
13676  452C
13677  452D
13678  452E
13679  452F
13680  4530
13681  4531
13682  4532
13683  4533
13684  4534
13685  4535
13686  4536
13687  4537
13688  4538
13689  4539
13690  453A
13691  453B
13692  453C
13693  453D
13694  453E
13695  453F
13696  4540
13697  4541
13698  4542
13699  4543
13700  4544
13701  4545
13702  4546
13703  4547
13704  4548
13705  4549
13706  454A
13707  454B
13708  454C
13709  454D
13710  454E
13711  454F
13712  4550
13713  4551
13714  4552
13715  4553
13716  4554
13717  4555
13718  4556
13719  4557
13720  4558
13721  4559
13722  455A
13723  455B
13724  455C
13725  455D
13726  455E
13727  455F
13728  4560
13729  4561
13730  4562
13731  4563
13732  4564
13733  4565
13734  4566
13735  4567
13736  4568
13737  4569
13738  456A
13739  456B
13740  456C
13741  456D
13742  456E
13743  456F
13744  4570
13745  4571
13746  4572
13747  4573
13748  4574
13749  4575
13750  4576
13751  4577
13752  4578
13753  4579
13754  457A
13755  457B
13756  457C
13757  457D
13758  457E
13759  457F
13760  4580
13761  4581
13762  4582
13763  4583
13764  4584
13765  4585
13766  4586
13767  4587
13768  4588
13769  4589
13770  458A
13771  458B
13772  458C
13773  458D
13774  458E
13775  458F
13776  4590
13777  4591
13778  4592
13779  4593
13780  4594
13781  4595
13782  4596
13783  4597
13784  4598
13785  4599
13786  459A
13787  459B
13788  459C
13789  459D
13790  459E
13791  459F
13792  45A0
13793  45A1
13794  45A2
13795  45A3
13796  45A4
13797  45A5
13798  45A6
13799  45A7
13800  45A8
13801  45A9
13802  45AA
13803  45AB
13804  45AC
13805  45AD
13806  45AE
13807  45AF
13808  45B0
13809  45B1
13810  45B2
13811  45B3
13812  45B4
13813  45B5
13814  45B6
13815  45B7
13816  45B8
13817  45B9
13818  45BA
13819  45BB
13820  45BC
13821  45BD
13822  45BE
13823  45BF
13824  45C0
13825  45C1
13826  45C2
13827  45C3
13828  45C4
13829  45C5
13830  45C6
13831  45C7
13832  45C8
13833  45C9
13834  45CA
13835  45CB
13836  45CC
13837  45CD
13838  45CE
13839  45CF
13840  45D0
13841  45D1
13842  45D2
13843  45D3
13844  45D4
13845  45D5
13846  45D6
13847  45D7
13848  45D8
13849  45D9
13850  45DA
13851  45DB
13852  45DC
13853  45DD
13854  45DE
13855  45DF
13856  45E0
13857  45E1
13858  45E2
13859  45E3
13860  45E4
13861  45E5
13862  45E6
13863  45E7
13864  45E8
13865  45E9
13866  45EA
13867  45EB
13868  45EC
13869  45ED
13870  45EE
13871  45EF
13872  45F0
13873  45F1
13874  45F2
13875  45F3
13876  45F4
13877  45F5
13878  45F6
13879  45F7
13880  45F8
13881  45F9
13882  45FA
13883  45FB
13884  45FC
13885  45FD
13886  45FE
13887  45FF
13888  4600
13889  4601
13890  4602
13891  4603
13892  4604
13893  4605
13894  4606
13895  4607
13896  4608
13897  4609
13898  460A
13899  460B
13900  460C
13901  460D
13902  460E
13903  460F
13904  4610
13905  4611
13906  4612
13907  4613
13908  4614
13909  4615
13910  4616
13911  4617
13912  4618
13913  4619
13914  461A
13915  461B
13916  461C
13917  461D
13918  461E
13919  461F
13920  4620
13921  4621
13922  4622
13923  4623
13924  4624
13925  4625
13926  4626
13927  4627
13928  4628
13929  4629
13930  462A
13931  462B
13932  462C
13933  462D
13934  462E
13935  462F
13936  4630
13937  4631
13938  4632
13939  4633
13940  4634
13941  4635
13942  4636
13943  4637
13944  4638
13945  4639
13946  463A
13947  463B
13948  463C
13949  463D
13950  463E
13951  463F
13952  4640
13953  4641
13954  4642
13955  4643
13956  4644
13957  4645
13958  4646
13959  4647
13960  4648
13961  4649
13962  464A
13963  464B
13964  464C
13965  464D
13966  464E
13967  464F
13968  4650
13969  4651
13970  4652
13971  4653
13972  4654
13973  4655
13974  4656
13975  4657
13976  4658
13977  4659
13978  465A
13979  465B
13980  465C
13981  465D
13982  465E
13983  465F
13984  4660
13985  4661
13986  4662
13987  4663
13988  4664
13989  4665
13990  4666
13991  4667
13992  4668
13993  4669
13994  466A
13995  466B
13996  466C
13997  466D
13998  466E
13999  466F
14000  4670
14001  4671
14002  4672
14003  4673
14004  4674
14005  4675
14006  4676
14007  4677
14008  4678
14009  4679
14010  467A
14011  467B
14012  467C
14013  467D
14014  467E
14015  467F
14016  4680
14017  4681
14018  4682
14019  4683
14020  4684
14021  4685
14022  4686
14023  4687
14024  4688
14025  4689
14026  468A
14027  468B
14028  468C
14029  468D
14030  468E
14031  468F
14032  4690
14033  4691
14034  4692
14035  4693
14036  4694
14037  4695
14038  4696
14039  4697
14040  4698
14041  4699
14042  469A
14043  469B
14044  469C
14045  469D
14046  469E
14047  469F
14048  46A0
14049  46A1
14050  46A2
14051  46A3
14052  46A4
14053  46A5
14054  46A6
14055  46A7
14056  46A8
14057  46A9
14058  46AA
14059  46AB
14060  46AC
14061  46AD
14062  46AE
14063  46AF
14064  46B0
14065  46B1
14066  46B2
14067  46B3
14068  46B4
14069  46B5
14070  46B6
14071  46B7
14072  46B8
14073  46B9
14074  46BA
14075  46BB
14076  46BC
14077  46BD
14078  46BE
14079  46BF
14080  46C0
14081  46C1
14082  46C2
14083  46C3
14084  46C4
14085  46C5
14086  46C6
14087  46C7
14088  46C8
14089  46C9
14090  46CA
14091  46CB
14092  46CC
14093  46CD
14094  46CE
14095  46CF
14096  46D0
14097  46D1
14098  46D2
14099  46D3
14100  46D4
14101  46D5
14102  46D6
14103  46D7
14104  46D8
14105  46D9
14106  46DA
14107  46DB
14108  46DC
14109  46DD
14110  46DE
14111  46DF
14112  46E0
14113  46E1
14114  46E2
14115  46E3
14116  46E4
14117  46E5
14118  46E6
14119  46E7
14120  46E8
14121  46E9
14122  46EA
14123  46EB
14124  46EC
14125  46ED
14126  46EE
14127  46EF
14128  46F0
14129  46F1
14130  46F2
14131  46F3
14132  46F4
14133  46F5
14134  46F6
14135  46F7
14136  46F8
14137  46F9
14138  46FA
14139  46FB
14140  46FC
14141  46FD
14142  46FE
14143  46FF
14144  4700
14145  4701
14146  4702
14147  4703
14148  4704
14149  4705
14150  4706
14151  4707
14152  4708
14153  4709
14154  470A
14155  470B
14156  470C
14157  470D
14158  470E
14159  470F
14160  4710
14161  4711
14162  4712
14163  4713
14164  4714
14165  4715
14166  4716
14167  4717
14168  4718
14169  4719
14170  471A
14171  471B
14172  471C
14173  471D
14174  471E
14175  471F
14176  4720
14177  4721
14178  4722
14179  4723
14180  4724
14181  4725
14182  4726
14183  4727
14184  4728
14185  4729
14186  472A
14187  472B
14188  472C
14189  472D
14190  472E
14191  472F
14192  4730
14193  4731
14194  4732
14195  4733
14196  4734
14197  4735
14198  4736
14199  4737
14200  4738
14201  4739
14202  473A
14203  473B
14204  473C
14205  473D
14206  473E
14207  473F
14208  4740
14209  4741
14210  4742
14211  4743
14212  4744
14213  4745
14214  4746
14215  4747
14216  4748
14217  4749
14218  474A
14219  474B
14220  474C
14221  474D
14222  474E
14223  474F
14224  4750
14225  4751
14226  4752
14227  4753
14228  4754
14229  4755
14230  4756
14231  4757
14232  4758
14233  4759
14234  475A
14235  475B
14236  475C
14237  475D
14238  475E
14239  475F
14240  4760
14241  4761
14242  4762
14243  4763
14244  4764
14245  4765
14246  4766
14247  4767
14248  4768
14249  4769
14250  476A
14251  476B
14252  476C
14253  476D
14254  476E
14255  476F
14256  4770
14257  4771
14258  4772
14259  4773
14260  4774
14261  4775
14262  4776
14263  4777
14264  4778
14265  4779
14266  477A
14267  477B
14268  477C
14269  477D
14270  477E
14271  477F
14272  4780
14273  4781
14274  4782
14275  4783
14276  4784
14277  4785
14278  4786
14279  4787
14280  4788
14281  4789
14282  478A
14283  478B
14284  478C
14285  478D
14286  478E
14287  478F
14288  4790
14289  4791
14290  4792
14291  4793
14292  4794
14293  4795
14294  4796
14295  4797
14296  4798
14297  4799
14298  479A
14299  479B
14300  479C
14301  479D
14302  479E
14303  479F
14304  47A0
14305  47A1
14306  47A2
14307  47A3
14308  47A4
14309  47A5
14310  47A6
14311  47A7
14312  47A8
14313  47A9
14314  47AA
14315  47AB
14316  47AC
14317  47AD
14318  47AE
14319  47AF
14320  47B0
14321  47B1
14322  47B2
14323  47B3
14324  47B4
14325  47B5
14326  47B6
14327  47B7
14328  47B8
14329  47B9
14330  47BA
14331  47BB
14332  47BC
14333  47BD
14334  47BE
14335  47BF
14336  47C0
14337  47C1
14338  47C2
14339  47C3
14340  47C4
14341  47C5
14342  47C6
14343  47C7
14344  47C8
14345  47C9
14346  47CA
14347  47CB
14348  47CC
14349  47CD
14350  47CE
14351  47CF
14352  47D0
14353  47D1
14354  47D2
14355  47D3
14356  47D4
14357  47D5
14358  47D6
14359  47D7
14360  47D8
14361  47D9
14362  47DA
14363  47DB
14364  47DC
14365  47DD
14366  47DE
14367  47DF
14368  47E0
14369  47E1
14370  47E2
14371  47E3
14372  47E4
14373  47E5
14374  47E6
14375  47E7
14376  47E8
14377  47E9
14378  47EA
14379  47EB
14380  47EC
14381  47ED
14382  47EE
14383  47EF
14384  47F0
14385  47F1
14386  47F2
14387  47F3
14388  47F4
14389  47F5
14390  47F6
14391  47F7
14392  47F8
14393  47F9
14394  47FA
14395  47FB
14396  47FC
14397  47FD
14398  47FE
14399  47FF
14400  4800
14401  4801
14402  4802
14403  4803
14404  4804
14405  4805
14406  4806
14407  4807
14408  4808
14409  4809
14410  480A
14411  480B
14412  480C
14413  480D
14414  480E
14415  480F
14416  4810
14417  4811
14418  4812
14419  4813
14420  4814
14421  4815
14422  4816
14423  4817
14424  4818
14425  4819
14426  481A
14427  481B
14428  481C
14429  481D
14430  481E
14431  481F
14432  4820
14433  4821
14434  4822
14435  4823
14436  4824
14437  4825
14438  4826
14439  4827
14440  4828
14441  4829
14442  482A
14443  482B
14444  482C
14445  482D
14446  482E
14447  482F
14448  4830
14449  4831
14450  4832
14451  4833
14452  4834
14453  4835
14454  4836
14455  4837
14456  4838
14457  4839
14458  483A
14459  483B
14460  483C
14461  483D
14462  483E
14463  483F
14464  4840
14465  4841
14466  4842
14467  4843
14468  4844
14469  4845
14470  4846
14471  4847
14472  4848
14473  4849
14474  484A
14475  484B
14476  484C
14477  484D
14478  484E
14479  484F
14480  4850
14481  4851
14482  4852
14483  4853
14484  4854
14485  4855
14486  4856
14487  4857
14488  4858
14489  4859
14490  485A
14491  485B
14492  485C
14493  485D
14494  485E
14495  485F
14496  4860
14497  4861
14498  4862
14499  4863
14500  4864
14501  4865
14502  4866
14503  4867
14504  4868
14505  4869
14506  486A
14507  486B
14508  486C
14509  486D
14510  486E
14511  486F
14512  4870
14513  4871
14514  4872
14515  4873
14516  4874
14517  4875
14518  4876
14519  4877
14520  4878
14521  4879
14522  487A
14523  487B
14524  487C
14525  487D
14526  487E
14527  487F
14528  4880
14529  4881
14530  4882
14531  4883
14532  4884
14533  4885
14534  4886
14535  4887
14536  4888
14537  4889
14538  488A
14539  488B
14540  488C
14541  488D
14542  488E
14543  488F
14544  4890
14545  4891
14546  4892
14547  4893
14548  4894
14549  4895
14550  4896
14551  4897
14552  4898
14553  4899
14554  489A
14555  489B
14556  489C
14557  489D
14558  489E
14559  489F
14560  48A0
14561  48A1
14562  48A2
14563  48A3
14564  48A4
14565  48A5
14566  48A6
14567  48A7
14568  48A8
14569  48A9
14570  48AA
14571  48AB
14572  48AC
14573  48AD
14574  48AE
14575  48AF
14576  48B0
14577  48B1
14578  48B2
14579  48B3
14580  48B4
14581  48B5
14582  48B6
14583  48B7
14584  48B8
14585  48B9
14586  48BA
14587  48BB
14588  48BC
14589  48BD
14590  48BE
14591  48BF
14592  48C0
14593  48C1
14594  48C2
14595  48C3
14596  48C4
14597  48C5
14598  48C6
14599  48C7
14600  48C8
14601  48C9
14602  48CA
14603  48CB
14604  48CC
14605  48CD
14606  48CE
14607  48CF
14608  48D0
14609  48D1
14610  48D2
14611  48D3
14612  48D4
14613  48D5
14614  48D6
14615  48D7
14616  48D8
14617  48D9
14618  48DA
14619  48DB
14620  48DC
14621  48DD
14622  48DE
14623  48DF
14624  48E0
14625  48E1
14626  48E2
14627  48E3
14628  48E4
14629  48E5
14630  48E6
14631  48E7
14632  48E8
14633  48E9
14634  48EA
14635  48EB
14636  48EC
14637  48ED
14638  48EE
14639  48EF
14640  48F0
14641  48F1
14642  48F2
14643  48F3
14644  48F4
14645  48F5
14646  48F6
14647  48F7
14648  48F8
14649  48F9
14650  48FA
14651  48FB
14652  48FC
14653  48FD
14654  48FE
14655  48FF
14656  4900
14657  4901
14658  4902
14659  4903
14660  4904
14661  4905
14662  4906
14663  4907
14664  4908
14665  4909
14666  490A
14667  490B
14668  490C
14669  490D
14670  490E
14671  490F
14672  4910
14673  4911
14674  4912
14675  4913
14676  4914
14677  4915
14678  4916
14679  4917
14680  4918
14681  4919
14682  491A
14683  491B
14684  491C
14685  491D
14686  491E
14687  491F
14688  4920
14689  4921
14690  4922
14691  4923
14692  4924
14693  4925
14694  4926
14695  4927
14696  4928
14697  4929
14698  492A
14699  492B
14700  492C
14701  492D
14702  492E
14703  492F
14704  4930
14705  4931
14706  4932
14707  4933
14708  4934
14709  4935
14710  4936
14711  4937
14712  4938
14713  4939
14714  493A
14715  493B
14716  493C
14717  493D
14718  493E
14719  493F
14720  4940
14721  4941
14722  4942
14723  4943
14724  4944
14725  4945
14726  4946
14727  4947
14728  4948
14729  4949
14730  494A
14731  494B
14732  494C
14733  494D
14734  494E
14735  494F
14736  4950
14737  4951
14738  4952
14739  4953
14740  4954
14741  4955
14742  4956
14743  4957
14744  4958
14745  4959
14746  495A
14747  495B
14748  495C
14749  495D
14750  495E
14751  495F
14752  4960
14753  4961
14754  4962
14755  4963
14756  4964
14757  4965
14758  4966
14759  4967
14760  4968
14761  4969
14762  496A
14763  496B
14764  496C
14765  496D
14766  496E
14767  496F
14768  4970
14769  4971
14770  4972
14771  4973
14772  4974
14773  4975
14774  4976
14775  4977
14776  4978
14777  4979
14778  497A
14779  497B
14780  497C
14781  497D
14782  497E
14783  497F
14784  4980
14785  4981
14786  4982
14787  4983
14788  4984
14789  4985
14790  4986
14791  4987
14792  4988
14793  4989
14794  498A
14795  498B
14796  498C
14797  498D
14798  498E
14799  498F
14800  4990
14801  4991
14802  4992
14803  4993
14804  4994
14805  4995
14806  4996
14807  4997
14808  4998
14809  4999
14810  499A
14811  499B
14812  499C
14813  499D
14814  499E
14815  499F
14816  49A0
14817  49A1
14818  49A2
14819  49A3
14820  49A4
14821  49A5
14822  49A6
14823  49A7
14824  49A8
14825  49A9
14826  49AA
14827  49AB
14828  49AC
14829  49AD
14830  49AE
14831  49AF
14832  49B0
14833  49B1
14834  49B2
14835  49B3
14836  49B4
14837  49B5
14838  49B6
14839  49B7
14840  49B8
14841  49B9
14842  49BA
14843  49BB
14844  49BC
14845  49BD
14846  49BE
14847  49BF
14848  49C0
14849  49C1
14850  49C2
14851  49C3
14852  49C4
14853  49C5
14854  49C6
14855  49C7
14856  49C8
14857  49C9
14858  49CA
14859  49CB
14860  49CC
14861  49CD
14862  49CE
14863  49CF
14864  49D0
14865  49D1
14866  49D2
14867  49D3
14868  49D4
14869  49D5
14870  49D6
14871  49D7
14872  49D8
14873  49D9
14874  49DA
14875  49DB
14876  49DC
14877  49DD
14878  49DE
14879  49DF
14880  49E0
14881  49E1
14882  49E2
14883  49E3
14884  49E4
14885  49E5
14886  49E6
14887  49E7
14888  49E8
14889  49E9
14890  49EA
14891  49EB
14892  49EC
14893  49ED
14894  49EE
14895  49EF
14896  49F0
14897  49F1
14898  49F2
14899  49F3
14900  49F4
14901  49F5
14902  49F6
14903  49F7
14904  49F8
14905  49F9
14906  49FA
14907  49FB
14908  49FC
14909  49FD
14910  49FE
14911  49FF
14912  4A00
14913  4A01
14914  4A02
14915  4A03
14916  4A04
14917  4A05
14918  4A06
14919  4A07
14920  4A08
14921  4A09
14922  4A0A
14923  4A0B
14924  4A0C
14925  4A0D
14926  4A0E
14927  4A0F
14928  4A10
14929  4A11
14930  4A12
14931  4A13
14932  4A14
14933  4A15
14934  4A16
14935  4A17
14936  4A18
14937  4A19
14938  4A1A
14939  4A1B
14940  4A1C
14941  4A1D
14942  4A1E
14943  4A1F
14944  4A20
14945  4A21
14946  4A22
14947  4A23
14948  4A24
14949  4A25
14950  4A26
14951  4A27
14952  4A28
14953  4A29
14954  4A2A
14955  4A2B
14956  4A2C
14957  4A2D
14958  4A2E
14959  4A2F
14960  4A30
14961  4A31
14962  4A32
14963  4A33
14964  4A34
14965  4A35
14966  4A36
14967  4A37
14968  4A38
14969  4A39
14970  4A3A
14971  4A3B
14972  4A3C
14973  4A3D
14974  4A3E
14975  4A3F
14976  4A40
14977  4A41
14978  4A42
14979  4A43
14980  4A44
14981  4A45
14982  4A46
14983  4A47
14984  4A48
14985  4A49
14986  4A4A
14987  4A4B
14988  4A4C
14989  4A4D
14990  4A4E
14991  4A4F
14992  4A50
14993  4A51
14994  4A52
14995  4A53
14996  4A54
14997  4A55
14998  4A56
14999  4A57
15000  4A58
15001  4A59
15002  4A5A
15003  4A5B
15004  4A5C
15005  4A5D
15006  4A5E
15007  4A5F
15008  4A60
15009  4A61
15010  4A62
15011  4A63
15012  4A64
15013  4A65
15014  4A66
15015  4A67
15016  4A68
15017  4A69
15018  4A6A
15019  4A6B
15020  4A6C
15021  4A6D
15022  4A6E
15023  4A6F
15024  4A70
15025  4A71
15026  4A72
15027  4A73
15028  4A74
15029  4A75
15030  4A76
15031  4A77
15032  4A78
15033  4A79
15034  4A7A
15035  4A7B
15036  4A7C
15037  4A7D
15038  4A7E
15039  4A7F
15040  4A80
15041  4A81
15042  4A82
15043  4A83
15044  4A84
15045  4A85
15046  4A86
15047  4A87
15048  4A88
15049  4A89
15050  4A8A
15051  4A8B
15052  4A8C
15053  4A8D
15054  4A8E
15055  4A8F
15056  4A90
15057  4A91
15058  4A92
15059  4A93
15060  4A94
15061  4A95
15062  4A96
15063  4A97
15064  4A98
15065  4A99
15066  4A9A
15067  4A9B
15068  4A9C
15069  4A9D
15070  4A9E
15071  4A9F
15072  4AA0
15073  4AA1
15074  4AA2
15075  4AA3
15076  4AA4
15077  4AA5
15078  4AA6
15079  4AA7
15080  4AA8
15081  4AA9
15082  4AAA
15083  4AAB
15084  4AAC
15085  4AAD
15086  4AAE
15087  4AAF
15088  4AB0
15089  4AB1
15090  4AB2
15091  4AB3
15092  4AB4
15093  4AB5
15094  4AB6
15095  4AB7
15096  4AB8
15097  4AB9
15098  4ABA
15099  4ABB
15100  4ABC
15101  4ABD
15102  4ABE
15103  4ABF
15104  4AC0
15105  4AC1
15106  4AC2
15107  4AC3
15108  4AC4
15109  4AC5
15110  4AC6
15111  4AC7
15112  4AC8
15113  4AC9
15114  4ACA
15115  4ACB
15116  4ACC
15117  4ACD
15118  4ACE
15119  4ACF
15120  4AD0
15121  4AD1
15122  4AD2
15123  4AD3
15124  4AD4
15125  4AD5
15126  4AD6
15127  4AD7
15128  4AD8
15129  4AD9
15130  4ADA
15131  4ADB
15132  4ADC
15133  4ADD
15134  4ADE
15135  4ADF
15136  4AE0
15137  4AE1
15138  4AE2
15139  4AE3
15140  4AE4
15141  4AE5
15142  4AE6
15143  4AE7
15144  4AE8
15145  4AE9
15146  4AEA
15147  4AEB
15148  4AEC
15149  4AED
15150  4AEE
15151  4AEF
15152  4AF0
15153  4AF1
15154  4AF2
15155  4AF3
15156  4AF4
15157  4AF5
15158  4AF6
15159  4AF7
15160  4AF8
15161  4AF9
15162  4AFA
15163  4AFB
15164  4AFC
15165  4AFD
15166  4AFE
15167  4AFF
15168  4B00
15169  4B01
15170  4B02
15171  4B03
15172  4B04
15173  4B05
15174  4B06
15175  4B07
15176  4B08
15177  4B09
15178  4B0A
15179  4B0B
15180  4B0C
15181  4B0D
15182  4B0E
15183  4B0F
15184  4B10
15185  4B11
15186  4B12
15187  4B13
15188  4B14
15189  4B15
15190  4B16
15191  4B17
15192  4B18
15193  4B19
015194  000553        
015195  000554  var hFonts[54] ;
015196  000555  var stringsCV[54] := [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], hstrings ;
15197  25FC
15198  25FD
15199  25FE
15200  25FF
15201  2600
15202  2601
15203  2602
15204  2603
15205  2604
15206  2605
15207  2606
15208  2607
15209  2608
15210  2609
15211  260A
15212  260B
15213  260C
15214  260D
15215  260E
15216  260F
15217  2610
15218  2611
15219  2612
15220  2613
15221  2614
15222  2615
15223  2616
15224  2617
15225  2618
15226  2619
15227  261A
15228  261B
15229  261C
15230  261D
15231  261E
15232  261F
15233  2620
15234  2621
15235  2622
15236  2623
15237  2624
15238  2625
15239  2626
15240  2627
15241  2628
15242  2629
15243  262A
15244  262B
15245  262C
15246  262D
15247  262E
15248  262F
15249  2630
15250  2631
15251  2632
15252  2633
15253  2634
15254  2635
15255  2636
15256  2637
15257  2638
15258  2639
15259  263A
15260  263B
15261  263C
15262  263D
15263  263E
15264  263F
15265  2640
15266  2641
15267  2642
15268  2643
15269  2644
15270  2645
15271  2646
15272  2647
15273  2648
15274  2649
15275  264A
15276  264B
15277  264C
15278  264D
15279  264E
15280  264F
15281  2650
15282  2651
15283  2652
15284  2653
15285  2654
15286  2655
15287  2656
15288  2657
15289  2658
15290  2659
15291  265A
15292  265B
15293  265C
15294  265D
15295  265E
15296  265F
15297  2660
15298  2661
15299  2662
15300  2663
15301  2664
15302  2665
15303  2666
15304  2667
015305  000556  // Start P2.inc
015306  000557  var oObjects[MaxTotObjects+1] ;                 // address of objects
015307  000558  var CurrentForm ;
015308  000559  var TouchXpos, TouchYpos ;
015309  000560  var InputType, TouchState, CurInputData, pInputIndex ;
015310  000561  var comRX[40], cmd[CMDLenMAX] ;
015311  000562        
015312  000563  var InputCS, OutputCS ;
015313  000564        
015314  000565        
015315  000566        
015316  000567  func seroutCS(var op)
015317  000568      serout(op) ;
015318  000569      OutputCS ^= op ;
015319  000570  endfunc
015320  000571        
015321  000572  func nak0()
015322  000573      serout(NAK) ;
015323  000574      InputCS := 0 ;
015324  000575  endfunc
015325  000576        
015326  000577  func seroutOcs()
015327  000578      serout(OutputCS) ;
015328  000579      OutputCS := 0 ;
015329  000580  endfunc
015330  000581        
015331  000582  func SendReport(var id, var objt, var objn, var val)
015332  000583      seroutCS(id) ;
015333  000584      seroutCS(objt) ;
015334  000585      seroutCS(objn) ;
015335  000586      seroutCS(val >> 8) ; // first 8 bits
015336  000587      seroutCS(val) ;
015337  000588      seroutOcs() ;
015338  000589  endfunc
015339  000590        
015340  000591        
015341  000592  func ReadObject(var ObjectType, var ObjectIdx)
015342  000593      var j, k, Objects ;
015343  000594      Objects := *(oObjects+ObjectType) ;
015344  000595        
015345  000596      j := 2 + ObjectIdx * 2 + Objects ;
015346  000597       if (ObjectType == tForm)
015347  000598          k := CurrentForm ;
015348  000599      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
015349  000600          k := img_GetWord(hndl, *j, IMAGE_TAG2);
015350  000601      else if (ObjectType == tStrings)
015351  000602          k := stringsCV[ObjectIdx];
015352  000603          else
015353  000604          k := img_GetWord(hndl, *j, IMAGE_INDEX);
015354  000605          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ; // this is not correct for blocked buttons and cannot be fixed as we cannot
015355  000606                                                                                                                                                      // determine if button is momentary or not which is needed for correct answer.
015356  000607      endif
015357  000608      SendReport(REPORT_OBJ, ObjectType, ObjectIdx, k) ;
015358  000609  endfunc
015359  000610        
015360  000611        
015361  000612  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
015362  000613      var i, j, k, Objects ;
015363  000614      ObjectType &= 0x3f ;
015364  000615      if (ObjectType == tForm)
015365  000616          ActivateForm(ObjectIdx) ;
015366  000617      else
015367  000618          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
015368  000619          i := *(Objects) ;
015369  000620          switch (ObjectType)
015370  000621              case tWinButton :
015371  000622                  j := InputControls[oWinButtons[ObjectIdx+1]] ;
015372  000623                  break ;
015373  000624              case tUserButton :
015374  000625                  j := InputControls[oUserButtons[ObjectIdx+1]] ;
015375  000626                  break ;
015376  000627              default : j := -1 ;
015377  000628          endswitch
015378  000629          if (j != -1)
015379  000630              k := img_GetWord(hndl, i , IMAGE_INDEX) ;
015380  000631              NewVal := NewVal << 1 ;
015381  000632              if (OVF())      // button group index change
015382  000633                  if (*(j+InputData+Ofs_IPD_P1))
015383  000634                      k &= 1 ;    // mask off old group index for momentary
015384  000635                  else
015385  000636                      k &= 3 ;    // mask off old group index for toggle
015386  000637                  endif
015387  000638              else            // normal set
015388  000639                  if (*(j+InputData+Ofs_IPD_P2) != -1) TurnOffButtons(*(j+InputData+Ofs_IPD_P2)) ;
015389  000640                  k &= 0xfffc ;    // retain only group index for state set
015390  000641              endif
015391  000642              NewVal |= k ;
015392  000643          endif
015393  000644           if (ObjectType == tLeddigits)
015394  000645              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
015395  000646              ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015396  000647          else if (ObjectType == tStrings)
015397  000648              PrintStrings(ObjectIdx, NewVal, 0);
015398  000649          else
015399  000650              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
015400  000651              img_Show(hndl, i) ; // will only display if form is current
015401  000652          endif
015402  000653      endif
015403  000654  endfunc
015404  000655        
015405  000656  func TurnOffButtons(var group)
015406  000657      var j, k, l;
015407  000658      for (j := 0; j < nInputs; j++)
015408  000659          k := j*IPDatasize ;
015409  000660          if (*(InputData+k+Ofs_IPD_P2) == group)
015410  000661              l := -1 ;
015411  000662               if (*(InputData+k) == tWinButton)
015412  000663                  l := oWinButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015413  000664                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
015414  000665                  img_Show(hndl, l);      // only shows on current form
015415  000666              else if (*(InputData+k) == tUserButton)
015416  000667                  l := oUserButtons[*(InputData+k+Ofs_IPD_OBJVIDX)/2] ;
015417  000668                  img_SetWord(hndl, l, IMAGE_INDEX, img_GetWord(hndl, l, IMAGE_INDEX) & 0xfffc );
015418  000669                  img_Show(hndl, l);      // only shows on current form
015419  000670              endif
015420  000671          endif
015421  000672      next
015422  000673  endfunc
015423  000674        
015424  000675        
015425  000676  // WARNING, this code will crash if newval exceeds maximum displayable number
015426  000677  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
015427  000678      var i, j, k, l, lb, newval ;
015428  000679      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
015429  000680      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
015430  000681      i := -1 ;
015431  000682      j := *(typeptr) ;
015432  000683      repeat
015433  000684          typeptr += 2 ;
015434  000685          i++ ;
015435  000686          until (*(typeptr) == imgidx);
015436  000687      j := setptr + i*10 ;
015437  000688        
015438  000689      imgidx++ ;
015439  000690      l := 1 ;
015440  000691      for (i := 1; i < *(j+Ofs_Digits_Digits); i++)
015441  000692          l *= 10 ;
015442  000693      next
015443  000694      lb := *(j+Ofs_Digits_LeadingBlanks) ;
015444  000695      for (i := 0; i < *(j+Ofs_Digits_Digits); i++)
015445  000696          k := newval / l ;
015446  000697          newval -= k * l ;
015447  000698          if ( lb && (i < *(j+Ofs_Digits_Digits) - *(j+Ofs_Digits_MinDigits)) )
015448  000699              if (k == 0)
015449  000700                  k := 10 ;
015450  000701              else
015451  000702                  lb := 0 ;
015452  000703              endif
015453  000704          endif
015454  000705          l /= 10 ;
015455  000706          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
015456  000707          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+Ofs_Digits_Left)+i* *(j+Ofs_Digits_Widthdigit)) ;
015457  000708          img_Show(hndl, imgidx);
015458  000709      next
015459  000710  endfunc
015460  000711        
015461  000712        
015462  000713  func ActivateForm(var newform)
015463  000714      var i, j, *p ;
015464  000715        
015465  000716      if (CurrentForm != -1) // deactivate old form, by disabling all inputs
015466  000717          for (i := FormStartIndex[CurrentForm]; i <= FormEndIndex[CurrentForm]; i++)
015467  000718              if (img_GetWord(hndl, i, IMAGE_TAG))
015468  000719                  img_Disable(hndl,i) ;
015469  000720              endif
015470  000721          next
015471  000722      endif
015472  000723      CurrentForm := newform ;
015473  000724      // display newform image or clear to image color
015474  000725      if (FormBGcolors[CurrentForm] != ColorBGimage)
015475  000726          gfx_Set(BACKGROUND_COLOUR,FormBGcolors[CurrentForm]);
015476  000727          gfx_Cls() ;
015477  000728          DoGFXObjects() ;                                    // display GFX 'widgets'
015478  000729      endif
015479  000730        
015480  000731      // enable inputs
015481  000732      for (i := FormStartIndex[CurrentForm]; i < FormEndIndex[CurrentForm]; i++)
015482  000733          j := img_GetWord(hndl, i, IMAGE_TAG) ;
015483  000734          if (j)
015484  000735              j-- ;
015485  000736              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
015486  000737              //if (j != tKeyboard)
015487  000738              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
015488  000739                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
015489  000740              endif
015490  000741              img_Show(hndl,i) ; // show initialy, if required
015491  000742              if (j == tForm)
015492  000743                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
015493  000744              else if (j == tLeddigits)
015494  000745                  ledDigitsDisplay(i, oLeddigitss, oLedDigitsn) ;
015495  000746              endif
015496  000747          endif
015497  000748      next
015498  000749      for (i := 0; i < nStrings; i++)
015499  000750          if (stringsCV[i] != -1)
015500  000751              WriteObject(tStrings, i, stringsCV[i]) ;
015501  000752          endif
015502  000753      next
015503  000754        
015504  000755  endfunc
015505  000756        
015506  000757  func UpdateObjects(var newval)
015507  000758      var IPidx, otherOBJ ;
015508  000759      if ( ( img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) != newval) || (TouchState == Ofs_IPD_RELEASE) ) // only bother if values changed, or release
015509  000760        
015510  000761          img_SetWord(hndl, *(pInputIndex), IMAGE_INDEX, newval);
015511  000762              img_Show(hndl, *(pInputIndex));      // only shows on current form
015512  000763          if ((InputType == t4Dbutton) || (InputType == tUserButton) || (InputType == tWinButton))
015513  000764              if (*(CurInputData+Ofs_IPD_P1))
015514  000765                  newval &= 1;
015515  000766              else
015516  000767                  newval &= 3;
015517  000768              endif
015518  000769              if (newval > 1) newval := 1;
015519  000770          endif
015520  000771          IPidx := *(CurInputData+TouchState) ;
015521  000772          while(IPidx != 0)
015522  000773              otherOBJ := IPidx + InputData;
015523  000774              if (*(otherOBJ) == OT_REPORT)
015524  000775          SendReport(REPORT_EVENT, InputType, *(otherOBJ+Ofs_IPD_OBJVIDX), newval) ;
015525  000776              else if (*(otherOBJ) == OT_MAGIC)
015526  000777                  IPidx := *(otherOBJ+Ofs_IPD_P5) ;
015527  000778                  IPidx(newval) ;
015528  000779              else if (TouchState == *(otherOBJ+Ofs_IPD_P4))
015529  000780                  if (*(otherOBJ) == OT_ACTIVATE)
015530  000781                      ActivateForm(*(otherOBJ+Ofs_IPD_P2) ) ;
015531  000782                      InputType := tForm ;
015532  000783                  else if (*(otherOBJ) == OT_SETCONST)
015533  000784                      newval := *(otherOBJ+Ofs_IPD_P3) ;
015534  000785                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015535  000786                  else if (*(otherOBJ) == OT_SETANOTHER)
015536  000787                      WriteObject(*(otherOBJ+Ofs_IPD_P1), *(otherOBJ+Ofs_IPD_P2), newval) ;
015537  000788                  else if (*(otherOBJ) == OT_PREVFRAME)
015538  000789                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX))
015539  000790                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)-1) ;
015540  000791                      endif
015541  000792                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015542  000793                  else if (*(otherOBJ) == OT_NEXTFRAME)
015543  000794                      if (img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) < *(otherOBJ+Ofs_IPD_P3))
015544  000795                          WriteObject(*(otherOBJ+Ofs_IPD_P5),*(otherOBJ+Ofs_IPD_P2),img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX)+1) ;
015545  000796                      endif
015546  000797                      newval := img_GetWord(hndl, *(otherOBJ+Ofs_IPD_P6), IMAGE_INDEX) ;
015547  000798                  else if (*(otherOBJ) == OT_PREVSTRING)
015548  000799                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)])
015549  000800                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]-1) ;
015550  000801                      endif
015551  000802                  else if (*(otherOBJ) == OT_NEXTSTRING)
015552  000803                      if (stringsCV[*(otherOBJ+Ofs_IPD_P2)] < *(otherOBJ+Ofs_IPD_P3)) // fix IPD_P2 not filled in yet
015553  000804                          WriteObject(tStrings,*(otherOBJ+Ofs_IPD_P2),stringsCV[*(otherOBJ+Ofs_IPD_P2)]+1) ;
015554  000805                      endif
015555  000806                  endif
015556  000807              endif
015557  000808              IPidx := *(otherOBJ+TouchState) ;
015558  000809          wend
015559  000810      endif
015560  000811  endfunc
015561  000812        
015562  000813  // End P2.inc
015563  000814  func DoGFXObjects()
015564  000815  endfunc
015565  000816        
015566  000817  // Start P3.inc
015567  000818  func main()
015568  000819      var comTX[50], cmdi, i, j, ImageTouched, TouchStatus, oldn ;
015569  000820        
015570  000821      putstr("Mounting...\n");
015571  000822      if (!(file_Mount()))
015572  000823          while(!(file_Mount()))
015573  000824              putstr("Drive not mounted...");
015574  000825              pause(200);
015575  000826              gfx_Cls();
015576  000827              pause(200);
015577  000828          wend
015578  000829      endif
015579  000830  //    gfx_MoveTo(0, 0);
015580  000831  //    print(mem_Heap()," ") ;
015581  000832  //    gfx_TransparentColour(0x0020);
015582  000833  //    gfx_Transparency(ON);
015583  000834        
015584  000835      gfx_ScreenMode(LANDSCAPE) ;
015585  000836        
015586  000837      // open image control
015587  000838      hndl := file_LoadImageControl("RepRap_T.dat", "RepRap_T.gci", 1);
015588  000839        
015589  000840      // init 'constants'
015590  000841  // End P3.inc
015591  000842        
015592  000843      oObjects[tDipSwitch] := oDipSwitchs ;
015593  000844      oObjects[tKnob] := oKnobs ;
015594  000845      oObjects[tRockerSwitch] := oRockerSwitchs ;
015595  000846      oObjects[tRotarySwitch] := oRotarySwitchs ;
015596  000847      oObjects[tGSlider] := oGSliders ;
015597  000848      oObjects[tTrackbar] := oTrackbars ;
015598  000849      oObjects[tWinButton] := oWinButtons ;
015599  000850      oObjects[tAngularmeter] := oAngularmeters ;
015600  000851      oObjects[tCoolgauge] := oCoolgauges ;
015601  000852      oObjects[tCustomdigits] := oCustomdigitss ;
015602  000853      oObjects[tForm] := oForms ;
015603  000854      oObjects[tGauge] := oGauges ;
015604  000855      oObjects[tImage] := oImages ;
015605  000856      oObjects[tKeyboard] := oKeyboards ;
015606  000857      oObjects[tLed] := oLeds ;
015607  000858      oObjects[tLeddigits] := oLeddigitss ;
015608  000859      oObjects[tMeter] := oMeters ;
015609  000860      oObjects[tStrings] := oStringss ;
015610  000861      oObjects[tThermometer] := oThermometers ;
015611  000862      oObjects[tUserled] := oUserleds ;
015612  000863      oObjects[tVideo] := oVideos ;
015613  000864      oObjects[tStaticText] := oStaticTexts ;
015614  000865      oObjects[tSounds] := oSoundss ;
015615  000866      oObjects[tTimer] := oTimers ;
015616  000867      oObjects[tSpectrum] := oSpectrums ;
015617  000868      oObjects[tTank] := oTanks ;
015618  000869      oObjects[tUserImages] := oUserImagess ;
015619  000870      oObjects[tPinOutput] := oPinOutputs ;
015620  000871      oObjects[tPinInput] := oPinInputs ;
015621  000872      oObjects[t4Dbutton] := o4Dbuttons ;
015622  000873      oObjects[tAniButton] := oAniButtons ;
015623  000874      oObjects[tColorPicker] := oColorPickers ;
015624  000875      oObjects[tUserButton] := oUserButtons ;
015625  000876      hFonts[0] := file_LoadImageControl("RepRap_T.d03", "RepRap_T.g03", 1)  ;
015626  000877      hFonts[1] := file_LoadImageControl("RepRap_T.d01", "RepRap_T.g01", 1)  ;
015627  000878      hFonts[2] := file_LoadImageControl("RepRap_T.d02", "RepRap_T.g02", 1)  ;
015628  000879      hFonts[3] := FONT3 ;
015629  000880      hFonts[4] := FONT3 ;
015630  000881      hFonts[6] := FONT3 ;
015631  000882      hFonts[11] := file_LoadImageControl("RepRap_T.d06", "RepRap_T.g06", 1)  ;
015632  000883      hFonts[12] := file_LoadImageControl("RepRap_T.d05", "RepRap_T.g05", 1)  ;
015633  000884      hFonts[13] := file_LoadImageControl("RepRap_T.d0B", "RepRap_T.g0B", 1)  ;
015634  000885      hFonts[14] := FONT3 ;
015635  000886      hFonts[15] := FONT3 ;
015636  000887      hFonts[16] := FONT3 ;
015637  000888      hFonts[24] := FONT3 ;
015638  000889      hFonts[25] := file_LoadImageControl("RepRap_T.d07", "RepRap_T.g07", 1)  ;
015639  000890      hFonts[31] := file_LoadImageControl("RepRap_T.d08", "RepRap_T.g08", 1)  ;
015640  000891      hFonts[37] := file_LoadImageControl("RepRap_T.d04", "RepRap_T.g04", 1)  ;
015641  000892      hFonts[49] := file_LoadImageControl("RepRap_T.d09", "RepRap_T.g09", 1)  ;
015642  000893      hFonts[50] := file_LoadImageControl("RepRap_T.d0@", "RepRap_T.g0@", 1)  ;
015643  000894      hFonts[51] := FONT3 ;
015644  000895      hFonts[52] := FONT3 ;
015645  000896      hFonts[7] := hFonts[37] ;
015646  000897      hFonts[8] := hFonts[37] ;
015647  000898      hFonts[9] := hFonts[0] ;
015648  000899      hFonts[19] := hFonts[11] ;
015649  000900      hFonts[26] := hFonts[25] ;
015650  000901      hFonts[27] := hFonts[25] ;
015651  000902      hFonts[29] := hFonts[11] ;
015652  000903      hFonts[30] := hFonts[11] ;
015653  000904      hFonts[32] := hFonts[31] ;
015654  000905      hFonts[34] := hFonts[0] ;
015655  000906      hFonts[36] := hFonts[0] ;
015656  000907      hFonts[38] := hFonts[37] ;
015657  000908      hFonts[39] := hFonts[37] ;
015658  000909      hFonts[40] := hFonts[0] ;
015659  000910      hFonts[41] := hFonts[0] ;
015660  000911      hFonts[42] := hFonts[0] ;
015661  000912      hFonts[43] := hFonts[37] ;
015662  000913      hFonts[44] := hFonts[37] ;
015663  000914      hFonts[45] := hFonts[37] ;
015664  000915      hFonts[46] := hFonts[13] ;
015665  000916      hFonts[47] := hFonts[13] ;
015666  000917      hFonts[48] := hFonts[13] ;
015667  000918      hFonts[53] := hFonts[50] ;
015668  000919  // Start P4.inc
015669  000920      hstrings := file_Open("RepRap_T.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
015670  000921      // init comms
015671  000922      com_Init(comRX,CMDLenMAX,0);
015672  000923      com_SetBaud(COM0,19886);
015673  000924      com_TXbuffer(comTX, 100, 0);
015674  000925      snd_BufSize(2) ;
015675  000926      // tag 'real' objects
015676  000927      for (i := 0; i <= MaxTotObjects; i++)
015677  000928          if (   (i != tSounds)
015678  000929              && (i != tTimer)
015679  000930              && (i != tPinOutput)
015680  000931              && (i != tPinInput) )
015681  000932              TouchXpos := oObjects[i] ;
015682  000933              TouchYpos := *(TouchXpos) ;
015683  000934              for (ImageTouched := 1; ImageTouched <= TouchYpos; ImageTouched++)
015684  000935                  oldn := *(TouchXpos+ImageTouched*2) ;
015685  000936                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
015686  000937                  if (oldn != -1)
015687  000938                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
015688  000939                      img_Disable(hndl, oldn) ;
015689  000940                  endif
015690  000941              next
015691  000942          endif
015692  000943      next
015693  000944        
015694  000945      // display initial form
015695  000946      CurrentForm := -1 ;
015696  000947      ActivateForm(0) ; // need to change this according to first actual form
015697  000948        
015698  000949  // End P4.inc
015699  000950  // Start P5.inc
015700  000951      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
015701  000952      oldn := -1 ;
015702  000953      repeat
015703  000954        
015704  000955          // check comms for command, how to NAK invalid command
015705  000956          if (com_Count() != 0)
015706  000957              i := serin() ;
015707  000958              InputCS ^= i ;               // update checksum
015708  000959              if (   (cmdi > 2)
015709  000960                  && (cmd[0] == WRITE_STRU) )
015710  000961                  j := (cmdi-1) >> 1 + 2 ;
015711  000962                  if (j == CMDLenMAX)    // max length exceeded
015712  000963                      nak0() ;
015713  000964                      cmdi := -1 ;
015714  000965                  else if (cmdi & 1)
015715  000966                      cmd[j] := i ;
015716  000967                      if (cmd[2] == 0)    // if string complete
015717  000968                          if (InputCS)
015718  000969                              nak0() ;
015719  000970                          else
015720  000971                              if (cmd[0] == WRITE_STRU)
015721  000972                              cmd[j] := 0 ;                     // terminate it
015722  000973                              PrintStrings(cmd[1], &cmd[3], 1) ;
015723  000974                              serout(ACK) ;
015724  000975                              else
015725  000976                              endif
015726  000977                          endif
015727  000978                          cmdi := -1 ;
015728  000979                      endif
015729  000980                  else
015730  000981                      cmd[j] := cmd[j] << 8 + i ;
015731  000982                      cmd[2]-- ;          // dec length
015732  000983                  endif
015733  000984                  cmdi++ ;
015734  000985              else // not unicode string
015735  000986                  cmd[cmdi++] := i ;
015736  000987                   if (cmd[0] == WRITE_STR)                  // Ansi String
015737  000988                      if (cmdi == CMDLenMAX)      // max length exceeded
015738  000989                          nak0() ;
015739  000990                          cmdi := 0 ;
015740  000991                      else if (cmdi > 2)
015741  000992                          if (cmd[2] == -1)
015742  000993                              if (InputCS)
015743  000994                                  nak0() ;
015744  000995                              else
015745  000996                                  if (cmd[0] == WRITE_STR)
015746  000997                                  cmd[cmdi-1] := 0 ;                     // terminate it
015747  000998                                  PrintStrings(cmd[1], &cmd[3], 1) ;
015748  000999                                  serout(ACK) ;
015749  001000                                  else
015750  001001                                  endif
015751  001002                              endif
015752  001003                              cmdi := 0 ;
015753  001004                          else
015754  001005                              cmd[2]-- ;          // dec length
015755  001006                          endif
015756  001007                      endif
015757  001008                  else if (   (cmd[0] == READ_OBJ)
015758  001009                           && (cmdi == 4)         )
015759  001010                      if (InputCS)
015760  001011                          nak0() ;
015761  001012                      else
015762  001013                          ReadObject(cmd[1], cmd[2]) ;
015763  001014                      endif
015764  001015                      cmdi := 0 ;
015765  001016                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
015766  001017                           && (cmdi == 6)          )
015767  001018                      if (InputCS)
015768  001019                          nak0() ;
015769  001020                      else
015770  001021                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
015771  001022                          serout(ACK) ;
015772  001023                      endif
015773  001024                      cmdi := 0 ;
015774  001025                  else if (   (cmd[0] == WRITE_CONTRAST)
015775  001026                           && (cmdi == 3)         )
015776  001027                      if (InputCS)
015777  001028                          nak0() ;
015778  001029                      else
015779  001030                          gfx_Contrast(cmd[1]) ;
015780  001031                          serout(ACK) ;
015781  001032                      endif
015782  001033                      cmdi := 0 ;
015783  001034                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
015784  001035                      nak0() ;
015785  001036                      cmdi := 0 ;
015786  001037                  endif
015787  001038              endif   // not unicode string
015788  001039          endif   // a character is available
015789  001040        
015790  001041        
015791  001042      // touch code processing
015792  001043        
015793  001044          TouchStatus := touch_Get(TOUCH_STATUS);               // get touchscreen status
015794  001045          ImageTouched := img_Touched(hndl,-1) ;
015795  001046          if ((TouchStatus == TOUCH_PRESSED) || (TouchStatus == TOUCH_RELEASED) || (TouchStatus == TOUCH_MOVING))
015796  001047              if ((TouchStatus != TOUCH_RELEASED) && (ImageTouched != oldn) && (oldn != -1))
015797  001048                  TouchStatus := TOUCH_RELEASED ;       // simulate release if we move off object
015798  001049              endif
015799  001050              if (TouchStatus != TOUCH_RELEASED)        // if not released
015800  001051                  if (oldn != -1)
015801  001052                      ImageTouched := oldn ;
015802  001053                  else
015803  001054                      if (oldn != ImageTouched)
015804  001055                  oldn := ImageTouched ;
015805  001056                          TouchStatus := TOUCH_PRESSED ;
015806  001057                      endif
015807  001058                  endif
015808  001059                  TouchXpos  := touch_Get(TOUCH_GETX);
015809  001060                  TouchYpos  := touch_Get(TOUCH_GETY);
015810  001061                  TouchState := Ofs_IPD_DOWN ;
015811  001062              else
015812  001063                  ImageTouched := oldn ;                     // simulate release of what we touched
015813  001064                  oldn := -1 ;                    // prevent double release
015814  001065                  TouchState := Ofs_IPD_RELEASE ;
015815  001066              endif
015816  001067              if (ImageTouched != -1)
015817  001068                          CurInputData := InputControls[ImageTouched] + InputData;
015818  001069                          InputType := *(CurInputData) ;
015819  001070                          i := InputType ;
015820  001071                          if (InputType >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
015821  001072                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
015822  001073              endif
015823  001074          endif
015824  001075   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
015825  001076        
015826  001077          sys_EventsResume() ;
015827  001078      forever
015828  001079        
015829  001080  cDipswitch:
015830  001081        
015831  001082  cKnob:
015832  001083        
015833  001084  cRockerswitch:
015834  001085        
015835  001086  cRotaryswitch:
015836  001087        
015837  001088  cSlider:
015838  001089  cTrackbar:
015839  001090        
015840  001091  c4DButton:
015841  001092  cUserButton:
015842  001093      pInputIndex := oUserButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
015843  001094      goto gbutton ;
015844  001095  cWinbutton:
015845  001096      pInputIndex := oWinButtons + *(CurInputData+Ofs_IPD_OBJVIDX) ;
015846  001097  gbutton:
015847  001098      i := img_GetWord(hndl, *(pInputIndex), IMAGE_INDEX) ; // current state
015848  001099      if (*(CurInputData+Ofs_IPD_P1))                                 // momentary, reports 0, but should report 1
015849  001100          if (TouchStatus == TOUCH_RELEASED)
015850  001101              i &= 0xfffe ;
015851  001102              TouchState == Ofs_IPD_DOWN ;
015852  001103          else
015853  001104              i |= 1 ;
015854  001105              TouchState == Ofs_IPD_RELEASE ;
015855  001106          endif
015856  001107      else if (*(CurInputData+Ofs_IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
015857  001108          if (TouchStatus == TOUCH_RELEASED)                     // only truly change on release
015858  001109              if ((i & 3) == 3)
015859  001110                  i &= 0xfffc ;
015860  001111              else
015861  001112                  i++ ;
015862  001113              endif
015863  001114          else
015864  001115              i |= 1 ;                                      // make down regardless of current state
015865  001116          endif
015866  001117      else                        // group action, up all other buttons on touch press, reports 0 for button down
015867  001118          if (TouchStatus == TOUCH_PRESSED)                     // only truly change on release
015868  001119              TurnOffButtons(*(CurInputData+Ofs_IPD_P2)) ;
015869  001120          endif
015870  001121          i := (i & 0xfffc) | 2 ;
015871  001122      endif
015872  001123        
015873  001124      UpdateObjects(i) ;
015874  001125  endsub ;
015875  001126        
015876  001127  cAniButton:
015877  001128        
015878  001129  cColorPicker:
015879  001130        
015880  001131  endfunc
015881  001132  // End P5.inc
Notice: Check that the function called via pointer  'IPidx' requires 1 argument (line 778 file:RepRap_Touchv1.4DGenieS)
Notice: local var 'p' in func 'ActivateForm' is never used (line 714 file:RepRap_Touchv1.4DGenieS)


Symbol Table:
name                             decimal         hex
__MAXBANKS                             6  0x00000006 (const dword)  (not used)
__MAXMEM                           32768  0x00008000 (const dword)  (usage 1)
__MAXPROG                          32750  0x00007fee (const dword)  (usage 1)
__PLATFORM                             3  0x00000003 (const dword)  (not used)
__reserved10                        -111  0xffffff91 (PmmC func) args[0] r=0  (not used)
__reserved13                        -123  0xffffff85 (PmmC func) args[0] r=0  (not used)
__reserved14                        -124  0xffffff84 (PmmC func) args[0] r=0  (not used)
__reserved17                        -201  0xffffff37 (PmmC func) args[0] r=0  (not used)
__reserved18                        -202  0xffffff36 (PmmC func) args[0] r=0  (not used)
__reserved19                        -203  0xffffff35 (PmmC func) args[0] r=0  (not used)
__reserved20                        -204  0xffffff34 (PmmC func) args[0] r=0  (not used)
__reserved21                        -205  0xffffff33 (PmmC func) args[0] r=0  (not used)
__reserved22                        -206  0xffffff32 (PmmC func) args[0] r=0  (not used)
__reserved23                        -220  0xffffff24 (PmmC func) args[0] r=0  (not used)
__reserved24                        -221  0xffffff23 (PmmC func) args[0] r=0  (not used)
__reserved25                        -222  0xffffff22 (PmmC func) args[0] r=0  (not used)
__reserved26                        -223  0xffffff21 (PmmC func) args[0] r=0  (not used)
__reserved3                          -69  0xffffffbb (PmmC func) args[0] r=0  (not used)
__reserved30                        -283  0xfffffee5 (PmmC func) args[0] r=0  (not used)
__reserved4                          -70  0xffffffba (PmmC func) args[0] r=0  (not used)
__reserved42                        -373  0xfffffe8b (PmmC func) args[0] r=0  (not used)
__reserved43                        -387  0xfffffe7d (PmmC func) args[0] r=0  (not used)
__reserved44                        -388  0xfffffe7c (PmmC func) args[0] r=0  (not used)
__reserved45                        -389  0xfffffe7b (PmmC func) args[0] r=0  (not used)
__reserved46                        -390  0xfffffe7a (PmmC func) args[0] r=0  (not used)
__reserved5                          -76  0xffffffb4 (PmmC func) args[0] r=0  (not used)
__reserved51                        -411  0xfffffe65 (PmmC func) args[0] r=0  (not used)
__reserved52                        -412  0xfffffe64 (PmmC func) args[0] r=0  (not used)
__reserved53                        -422  0xfffffe5a (PmmC func) args[0] r=0  (not used)
__reserved54                        -423  0xfffffe59 (PmmC func) args[0] r=0  (not used)
__reserved57                        -457  0xfffffe37 (PmmC func) args[0] r=0  (not used)
__reserved58                        -458  0xfffffe36 (PmmC func) args[0] r=0  (not used)
__reserved6                          -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
__reserved60                        -467  0xfffffe2d (PmmC func) args[0] r=0  (not used)
__reserved61                        -468  0xfffffe2c (PmmC func) args[0] r=0  (not used)
__reserved62                        -469  0xfffffe2b (PmmC func) args[0] r=0  (not used)
__reserved63                        -490  0xfffffe16 (PmmC func) args[0] r=0  (not used)
__reserved64                        -491  0xfffffe15 (PmmC func) args[0] r=0  (not used)
__reserved65                        -492  0xfffffe14 (PmmC func) args[0] r=0  (not used)
__reserved66                        -493  0xfffffe13 (PmmC func) args[0] r=0  (not used)
__reserved68                        -509  0xfffffe03 (PmmC func) args[0] r=0  (not used)
__reserved69                        -510  0xfffffe02 (PmmC func) args[0] r=0  (not used)
__reserved70                        -511  0xfffffe01 (PmmC func) args[0] r=0  (not used)
__reserved72                        -520  0xfffffdf8 (PmmC func) args[0] r=0  (not used)
__reserved77                        -526  0xfffffdf2 (PmmC func) args[0] r=0  (not used)
__reserved78                        -527  0xfffffdf1 (PmmC func) args[0] r=0  (not used)
__reserved85                        -536  0xfffffde8 (PmmC func) args[0] r=0  (not used)
__reserved86                        -537  0xfffffde7 (PmmC func) args[0] r=0  (not used)
__reserved9                         -110  0xffffff92 (PmmC func) args[0] r=0  (not used)
__translate                           -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
ABS                                  -53  0xffffffcb (PmmC func) args[1] r=1  (not used)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                       12739  0x000031c3 (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ana_HS                              -533  0xfffffdeb (PmmC func) args[7] r=0  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (not used)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
AUDIO_ENABLE                          17  0x00000011 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (not used)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_RADIUS                          27  0x0000001b (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 111)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (usage 3)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
bus_ClearPins                       -119  0xffffff89 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                            -117  0xffffff8b (PmmC func) args[0] r=1  (not used)
bus_Read8                           -122  0xffffff86 (PmmC func) args[0] r=1  (not used)
bus_SetChangeInterrupt              -120  0xffffff88 (PmmC func) args[2] r=1  (not used)
bus_SetPins                         -118  0xffffff8a (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             3  0x00000003 (const dword)  (not used)
bus_Write8                          -121  0xffffff87 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                             -49  0xffffffcf (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                           -12  0xfffffff4 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                            -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
CHECKED                                0  0x00000000 (const dword)  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  382  0x0000017e (mem) word[80] (global)  (usage 84)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 12)
ColorBGimage                          32  0x00000020 (const dword)  (usage 108)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (usage 3)
COM1                               63493  0x0000f805 (const dword)  (not used)
com1_Count                          -249  0xffffff07 (PmmC func) args[0] r=1  (not used)
com1_Error                          -257  0xfffffeff (PmmC func) args[0] r=1  (not used)
com1_Full                           -253  0xffffff03 (PmmC func) args[0] r=1  (not used)
com1_Init                           -233  0xffffff17 (PmmC func) args[3] r=0  (not used)
com1_Reset                          -245  0xffffff0b (PmmC func) args[0] r=0  (not used)
COM1_RX_pin                         -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
com1_RXblock                        -558  0xfffffdd2 (PmmC func) args[2] r=0  (not used)
com1_Sync                           -261  0xfffffefb (PmmC func) args[0] r=1  (not used)
COM1_TX_pin                         -229  0xffffff1b (PmmC func) args[1] r=1  (not used)
com1_TXblock                        -557  0xfffffdd3 (PmmC func) args[2] r=0  (not used)
com1_TXbuffer                       -265  0xfffffef7 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -277  0xfffffeeb (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -269  0xfffffef3 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -273  0xfffffeef (PmmC func) args[1] r=1  (not used)
COM2                               63494  0x0000f806 (const dword)  (not used)
com2_Count                          -250  0xffffff06 (PmmC func) args[0] r=1  (not used)
com2_Error                          -258  0xfffffefe (PmmC func) args[0] r=1  (not used)
com2_Full                           -254  0xffffff02 (PmmC func) args[0] r=1  (not used)
com2_Init                           -234  0xffffff16 (PmmC func) args[3] r=0  (not used)
com2_Reset                          -246  0xffffff0a (PmmC func) args[0] r=0  (not used)
COM2_RX_pin                         -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
com2_RXblock                        -560  0xfffffdd0 (PmmC func) args[2] r=0  (not used)
com2_Sync                           -262  0xfffffefa (PmmC func) args[0] r=1  (not used)
COM2_TX_pin                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
com2_TXblock                        -559  0xfffffdd1 (PmmC func) args[2] r=0  (not used)
com2_TXbuffer                       -266  0xfffffef6 (PmmC func) args[3] r=0  (not used)
com2_TXbufferHold                   -278  0xfffffeea (PmmC func) args[1] r=1  (not used)
com2_TXcount                        -270  0xfffffef2 (PmmC func) args[0] r=1  (not used)
com2_TXemptyEvent                   -274  0xfffffeee (PmmC func) args[1] r=1  (not used)
COM3                               63495  0x0000f807 (const dword)  (not used)
com3_Count                          -251  0xffffff05 (PmmC func) args[0] r=1  (not used)
com3_Error                          -259  0xfffffefd (PmmC func) args[0] r=1  (not used)
com3_Full                           -255  0xffffff01 (PmmC func) args[0] r=1  (not used)
com3_Init                           -235  0xffffff15 (PmmC func) args[3] r=0  (not used)
com3_Reset                          -247  0xffffff09 (PmmC func) args[0] r=0  (not used)
COM3_RX_pin                         -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
com3_RXblock                        -562  0xfffffdce (PmmC func) args[2] r=0  (not used)
com3_Sync                           -263  0xfffffef9 (PmmC func) args[0] r=1  (not used)
COM3_TX_pin                         -231  0xffffff19 (PmmC func) args[1] r=1  (not used)
com3_TXblock                        -561  0xfffffdcf (PmmC func) args[2] r=0  (not used)
com3_TXbuffer                       -267  0xfffffef5 (PmmC func) args[3] r=0  (not used)
com3_TXbufferHold                   -279  0xfffffee9 (PmmC func) args[1] r=1  (not used)
com3_TXcount                        -271  0xfffffef1 (PmmC func) args[0] r=1  (not used)
com3_TXemptyEvent                   -275  0xfffffeed (PmmC func) args[1] r=1  (not used)
com_Count                           -248  0xffffff08 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -256  0xffffff00 (PmmC func) args[0] r=1  (not used)
com_Full                            -252  0xffffff04 (PmmC func) args[0] r=1  (not used)
com_Init                            -232  0xffffff18 (PmmC func) args[3] r=0  (usage 3)
com_Mode                            -280  0xfffffee8 (PmmC func) args[4] r=1  (not used)
com_Reset                           -244  0xffffff0c (PmmC func) args[0] r=0  (not used)
com_RXblock                         -282  0xfffffee6 (PmmC func) args[2] r=0  (not used)
com_SetBaud                         -225  0xffffff1f (PmmC func) args[2] r=1  (usage 3)
com_Sync                            -260  0xfffffefc (PmmC func) args[0] r=1  (not used)
com_TXblock                         -281  0xfffffee7 (PmmC func) args[2] r=0  (not used)
com_TXbuffer                        -264  0xfffffef8 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
com_TXcount                         -268  0xfffffef4 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -272  0xfffffef0 (PmmC func) args[1] r=1  (not used)
comRX                                302  0x0000012e (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -58  0xffffffc6 (PmmC func) args[1] r=1  (not used)
COUNT_EDGE                             3  0x00000003 (const dword)  (not used)
COUNT_FALL                             2  0x00000002 (const dword)  (not used)
COUNT_OFF                              0  0x00000000 (const dword)  (not used)
COUNT_RISE                             1  0x00000001 (const dword)  (not used)
crc_16                              -567  0xfffffdc9 (PmmC func) args[2] r=1  (not used)
crc_CCITT                           -569  0xfffffdc7 (PmmC func) args[3] r=1  (not used)
crc_CSUM_8                          -566  0xfffffdca (PmmC func) args[2] r=1  (not used)
crc_MODBUS                          -568  0xfffffdc8 (PmmC func) args[2] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
CurInputData                         298  0x0000012a (mem) word (global)  (usage 27)
CurrentForm                          288  0x00000120 (mem) word (global)  (usage 42)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                   -64  0xffffffc0 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (usage 3)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEBUG_MODE                            64  0x00000040 (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (usage 12)
DIABLO                                 3  0x00000003 (const dword)  (usage 3)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_BlitPixelsFromCOM0             -372  0xfffffe8c (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM1             -563  0xfffffdcd (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM2             -564  0xfffffdcc (PmmC func) args[0] r=0  (not used)
disp_BlitPixelsFromCOM3             -565  0xfffffdcb (PmmC func) args[0] r=0  (not used)
disp_Disconnect                     -371  0xfffffe8d (PmmC func) args[0] r=0  (not used)
disp_Init                           -370  0xfffffe8e (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -367  0xfffffe91 (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -363  0xfffffe95 (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -362  0xfffffe96 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -369  0xfffffe8f (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -364  0xfffffe94 (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -365  0xfffffe93 (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -366  0xfffffe92 (PmmC func) args[1] r=0  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                       12107  0x00002f4b (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                               -65  0xffffffbf (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                            -66  0xffffffbe (PmmC func) args[0] r=1  (not used)
EXTERN                               N/A         N/A (macro)  /**/   (not used)
FALSE_REASON                         141  0x0000008d (const dword)  (not used)
FCY_1                                 20  0x00000014 (const dword)  (not used)
FCY_256                               23  0x00000017 (const dword)  (not used)
FCY_64                                22  0x00000016 (const dword)  (not used)
FCY_8                                 21  0x00000015 (const dword)  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -431  0xfffffe51 (PmmC func) args[1] r=1  (not used)
file_Count                          -425  0xfffffe57 (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -426  0xfffffe56 (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -446  0xfffffe42 (PmmC func) args[1] r=1  (not used)
file_Error                          -424  0xfffffe58 (PmmC func) args[0] r=1  (not used)
file_Exec                           -450  0xfffffe3e (PmmC func) args[2] r=1  (not used)
file_Exists                         -429  0xfffffe53 (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -427  0xfffffe55 (PmmC func) args[1] r=1  (not used)
file_FindNext                       -428  0xfffffe54 (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -441  0xfffffe47 (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -445  0xfffffe43 (PmmC func) args[3] r=1  (not used)
file_GetW                           -443  0xfffffe45 (PmmC func) args[1] r=1  (usage 3)
file_Image                          -438  0xfffffe4a (PmmC func) args[3] r=1  (not used)
file_Index                          -434  0xfffffe4e (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -448  0xfffffe40 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -451  0xfffffe3d (PmmC func) args[3] r=1  (usage 36)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -452  0xfffffe3c (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -430  0xfffffe52 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -454  0xfffffe3a (PmmC func) args[1] r=1  (not used)
file_PutC                           -440  0xfffffe48 (PmmC func) args[2] r=1  (not used)
file_PutS                           -444  0xfffffe44 (PmmC func) args[2] r=1  (not used)
file_PutW                           -442  0xfffffe46 (PmmC func) args[2] r=1  (not used)
file_Read                           -432  0xfffffe50 (PmmC func) args[3] r=1  (not used)
file_Rename                         -455  0xfffffe39 (PmmC func) args[2] r=1  (not used)
file_Rewind                         -447  0xfffffe41 (PmmC func) args[1] r=1  (not used)
file_Run                            -449  0xfffffe3f (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -439  0xfffffe49 (PmmC func) args[5] r=1  (not used)
file_Seek                           -433  0xfffffe4f (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_SetDate                        -456  0xfffffe38 (PmmC func) args[7] r=1  (not used)
file_Size                           -437  0xfffffe4b (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -435  0xfffffe4d (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -453  0xfffffe3b (PmmC func) args[0] r=0  (not used)
file_Write                          -436  0xfffffe4c (PmmC func) args[3] r=1  (not used)
FILLPATTERN_0                      65504  0x0000ffe0 (const dword)  (not used)
FILLPATTERN_1                      65505  0x0000ffe1 (const ??? 0)  (not used)
FILLPATTERN_10                     65514  0x0000ffea (const ??? 0)  (not used)
FILLPATTERN_11                     65515  0x0000ffeb (const ??? 0)  (not used)
FILLPATTERN_12                     65516  0x0000ffec (const ??? 0)  (not used)
FILLPATTERN_13                     65517  0x0000ffed (const ??? 0)  (not used)
FILLPATTERN_14                     65518  0x0000ffee (const ??? 0)  (not used)
FILLPATTERN_15                     65519  0x0000ffef (const ??? 0)  (not used)
FILLPATTERN_16                     65520  0x0000fff0 (const ??? 0)  (not used)
FILLPATTERN_17                     65521  0x0000fff1 (const ??? 0)  (not used)
FILLPATTERN_18                     65522  0x0000fff2 (const ??? 0)  (not used)
FILLPATTERN_19                     65523  0x0000fff3 (const ??? 0)  (not used)
FILLPATTERN_2                      65506  0x0000ffe2 (const ??? 0)  (not used)
FILLPATTERN_20                     65524  0x0000fff4 (const ??? 0)  (not used)
FILLPATTERN_21                     65525  0x0000fff5 (const ??? 0)  (not used)
FILLPATTERN_22                     65526  0x0000fff6 (const ??? 0)  (not used)
FILLPATTERN_23                     65527  0x0000fff7 (const ??? 0)  (not used)
FILLPATTERN_24                     65528  0x0000fff8 (const ??? 0)  (not used)
FILLPATTERN_25                     65529  0x0000fff9 (const ??? 0)  (not used)
FILLPATTERN_26                     65530  0x0000fffa (const ??? 0)  (not used)
FILLPATTERN_27                     65531  0x0000fffb (const ??? 0)  (not used)
FILLPATTERN_28                     65532  0x0000fffc (const ??? 0)  (not used)
FILLPATTERN_29                     65533  0x0000fffd (const ??? 0)  (not used)
FILLPATTERN_3                      65507  0x0000ffe3 (const ??? 0)  (not used)
FILLPATTERN_30                     65534  0x0000fffe (const ??? 0)  (not used)
FILLPATTERN_31                     65535  0x0000ffff (const ??? 0)  (not used)
FILLPATTERN_4                      65508  0x0000ffe4 (const ??? 0)  (not used)
FILLPATTERN_5                      65509  0x0000ffe5 (const ??? 0)  (not used)
FILLPATTERN_6                      65510  0x0000ffe6 (const ??? 0)  (not used)
FILLPATTERN_7                      65511  0x0000ffe7 (const ??? 0)  (not used)
FILLPATTERN_8                      65512  0x0000ffe8 (const ??? 0)  (not used)
FILLPATTERN_9                      65513  0x0000ffe9 (const ??? 0)  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_Bank                          -498  0xfffffe0e (PmmC func) args[0] r=1  (not used)
flash_Blit1                         -507  0xfffffe05 (PmmC func) args[4] r=1  (not used)
flash_Blit16                        -503  0xfffffe09 (PmmC func) args[3] r=1  (not used)
flash_Blit2                         -506  0xfffffe06 (PmmC func) args[4] r=1  (not used)
flash_Blit4                         -505  0xfffffe07 (PmmC func) args[4] r=1  (not used)
flash_Blit8                         -504  0xfffffe08 (PmmC func) args[3] r=1  (not used)
flash_Copy                          -496  0xfffffe10 (PmmC func) args[4] r=1  (not used)
flash_EraseBank                     -499  0xfffffe0d (PmmC func) args[2] r=1  (not used)
flash_Exec                          -508  0xfffffe04 (PmmC func) args[2] r=1  (not used)
flash_GetByte                       -494  0xfffffe12 (PmmC func) args[2] r=1  (not used)
flash_GetWord                       -495  0xfffffe11 (PmmC func) args[2] r=1  (not used)
flash_LoadFile                      -500  0xfffffe0c (PmmC func) args[2] r=1  (not used)
flash_putstr                        -502  0xfffffe0a (PmmC func) args[2] r=1  (not used)
FLASH_READ_PROTECT                    16  0x00000010 (const dword)  (not used)
flash_Run                           -497  0xfffffe0f (PmmC func) args[1] r=1  (not used)
FLASH_WRITE_PROTECT                   32  0x00000020 (const dword)  (not used)
flash_WriteBlock                    -501  0xfffffe0b (PmmC func) args[3] r=1  (not used)
FLASHBANK_0                            0  0x00000000 (const dword)  (not used)
FLASHBANK_1                            1  0x00000001 (const dword)  (not used)
FLASHBANK_2                            2  0x00000002 (const dword)  (not used)
FLASHBANK_3                            3  0x00000003 (const dword)  (not used)
FLASHBANK_4                            4  0x00000004 (const dword)  (not used)
FLASHBANK_5                            5  0x00000005 (const dword)  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
flt_ABS                              -84  0xffffffac (PmmC func) args[2] r=1  (not used)
flt_ACOS                             -85  0xffffffab (PmmC func) args[2] r=1  (not used)
flt_ADD                              -97  0xffffff9f (PmmC func) args[3] r=1  (not used)
flt_ASIN                             -86  0xffffffaa (PmmC func) args[2] r=1  (not used)
flt_ATAN                             -87  0xffffffa9 (PmmC func) args[2] r=1  (not used)
flt_CEIL                             -90  0xffffffa6 (PmmC func) args[2] r=1  (not used)
flt_COS                              -88  0xffffffa8 (PmmC func) args[2] r=1  (not used)
flt_DIV                             -100  0xffffff9c (PmmC func) args[3] r=1  (not used)
flt_EQ                              -101  0xffffff9b (PmmC func) args[2] r=1  (not used)
flt_EXP                              -89  0xffffffa7 (PmmC func) args[2] r=1  (not used)
flt_FLOOR                            -91  0xffffffa5 (PmmC func) args[2] r=1  (not used)
flt_FTOI                            -108  0xffffff94 (PmmC func) args[1] r=1  (not used)
flt_GE                              -104  0xffffff98 (PmmC func) args[2] r=1  (not used)
flt_GT                              -103  0xffffff99 (PmmC func) args[2] r=1  (not used)
flt_ITOF                             -79  0xffffffb1 (PmmC func) args[2] r=1  (not used)
flt_LE                              -106  0xffffff96 (PmmC func) args[2] r=1  (not used)
flt_LOG                              -93  0xffffffa3 (PmmC func) args[2] r=1  (not used)
flt_LT                              -105  0xffffff97 (PmmC func) args[2] r=1  (not used)
flt_LTOF                             -81  0xffffffaf (PmmC func) args[2] r=1  (not used)
flt_MUL                              -99  0xffffff9d (PmmC func) args[3] r=1  (not used)
flt_NE                              -102  0xffffff9a (PmmC func) args[2] r=1  (not used)
flt_POW                              -96  0xffffffa0 (PmmC func) args[3] r=1  (not used)
flt_PRINT                            -83  0xffffffad (PmmC func) args[2] r=1  (not used)
flt_PRINTxy                         -109  0xffffff93 (PmmC func) args[4] r=1  (not used)
flt_SGN                             -107  0xffffff95 (PmmC func) args[1] r=1  (not used)
flt_SIN                              -92  0xffffffa4 (PmmC func) args[2] r=1  (not used)
flt_SQR                              -94  0xffffffa2 (PmmC func) args[2] r=1  (not used)
flt_SUB                              -98  0xffffff9e (PmmC func) args[3] r=1  (not used)
flt_TAN                              -95  0xffffffa1 (PmmC func) args[2] r=1  (not used)
flt_UITOF                            -80  0xffffffb0 (PmmC func) args[2] r=1  (not used)
flt_ULTOF                            -82  0xffffffae (PmmC func) args[2] r=1  (not used)
flt_VAL                              -78  0xffffffb2 (PmmC func) args[2] r=1  (not used)
FONT1                                  1  0x00000001 (const dword)  (not used)
FONT2                                  2  0x00000002 (const dword)  (not used)
FONT3                                  3  0x00000003 (const dword)  (usage 27)
FONT_1                                 1  0x00000001 (const dword)  (not used)
FONT_10                               10  0x0000000a (const dword)  (not used)
FONT_11                               11  0x0000000b (const dword)  (not used)
FONT_2                                 2  0x00000002 (const dword)  (not used)
FONT_3                                 3  0x00000003 (const dword)  (not used)
FONT_4                                 4  0x00000004 (const dword)  (not used)
FONT_5                                 5  0x00000005 (const dword)  (not used)
FONT_6                                 6  0x00000006 (const dword)  (not used)
FONT_7                                 7  0x00000007 (const dword)  (not used)
FONT_8                                 8  0x00000008 (const dword)  (not used)
FONT_9                                 9  0x00000009 (const dword)  (not used)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
FormBGcolors                        9497  0x00002519FormBGcolors                        9497  0x00002519 (mem) word[43] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 8)
FormBGcolors                      UNRESOLVED  (usage 4)
FormEndIndex                          93  0x0000005dFormEndIndex                          93  0x0000005d (mem) word[43] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
FormStartIndex                         7  0x00000007FormStartIndex                         7  0x00000007 (mem) word[43] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 7)
FormStartIndex                    UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                        -165  0xffffff5b (PmmC func) args[1] r=1  (not used)
gfx_565to332                        -166  0xffffff5a (PmmC func) args[1] r=1  (not used)
gfx_Arc                             -172  0xffffff54 (PmmC func) args[7] r=0  (not used)
gfx_BevelRadius                     -194  0xffffff3e (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -196  0xffffff3c (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -195  0xffffff3d (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                        -184  0xffffff48 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                           -149  0xffffff6b (PmmC func) args[2] r=0  (not used)
gfx_Bullet                          -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
gfx_Button                          -155  0xffffff65 (PmmC func) args[9] r=1  (not used)
gfx_Button2                         -156  0xffffff64 (PmmC func) args[8] r=0  (not used)
gfx_Button3                         -157  0xffffff63 (PmmC func) args[8] r=0  (not used)
gfx_ChangeColour                    -151  0xffffff69 (PmmC func) args[2] r=0  (not used)
gfx_CheckBox                        -158  0xffffff62 (PmmC func) args[8] r=0  (not used)
gfx_Circle                          -136  0xffffff78 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                    -137  0xffffff77 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                        -186  0xffffff46 (PmmC func) args[1] r=1  (usage 6)
gfx_ClipWindow                      -150  0xffffff6a (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                             -126  0xffffff82 (PmmC func) args[0] r=0  (usage 6)
gfx_Contrast                        -192  0xffffff40 (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                             -145  0xffffff6f (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                         -153  0xffffff67 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                   -154  0xffffff66 (PmmC func) args[5] r=0  (not used)
gfx_FillPattern                     -170  0xffffff56 (PmmC func) args[2] r=1  (not used)
gfx_FrameDelay                      -189  0xffffff43 (PmmC func) args[1] r=1  (not used)
gfx_Get                             -182  0xffffff4a (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                        -139  0xffffff75 (PmmC func) args[2] r=1  (not used)
gfx_Gradient                        -176  0xffffff50 (PmmC func) args[7] r=0  (not used)
gfx_Hline                           -132  0xffffff7c (PmmC func) args[4] r=1  (not used)
gfx_IncX                            -147  0xffffff6d (PmmC func) args[0] r=1  (not used)
gfx_IncY                            -148  0xffffff6c (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
gfx_Line                            -131  0xffffff7d (PmmC func) args[5] r=0  (not used)
gfx_LinePattern                     -193  0xffffff3f (PmmC func) args[1] r=1  (not used)
gfx_LineRel                         -130  0xffffff7e (PmmC func) args[2] r=0  (not used)
gfx_LineTo                          -129  0xffffff7f (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                         -128  0xffffff80 (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                          -127  0xffffff81 (PmmC func) args[2] r=0  (usage 3)
gfx_ObjectColour                    -185  0xffffff47 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                           -142  0xffffff72 (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                       -141  0xffffff73 (PmmC func) args[2] r=0  (not used)
gfx_Origin                          -169  0xffffff57 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                   -191  0xffffff41 (PmmC func) args[1] r=1  (not used)
gfx_Panel                           -161  0xffffff5f (PmmC func) args[6] r=0  (not used)
gfx_PenSize                         -183  0xffffff49 (PmmC func) args[1] r=1  (not used)
gfx_PieSlice                        -171  0xffffff55 (PmmC func) args[9] r=0  (not used)
gfx_PointWithinBox                  -199  0xffffff39 (PmmC func) args[3] r=1  (not used)
gfx_PointWithinRectangle            -200  0xffffff38 (PmmC func) args[3] r=1  (not used)
gfx_Polygon                         -144  0xffffff70 (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                   -168  0xffffff58 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                        -143  0xffffff71 (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                        -138  0xffffff76 (PmmC func) args[3] r=0  (not used)
gfx_RadioButton                     -159  0xffffff61 (PmmC func) args[8] r=0  (not used)
gfx_ReadBresLine                    -178  0xffffff4e (PmmC func) args[5] r=1  (not used)
gfx_ReadGRAMarea                    -180  0xffffff4c (PmmC func) args[5] r=1  (not used)
gfx_Rectangle                       -134  0xffffff7a (PmmC func) args[5] r=0  (not used)
gfx_RectangleFilled                 -135  0xffffff79 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                        -164  0xffffff5c (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
gfx_RoundGradient                   -177  0xffffff4f (PmmC func) args[8] r=0  (not used)
gfx_RoundPanel                      -175  0xffffff51 (PmmC func) args[8] r=0  (not used)
gfx_RoundRect                       -173  0xffffff53 (PmmC func) args[6] r=0  (not used)
gfx_Scope                           -532  0xfffffdec (PmmC func) args[19] r=0  (not used)
gfx_ScreenCopyPaste                 -163  0xffffff5d (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                      -190  0xffffff42 (PmmC func) args[1] r=1  (usage 3)
gfx_Set                             -125  0xffffff83 (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                   -152  0xffffff68 (PmmC func) args[0] r=0  (not used)
gfx_Slider                          -162  0xffffff5e (PmmC func) args[8] r=1  (not used)
gfx_Slider2                         -160  0xffffff60 (PmmC func) args[8] r=1  (not used)
gfx_Surround                        -174  0xffffff52 (PmmC func) args[7] r=0  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                    -188  0xffffff44 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour               -187  0xffffff45 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                        -140  0xffffff74 (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                  -167  0xffffff59 (PmmC func) args[7] r=0  (not used)
gfx_Vline                           -133  0xffffff7b (PmmC func) args[4] r=1  (not used)
gfx_WriteBresLine                   -179  0xffffff4d (PmmC func) args[5] r=0  (not used)
gfx_WriteGRAMarea                   -181  0xffffff4b (PmmC func) args[5] r=0  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -198  0xffffff3a (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAD_DOWN                             32  0x00000020 (const dword)  (not used)
GRAD_LEFT                             80  0x00000050 (const dword)  (not used)
GRAD_RIGHT                            48  0x00000030 (const dword)  (not used)
GRAD_UP                               64  0x00000040 (const dword)  (not used)
GRAD_WAVE_HOR                        112  0x00000070 (const dword)  (not used)
GRAD_WAVE_VER                         96  0x00000060 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 2  0x00000002 (mem) word[54] (global)  (usage 201)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                               -48  0xffffffd0 (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   0  0x00000000 (mem) word (global)  (usage 114)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                             218  0x000000da (mem) word (global)  (usage 12)
HYPER                                  3  0x00000003 (const dword)  (not used)
I2C1                               63520  0x0000f820 (const dword)  (not used)
I2C1_Ack                            -305  0xfffffecf (PmmC func) args[0] r=0  (not used)
I2C1_AckPoll                        -314  0xfffffec6 (PmmC func) args[1] r=1  (not used)
I2C1_AckStatus                      -311  0xfffffec9 (PmmC func) args[0] r=1  (not used)
I2C1_Close                          -287  0xfffffee1 (PmmC func) args[0] r=0  (not used)
I2C1_Getn                           -323  0xfffffebd (PmmC func) args[2] r=1  (not used)
I2C1_Gets                           -320  0xfffffec0 (PmmC func) args[2] r=1  (not used)
I2C1_Idle                           -317  0xfffffec3 (PmmC func) args[0] r=1  (not used)
I2C1_Nack                           -308  0xfffffecc (PmmC func) args[0] r=0  (not used)
I2C1_Open                           -284  0xfffffee4 (PmmC func) args[3] r=1  (not used)
I2C1_Putn                           -329  0xfffffeb7 (PmmC func) args[2] r=1  (not used)
I2C1_Puts                           -326  0xfffffeba (PmmC func) args[1] r=1  (not used)
I2C1_Read                           -299  0xfffffed5 (PmmC func) args[0] r=1  (not used)
I2C1_Restart                        -296  0xfffffed8 (PmmC func) args[0] r=1  (not used)
I2C1_Start                          -290  0xfffffede (PmmC func) args[0] r=1  (not used)
I2C1_Stop                           -293  0xfffffedb (PmmC func) args[0] r=1  (not used)
I2C1_Write                          -302  0xfffffed2 (PmmC func) args[1] r=1  (not used)
I2C2                               63521  0x0000f821 (const dword)  (not used)
I2C2_Ack                            -306  0xfffffece (PmmC func) args[0] r=0  (not used)
I2C2_AckPoll                        -315  0xfffffec5 (PmmC func) args[1] r=1  (not used)
I2C2_AckStatus                      -312  0xfffffec8 (PmmC func) args[0] r=1  (not used)
I2C2_Close                          -288  0xfffffee0 (PmmC func) args[0] r=0  (not used)
I2C2_Getn                           -324  0xfffffebc (PmmC func) args[2] r=1  (not used)
I2C2_Gets                           -321  0xfffffebf (PmmC func) args[2] r=1  (not used)
I2C2_Idle                           -318  0xfffffec2 (PmmC func) args[0] r=1  (not used)
I2C2_Nack                           -309  0xfffffecb (PmmC func) args[0] r=0  (not used)
I2C2_Open                           -285  0xfffffee3 (PmmC func) args[3] r=1  (not used)
I2C2_Putn                           -330  0xfffffeb6 (PmmC func) args[2] r=1  (not used)
I2C2_Puts                           -327  0xfffffeb9 (PmmC func) args[1] r=1  (not used)
I2C2_Read                           -300  0xfffffed4 (PmmC func) args[0] r=1  (not used)
I2C2_Restart                        -297  0xfffffed7 (PmmC func) args[0] r=1  (not used)
I2C2_Start                          -291  0xfffffedd (PmmC func) args[0] r=1  (not used)
I2C2_Stop                           -294  0xfffffeda (PmmC func) args[0] r=1  (not used)
I2C2_Write                          -303  0xfffffed1 (PmmC func) args[1] r=1  (not used)
I2C3                               63522  0x0000f822 (const dword)  (not used)
I2C3_Ack                            -307  0xfffffecd (PmmC func) args[0] r=0  (not used)
I2C3_AckPoll                        -316  0xfffffec4 (PmmC func) args[1] r=1  (not used)
I2C3_AckStatus                      -313  0xfffffec7 (PmmC func) args[0] r=1  (not used)
I2C3_Close                          -289  0xfffffedf (PmmC func) args[0] r=0  (not used)
I2C3_Getn                           -325  0xfffffebb (PmmC func) args[2] r=1  (not used)
I2C3_Gets                           -322  0xfffffebe (PmmC func) args[2] r=1  (not used)
I2C3_Idle                           -319  0xfffffec1 (PmmC func) args[0] r=1  (not used)
I2C3_Nack                           -310  0xfffffeca (PmmC func) args[0] r=0  (not used)
I2C3_Open                           -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
I2C3_Putn                           -331  0xfffffeb5 (PmmC func) args[2] r=1  (not used)
I2C3_Puts                           -328  0xfffffeb8 (PmmC func) args[1] r=1  (not used)
I2C3_Read                           -301  0xfffffed3 (PmmC func) args[0] r=1  (not used)
I2C3_Restart                        -298  0xfffffed6 (PmmC func) args[0] r=1  (not used)
I2C3_Start                          -292  0xfffffedc (PmmC func) args[0] r=1  (not used)
I2C3_Stop                           -295  0xfffffed9 (PmmC func) args[0] r=1  (not used)
I2C3_Write                          -304  0xfffffed0 (PmmC func) args[1] r=1  (not used)
I2C_10KHZ                              3  0x00000003 (const dword)  (not used)
I2C_20KHZ                              4  0x00000004 (const dword)  (not used)
I2C_250KHZ                             6  0x00000006 (const dword)  (not used)
I2C_50KHZ                              5  0x00000005 (const dword)  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iForm0                                 0  0x00000000 (const ??? 0)  (usage 3)
iForm1                                 1  0x00000001 (const ??? 0)  (usage 3)
iForm10                              110  0x0000006e (const ??? 0)  (usage 3)
iForm11                               97  0x00000061 (const ??? 0)  (usage 3)
iForm12                               46  0x0000002e (const ??? 0)  (usage 3)
iForm14                               53  0x00000035 (const ??? 0)  (usage 3)
iForm16                              172  0x000000ac (const ??? 0)  (usage 3)
iForm17                              177  0x000000b1 (const ??? 0)  (usage 3)
iForm18                              180  0x000000b4 (const ??? 0)  (usage 3)
iForm19                               66  0x00000042 (const ??? 0)  (usage 3)
iForm2                                 4  0x00000004 (const ??? 0)  (usage 3)
iForm20                               70  0x00000046 (const ??? 0)  (usage 3)
iForm21                               74  0x0000004a (const ??? 0)  (usage 3)
iForm23                               84  0x00000054 (const ??? 0)  (usage 3)
iForm24                               88  0x00000058 (const ??? 0)  (usage 3)
iForm25                              183  0x000000b7 (const ??? 0)  (usage 3)
iForm26                               92  0x0000005c (const ??? 0)  (usage 3)
iForm27                               99  0x00000063 (const ??? 0)  (usage 3)
iForm28                              120  0x00000078 (const ??? 0)  (usage 3)
iForm29                              127  0x0000007f (const ??? 0)  (usage 3)
iForm30                              136  0x00000088 (const ??? 0)  (usage 3)
iForm31                              140  0x0000008c (const ??? 0)  (usage 3)
iForm32                              144  0x00000090 (const ??? 0)  (usage 3)
iForm33                              148  0x00000094 (const ??? 0)  (usage 3)
iForm34                              159  0x0000009f (const ??? 0)  (usage 3)
iForm35                              163  0x000000a3 (const ??? 0)  (usage 3)
iForm38                              187  0x000000bb (const ??? 0)  (usage 3)
iForm4                                10  0x0000000a (const ??? 0)  (usage 3)
iForm40                              198  0x000000c6 (const ??? 0)  (usage 3)
iForm41                              224  0x000000e0 (const ??? 0)  (usage 3)
iForm5                                15  0x0000000f (const ??? 0)  (usage 3)
iForm6                                18  0x00000012 (const ??? 0)  (usage 3)
iForm7                               167  0x000000a7 (const ??? 0)  (usage 3)
iForm9                                42  0x0000002a (const ??? 0)  (usage 3)
iiLeddigits0                          31  0x0000001f (const ??? 0)  (not used)
iiLeddigits1                          33  0x00000021 (const ??? 0)  (not used)
iiLeddigits2                          35  0x00000023 (const ??? 0)  (not used)
iLeddigits0                           30  0x0000001e (const ??? 0)  (usage 3)
iLeddigits1                           32  0x00000020 (const ??? 0)  (usage 3)
iLeddigits2                           34  0x00000022 (const ??? 0)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 48)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
img_ClearAttributes                 -383  0xfffffe81 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -377  0xfffffe87 (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -376  0xfffffe88 (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -375  0xfffffe89 (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -380  0xfffffe84 (PmmC func) args[3] r=1  (usage 48)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -378  0xfffffe86 (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SelectReadPosition              -385  0xfffffe7f (PmmC func) args[5] r=1  (not used)
img_SequentialRead                  -386  0xfffffe7e (PmmC func) args[2] r=1  (not used)
img_SetAttributes                   -382  0xfffffe82 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -374  0xfffffe8a (PmmC func) args[4] r=1  (not used)
img_SetWord                         -379  0xfffffe85 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -381  0xfffffe83 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -384  0xfffffe80 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
InputControls                        179  0x000000b3InputControls                        179  0x000000b3 (mem) word[226] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
InputCS                              542  0x0000021e (mem) word (global)  (usage 21)
InputData                            631  0x00000277InputData                            631  0x00000277 (mem) word[3542] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 30)
InputType                            294  0x00000126 (mem) word (global)  (usage 24)
INVERSE                               64  0x00000040 (const dword)  (not used)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                              -41  0xffffffd7 (PmmC func) args[1] r=1  (not used)
isalpha                              -40  0xffffffd8 (PmmC func) args[1] r=1  (not used)
isdigit                              -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
islower                              -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
isprint                              -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
isspace                              -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
iStatictext0                          89  0x00000059 (const ??? 0)  (usage 3)
iStatictext1                          36  0x00000024 (const ??? 0)  (usage 3)
iStatictext10                         57  0x00000039 (const ??? 0)  (usage 3)
iStatictext19                         59  0x0000003b (const ??? 0)  (usage 3)
iStatictext2                          37  0x00000025 (const ??? 0)  (usage 3)
iStatictext3                          96  0x00000060 (const ??? 0)  (usage 3)
iStatictext4                          38  0x00000026 (const ??? 0)  (usage 3)
iStatictext5                         176  0x000000b0 (const ??? 0)  (usage 3)
iStatictext6                         199  0x000000c7 (const ??? 0)  (usage 3)
iStatictext7                         170  0x000000aa (const ??? 0)  (usage 3)
iStatictext8                          76  0x0000004c (const ??? 0)  (usage 3)
iStatictext9                          58  0x0000003a (const ??? 0)  (usage 3)
iStrings0                           7715  0x00001e23iStrings0                           7715  0x00001e23 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings1                           7741  0x00001e3diStrings1                           7741  0x00001e3d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings11                          7949  0x00001f0diStrings11                          7949  0x00001f0d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings12                          7975  0x00001f27iStrings12                          7975  0x00001f27 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings13                          8001  0x00001f41iStrings13                          8001  0x00001f41 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings14                          8027  0x00001f5biStrings14                          8027  0x00001f5b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings15                          8053  0x00001f75iStrings15                          8053  0x00001f75 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings16                          8079  0x00001f8fiStrings16                          8079  0x00001f8f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings19                          8105  0x00001fa9iStrings19                          8105  0x00001fa9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings2                           7767  0x00001e57iStrings2                           7767  0x00001e57 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings24                          8131  0x00001fc3iStrings24                          8131  0x00001fc3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings25                          8157  0x00001fddiStrings25                          8157  0x00001fdd (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings26                          8183  0x00001ff7iStrings26                          8183  0x00001ff7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings27                          8209  0x00002011iStrings27                          8209  0x00002011 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings29                          8235  0x0000202biStrings29                          8235  0x0000202b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings3                           7793  0x00001e71iStrings3                           7793  0x00001e71 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings30                          8261  0x00002045iStrings30                          8261  0x00002045 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings31                          8287  0x0000205fiStrings31                          8287  0x0000205f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings32                          8313  0x00002079iStrings32                          8313  0x00002079 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings34                          8339  0x00002093iStrings34                          8339  0x00002093 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings36                          8365  0x000020adiStrings36                          8365  0x000020ad (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings37                          8391  0x000020c7iStrings37                          8391  0x000020c7 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings38                          8417  0x000020e1iStrings38                          8417  0x000020e1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings39                          8443  0x000020fbiStrings39                          8443  0x000020fb (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings4                           7819  0x00001e8biStrings4                           7819  0x00001e8b (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings40                          8469  0x00002115iStrings40                          8469  0x00002115 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings41                          8495  0x0000212fiStrings41                          8495  0x0000212f (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings42                          8521  0x00002149iStrings42                          8521  0x00002149 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings43                          8547  0x00002163iStrings43                          8547  0x00002163 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings44                          8573  0x0000217diStrings44                          8573  0x0000217d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings45                          8599  0x00002197iStrings45                          8599  0x00002197 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings46                          8625  0x000021b1iStrings46                          8625  0x000021b1 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings47                          8651  0x000021cbiStrings47                          8651  0x000021cb (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings48                          8677  0x000021e5iStrings48                          8677  0x000021e5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings49                          8703  0x000021ffiStrings49                          8703  0x000021ff (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings50                          8729  0x00002219iStrings50                          8729  0x00002219 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings51                          8755  0x00002233iStrings51                          8755  0x00002233 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings52                          8781  0x0000224diStrings52                          8781  0x0000224d (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings53                          8807  0x00002267iStrings53                          8807  0x00002267 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings6                           7845  0x00001ea5iStrings6                           7845  0x00001ea5 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings7                           7871  0x00001ebfiStrings7                           7871  0x00001ebf (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings8                           7897  0x00001ed9iStrings8                           7897  0x00001ed9 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
iStrings9                           7923  0x00001ef3iStrings9                           7923  0x00001ef3 (mem) word[13] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
isupper                              -38  0xffffffda (PmmC func) args[1] r=1  (not used)
iswhite                              -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
isxdigit                             -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iterator                            -404  0xfffffe6c (PmmC func) args[1] r=0  (not used)
iUserbutton0                          19  0x00000013 (const ??? 0)  (usage 3)
iUserbutton1                           2  0x00000002 (const ??? 0)  (usage 3)
iUserbutton10                        171  0x000000ab (const ??? 0)  (usage 3)
iUserbutton100                       108  0x0000006c (const ??? 0)  (usage 3)
iUserbutton101                       109  0x0000006d (const ??? 0)  (usage 3)
iUserbutton102                       149  0x00000095 (const ??? 0)  (usage 3)
iUserbutton103                       150  0x00000096 (const ??? 0)  (usage 3)
iUserbutton104                       151  0x00000097 (const ??? 0)  (usage 3)
iUserbutton105                       152  0x00000098 (const ??? 0)  (usage 3)
iUserbutton106                       153  0x00000099 (const ??? 0)  (usage 3)
iUserbutton107                       154  0x0000009a (const ??? 0)  (usage 3)
iUserbutton108                       155  0x0000009b (const ??? 0)  (usage 3)
iUserbutton109                       156  0x0000009c (const ??? 0)  (usage 3)
iUserbutton11                        121  0x00000079 (const ??? 0)  (usage 3)
iUserbutton110                       157  0x0000009d (const ??? 0)  (usage 3)
iUserbutton111                       158  0x0000009e (const ??? 0)  (usage 3)
iUserbutton112                       160  0x000000a0 (const ??? 0)  (usage 3)
iUserbutton113                       161  0x000000a1 (const ??? 0)  (usage 3)
iUserbutton114                       162  0x000000a2 (const ??? 0)  (usage 3)
iUserbutton115                       164  0x000000a4 (const ??? 0)  (usage 3)
iUserbutton116                       165  0x000000a5 (const ??? 0)  (usage 3)
iUserbutton117                       166  0x000000a6 (const ??? 0)  (usage 3)
iUserbutton118                        87  0x00000057 (const ??? 0)  (usage 3)
iUserbutton119                       201  0x000000c9 (const ??? 0)  (usage 3)
iUserbutton12                         16  0x00000010 (const ??? 0)  (usage 3)
iUserbutton120                       191  0x000000bf (const ??? 0)  (usage 3)
iUserbutton121                       192  0x000000c0 (const ??? 0)  (usage 3)
iUserbutton122                       193  0x000000c1 (const ??? 0)  (usage 3)
iUserbutton123                       194  0x000000c2 (const ??? 0)  (usage 3)
iUserbutton124                       195  0x000000c3 (const ??? 0)  (usage 3)
iUserbutton125                       196  0x000000c4 (const ??? 0)  (usage 3)
iUserbutton126                       197  0x000000c5 (const ??? 0)  (usage 3)
iUserbutton127                       202  0x000000ca (const ??? 0)  (usage 3)
iUserbutton128                       203  0x000000cb (const ??? 0)  (usage 3)
iUserbutton129                       204  0x000000cc (const ??? 0)  (usage 3)
iUserbutton13                         17  0x00000011 (const ??? 0)  (usage 3)
iUserbutton130                       205  0x000000cd (const ??? 0)  (usage 3)
iUserbutton131                       206  0x000000ce (const ??? 0)  (usage 3)
iUserbutton132                       207  0x000000cf (const ??? 0)  (usage 3)
iUserbutton133                       208  0x000000d0 (const ??? 0)  (usage 3)
iUserbutton134                       200  0x000000c8 (const ??? 0)  (usage 3)
iUserbutton135                       209  0x000000d1 (const ??? 0)  (usage 3)
iUserbutton136                       210  0x000000d2 (const ??? 0)  (usage 3)
iUserbutton137                       212  0x000000d4 (const ??? 0)  (usage 3)
iUserbutton138                       213  0x000000d5 (const ??? 0)  (usage 3)
iUserbutton139                       214  0x000000d6 (const ??? 0)  (usage 3)
iUserbutton14                          7  0x00000007 (const ??? 0)  (usage 3)
iUserbutton140                       215  0x000000d7 (const ??? 0)  (usage 3)
iUserbutton141                       216  0x000000d8 (const ??? 0)  (usage 3)
iUserbutton142                       217  0x000000d9 (const ??? 0)  (usage 3)
iUserbutton143                       218  0x000000da (const ??? 0)  (usage 3)
iUserbutton144                       219  0x000000db (const ??? 0)  (usage 3)
iUserbutton145                       220  0x000000dc (const ??? 0)  (usage 3)
iUserbutton146                       221  0x000000dd (const ??? 0)  (usage 3)
iUserbutton147                       222  0x000000de (const ??? 0)  (usage 3)
iUserbutton149                       211  0x000000d3 (const ??? 0)  (usage 3)
iUserbutton15                          8  0x00000008 (const ??? 0)  (usage 3)
iUserbutton150                       223  0x000000df (const ??? 0)  (usage 3)
iUserbutton16                         45  0x0000002d (const ??? 0)  (usage 3)
iUserbutton17                         54  0x00000036 (const ??? 0)  (usage 3)
iUserbutton18                         43  0x0000002b (const ??? 0)  (usage 3)
iUserbutton19                         44  0x0000002c (const ??? 0)  (usage 3)
iUserbutton2                          20  0x00000014 (const ??? 0)  (usage 3)
iUserbutton20                         94  0x0000005e (const ??? 0)  (usage 3)
iUserbutton21                        100  0x00000064 (const ??? 0)  (usage 3)
iUserbutton22                        101  0x00000065 (const ??? 0)  (usage 3)
iUserbutton23                        111  0x0000006f (const ??? 0)  (usage 3)
iUserbutton24                        112  0x00000070 (const ??? 0)  (usage 3)
iUserbutton25                        113  0x00000071 (const ??? 0)  (usage 3)
iUserbutton26                         47  0x0000002f (const ??? 0)  (usage 3)
iUserbutton27                         48  0x00000030 (const ??? 0)  (usage 3)
iUserbutton28                         49  0x00000031 (const ??? 0)  (usage 3)
iUserbutton29                         50  0x00000032 (const ??? 0)  (usage 3)
iUserbutton3                          29  0x0000001d (const ??? 0)  (usage 3)
iUserbutton30                         51  0x00000033 (const ??? 0)  (usage 3)
iUserbutton31                         52  0x00000034 (const ??? 0)  (usage 3)
iUserbutton32                         55  0x00000037 (const ??? 0)  (usage 3)
iUserbutton33                         56  0x00000038 (const ??? 0)  (usage 3)
iUserbutton35                         60  0x0000003c (const ??? 0)  (usage 3)
iUserbutton36                         61  0x0000003d (const ??? 0)  (usage 3)
iUserbutton37                         62  0x0000003e (const ??? 0)  (usage 3)
iUserbutton38                         65  0x00000041 (const ??? 0)  (usage 3)
iUserbutton39                         63  0x0000003f (const ??? 0)  (usage 3)
iUserbutton4                           5  0x00000005 (const ??? 0)  (usage 3)
iUserbutton40                         64  0x00000040 (const ??? 0)  (usage 3)
iUserbutton41                        173  0x000000ad (const ??? 0)  (usage 3)
iUserbutton42                        174  0x000000ae (const ??? 0)  (usage 3)
iUserbutton43                        178  0x000000b2 (const ??? 0)  (usage 3)
iUserbutton44                        179  0x000000b3 (const ??? 0)  (usage 3)
iUserbutton45                        181  0x000000b5 (const ??? 0)  (usage 3)
iUserbutton46                        182  0x000000b6 (const ??? 0)  (usage 3)
iUserbutton47                        184  0x000000b8 (const ??? 0)  (usage 3)
iUserbutton48                        185  0x000000b9 (const ??? 0)  (usage 3)
iUserbutton49                        169  0x000000a9 (const ??? 0)  (usage 3)
iUserbutton5                           6  0x00000006 (const ??? 0)  (usage 3)
iUserbutton50                         21  0x00000015 (const ??? 0)  (usage 3)
iUserbutton51                        102  0x00000066 (const ??? 0)  (usage 3)
iUserbutton52                         67  0x00000043 (const ??? 0)  (usage 3)
iUserbutton53                         75  0x0000004b (const ??? 0)  (usage 3)
iUserbutton54                         68  0x00000044 (const ??? 0)  (usage 3)
iUserbutton55                         78  0x0000004e (const ??? 0)  (usage 3)
iUserbutton56                         79  0x0000004f (const ??? 0)  (usage 3)
iUserbutton57                         80  0x00000050 (const ??? 0)  (usage 3)
iUserbutton58                         81  0x00000051 (const ??? 0)  (usage 3)
iUserbutton59                         82  0x00000052 (const ??? 0)  (usage 3)
iUserbutton6                          11  0x0000000b (const ??? 0)  (usage 3)
iUserbutton60                         83  0x00000053 (const ??? 0)  (usage 3)
iUserbutton61                          3  0x00000003 (const ??? 0)  (usage 3)
iUserbutton62                        186  0x000000ba (const ??? 0)  (usage 3)
iUserbutton63                         39  0x00000027 (const ??? 0)  (usage 3)
iUserbutton64                        188  0x000000bc (const ??? 0)  (usage 3)
iUserbutton65                        189  0x000000bd (const ??? 0)  (usage 3)
iUserbutton66                         85  0x00000055 (const ??? 0)  (usage 3)
iUserbutton67                        225  0x000000e1 (const ??? 0)  (usage 3)
iUserbutton68                         86  0x00000056 (const ??? 0)  (usage 3)
iUserbutton69                         90  0x0000005a (const ??? 0)  (usage 3)
iUserbutton7                          12  0x0000000c (const ??? 0)  (usage 3)
iUserbutton70                        190  0x000000be (const ??? 0)  (usage 3)
iUserbutton71                         93  0x0000005d (const ??? 0)  (usage 3)
iUserbutton72                        103  0x00000067 (const ??? 0)  (usage 3)
iUserbutton73                        114  0x00000072 (const ??? 0)  (usage 3)
iUserbutton75                         71  0x00000047 (const ??? 0)  (usage 3)
iUserbutton76                         72  0x00000048 (const ??? 0)  (usage 3)
iUserbutton77                         73  0x00000049 (const ??? 0)  (usage 3)
iUserbutton78                        115  0x00000073 (const ??? 0)  (usage 3)
iUserbutton79                        116  0x00000074 (const ??? 0)  (usage 3)
iUserbutton8                          13  0x0000000d (const ??? 0)  (usage 3)
iUserbutton80                        117  0x00000075 (const ??? 0)  (usage 3)
iUserbutton81                        118  0x00000076 (const ??? 0)  (usage 3)
iUserbutton82                        119  0x00000077 (const ??? 0)  (usage 3)
iUserbutton83                        122  0x0000007a (const ??? 0)  (usage 3)
iUserbutton84                        128  0x00000080 (const ??? 0)  (usage 3)
iUserbutton85                        129  0x00000081 (const ??? 0)  (usage 3)
iUserbutton86                        130  0x00000082 (const ??? 0)  (usage 3)
iUserbutton87                        131  0x00000083 (const ??? 0)  (usage 3)
iUserbutton88                        132  0x00000084 (const ??? 0)  (usage 3)
iUserbutton89                        133  0x00000085 (const ??? 0)  (usage 3)
iUserbutton9                          14  0x0000000e (const ??? 0)  (usage 3)
iUserbutton90                        134  0x00000086 (const ??? 0)  (usage 3)
iUserbutton91                        135  0x00000087 (const ??? 0)  (usage 3)
iUserbutton92                        123  0x0000007b (const ??? 0)  (usage 3)
iUserbutton93                        138  0x0000008a (const ??? 0)  (usage 3)
iUserbutton94                        141  0x0000008d (const ??? 0)  (usage 3)
iUserbutton95                        145  0x00000091 (const ??? 0)  (usage 3)
iUserbutton96                        104  0x00000068 (const ??? 0)  (usage 3)
iUserbutton97                        105  0x00000069 (const ??? 0)  (usage 3)
iUserbutton98                        106  0x0000006a (const ??? 0)  (usage 3)
iUserbutton99                        107  0x0000006b (const ??? 0)  (usage 3)
iUserimages0                         124  0x0000007c (const ??? 0)  (usage 3)
iUserimages1                          69  0x00000045 (const ??? 0)  (usage 3)
iUserimages10                         95  0x0000005f (const ??? 0)  (usage 3)
iUserimages11                        226  0x000000e2 (const ??? 0)  (usage 3)
iUserimages12                        175  0x000000af (const ??? 0)  (usage 3)
iUserimages13                         77  0x0000004d (const ??? 0)  (usage 3)
iUserimages14                        125  0x0000007d (const ??? 0)  (usage 3)
iUserimages15                        126  0x0000007e (const ??? 0)  (usage 3)
iUserimages16                         91  0x0000005b (const ??? 0)  (usage 3)
iUserimages2                          98  0x00000062 (const ??? 0)  (usage 3)
iUserimages3                         137  0x00000089 (const ??? 0)  (usage 3)
iUserimages4                         142  0x0000008e (const ??? 0)  (usage 3)
iUserimages5                         146  0x00000092 (const ??? 0)  (usage 3)
iUserimages6                         168  0x000000a8 (const ??? 0)  (usage 3)
iUserimages7                         139  0x0000008b (const ??? 0)  (usage 3)
iUserimages8                         143  0x0000008f (const ??? 0)  (usage 3)
iUserimages9                         147  0x00000093 (const ??? 0)  (usage 3)
iVideo0                                9  0x00000009 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWinbutton0                           22  0x00000016 (const ??? 0)  (usage 3)
iWinbutton1                           23  0x00000017 (const ??? 0)  (usage 3)
iWinbutton2                           24  0x00000018 (const ??? 0)  (usage 3)
iWinbutton3                           25  0x00000019 (const ??? 0)  (usage 3)
iWinbutton4                           26  0x0000001a (const ??? 0)  (usage 3)
iWinbutton5                           40  0x00000028 (const ??? 0)  (usage 3)
iWinbutton6                           41  0x00000029 (const ??? 0)  (usage 3)
iWinbutton7                           27  0x0000001b (const ??? 0)  (usage 3)
iWinbutton8                           28  0x0000001c (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 9583  0x0000256fkKeyboardKeystrokes                 9583  0x0000256f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                   13085  0x0000331d (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (not used)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                               -47  0xffffffd1 (PmmC func) args[1] r=1  (not used)
LOCAL                                N/A         N/A (macro) //   (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (not used)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
M_PA0                                  1  0x00000001 (const dword)  (not used)
M_PA1                                  2  0x00000002 (const dword)  (not used)
M_PA10                              1024  0x00000400 (const dword)  (not used)
M_PA11                              2048  0x00000800 (const dword)  (not used)
M_PA12                              4096  0x00001000 (const dword)  (not used)
M_PA13                              8192  0x00002000 (const dword)  (not used)
M_PA14                             16384  0x00004000 (const dword)  (not used)
M_PA15                             32768  0x00008000 (const dword)  (not used)
M_PA2                                  4  0x00000004 (const dword)  (not used)
M_PA3                                  8  0x00000008 (const dword)  (not used)
M_PA4                                 16  0x00000010 (const dword)  (not used)
M_PA5                                 32  0x00000020 (const dword)  (not used)
M_PA6                                 64  0x00000040 (const dword)  (not used)
M_PA7                                128  0x00000080 (const dword)  (not used)
M_PA8                                256  0x00000100 (const dword)  (not used)
M_PA9                                512  0x00000200 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                               10123  0x0000278b (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -55  0xffffffc9 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
media_Flush                         -218  0xffffff26 (PmmC func) args[0] r=1  (not used)
media_Image                         -217  0xffffff27 (PmmC func) args[2] r=0  (not used)
media_Init                          -219  0xffffff25 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -213  0xffffff2b (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -214  0xffffff2a (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                       93  0x0000005d (const dword)  (not used)
MEDIA_SECTOR_LO                       92  0x0000005c (const dword)  (not used)
media_SetAdd                        -209  0xffffff2f (PmmC func) args[2] r=0  (not used)
media_SetSector                     -210  0xffffff2e (PmmC func) args[2] r=0  (not used)
media_Video                         -207  0xffffff31 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -208  0xffffff30 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
media_WrSector                      -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -413  0xfffffe63 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -414  0xfffffe62 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -415  0xfffffe61 (PmmC func) args[1] r=1  (not used)
mem_ArrayOp1                         -67  0xffffffbd (PmmC func) args[4] r=0  (not used)
mem_ArrayOp2                         -68  0xffffffbc (PmmC func) args[5] r=0  (not used)
mem_Compare                         -421  0xfffffe5b (PmmC func) args[3] r=1  (not used)
mem_Copy                            -420  0xfffffe5c (PmmC func) args[3] r=1  (not used)
mem_Free                            -417  0xfffffe5f (PmmC func) args[1] r=1  (not used)
mem_Heap                            -418  0xfffffe5e (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -416  0xfffffe60 (PmmC func) args[2] r=1  (not used)
mem_Set                             -419  0xfffffe5d (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -54  0xffffffca (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 3)
nak0                               14207  0x0000377f (User func) args[0] r=0  (usage 24)
nAniTimers                             0  0x00000000 (const dword)  (not used)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                              322  0x00000142 (const dword)  (usage 3)
nObjects                             227  0x000000e3 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
NP_565                                 0  0x00000000 (const dword)  (not used)
NP_RGB                                 1  0x00000001 (const dword)  (not used)
NP_Write                            -535  0xfffffde9 (PmmC func) args[7] r=1  (not used)
NP_XRGB                                2  0x00000002 (const dword)  (not used)
nStrings                              54  0x00000036 (const dword)  (usage 3)
NybleSwap                            -50  0xffffffce (PmmC func) args[1] r=1  (not used)
o4Dbuttons                          9181  0x000023ddo4Dbuttons                          9181  0x000023dd (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAngularmeters                      8865  0x000022a1oAngularmeters                      8865  0x000022a1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oAniButtons                         9183  0x000023dfoAniButtons                         9183  0x000023df (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       9185  0x000023e1oColorPickers                       9185  0x000023e1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCoolgauges                         8867  0x000022a3oCoolgauges                         8867  0x000022a3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oCustomdigitss                      8869  0x000022a5oCustomdigitss                      8869  0x000022a5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oDipSwitchs                         8833  0x00002281oDipSwitchs                         8833  0x00002281 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              8871  0x000022a7oForms                              8871  0x000022a7 (mem) word[44] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
Ofs_Digits_Digits                      2  0x00000002 (const dword)  (usage 9)
Ofs_Digits_LeadingBlanks               8  0x00000008 (const dword)  (usage 3)
Ofs_Digits_Left                        0  0x00000000 (const dword)  (usage 3)
Ofs_Digits_MinDigits                   4  0x00000004 (const dword)  (usage 3)
Ofs_Digits_Widthdigit                  6  0x00000006 (const dword)  (usage 3)
Ofs_IPD_DOWN                          16  0x00000010 (const dword)  (usage 6)
Ofs_IPD_OBJVIDX                       20  0x00000014 (const dword)  (usage 15)
Ofs_IPD_P1                             2  0x00000002 (const dword)  (usage 15)
Ofs_IPD_P2                             4  0x00000004 (const dword)  (usage 48)
Ofs_IPD_P3                             6  0x00000006 (const dword)  (usage 9)
Ofs_IPD_P4                             8  0x00000008 (const dword)  (usage 3)
Ofs_IPD_P5                            10  0x0000000a (const dword)  (usage 9)
Ofs_IPD_P6                            12  0x0000000c (const dword)  (usage 18)
Ofs_IPD_P7                            14  0x0000000e (const dword)  (not used)
Ofs_IPD_RELEASE                       18  0x00000012 (const dword)  (usage 9)
Ofs_String_Ansi                       22  0x00000016 (const dword)  (usage 3)
Ofs_String_BGColor                    16  0x00000010 (const dword)  (usage 6)
Ofs_String_FGColor                    14  0x0000000e (const dword)  (usage 3)
Ofs_String_FontAttribs                18  0x00000012 (const dword)  (usage 3)
Ofs_String_Form                       24  0x00000018 (const dword)  (usage 3)
Ofs_String_Size                        4  0x00000004 (const dword)  (usage 3)
Ofs_String_StartH                      0  0x00000000 (const dword)  (usage 3)
Ofs_String_StartL                      2  0x00000002 (const dword)  (usage 3)
Ofs_String_Transparent                20  0x00000014 (const dword)  (usage 3)
Ofs_String_x1                          6  0x00000006 (const dword)  (usage 12)
Ofs_String_x2                         10  0x0000000a (const dword)  (usage 9)
Ofs_String_y1                          8  0x00000008 (const dword)  (usage 12)
Ofs_String_y2                         12  0x0000000c (const dword)  (usage 9)
oGauges                             8959  0x000022ffoGauges                             8959  0x000022ff (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oGSliders                           8841  0x00002289oGSliders                           8841  0x00002289 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oImages                             8961  0x00002301oImages                             8961  0x00002301 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKeyboards                          8963  0x00002303oKeyboards                          8963  0x00002303 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oKnobs                              8835  0x00002283oKnobs                              8835  0x00002283 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLedDigitsn                         9587  0x00002573oLedDigitsn                         9587  0x00002573 (mem) word[15] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 6)
oLeddigitss                         8967  0x00002307oLeddigitss                         8967  0x00002307 (mem) word[4] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 9)
oLeds                               8965  0x00002305oLeds                               8965  0x00002305 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             8975  0x0000230foMeters                             8975  0x0000230f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                             220  0x000000dc (mem) word[34] (global)  (usage 108)
OP1_ADD                                5  0x00000005 (const dword)  (not used)
OP1_AND                                2  0x00000002 (const dword)  (not used)
OP1_BLACKEN                           16  0x00000010 (const dword)  (not used)
OP1_DARKEN                            18  0x00000012 (const dword)  (not used)
OP1_DIV                                8  0x00000008 (const dword)  (not used)
OP1_GRAY                              14  0x0000000e (const dword)  (not used)
OP1_IOR                                3  0x00000003 (const dword)  (not used)
OP1_LIGHTEN                           17  0x00000011 (const dword)  (not used)
OP1_MUL                                7  0x00000007 (const dword)  (not used)
OP1_NOP                                0  0x00000000 (const dword)  (not used)
OP1_REV                                9  0x00000009 (const dword)  (not used)
OP1_ROL                               12  0x0000000c (const dword)  (not used)
OP1_ROR                               13  0x0000000d (const dword)  (not used)
OP1_SET                                1  0x00000001 (const dword)  (not used)
OP1_SHL                               10  0x0000000a (const dword)  (not used)
OP1_SHR                               11  0x0000000b (const dword)  (not used)
OP1_SUB                                6  0x00000006 (const dword)  (not used)
OP1_WHITEN                            15  0x0000000f (const dword)  (not used)
OP1_XOR                                4  0x00000004 (const dword)  (not used)
OP2_ADD                                4  0x00000004 (const dword)  (not used)
OP2_AND                                1  0x00000001 (const dword)  (not used)
OP2_BLEND                              9  0x00000009 (const dword)  (not used)
OP2_COPY                               8  0x00000008 (const dword)  (not used)
OP2_DIV                                7  0x00000007 (const dword)  (not used)
OP2_IOR                                2  0x00000002 (const dword)  (not used)
OP2_MUL                                6  0x00000006 (const dword)  (not used)
OP2_SUB                                5  0x00000005 (const dword)  (not used)
OP2_XOR                                3  0x00000003 (const dword)  (not used)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
oPinInputs                          9179  0x000023dboPinInputs                          9179  0x000023db (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oPinOutputs                         9495  0x00002517oPinOutputs                         9495  0x00002517 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      8837  0x00002285oRockerSwitchs                      8837  0x00002285 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oRotarySwitchs                      8839  0x00002287oRotarySwitchs                      8839  0x00002287 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oScopes                             9139  0x000023b3oScopes                             9139  0x000023b3 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
oSoundss                            9493  0x00002515oSoundss                            9493  0x00002515 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oSpectrums                          9137  0x000023b1oSpectrums                          9137  0x000023b1 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStaticTexts                        9095  0x00002387oStaticTexts                        9095  0x00002387 (mem) word[21] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oStringss                           8977  0x00002311oStringss                           8977  0x00002311 (mem) word[55] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 4)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 81)
OT_MAGIC                             108  0x0000006c (const dword)  (usage 3)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 420)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 3)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 3)
oTanks                              9141  0x000023b5oTanks                              9141  0x000023b5 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oThermometers                       9087  0x0000237foThermometers                       9087  0x0000237f (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTimers                             9491  0x00002513oTimers                             9491  0x00002513 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oTrackbars                          8843  0x0000228boTrackbars                          8843  0x0000228b (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserButtons                        9187  0x000023e3oUserButtons                        9187  0x000023e3 (mem) word[152] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
oUserImagess                        9143  0x000023b7oUserImagess                        9143  0x000023b7 (mem) word[18] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
oUserleds                           9089  0x00002381oUserleds                           9089  0x00002381 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OutputCS                             544  0x00000220 (mem) word (global)  (usage 9)
OVF                                  -63  0xffffffc1 (PmmC func) args[0] r=1  (usage 3)
oVideos                             9091  0x00002383oVideos                             9091  0x00002383 (mem) word[2] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 3)
OW_Read                             -523  0xfffffdf5 (PmmC func) args[1] r=1  (not used)
OW_Read9                            -524  0xfffffdf4 (PmmC func) args[1] r=1  (not used)
OW_Reset                            -522  0xfffffdf6 (PmmC func) args[1] r=1  (not used)
OW_Write                            -525  0xfffffdf3 (PmmC func) args[2] r=0  (not used)
oWinButtons                         8845  0x0000228doWinButtons                         8845  0x0000228d (mem) word[10] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (usage 12)
PA0                                    1  0x00000001 (const dword)  (not used)
PA1                                    2  0x00000002 (const dword)  (not used)
PA10                                  11  0x0000000b (const dword)  (not used)
PA11                                  12  0x0000000c (const dword)  (not used)
PA12                                  13  0x0000000d (const dword)  (not used)
PA13                                  14  0x0000000e (const dword)  (not used)
PA14                                  15  0x0000000f (const dword)  (not used)
PA15                                  16  0x00000010 (const dword)  (not used)
PA2                                    3  0x00000003 (const dword)  (not used)
PA3                                    4  0x00000004 (const dword)  (not used)
PA4                                    5  0x00000005 (const dword)  (not used)
PA5                                    6  0x00000006 (const dword)  (not used)
PA6                                    7  0x00000007 (const dword)  (not used)
PA7                                    8  0x00000008 (const dword)  (not used)
PA8                                    9  0x00000009 (const dword)  (not used)
PA9                                   10  0x0000000a (const dword)  (not used)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_FRAME                            3  0x00000003 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -34  0xffffffde (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PIN_AN                                 5  0x00000005 (const dword)  (not used)
PIN_ANAVG                              6  0x00000006 (const dword)  (not used)
pin_Counter                         -514  0xfffffdfe (PmmC func) args[3] r=1  (not used)
PIN_COUNTER_PA4                      123  0x0000007b (const dword)  (not used)
PIN_COUNTER_PA5                      124  0x0000007c (const dword)  (not used)
PIN_COUNTER_PA6                      125  0x0000007d (const dword)  (not used)
PIN_COUNTER_PA7                      126  0x0000007e (const dword)  (not used)
PIN_COUNTER_PA8                      127  0x0000007f (const dword)  (not used)
PIN_COUNTER_PA9                      128  0x00000080 (const dword)  (not used)
PIN_EVENT_PA4                        129  0x00000081 (const dword)  (not used)
PIN_EVENT_PA5                        130  0x00000082 (const dword)  (not used)
PIN_EVENT_PA6                        131  0x00000083 (const dword)  (not used)
PIN_EVENT_PA7                        132  0x00000084 (const dword)  (not used)
PIN_EVENT_PA8                        133  0x00000085 (const dword)  (not used)
PIN_EVENT_PA9                        134  0x00000086 (const dword)  (not used)
pin_HI                              -113  0xffffff8f (PmmC func) args[1] r=1  (not used)
PIN_INP                                0  0x00000000 (const dword)  (not used)
PIN_INP_HI                             1  0x00000001 (const dword)  (not used)
PIN_INP_LO                             2  0x00000002 (const dword)  (not used)
pin_LO                              -114  0xffffff8e (PmmC func) args[1] r=1  (not used)
PIN_OUT                                3  0x00000003 (const dword)  (not used)
PIN_OUT_OD                             4  0x00000004 (const dword)  (not used)
pin_Pulseout                        -512  0xfffffe00 (PmmC func) args[2] r=1  (not used)
pin_PulseoutB                       -513  0xfffffdff (PmmC func) args[2] r=1  (not used)
pin_PulseoutCount                   -519  0xfffffdf9 (PmmC func) args[4] r=1  (not used)
pin_Read                            -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
pin_Set                             -112  0xffffff90 (PmmC func) args[2] r=1  (not used)
pin_Val                             -115  0xffffff8d (PmmC func) args[2] r=0  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
pInputIndex                          300  0x0000012c (mem) word (global)  (usage 18)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -35  0xffffffdd (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                       14242  0x000037a2 (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PTN_BDIAGONAL                      65518  0x0000ffee (const ??? 0)  (not used)
PTN_BRICKS                         65521  0x0000fff1 (const ??? 0)  (not used)
PTN_BS_HORIZONTAL                  65510  0x0000ffe6 (const ??? 0)  (not used)
PTN_BS_VERTICAL                    65509  0x0000ffe5 (const ??? 0)  (not used)
PTN_BSHORIZONTAL                   65516  0x0000ffec (const ??? 0)  (not used)
PTN_BSVERTICAL                     65515  0x0000ffeb (const ??? 0)  (not used)
PTN_CARGONET                       65522  0x0000fff2 (const ??? 0)  (not used)
PTN_CIRCUITS                       65523  0x0000fff3 (const ??? 0)  (not used)
PTN_COBBLESTONES                   65524  0x0000fff4 (const ??? 0)  (not used)
PTN_COURSE_B_DIAGONAL              65512  0x0000ffe8 (const ??? 0)  (not used)
PTN_COURSE_CROSS                   65513  0x0000ffe9 (const ??? 0)  (not used)
PTN_COURSE_DIAGONALCROSS           65514  0x0000ffea (const ??? 0)  (not used)
PTN_COURSE_DOTS                    65508  0x0000ffe4 (const ??? 0)  (not used)
PTN_COURSE_F_DIAGONAL              65511  0x0000ffe7 (const ??? 0)  (not used)
PTN_CROSSES                        65535  0x0000ffff (const ??? 0)  (not used)
PTN_DAISIES                        65525  0x0000fff5 (const ??? 0)  (not used)
PTN_DIZZY                          65526  0x0000fff6 (const ??? 0)  (not used)
PTN_EMPTY                          65504  0x0000ffe0 (const dword)  (not used)
PTN_FDIAGONAL                      65517  0x0000ffed (const ??? 0)  (not used)
PTN_FIELDEFFECT                    65527  0x0000fff7 (const ??? 0)  (not used)
PTN_FINE_CROSS                     65519  0x0000ffef (const ??? 0)  (not used)
PTN_FINE_DIAGONAL_CROSS            65520  0x0000fff0 (const ??? 0)  (not used)
PTN_FINE_DOTS                      65506  0x0000ffe2 (const ??? 0)  (not used)
PTN_KEY                            65528  0x0000fff8 (const ??? 0)  (not used)
PTN_MEDIUM_DOTS                    65507  0x0000ffe3 (const ??? 0)  (not used)
PTN_ROUNDER                        65529  0x0000fff9 (const ??? 0)  (not used)
PTN_SCALES                         65530  0x0000fffa (const ??? 0)  (not used)
PTN_SOLID                          65505  0x0000ffe1 (const ??? 0)  (not used)
PTN_STONE                          65531  0x0000fffb (const ??? 0)  (not used)
PTN_THATCHES                       65532  0x0000fffc (const ??? 0)  (not used)
PTN_TILE                           65533  0x0000fffd (const ??? 0)  (not used)
PTN_WAFFLESREVENGE                 65534  0x0000fffe (const ??? 0)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putchXY                               -3  0xfffffffd (PmmC func) args[3] r=0  (not used)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putnumXY                             -51  0xffffffcd (PmmC func) args[4] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 6)
putstrCentred                         -5  0xfffffffb (PmmC func) args[3] r=0  (not used)
putstrXY                              -4  0xfffffffc (PmmC func) args[3] r=0  (not used)
PWM_BINARY                             3  0x00000003 (const dword)  (not used)
pwm_Init                            -521  0xfffffdf7 (PmmC func) args[3] r=1  (not used)
PWM_OFF                                0  0x00000000 (const dword)  (not used)
PWM_PLAIN                              1  0x00000001 (const dword)  (not used)
PWM_SERVO                              2  0x00000002 (const dword)  (not used)
QEN1_COUNTER_HI                      136  0x00000088 (const dword)  (not used)
QEN1_COUNTER_LO                      135  0x00000087 (const dword)  (not used)
QEN1_DELTA                           137  0x00000089 (const dword)  (not used)
QEN2_COUNTER_HI                      139  0x0000008b (const dword)  (not used)
QEN2_COUNTER_LO                      138  0x0000008a (const dword)  (not used)
QEN2_DELTA                           140  0x0000008c (const dword)  (not used)
Qencoder1                           -515  0xfffffdfd (PmmC func) args[3] r=1  (not used)
Qencoder1Reset                      -517  0xfffffdfb (PmmC func) args[0] r=0  (not used)
Qencoder2                           -516  0xfffffdfc (PmmC func) args[3] r=1  (not used)
Qencoder2Reset                      -518  0xfffffdfa (PmmC func) args[0] r=0  (not used)
RAND                                 -59  0xffffffc5 (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
RANDVAL                              -60  0xffffffc4 (PmmC func) args[2] r=1  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                         13954  0x00003682 (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (not used)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_MAGIC_EVENT_BYTES              10  0x0000000a (const dword)  (not used)
REPORT_MAGIC_EVENT_DBYTES             11  0x0000000b (const dword)  (not used)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
rKeyboardRoutines                   9585  0x00002571rKeyboardRoutines                   9585  0x00002571 (mem) word[1] (member of V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SAVE_TO_DISK                           7  0x00000007 (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -61  0xffffffc3 (PmmC func) args[1] r=0  (not used)
SendReport                         14140  0x0000373c (User func) args[4] r=0  (usage 6)
serin                               -236  0xffffff14 (PmmC func) args[0] r=1  (usage 3)
serin1                              -237  0xffffff13 (PmmC func) args[0] r=1  (not used)
serin2                              -238  0xffffff12 (PmmC func) args[0] r=1  (not used)
serin3                              -239  0xffffff11 (PmmC func) args[0] r=1  (not used)
serinX                               N/A         N/A (macro) serin   (not used)
serout                              -240  0xffffff10 (PmmC func) args[1] r=0  (usage 21)
serout1                             -241  0xffffff0f (PmmC func) args[1] r=0  (not used)
serout2                             -242  0xffffff0e (PmmC func) args[1] r=0  (not used)
serout3                             -243  0xffffff0d (PmmC func) args[1] r=0  (not used)
seroutCS                           14223  0x0000378f (User func) args[1] r=0  (usage 15)
seroutOcs                          14190  0x0000376e (User func) args[0] r=0  (usage 3)
seroutX                              N/A         N/A (macro) serout   (not used)
setbaud                             -224  0xffffff20 (PmmC func) args[1] r=0  (not used)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -57  0xffffffc7 (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -461  0xfffffe33 (PmmC func) args[1] r=0  (usage 3)
snd_Continue                        -464  0xfffffe30 (PmmC func) args[0] r=0  (not used)
snd_Freq                            -466  0xfffffe2e (PmmC func) args[2] r=1  (not used)
snd_Pause                           -463  0xfffffe31 (PmmC func) args[0] r=0  (not used)
snd_Pitch                           -460  0xfffffe34 (PmmC func) args[1] r=1  (not used)
snd_Playing                         -465  0xfffffe2f (PmmC func) args[0] r=1  (not used)
snd_Stop                            -462  0xfffffe32 (PmmC func) args[0] r=0  (not used)
snd_Volume                          -459  0xfffffe35 (PmmC func) args[1] r=0  (not used)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
SPI1                                   1  0x00000001 (const dword)  (not used)
SPI16_MODE_0                           8  0x00000008 (const dword)  (not used)
SPI16_MODE_1                           9  0x00000009 (const dword)  (not used)
SPI16_MODE_2                          10  0x0000000a (const dword)  (not used)
SPI16_MODE_3                          11  0x0000000b (const dword)  (not used)
SPI16_MODE_4                          12  0x0000000c (const dword)  (not used)
SPI16_MODE_5                          13  0x0000000d (const dword)  (not used)
SPI16_MODE_6                          14  0x0000000e (const dword)  (not used)
SPI16_MODE_7                          15  0x0000000f (const dword)  (not used)
SPI1_Init                           -349  0xfffffea3 (PmmC func) args[2] r=1  (not used)
SPI1_Read                           -352  0xfffffea0 (PmmC func) args[0] r=1  (not used)
spi1_ReadBlock                      -333  0xfffffeb3 (PmmC func) args[2] r=0  (not used)
SPI1_SCK_pin                        -346  0xfffffea6 (PmmC func) args[1] r=1  (not used)
SPI1_SDI_pin                        -343  0xfffffea9 (PmmC func) args[1] r=1  (not used)
SPI1_SDO_pin                        -340  0xfffffeac (PmmC func) args[1] r=1  (not used)
SPI1_Write                          -355  0xfffffe9d (PmmC func) args[1] r=1  (not used)
spi1_WriteBlock                     -359  0xfffffe99 (PmmC func) args[2] r=0  (not used)
SPI2                                   2  0x00000002 (const dword)  (not used)
SPI2_Init                           -350  0xfffffea2 (PmmC func) args[2] r=1  (not used)
SPI2_Read                           -353  0xfffffe9f (PmmC func) args[0] r=1  (not used)
spi2_ReadBlock                      -334  0xfffffeb2 (PmmC func) args[2] r=0  (not used)
SPI2_SCK_pin                        -347  0xfffffea5 (PmmC func) args[1] r=1  (not used)
SPI2_SDI_pin                        -344  0xfffffea8 (PmmC func) args[1] r=1  (not used)
SPI2_SDO_pin                        -341  0xfffffeab (PmmC func) args[1] r=1  (not used)
SPI2_Write                          -356  0xfffffe9c (PmmC func) args[1] r=1  (not used)
spi2_WriteBlock                     -360  0xfffffe98 (PmmC func) args[2] r=0  (not used)
SPI3                                   3  0x00000003 (const dword)  (not used)
SPI3_Init                           -351  0xfffffea1 (PmmC func) args[2] r=1  (not used)
SPI3_Read                           -354  0xfffffe9e (PmmC func) args[0] r=1  (not used)
spi3_ReadBlock                      -335  0xfffffeb1 (PmmC func) args[2] r=0  (not used)
SPI3_SCK_pin                        -348  0xfffffea4 (PmmC func) args[1] r=1  (not used)
SPI3_SDI_pin                        -345  0xfffffea7 (PmmC func) args[1] r=1  (not used)
SPI3_SDO_pin                        -342  0xfffffeaa (PmmC func) args[1] r=1  (not used)
SPI3_Write                          -357  0xfffffe9b (PmmC func) args[1] r=1  (not used)
spi3_WriteBlock                     -361  0xfffffe97 (PmmC func) args[2] r=0  (not used)
SPI8_MODE_0                            0  0x00000000 (const dword)  (not used)
SPI8_MODE_1                            1  0x00000001 (const dword)  (not used)
SPI8_MODE_2                            2  0x00000002 (const dword)  (not used)
SPI8_MODE_3                            3  0x00000003 (const dword)  (not used)
SPI8_MODE_4                            4  0x00000004 (const dword)  (not used)
SPI8_MODE_5                            5  0x00000005 (const dword)  (not used)
SPI8_MODE_6                            6  0x00000006 (const dword)  (not used)
SPI8_MODE_7                            7  0x00000007 (const dword)  (not used)
spi_Disable                         -339  0xfffffead (PmmC func) args[0] r=0  (not used)
spi_Init                            -336  0xfffffeb0 (PmmC func) args[3] r=0  (not used)
spi_Read                            -337  0xfffffeaf (PmmC func) args[0] r=1  (not used)
spi_ReadBlock                       -332  0xfffffeb4 (PmmC func) args[2] r=0  (not used)
SPI_SPEED0                             0  0x00000000 (const dword)  (not used)
SPI_SPEED1                             1  0x00000001 (const dword)  (not used)
SPI_SPEED10                           10  0x0000000a (const dword)  (not used)
SPI_SPEED11                           11  0x0000000b (const dword)  (not used)
SPI_SPEED12                           12  0x0000000c (const dword)  (not used)
SPI_SPEED13                           13  0x0000000d (const dword)  (not used)
SPI_SPEED14                           14  0x0000000e (const dword)  (not used)
SPI_SPEED15                           15  0x0000000f (const dword)  (not used)
SPI_SPEED2                             2  0x00000002 (const dword)  (not used)
SPI_SPEED3                             3  0x00000003 (const dword)  (not used)
SPI_SPEED4                             4  0x00000004 (const dword)  (not used)
SPI_SPEED5                             5  0x00000005 (const dword)  (not used)
SPI_SPEED6                             6  0x00000006 (const dword)  (not used)
SPI_SPEED7                             7  0x00000007 (const dword)  (not used)
SPI_SPEED8                             8  0x00000008 (const dword)  (not used)
SPI_SPEED9                             9  0x00000009 (const dword)  (not used)
spi_Write                           -338  0xfffffeae (PmmC func) args[1] r=0  (not used)
spi_WriteBlock                      -358  0xfffffe9a (PmmC func) args[2] r=0  (not used)
spiflash_BlockErase                 -541  0xfffffde3 (PmmC func) args[3] r=0  (not used)
spiflash_BulkErase                  -540  0xfffffde4 (PmmC func) args[2] r=0  (not used)
spiflash_Exec                       -554  0xfffffdd6 (PmmC func) args[3] r=1  (not used)
spiflash_GetC                       -547  0xfffffddd (PmmC func) args[2] r=1  (not used)
spiflash_GetS                       -551  0xfffffdd9 (PmmC func) args[4] r=1  (not used)
spiflash_GetW                       -549  0xfffffddb (PmmC func) args[2] r=1  (not used)
spiflash_ID                         -539  0xfffffde5 (PmmC func) args[2] r=1  (not used)
spiflash_Image                      -545  0xfffffddf (PmmC func) args[4] r=1  (not used)
spiflash_LoadFunction               -552  0xfffffdd8 (PmmC func) args[2] r=1  (not used)
spiflash_LoadImageControl           -555  0xfffffdd5 (PmmC func) args[2] r=1  (not used)
spiflash_PlayWAV                    -556  0xfffffdd4 (PmmC func) args[2] r=1  (not used)
spiflash_PutC                       -546  0xfffffdde (PmmC func) args[3] r=0  (not used)
spiflash_PutS                       -550  0xfffffdda (PmmC func) args[3] r=1  (not used)
spiflash_PutW                       -548  0xfffffddc (PmmC func) args[3] r=0  (not used)
spiflash_Read                       -543  0xfffffde1 (PmmC func) args[4] r=1  (not used)
spiflash_Run                        -553  0xfffffdd7 (PmmC func) args[3] r=1  (not used)
spiflash_SetAdd                     -542  0xfffffde2 (PmmC func) args[3] r=0  (not used)
spiflash_SIG                        -538  0xfffffde6 (PmmC func) args[2] r=1  (not used)
spiflash_Write                      -544  0xfffffde0 (PmmC func) args[4] r=1  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -62  0xffffffc2 (PmmC func) args[1] r=1  (not used)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -487  0xfffffe19 (PmmC func) args[3] r=1  (not used)
str_Cat                             -485  0xfffffe1b (PmmC func) args[2] r=1  (not used)
str_CatN                            -486  0xfffffe1a (PmmC func) args[3] r=1  (not used)
str_Copy                            -488  0xfffffe18 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -489  0xfffffe17 (PmmC func) args[3] r=1  (not used)
str_Find                            -481  0xfffffe1f (PmmC func) args[2] r=1  (not used)
str_FindI                           -482  0xfffffe1e (PmmC func) args[2] r=1  (not used)
str_GetByte                         -475  0xfffffe25 (PmmC func) args[1] r=1  (not used)
str_GetC                            -474  0xfffffe26 (PmmC func) args[2] r=1  (not used)
str_GetD                            -471  0xfffffe29 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -473  0xfffffe27 (PmmC func) args[2] r=1  (not used)
str_GetW                            -472  0xfffffe28 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -476  0xfffffe24 (PmmC func) args[1] r=1  (not used)
str_Length                          -483  0xfffffe1d (PmmC func) args[1] r=1  (not used)
str_Match                           -479  0xfffffe21 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -480  0xfffffe20 (PmmC func) args[2] r=1  (not used)
str_Printf                          -484  0xfffffe1c (PmmC func) args[2] r=1  (not used)
str_Ptr                             -470  0xfffffe2a (PmmC func) args[1] r=1  (not used)
str_PutByte                         -477  0xfffffe23 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -478  0xfffffe22 (PmmC func) args[2] r=0  (not used)
strheight                            -14  0xfffffff2 (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                           7  0x00000007 (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      2560  0x00000a00 (const dword)  (usage 3)
Strings10Size                          0  0x00000000 (const dword)  (not used)
Strings10StartH                        0  0x00000000 (const dword)  (not used)
Strings10StartL                        0  0x00000000 (const dword)  (not used)
Strings11Count                         1  0x00000001 (const dword)  (not used)
Strings11Size                         73  0x00000049 (const dword)  (usage 3)
Strings11StartH                        0  0x00000000 (const dword)  (usage 3)
Strings11StartL                     7168  0x00001c00 (const dword)  (usage 3)
Strings12Count                         1  0x00000001 (const dword)  (not used)
Strings12Size                         14  0x0000000e (const dword)  (usage 3)
Strings12StartH                        0  0x00000000 (const dword)  (usage 3)
Strings12StartL                     5120  0x00001400 (const dword)  (usage 3)
Strings13Count                         1  0x00000001 (const dword)  (not used)
Strings13Size                          3  0x00000003 (const dword)  (usage 3)
Strings13StartH                        0  0x00000000 (const dword)  (usage 3)
Strings13StartL                    19456  0x00004c00 (const dword)  (usage 3)
Strings14Count                         1  0x00000001 (const dword)  (not used)
Strings14Size                         23  0x00000017 (const dword)  (usage 3)
Strings14StartH                        0  0x00000000 (const dword)  (usage 3)
Strings14StartL                     5632  0x00001600 (const dword)  (usage 3)
Strings15Count                         1  0x00000001 (const dword)  (not used)
Strings15Size                         24  0x00000018 (const dword)  (usage 3)
Strings15StartH                        0  0x00000000 (const dword)  (usage 3)
Strings15StartL                     6656  0x00001a00 (const dword)  (usage 3)
Strings16Count                         0  0x00000000 (const dword)  (not used)
Strings16Size                          1  0x00000001 (const dword)  (usage 3)
Strings16StartH                        0  0x00000000 (const dword)  (usage 3)
Strings16StartL                     6144  0x00001800 (const dword)  (usage 3)
Strings17Size                          0  0x00000000 (const dword)  (not used)
Strings17StartH                        0  0x00000000 (const dword)  (not used)
Strings17StartL                        0  0x00000000 (const dword)  (not used)
Strings18Size                          0  0x00000000 (const dword)  (not used)
Strings18StartH                        0  0x00000000 (const dword)  (not used)
Strings18StartL                        0  0x00000000 (const dword)  (not used)
Strings19Count                         1  0x00000001 (const dword)  (not used)
Strings19Size                         94  0x0000005e (const dword)  (usage 3)
Strings19StartH                        0  0x00000000 (const dword)  (usage 3)
Strings19StartL                    15872  0x00003e00 (const dword)  (usage 3)
Strings1Count                          1  0x00000001 (const dword)  (not used)
Strings1Size                          30  0x0000001e (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                         0  0x00000000 (const dword)  (usage 3)
Strings20Size                          0  0x00000000 (const dword)  (not used)
Strings20StartH                        0  0x00000000 (const dword)  (not used)
Strings20StartL                        0  0x00000000 (const dword)  (not used)
Strings21Size                          0  0x00000000 (const dword)  (not used)
Strings21StartH                        0  0x00000000 (const dword)  (not used)
Strings21StartL                        0  0x00000000 (const dword)  (not used)
Strings22Size                          0  0x00000000 (const dword)  (not used)
Strings22StartH                        0  0x00000000 (const dword)  (not used)
Strings22StartL                        0  0x00000000 (const dword)  (not used)
Strings23Size                          0  0x00000000 (const dword)  (not used)
Strings23StartH                        0  0x00000000 (const dword)  (not used)
Strings23StartL                        0  0x00000000 (const dword)  (not used)
Strings24Count                         1  0x00000001 (const dword)  (not used)
Strings24Size                         26  0x0000001a (const dword)  (usage 3)
Strings24StartH                        0  0x00000000 (const dword)  (usage 3)
Strings24StartL                     7680  0x00001e00 (const dword)  (usage 3)
Strings25Count                         1  0x00000001 (const dword)  (not used)
Strings25Size                         10  0x0000000a (const dword)  (usage 3)
Strings25StartH                        0  0x00000000 (const dword)  (usage 3)
Strings25StartL                     8192  0x00002000 (const dword)  (usage 3)
Strings26Count                         1  0x00000001 (const dword)  (not used)
Strings26Size                         10  0x0000000a (const dword)  (usage 3)
Strings26StartH                        0  0x00000000 (const dword)  (usage 3)
Strings26StartL                     8704  0x00002200 (const dword)  (usage 3)
Strings27Count                         1  0x00000001 (const dword)  (not used)
Strings27Size                         11  0x0000000b (const dword)  (usage 3)
Strings27StartH                        0  0x00000000 (const dword)  (usage 3)
Strings27StartL                     9216  0x00002400 (const dword)  (usage 3)
Strings28Size                          0  0x00000000 (const dword)  (not used)
Strings28StartH                        0  0x00000000 (const dword)  (not used)
Strings28StartL                        0  0x00000000 (const dword)  (not used)
Strings29Count                         1  0x00000001 (const dword)  (not used)
Strings29Size                         53  0x00000035 (const dword)  (usage 3)
Strings29StartH                        0  0x00000000 (const dword)  (usage 3)
Strings29StartL                    16384  0x00004000 (const dword)  (usage 3)
Strings2Count                          0  0x00000000 (const dword)  (not used)
Strings2Size                           1  0x00000001 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                      2048  0x00000800 (const dword)  (usage 3)
Strings30Count                         1  0x00000001 (const dword)  (not used)
Strings30Size                         27  0x0000001b (const dword)  (usage 3)
Strings30StartH                        0  0x00000000 (const dword)  (usage 3)
Strings30StartL                    16896  0x00004200 (const dword)  (usage 3)
Strings31Count                         1  0x00000001 (const dword)  (not used)
Strings31Size                          7  0x00000007 (const dword)  (usage 3)
Strings31StartH                        0  0x00000000 (const dword)  (usage 3)
Strings31StartL                    17408  0x00004400 (const dword)  (usage 3)
Strings32Count                         1  0x00000001 (const dword)  (not used)
Strings32Size                         19  0x00000013 (const dword)  (usage 3)
Strings32StartH                        0  0x00000000 (const dword)  (usage 3)
Strings32StartL                    17920  0x00004600 (const dword)  (usage 3)
Strings33Size                          0  0x00000000 (const dword)  (not used)
Strings33StartH                        0  0x00000000 (const dword)  (not used)
Strings33StartL                        0  0x00000000 (const dword)  (not used)
Strings34Count                         0  0x00000000 (const dword)  (not used)
Strings34Size                          1  0x00000001 (const dword)  (usage 3)
Strings34StartH                        0  0x00000000 (const dword)  (usage 3)
Strings34StartL                     3584  0x00000e00 (const dword)  (usage 3)
Strings35Size                          0  0x00000000 (const dword)  (not used)
Strings35StartH                        0  0x00000000 (const dword)  (not used)
Strings35StartL                        0  0x00000000 (const dword)  (not used)
Strings36Count                         0  0x00000000 (const dword)  (not used)
Strings36Size                          1  0x00000001 (const dword)  (usage 3)
Strings36StartH                        0  0x00000000 (const dword)  (usage 3)
Strings36StartL                     4096  0x00001000 (const dword)  (usage 3)
Strings37Count                         0  0x00000000 (const dword)  (not used)
Strings37Size                          1  0x00000001 (const dword)  (usage 3)
Strings37StartH                        0  0x00000000 (const dword)  (usage 3)
Strings37StartL                     4608  0x00001200 (const dword)  (usage 3)
Strings38Count                         0  0x00000000 (const dword)  (not used)
Strings38Size                          1  0x00000001 (const dword)  (usage 3)
Strings38StartH                        0  0x00000000 (const dword)  (usage 3)
Strings38StartL                    10752  0x00002a00 (const dword)  (usage 3)
Strings39Count                         0  0x00000000 (const dword)  (not used)
Strings39Size                          1  0x00000001 (const dword)  (usage 3)
Strings39StartH                        0  0x00000000 (const dword)  (usage 3)
Strings39StartL                    11264  0x00002c00 (const dword)  (usage 3)
Strings3Count                          1  0x00000001 (const dword)  (not used)
Strings3Size                          18  0x00000012 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                       512  0x00000200 (const dword)  (usage 3)
Strings40Count                         1  0x00000001 (const dword)  (not used)
Strings40Size                          7  0x00000007 (const dword)  (usage 3)
Strings40StartH                        0  0x00000000 (const dword)  (usage 3)
Strings40StartL                    11776  0x00002e00 (const dword)  (usage 3)
Strings41Count                         1  0x00000001 (const dword)  (not used)
Strings41Size                          7  0x00000007 (const dword)  (usage 3)
Strings41StartH                        0  0x00000000 (const dword)  (usage 3)
Strings41StartL                    12288  0x00003000 (const dword)  (usage 3)
Strings42Count                         1  0x00000001 (const dword)  (not used)
Strings42Size                          7  0x00000007 (const dword)  (usage 3)
Strings42StartH                        0  0x00000000 (const dword)  (usage 3)
Strings42StartL                    12800  0x00003200 (const dword)  (usage 3)
Strings43Count                         0  0x00000000 (const dword)  (not used)
Strings43Size                          1  0x00000001 (const dword)  (usage 3)
Strings43StartH                        0  0x00000000 (const dword)  (usage 3)
Strings43StartL                    13312  0x00003400 (const dword)  (usage 3)
Strings44Count                         0  0x00000000 (const dword)  (not used)
Strings44Size                          1  0x00000001 (const dword)  (usage 3)
Strings44StartH                        0  0x00000000 (const dword)  (usage 3)
Strings44StartL                    13824  0x00003600 (const dword)  (usage 3)
Strings45Count                         0  0x00000000 (const dword)  (not used)
Strings45Size                          1  0x00000001 (const dword)  (usage 3)
Strings45StartH                        0  0x00000000 (const dword)  (usage 3)
Strings45StartL                    14336  0x00003800 (const dword)  (usage 3)
Strings46Count                         0  0x00000000 (const dword)  (not used)
Strings46Size                          1  0x00000001 (const dword)  (usage 3)
Strings46StartH                        0  0x00000000 (const dword)  (usage 3)
Strings46StartL                    19968  0x00004e00 (const dword)  (usage 3)
Strings47Count                         1  0x00000001 (const dword)  (not used)
Strings47Size                          3  0x00000003 (const dword)  (usage 3)
Strings47StartH                        0  0x00000000 (const dword)  (usage 3)
Strings47StartL                    20480  0x00005000 (const dword)  (usage 3)
Strings48Count                         0  0x00000000 (const dword)  (not used)
Strings48Size                          1  0x00000001 (const dword)  (usage 3)
Strings48StartH                        0  0x00000000 (const dword)  (usage 3)
Strings48StartL                    20992  0x00005200 (const dword)  (usage 3)
Strings49Count                         1  0x00000001 (const dword)  (not used)
Strings49Size                         17  0x00000011 (const dword)  (usage 3)
Strings49StartH                        0  0x00000000 (const dword)  (usage 3)
Strings49StartL                    18432  0x00004800 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          25  0x00000019 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings50Count                         0  0x00000000 (const dword)  (not used)
Strings50Size                          1  0x00000001 (const dword)  (usage 3)
Strings50StartH                        0  0x00000000 (const dword)  (usage 3)
Strings50StartL                    18944  0x00004a00 (const dword)  (usage 3)
Strings51Count                         0  0x00000000 (const dword)  (not used)
Strings51Size                          1  0x00000001 (const dword)  (usage 3)
Strings51StartH                        0  0x00000000 (const dword)  (usage 3)
Strings51StartL                    14848  0x00003a00 (const dword)  (usage 3)
Strings52Count                         0  0x00000000 (const dword)  (not used)
Strings52Size                          1  0x00000001 (const dword)  (usage 3)
Strings52StartH                        0  0x00000000 (const dword)  (usage 3)
Strings52StartL                    15360  0x00003c00 (const dword)  (usage 3)
Strings53Count                         1  0x00000001 (const dword)  (not used)
Strings53Size                         68  0x00000044 (const dword)  (usage 3)
Strings53StartH                        0  0x00000000 (const dword)  (usage 3)
Strings53StartL                    21504  0x00005400 (const dword)  (usage 3)
Strings5Size                           0  0x00000000 (const dword)  (not used)
Strings5StartH                         0  0x00000000 (const dword)  (not used)
Strings5StartL                         0  0x00000000 (const dword)  (not used)
Strings6Count                          1  0x00000001 (const dword)  (not used)
Strings6Size                          31  0x0000001f (const dword)  (usage 3)
Strings6StartH                         0  0x00000000 (const dword)  (usage 3)
Strings6StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings7Count                          0  0x00000000 (const dword)  (not used)
Strings7Size                           1  0x00000001 (const dword)  (usage 3)
Strings7StartH                         0  0x00000000 (const dword)  (usage 3)
Strings7StartL                      9728  0x00002600 (const dword)  (usage 3)
Strings8Count                          0  0x00000000 (const dword)  (not used)
Strings8Size                           1  0x00000001 (const dword)  (usage 3)
Strings8StartH                         0  0x00000000 (const dword)  (usage 3)
Strings8StartL                     10240  0x00002800 (const dword)  (usage 3)
Strings9Count                          0  0x00000000 (const dword)  (not used)
Strings9Size                           1  0x00000001 (const dword)  (usage 3)
Strings9StartH                         0  0x00000000 (const dword)  (usage 3)
Strings9StartL                      3072  0x00000c00 (const dword)  (usage 3)
stringsCV                            110  0x0000006e (mem) word[54] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                             -13  0xfffffff3 (PmmC func) args[1] r=1  (not used)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -56  0xffffffc8 (PmmC func) args[2] r=0  (not used)
sys_DeepSleep                       -405  0xfffffe6b (PmmC func) args[1] r=1  (not used)
sys_Driver                          -531  0xfffffded (PmmC func) args[0] r=0  (not used)
sys_ErrorMessage                    -534  0xfffffdea (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -396  0xfffffe74 (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -397  0xfffffe73 (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -398  0xfffffe72 (PmmC func) args[0] r=0  (usage 3)
sys_GetDate                         -401  0xfffffe6f (PmmC func) args[0] r=0  (not used)
sys_GetDateVar                      -528  0xfffffdf0 (PmmC func) args[3] r=0  (not used)
sys_GetTime                         -399  0xfffffe71 (PmmC func) args[0] r=0  (not used)
sys_GetTimer                        -394  0xfffffe76 (PmmC func) args[1] r=1  (not used)
sys_GetTimeVar                      -529  0xfffffdef (PmmC func) args[4] r=0  (not used)
sys_PmmC                            -530  0xfffffdee (PmmC func) args[0] r=0  (not used)
sys_SetDate                         -402  0xfffffe6e (PmmC func) args[3] r=1  (not used)
sys_SetTime                         -400  0xfffffe70 (PmmC func) args[3] r=1  (not used)
sys_SetTimer                        -393  0xfffffe77 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -395  0xfffffe75 (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -403  0xfffffe6d (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -368  0xfffffe90 (PmmC func) args[0] r=1  (not used)
sys_T                               -391  0xfffffe79 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -392  0xfffffe78 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 15)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 6)
TB1                                  100  0x00000064 (const dword)  (not used)
TB2                                  101  0x00000065 (const dword)  (not used)
TB3                                  102  0x00000066 (const dword)  (not used)
TB4                                  103  0x00000067 (const dword)  (not used)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ANGLE                            15  0x0000000f (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 3)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 3)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMagicObject                          34  0x00000022 (const dword)  (not used)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
to                                    -1  0xffffffff (PmmC func) args[1] r=0  (not used)
tolower                              -46  0xffffffd2 (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -406  0xfffffe6a (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -408  0xfffffe68 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -407  0xfffffe69 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
touch_TestArea                      -410  0xfffffe66 (PmmC func) args[1] r=1  (not used)
touch_TestBox                       -409  0xfffffe67 (PmmC func) args[1] r=1  (not used)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
TouchState                           296  0x00000128 (mem) word (global)  (usage 24)
TouchXpos                            290  0x00000122 (mem) word (global)  (usage 12)
TouchYpos                            292  0x00000124 (mem) word (global)  (usage 9)
toupper                              -45  0xffffffd3 (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 6)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 3)
TurnOffButtons                     13399  0x00003457 (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 459)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 45)
txt_Angle                            -33  0xffffffdf (PmmC func) args[1] r=1  (not used)
txt_Attributes                       -31  0xffffffe1 (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -19  0xffffffed (PmmC func) args[1] r=1  (usage 3)
txt_Bold                             -27  0xffffffe5 (PmmC func) args[1] r=1  (not used)
txt_Delay                            -25  0xffffffe7 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -18  0xffffffee (PmmC func) args[1] r=1  (usage 3)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontBank                         -52  0xffffffcc (PmmC func) args[2] r=1  (not used)
txt_FontID                           -20  0xffffffec (PmmC func) args[1] r=1  (usage 3)
txt_Height                           -22  0xffffffea (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Italic                           -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -16  0xfffffff0 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -17  0xffffffef (PmmC func) args[2] r=0  (not used)
txt_Underline                        -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Width                            -21  0xffffffeb (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -23  0xffffffe9 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -24  0xffffffe8 (PmmC func) args[1] r=1  (not used)
uadd_3232                            -71  0xffffffb9 (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                            -75  0xffffffb5 (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
udiv_3232                            -74  0xffffffb6 (PmmC func) args[3] r=1  (not used)
ULCD_35DT_DIABLO16_GFX                 0  0x00000000 (const ??? 0)  (not used)
umul_1616                            -73  0xffffffb7 (PmmC func) args[3] r=1  (usage 3)
UNCHECKED                              1  0x00000001 (const dword)  (not used)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                         -15  0xfffffff1 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                      12108  0x00002f4c (User func) args[1] r=0  (usage 3)
usub_3232                            -72  0xffffffb8 (PmmC func) args[3] r=1  (not used)
V:\P1405043 - INTERN - BCN3DSigma\Desenvolupament\Disseny\Firmware\RepRapBCN_TouchScreen\RepRap_Touchv1.4DWork\RepRap_Touchv1.4DGenieS    2803  0x00000af3 (const ??? 0)  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 126)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_MAGIC_BYTES                      8  0x00000008 (const dword)  (not used)
WRITE_MAGIC_DBYTES                     9  0x00000009 (const dword)  (not used)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_STR                              2  0x00000002 (const dword)  (usage 6)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 6)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                        13599  0x0000351f (User func) args[3] r=0  (usage 24)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
